/*
 * Copyright (C) HoloMatic Technology(Beijing) Co., Ltd. - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

/**
 * @file mat.cpp
 * @brief mat header file
 * @author duyanwei@holomatic.com
 * @date 2019-11-29
 */

#include <holo/localization/vision/common/mat.h>

namespace holo
{
namespace localization
{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Mat::Mat()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Mat::Mat(const holo::Image& image)
{
    // deep copy
    image.GetCvType().copyTo(mat_);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Mat::Mat(const Mat& other) : mat_(other.mat_)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Mat& Mat::operator=(const Mat& other)
{
    mat_ = other.mat_;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Mat::operator=(const uint8_t value)
{
    if (mat_.type() != CV_8UC1)
    {
        throw std::runtime_error("operator= of mat only supports element type of uint8_t");
    }
    (void)mat_.setTo(value);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Mat Mat::operator()(const RangeInt& row_range, const RangeInt& col_range) const noexcept
{
    return Mat(mat_(row_range.GetCvType(), col_range.GetCvType()));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Mat Mat::operator()(const Rect2i& rect) const noexcept
{
    return Mat(mat_(rect.GetCvType()));
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Mat::~Mat()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool_t Mat::IsEmpty() const noexcept
{
    return mat_.empty();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Mat Mat::Clone() const
{
    Mat out;
    out.mat_ = mat_.clone();
    return out;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Mat::CopyTo(Mat& other) const
{
    mat_.copyTo(other.mat_);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t Mat::GetWidth() const noexcept
{
    return static_cast<uint16_t>(mat_.cols);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
uint16_t Mat::GetHeight() const noexcept
{
    return static_cast<uint16_t>(mat_.rows);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Mat::Mat(const cv::Mat& mat) noexcept : mat_(mat)
{
}

}  // namespace localization
}  // namespace holo
