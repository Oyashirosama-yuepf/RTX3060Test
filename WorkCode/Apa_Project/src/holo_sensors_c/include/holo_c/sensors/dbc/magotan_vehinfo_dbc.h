/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2022年 03月 21日 星期一 17:36:06 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_gh01_magotan_vehinfo
 */

/**
 * @defgroup DB_gh01_magotan_vehinfo CAN Database gh01_magotan_vehinfo
 *
 * Path to file: output/gh01_magotan_vehinfo.dbc
 *
 * Provides the following ECUs:
 * - \ref ECU_Magotan
 */

/**
 * @defgroup ECU_Magotan Electronics Control Unit Magotan
 *
 * This ECU was defined in \ref DB_gh01_magotan_vehinfo.
 *
 * TX messages:
 *
 * RX signals:
 *
 * @ingroup DB_gh01_magotan_vehinfo
 */

/**
 * @defgroup MSG_Blinker Message Blinker (0x366)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Blinker_BM_ZV_auf
 * - \ref SIG_Blinker_BM_ZV_zu
 * - \ref SIG_Blinker_BM_DWA_ein
 * - \ref SIG_Blinker_BM_DWA_Alarm
 * - \ref SIG_Blinker_BM_Crash
 * - \ref SIG_Blinker_BM_Panik
 * - \ref SIG_Blinker_BM_Not_Bremsung
 * - \ref SIG_Blinker_BM_GDO
 * - \ref SIG_Blinker_BM_Warnblinken
 * - \ref SIG_Blinker_BM_Taxi_Notalarm
 * - \ref SIG_Blinker_BM_Telematik
 * - \ref SIG_Blinker_BM_links
 * - \ref SIG_Blinker_BM_rechts
 * - \ref SIG_Blinker_Blinken_li_Fzg_Takt
 * - \ref SIG_Blinker_Blinken_re_Fzg_Takt
 * - \ref SIG_Blinker_Blinken_li_Kombi_Takt
 * - \ref SIG_Blinker_Blinken_re_Kombi_Takt
 * - \ref SIG_Blinker_BM_NBA_n_codiert_n_aktiv
 * - \ref SIG_Blinker_BM_NBA_Status
 * - \ref SIG_Blinker_BM_WBT_Beleuchtung
 * - \ref SIG_Blinker_BM_HD_Oeffnung_angelernt
 * - \ref SIG_Blinker_BM_Autobahn
 * - \ref SIG_Blinker_BM_Rollenmodus_Blinken
 * - \ref SIG_Blinker_BM_Recas
 * - \ref SIG_Blinker_BM_Wischblinken
 * - \ref SIG_Blinker_BM_Telematik_Abbruchgrund
 *
 * @{
 */

/**
 * Message Blinker configuration tuple.
 */
#define MSG_Blinker                                 0x366, 0, 8

/**
 * Message Blinker id.
 */
#define ID_Blinker                                  0x366

/**
 * Message Blinker extended id bit.
 */
#define EXT_Blinker                                 0

/**
 * Message Blinker Data Length Count.
 */
#define DLC_Blinker                                 8

/**
 * Message Blinker cycle time.
 */
#define CYCLE_Blinker                               0

/**
 * Message Blinker fast cycle time.
 */
#define FAST_Blinker                                0

/**
 * Initialise message Blinker buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Blinker(buf) { \
	INITSIG_Blinker_BM_ZV_auf(buf); \
	INITSIG_Blinker_BM_ZV_zu(buf); \
	INITSIG_Blinker_BM_DWA_ein(buf); \
	INITSIG_Blinker_BM_DWA_Alarm(buf); \
	INITSIG_Blinker_BM_Crash(buf); \
	INITSIG_Blinker_BM_Panik(buf); \
	INITSIG_Blinker_BM_Not_Bremsung(buf); \
	INITSIG_Blinker_BM_GDO(buf); \
	INITSIG_Blinker_BM_Warnblinken(buf); \
	INITSIG_Blinker_BM_Taxi_Notalarm(buf); \
	INITSIG_Blinker_BM_Telematik(buf); \
	INITSIG_Blinker_BM_links(buf); \
	INITSIG_Blinker_BM_rechts(buf); \
	INITSIG_Blinker_Blinken_li_Fzg_Takt(buf); \
	INITSIG_Blinker_Blinken_re_Fzg_Takt(buf); \
	INITSIG_Blinker_Blinken_li_Kombi_Takt(buf); \
	INITSIG_Blinker_Blinken_re_Kombi_Takt(buf); \
	INITSIG_Blinker_BM_NBA_n_codiert_n_aktiv(buf); \
	INITSIG_Blinker_BM_NBA_Status(buf); \
	INITSIG_Blinker_BM_WBT_Beleuchtung(buf); \
	INITSIG_Blinker_BM_HD_Oeffnung_angelernt(buf); \
	INITSIG_Blinker_BM_Autobahn(buf); \
	INITSIG_Blinker_BM_Rollenmodus_Blinken(buf); \
	INITSIG_Blinker_BM_Recas(buf); \
	INITSIG_Blinker_BM_Wischblinken(buf); \
	INITSIG_Blinker_BM_Telematik_Abbruchgrund(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_YawRate_Status Message YawRate_Status (0x101)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_YawRate_Status_ESP_02_CRC
 * - \ref SIG_YawRate_Status_ESP_02_BZ
 * - \ref SIG_YawRate_Status_ESP_QBit_Gierrate
 * - \ref SIG_YawRate_Status_ESP_QBit_Laengsbeschl
 * - \ref SIG_YawRate_Status_ESP_QBit_Querb
 * - \ref SIG_YawRate_Status_ESP_Stillstandsflag
 * - \ref SIG_YawRate_Status_ESP_Querbeschleunigung
 * - \ref SIG_YawRate_Status_ESP_Laengsbeschl
 * - \ref SIG_YawRate_Status_ESC_Motorstartverzoegerung
 * - \ref SIG_YawRate_Status_ESC_SeitenwindAssistent_Eingriff
 * - \ref SIG_YawRate_Status_ESP_Anschleppstart_Freigabe
 * - \ref SIG_YawRate_Status_ESP_QBit_Anf_Vert_Wank
 * - \ref SIG_YawRate_Status_yawrate
 * - \ref SIG_YawRate_Status_yawrate_direction
 * - \ref SIG_YawRate_Status_ESP_Notbremsanzeige
 * - \ref SIG_YawRate_Status_ESP_SpannungsAnf
 * - \ref SIG_YawRate_Status_ESP_PLA_Abbruch
 * - \ref SIG_YawRate_Status_ESP_Status_ESP_PLA
 *
 * @{
 */

/**
 * Message YawRate_Status configuration tuple.
 */
#define MSG_YawRate_Status                          0x101, 0, 8

/**
 * Message YawRate_Status id.
 */
#define ID_YawRate_Status                           0x101

/**
 * Message YawRate_Status extended id bit.
 */
#define EXT_YawRate_Status                          0

/**
 * Message YawRate_Status Data Length Count.
 */
#define DLC_YawRate_Status                          8

/**
 * Message YawRate_Status cycle time.
 */
#define CYCLE_YawRate_Status                        0

/**
 * Message YawRate_Status fast cycle time.
 */
#define FAST_YawRate_Status                         0

/**
 * Initialise message YawRate_Status buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_YawRate_Status(buf) { \
	INITSIG_YawRate_Status_ESP_02_CRC(buf); \
	INITSIG_YawRate_Status_ESP_02_BZ(buf); \
	INITSIG_YawRate_Status_ESP_QBit_Gierrate(buf); \
	INITSIG_YawRate_Status_ESP_QBit_Laengsbeschl(buf); \
	INITSIG_YawRate_Status_ESP_QBit_Querb(buf); \
	INITSIG_YawRate_Status_ESP_Stillstandsflag(buf); \
	INITSIG_YawRate_Status_ESP_Querbeschleunigung(buf); \
	INITSIG_YawRate_Status_ESP_Laengsbeschl(buf); \
	INITSIG_YawRate_Status_ESC_Motorstartverzoegerung(buf); \
	INITSIG_YawRate_Status_ESC_SeitenwindAssistent_Eingriff(buf); \
	INITSIG_YawRate_Status_ESP_Anschleppstart_Freigabe(buf); \
	INITSIG_YawRate_Status_ESP_QBit_Anf_Vert_Wank(buf); \
	INITSIG_YawRate_Status_yawrate(buf); \
	INITSIG_YawRate_Status_yawrate_direction(buf); \
	INITSIG_YawRate_Status_ESP_Notbremsanzeige(buf); \
	INITSIG_YawRate_Status_ESP_SpannungsAnf(buf); \
	INITSIG_YawRate_Status_ESP_PLA_Abbruch(buf); \
	INITSIG_YawRate_Status_ESP_Status_ESP_PLA(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_VehicleSpeed_Status Message VehicleSpeed_Status (0xfd)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_VehicleSpeed_Status_ESP_21_CRC
 * - \ref SIG_VehicleSpeed_Status_ESP_21_BZ
 * - \ref SIG_VehicleSpeed_Status_BR_Eingriffsmoment
 * - \ref SIG_VehicleSpeed_Status_ESP_PLA_Bremseingriff
 * - \ref SIG_VehicleSpeed_Status_ESP_Diagnose
 * - \ref SIG_VehicleSpeed_Status_ESC_Reku_Freigabe
 * - \ref SIG_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low
 * - \ref SIG_VehicleSpeed_Status_ESP_Vorsteuerung
 * - \ref SIG_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv
 * - \ref SIG_VehicleSpeed_Status_OBD_Schlechtweg
 * - \ref SIG_VehicleSpeed_Status_OBD_QBit_Schlechtweg
 * - \ref SIG_VehicleSpeed_Status_real_vehicle_speed
 * - \ref SIG_VehicleSpeed_Status_ASR_Tastung_passiv
 * - \ref SIG_VehicleSpeed_Status_ESP_Tastung_passiv
 * - \ref SIG_VehicleSpeed_Status_ESP_Systemstatus
 * - \ref SIG_VehicleSpeed_Status_ASR_Schalteingriff
 * - \ref SIG_VehicleSpeed_Status_ESP_Haltebestaetigung
 * - \ref SIG_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw
 * - \ref SIG_VehicleSpeed_Status_ESP_QBit_v_Signal
 * - \ref SIG_VehicleSpeed_Status_ABS_Bremsung
 * - \ref SIG_VehicleSpeed_Status_ASR_Anf
 * - \ref SIG_VehicleSpeed_Status_MSR_Anf
 * - \ref SIG_VehicleSpeed_Status_EBV_Eingriff
 * - \ref SIG_VehicleSpeed_Status_EDS_Eingriff
 * - \ref SIG_VehicleSpeed_Status_ESP_Eingriff
 * - \ref SIG_VehicleSpeed_Status_ESP_ASP
 * - \ref SIG_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv
 *
 * @{
 */

/**
 * Message VehicleSpeed_Status configuration tuple.
 */
#define MSG_VehicleSpeed_Status                     0xfd, 0, 8

/**
 * Message VehicleSpeed_Status id.
 */
#define ID_VehicleSpeed_Status                      0xfd

/**
 * Message VehicleSpeed_Status extended id bit.
 */
#define EXT_VehicleSpeed_Status                     0

/**
 * Message VehicleSpeed_Status Data Length Count.
 */
#define DLC_VehicleSpeed_Status                     8

/**
 * Message VehicleSpeed_Status cycle time.
 */
#define CYCLE_VehicleSpeed_Status                   0

/**
 * Message VehicleSpeed_Status fast cycle time.
 */
#define FAST_VehicleSpeed_Status                    0

/**
 * Initialise message VehicleSpeed_Status buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_VehicleSpeed_Status(buf) { \
	INITSIG_VehicleSpeed_Status_ESP_21_CRC(buf); \
	INITSIG_VehicleSpeed_Status_ESP_21_BZ(buf); \
	INITSIG_VehicleSpeed_Status_BR_Eingriffsmoment(buf); \
	INITSIG_VehicleSpeed_Status_ESP_PLA_Bremseingriff(buf); \
	INITSIG_VehicleSpeed_Status_ESP_Diagnose(buf); \
	INITSIG_VehicleSpeed_Status_ESC_Reku_Freigabe(buf); \
	INITSIG_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low(buf); \
	INITSIG_VehicleSpeed_Status_ESP_Vorsteuerung(buf); \
	INITSIG_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv(buf); \
	INITSIG_VehicleSpeed_Status_OBD_Schlechtweg(buf); \
	INITSIG_VehicleSpeed_Status_OBD_QBit_Schlechtweg(buf); \
	INITSIG_VehicleSpeed_Status_real_vehicle_speed(buf); \
	INITSIG_VehicleSpeed_Status_ASR_Tastung_passiv(buf); \
	INITSIG_VehicleSpeed_Status_ESP_Tastung_passiv(buf); \
	INITSIG_VehicleSpeed_Status_ESP_Systemstatus(buf); \
	INITSIG_VehicleSpeed_Status_ASR_Schalteingriff(buf); \
	INITSIG_VehicleSpeed_Status_ESP_Haltebestaetigung(buf); \
	INITSIG_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw(buf); \
	INITSIG_VehicleSpeed_Status_ESP_QBit_v_Signal(buf); \
	INITSIG_VehicleSpeed_Status_ABS_Bremsung(buf); \
	INITSIG_VehicleSpeed_Status_ASR_Anf(buf); \
	INITSIG_VehicleSpeed_Status_MSR_Anf(buf); \
	INITSIG_VehicleSpeed_Status_EBV_Eingriff(buf); \
	INITSIG_VehicleSpeed_Status_EDS_Eingriff(buf); \
	INITSIG_VehicleSpeed_Status_ESP_Eingriff(buf); \
	INITSIG_VehicleSpeed_Status_ESP_ASP(buf); \
	INITSIG_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Gear Message Gear (0xad)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Gear_Getriebe_11_CRC
 * - \ref SIG_Gear_Getriebe_11_BZ
 * - \ref SIG_Gear_GE_MMom_Soll_02
 * - \ref SIG_Gear_GE_MMom_Vorhalt_02
 * - \ref SIG_Gear_GE_Uefkt
 * - \ref SIG_Gear_actual_gear
 * - \ref SIG_Gear_GE_reserv_Fahrstufe
 * - \ref SIG_Gear_GE_Schaltablauf
 * - \ref SIG_Gear_GE_Uefkt_unplausibel
 * - \ref SIG_Gear_GE_MMom_Status_02
 * - \ref SIG_Gear_GE_Status_Kraftschluss
 * - \ref SIG_Gear_GE_MMom_Status
 * - \ref SIG_Gear_GE_Freig_MMom_Vorhalt
 * - \ref SIG_Gear_GE_Verbot_Ausblendung
 * - \ref SIG_Gear_GE_Zielgang
 *
 * @{
 */

/**
 * Message Gear configuration tuple.
 */
#define MSG_Gear                                    0xad, 0, 8

/**
 * Message Gear id.
 */
#define ID_Gear                                     0xad

/**
 * Message Gear extended id bit.
 */
#define EXT_Gear                                    0

/**
 * Message Gear Data Length Count.
 */
#define DLC_Gear                                    8

/**
 * Message Gear cycle time.
 */
#define CYCLE_Gear                                  0

/**
 * Message Gear fast cycle time.
 */
#define FAST_Gear                                   0

/**
 * Initialise message Gear buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Gear(buf) { \
	INITSIG_Gear_Getriebe_11_CRC(buf); \
	INITSIG_Gear_Getriebe_11_BZ(buf); \
	INITSIG_Gear_GE_MMom_Soll_02(buf); \
	INITSIG_Gear_GE_MMom_Vorhalt_02(buf); \
	INITSIG_Gear_GE_Uefkt(buf); \
	INITSIG_Gear_actual_gear(buf); \
	INITSIG_Gear_GE_reserv_Fahrstufe(buf); \
	INITSIG_Gear_GE_Schaltablauf(buf); \
	INITSIG_Gear_GE_Uefkt_unplausibel(buf); \
	INITSIG_Gear_GE_MMom_Status_02(buf); \
	INITSIG_Gear_GE_Status_Kraftschluss(buf); \
	INITSIG_Gear_GE_MMom_Status(buf); \
	INITSIG_Gear_GE_Freig_MMom_Vorhalt(buf); \
	INITSIG_Gear_GE_Verbot_Ausblendung(buf); \
	INITSIG_Gear_GE_Zielgang(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Steering Message Steering (0x86)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Steering_LWI_01_CRC
 * - \ref SIG_Steering_LWI_01_BZ
 * - \ref SIG_Steering_LWI_Sensorstatus
 * - \ref SIG_Steering_LWI_QBit_Sub_Daten
 * - \ref SIG_Steering_LWI_QBit_Lenkradwinkel
 * - \ref SIG_Steering_steering_angle
 * - \ref SIG_Steering_steering_angle_direction
 * - \ref SIG_Steering_steering_velocity_direction
 * - \ref SIG_Steering_steering_velocity
 * - \ref SIG_Steering_LWI_Sub_Daten
 *
 * @{
 */

/**
 * Message Steering configuration tuple.
 */
#define MSG_Steering                                0x86, 0, 8

/**
 * Message Steering id.
 */
#define ID_Steering                                 0x86

/**
 * Message Steering extended id bit.
 */
#define EXT_Steering                                0

/**
 * Message Steering Data Length Count.
 */
#define DLC_Steering                                8

/**
 * Message Steering cycle time.
 */
#define CYCLE_Steering                              0

/**
 * Message Steering fast cycle time.
 */
#define FAST_Steering                               0

/**
 * Initialise message Steering buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Steering(buf) { \
	INITSIG_Steering_LWI_01_CRC(buf); \
	INITSIG_Steering_LWI_01_BZ(buf); \
	INITSIG_Steering_LWI_Sensorstatus(buf); \
	INITSIG_Steering_LWI_QBit_Sub_Daten(buf); \
	INITSIG_Steering_LWI_QBit_Lenkradwinkel(buf); \
	INITSIG_Steering_steering_angle(buf); \
	INITSIG_Steering_steering_angle_direction(buf); \
	INITSIG_Steering_steering_velocity_direction(buf); \
	INITSIG_Steering_steering_velocity(buf); \
	INITSIG_Steering_LWI_Sub_Daten(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_WheelSpeed_Status Message WheelSpeed_Status (0xb2)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_WheelSpeed_Status_rl_wheel_speed
 * - \ref SIG_WheelSpeed_Status_rr_wheel_speed
 * - \ref SIG_WheelSpeed_Status_fl_wheel_speed
 * - \ref SIG_WheelSpeed_Status_fr_wheel_speed
 *
 * @{
 */

/**
 * Message WheelSpeed_Status configuration tuple.
 */
#define MSG_WheelSpeed_Status                       0xb2, 0, 8

/**
 * Message WheelSpeed_Status id.
 */
#define ID_WheelSpeed_Status                        0xb2

/**
 * Message WheelSpeed_Status extended id bit.
 */
#define EXT_WheelSpeed_Status                       0

/**
 * Message WheelSpeed_Status Data Length Count.
 */
#define DLC_WheelSpeed_Status                       8

/**
 * Message WheelSpeed_Status cycle time.
 */
#define CYCLE_WheelSpeed_Status                     0

/**
 * Message WheelSpeed_Status fast cycle time.
 */
#define FAST_WheelSpeed_Status                      0

/**
 * Initialise message WheelSpeed_Status buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_WheelSpeed_Status(buf) { \
	INITSIG_WheelSpeed_Status_rl_wheel_speed(buf); \
	INITSIG_WheelSpeed_Status_rr_wheel_speed(buf); \
	INITSIG_WheelSpeed_Status_fl_wheel_speed(buf); \
	INITSIG_WheelSpeed_Status_fr_wheel_speed(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_WheelSpeed_Edge Message WheelSpeed_Edge (0x116)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_WheelSpeed_Edge_ESP_10_CRC
 * - \ref SIG_WheelSpeed_Edge_ESP_10_BZ
 * - \ref SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL
 * - \ref SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR
 * - \ref SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL
 * - \ref SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR
 * - \ref SIG_WheelSpeed_Edge_fl_wheel_speed_edge_sum
 * - \ref SIG_WheelSpeed_Edge_fr_wheel_speed_edge_sum
 * - \ref SIG_WheelSpeed_Edge_rl_wheel_speed_edge_sum
 * - \ref SIG_WheelSpeed_Edge_rr_wheel_speed_edge_sum
 * - \ref SIG_WheelSpeed_Edge_ESP_VL_Fahrtrichtung
 * - \ref SIG_WheelSpeed_Edge_ESP_VR_Fahrtrichtung
 * - \ref SIG_WheelSpeed_Edge_ESP_HL_Fahrtrichtung
 * - \ref SIG_WheelSpeed_Edge_ESP_HR_Fahrtrichtung
 *
 * @{
 */

/**
 * Message WheelSpeed_Edge configuration tuple.
 */
#define MSG_WheelSpeed_Edge                         0x116, 0, 8

/**
 * Message WheelSpeed_Edge id.
 */
#define ID_WheelSpeed_Edge                          0x116

/**
 * Message WheelSpeed_Edge extended id bit.
 */
#define EXT_WheelSpeed_Edge                         0

/**
 * Message WheelSpeed_Edge Data Length Count.
 */
#define DLC_WheelSpeed_Edge                         8

/**
 * Message WheelSpeed_Edge cycle time.
 */
#define CYCLE_WheelSpeed_Edge                       0

/**
 * Message WheelSpeed_Edge fast cycle time.
 */
#define FAST_WheelSpeed_Edge                        0

/**
 * Initialise message WheelSpeed_Edge buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_WheelSpeed_Edge(buf) { \
	INITSIG_WheelSpeed_Edge_ESP_10_CRC(buf); \
	INITSIG_WheelSpeed_Edge_ESP_10_BZ(buf); \
	INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL(buf); \
	INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR(buf); \
	INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL(buf); \
	INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR(buf); \
	INITSIG_WheelSpeed_Edge_fl_wheel_speed_edge_sum(buf); \
	INITSIG_WheelSpeed_Edge_fr_wheel_speed_edge_sum(buf); \
	INITSIG_WheelSpeed_Edge_rl_wheel_speed_edge_sum(buf); \
	INITSIG_WheelSpeed_Edge_rr_wheel_speed_edge_sum(buf); \
	INITSIG_WheelSpeed_Edge_ESP_VL_Fahrtrichtung(buf); \
	INITSIG_WheelSpeed_Edge_ESP_VR_Fahrtrichtung(buf); \
	INITSIG_WheelSpeed_Edge_ESP_HL_Fahrtrichtung(buf); \
	INITSIG_WheelSpeed_Edge_ESP_HR_Fahrtrichtung(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_ZV_auf Signal BM_ZV_auf of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_ZV_auf configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_ZV_auf and \ref GET_Blinker_BM_ZV_auf instead.
 */
#define SIG_Blinker_BM_ZV_auf                       0, 0, 12, 1

/**
 * Signal BM_ZV_auf setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_ZV_auf or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_ZV_auf                     0, 0, 12, 1, 0

/**
 * Get signal BM_ZV_auf from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_ZV_auf(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x01) << 0) \
)

/**
 * Set signal BM_ZV_auf in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_ZV_auf(buf, val) { \
	buf[1] &= ~(0x01 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal BM_ZV_auf in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_ZV_auf(buf) \
	SET_Blinker_BM_ZV_auf(buf, 0)

/**
 * Signal BM_ZV_auf value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_ZV_auf(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_ZV_auf raw initial value.
 */
#define START_Blinker_BM_ZV_auf                     0

/**
 * Signal BM_ZV_auf raw minimum value.
 */
#define MIN_Blinker_BM_ZV_auf                       0

/**
 * Signal BM_ZV_auf raw maximum value.
 */
#define MAX_Blinker_BM_ZV_auf                       1

/**
 * Signal BM_ZV_auf raw offset value.
 */
#define OFF_Blinker_BM_ZV_auf                       0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_ZV_zu Signal BM_ZV_zu of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_ZV_zu configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_ZV_zu and \ref GET_Blinker_BM_ZV_zu instead.
 */
#define SIG_Blinker_BM_ZV_zu                        0, 0, 13, 1

/**
 * Signal BM_ZV_zu setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_ZV_zu or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_ZV_zu                      0, 0, 13, 1, 0

/**
 * Get signal BM_ZV_zu from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_ZV_zu(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 5) & 0x01) << 0) \
)

/**
 * Set signal BM_ZV_zu in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_ZV_zu(buf, val) { \
	buf[1] &= ~(0x01 << 5); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal BM_ZV_zu in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_ZV_zu(buf) \
	SET_Blinker_BM_ZV_zu(buf, 0)

/**
 * Signal BM_ZV_zu value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_ZV_zu(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_ZV_zu raw initial value.
 */
#define START_Blinker_BM_ZV_zu                      0

/**
 * Signal BM_ZV_zu raw minimum value.
 */
#define MIN_Blinker_BM_ZV_zu                        0

/**
 * Signal BM_ZV_zu raw maximum value.
 */
#define MAX_Blinker_BM_ZV_zu                        1

/**
 * Signal BM_ZV_zu raw offset value.
 */
#define OFF_Blinker_BM_ZV_zu                        0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_DWA_ein Signal BM_DWA_ein of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_DWA_ein configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_DWA_ein and \ref GET_Blinker_BM_DWA_ein instead.
 */
#define SIG_Blinker_BM_DWA_ein                      0, 0, 14, 1

/**
 * Signal BM_DWA_ein setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_DWA_ein or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_DWA_ein                    0, 0, 14, 1, 0

/**
 * Get signal BM_DWA_ein from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_DWA_ein(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 6) & 0x01) << 0) \
)

/**
 * Set signal BM_DWA_ein in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_DWA_ein(buf, val) { \
	buf[1] &= ~(0x01 << 6); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal BM_DWA_ein in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_DWA_ein(buf) \
	SET_Blinker_BM_DWA_ein(buf, 0)

/**
 * Signal BM_DWA_ein value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_DWA_ein(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_DWA_ein raw initial value.
 */
#define START_Blinker_BM_DWA_ein                    0

/**
 * Signal BM_DWA_ein raw minimum value.
 */
#define MIN_Blinker_BM_DWA_ein                      0

/**
 * Signal BM_DWA_ein raw maximum value.
 */
#define MAX_Blinker_BM_DWA_ein                      1

/**
 * Signal BM_DWA_ein raw offset value.
 */
#define OFF_Blinker_BM_DWA_ein                      0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_DWA_Alarm Signal BM_DWA_Alarm of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_DWA_Alarm configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_DWA_Alarm and \ref GET_Blinker_BM_DWA_Alarm instead.
 */
#define SIG_Blinker_BM_DWA_Alarm                    0, 0, 15, 1

/**
 * Signal BM_DWA_Alarm setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_DWA_Alarm or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_DWA_Alarm                  0, 0, 15, 1, 0

/**
 * Get signal BM_DWA_Alarm from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_DWA_Alarm(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
)

/**
 * Set signal BM_DWA_Alarm in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_DWA_Alarm(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal BM_DWA_Alarm in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_DWA_Alarm(buf) \
	SET_Blinker_BM_DWA_Alarm(buf, 0)

/**
 * Signal BM_DWA_Alarm value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_DWA_Alarm(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_DWA_Alarm raw initial value.
 */
#define START_Blinker_BM_DWA_Alarm                  0

/**
 * Signal BM_DWA_Alarm raw minimum value.
 */
#define MIN_Blinker_BM_DWA_Alarm                    0

/**
 * Signal BM_DWA_Alarm raw maximum value.
 */
#define MAX_Blinker_BM_DWA_Alarm                    1

/**
 * Signal BM_DWA_Alarm raw offset value.
 */
#define OFF_Blinker_BM_DWA_Alarm                    0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Crash Signal BM_Crash of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Crash configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Crash and \ref GET_Blinker_BM_Crash instead.
 */
#define SIG_Blinker_BM_Crash                        0, 0, 16, 1

/**
 * Signal BM_Crash setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Crash or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Crash                      0, 0, 16, 1, 0

/**
 * Get signal BM_Crash from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Crash(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 0) \
)

/**
 * Set signal BM_Crash in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Crash(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal BM_Crash in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Crash(buf) \
	SET_Blinker_BM_Crash(buf, 0)

/**
 * Signal BM_Crash value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Crash(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Crash raw initial value.
 */
#define START_Blinker_BM_Crash                      0

/**
 * Signal BM_Crash raw minimum value.
 */
#define MIN_Blinker_BM_Crash                        0

/**
 * Signal BM_Crash raw maximum value.
 */
#define MAX_Blinker_BM_Crash                        1

/**
 * Signal BM_Crash raw offset value.
 */
#define OFF_Blinker_BM_Crash                        0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Panik Signal BM_Panik of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Panik configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Panik and \ref GET_Blinker_BM_Panik instead.
 */
#define SIG_Blinker_BM_Panik                        0, 0, 17, 1

/**
 * Signal BM_Panik setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Panik or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Panik                      0, 0, 17, 1, 0

/**
 * Get signal BM_Panik from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Panik(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x01) << 0) \
)

/**
 * Set signal BM_Panik in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Panik(buf, val) { \
	buf[2] &= ~(0x01 << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 1; \
}

/**
 * Set signal BM_Panik in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Panik(buf) \
	SET_Blinker_BM_Panik(buf, 0)

/**
 * Signal BM_Panik value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Panik(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Panik raw initial value.
 */
#define START_Blinker_BM_Panik                      0

/**
 * Signal BM_Panik raw minimum value.
 */
#define MIN_Blinker_BM_Panik                        0

/**
 * Signal BM_Panik raw maximum value.
 */
#define MAX_Blinker_BM_Panik                        1

/**
 * Signal BM_Panik raw offset value.
 */
#define OFF_Blinker_BM_Panik                        0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Not_Bremsung Signal BM_Not_Bremsung of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Not_Bremsung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Not_Bremsung and \ref GET_Blinker_BM_Not_Bremsung instead.
 */
#define SIG_Blinker_BM_Not_Bremsung                 0, 0, 18, 1

/**
 * Signal BM_Not_Bremsung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Not_Bremsung or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Not_Bremsung               0, 0, 18, 1, 0

/**
 * Get signal BM_Not_Bremsung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Not_Bremsung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 2) & 0x01) << 0) \
)

/**
 * Set signal BM_Not_Bremsung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Not_Bremsung(buf, val) { \
	buf[2] &= ~(0x01 << 2); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal BM_Not_Bremsung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Not_Bremsung(buf) \
	SET_Blinker_BM_Not_Bremsung(buf, 0)

/**
 * Signal BM_Not_Bremsung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Not_Bremsung(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Not_Bremsung raw initial value.
 */
#define START_Blinker_BM_Not_Bremsung               0

/**
 * Signal BM_Not_Bremsung raw minimum value.
 */
#define MIN_Blinker_BM_Not_Bremsung                 0

/**
 * Signal BM_Not_Bremsung raw maximum value.
 */
#define MAX_Blinker_BM_Not_Bremsung                 1

/**
 * Signal BM_Not_Bremsung raw offset value.
 */
#define OFF_Blinker_BM_Not_Bremsung                 0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_GDO Signal BM_GDO of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_GDO configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_GDO and \ref GET_Blinker_BM_GDO instead.
 */
#define SIG_Blinker_BM_GDO                          0, 0, 19, 1

/**
 * Signal BM_GDO setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_GDO or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_GDO                        0, 0, 19, 1, 0

/**
 * Get signal BM_GDO from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_GDO(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal BM_GDO in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_GDO(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal BM_GDO in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_GDO(buf) \
	SET_Blinker_BM_GDO(buf, 0)

/**
 * Signal BM_GDO value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_GDO(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_GDO raw initial value.
 */
#define START_Blinker_BM_GDO                        0

/**
 * Signal BM_GDO raw minimum value.
 */
#define MIN_Blinker_BM_GDO                          0

/**
 * Signal BM_GDO raw maximum value.
 */
#define MAX_Blinker_BM_GDO                          1

/**
 * Signal BM_GDO raw offset value.
 */
#define OFF_Blinker_BM_GDO                          0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Warnblinken Signal BM_Warnblinken of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Warnblinken configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Warnblinken and \ref GET_Blinker_BM_Warnblinken instead.
 */
#define SIG_Blinker_BM_Warnblinken                  0, 0, 20, 1

/**
 * Signal BM_Warnblinken setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Warnblinken or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Warnblinken                0, 0, 20, 1, 0

/**
 * Get signal BM_Warnblinken from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Warnblinken(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal BM_Warnblinken in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Warnblinken(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal BM_Warnblinken in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Warnblinken(buf) \
	SET_Blinker_BM_Warnblinken(buf, 0)

/**
 * Signal BM_Warnblinken value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Warnblinken(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Warnblinken raw initial value.
 */
#define START_Blinker_BM_Warnblinken                0

/**
 * Signal BM_Warnblinken raw minimum value.
 */
#define MIN_Blinker_BM_Warnblinken                  0

/**
 * Signal BM_Warnblinken raw maximum value.
 */
#define MAX_Blinker_BM_Warnblinken                  1

/**
 * Signal BM_Warnblinken raw offset value.
 */
#define OFF_Blinker_BM_Warnblinken                  0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Taxi_Notalarm Signal BM_Taxi_Notalarm of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Taxi_Notalarm configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Taxi_Notalarm and \ref GET_Blinker_BM_Taxi_Notalarm instead.
 */
#define SIG_Blinker_BM_Taxi_Notalarm                0, 0, 21, 1

/**
 * Signal BM_Taxi_Notalarm setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Taxi_Notalarm or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Taxi_Notalarm              0, 0, 21, 1, 0

/**
 * Get signal BM_Taxi_Notalarm from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Taxi_Notalarm(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal BM_Taxi_Notalarm in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Taxi_Notalarm(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal BM_Taxi_Notalarm in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Taxi_Notalarm(buf) \
	SET_Blinker_BM_Taxi_Notalarm(buf, 0)

/**
 * Signal BM_Taxi_Notalarm value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Taxi_Notalarm(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Taxi_Notalarm raw initial value.
 */
#define START_Blinker_BM_Taxi_Notalarm              0

/**
 * Signal BM_Taxi_Notalarm raw minimum value.
 */
#define MIN_Blinker_BM_Taxi_Notalarm                0

/**
 * Signal BM_Taxi_Notalarm raw maximum value.
 */
#define MAX_Blinker_BM_Taxi_Notalarm                1

/**
 * Signal BM_Taxi_Notalarm raw offset value.
 */
#define OFF_Blinker_BM_Taxi_Notalarm                0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Telematik Signal BM_Telematik of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Telematik configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Telematik and \ref GET_Blinker_BM_Telematik instead.
 */
#define SIG_Blinker_BM_Telematik                    0, 0, 22, 1

/**
 * Signal BM_Telematik setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Telematik or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Telematik                  0, 0, 22, 1, 0

/**
 * Get signal BM_Telematik from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Telematik(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal BM_Telematik in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Telematik(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal BM_Telematik in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Telematik(buf) \
	SET_Blinker_BM_Telematik(buf, 0)

/**
 * Signal BM_Telematik value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Telematik(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Telematik raw initial value.
 */
#define START_Blinker_BM_Telematik                  0

/**
 * Signal BM_Telematik raw minimum value.
 */
#define MIN_Blinker_BM_Telematik                    0

/**
 * Signal BM_Telematik raw maximum value.
 */
#define MAX_Blinker_BM_Telematik                    1

/**
 * Signal BM_Telematik raw offset value.
 */
#define OFF_Blinker_BM_Telematik                    0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_links Signal BM_links of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_links configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_links and \ref GET_Blinker_BM_links instead.
 */
#define SIG_Blinker_BM_links                        0, 0, 23, 1

/**
 * Signal BM_links setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_links or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_links                      0, 0, 23, 1, 0

/**
 * Get signal BM_links from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_links(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
)

/**
 * Set signal BM_links in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_links(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal BM_links in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_links(buf) \
	SET_Blinker_BM_links(buf, 0)

/**
 * Signal BM_links value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_links(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_links raw initial value.
 */
#define START_Blinker_BM_links                      0

/**
 * Signal BM_links raw minimum value.
 */
#define MIN_Blinker_BM_links                        0

/**
 * Signal BM_links raw maximum value.
 */
#define MAX_Blinker_BM_links                        1

/**
 * Signal BM_links raw offset value.
 */
#define OFF_Blinker_BM_links                        0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_rechts Signal BM_rechts of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_rechts configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_rechts and \ref GET_Blinker_BM_rechts instead.
 */
#define SIG_Blinker_BM_rechts                       0, 0, 24, 1

/**
 * Signal BM_rechts setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_rechts or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_rechts                     0, 0, 24, 1, 0

/**
 * Get signal BM_rechts from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_rechts(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x01) << 0) \
)

/**
 * Set signal BM_rechts in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_rechts(buf, val) { \
	buf[3] &= ~(0x01 << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal BM_rechts in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_rechts(buf) \
	SET_Blinker_BM_rechts(buf, 0)

/**
 * Signal BM_rechts value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_rechts(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_rechts raw initial value.
 */
#define START_Blinker_BM_rechts                     0

/**
 * Signal BM_rechts raw minimum value.
 */
#define MIN_Blinker_BM_rechts                       0

/**
 * Signal BM_rechts raw maximum value.
 */
#define MAX_Blinker_BM_rechts                       1

/**
 * Signal BM_rechts raw offset value.
 */
#define OFF_Blinker_BM_rechts                       0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_Blinken_li_Fzg_Takt Signal Blinken_li_Fzg_Takt of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal Blinken_li_Fzg_Takt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_Blinken_li_Fzg_Takt and \ref GET_Blinker_Blinken_li_Fzg_Takt instead.
 */
#define SIG_Blinker_Blinken_li_Fzg_Takt             0, 0, 25, 1

/**
 * Signal Blinken_li_Fzg_Takt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_Blinken_li_Fzg_Takt or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_Blinken_li_Fzg_Takt           0, 0, 25, 1, 0

/**
 * Get signal Blinken_li_Fzg_Takt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_Blinken_li_Fzg_Takt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 1) & 0x01) << 0) \
)

/**
 * Set signal Blinken_li_Fzg_Takt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_Blinken_li_Fzg_Takt(buf, val) { \
	buf[3] &= ~(0x01 << 1); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 1; \
}

/**
 * Set signal Blinken_li_Fzg_Takt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_Blinken_li_Fzg_Takt(buf) \
	SET_Blinker_Blinken_li_Fzg_Takt(buf, 0)

/**
 * Signal Blinken_li_Fzg_Takt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_Blinken_li_Fzg_Takt(x, fmt) \
	((x) * fmt)

/**
 * Signal Blinken_li_Fzg_Takt raw initial value.
 */
#define START_Blinker_Blinken_li_Fzg_Takt           0

/**
 * Signal Blinken_li_Fzg_Takt raw minimum value.
 */
#define MIN_Blinker_Blinken_li_Fzg_Takt             0

/**
 * Signal Blinken_li_Fzg_Takt raw maximum value.
 */
#define MAX_Blinker_Blinken_li_Fzg_Takt             1

/**
 * Signal Blinken_li_Fzg_Takt raw offset value.
 */
#define OFF_Blinker_Blinken_li_Fzg_Takt             0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_Blinken_re_Fzg_Takt Signal Blinken_re_Fzg_Takt of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal Blinken_re_Fzg_Takt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_Blinken_re_Fzg_Takt and \ref GET_Blinker_Blinken_re_Fzg_Takt instead.
 */
#define SIG_Blinker_Blinken_re_Fzg_Takt             0, 0, 26, 1

/**
 * Signal Blinken_re_Fzg_Takt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_Blinken_re_Fzg_Takt or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_Blinken_re_Fzg_Takt           0, 0, 26, 1, 0

/**
 * Get signal Blinken_re_Fzg_Takt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_Blinken_re_Fzg_Takt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x01) << 0) \
)

/**
 * Set signal Blinken_re_Fzg_Takt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_Blinken_re_Fzg_Takt(buf, val) { \
	buf[3] &= ~(0x01 << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal Blinken_re_Fzg_Takt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_Blinken_re_Fzg_Takt(buf) \
	SET_Blinker_Blinken_re_Fzg_Takt(buf, 0)

/**
 * Signal Blinken_re_Fzg_Takt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_Blinken_re_Fzg_Takt(x, fmt) \
	((x) * fmt)

/**
 * Signal Blinken_re_Fzg_Takt raw initial value.
 */
#define START_Blinker_Blinken_re_Fzg_Takt           0

/**
 * Signal Blinken_re_Fzg_Takt raw minimum value.
 */
#define MIN_Blinker_Blinken_re_Fzg_Takt             0

/**
 * Signal Blinken_re_Fzg_Takt raw maximum value.
 */
#define MAX_Blinker_Blinken_re_Fzg_Takt             1

/**
 * Signal Blinken_re_Fzg_Takt raw offset value.
 */
#define OFF_Blinker_Blinken_re_Fzg_Takt             0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_Blinken_li_Kombi_Takt Signal Blinken_li_Kombi_Takt of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal Blinken_li_Kombi_Takt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_Blinken_li_Kombi_Takt and \ref GET_Blinker_Blinken_li_Kombi_Takt instead.
 */
#define SIG_Blinker_Blinken_li_Kombi_Takt           0, 0, 27, 1

/**
 * Signal Blinken_li_Kombi_Takt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_Blinken_li_Kombi_Takt or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_Blinken_li_Kombi_Takt         0, 0, 27, 1, 0

/**
 * Get signal Blinken_li_Kombi_Takt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_Blinken_li_Kombi_Takt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Blinken_li_Kombi_Takt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_Blinken_li_Kombi_Takt(buf, val) { \
	buf[3] &= ~(0x01 << 3); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Blinken_li_Kombi_Takt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_Blinken_li_Kombi_Takt(buf) \
	SET_Blinker_Blinken_li_Kombi_Takt(buf, 0)

/**
 * Signal Blinken_li_Kombi_Takt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_Blinken_li_Kombi_Takt(x, fmt) \
	((x) * fmt)

/**
 * Signal Blinken_li_Kombi_Takt raw initial value.
 */
#define START_Blinker_Blinken_li_Kombi_Takt         0

/**
 * Signal Blinken_li_Kombi_Takt raw minimum value.
 */
#define MIN_Blinker_Blinken_li_Kombi_Takt           0

/**
 * Signal Blinken_li_Kombi_Takt raw maximum value.
 */
#define MAX_Blinker_Blinken_li_Kombi_Takt           1

/**
 * Signal Blinken_li_Kombi_Takt raw offset value.
 */
#define OFF_Blinker_Blinken_li_Kombi_Takt           0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_Blinken_re_Kombi_Takt Signal Blinken_re_Kombi_Takt of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal Blinken_re_Kombi_Takt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_Blinken_re_Kombi_Takt and \ref GET_Blinker_Blinken_re_Kombi_Takt instead.
 */
#define SIG_Blinker_Blinken_re_Kombi_Takt           0, 0, 28, 1

/**
 * Signal Blinken_re_Kombi_Takt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_Blinken_re_Kombi_Takt or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_Blinken_re_Kombi_Takt         0, 0, 28, 1, 0

/**
 * Get signal Blinken_re_Kombi_Takt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_Blinken_re_Kombi_Takt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Blinken_re_Kombi_Takt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_Blinken_re_Kombi_Takt(buf, val) { \
	buf[3] &= ~(0x01 << 4); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Blinken_re_Kombi_Takt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_Blinken_re_Kombi_Takt(buf) \
	SET_Blinker_Blinken_re_Kombi_Takt(buf, 0)

/**
 * Signal Blinken_re_Kombi_Takt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_Blinken_re_Kombi_Takt(x, fmt) \
	((x) * fmt)

/**
 * Signal Blinken_re_Kombi_Takt raw initial value.
 */
#define START_Blinker_Blinken_re_Kombi_Takt         0

/**
 * Signal Blinken_re_Kombi_Takt raw minimum value.
 */
#define MIN_Blinker_Blinken_re_Kombi_Takt           0

/**
 * Signal Blinken_re_Kombi_Takt raw maximum value.
 */
#define MAX_Blinker_Blinken_re_Kombi_Takt           1

/**
 * Signal Blinken_re_Kombi_Takt raw offset value.
 */
#define OFF_Blinker_Blinken_re_Kombi_Takt           0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_NBA_n_codiert_n_aktiv Signal BM_NBA_n_codiert_n_aktiv of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_NBA_n_codiert_n_aktiv configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_NBA_n_codiert_n_aktiv and \ref GET_Blinker_BM_NBA_n_codiert_n_aktiv instead.
 */
#define SIG_Blinker_BM_NBA_n_codiert_n_aktiv        0, 0, 29, 1

/**
 * Signal BM_NBA_n_codiert_n_aktiv setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_NBA_n_codiert_n_aktiv or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_NBA_n_codiert_n_aktiv      0, 0, 29, 1, 0

/**
 * Get signal BM_NBA_n_codiert_n_aktiv from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_NBA_n_codiert_n_aktiv(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 5) & 0x01) << 0) \
)

/**
 * Set signal BM_NBA_n_codiert_n_aktiv in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_NBA_n_codiert_n_aktiv(buf, val) { \
	buf[3] &= ~(0x01 << 5); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal BM_NBA_n_codiert_n_aktiv in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_NBA_n_codiert_n_aktiv(buf) \
	SET_Blinker_BM_NBA_n_codiert_n_aktiv(buf, 0)

/**
 * Signal BM_NBA_n_codiert_n_aktiv value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_NBA_n_codiert_n_aktiv(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_NBA_n_codiert_n_aktiv raw initial value.
 */
#define START_Blinker_BM_NBA_n_codiert_n_aktiv      0

/**
 * Signal BM_NBA_n_codiert_n_aktiv raw minimum value.
 */
#define MIN_Blinker_BM_NBA_n_codiert_n_aktiv        0

/**
 * Signal BM_NBA_n_codiert_n_aktiv raw maximum value.
 */
#define MAX_Blinker_BM_NBA_n_codiert_n_aktiv        1

/**
 * Signal BM_NBA_n_codiert_n_aktiv raw offset value.
 */
#define OFF_Blinker_BM_NBA_n_codiert_n_aktiv        0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_NBA_Status Signal BM_NBA_Status of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_NBA_Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_NBA_Status and \ref GET_Blinker_BM_NBA_Status instead.
 */
#define SIG_Blinker_BM_NBA_Status                   0, 0, 30, 2

/**
 * Signal BM_NBA_Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_NBA_Status or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_NBA_Status                 0, 0, 30, 2, 0

/**
 * Get signal BM_NBA_Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_NBA_Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal BM_NBA_Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_NBA_Status(buf, val) { \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal BM_NBA_Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_NBA_Status(buf) \
	SET_Blinker_BM_NBA_Status(buf, 0)

/**
 * Signal BM_NBA_Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_NBA_Status(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_NBA_Status raw initial value.
 */
#define START_Blinker_BM_NBA_Status                 0

/**
 * Signal BM_NBA_Status raw minimum value.
 */
#define MIN_Blinker_BM_NBA_Status                   0

/**
 * Signal BM_NBA_Status raw maximum value.
 */
#define MAX_Blinker_BM_NBA_Status                   3

/**
 * Signal BM_NBA_Status raw offset value.
 */
#define OFF_Blinker_BM_NBA_Status                   0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_WBT_Beleuchtung Signal BM_WBT_Beleuchtung of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_WBT_Beleuchtung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_WBT_Beleuchtung and \ref GET_Blinker_BM_WBT_Beleuchtung instead.
 */
#define SIG_Blinker_BM_WBT_Beleuchtung              0, 0, 32, 1

/**
 * Signal BM_WBT_Beleuchtung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_WBT_Beleuchtung or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_WBT_Beleuchtung            0, 0, 32, 1, 0

/**
 * Get signal BM_WBT_Beleuchtung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_WBT_Beleuchtung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x01) << 0) \
)

/**
 * Set signal BM_WBT_Beleuchtung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_WBT_Beleuchtung(buf, val) { \
	buf[4] &= ~(0x01 << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal BM_WBT_Beleuchtung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_WBT_Beleuchtung(buf) \
	SET_Blinker_BM_WBT_Beleuchtung(buf, 0)

/**
 * Signal BM_WBT_Beleuchtung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_WBT_Beleuchtung(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_WBT_Beleuchtung raw initial value.
 */
#define START_Blinker_BM_WBT_Beleuchtung            0

/**
 * Signal BM_WBT_Beleuchtung raw minimum value.
 */
#define MIN_Blinker_BM_WBT_Beleuchtung              0

/**
 * Signal BM_WBT_Beleuchtung raw maximum value.
 */
#define MAX_Blinker_BM_WBT_Beleuchtung              1

/**
 * Signal BM_WBT_Beleuchtung raw offset value.
 */
#define OFF_Blinker_BM_WBT_Beleuchtung              0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_HD_Oeffnung_angelernt Signal BM_HD_Oeffnung_angelernt of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_HD_Oeffnung_angelernt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_HD_Oeffnung_angelernt and \ref GET_Blinker_BM_HD_Oeffnung_angelernt instead.
 */
#define SIG_Blinker_BM_HD_Oeffnung_angelernt        0, 0, 33, 1

/**
 * Signal BM_HD_Oeffnung_angelernt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_HD_Oeffnung_angelernt or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_HD_Oeffnung_angelernt      0, 0, 33, 1, 0

/**
 * Get signal BM_HD_Oeffnung_angelernt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_HD_Oeffnung_angelernt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 1) & 0x01) << 0) \
)

/**
 * Set signal BM_HD_Oeffnung_angelernt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_HD_Oeffnung_angelernt(buf, val) { \
	buf[4] &= ~(0x01 << 1); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 1; \
}

/**
 * Set signal BM_HD_Oeffnung_angelernt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_HD_Oeffnung_angelernt(buf) \
	SET_Blinker_BM_HD_Oeffnung_angelernt(buf, 0)

/**
 * Signal BM_HD_Oeffnung_angelernt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_HD_Oeffnung_angelernt(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_HD_Oeffnung_angelernt raw initial value.
 */
#define START_Blinker_BM_HD_Oeffnung_angelernt      0

/**
 * Signal BM_HD_Oeffnung_angelernt raw minimum value.
 */
#define MIN_Blinker_BM_HD_Oeffnung_angelernt        0

/**
 * Signal BM_HD_Oeffnung_angelernt raw maximum value.
 */
#define MAX_Blinker_BM_HD_Oeffnung_angelernt        1

/**
 * Signal BM_HD_Oeffnung_angelernt raw offset value.
 */
#define OFF_Blinker_BM_HD_Oeffnung_angelernt        0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Autobahn Signal BM_Autobahn of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Autobahn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Autobahn and \ref GET_Blinker_BM_Autobahn instead.
 */
#define SIG_Blinker_BM_Autobahn                     0, 0, 34, 1

/**
 * Signal BM_Autobahn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Autobahn or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Autobahn                   0, 0, 34, 1, 0

/**
 * Get signal BM_Autobahn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Autobahn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x01) << 0) \
)

/**
 * Set signal BM_Autobahn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Autobahn(buf, val) { \
	buf[4] &= ~(0x01 << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal BM_Autobahn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Autobahn(buf) \
	SET_Blinker_BM_Autobahn(buf, 0)

/**
 * Signal BM_Autobahn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Autobahn(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Autobahn raw initial value.
 */
#define START_Blinker_BM_Autobahn                   0

/**
 * Signal BM_Autobahn raw minimum value.
 */
#define MIN_Blinker_BM_Autobahn                     0

/**
 * Signal BM_Autobahn raw maximum value.
 */
#define MAX_Blinker_BM_Autobahn                     1

/**
 * Signal BM_Autobahn raw offset value.
 */
#define OFF_Blinker_BM_Autobahn                     0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Rollenmodus_Blinken Signal BM_Rollenmodus_Blinken of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Rollenmodus_Blinken configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Rollenmodus_Blinken and \ref GET_Blinker_BM_Rollenmodus_Blinken instead.
 */
#define SIG_Blinker_BM_Rollenmodus_Blinken          0, 0, 35, 1

/**
 * Signal BM_Rollenmodus_Blinken setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Rollenmodus_Blinken or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Rollenmodus_Blinken        0, 0, 35, 1, 0

/**
 * Get signal BM_Rollenmodus_Blinken from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Rollenmodus_Blinken(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0) \
)

/**
 * Set signal BM_Rollenmodus_Blinken in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Rollenmodus_Blinken(buf, val) { \
	buf[4] &= ~(0x01 << 3); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal BM_Rollenmodus_Blinken in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Rollenmodus_Blinken(buf) \
	SET_Blinker_BM_Rollenmodus_Blinken(buf, 0)

/**
 * Signal BM_Rollenmodus_Blinken value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Rollenmodus_Blinken(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Rollenmodus_Blinken raw initial value.
 */
#define START_Blinker_BM_Rollenmodus_Blinken        0

/**
 * Signal BM_Rollenmodus_Blinken raw minimum value.
 */
#define MIN_Blinker_BM_Rollenmodus_Blinken          0

/**
 * Signal BM_Rollenmodus_Blinken raw maximum value.
 */
#define MAX_Blinker_BM_Rollenmodus_Blinken          1

/**
 * Signal BM_Rollenmodus_Blinken raw offset value.
 */
#define OFF_Blinker_BM_Rollenmodus_Blinken          0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Recas Signal BM_Recas of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Recas configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Recas and \ref GET_Blinker_BM_Recas instead.
 */
#define SIG_Blinker_BM_Recas                        0, 0, 36, 1

/**
 * Signal BM_Recas setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Recas or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Recas                      0, 0, 36, 1, 0

/**
 * Get signal BM_Recas from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Recas(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0) \
)

/**
 * Set signal BM_Recas in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Recas(buf, val) { \
	buf[4] &= ~(0x01 << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal BM_Recas in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Recas(buf) \
	SET_Blinker_BM_Recas(buf, 0)

/**
 * Signal BM_Recas value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Recas(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Recas raw initial value.
 */
#define START_Blinker_BM_Recas                      0

/**
 * Signal BM_Recas raw minimum value.
 */
#define MIN_Blinker_BM_Recas                        0

/**
 * Signal BM_Recas raw maximum value.
 */
#define MAX_Blinker_BM_Recas                        1

/**
 * Signal BM_Recas raw offset value.
 */
#define OFF_Blinker_BM_Recas                        0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Wischblinken Signal BM_Wischblinken of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Wischblinken configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Wischblinken and \ref GET_Blinker_BM_Wischblinken instead.
 */
#define SIG_Blinker_BM_Wischblinken                 0, 0, 37, 1

/**
 * Signal BM_Wischblinken setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Wischblinken or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Wischblinken               0, 0, 37, 1, 0

/**
 * Get signal BM_Wischblinken from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Wischblinken(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x01) << 0) \
)

/**
 * Set signal BM_Wischblinken in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Wischblinken(buf, val) { \
	buf[4] &= ~(0x01 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal BM_Wischblinken in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Wischblinken(buf) \
	SET_Blinker_BM_Wischblinken(buf, 0)

/**
 * Signal BM_Wischblinken value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Wischblinken(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Wischblinken raw initial value.
 */
#define START_Blinker_BM_Wischblinken               0

/**
 * Signal BM_Wischblinken raw minimum value.
 */
#define MIN_Blinker_BM_Wischblinken                 0

/**
 * Signal BM_Wischblinken raw maximum value.
 */
#define MAX_Blinker_BM_Wischblinken                 1

/**
 * Signal BM_Wischblinken raw offset value.
 */
#define OFF_Blinker_BM_Wischblinken                 0

/**
 * @}
 */

/**
 * @defgroup SIG_Blinker_BM_Telematik_Abbruchgrund Signal BM_Telematik_Abbruchgrund of Message Blinker (0x366)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Blinker
 * @{
 */

/**
 * Signal BM_Telematik_Abbruchgrund configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Blinker_BM_Telematik_Abbruchgrund and \ref GET_Blinker_BM_Telematik_Abbruchgrund instead.
 */
#define SIG_Blinker_BM_Telematik_Abbruchgrund        0, 0, 38, 6

/**
 * Signal BM_Telematik_Abbruchgrund setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Blinker_BM_Telematik_Abbruchgrund or \ref INIT_Blinker instead.
 */
#define SETUP_Blinker_BM_Telematik_Abbruchgrund      0, 0, 38, 6, 0

/**
 * Get signal BM_Telematik_Abbruchgrund from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Blinker_BM_Telematik_Abbruchgrund(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x03) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x0f) << 2) \
)

/**
 * Set signal BM_Telematik_Abbruchgrund in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Blinker_BM_Telematik_Abbruchgrund(buf, val) { \
	buf[4] &= ~(0x03 << 6); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[5] &= ~(0x0f << 0); \
	buf[5] |= (((uint8_t)(val) >> 2) & 0x0f) << 0; \
}

/**
 * Set signal BM_Telematik_Abbruchgrund in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Blinker_BM_Telematik_Abbruchgrund(buf) \
	SET_Blinker_BM_Telematik_Abbruchgrund(buf, 0)

/**
 * Signal BM_Telematik_Abbruchgrund value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Blinker_BM_Telematik_Abbruchgrund(x, fmt) \
	((x) * fmt)

/**
 * Signal BM_Telematik_Abbruchgrund raw initial value.
 */
#define START_Blinker_BM_Telematik_Abbruchgrund      0

/**
 * Signal BM_Telematik_Abbruchgrund raw minimum value.
 */
#define MIN_Blinker_BM_Telematik_Abbruchgrund        0

/**
 * Signal BM_Telematik_Abbruchgrund raw maximum value.
 */
#define MAX_Blinker_BM_Telematik_Abbruchgrund        63

/**
 * Signal BM_Telematik_Abbruchgrund raw offset value.
 */
#define OFF_Blinker_BM_Telematik_Abbruchgrund        0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_02_CRC Signal ESP_02_CRC of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_02_CRC configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_02_CRC and \ref GET_YawRate_Status_ESP_02_CRC instead.
 */
#define SIG_YawRate_Status_ESP_02_CRC               0, 0, 0, 8

/**
 * Signal ESP_02_CRC setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_02_CRC or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_02_CRC             0, 0, 0, 8, 0

/**
 * Get signal ESP_02_CRC from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_02_CRC(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_02_CRC in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_02_CRC(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_02_CRC in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_02_CRC(buf) \
	SET_YawRate_Status_ESP_02_CRC(buf, 0)

/**
 * Signal ESP_02_CRC value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_02_CRC(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_02_CRC raw initial value.
 */
#define START_YawRate_Status_ESP_02_CRC             0

/**
 * Signal ESP_02_CRC raw minimum value.
 */
#define MIN_YawRate_Status_ESP_02_CRC               0

/**
 * Signal ESP_02_CRC raw maximum value.
 */
#define MAX_YawRate_Status_ESP_02_CRC               255

/**
 * Signal ESP_02_CRC raw offset value.
 */
#define OFF_YawRate_Status_ESP_02_CRC               0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_02_BZ Signal ESP_02_BZ of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_02_BZ configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_02_BZ and \ref GET_YawRate_Status_ESP_02_BZ instead.
 */
#define SIG_YawRate_Status_ESP_02_BZ                0, 0, 8, 4

/**
 * Signal ESP_02_BZ setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_02_BZ or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_02_BZ              0, 0, 8, 4, 0

/**
 * Get signal ESP_02_BZ from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_02_BZ(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal ESP_02_BZ in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_02_BZ(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal ESP_02_BZ in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_02_BZ(buf) \
	SET_YawRate_Status_ESP_02_BZ(buf, 0)

/**
 * Signal ESP_02_BZ value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_02_BZ(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_02_BZ raw initial value.
 */
#define START_YawRate_Status_ESP_02_BZ              0

/**
 * Signal ESP_02_BZ raw minimum value.
 */
#define MIN_YawRate_Status_ESP_02_BZ                0

/**
 * Signal ESP_02_BZ raw maximum value.
 */
#define MAX_YawRate_Status_ESP_02_BZ                15

/**
 * Signal ESP_02_BZ raw offset value.
 */
#define OFF_YawRate_Status_ESP_02_BZ                0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_QBit_Gierrate Signal ESP_QBit_Gierrate of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_QBit_Gierrate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_QBit_Gierrate and \ref GET_YawRate_Status_ESP_QBit_Gierrate instead.
 */
#define SIG_YawRate_Status_ESP_QBit_Gierrate        0, 0, 12, 1

/**
 * Signal ESP_QBit_Gierrate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_QBit_Gierrate or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_QBit_Gierrate      0, 0, 12, 1, 0

/**
 * Get signal ESP_QBit_Gierrate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_QBit_Gierrate(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x01) << 0) \
)

/**
 * Set signal ESP_QBit_Gierrate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_QBit_Gierrate(buf, val) { \
	buf[1] &= ~(0x01 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal ESP_QBit_Gierrate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_QBit_Gierrate(buf) \
	SET_YawRate_Status_ESP_QBit_Gierrate(buf, 0)

/**
 * Signal ESP_QBit_Gierrate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_QBit_Gierrate(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_QBit_Gierrate raw initial value.
 */
#define START_YawRate_Status_ESP_QBit_Gierrate      0

/**
 * Signal ESP_QBit_Gierrate raw minimum value.
 */
#define MIN_YawRate_Status_ESP_QBit_Gierrate        0

/**
 * Signal ESP_QBit_Gierrate raw maximum value.
 */
#define MAX_YawRate_Status_ESP_QBit_Gierrate        1

/**
 * Signal ESP_QBit_Gierrate raw offset value.
 */
#define OFF_YawRate_Status_ESP_QBit_Gierrate        0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_QBit_Laengsbeschl Signal ESP_QBit_Laengsbeschl of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_QBit_Laengsbeschl configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_QBit_Laengsbeschl and \ref GET_YawRate_Status_ESP_QBit_Laengsbeschl instead.
 */
#define SIG_YawRate_Status_ESP_QBit_Laengsbeschl        0, 0, 13, 1

/**
 * Signal ESP_QBit_Laengsbeschl setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_QBit_Laengsbeschl or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_QBit_Laengsbeschl      0, 0, 13, 1, 0

/**
 * Get signal ESP_QBit_Laengsbeschl from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_QBit_Laengsbeschl(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 5) & 0x01) << 0) \
)

/**
 * Set signal ESP_QBit_Laengsbeschl in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_QBit_Laengsbeschl(buf, val) { \
	buf[1] &= ~(0x01 << 5); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal ESP_QBit_Laengsbeschl in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_QBit_Laengsbeschl(buf) \
	SET_YawRate_Status_ESP_QBit_Laengsbeschl(buf, 0)

/**
 * Signal ESP_QBit_Laengsbeschl value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_QBit_Laengsbeschl(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_QBit_Laengsbeschl raw initial value.
 */
#define START_YawRate_Status_ESP_QBit_Laengsbeschl      0

/**
 * Signal ESP_QBit_Laengsbeschl raw minimum value.
 */
#define MIN_YawRate_Status_ESP_QBit_Laengsbeschl        0

/**
 * Signal ESP_QBit_Laengsbeschl raw maximum value.
 */
#define MAX_YawRate_Status_ESP_QBit_Laengsbeschl        1

/**
 * Signal ESP_QBit_Laengsbeschl raw offset value.
 */
#define OFF_YawRate_Status_ESP_QBit_Laengsbeschl        0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_QBit_Querb Signal ESP_QBit_Querb of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_QBit_Querb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_QBit_Querb and \ref GET_YawRate_Status_ESP_QBit_Querb instead.
 */
#define SIG_YawRate_Status_ESP_QBit_Querb           0, 0, 14, 1

/**
 * Signal ESP_QBit_Querb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_QBit_Querb or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_QBit_Querb         0, 0, 14, 1, 0

/**
 * Get signal ESP_QBit_Querb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_QBit_Querb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 6) & 0x01) << 0) \
)

/**
 * Set signal ESP_QBit_Querb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_QBit_Querb(buf, val) { \
	buf[1] &= ~(0x01 << 6); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal ESP_QBit_Querb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_QBit_Querb(buf) \
	SET_YawRate_Status_ESP_QBit_Querb(buf, 0)

/**
 * Signal ESP_QBit_Querb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_QBit_Querb(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_QBit_Querb raw initial value.
 */
#define START_YawRate_Status_ESP_QBit_Querb         0

/**
 * Signal ESP_QBit_Querb raw minimum value.
 */
#define MIN_YawRate_Status_ESP_QBit_Querb           0

/**
 * Signal ESP_QBit_Querb raw maximum value.
 */
#define MAX_YawRate_Status_ESP_QBit_Querb           1

/**
 * Signal ESP_QBit_Querb raw offset value.
 */
#define OFF_YawRate_Status_ESP_QBit_Querb           0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_Stillstandsflag Signal ESP_Stillstandsflag of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_Stillstandsflag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_Stillstandsflag and \ref GET_YawRate_Status_ESP_Stillstandsflag instead.
 */
#define SIG_YawRate_Status_ESP_Stillstandsflag        0, 0, 15, 1

/**
 * Signal ESP_Stillstandsflag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_Stillstandsflag or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_Stillstandsflag      0, 0, 15, 1, 0

/**
 * Get signal ESP_Stillstandsflag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_Stillstandsflag(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ESP_Stillstandsflag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_Stillstandsflag(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ESP_Stillstandsflag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_Stillstandsflag(buf) \
	SET_YawRate_Status_ESP_Stillstandsflag(buf, 0)

/**
 * Signal ESP_Stillstandsflag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_Stillstandsflag(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Stillstandsflag raw initial value.
 */
#define START_YawRate_Status_ESP_Stillstandsflag      0

/**
 * Signal ESP_Stillstandsflag raw minimum value.
 */
#define MIN_YawRate_Status_ESP_Stillstandsflag        0

/**
 * Signal ESP_Stillstandsflag raw maximum value.
 */
#define MAX_YawRate_Status_ESP_Stillstandsflag        1

/**
 * Signal ESP_Stillstandsflag raw offset value.
 */
#define OFF_YawRate_Status_ESP_Stillstandsflag        0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_Querbeschleunigung Signal ESP_Querbeschleunigung of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_Querbeschleunigung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_Querbeschleunigung and \ref GET_YawRate_Status_ESP_Querbeschleunigung instead.
 */
#define SIG_YawRate_Status_ESP_Querbeschleunigung        0, 0, 16, 8

/**
 * Signal ESP_Querbeschleunigung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_Querbeschleunigung or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_Querbeschleunigung      0, 0, 16, 8, 0

/**
 * Get signal ESP_Querbeschleunigung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_Querbeschleunigung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_Querbeschleunigung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_Querbeschleunigung(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_Querbeschleunigung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_Querbeschleunigung(buf) \
	SET_YawRate_Status_ESP_Querbeschleunigung(buf, 0)

/**
 * Signal ESP_Querbeschleunigung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_Querbeschleunigung(x, fmt) \
	((x) * fmt / 100 + fmt * (-127) / 100)

/**
 * Signal ESP_Querbeschleunigung raw initial value.
 */
#define START_YawRate_Status_ESP_Querbeschleunigung      0

/**
 * Signal ESP_Querbeschleunigung raw minimum value.
 */
#define MIN_YawRate_Status_ESP_Querbeschleunigung        0

/**
 * Signal ESP_Querbeschleunigung raw maximum value.
 */
#define MAX_YawRate_Status_ESP_Querbeschleunigung        254

/**
 * Signal ESP_Querbeschleunigung raw offset value.
 */
#define OFF_YawRate_Status_ESP_Querbeschleunigung        -127

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_Laengsbeschl Signal ESP_Laengsbeschl of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_Laengsbeschl configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_Laengsbeschl and \ref GET_YawRate_Status_ESP_Laengsbeschl instead.
 */
#define SIG_YawRate_Status_ESP_Laengsbeschl         0, 0, 24, 10

/**
 * Signal ESP_Laengsbeschl setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_Laengsbeschl or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_Laengsbeschl       0, 0, 24, 10, 0

/**
 * Get signal ESP_Laengsbeschl from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_Laengsbeschl(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 8) \
)

/**
 * Set signal ESP_Laengsbeschl in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_Laengsbeschl(buf, val) { \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
}

/**
 * Set signal ESP_Laengsbeschl in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_Laengsbeschl(buf) \
	SET_YawRate_Status_ESP_Laengsbeschl(buf, 0)

/**
 * Signal ESP_Laengsbeschl value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_Laengsbeschl(x, fmt) \
	((x) * fmt / 32 + fmt * (-16))

/**
 * Signal ESP_Laengsbeschl raw initial value.
 */
#define START_YawRate_Status_ESP_Laengsbeschl       0

/**
 * Signal ESP_Laengsbeschl raw minimum value.
 */
#define MIN_YawRate_Status_ESP_Laengsbeschl         0

/**
 * Signal ESP_Laengsbeschl raw maximum value.
 */
#define MAX_YawRate_Status_ESP_Laengsbeschl         1021

/**
 * Signal ESP_Laengsbeschl raw offset value.
 */
#define OFF_YawRate_Status_ESP_Laengsbeschl         -512

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESC_Motorstartverzoegerung Signal ESC_Motorstartverzoegerung of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESC_Motorstartverzoegerung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESC_Motorstartverzoegerung and \ref GET_YawRate_Status_ESC_Motorstartverzoegerung instead.
 */
#define SIG_YawRate_Status_ESC_Motorstartverzoegerung        0, 0, 34, 1

/**
 * Signal ESC_Motorstartverzoegerung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESC_Motorstartverzoegerung or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESC_Motorstartverzoegerung      0, 0, 34, 1, 0

/**
 * Get signal ESC_Motorstartverzoegerung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESC_Motorstartverzoegerung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x01) << 0) \
)

/**
 * Set signal ESC_Motorstartverzoegerung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESC_Motorstartverzoegerung(buf, val) { \
	buf[4] &= ~(0x01 << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal ESC_Motorstartverzoegerung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESC_Motorstartverzoegerung(buf) \
	SET_YawRate_Status_ESC_Motorstartverzoegerung(buf, 0)

/**
 * Signal ESC_Motorstartverzoegerung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESC_Motorstartverzoegerung(x, fmt) \
	((x) * fmt)

/**
 * Signal ESC_Motorstartverzoegerung raw initial value.
 */
#define START_YawRate_Status_ESC_Motorstartverzoegerung      0

/**
 * Signal ESC_Motorstartverzoegerung raw minimum value.
 */
#define MIN_YawRate_Status_ESC_Motorstartverzoegerung        0

/**
 * Signal ESC_Motorstartverzoegerung raw maximum value.
 */
#define MAX_YawRate_Status_ESC_Motorstartverzoegerung        1

/**
 * Signal ESC_Motorstartverzoegerung raw offset value.
 */
#define OFF_YawRate_Status_ESC_Motorstartverzoegerung        0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESC_SeitenwindAssistent_Eingriff Signal ESC_SeitenwindAssistent_Eingriff of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESC_SeitenwindAssistent_Eingriff configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESC_SeitenwindAssistent_Eingriff and \ref GET_YawRate_Status_ESC_SeitenwindAssistent_Eingriff instead.
 */
#define SIG_YawRate_Status_ESC_SeitenwindAssistent_Eingriff        0, 0, 35, 1

/**
 * Signal ESC_SeitenwindAssistent_Eingriff setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESC_SeitenwindAssistent_Eingriff or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESC_SeitenwindAssistent_Eingriff      0, 0, 35, 1, 0

/**
 * Get signal ESC_SeitenwindAssistent_Eingriff from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESC_SeitenwindAssistent_Eingriff(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0) \
)

/**
 * Set signal ESC_SeitenwindAssistent_Eingriff in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESC_SeitenwindAssistent_Eingriff(buf, val) { \
	buf[4] &= ~(0x01 << 3); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal ESC_SeitenwindAssistent_Eingriff in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESC_SeitenwindAssistent_Eingriff(buf) \
	SET_YawRate_Status_ESC_SeitenwindAssistent_Eingriff(buf, 0)

/**
 * Signal ESC_SeitenwindAssistent_Eingriff value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESC_SeitenwindAssistent_Eingriff(x, fmt) \
	((x) * fmt)

/**
 * Signal ESC_SeitenwindAssistent_Eingriff raw initial value.
 */
#define START_YawRate_Status_ESC_SeitenwindAssistent_Eingriff      0

/**
 * Signal ESC_SeitenwindAssistent_Eingriff raw minimum value.
 */
#define MIN_YawRate_Status_ESC_SeitenwindAssistent_Eingriff        0

/**
 * Signal ESC_SeitenwindAssistent_Eingriff raw maximum value.
 */
#define MAX_YawRate_Status_ESC_SeitenwindAssistent_Eingriff        1

/**
 * Signal ESC_SeitenwindAssistent_Eingriff raw offset value.
 */
#define OFF_YawRate_Status_ESC_SeitenwindAssistent_Eingriff        0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_Anschleppstart_Freigabe Signal ESP_Anschleppstart_Freigabe of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_Anschleppstart_Freigabe configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_Anschleppstart_Freigabe and \ref GET_YawRate_Status_ESP_Anschleppstart_Freigabe instead.
 */
#define SIG_YawRate_Status_ESP_Anschleppstart_Freigabe        0, 0, 36, 2

/**
 * Signal ESP_Anschleppstart_Freigabe setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_Anschleppstart_Freigabe or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_Anschleppstart_Freigabe      0, 0, 36, 2, 0

/**
 * Get signal ESP_Anschleppstart_Freigabe from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_Anschleppstart_Freigabe(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x03) << 0) \
)

/**
 * Set signal ESP_Anschleppstart_Freigabe in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_Anschleppstart_Freigabe(buf, val) { \
	buf[4] &= ~(0x03 << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal ESP_Anschleppstart_Freigabe in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_Anschleppstart_Freigabe(buf) \
	SET_YawRate_Status_ESP_Anschleppstart_Freigabe(buf, 0)

/**
 * Signal ESP_Anschleppstart_Freigabe value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_Anschleppstart_Freigabe(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Anschleppstart_Freigabe raw initial value.
 */
#define START_YawRate_Status_ESP_Anschleppstart_Freigabe      0

/**
 * Signal ESP_Anschleppstart_Freigabe raw minimum value.
 */
#define MIN_YawRate_Status_ESP_Anschleppstart_Freigabe        0

/**
 * Signal ESP_Anschleppstart_Freigabe raw maximum value.
 */
#define MAX_YawRate_Status_ESP_Anschleppstart_Freigabe        3

/**
 * Signal ESP_Anschleppstart_Freigabe raw offset value.
 */
#define OFF_YawRate_Status_ESP_Anschleppstart_Freigabe        0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_QBit_Anf_Vert_Wank Signal ESP_QBit_Anf_Vert_Wank of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_QBit_Anf_Vert_Wank configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_QBit_Anf_Vert_Wank and \ref GET_YawRate_Status_ESP_QBit_Anf_Vert_Wank instead.
 */
#define SIG_YawRate_Status_ESP_QBit_Anf_Vert_Wank        0, 0, 39, 1

/**
 * Signal ESP_QBit_Anf_Vert_Wank setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_QBit_Anf_Vert_Wank or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_QBit_Anf_Vert_Wank      0, 0, 39, 1, 0

/**
 * Get signal ESP_QBit_Anf_Vert_Wank from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_QBit_Anf_Vert_Wank(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ESP_QBit_Anf_Vert_Wank in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_QBit_Anf_Vert_Wank(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ESP_QBit_Anf_Vert_Wank in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_QBit_Anf_Vert_Wank(buf) \
	SET_YawRate_Status_ESP_QBit_Anf_Vert_Wank(buf, 0)

/**
 * Signal ESP_QBit_Anf_Vert_Wank value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_QBit_Anf_Vert_Wank(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_QBit_Anf_Vert_Wank raw initial value.
 */
#define START_YawRate_Status_ESP_QBit_Anf_Vert_Wank      0

/**
 * Signal ESP_QBit_Anf_Vert_Wank raw minimum value.
 */
#define MIN_YawRate_Status_ESP_QBit_Anf_Vert_Wank        0

/**
 * Signal ESP_QBit_Anf_Vert_Wank raw maximum value.
 */
#define MAX_YawRate_Status_ESP_QBit_Anf_Vert_Wank        1

/**
 * Signal ESP_QBit_Anf_Vert_Wank raw offset value.
 */
#define OFF_YawRate_Status_ESP_QBit_Anf_Vert_Wank        0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_yawrate Signal yawrate of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal yawrate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_yawrate and \ref GET_YawRate_Status_yawrate instead.
 */
#define SIG_YawRate_Status_yawrate                  0, 0, 40, 14

/**
 * Signal yawrate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_yawrate or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_yawrate                0, 0, 40, 14, 0

/**
 * Get signal yawrate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_yawrate(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x3f) << 8) \
)

/**
 * Set signal yawrate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_yawrate(buf, val) { \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[6] &= ~(0x3f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x3f) << 0; \
}

/**
 * Set signal yawrate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_yawrate(buf) \
	SET_YawRate_Status_yawrate(buf, 0)

/**
 * Signal yawrate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_yawrate(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal yawrate raw initial value.
 */
#define START_YawRate_Status_yawrate                0

/**
 * Signal yawrate raw minimum value.
 */
#define MIN_YawRate_Status_yawrate                  0

/**
 * Signal yawrate raw maximum value.
 */
#define MAX_YawRate_Status_yawrate                  16382

/**
 * Signal yawrate raw offset value.
 */
#define OFF_YawRate_Status_yawrate                  0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_yawrate_direction Signal yawrate_direction of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal yawrate_direction configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_yawrate_direction and \ref GET_YawRate_Status_yawrate_direction instead.
 */
#define SIG_YawRate_Status_yawrate_direction        0, 0, 54, 1

/**
 * Signal yawrate_direction setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_yawrate_direction or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_yawrate_direction      0, 0, 54, 1, 0

/**
 * Get signal yawrate_direction from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_yawrate_direction(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x01) << 0) \
)

/**
 * Set signal yawrate_direction in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_yawrate_direction(buf, val) { \
	buf[6] &= ~(0x01 << 6); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal yawrate_direction in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_yawrate_direction(buf) \
	SET_YawRate_Status_yawrate_direction(buf, 0)

/**
 * Signal yawrate_direction value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_yawrate_direction(x, fmt) \
	((x) * fmt)

/**
 * Signal yawrate_direction raw initial value.
 */
#define START_YawRate_Status_yawrate_direction      0

/**
 * Signal yawrate_direction raw minimum value.
 */
#define MIN_YawRate_Status_yawrate_direction        0

/**
 * Signal yawrate_direction raw maximum value.
 */
#define MAX_YawRate_Status_yawrate_direction        1

/**
 * Signal yawrate_direction raw offset value.
 */
#define OFF_YawRate_Status_yawrate_direction        0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_Notbremsanzeige Signal ESP_Notbremsanzeige of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_Notbremsanzeige configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_Notbremsanzeige and \ref GET_YawRate_Status_ESP_Notbremsanzeige instead.
 */
#define SIG_YawRate_Status_ESP_Notbremsanzeige        0, 0, 55, 1

/**
 * Signal ESP_Notbremsanzeige setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_Notbremsanzeige or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_Notbremsanzeige      0, 0, 55, 1, 0

/**
 * Get signal ESP_Notbremsanzeige from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_Notbremsanzeige(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ESP_Notbremsanzeige in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_Notbremsanzeige(buf, val) { \
	buf[6] &= ~(0x01 << 7); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ESP_Notbremsanzeige in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_Notbremsanzeige(buf) \
	SET_YawRate_Status_ESP_Notbremsanzeige(buf, 0)

/**
 * Signal ESP_Notbremsanzeige value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_Notbremsanzeige(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Notbremsanzeige raw initial value.
 */
#define START_YawRate_Status_ESP_Notbremsanzeige      0

/**
 * Signal ESP_Notbremsanzeige raw minimum value.
 */
#define MIN_YawRate_Status_ESP_Notbremsanzeige        0

/**
 * Signal ESP_Notbremsanzeige raw maximum value.
 */
#define MAX_YawRate_Status_ESP_Notbremsanzeige        1

/**
 * Signal ESP_Notbremsanzeige raw offset value.
 */
#define OFF_YawRate_Status_ESP_Notbremsanzeige        0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_SpannungsAnf Signal ESP_SpannungsAnf of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_SpannungsAnf configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_SpannungsAnf and \ref GET_YawRate_Status_ESP_SpannungsAnf instead.
 */
#define SIG_YawRate_Status_ESP_SpannungsAnf         0, 0, 56, 1

/**
 * Signal ESP_SpannungsAnf setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_SpannungsAnf or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_SpannungsAnf       0, 0, 56, 1, 0

/**
 * Get signal ESP_SpannungsAnf from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_SpannungsAnf(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x01) << 0) \
)

/**
 * Set signal ESP_SpannungsAnf in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_SpannungsAnf(buf, val) { \
	buf[7] &= ~(0x01 << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal ESP_SpannungsAnf in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_SpannungsAnf(buf) \
	SET_YawRate_Status_ESP_SpannungsAnf(buf, 0)

/**
 * Signal ESP_SpannungsAnf value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_SpannungsAnf(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_SpannungsAnf raw initial value.
 */
#define START_YawRate_Status_ESP_SpannungsAnf       0

/**
 * Signal ESP_SpannungsAnf raw minimum value.
 */
#define MIN_YawRate_Status_ESP_SpannungsAnf         0

/**
 * Signal ESP_SpannungsAnf raw maximum value.
 */
#define MAX_YawRate_Status_ESP_SpannungsAnf         1

/**
 * Signal ESP_SpannungsAnf raw offset value.
 */
#define OFF_YawRate_Status_ESP_SpannungsAnf         0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_PLA_Abbruch Signal ESP_PLA_Abbruch of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_PLA_Abbruch configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_PLA_Abbruch and \ref GET_YawRate_Status_ESP_PLA_Abbruch instead.
 */
#define SIG_YawRate_Status_ESP_PLA_Abbruch          0, 0, 57, 3

/**
 * Signal ESP_PLA_Abbruch setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_PLA_Abbruch or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_PLA_Abbruch        0, 0, 57, 3, 0

/**
 * Get signal ESP_PLA_Abbruch from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_PLA_Abbruch(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 1) & 0x07) << 0) \
)

/**
 * Set signal ESP_PLA_Abbruch in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_PLA_Abbruch(buf, val) { \
	buf[7] &= ~(0x07 << 1); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal ESP_PLA_Abbruch in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_PLA_Abbruch(buf) \
	SET_YawRate_Status_ESP_PLA_Abbruch(buf, 0)

/**
 * Signal ESP_PLA_Abbruch value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_PLA_Abbruch(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_PLA_Abbruch raw initial value.
 */
#define START_YawRate_Status_ESP_PLA_Abbruch        0

/**
 * Signal ESP_PLA_Abbruch raw minimum value.
 */
#define MIN_YawRate_Status_ESP_PLA_Abbruch          0

/**
 * Signal ESP_PLA_Abbruch raw maximum value.
 */
#define MAX_YawRate_Status_ESP_PLA_Abbruch          7

/**
 * Signal ESP_PLA_Abbruch raw offset value.
 */
#define OFF_YawRate_Status_ESP_PLA_Abbruch          0

/**
 * @}
 */

/**
 * @defgroup SIG_YawRate_Status_ESP_Status_ESP_PLA Signal ESP_Status_ESP_PLA of Message YawRate_Status (0x101)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawRate_Status
 * @{
 */

/**
 * Signal ESP_Status_ESP_PLA configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawRate_Status_ESP_Status_ESP_PLA and \ref GET_YawRate_Status_ESP_Status_ESP_PLA instead.
 */
#define SIG_YawRate_Status_ESP_Status_ESP_PLA        0, 0, 60, 4

/**
 * Signal ESP_Status_ESP_PLA setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawRate_Status_ESP_Status_ESP_PLA or \ref INIT_YawRate_Status instead.
 */
#define SETUP_YawRate_Status_ESP_Status_ESP_PLA      0, 0, 60, 4, 0

/**
 * Get signal ESP_Status_ESP_PLA from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawRate_Status_ESP_Status_ESP_PLA(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ESP_Status_ESP_PLA in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawRate_Status_ESP_Status_ESP_PLA(buf, val) { \
	buf[7] &= ~(0x0f << 4); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ESP_Status_ESP_PLA in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawRate_Status_ESP_Status_ESP_PLA(buf) \
	SET_YawRate_Status_ESP_Status_ESP_PLA(buf, 0)

/**
 * Signal ESP_Status_ESP_PLA value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_YawRate_Status_ESP_Status_ESP_PLA(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Status_ESP_PLA raw initial value.
 */
#define START_YawRate_Status_ESP_Status_ESP_PLA      0

/**
 * Signal ESP_Status_ESP_PLA raw minimum value.
 */
#define MIN_YawRate_Status_ESP_Status_ESP_PLA        0

/**
 * Signal ESP_Status_ESP_PLA raw maximum value.
 */
#define MAX_YawRate_Status_ESP_Status_ESP_PLA        15

/**
 * Signal ESP_Status_ESP_PLA raw offset value.
 */
#define OFF_YawRate_Status_ESP_Status_ESP_PLA        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_21_CRC Signal ESP_21_CRC of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_21_CRC configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_21_CRC and \ref GET_VehicleSpeed_Status_ESP_21_CRC instead.
 */
#define SIG_VehicleSpeed_Status_ESP_21_CRC          0, 0, 0, 8

/**
 * Signal ESP_21_CRC setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_21_CRC or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_21_CRC        0, 0, 0, 8, 0

/**
 * Get signal ESP_21_CRC from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_21_CRC(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_21_CRC in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_21_CRC(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_21_CRC in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_21_CRC(buf) \
	SET_VehicleSpeed_Status_ESP_21_CRC(buf, 0)

/**
 * Signal ESP_21_CRC value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_21_CRC(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_21_CRC raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_21_CRC        0

/**
 * Signal ESP_21_CRC raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_21_CRC          0

/**
 * Signal ESP_21_CRC raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_21_CRC          255

/**
 * Signal ESP_21_CRC raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_21_CRC          0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_21_BZ Signal ESP_21_BZ of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_21_BZ configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_21_BZ and \ref GET_VehicleSpeed_Status_ESP_21_BZ instead.
 */
#define SIG_VehicleSpeed_Status_ESP_21_BZ           0, 0, 8, 4

/**
 * Signal ESP_21_BZ setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_21_BZ or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_21_BZ         0, 0, 8, 4, 0

/**
 * Get signal ESP_21_BZ from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_21_BZ(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal ESP_21_BZ in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_21_BZ(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal ESP_21_BZ in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_21_BZ(buf) \
	SET_VehicleSpeed_Status_ESP_21_BZ(buf, 0)

/**
 * Signal ESP_21_BZ value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_21_BZ(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_21_BZ raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_21_BZ         0

/**
 * Signal ESP_21_BZ raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_21_BZ           0

/**
 * Signal ESP_21_BZ raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_21_BZ           15

/**
 * Signal ESP_21_BZ raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_21_BZ           0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_BR_Eingriffsmoment Signal BR_Eingriffsmoment of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal BR_Eingriffsmoment configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_BR_Eingriffsmoment and \ref GET_VehicleSpeed_Status_BR_Eingriffsmoment instead.
 */
#define SIG_VehicleSpeed_Status_BR_Eingriffsmoment        0, 0, 12, 10

/**
 * Signal BR_Eingriffsmoment setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_BR_Eingriffsmoment or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_BR_Eingriffsmoment      0, 0, 12, 10, 0

/**
 * Get signal BR_Eingriffsmoment from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_BR_Eingriffsmoment(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x0f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 4) \
)

/**
 * Set signal BR_Eingriffsmoment in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_BR_Eingriffsmoment(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
}

/**
 * Set signal BR_Eingriffsmoment in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_BR_Eingriffsmoment(buf) \
	SET_VehicleSpeed_Status_BR_Eingriffsmoment(buf, 0)

/**
 * Signal BR_Eingriffsmoment value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_BR_Eingriffsmoment(x, fmt) \
	((x) * fmt + fmt * (-509))

/**
 * Signal BR_Eingriffsmoment raw initial value.
 */
#define START_VehicleSpeed_Status_BR_Eingriffsmoment      0

/**
 * Signal BR_Eingriffsmoment raw minimum value.
 */
#define MIN_VehicleSpeed_Status_BR_Eingriffsmoment        0

/**
 * Signal BR_Eingriffsmoment raw maximum value.
 */
#define MAX_VehicleSpeed_Status_BR_Eingriffsmoment        1018

/**
 * Signal BR_Eingriffsmoment raw offset value.
 */
#define OFF_VehicleSpeed_Status_BR_Eingriffsmoment        -509

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_PLA_Bremseingriff Signal ESP_PLA_Bremseingriff of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_PLA_Bremseingriff configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_PLA_Bremseingriff and \ref GET_VehicleSpeed_Status_ESP_PLA_Bremseingriff instead.
 */
#define SIG_VehicleSpeed_Status_ESP_PLA_Bremseingriff        0, 0, 22, 1

/**
 * Signal ESP_PLA_Bremseingriff setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_PLA_Bremseingriff or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_PLA_Bremseingriff      0, 0, 22, 1, 0

/**
 * Get signal ESP_PLA_Bremseingriff from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_PLA_Bremseingriff(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal ESP_PLA_Bremseingriff in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_PLA_Bremseingriff(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal ESP_PLA_Bremseingriff in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_PLA_Bremseingriff(buf) \
	SET_VehicleSpeed_Status_ESP_PLA_Bremseingriff(buf, 0)

/**
 * Signal ESP_PLA_Bremseingriff value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_PLA_Bremseingriff(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_PLA_Bremseingriff raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_PLA_Bremseingriff      0

/**
 * Signal ESP_PLA_Bremseingriff raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_PLA_Bremseingriff        0

/**
 * Signal ESP_PLA_Bremseingriff raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_PLA_Bremseingriff        1

/**
 * Signal ESP_PLA_Bremseingriff raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_PLA_Bremseingriff        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_Diagnose Signal ESP_Diagnose of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_Diagnose configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_Diagnose and \ref GET_VehicleSpeed_Status_ESP_Diagnose instead.
 */
#define SIG_VehicleSpeed_Status_ESP_Diagnose        0, 0, 23, 1

/**
 * Signal ESP_Diagnose setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_Diagnose or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_Diagnose      0, 0, 23, 1, 0

/**
 * Get signal ESP_Diagnose from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_Diagnose(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ESP_Diagnose in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_Diagnose(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ESP_Diagnose in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_Diagnose(buf) \
	SET_VehicleSpeed_Status_ESP_Diagnose(buf, 0)

/**
 * Signal ESP_Diagnose value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_Diagnose(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Diagnose raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_Diagnose      0

/**
 * Signal ESP_Diagnose raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_Diagnose        0

/**
 * Signal ESP_Diagnose raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_Diagnose        1

/**
 * Signal ESP_Diagnose raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_Diagnose        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESC_Reku_Freigabe Signal ESC_Reku_Freigabe of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESC_Reku_Freigabe configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESC_Reku_Freigabe and \ref GET_VehicleSpeed_Status_ESC_Reku_Freigabe instead.
 */
#define SIG_VehicleSpeed_Status_ESC_Reku_Freigabe        0, 0, 24, 1

/**
 * Signal ESC_Reku_Freigabe setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESC_Reku_Freigabe or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESC_Reku_Freigabe      0, 0, 24, 1, 0

/**
 * Get signal ESC_Reku_Freigabe from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESC_Reku_Freigabe(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x01) << 0) \
)

/**
 * Set signal ESC_Reku_Freigabe in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESC_Reku_Freigabe(buf, val) { \
	buf[3] &= ~(0x01 << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal ESC_Reku_Freigabe in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESC_Reku_Freigabe(buf) \
	SET_VehicleSpeed_Status_ESC_Reku_Freigabe(buf, 0)

/**
 * Signal ESC_Reku_Freigabe value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESC_Reku_Freigabe(x, fmt) \
	((x) * fmt)

/**
 * Signal ESC_Reku_Freigabe raw initial value.
 */
#define START_VehicleSpeed_Status_ESC_Reku_Freigabe      0

/**
 * Signal ESC_Reku_Freigabe raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESC_Reku_Freigabe        0

/**
 * Signal ESC_Reku_Freigabe raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESC_Reku_Freigabe        1

/**
 * Signal ESC_Reku_Freigabe raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESC_Reku_Freigabe        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low Signal ESC_v_Signal_Qualifier_High_Low of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESC_v_Signal_Qualifier_High_Low configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low and \ref GET_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low instead.
 */
#define SIG_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low        0, 0, 25, 3

/**
 * Signal ESC_v_Signal_Qualifier_High_Low setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low      0, 0, 25, 3, 0

/**
 * Get signal ESC_v_Signal_Qualifier_High_Low from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 1) & 0x07) << 0) \
)

/**
 * Set signal ESC_v_Signal_Qualifier_High_Low in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low(buf, val) { \
	buf[3] &= ~(0x07 << 1); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal ESC_v_Signal_Qualifier_High_Low in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low(buf) \
	SET_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low(buf, 0)

/**
 * Signal ESC_v_Signal_Qualifier_High_Low value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low(x, fmt) \
	((x) * fmt)

/**
 * Signal ESC_v_Signal_Qualifier_High_Low raw initial value.
 */
#define START_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low      0

/**
 * Signal ESC_v_Signal_Qualifier_High_Low raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low        0

/**
 * Signal ESC_v_Signal_Qualifier_High_Low raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low        7

/**
 * Signal ESC_v_Signal_Qualifier_High_Low raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESC_v_Signal_Qualifier_High_Low        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_Vorsteuerung Signal ESP_Vorsteuerung of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_Vorsteuerung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_Vorsteuerung and \ref GET_VehicleSpeed_Status_ESP_Vorsteuerung instead.
 */
#define SIG_VehicleSpeed_Status_ESP_Vorsteuerung        0, 0, 28, 1

/**
 * Signal ESP_Vorsteuerung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_Vorsteuerung or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_Vorsteuerung      0, 0, 28, 1, 0

/**
 * Get signal ESP_Vorsteuerung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_Vorsteuerung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x01) << 0) \
)

/**
 * Set signal ESP_Vorsteuerung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_Vorsteuerung(buf, val) { \
	buf[3] &= ~(0x01 << 4); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal ESP_Vorsteuerung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_Vorsteuerung(buf) \
	SET_VehicleSpeed_Status_ESP_Vorsteuerung(buf, 0)

/**
 * Signal ESP_Vorsteuerung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_Vorsteuerung(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Vorsteuerung raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_Vorsteuerung      0

/**
 * Signal ESP_Vorsteuerung raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_Vorsteuerung        0

/**
 * Signal ESP_Vorsteuerung raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_Vorsteuerung        1

/**
 * Signal ESP_Vorsteuerung raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_Vorsteuerung        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv Signal ESP_AWV3_Brems_aktiv of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_AWV3_Brems_aktiv configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv and \ref GET_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv instead.
 */
#define SIG_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv        0, 0, 29, 1

/**
 * Signal ESP_AWV3_Brems_aktiv setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv      0, 0, 29, 1, 0

/**
 * Get signal ESP_AWV3_Brems_aktiv from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 5) & 0x01) << 0) \
)

/**
 * Set signal ESP_AWV3_Brems_aktiv in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv(buf, val) { \
	buf[3] &= ~(0x01 << 5); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal ESP_AWV3_Brems_aktiv in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv(buf) \
	SET_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv(buf, 0)

/**
 * Signal ESP_AWV3_Brems_aktiv value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_AWV3_Brems_aktiv raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv      0

/**
 * Signal ESP_AWV3_Brems_aktiv raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv        0

/**
 * Signal ESP_AWV3_Brems_aktiv raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv        1

/**
 * Signal ESP_AWV3_Brems_aktiv raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_AWV3_Brems_aktiv        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_OBD_Schlechtweg Signal OBD_Schlechtweg of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal OBD_Schlechtweg configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_OBD_Schlechtweg and \ref GET_VehicleSpeed_Status_OBD_Schlechtweg instead.
 */
#define SIG_VehicleSpeed_Status_OBD_Schlechtweg        0, 0, 30, 1

/**
 * Signal OBD_Schlechtweg setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_OBD_Schlechtweg or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_OBD_Schlechtweg      0, 0, 30, 1, 0

/**
 * Get signal OBD_Schlechtweg from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_OBD_Schlechtweg(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x01) << 0) \
)

/**
 * Set signal OBD_Schlechtweg in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_OBD_Schlechtweg(buf, val) { \
	buf[3] &= ~(0x01 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal OBD_Schlechtweg in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_OBD_Schlechtweg(buf) \
	SET_VehicleSpeed_Status_OBD_Schlechtweg(buf, 0)

/**
 * Signal OBD_Schlechtweg value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_OBD_Schlechtweg(x, fmt) \
	((x) * fmt)

/**
 * Signal OBD_Schlechtweg raw initial value.
 */
#define START_VehicleSpeed_Status_OBD_Schlechtweg      0

/**
 * Signal OBD_Schlechtweg raw minimum value.
 */
#define MIN_VehicleSpeed_Status_OBD_Schlechtweg        0

/**
 * Signal OBD_Schlechtweg raw maximum value.
 */
#define MAX_VehicleSpeed_Status_OBD_Schlechtweg        1

/**
 * Signal OBD_Schlechtweg raw offset value.
 */
#define OFF_VehicleSpeed_Status_OBD_Schlechtweg        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_OBD_QBit_Schlechtweg Signal OBD_QBit_Schlechtweg of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal OBD_QBit_Schlechtweg configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_OBD_QBit_Schlechtweg and \ref GET_VehicleSpeed_Status_OBD_QBit_Schlechtweg instead.
 */
#define SIG_VehicleSpeed_Status_OBD_QBit_Schlechtweg        0, 0, 31, 1

/**
 * Signal OBD_QBit_Schlechtweg setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_OBD_QBit_Schlechtweg or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_OBD_QBit_Schlechtweg      0, 0, 31, 1, 0

/**
 * Get signal OBD_QBit_Schlechtweg from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_OBD_QBit_Schlechtweg(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 7) & 0x01) << 0) \
)

/**
 * Set signal OBD_QBit_Schlechtweg in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_OBD_QBit_Schlechtweg(buf, val) { \
	buf[3] &= ~(0x01 << 7); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal OBD_QBit_Schlechtweg in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_OBD_QBit_Schlechtweg(buf) \
	SET_VehicleSpeed_Status_OBD_QBit_Schlechtweg(buf, 0)

/**
 * Signal OBD_QBit_Schlechtweg value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_OBD_QBit_Schlechtweg(x, fmt) \
	((x) * fmt)

/**
 * Signal OBD_QBit_Schlechtweg raw initial value.
 */
#define START_VehicleSpeed_Status_OBD_QBit_Schlechtweg      0

/**
 * Signal OBD_QBit_Schlechtweg raw minimum value.
 */
#define MIN_VehicleSpeed_Status_OBD_QBit_Schlechtweg        0

/**
 * Signal OBD_QBit_Schlechtweg raw maximum value.
 */
#define MAX_VehicleSpeed_Status_OBD_QBit_Schlechtweg        1

/**
 * Signal OBD_QBit_Schlechtweg raw offset value.
 */
#define OFF_VehicleSpeed_Status_OBD_QBit_Schlechtweg        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_real_vehicle_speed Signal real_vehicle_speed of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal real_vehicle_speed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_real_vehicle_speed and \ref GET_VehicleSpeed_Status_real_vehicle_speed instead.
 */
#define SIG_VehicleSpeed_Status_real_vehicle_speed        0, 0, 32, 16

/**
 * Signal real_vehicle_speed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_real_vehicle_speed or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_real_vehicle_speed      0, 0, 32, 16, 0

/**
 * Get signal real_vehicle_speed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_real_vehicle_speed(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 8) \
)

/**
 * Set signal real_vehicle_speed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_real_vehicle_speed(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal real_vehicle_speed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_real_vehicle_speed(buf) \
	SET_VehicleSpeed_Status_real_vehicle_speed(buf, 0)

/**
 * Signal real_vehicle_speed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_real_vehicle_speed(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal real_vehicle_speed raw initial value.
 */
#define START_VehicleSpeed_Status_real_vehicle_speed      0

/**
 * Signal real_vehicle_speed raw minimum value.
 */
#define MIN_VehicleSpeed_Status_real_vehicle_speed        0

/**
 * Signal real_vehicle_speed raw maximum value.
 */
#define MAX_VehicleSpeed_Status_real_vehicle_speed        65532

/**
 * Signal real_vehicle_speed raw offset value.
 */
#define OFF_VehicleSpeed_Status_real_vehicle_speed        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ASR_Tastung_passiv Signal ASR_Tastung_passiv of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ASR_Tastung_passiv configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ASR_Tastung_passiv and \ref GET_VehicleSpeed_Status_ASR_Tastung_passiv instead.
 */
#define SIG_VehicleSpeed_Status_ASR_Tastung_passiv        0, 0, 48, 1

/**
 * Signal ASR_Tastung_passiv setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ASR_Tastung_passiv or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ASR_Tastung_passiv      0, 0, 48, 1, 0

/**
 * Get signal ASR_Tastung_passiv from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ASR_Tastung_passiv(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0x01) << 0) \
)

/**
 * Set signal ASR_Tastung_passiv in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ASR_Tastung_passiv(buf, val) { \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal ASR_Tastung_passiv in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ASR_Tastung_passiv(buf) \
	SET_VehicleSpeed_Status_ASR_Tastung_passiv(buf, 0)

/**
 * Signal ASR_Tastung_passiv value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ASR_Tastung_passiv(x, fmt) \
	((x) * fmt)

/**
 * Signal ASR_Tastung_passiv raw initial value.
 */
#define START_VehicleSpeed_Status_ASR_Tastung_passiv      0

/**
 * Signal ASR_Tastung_passiv raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ASR_Tastung_passiv        0

/**
 * Signal ASR_Tastung_passiv raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ASR_Tastung_passiv        1

/**
 * Signal ASR_Tastung_passiv raw offset value.
 */
#define OFF_VehicleSpeed_Status_ASR_Tastung_passiv        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_Tastung_passiv Signal ESP_Tastung_passiv of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_Tastung_passiv configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_Tastung_passiv and \ref GET_VehicleSpeed_Status_ESP_Tastung_passiv instead.
 */
#define SIG_VehicleSpeed_Status_ESP_Tastung_passiv        0, 0, 49, 1

/**
 * Signal ESP_Tastung_passiv setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_Tastung_passiv or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_Tastung_passiv      0, 0, 49, 1, 0

/**
 * Get signal ESP_Tastung_passiv from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_Tastung_passiv(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x01) << 0) \
)

/**
 * Set signal ESP_Tastung_passiv in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_Tastung_passiv(buf, val) { \
	buf[6] &= ~(0x01 << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 1; \
}

/**
 * Set signal ESP_Tastung_passiv in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_Tastung_passiv(buf) \
	SET_VehicleSpeed_Status_ESP_Tastung_passiv(buf, 0)

/**
 * Signal ESP_Tastung_passiv value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_Tastung_passiv(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Tastung_passiv raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_Tastung_passiv      0

/**
 * Signal ESP_Tastung_passiv raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_Tastung_passiv        0

/**
 * Signal ESP_Tastung_passiv raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_Tastung_passiv        1

/**
 * Signal ESP_Tastung_passiv raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_Tastung_passiv        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_Systemstatus Signal ESP_Systemstatus of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_Systemstatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_Systemstatus and \ref GET_VehicleSpeed_Status_ESP_Systemstatus instead.
 */
#define SIG_VehicleSpeed_Status_ESP_Systemstatus        0, 0, 50, 1

/**
 * Signal ESP_Systemstatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_Systemstatus or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_Systemstatus      0, 0, 50, 1, 0

/**
 * Get signal ESP_Systemstatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_Systemstatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 2) & 0x01) << 0) \
)

/**
 * Set signal ESP_Systemstatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_Systemstatus(buf, val) { \
	buf[6] &= ~(0x01 << 2); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal ESP_Systemstatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_Systemstatus(buf) \
	SET_VehicleSpeed_Status_ESP_Systemstatus(buf, 0)

/**
 * Signal ESP_Systemstatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_Systemstatus(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Systemstatus raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_Systemstatus      0

/**
 * Signal ESP_Systemstatus raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_Systemstatus        0

/**
 * Signal ESP_Systemstatus raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_Systemstatus        1

/**
 * Signal ESP_Systemstatus raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_Systemstatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ASR_Schalteingriff Signal ASR_Schalteingriff of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ASR_Schalteingriff configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ASR_Schalteingriff and \ref GET_VehicleSpeed_Status_ASR_Schalteingriff instead.
 */
#define SIG_VehicleSpeed_Status_ASR_Schalteingriff        0, 0, 51, 2

/**
 * Signal ASR_Schalteingriff setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ASR_Schalteingriff or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ASR_Schalteingriff      0, 0, 51, 2, 0

/**
 * Get signal ASR_Schalteingriff from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ASR_Schalteingriff(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x03) << 0) \
)

/**
 * Set signal ASR_Schalteingriff in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ASR_Schalteingriff(buf, val) { \
	buf[6] &= ~(0x03 << 3); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal ASR_Schalteingriff in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ASR_Schalteingriff(buf) \
	SET_VehicleSpeed_Status_ASR_Schalteingriff(buf, 0)

/**
 * Signal ASR_Schalteingriff value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ASR_Schalteingriff(x, fmt) \
	((x) * fmt)

/**
 * Signal ASR_Schalteingriff raw initial value.
 */
#define START_VehicleSpeed_Status_ASR_Schalteingriff      0

/**
 * Signal ASR_Schalteingriff raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ASR_Schalteingriff        0

/**
 * Signal ASR_Schalteingriff raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ASR_Schalteingriff        3

/**
 * Signal ASR_Schalteingriff raw offset value.
 */
#define OFF_VehicleSpeed_Status_ASR_Schalteingriff        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_Haltebestaetigung Signal ESP_Haltebestaetigung of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_Haltebestaetigung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_Haltebestaetigung and \ref GET_VehicleSpeed_Status_ESP_Haltebestaetigung instead.
 */
#define SIG_VehicleSpeed_Status_ESP_Haltebestaetigung        0, 0, 53, 1

/**
 * Signal ESP_Haltebestaetigung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_Haltebestaetigung or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_Haltebestaetigung      0, 0, 53, 1, 0

/**
 * Get signal ESP_Haltebestaetigung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_Haltebestaetigung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x01) << 0) \
)

/**
 * Set signal ESP_Haltebestaetigung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_Haltebestaetigung(buf, val) { \
	buf[6] &= ~(0x01 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal ESP_Haltebestaetigung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_Haltebestaetigung(buf) \
	SET_VehicleSpeed_Status_ESP_Haltebestaetigung(buf, 0)

/**
 * Signal ESP_Haltebestaetigung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_Haltebestaetigung(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Haltebestaetigung raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_Haltebestaetigung      0

/**
 * Signal ESP_Haltebestaetigung raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_Haltebestaetigung        0

/**
 * Signal ESP_Haltebestaetigung raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_Haltebestaetigung        1

/**
 * Signal ESP_Haltebestaetigung raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_Haltebestaetigung        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw Signal ESP_MKB_Abbruch_Geschw of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_MKB_Abbruch_Geschw configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw and \ref GET_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw instead.
 */
#define SIG_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw        0, 0, 54, 1

/**
 * Signal ESP_MKB_Abbruch_Geschw setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw      0, 0, 54, 1, 0

/**
 * Get signal ESP_MKB_Abbruch_Geschw from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x01) << 0) \
)

/**
 * Set signal ESP_MKB_Abbruch_Geschw in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw(buf, val) { \
	buf[6] &= ~(0x01 << 6); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal ESP_MKB_Abbruch_Geschw in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw(buf) \
	SET_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw(buf, 0)

/**
 * Signal ESP_MKB_Abbruch_Geschw value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_MKB_Abbruch_Geschw raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw      0

/**
 * Signal ESP_MKB_Abbruch_Geschw raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw        0

/**
 * Signal ESP_MKB_Abbruch_Geschw raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw        1

/**
 * Signal ESP_MKB_Abbruch_Geschw raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_MKB_Abbruch_Geschw        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_QBit_v_Signal Signal ESP_QBit_v_Signal of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_QBit_v_Signal configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_QBit_v_Signal and \ref GET_VehicleSpeed_Status_ESP_QBit_v_Signal instead.
 */
#define SIG_VehicleSpeed_Status_ESP_QBit_v_Signal        0, 0, 55, 1

/**
 * Signal ESP_QBit_v_Signal setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_QBit_v_Signal or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_QBit_v_Signal      0, 0, 55, 1, 0

/**
 * Get signal ESP_QBit_v_Signal from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_QBit_v_Signal(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ESP_QBit_v_Signal in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_QBit_v_Signal(buf, val) { \
	buf[6] &= ~(0x01 << 7); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ESP_QBit_v_Signal in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_QBit_v_Signal(buf) \
	SET_VehicleSpeed_Status_ESP_QBit_v_Signal(buf, 0)

/**
 * Signal ESP_QBit_v_Signal value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_QBit_v_Signal(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_QBit_v_Signal raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_QBit_v_Signal      0

/**
 * Signal ESP_QBit_v_Signal raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_QBit_v_Signal        0

/**
 * Signal ESP_QBit_v_Signal raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_QBit_v_Signal        1

/**
 * Signal ESP_QBit_v_Signal raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_QBit_v_Signal        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ABS_Bremsung Signal ABS_Bremsung of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ABS_Bremsung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ABS_Bremsung and \ref GET_VehicleSpeed_Status_ABS_Bremsung instead.
 */
#define SIG_VehicleSpeed_Status_ABS_Bremsung        0, 0, 56, 1

/**
 * Signal ABS_Bremsung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ABS_Bremsung or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ABS_Bremsung      0, 0, 56, 1, 0

/**
 * Get signal ABS_Bremsung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ABS_Bremsung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x01) << 0) \
)

/**
 * Set signal ABS_Bremsung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ABS_Bremsung(buf, val) { \
	buf[7] &= ~(0x01 << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal ABS_Bremsung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ABS_Bremsung(buf) \
	SET_VehicleSpeed_Status_ABS_Bremsung(buf, 0)

/**
 * Signal ABS_Bremsung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ABS_Bremsung(x, fmt) \
	((x) * fmt)

/**
 * Signal ABS_Bremsung raw initial value.
 */
#define START_VehicleSpeed_Status_ABS_Bremsung      0

/**
 * Signal ABS_Bremsung raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ABS_Bremsung        0

/**
 * Signal ABS_Bremsung raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ABS_Bremsung        1

/**
 * Signal ABS_Bremsung raw offset value.
 */
#define OFF_VehicleSpeed_Status_ABS_Bremsung        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ASR_Anf Signal ASR_Anf of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ASR_Anf configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ASR_Anf and \ref GET_VehicleSpeed_Status_ASR_Anf instead.
 */
#define SIG_VehicleSpeed_Status_ASR_Anf             0, 0, 57, 1

/**
 * Signal ASR_Anf setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ASR_Anf or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ASR_Anf           0, 0, 57, 1, 0

/**
 * Get signal ASR_Anf from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ASR_Anf(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 1) & 0x01) << 0) \
)

/**
 * Set signal ASR_Anf in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ASR_Anf(buf, val) { \
	buf[7] &= ~(0x01 << 1); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 1; \
}

/**
 * Set signal ASR_Anf in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ASR_Anf(buf) \
	SET_VehicleSpeed_Status_ASR_Anf(buf, 0)

/**
 * Signal ASR_Anf value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ASR_Anf(x, fmt) \
	((x) * fmt)

/**
 * Signal ASR_Anf raw initial value.
 */
#define START_VehicleSpeed_Status_ASR_Anf           0

/**
 * Signal ASR_Anf raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ASR_Anf             0

/**
 * Signal ASR_Anf raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ASR_Anf             1

/**
 * Signal ASR_Anf raw offset value.
 */
#define OFF_VehicleSpeed_Status_ASR_Anf             0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_MSR_Anf Signal MSR_Anf of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal MSR_Anf configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_MSR_Anf and \ref GET_VehicleSpeed_Status_MSR_Anf instead.
 */
#define SIG_VehicleSpeed_Status_MSR_Anf             0, 0, 58, 1

/**
 * Signal MSR_Anf setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_MSR_Anf or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_MSR_Anf           0, 0, 58, 1, 0

/**
 * Get signal MSR_Anf from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_MSR_Anf(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x01) << 0) \
)

/**
 * Set signal MSR_Anf in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_MSR_Anf(buf, val) { \
	buf[7] &= ~(0x01 << 2); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal MSR_Anf in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_MSR_Anf(buf) \
	SET_VehicleSpeed_Status_MSR_Anf(buf, 0)

/**
 * Signal MSR_Anf value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_MSR_Anf(x, fmt) \
	((x) * fmt)

/**
 * Signal MSR_Anf raw initial value.
 */
#define START_VehicleSpeed_Status_MSR_Anf           0

/**
 * Signal MSR_Anf raw minimum value.
 */
#define MIN_VehicleSpeed_Status_MSR_Anf             0

/**
 * Signal MSR_Anf raw maximum value.
 */
#define MAX_VehicleSpeed_Status_MSR_Anf             1

/**
 * Signal MSR_Anf raw offset value.
 */
#define OFF_VehicleSpeed_Status_MSR_Anf             0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_EBV_Eingriff Signal EBV_Eingriff of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal EBV_Eingriff configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_EBV_Eingriff and \ref GET_VehicleSpeed_Status_EBV_Eingriff instead.
 */
#define SIG_VehicleSpeed_Status_EBV_Eingriff        0, 0, 59, 1

/**
 * Signal EBV_Eingriff setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_EBV_Eingriff or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_EBV_Eingriff      0, 0, 59, 1, 0

/**
 * Get signal EBV_Eingriff from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_EBV_Eingriff(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x01) << 0) \
)

/**
 * Set signal EBV_Eingriff in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_EBV_Eingriff(buf, val) { \
	buf[7] &= ~(0x01 << 3); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal EBV_Eingriff in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_EBV_Eingriff(buf) \
	SET_VehicleSpeed_Status_EBV_Eingriff(buf, 0)

/**
 * Signal EBV_Eingriff value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_EBV_Eingriff(x, fmt) \
	((x) * fmt)

/**
 * Signal EBV_Eingriff raw initial value.
 */
#define START_VehicleSpeed_Status_EBV_Eingriff      0

/**
 * Signal EBV_Eingriff raw minimum value.
 */
#define MIN_VehicleSpeed_Status_EBV_Eingriff        0

/**
 * Signal EBV_Eingriff raw maximum value.
 */
#define MAX_VehicleSpeed_Status_EBV_Eingriff        1

/**
 * Signal EBV_Eingriff raw offset value.
 */
#define OFF_VehicleSpeed_Status_EBV_Eingriff        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_EDS_Eingriff Signal EDS_Eingriff of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal EDS_Eingriff configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_EDS_Eingriff and \ref GET_VehicleSpeed_Status_EDS_Eingriff instead.
 */
#define SIG_VehicleSpeed_Status_EDS_Eingriff        0, 0, 60, 1

/**
 * Signal EDS_Eingriff setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_EDS_Eingriff or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_EDS_Eingriff      0, 0, 60, 1, 0

/**
 * Get signal EDS_Eingriff from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_EDS_Eingriff(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 4) & 0x01) << 0) \
)

/**
 * Set signal EDS_Eingriff in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_EDS_Eingriff(buf, val) { \
	buf[7] &= ~(0x01 << 4); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal EDS_Eingriff in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_EDS_Eingriff(buf) \
	SET_VehicleSpeed_Status_EDS_Eingriff(buf, 0)

/**
 * Signal EDS_Eingriff value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_EDS_Eingriff(x, fmt) \
	((x) * fmt)

/**
 * Signal EDS_Eingriff raw initial value.
 */
#define START_VehicleSpeed_Status_EDS_Eingriff      0

/**
 * Signal EDS_Eingriff raw minimum value.
 */
#define MIN_VehicleSpeed_Status_EDS_Eingriff        0

/**
 * Signal EDS_Eingriff raw maximum value.
 */
#define MAX_VehicleSpeed_Status_EDS_Eingriff        1

/**
 * Signal EDS_Eingriff raw offset value.
 */
#define OFF_VehicleSpeed_Status_EDS_Eingriff        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_Eingriff Signal ESP_Eingriff of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_Eingriff configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_Eingriff and \ref GET_VehicleSpeed_Status_ESP_Eingriff instead.
 */
#define SIG_VehicleSpeed_Status_ESP_Eingriff        0, 0, 61, 1

/**
 * Signal ESP_Eingriff setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_Eingriff or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_Eingriff      0, 0, 61, 1, 0

/**
 * Get signal ESP_Eingriff from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_Eingriff(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0) \
)

/**
 * Set signal ESP_Eingriff in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_Eingriff(buf, val) { \
	buf[7] &= ~(0x01 << 5); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal ESP_Eingriff in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_Eingriff(buf) \
	SET_VehicleSpeed_Status_ESP_Eingriff(buf, 0)

/**
 * Signal ESP_Eingriff value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_Eingriff(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Eingriff raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_Eingriff      0

/**
 * Signal ESP_Eingriff raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_Eingriff        0

/**
 * Signal ESP_Eingriff raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_Eingriff        1

/**
 * Signal ESP_Eingriff raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_Eingriff        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_ASP Signal ESP_ASP of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_ASP configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_ASP and \ref GET_VehicleSpeed_Status_ESP_ASP instead.
 */
#define SIG_VehicleSpeed_Status_ESP_ASP             0, 0, 62, 1

/**
 * Signal ESP_ASP setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_ASP or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_ASP           0, 0, 62, 1, 0

/**
 * Get signal ESP_ASP from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_ASP(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x01) << 0) \
)

/**
 * Set signal ESP_ASP in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_ASP(buf, val) { \
	buf[7] &= ~(0x01 << 6); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal ESP_ASP in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_ASP(buf) \
	SET_VehicleSpeed_Status_ESP_ASP(buf, 0)

/**
 * Signal ESP_ASP value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_ASP(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_ASP raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_ASP           0

/**
 * Signal ESP_ASP raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_ASP             0

/**
 * Signal ESP_ASP raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_ASP             1

/**
 * Signal ESP_ASP raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_ASP             0

/**
 * @}
 */

/**
 * @defgroup SIG_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv Signal ESP_Anhaltevorgang_ACC_aktiv of Message VehicleSpeed_Status (0xfd)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehicleSpeed_Status
 * @{
 */

/**
 * Signal ESP_Anhaltevorgang_ACC_aktiv configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv and \ref GET_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv instead.
 */
#define SIG_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv        0, 0, 63, 1

/**
 * Signal ESP_Anhaltevorgang_ACC_aktiv setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv or \ref INIT_VehicleSpeed_Status instead.
 */
#define SETUP_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv      0, 0, 63, 1, 0

/**
 * Get signal ESP_Anhaltevorgang_ACC_aktiv from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ESP_Anhaltevorgang_ACC_aktiv in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv(buf, val) { \
	buf[7] &= ~(0x01 << 7); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ESP_Anhaltevorgang_ACC_aktiv in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv(buf) \
	SET_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv(buf, 0)

/**
 * Signal ESP_Anhaltevorgang_ACC_aktiv value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Anhaltevorgang_ACC_aktiv raw initial value.
 */
#define START_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv      0

/**
 * Signal ESP_Anhaltevorgang_ACC_aktiv raw minimum value.
 */
#define MIN_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv        0

/**
 * Signal ESP_Anhaltevorgang_ACC_aktiv raw maximum value.
 */
#define MAX_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv        1

/**
 * Signal ESP_Anhaltevorgang_ACC_aktiv raw offset value.
 */
#define OFF_VehicleSpeed_Status_ESP_Anhaltevorgang_ACC_aktiv        0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_Getriebe_11_CRC Signal Getriebe_11_CRC of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal Getriebe_11_CRC configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_Getriebe_11_CRC and \ref GET_Gear_Getriebe_11_CRC instead.
 */
#define SIG_Gear_Getriebe_11_CRC                    0, 0, 0, 8

/**
 * Signal Getriebe_11_CRC setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_Getriebe_11_CRC or \ref INIT_Gear instead.
 */
#define SETUP_Gear_Getriebe_11_CRC                  0, 0, 0, 8, 0

/**
 * Get signal Getriebe_11_CRC from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_Getriebe_11_CRC(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Getriebe_11_CRC in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_Getriebe_11_CRC(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Getriebe_11_CRC in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_Getriebe_11_CRC(buf) \
	SET_Gear_Getriebe_11_CRC(buf, 0)

/**
 * Signal Getriebe_11_CRC value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_Getriebe_11_CRC(x, fmt) \
	((x) * fmt)

/**
 * Signal Getriebe_11_CRC raw initial value.
 */
#define START_Gear_Getriebe_11_CRC                  0

/**
 * Signal Getriebe_11_CRC raw minimum value.
 */
#define MIN_Gear_Getriebe_11_CRC                    0

/**
 * Signal Getriebe_11_CRC raw maximum value.
 */
#define MAX_Gear_Getriebe_11_CRC                    255

/**
 * Signal Getriebe_11_CRC raw offset value.
 */
#define OFF_Gear_Getriebe_11_CRC                    0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_Getriebe_11_BZ Signal Getriebe_11_BZ of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal Getriebe_11_BZ configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_Getriebe_11_BZ and \ref GET_Gear_Getriebe_11_BZ instead.
 */
#define SIG_Gear_Getriebe_11_BZ                     0, 0, 8, 4

/**
 * Signal Getriebe_11_BZ setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_Getriebe_11_BZ or \ref INIT_Gear instead.
 */
#define SETUP_Gear_Getriebe_11_BZ                   0, 0, 8, 4, 0

/**
 * Get signal Getriebe_11_BZ from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_Getriebe_11_BZ(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Getriebe_11_BZ in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_Getriebe_11_BZ(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Getriebe_11_BZ in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_Getriebe_11_BZ(buf) \
	SET_Gear_Getriebe_11_BZ(buf, 0)

/**
 * Signal Getriebe_11_BZ value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_Getriebe_11_BZ(x, fmt) \
	((x) * fmt)

/**
 * Signal Getriebe_11_BZ raw initial value.
 */
#define START_Gear_Getriebe_11_BZ                   0

/**
 * Signal Getriebe_11_BZ raw minimum value.
 */
#define MIN_Gear_Getriebe_11_BZ                     0

/**
 * Signal Getriebe_11_BZ raw maximum value.
 */
#define MAX_Gear_Getriebe_11_BZ                     15

/**
 * Signal Getriebe_11_BZ raw offset value.
 */
#define OFF_Gear_Getriebe_11_BZ                     0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_MMom_Soll_02 Signal GE_MMom_Soll_02 of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_MMom_Soll_02 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_MMom_Soll_02 and \ref GET_Gear_GE_MMom_Soll_02 instead.
 */
#define SIG_Gear_GE_MMom_Soll_02                    0, 0, 12, 10

/**
 * Signal GE_MMom_Soll_02 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_MMom_Soll_02 or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_MMom_Soll_02                  0, 0, 12, 10, 0

/**
 * Get signal GE_MMom_Soll_02 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_MMom_Soll_02(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x0f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 4) \
)

/**
 * Set signal GE_MMom_Soll_02 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_MMom_Soll_02(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
}

/**
 * Set signal GE_MMom_Soll_02 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_MMom_Soll_02(buf) \
	SET_Gear_GE_MMom_Soll_02(buf, 0)

/**
 * Signal GE_MMom_Soll_02 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_MMom_Soll_02(x, fmt) \
	((x) * fmt + fmt * (-509))

/**
 * Signal GE_MMom_Soll_02 raw initial value.
 */
#define START_Gear_GE_MMom_Soll_02                  0

/**
 * Signal GE_MMom_Soll_02 raw minimum value.
 */
#define MIN_Gear_GE_MMom_Soll_02                    0

/**
 * Signal GE_MMom_Soll_02 raw maximum value.
 */
#define MAX_Gear_GE_MMom_Soll_02                    1018

/**
 * Signal GE_MMom_Soll_02 raw offset value.
 */
#define OFF_Gear_GE_MMom_Soll_02                    -509

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_MMom_Vorhalt_02 Signal GE_MMom_Vorhalt_02 of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_MMom_Vorhalt_02 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_MMom_Vorhalt_02 and \ref GET_Gear_GE_MMom_Vorhalt_02 instead.
 */
#define SIG_Gear_GE_MMom_Vorhalt_02                 0, 0, 22, 10

/**
 * Signal GE_MMom_Vorhalt_02 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_MMom_Vorhalt_02 or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_MMom_Vorhalt_02               0, 0, 22, 10, 0

/**
 * Get signal GE_MMom_Vorhalt_02 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_MMom_Vorhalt_02(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
)

/**
 * Set signal GE_MMom_Vorhalt_02 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_MMom_Vorhalt_02(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
}

/**
 * Set signal GE_MMom_Vorhalt_02 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_MMom_Vorhalt_02(buf) \
	SET_Gear_GE_MMom_Vorhalt_02(buf, 0)

/**
 * Signal GE_MMom_Vorhalt_02 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_MMom_Vorhalt_02(x, fmt) \
	((x) * fmt + fmt * (-509))

/**
 * Signal GE_MMom_Vorhalt_02 raw initial value.
 */
#define START_Gear_GE_MMom_Vorhalt_02               0

/**
 * Signal GE_MMom_Vorhalt_02 raw minimum value.
 */
#define MIN_Gear_GE_MMom_Vorhalt_02                 0

/**
 * Signal GE_MMom_Vorhalt_02 raw maximum value.
 */
#define MAX_Gear_GE_MMom_Vorhalt_02                 1018

/**
 * Signal GE_MMom_Vorhalt_02 raw offset value.
 */
#define OFF_Gear_GE_MMom_Vorhalt_02                 -509

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_Uefkt Signal GE_Uefkt of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_Uefkt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_Uefkt and \ref GET_Gear_GE_Uefkt instead.
 */
#define SIG_Gear_GE_Uefkt                           0, 0, 32, 10

/**
 * Signal GE_Uefkt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_Uefkt or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_Uefkt                         0, 0, 32, 10, 0

/**
 * Get signal GE_Uefkt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_Uefkt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x03) << 8) \
)

/**
 * Set signal GE_Uefkt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_Uefkt(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
}

/**
 * Set signal GE_Uefkt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_Uefkt(buf) \
	SET_Gear_GE_Uefkt(buf, 0)

/**
 * Signal GE_Uefkt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_Uefkt(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal GE_Uefkt raw initial value.
 */
#define START_Gear_GE_Uefkt                         0

/**
 * Signal GE_Uefkt raw minimum value.
 */
#define MIN_Gear_GE_Uefkt                           0

/**
 * Signal GE_Uefkt raw maximum value.
 */
#define MAX_Gear_GE_Uefkt                           1022

/**
 * Signal GE_Uefkt raw offset value.
 */
#define OFF_Gear_GE_Uefkt                           0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_actual_gear Signal actual_gear of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal actual_gear configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_actual_gear and \ref GET_Gear_actual_gear instead.
 */
#define SIG_Gear_actual_gear                        0, 0, 42, 4

/**
 * Signal actual_gear setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_actual_gear or \ref INIT_Gear instead.
 */
#define SETUP_Gear_actual_gear                      0, 0, 42, 4, 0

/**
 * Get signal actual_gear from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_actual_gear(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x0f) << 0) \
)

/**
 * Set signal actual_gear in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_actual_gear(buf, val) { \
	buf[5] &= ~(0x0f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x0f) << 2; \
}

/**
 * Set signal actual_gear in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_actual_gear(buf) \
	SET_Gear_actual_gear(buf, 0)

/**
 * Signal actual_gear value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_actual_gear(x, fmt) \
	((x) * fmt)

/**
 * Signal actual_gear raw initial value.
 */
#define START_Gear_actual_gear                      0

/**
 * Signal actual_gear raw minimum value.
 */
#define MIN_Gear_actual_gear                        0

/**
 * Signal actual_gear raw maximum value.
 */
#define MAX_Gear_actual_gear                        15

/**
 * Signal actual_gear raw offset value.
 */
#define OFF_Gear_actual_gear                        0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_reserv_Fahrstufe Signal GE_reserv_Fahrstufe of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_reserv_Fahrstufe configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_reserv_Fahrstufe and \ref GET_Gear_GE_reserv_Fahrstufe instead.
 */
#define SIG_Gear_GE_reserv_Fahrstufe                0, 0, 46, 1

/**
 * Signal GE_reserv_Fahrstufe setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_reserv_Fahrstufe or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_reserv_Fahrstufe              0, 0, 46, 1, 0

/**
 * Get signal GE_reserv_Fahrstufe from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_reserv_Fahrstufe(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 6) & 0x01) << 0) \
)

/**
 * Set signal GE_reserv_Fahrstufe in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_reserv_Fahrstufe(buf, val) { \
	buf[5] &= ~(0x01 << 6); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal GE_reserv_Fahrstufe in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_reserv_Fahrstufe(buf) \
	SET_Gear_GE_reserv_Fahrstufe(buf, 0)

/**
 * Signal GE_reserv_Fahrstufe value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_reserv_Fahrstufe(x, fmt) \
	((x) * fmt)

/**
 * Signal GE_reserv_Fahrstufe raw initial value.
 */
#define START_Gear_GE_reserv_Fahrstufe              0

/**
 * Signal GE_reserv_Fahrstufe raw minimum value.
 */
#define MIN_Gear_GE_reserv_Fahrstufe                0

/**
 * Signal GE_reserv_Fahrstufe raw maximum value.
 */
#define MAX_Gear_GE_reserv_Fahrstufe                1

/**
 * Signal GE_reserv_Fahrstufe raw offset value.
 */
#define OFF_Gear_GE_reserv_Fahrstufe                0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_Schaltablauf Signal GE_Schaltablauf of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_Schaltablauf configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_Schaltablauf and \ref GET_Gear_GE_Schaltablauf instead.
 */
#define SIG_Gear_GE_Schaltablauf                    0, 0, 47, 2

/**
 * Signal GE_Schaltablauf setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_Schaltablauf or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_Schaltablauf                  0, 0, 47, 2, 0

/**
 * Get signal GE_Schaltablauf from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_Schaltablauf(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0x01) << 1) \
)

/**
 * Set signal GE_Schaltablauf in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_Schaltablauf(buf, val) { \
	buf[5] &= ~(0x01 << 7); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= (((uint8_t)(val) >> 1) & 0x01) << 0; \
}

/**
 * Set signal GE_Schaltablauf in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_Schaltablauf(buf) \
	SET_Gear_GE_Schaltablauf(buf, 0)

/**
 * Signal GE_Schaltablauf value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_Schaltablauf(x, fmt) \
	((x) * fmt)

/**
 * Signal GE_Schaltablauf raw initial value.
 */
#define START_Gear_GE_Schaltablauf                  0

/**
 * Signal GE_Schaltablauf raw minimum value.
 */
#define MIN_Gear_GE_Schaltablauf                    0

/**
 * Signal GE_Schaltablauf raw maximum value.
 */
#define MAX_Gear_GE_Schaltablauf                    3

/**
 * Signal GE_Schaltablauf raw offset value.
 */
#define OFF_Gear_GE_Schaltablauf                    0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_Uefkt_unplausibel Signal GE_Uefkt_unplausibel of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_Uefkt_unplausibel configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_Uefkt_unplausibel and \ref GET_Gear_GE_Uefkt_unplausibel instead.
 */
#define SIG_Gear_GE_Uefkt_unplausibel               0, 0, 49, 1

/**
 * Signal GE_Uefkt_unplausibel setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_Uefkt_unplausibel or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_Uefkt_unplausibel             0, 0, 49, 1, 0

/**
 * Get signal GE_Uefkt_unplausibel from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_Uefkt_unplausibel(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x01) << 0) \
)

/**
 * Set signal GE_Uefkt_unplausibel in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_Uefkt_unplausibel(buf, val) { \
	buf[6] &= ~(0x01 << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 1; \
}

/**
 * Set signal GE_Uefkt_unplausibel in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_Uefkt_unplausibel(buf) \
	SET_Gear_GE_Uefkt_unplausibel(buf, 0)

/**
 * Signal GE_Uefkt_unplausibel value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_Uefkt_unplausibel(x, fmt) \
	((x) * fmt)

/**
 * Signal GE_Uefkt_unplausibel raw initial value.
 */
#define START_Gear_GE_Uefkt_unplausibel             0

/**
 * Signal GE_Uefkt_unplausibel raw minimum value.
 */
#define MIN_Gear_GE_Uefkt_unplausibel               0

/**
 * Signal GE_Uefkt_unplausibel raw maximum value.
 */
#define MAX_Gear_GE_Uefkt_unplausibel               1

/**
 * Signal GE_Uefkt_unplausibel raw offset value.
 */
#define OFF_Gear_GE_Uefkt_unplausibel               0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_MMom_Status_02 Signal GE_MMom_Status_02 of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_MMom_Status_02 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_MMom_Status_02 and \ref GET_Gear_GE_MMom_Status_02 instead.
 */
#define SIG_Gear_GE_MMom_Status_02                  0, 0, 50, 3

/**
 * Signal GE_MMom_Status_02 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_MMom_Status_02 or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_MMom_Status_02                0, 0, 50, 3, 0

/**
 * Get signal GE_MMom_Status_02 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_MMom_Status_02(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 2) & 0x07) << 0) \
)

/**
 * Set signal GE_MMom_Status_02 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_MMom_Status_02(buf, val) { \
	buf[6] &= ~(0x07 << 2); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal GE_MMom_Status_02 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_MMom_Status_02(buf) \
	SET_Gear_GE_MMom_Status_02(buf, 0)

/**
 * Signal GE_MMom_Status_02 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_MMom_Status_02(x, fmt) \
	((x) * fmt)

/**
 * Signal GE_MMom_Status_02 raw initial value.
 */
#define START_Gear_GE_MMom_Status_02                0

/**
 * Signal GE_MMom_Status_02 raw minimum value.
 */
#define MIN_Gear_GE_MMom_Status_02                  0

/**
 * Signal GE_MMom_Status_02 raw maximum value.
 */
#define MAX_Gear_GE_MMom_Status_02                  7

/**
 * Signal GE_MMom_Status_02 raw offset value.
 */
#define OFF_Gear_GE_MMom_Status_02                  0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_Status_Kraftschluss Signal GE_Status_Kraftschluss of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_Status_Kraftschluss configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_Status_Kraftschluss and \ref GET_Gear_GE_Status_Kraftschluss instead.
 */
#define SIG_Gear_GE_Status_Kraftschluss             0, 0, 53, 3

/**
 * Signal GE_Status_Kraftschluss setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_Status_Kraftschluss or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_Status_Kraftschluss           0, 0, 53, 3, 0

/**
 * Get signal GE_Status_Kraftschluss from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_Status_Kraftschluss(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal GE_Status_Kraftschluss in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_Status_Kraftschluss(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal GE_Status_Kraftschluss in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_Status_Kraftschluss(buf) \
	SET_Gear_GE_Status_Kraftschluss(buf, 0)

/**
 * Signal GE_Status_Kraftschluss value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_Status_Kraftschluss(x, fmt) \
	((x) * fmt)

/**
 * Signal GE_Status_Kraftschluss raw initial value.
 */
#define START_Gear_GE_Status_Kraftschluss           0

/**
 * Signal GE_Status_Kraftschluss raw minimum value.
 */
#define MIN_Gear_GE_Status_Kraftschluss             0

/**
 * Signal GE_Status_Kraftschluss raw maximum value.
 */
#define MAX_Gear_GE_Status_Kraftschluss             7

/**
 * Signal GE_Status_Kraftschluss raw offset value.
 */
#define OFF_Gear_GE_Status_Kraftschluss             0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_MMom_Status Signal GE_MMom_Status of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_MMom_Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_MMom_Status and \ref GET_Gear_GE_MMom_Status instead.
 */
#define SIG_Gear_GE_MMom_Status                     0, 0, 56, 2

/**
 * Signal GE_MMom_Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_MMom_Status or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_MMom_Status                   0, 0, 56, 2, 0

/**
 * Get signal GE_MMom_Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_MMom_Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 0) \
)

/**
 * Set signal GE_MMom_Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_MMom_Status(buf, val) { \
	buf[7] &= ~(0x03 << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal GE_MMom_Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_MMom_Status(buf) \
	SET_Gear_GE_MMom_Status(buf, 0)

/**
 * Signal GE_MMom_Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_MMom_Status(x, fmt) \
	((x) * fmt)

/**
 * Signal GE_MMom_Status raw initial value.
 */
#define START_Gear_GE_MMom_Status                   0

/**
 * Signal GE_MMom_Status raw minimum value.
 */
#define MIN_Gear_GE_MMom_Status                     0

/**
 * Signal GE_MMom_Status raw maximum value.
 */
#define MAX_Gear_GE_MMom_Status                     3

/**
 * Signal GE_MMom_Status raw offset value.
 */
#define OFF_Gear_GE_MMom_Status                     0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_Freig_MMom_Vorhalt Signal GE_Freig_MMom_Vorhalt of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_Freig_MMom_Vorhalt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_Freig_MMom_Vorhalt and \ref GET_Gear_GE_Freig_MMom_Vorhalt instead.
 */
#define SIG_Gear_GE_Freig_MMom_Vorhalt              0, 0, 58, 1

/**
 * Signal GE_Freig_MMom_Vorhalt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_Freig_MMom_Vorhalt or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_Freig_MMom_Vorhalt            0, 0, 58, 1, 0

/**
 * Get signal GE_Freig_MMom_Vorhalt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_Freig_MMom_Vorhalt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x01) << 0) \
)

/**
 * Set signal GE_Freig_MMom_Vorhalt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_Freig_MMom_Vorhalt(buf, val) { \
	buf[7] &= ~(0x01 << 2); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal GE_Freig_MMom_Vorhalt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_Freig_MMom_Vorhalt(buf) \
	SET_Gear_GE_Freig_MMom_Vorhalt(buf, 0)

/**
 * Signal GE_Freig_MMom_Vorhalt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_Freig_MMom_Vorhalt(x, fmt) \
	((x) * fmt)

/**
 * Signal GE_Freig_MMom_Vorhalt raw initial value.
 */
#define START_Gear_GE_Freig_MMom_Vorhalt            0

/**
 * Signal GE_Freig_MMom_Vorhalt raw minimum value.
 */
#define MIN_Gear_GE_Freig_MMom_Vorhalt              0

/**
 * Signal GE_Freig_MMom_Vorhalt raw maximum value.
 */
#define MAX_Gear_GE_Freig_MMom_Vorhalt              1

/**
 * Signal GE_Freig_MMom_Vorhalt raw offset value.
 */
#define OFF_Gear_GE_Freig_MMom_Vorhalt              0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_Verbot_Ausblendung Signal GE_Verbot_Ausblendung of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_Verbot_Ausblendung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_Verbot_Ausblendung and \ref GET_Gear_GE_Verbot_Ausblendung instead.
 */
#define SIG_Gear_GE_Verbot_Ausblendung              0, 0, 59, 1

/**
 * Signal GE_Verbot_Ausblendung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_Verbot_Ausblendung or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_Verbot_Ausblendung            0, 0, 59, 1, 0

/**
 * Get signal GE_Verbot_Ausblendung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_Verbot_Ausblendung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x01) << 0) \
)

/**
 * Set signal GE_Verbot_Ausblendung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_Verbot_Ausblendung(buf, val) { \
	buf[7] &= ~(0x01 << 3); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal GE_Verbot_Ausblendung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_Verbot_Ausblendung(buf) \
	SET_Gear_GE_Verbot_Ausblendung(buf, 0)

/**
 * Signal GE_Verbot_Ausblendung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_Verbot_Ausblendung(x, fmt) \
	((x) * fmt)

/**
 * Signal GE_Verbot_Ausblendung raw initial value.
 */
#define START_Gear_GE_Verbot_Ausblendung            0

/**
 * Signal GE_Verbot_Ausblendung raw minimum value.
 */
#define MIN_Gear_GE_Verbot_Ausblendung              0

/**
 * Signal GE_Verbot_Ausblendung raw maximum value.
 */
#define MAX_Gear_GE_Verbot_Ausblendung              1

/**
 * Signal GE_Verbot_Ausblendung raw offset value.
 */
#define OFF_Gear_GE_Verbot_Ausblendung              0

/**
 * @}
 */

/**
 * @defgroup SIG_Gear_GE_Zielgang Signal GE_Zielgang of Message Gear (0xad)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Gear
 * @{
 */

/**
 * Signal GE_Zielgang configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Gear_GE_Zielgang and \ref GET_Gear_GE_Zielgang instead.
 */
#define SIG_Gear_GE_Zielgang                        0, 0, 60, 4

/**
 * Signal GE_Zielgang setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Gear_GE_Zielgang or \ref INIT_Gear instead.
 */
#define SETUP_Gear_GE_Zielgang                      0, 0, 60, 4, 0

/**
 * Get signal GE_Zielgang from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Gear_GE_Zielgang(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal GE_Zielgang in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Gear_GE_Zielgang(buf, val) { \
	buf[7] &= ~(0x0f << 4); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal GE_Zielgang in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Gear_GE_Zielgang(buf) \
	SET_Gear_GE_Zielgang(buf, 0)

/**
 * Signal GE_Zielgang value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Gear_GE_Zielgang(x, fmt) \
	((x) * fmt)

/**
 * Signal GE_Zielgang raw initial value.
 */
#define START_Gear_GE_Zielgang                      0

/**
 * Signal GE_Zielgang raw minimum value.
 */
#define MIN_Gear_GE_Zielgang                        0

/**
 * Signal GE_Zielgang raw maximum value.
 */
#define MAX_Gear_GE_Zielgang                        15

/**
 * Signal GE_Zielgang raw offset value.
 */
#define OFF_Gear_GE_Zielgang                        0

/**
 * @}
 */

/**
 * @defgroup SIG_Steering_LWI_01_CRC Signal LWI_01_CRC of Message Steering (0x86)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Steering
 * @{
 */

/**
 * Signal LWI_01_CRC configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Steering_LWI_01_CRC and \ref GET_Steering_LWI_01_CRC instead.
 */
#define SIG_Steering_LWI_01_CRC                     0, 0, 0, 8

/**
 * Signal LWI_01_CRC setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Steering_LWI_01_CRC or \ref INIT_Steering instead.
 */
#define SETUP_Steering_LWI_01_CRC                   0, 0, 0, 8, 0

/**
 * Get signal LWI_01_CRC from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Steering_LWI_01_CRC(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal LWI_01_CRC in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Steering_LWI_01_CRC(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal LWI_01_CRC in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Steering_LWI_01_CRC(buf) \
	SET_Steering_LWI_01_CRC(buf, 0)

/**
 * Signal LWI_01_CRC value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Steering_LWI_01_CRC(x, fmt) \
	((x) * fmt)

/**
 * Signal LWI_01_CRC raw initial value.
 */
#define START_Steering_LWI_01_CRC                   0

/**
 * Signal LWI_01_CRC raw minimum value.
 */
#define MIN_Steering_LWI_01_CRC                     0

/**
 * Signal LWI_01_CRC raw maximum value.
 */
#define MAX_Steering_LWI_01_CRC                     255

/**
 * Signal LWI_01_CRC raw offset value.
 */
#define OFF_Steering_LWI_01_CRC                     0

/**
 * @}
 */

/**
 * @defgroup SIG_Steering_LWI_01_BZ Signal LWI_01_BZ of Message Steering (0x86)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Steering
 * @{
 */

/**
 * Signal LWI_01_BZ configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Steering_LWI_01_BZ and \ref GET_Steering_LWI_01_BZ instead.
 */
#define SIG_Steering_LWI_01_BZ                      0, 0, 8, 4

/**
 * Signal LWI_01_BZ setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Steering_LWI_01_BZ or \ref INIT_Steering instead.
 */
#define SETUP_Steering_LWI_01_BZ                    0, 0, 8, 4, 0

/**
 * Get signal LWI_01_BZ from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Steering_LWI_01_BZ(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal LWI_01_BZ in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Steering_LWI_01_BZ(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal LWI_01_BZ in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Steering_LWI_01_BZ(buf) \
	SET_Steering_LWI_01_BZ(buf, 0)

/**
 * Signal LWI_01_BZ value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Steering_LWI_01_BZ(x, fmt) \
	((x) * fmt)

/**
 * Signal LWI_01_BZ raw initial value.
 */
#define START_Steering_LWI_01_BZ                    0

/**
 * Signal LWI_01_BZ raw minimum value.
 */
#define MIN_Steering_LWI_01_BZ                      0

/**
 * Signal LWI_01_BZ raw maximum value.
 */
#define MAX_Steering_LWI_01_BZ                      15

/**
 * Signal LWI_01_BZ raw offset value.
 */
#define OFF_Steering_LWI_01_BZ                      0

/**
 * @}
 */

/**
 * @defgroup SIG_Steering_LWI_Sensorstatus Signal LWI_Sensorstatus of Message Steering (0x86)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Steering
 * @{
 */

/**
 * Signal LWI_Sensorstatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Steering_LWI_Sensorstatus and \ref GET_Steering_LWI_Sensorstatus instead.
 */
#define SIG_Steering_LWI_Sensorstatus               0, 0, 12, 1

/**
 * Signal LWI_Sensorstatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Steering_LWI_Sensorstatus or \ref INIT_Steering instead.
 */
#define SETUP_Steering_LWI_Sensorstatus             0, 0, 12, 1, 0

/**
 * Get signal LWI_Sensorstatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Steering_LWI_Sensorstatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x01) << 0) \
)

/**
 * Set signal LWI_Sensorstatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Steering_LWI_Sensorstatus(buf, val) { \
	buf[1] &= ~(0x01 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal LWI_Sensorstatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Steering_LWI_Sensorstatus(buf) \
	SET_Steering_LWI_Sensorstatus(buf, 0)

/**
 * Signal LWI_Sensorstatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Steering_LWI_Sensorstatus(x, fmt) \
	((x) * fmt)

/**
 * Signal LWI_Sensorstatus raw initial value.
 */
#define START_Steering_LWI_Sensorstatus             0

/**
 * Signal LWI_Sensorstatus raw minimum value.
 */
#define MIN_Steering_LWI_Sensorstatus               0

/**
 * Signal LWI_Sensorstatus raw maximum value.
 */
#define MAX_Steering_LWI_Sensorstatus               1

/**
 * Signal LWI_Sensorstatus raw offset value.
 */
#define OFF_Steering_LWI_Sensorstatus               0

/**
 * @}
 */

/**
 * @defgroup SIG_Steering_LWI_QBit_Sub_Daten Signal LWI_QBit_Sub_Daten of Message Steering (0x86)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Steering
 * @{
 */

/**
 * Signal LWI_QBit_Sub_Daten configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Steering_LWI_QBit_Sub_Daten and \ref GET_Steering_LWI_QBit_Sub_Daten instead.
 */
#define SIG_Steering_LWI_QBit_Sub_Daten             0, 0, 13, 1

/**
 * Signal LWI_QBit_Sub_Daten setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Steering_LWI_QBit_Sub_Daten or \ref INIT_Steering instead.
 */
#define SETUP_Steering_LWI_QBit_Sub_Daten           0, 0, 13, 1, 0

/**
 * Get signal LWI_QBit_Sub_Daten from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Steering_LWI_QBit_Sub_Daten(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 5) & 0x01) << 0) \
)

/**
 * Set signal LWI_QBit_Sub_Daten in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Steering_LWI_QBit_Sub_Daten(buf, val) { \
	buf[1] &= ~(0x01 << 5); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal LWI_QBit_Sub_Daten in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Steering_LWI_QBit_Sub_Daten(buf) \
	SET_Steering_LWI_QBit_Sub_Daten(buf, 0)

/**
 * Signal LWI_QBit_Sub_Daten value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Steering_LWI_QBit_Sub_Daten(x, fmt) \
	((x) * fmt)

/**
 * Signal LWI_QBit_Sub_Daten raw initial value.
 */
#define START_Steering_LWI_QBit_Sub_Daten           0

/**
 * Signal LWI_QBit_Sub_Daten raw minimum value.
 */
#define MIN_Steering_LWI_QBit_Sub_Daten             0

/**
 * Signal LWI_QBit_Sub_Daten raw maximum value.
 */
#define MAX_Steering_LWI_QBit_Sub_Daten             1

/**
 * Signal LWI_QBit_Sub_Daten raw offset value.
 */
#define OFF_Steering_LWI_QBit_Sub_Daten             0

/**
 * @}
 */

/**
 * @defgroup SIG_Steering_LWI_QBit_Lenkradwinkel Signal LWI_QBit_Lenkradwinkel of Message Steering (0x86)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Steering
 * @{
 */

/**
 * Signal LWI_QBit_Lenkradwinkel configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Steering_LWI_QBit_Lenkradwinkel and \ref GET_Steering_LWI_QBit_Lenkradwinkel instead.
 */
#define SIG_Steering_LWI_QBit_Lenkradwinkel         0, 0, 15, 1

/**
 * Signal LWI_QBit_Lenkradwinkel setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Steering_LWI_QBit_Lenkradwinkel or \ref INIT_Steering instead.
 */
#define SETUP_Steering_LWI_QBit_Lenkradwinkel       0, 0, 15, 1, 0

/**
 * Get signal LWI_QBit_Lenkradwinkel from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Steering_LWI_QBit_Lenkradwinkel(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
)

/**
 * Set signal LWI_QBit_Lenkradwinkel in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Steering_LWI_QBit_Lenkradwinkel(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal LWI_QBit_Lenkradwinkel in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Steering_LWI_QBit_Lenkradwinkel(buf) \
	SET_Steering_LWI_QBit_Lenkradwinkel(buf, 0)

/**
 * Signal LWI_QBit_Lenkradwinkel value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Steering_LWI_QBit_Lenkradwinkel(x, fmt) \
	((x) * fmt)

/**
 * Signal LWI_QBit_Lenkradwinkel raw initial value.
 */
#define START_Steering_LWI_QBit_Lenkradwinkel       0

/**
 * Signal LWI_QBit_Lenkradwinkel raw minimum value.
 */
#define MIN_Steering_LWI_QBit_Lenkradwinkel         0

/**
 * Signal LWI_QBit_Lenkradwinkel raw maximum value.
 */
#define MAX_Steering_LWI_QBit_Lenkradwinkel         1

/**
 * Signal LWI_QBit_Lenkradwinkel raw offset value.
 */
#define OFF_Steering_LWI_QBit_Lenkradwinkel         0

/**
 * @}
 */

/**
 * @defgroup SIG_Steering_steering_angle Signal steering_angle of Message Steering (0x86)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Steering
 * @{
 */

/**
 * Signal steering_angle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Steering_steering_angle and \ref GET_Steering_steering_angle instead.
 */
#define SIG_Steering_steering_angle                 0, 0, 16, 13

/**
 * Signal steering_angle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Steering_steering_angle or \ref INIT_Steering instead.
 */
#define SETUP_Steering_steering_angle               0, 0, 16, 13, 0

/**
 * Get signal steering_angle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Steering_steering_angle(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x1f) << 8) \
)

/**
 * Set signal steering_angle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Steering_steering_angle(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[3] &= ~(0x1f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0; \
}

/**
 * Set signal steering_angle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Steering_steering_angle(buf) \
	SET_Steering_steering_angle(buf, 0)

/**
 * Signal steering_angle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Steering_steering_angle(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal steering_angle raw initial value.
 */
#define START_Steering_steering_angle               0

/**
 * Signal steering_angle raw minimum value.
 */
#define MIN_Steering_steering_angle                 0

/**
 * Signal steering_angle raw maximum value.
 */
#define MAX_Steering_steering_angle                 8000

/**
 * Signal steering_angle raw offset value.
 */
#define OFF_Steering_steering_angle                 0

/**
 * @}
 */

/**
 * @defgroup SIG_Steering_steering_angle_direction Signal steering_angle_direction of Message Steering (0x86)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Steering
 * @{
 */

/**
 * Signal steering_angle_direction configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Steering_steering_angle_direction and \ref GET_Steering_steering_angle_direction instead.
 */
#define SIG_Steering_steering_angle_direction        0, 0, 29, 1

/**
 * Signal steering_angle_direction setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Steering_steering_angle_direction or \ref INIT_Steering instead.
 */
#define SETUP_Steering_steering_angle_direction      0, 0, 29, 1, 0

/**
 * Get signal steering_angle_direction from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Steering_steering_angle_direction(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 5) & 0x01) << 0) \
)

/**
 * Set signal steering_angle_direction in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Steering_steering_angle_direction(buf, val) { \
	buf[3] &= ~(0x01 << 5); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal steering_angle_direction in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Steering_steering_angle_direction(buf) \
	SET_Steering_steering_angle_direction(buf, 0)

/**
 * Signal steering_angle_direction value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Steering_steering_angle_direction(x, fmt) \
	((x) * fmt)

/**
 * Signal steering_angle_direction raw initial value.
 */
#define START_Steering_steering_angle_direction      0

/**
 * Signal steering_angle_direction raw minimum value.
 */
#define MIN_Steering_steering_angle_direction        0

/**
 * Signal steering_angle_direction raw maximum value.
 */
#define MAX_Steering_steering_angle_direction        1

/**
 * Signal steering_angle_direction raw offset value.
 */
#define OFF_Steering_steering_angle_direction        0

/**
 * @}
 */

/**
 * @defgroup SIG_Steering_steering_velocity_direction Signal steering_velocity_direction of Message Steering (0x86)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Steering
 * @{
 */

/**
 * Signal steering_velocity_direction configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Steering_steering_velocity_direction and \ref GET_Steering_steering_velocity_direction instead.
 */
#define SIG_Steering_steering_velocity_direction        0, 0, 30, 1

/**
 * Signal steering_velocity_direction setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Steering_steering_velocity_direction or \ref INIT_Steering instead.
 */
#define SETUP_Steering_steering_velocity_direction      0, 0, 30, 1, 0

/**
 * Get signal steering_velocity_direction from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Steering_steering_velocity_direction(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x01) << 0) \
)

/**
 * Set signal steering_velocity_direction in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Steering_steering_velocity_direction(buf, val) { \
	buf[3] &= ~(0x01 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal steering_velocity_direction in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Steering_steering_velocity_direction(buf) \
	SET_Steering_steering_velocity_direction(buf, 0)

/**
 * Signal steering_velocity_direction value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Steering_steering_velocity_direction(x, fmt) \
	((x) * fmt)

/**
 * Signal steering_velocity_direction raw initial value.
 */
#define START_Steering_steering_velocity_direction      0

/**
 * Signal steering_velocity_direction raw minimum value.
 */
#define MIN_Steering_steering_velocity_direction        0

/**
 * Signal steering_velocity_direction raw maximum value.
 */
#define MAX_Steering_steering_velocity_direction        1

/**
 * Signal steering_velocity_direction raw offset value.
 */
#define OFF_Steering_steering_velocity_direction        0

/**
 * @}
 */

/**
 * @defgroup SIG_Steering_steering_velocity Signal steering_velocity of Message Steering (0x86)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Steering
 * @{
 */

/**
 * Signal steering_velocity configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Steering_steering_velocity and \ref GET_Steering_steering_velocity instead.
 */
#define SIG_Steering_steering_velocity              0, 0, 31, 9

/**
 * Signal steering_velocity setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Steering_steering_velocity or \ref INIT_Steering instead.
 */
#define SETUP_Steering_steering_velocity            0, 0, 31, 9, 0

/**
 * Get signal steering_velocity from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Steering_steering_velocity(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 1) \
)

/**
 * Set signal steering_velocity in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Steering_steering_velocity(buf, val) { \
	buf[3] &= ~(0x01 << 7); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
}

/**
 * Set signal steering_velocity in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Steering_steering_velocity(buf) \
	SET_Steering_steering_velocity(buf, 0)

/**
 * Signal steering_velocity value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Steering_steering_velocity(x, fmt) \
	((x) * fmt * 5)

/**
 * Signal steering_velocity raw initial value.
 */
#define START_Steering_steering_velocity            0

/**
 * Signal steering_velocity raw minimum value.
 */
#define MIN_Steering_steering_velocity              0

/**
 * Signal steering_velocity raw maximum value.
 */
#define MAX_Steering_steering_velocity              500

/**
 * Signal steering_velocity raw offset value.
 */
#define OFF_Steering_steering_velocity              0

/**
 * @}
 */

/**
 * @defgroup SIG_Steering_LWI_Sub_Daten Signal LWI_Sub_Daten of Message Steering (0x86)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Steering
 * @{
 */

/**
 * Signal LWI_Sub_Daten configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Steering_LWI_Sub_Daten and \ref GET_Steering_LWI_Sub_Daten instead.
 */
#define SIG_Steering_LWI_Sub_Daten                  0, 0, 40, 16

/**
 * Signal LWI_Sub_Daten setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Steering_LWI_Sub_Daten or \ref INIT_Steering instead.
 */
#define SETUP_Steering_LWI_Sub_Daten                0, 0, 40, 16, 0

/**
 * Get signal LWI_Sub_Daten from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Steering_LWI_Sub_Daten(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
)

/**
 * Set signal LWI_Sub_Daten in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Steering_LWI_Sub_Daten(buf, val) { \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal LWI_Sub_Daten in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Steering_LWI_Sub_Daten(buf) \
	SET_Steering_LWI_Sub_Daten(buf, 0)

/**
 * Signal LWI_Sub_Daten value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Steering_LWI_Sub_Daten(x, fmt) \
	((x) * fmt)

/**
 * Signal LWI_Sub_Daten raw initial value.
 */
#define START_Steering_LWI_Sub_Daten                0

/**
 * Signal LWI_Sub_Daten raw minimum value.
 */
#define MIN_Steering_LWI_Sub_Daten                  0

/**
 * Signal LWI_Sub_Daten raw maximum value.
 */
#define MAX_Steering_LWI_Sub_Daten                  65535

/**
 * Signal LWI_Sub_Daten raw offset value.
 */
#define OFF_Steering_LWI_Sub_Daten                  0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Status_rl_wheel_speed Signal rl_wheel_speed of Message WheelSpeed_Status (0xb2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Status
 * @{
 */

/**
 * Signal rl_wheel_speed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Status_rl_wheel_speed and \ref GET_WheelSpeed_Status_rl_wheel_speed instead.
 */
#define SIG_WheelSpeed_Status_rl_wheel_speed        0, 0, 0, 16

/**
 * Signal rl_wheel_speed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Status_rl_wheel_speed or \ref INIT_WheelSpeed_Status instead.
 */
#define SETUP_WheelSpeed_Status_rl_wheel_speed      0, 0, 0, 16, 0

/**
 * Get signal rl_wheel_speed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Status_rl_wheel_speed(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) \
)

/**
 * Set signal rl_wheel_speed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Status_rl_wheel_speed(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal rl_wheel_speed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Status_rl_wheel_speed(buf) \
	SET_WheelSpeed_Status_rl_wheel_speed(buf, 0)

/**
 * Signal rl_wheel_speed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Status_rl_wheel_speed(x, fmt) \
	((x) * fmt * 3 / 400)

/**
 * Signal rl_wheel_speed raw initial value.
 */
#define START_WheelSpeed_Status_rl_wheel_speed      0

/**
 * Signal rl_wheel_speed raw minimum value.
 */
#define MIN_WheelSpeed_Status_rl_wheel_speed        0

/**
 * Signal rl_wheel_speed raw maximum value.
 */
#define MAX_WheelSpeed_Status_rl_wheel_speed        65532

/**
 * Signal rl_wheel_speed raw offset value.
 */
#define OFF_WheelSpeed_Status_rl_wheel_speed        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Status_rr_wheel_speed Signal rr_wheel_speed of Message WheelSpeed_Status (0xb2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Status
 * @{
 */

/**
 * Signal rr_wheel_speed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Status_rr_wheel_speed and \ref GET_WheelSpeed_Status_rr_wheel_speed instead.
 */
#define SIG_WheelSpeed_Status_rr_wheel_speed        0, 0, 16, 16

/**
 * Signal rr_wheel_speed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Status_rr_wheel_speed or \ref INIT_WheelSpeed_Status instead.
 */
#define SETUP_WheelSpeed_Status_rr_wheel_speed      0, 0, 16, 16, 0

/**
 * Get signal rr_wheel_speed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Status_rr_wheel_speed(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8) \
)

/**
 * Set signal rr_wheel_speed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Status_rr_wheel_speed(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal rr_wheel_speed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Status_rr_wheel_speed(buf) \
	SET_WheelSpeed_Status_rr_wheel_speed(buf, 0)

/**
 * Signal rr_wheel_speed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Status_rr_wheel_speed(x, fmt) \
	((x) * fmt * 3 / 400)

/**
 * Signal rr_wheel_speed raw initial value.
 */
#define START_WheelSpeed_Status_rr_wheel_speed      0

/**
 * Signal rr_wheel_speed raw minimum value.
 */
#define MIN_WheelSpeed_Status_rr_wheel_speed        0

/**
 * Signal rr_wheel_speed raw maximum value.
 */
#define MAX_WheelSpeed_Status_rr_wheel_speed        65532

/**
 * Signal rr_wheel_speed raw offset value.
 */
#define OFF_WheelSpeed_Status_rr_wheel_speed        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Status_fl_wheel_speed Signal fl_wheel_speed of Message WheelSpeed_Status (0xb2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Status
 * @{
 */

/**
 * Signal fl_wheel_speed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Status_fl_wheel_speed and \ref GET_WheelSpeed_Status_fl_wheel_speed instead.
 */
#define SIG_WheelSpeed_Status_fl_wheel_speed        0, 0, 32, 16

/**
 * Signal fl_wheel_speed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Status_fl_wheel_speed or \ref INIT_WheelSpeed_Status instead.
 */
#define SETUP_WheelSpeed_Status_fl_wheel_speed      0, 0, 32, 16, 0

/**
 * Get signal fl_wheel_speed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Status_fl_wheel_speed(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 8) \
)

/**
 * Set signal fl_wheel_speed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Status_fl_wheel_speed(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal fl_wheel_speed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Status_fl_wheel_speed(buf) \
	SET_WheelSpeed_Status_fl_wheel_speed(buf, 0)

/**
 * Signal fl_wheel_speed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Status_fl_wheel_speed(x, fmt) \
	((x) * fmt * 3 / 400)

/**
 * Signal fl_wheel_speed raw initial value.
 */
#define START_WheelSpeed_Status_fl_wheel_speed      0

/**
 * Signal fl_wheel_speed raw minimum value.
 */
#define MIN_WheelSpeed_Status_fl_wheel_speed        0

/**
 * Signal fl_wheel_speed raw maximum value.
 */
#define MAX_WheelSpeed_Status_fl_wheel_speed        65532

/**
 * Signal fl_wheel_speed raw offset value.
 */
#define OFF_WheelSpeed_Status_fl_wheel_speed        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Status_fr_wheel_speed Signal fr_wheel_speed of Message WheelSpeed_Status (0xb2)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Status
 * @{
 */

/**
 * Signal fr_wheel_speed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Status_fr_wheel_speed and \ref GET_WheelSpeed_Status_fr_wheel_speed instead.
 */
#define SIG_WheelSpeed_Status_fr_wheel_speed        0, 0, 48, 16

/**
 * Signal fr_wheel_speed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Status_fr_wheel_speed or \ref INIT_WheelSpeed_Status instead.
 */
#define SETUP_WheelSpeed_Status_fr_wheel_speed      0, 0, 48, 16, 0

/**
 * Get signal fr_wheel_speed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Status_fr_wheel_speed(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 8) \
)

/**
 * Set signal fr_wheel_speed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Status_fr_wheel_speed(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal fr_wheel_speed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Status_fr_wheel_speed(buf) \
	SET_WheelSpeed_Status_fr_wheel_speed(buf, 0)

/**
 * Signal fr_wheel_speed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Status_fr_wheel_speed(x, fmt) \
	((x) * fmt * 3 / 400)

/**
 * Signal fr_wheel_speed raw initial value.
 */
#define START_WheelSpeed_Status_fr_wheel_speed      0

/**
 * Signal fr_wheel_speed raw minimum value.
 */
#define MIN_WheelSpeed_Status_fr_wheel_speed        0

/**
 * Signal fr_wheel_speed raw maximum value.
 */
#define MAX_WheelSpeed_Status_fr_wheel_speed        65532

/**
 * Signal fr_wheel_speed raw offset value.
 */
#define OFF_WheelSpeed_Status_fr_wheel_speed        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_ESP_10_CRC Signal ESP_10_CRC of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal ESP_10_CRC configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_ESP_10_CRC and \ref GET_WheelSpeed_Edge_ESP_10_CRC instead.
 */
#define SIG_WheelSpeed_Edge_ESP_10_CRC              0, 0, 0, 8

/**
 * Signal ESP_10_CRC setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_ESP_10_CRC or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_ESP_10_CRC            0, 0, 0, 8, 0

/**
 * Get signal ESP_10_CRC from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_ESP_10_CRC(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_10_CRC in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_ESP_10_CRC(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_10_CRC in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_ESP_10_CRC(buf) \
	SET_WheelSpeed_Edge_ESP_10_CRC(buf, 0)

/**
 * Signal ESP_10_CRC value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_ESP_10_CRC(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_10_CRC raw initial value.
 */
#define START_WheelSpeed_Edge_ESP_10_CRC            0

/**
 * Signal ESP_10_CRC raw minimum value.
 */
#define MIN_WheelSpeed_Edge_ESP_10_CRC              0

/**
 * Signal ESP_10_CRC raw maximum value.
 */
#define MAX_WheelSpeed_Edge_ESP_10_CRC              255

/**
 * Signal ESP_10_CRC raw offset value.
 */
#define OFF_WheelSpeed_Edge_ESP_10_CRC              0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_ESP_10_BZ Signal ESP_10_BZ of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal ESP_10_BZ configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_ESP_10_BZ and \ref GET_WheelSpeed_Edge_ESP_10_BZ instead.
 */
#define SIG_WheelSpeed_Edge_ESP_10_BZ               0, 0, 8, 4

/**
 * Signal ESP_10_BZ setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_ESP_10_BZ or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_ESP_10_BZ             0, 0, 8, 4, 0

/**
 * Get signal ESP_10_BZ from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_ESP_10_BZ(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal ESP_10_BZ in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_ESP_10_BZ(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal ESP_10_BZ in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_ESP_10_BZ(buf) \
	SET_WheelSpeed_Edge_ESP_10_BZ(buf, 0)

/**
 * Signal ESP_10_BZ value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_ESP_10_BZ(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_10_BZ raw initial value.
 */
#define START_WheelSpeed_Edge_ESP_10_BZ             0

/**
 * Signal ESP_10_BZ raw minimum value.
 */
#define MIN_WheelSpeed_Edge_ESP_10_BZ               0

/**
 * Signal ESP_10_BZ raw maximum value.
 */
#define MAX_WheelSpeed_Edge_ESP_10_BZ               15

/**
 * Signal ESP_10_BZ raw offset value.
 */
#define OFF_WheelSpeed_Edge_ESP_10_BZ               0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL Signal ESP_QBit_Wegimpuls_VL of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal ESP_QBit_Wegimpuls_VL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL and \ref GET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL instead.
 */
#define SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL        0, 0, 12, 1

/**
 * Signal ESP_QBit_Wegimpuls_VL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL      0, 0, 12, 1, 0

/**
 * Get signal ESP_QBit_Wegimpuls_VL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x01) << 0) \
)

/**
 * Set signal ESP_QBit_Wegimpuls_VL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL(buf, val) { \
	buf[1] &= ~(0x01 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal ESP_QBit_Wegimpuls_VL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL(buf) \
	SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL(buf, 0)

/**
 * Signal ESP_QBit_Wegimpuls_VL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_QBit_Wegimpuls_VL raw initial value.
 */
#define START_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL      0

/**
 * Signal ESP_QBit_Wegimpuls_VL raw minimum value.
 */
#define MIN_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL        0

/**
 * Signal ESP_QBit_Wegimpuls_VL raw maximum value.
 */
#define MAX_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL        1

/**
 * Signal ESP_QBit_Wegimpuls_VL raw offset value.
 */
#define OFF_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VL        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR Signal ESP_QBit_Wegimpuls_VR of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal ESP_QBit_Wegimpuls_VR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR and \ref GET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR instead.
 */
#define SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR        0, 0, 13, 1

/**
 * Signal ESP_QBit_Wegimpuls_VR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR      0, 0, 13, 1, 0

/**
 * Get signal ESP_QBit_Wegimpuls_VR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 5) & 0x01) << 0) \
)

/**
 * Set signal ESP_QBit_Wegimpuls_VR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR(buf, val) { \
	buf[1] &= ~(0x01 << 5); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal ESP_QBit_Wegimpuls_VR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR(buf) \
	SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR(buf, 0)

/**
 * Signal ESP_QBit_Wegimpuls_VR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_QBit_Wegimpuls_VR raw initial value.
 */
#define START_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR      0

/**
 * Signal ESP_QBit_Wegimpuls_VR raw minimum value.
 */
#define MIN_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR        0

/**
 * Signal ESP_QBit_Wegimpuls_VR raw maximum value.
 */
#define MAX_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR        1

/**
 * Signal ESP_QBit_Wegimpuls_VR raw offset value.
 */
#define OFF_WheelSpeed_Edge_ESP_QBit_Wegimpuls_VR        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL Signal ESP_QBit_Wegimpuls_HL of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal ESP_QBit_Wegimpuls_HL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL and \ref GET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL instead.
 */
#define SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL        0, 0, 14, 1

/**
 * Signal ESP_QBit_Wegimpuls_HL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL      0, 0, 14, 1, 0

/**
 * Get signal ESP_QBit_Wegimpuls_HL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 6) & 0x01) << 0) \
)

/**
 * Set signal ESP_QBit_Wegimpuls_HL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL(buf, val) { \
	buf[1] &= ~(0x01 << 6); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal ESP_QBit_Wegimpuls_HL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL(buf) \
	SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL(buf, 0)

/**
 * Signal ESP_QBit_Wegimpuls_HL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_QBit_Wegimpuls_HL raw initial value.
 */
#define START_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL      0

/**
 * Signal ESP_QBit_Wegimpuls_HL raw minimum value.
 */
#define MIN_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL        0

/**
 * Signal ESP_QBit_Wegimpuls_HL raw maximum value.
 */
#define MAX_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL        1

/**
 * Signal ESP_QBit_Wegimpuls_HL raw offset value.
 */
#define OFF_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HL        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR Signal ESP_QBit_Wegimpuls_HR of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal ESP_QBit_Wegimpuls_HR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR and \ref GET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR instead.
 */
#define SIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR        0, 0, 15, 1

/**
 * Signal ESP_QBit_Wegimpuls_HR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR      0, 0, 15, 1, 0

/**
 * Get signal ESP_QBit_Wegimpuls_HR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ESP_QBit_Wegimpuls_HR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ESP_QBit_Wegimpuls_HR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR(buf) \
	SET_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR(buf, 0)

/**
 * Signal ESP_QBit_Wegimpuls_HR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_QBit_Wegimpuls_HR raw initial value.
 */
#define START_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR      0

/**
 * Signal ESP_QBit_Wegimpuls_HR raw minimum value.
 */
#define MIN_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR        0

/**
 * Signal ESP_QBit_Wegimpuls_HR raw maximum value.
 */
#define MAX_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR        1

/**
 * Signal ESP_QBit_Wegimpuls_HR raw offset value.
 */
#define OFF_WheelSpeed_Edge_ESP_QBit_Wegimpuls_HR        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_fl_wheel_speed_edge_sum Signal fl_wheel_speed_edge_sum of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal fl_wheel_speed_edge_sum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_fl_wheel_speed_edge_sum and \ref GET_WheelSpeed_Edge_fl_wheel_speed_edge_sum instead.
 */
#define SIG_WheelSpeed_Edge_fl_wheel_speed_edge_sum        0, 0, 16, 10

/**
 * Signal fl_wheel_speed_edge_sum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_fl_wheel_speed_edge_sum or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_fl_wheel_speed_edge_sum      0, 0, 16, 10, 0

/**
 * Get signal fl_wheel_speed_edge_sum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_fl_wheel_speed_edge_sum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 8) \
)

/**
 * Set signal fl_wheel_speed_edge_sum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_fl_wheel_speed_edge_sum(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
}

/**
 * Set signal fl_wheel_speed_edge_sum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_fl_wheel_speed_edge_sum(buf) \
	SET_WheelSpeed_Edge_fl_wheel_speed_edge_sum(buf, 0)

/**
 * Signal fl_wheel_speed_edge_sum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_fl_wheel_speed_edge_sum(x, fmt) \
	((x) * fmt)

/**
 * Signal fl_wheel_speed_edge_sum raw initial value.
 */
#define START_WheelSpeed_Edge_fl_wheel_speed_edge_sum      0

/**
 * Signal fl_wheel_speed_edge_sum raw minimum value.
 */
#define MIN_WheelSpeed_Edge_fl_wheel_speed_edge_sum        0

/**
 * Signal fl_wheel_speed_edge_sum raw maximum value.
 */
#define MAX_WheelSpeed_Edge_fl_wheel_speed_edge_sum        1000

/**
 * Signal fl_wheel_speed_edge_sum raw offset value.
 */
#define OFF_WheelSpeed_Edge_fl_wheel_speed_edge_sum        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_fr_wheel_speed_edge_sum Signal fr_wheel_speed_edge_sum of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal fr_wheel_speed_edge_sum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_fr_wheel_speed_edge_sum and \ref GET_WheelSpeed_Edge_fr_wheel_speed_edge_sum instead.
 */
#define SIG_WheelSpeed_Edge_fr_wheel_speed_edge_sum        0, 0, 26, 10

/**
 * Signal fr_wheel_speed_edge_sum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_fr_wheel_speed_edge_sum or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_fr_wheel_speed_edge_sum      0, 0, 26, 10, 0

/**
 * Get signal fr_wheel_speed_edge_sum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_fr_wheel_speed_edge_sum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x0f) << 6) \
)

/**
 * Set signal fr_wheel_speed_edge_sum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_fr_wheel_speed_edge_sum(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
}

/**
 * Set signal fr_wheel_speed_edge_sum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_fr_wheel_speed_edge_sum(buf) \
	SET_WheelSpeed_Edge_fr_wheel_speed_edge_sum(buf, 0)

/**
 * Signal fr_wheel_speed_edge_sum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_fr_wheel_speed_edge_sum(x, fmt) \
	((x) * fmt)

/**
 * Signal fr_wheel_speed_edge_sum raw initial value.
 */
#define START_WheelSpeed_Edge_fr_wheel_speed_edge_sum      0

/**
 * Signal fr_wheel_speed_edge_sum raw minimum value.
 */
#define MIN_WheelSpeed_Edge_fr_wheel_speed_edge_sum        0

/**
 * Signal fr_wheel_speed_edge_sum raw maximum value.
 */
#define MAX_WheelSpeed_Edge_fr_wheel_speed_edge_sum        1000

/**
 * Signal fr_wheel_speed_edge_sum raw offset value.
 */
#define OFF_WheelSpeed_Edge_fr_wheel_speed_edge_sum        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_rl_wheel_speed_edge_sum Signal rl_wheel_speed_edge_sum of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal rl_wheel_speed_edge_sum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_rl_wheel_speed_edge_sum and \ref GET_WheelSpeed_Edge_rl_wheel_speed_edge_sum instead.
 */
#define SIG_WheelSpeed_Edge_rl_wheel_speed_edge_sum        0, 0, 36, 10

/**
 * Signal rl_wheel_speed_edge_sum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_rl_wheel_speed_edge_sum or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_rl_wheel_speed_edge_sum      0, 0, 36, 10, 0

/**
 * Get signal rl_wheel_speed_edge_sum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_rl_wheel_speed_edge_sum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x0f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x3f) << 4) \
)

/**
 * Set signal rl_wheel_speed_edge_sum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_rl_wheel_speed_edge_sum(buf, val) { \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
	buf[5] &= ~(0x3f << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
}

/**
 * Set signal rl_wheel_speed_edge_sum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_rl_wheel_speed_edge_sum(buf) \
	SET_WheelSpeed_Edge_rl_wheel_speed_edge_sum(buf, 0)

/**
 * Signal rl_wheel_speed_edge_sum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_rl_wheel_speed_edge_sum(x, fmt) \
	((x) * fmt)

/**
 * Signal rl_wheel_speed_edge_sum raw initial value.
 */
#define START_WheelSpeed_Edge_rl_wheel_speed_edge_sum      0

/**
 * Signal rl_wheel_speed_edge_sum raw minimum value.
 */
#define MIN_WheelSpeed_Edge_rl_wheel_speed_edge_sum        0

/**
 * Signal rl_wheel_speed_edge_sum raw maximum value.
 */
#define MAX_WheelSpeed_Edge_rl_wheel_speed_edge_sum        1000

/**
 * Signal rl_wheel_speed_edge_sum raw offset value.
 */
#define OFF_WheelSpeed_Edge_rl_wheel_speed_edge_sum        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_rr_wheel_speed_edge_sum Signal rr_wheel_speed_edge_sum of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal rr_wheel_speed_edge_sum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_rr_wheel_speed_edge_sum and \ref GET_WheelSpeed_Edge_rr_wheel_speed_edge_sum instead.
 */
#define SIG_WheelSpeed_Edge_rr_wheel_speed_edge_sum        0, 0, 46, 10

/**
 * Signal rr_wheel_speed_edge_sum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_rr_wheel_speed_edge_sum or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_rr_wheel_speed_edge_sum      0, 0, 46, 10, 0

/**
 * Get signal rr_wheel_speed_edge_sum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_rr_wheel_speed_edge_sum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 2) \
)

/**
 * Set signal rr_wheel_speed_edge_sum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_rr_wheel_speed_edge_sum(buf, val) { \
	buf[5] &= ~(0x03 << 6); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
}

/**
 * Set signal rr_wheel_speed_edge_sum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_rr_wheel_speed_edge_sum(buf) \
	SET_WheelSpeed_Edge_rr_wheel_speed_edge_sum(buf, 0)

/**
 * Signal rr_wheel_speed_edge_sum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_rr_wheel_speed_edge_sum(x, fmt) \
	((x) * fmt)

/**
 * Signal rr_wheel_speed_edge_sum raw initial value.
 */
#define START_WheelSpeed_Edge_rr_wheel_speed_edge_sum      0

/**
 * Signal rr_wheel_speed_edge_sum raw minimum value.
 */
#define MIN_WheelSpeed_Edge_rr_wheel_speed_edge_sum        0

/**
 * Signal rr_wheel_speed_edge_sum raw maximum value.
 */
#define MAX_WheelSpeed_Edge_rr_wheel_speed_edge_sum        1000

/**
 * Signal rr_wheel_speed_edge_sum raw offset value.
 */
#define OFF_WheelSpeed_Edge_rr_wheel_speed_edge_sum        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_ESP_VL_Fahrtrichtung Signal ESP_VL_Fahrtrichtung of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal ESP_VL_Fahrtrichtung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_ESP_VL_Fahrtrichtung and \ref GET_WheelSpeed_Edge_ESP_VL_Fahrtrichtung instead.
 */
#define SIG_WheelSpeed_Edge_ESP_VL_Fahrtrichtung        0, 0, 56, 2

/**
 * Signal ESP_VL_Fahrtrichtung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_ESP_VL_Fahrtrichtung or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_ESP_VL_Fahrtrichtung      0, 0, 56, 2, 0

/**
 * Get signal ESP_VL_Fahrtrichtung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_ESP_VL_Fahrtrichtung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 0) \
)

/**
 * Set signal ESP_VL_Fahrtrichtung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_ESP_VL_Fahrtrichtung(buf, val) { \
	buf[7] &= ~(0x03 << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal ESP_VL_Fahrtrichtung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_ESP_VL_Fahrtrichtung(buf) \
	SET_WheelSpeed_Edge_ESP_VL_Fahrtrichtung(buf, 0)

/**
 * Signal ESP_VL_Fahrtrichtung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_ESP_VL_Fahrtrichtung(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_VL_Fahrtrichtung raw initial value.
 */
#define START_WheelSpeed_Edge_ESP_VL_Fahrtrichtung      0

/**
 * Signal ESP_VL_Fahrtrichtung raw minimum value.
 */
#define MIN_WheelSpeed_Edge_ESP_VL_Fahrtrichtung        0

/**
 * Signal ESP_VL_Fahrtrichtung raw maximum value.
 */
#define MAX_WheelSpeed_Edge_ESP_VL_Fahrtrichtung        3

/**
 * Signal ESP_VL_Fahrtrichtung raw offset value.
 */
#define OFF_WheelSpeed_Edge_ESP_VL_Fahrtrichtung        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_ESP_VR_Fahrtrichtung Signal ESP_VR_Fahrtrichtung of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal ESP_VR_Fahrtrichtung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_ESP_VR_Fahrtrichtung and \ref GET_WheelSpeed_Edge_ESP_VR_Fahrtrichtung instead.
 */
#define SIG_WheelSpeed_Edge_ESP_VR_Fahrtrichtung        0, 0, 58, 2

/**
 * Signal ESP_VR_Fahrtrichtung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_ESP_VR_Fahrtrichtung or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_ESP_VR_Fahrtrichtung      0, 0, 58, 2, 0

/**
 * Get signal ESP_VR_Fahrtrichtung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_ESP_VR_Fahrtrichtung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x03) << 0) \
)

/**
 * Set signal ESP_VR_Fahrtrichtung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_ESP_VR_Fahrtrichtung(buf, val) { \
	buf[7] &= ~(0x03 << 2); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal ESP_VR_Fahrtrichtung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_ESP_VR_Fahrtrichtung(buf) \
	SET_WheelSpeed_Edge_ESP_VR_Fahrtrichtung(buf, 0)

/**
 * Signal ESP_VR_Fahrtrichtung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_ESP_VR_Fahrtrichtung(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_VR_Fahrtrichtung raw initial value.
 */
#define START_WheelSpeed_Edge_ESP_VR_Fahrtrichtung      0

/**
 * Signal ESP_VR_Fahrtrichtung raw minimum value.
 */
#define MIN_WheelSpeed_Edge_ESP_VR_Fahrtrichtung        0

/**
 * Signal ESP_VR_Fahrtrichtung raw maximum value.
 */
#define MAX_WheelSpeed_Edge_ESP_VR_Fahrtrichtung        3

/**
 * Signal ESP_VR_Fahrtrichtung raw offset value.
 */
#define OFF_WheelSpeed_Edge_ESP_VR_Fahrtrichtung        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_ESP_HL_Fahrtrichtung Signal ESP_HL_Fahrtrichtung of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal ESP_HL_Fahrtrichtung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_ESP_HL_Fahrtrichtung and \ref GET_WheelSpeed_Edge_ESP_HL_Fahrtrichtung instead.
 */
#define SIG_WheelSpeed_Edge_ESP_HL_Fahrtrichtung        0, 0, 60, 2

/**
 * Signal ESP_HL_Fahrtrichtung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_ESP_HL_Fahrtrichtung or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_ESP_HL_Fahrtrichtung      0, 0, 60, 2, 0

/**
 * Get signal ESP_HL_Fahrtrichtung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_ESP_HL_Fahrtrichtung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 4) & 0x03) << 0) \
)

/**
 * Set signal ESP_HL_Fahrtrichtung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_ESP_HL_Fahrtrichtung(buf, val) { \
	buf[7] &= ~(0x03 << 4); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal ESP_HL_Fahrtrichtung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_ESP_HL_Fahrtrichtung(buf) \
	SET_WheelSpeed_Edge_ESP_HL_Fahrtrichtung(buf, 0)

/**
 * Signal ESP_HL_Fahrtrichtung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_ESP_HL_Fahrtrichtung(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_HL_Fahrtrichtung raw initial value.
 */
#define START_WheelSpeed_Edge_ESP_HL_Fahrtrichtung      0

/**
 * Signal ESP_HL_Fahrtrichtung raw minimum value.
 */
#define MIN_WheelSpeed_Edge_ESP_HL_Fahrtrichtung        0

/**
 * Signal ESP_HL_Fahrtrichtung raw maximum value.
 */
#define MAX_WheelSpeed_Edge_ESP_HL_Fahrtrichtung        3

/**
 * Signal ESP_HL_Fahrtrichtung raw offset value.
 */
#define OFF_WheelSpeed_Edge_ESP_HL_Fahrtrichtung        0

/**
 * @}
 */

/**
 * @defgroup SIG_WheelSpeed_Edge_ESP_HR_Fahrtrichtung Signal ESP_HR_Fahrtrichtung of Message WheelSpeed_Edge (0x116)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_WheelSpeed_Edge
 * @{
 */

/**
 * Signal ESP_HR_Fahrtrichtung configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_WheelSpeed_Edge_ESP_HR_Fahrtrichtung and \ref GET_WheelSpeed_Edge_ESP_HR_Fahrtrichtung instead.
 */
#define SIG_WheelSpeed_Edge_ESP_HR_Fahrtrichtung        0, 0, 62, 2

/**
 * Signal ESP_HR_Fahrtrichtung setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_WheelSpeed_Edge_ESP_HR_Fahrtrichtung or \ref INIT_WheelSpeed_Edge instead.
 */
#define SETUP_WheelSpeed_Edge_ESP_HR_Fahrtrichtung      0, 0, 62, 2, 0

/**
 * Get signal ESP_HR_Fahrtrichtung from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_WheelSpeed_Edge_ESP_HR_Fahrtrichtung(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ESP_HR_Fahrtrichtung in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_WheelSpeed_Edge_ESP_HR_Fahrtrichtung(buf, val) { \
	buf[7] &= ~(0x03 << 6); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ESP_HR_Fahrtrichtung in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_WheelSpeed_Edge_ESP_HR_Fahrtrichtung(buf) \
	SET_WheelSpeed_Edge_ESP_HR_Fahrtrichtung(buf, 0)

/**
 * Signal ESP_HR_Fahrtrichtung value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_WheelSpeed_Edge_ESP_HR_Fahrtrichtung(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_HR_Fahrtrichtung raw initial value.
 */
#define START_WheelSpeed_Edge_ESP_HR_Fahrtrichtung      0

/**
 * Signal ESP_HR_Fahrtrichtung raw minimum value.
 */
#define MIN_WheelSpeed_Edge_ESP_HR_Fahrtrichtung        0

/**
 * Signal ESP_HR_Fahrtrichtung raw maximum value.
 */
#define MAX_WheelSpeed_Edge_ESP_HR_Fahrtrichtung        3

/**
 * Signal ESP_HR_Fahrtrichtung raw offset value.
 */
#define OFF_WheelSpeed_Edge_ESP_HR_Fahrtrichtung        0

/**
 * @}
 */

