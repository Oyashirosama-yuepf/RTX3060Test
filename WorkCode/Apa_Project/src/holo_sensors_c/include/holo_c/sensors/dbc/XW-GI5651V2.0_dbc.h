/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2022年 02月 15日 星期二 13:39:28 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_XW-GI5651V2.0
 */

/**
 * @defgroup DB_XW-GI5651V2.0 CAN Database XW-GI5651V2.0
 *
 * Path to file: output/XW-GI5651V2.0.dbc
 *
 * Provides the following ECUs:
 * - \ref ECU_GI5651
 */

/**
 * @defgroup ECU_GI5651 Electronics Control Unit GI5651
 *
 * This ECU was defined in \ref DB_XW-GI5651V2.0.
 *
 * TX messages:
 *
 * RX signals:
 *
 * @ingroup DB_XW-GI5651V2.0
 */

/**
 * @defgroup MSG_NAV_Speed Message NAV_Speed (0x40b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_NAV_Speed_NAV_Speed_Vh
 * - \ref SIG_NAV_Speed_NAV_Speed_Vu
 * - \ref SIG_NAV_Speed_NAV_Speed_Vn
 * - \ref SIG_NAV_Speed_NAV_Speed_Ve
 *
 * @{
 */

/**
 * Message NAV_Speed configuration tuple.
 */
#define MSG_NAV_Speed                               0x40b, 0, 8

/**
 * Message NAV_Speed id.
 */
#define ID_NAV_Speed                                0x40b

/**
 * Message NAV_Speed extended id bit.
 */
#define EXT_NAV_Speed                               0

/**
 * Message NAV_Speed Data Length Count.
 */
#define DLC_NAV_Speed                               8

/**
 * Message NAV_Speed cycle time.
 */
#define CYCLE_NAV_Speed                             0

/**
 * Message NAV_Speed fast cycle time.
 */
#define FAST_NAV_Speed                              0

/**
 * Initialise message NAV_Speed buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_NAV_Speed(buf) { \
	INITSIG_NAV_Speed_NAV_Speed_Vh(buf); \
	INITSIG_NAV_Speed_NAV_Speed_Vu(buf); \
	INITSIG_NAV_Speed_NAV_Speed_Vn(buf); \
	INITSIG_NAV_Speed_NAV_Speed_Ve(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_NAV_POS_AltFlag Message NAV_POS_AltFlag (0x30b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_NAV_POS_AltFlag_NAV_Flag
 * - \ref SIG_NAV_POS_AltFlag_NAV_POS_Altitude
 *
 * @{
 */

/**
 * Message NAV_POS_AltFlag configuration tuple.
 */
#define MSG_NAV_POS_AltFlag                         0x30b, 0, 5

/**
 * Message NAV_POS_AltFlag id.
 */
#define ID_NAV_POS_AltFlag                          0x30b

/**
 * Message NAV_POS_AltFlag extended id bit.
 */
#define EXT_NAV_POS_AltFlag                         0

/**
 * Message NAV_POS_AltFlag Data Length Count.
 */
#define DLC_NAV_POS_AltFlag                         5

/**
 * Message NAV_POS_AltFlag cycle time.
 */
#define CYCLE_NAV_POS_AltFlag                       0

/**
 * Message NAV_POS_AltFlag fast cycle time.
 */
#define FAST_NAV_POS_AltFlag                        0

/**
 * Initialise message NAV_POS_AltFlag buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_NAV_POS_AltFlag(buf) { \
	INITSIG_NAV_POS_AltFlag_NAV_Flag(buf); \
	INITSIG_NAV_POS_AltFlag_NAV_POS_Altitude(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_NAV_POS_LatLon Message NAV_POS_LatLon (0x20b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_NAV_POS_LatLon_NAV_POS_Longitude
 * - \ref SIG_NAV_POS_LatLon_NAV_POS_Latitude
 *
 * @{
 */

/**
 * Message NAV_POS_LatLon configuration tuple.
 */
#define MSG_NAV_POS_LatLon                          0x20b, 0, 8

/**
 * Message NAV_POS_LatLon id.
 */
#define ID_NAV_POS_LatLon                           0x20b

/**
 * Message NAV_POS_LatLon extended id bit.
 */
#define EXT_NAV_POS_LatLon                          0

/**
 * Message NAV_POS_LatLon Data Length Count.
 */
#define DLC_NAV_POS_LatLon                          8

/**
 * Message NAV_POS_LatLon cycle time.
 */
#define CYCLE_NAV_POS_LatLon                        0

/**
 * Message NAV_POS_LatLon fast cycle time.
 */
#define FAST_NAV_POS_LatLon                         0

/**
 * Initialise message NAV_POS_LatLon buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_NAV_POS_LatLon(buf) { \
	INITSIG_NAV_POS_LatLon_NAV_POS_Longitude(buf); \
	INITSIG_NAV_POS_LatLon_NAV_POS_Latitude(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_NAV_ATTI Message NAV_ATTI (0x10b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_NAV_ATTI_NAV_ATTI_HeadP
 * - \ref SIG_NAV_ATTI_NAV_ATTI_Roll
 * - \ref SIG_NAV_ATTI_NAV_ATTI_Pitch
 * - \ref SIG_NAV_ATTI_NAV_ATTI_Heading
 *
 * @{
 */

/**
 * Message NAV_ATTI configuration tuple.
 */
#define MSG_NAV_ATTI                                0x10b, 0, 8

/**
 * Message NAV_ATTI id.
 */
#define ID_NAV_ATTI                                 0x10b

/**
 * Message NAV_ATTI extended id bit.
 */
#define EXT_NAV_ATTI                                0

/**
 * Message NAV_ATTI Data Length Count.
 */
#define DLC_NAV_ATTI                                8

/**
 * Message NAV_ATTI cycle time.
 */
#define CYCLE_NAV_ATTI                              0

/**
 * Message NAV_ATTI fast cycle time.
 */
#define FAST_NAV_ATTI                               0

/**
 * Initialise message NAV_ATTI buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_NAV_ATTI(buf) { \
	INITSIG_NAV_ATTI_NAV_ATTI_HeadP(buf); \
	INITSIG_NAV_ATTI_NAV_ATTI_Roll(buf); \
	INITSIG_NAV_ATTI_NAV_ATTI_Pitch(buf); \
	INITSIG_NAV_ATTI_NAV_ATTI_Heading(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IMU_AcceGyro_Z Message IMU_AcceGyro_Z (0x70b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IMU_AcceGyro_Z_IMU_GyroZ
 * - \ref SIG_IMU_AcceGyro_Z_IMU_AcceZ
 *
 * @{
 */

/**
 * Message IMU_AcceGyro_Z configuration tuple.
 */
#define MSG_IMU_AcceGyro_Z                          0x70b, 0, 8

/**
 * Message IMU_AcceGyro_Z id.
 */
#define ID_IMU_AcceGyro_Z                           0x70b

/**
 * Message IMU_AcceGyro_Z extended id bit.
 */
#define EXT_IMU_AcceGyro_Z                          0

/**
 * Message IMU_AcceGyro_Z Data Length Count.
 */
#define DLC_IMU_AcceGyro_Z                          8

/**
 * Message IMU_AcceGyro_Z cycle time.
 */
#define CYCLE_IMU_AcceGyro_Z                        0

/**
 * Message IMU_AcceGyro_Z fast cycle time.
 */
#define FAST_IMU_AcceGyro_Z                         0

/**
 * Initialise message IMU_AcceGyro_Z buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IMU_AcceGyro_Z(buf) { \
	INITSIG_IMU_AcceGyro_Z_IMU_GyroZ(buf); \
	INITSIG_IMU_AcceGyro_Z_IMU_AcceZ(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IMU_GYRO_XY Message IMU_GYRO_XY (0x60b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IMU_GYRO_XY_IMU_GyroY
 * - \ref SIG_IMU_GYRO_XY_IMU_GyroX
 *
 * @{
 */

/**
 * Message IMU_GYRO_XY configuration tuple.
 */
#define MSG_IMU_GYRO_XY                             0x60b, 0, 8

/**
 * Message IMU_GYRO_XY id.
 */
#define ID_IMU_GYRO_XY                              0x60b

/**
 * Message IMU_GYRO_XY extended id bit.
 */
#define EXT_IMU_GYRO_XY                             0

/**
 * Message IMU_GYRO_XY Data Length Count.
 */
#define DLC_IMU_GYRO_XY                             8

/**
 * Message IMU_GYRO_XY cycle time.
 */
#define CYCLE_IMU_GYRO_XY                           0

/**
 * Message IMU_GYRO_XY fast cycle time.
 */
#define FAST_IMU_GYRO_XY                            0

/**
 * Initialise message IMU_GYRO_XY buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IMU_GYRO_XY(buf) { \
	INITSIG_IMU_GYRO_XY_IMU_GyroY(buf); \
	INITSIG_IMU_GYRO_XY_IMU_GyroX(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IMU_ACCE_XY Message IMU_ACCE_XY (0x50b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IMU_ACCE_XY_IMU_AcceY
 * - \ref SIG_IMU_ACCE_XY_IMU_AcceX
 *
 * @{
 */

/**
 * Message IMU_ACCE_XY configuration tuple.
 */
#define MSG_IMU_ACCE_XY                             0x50b, 0, 8

/**
 * Message IMU_ACCE_XY id.
 */
#define ID_IMU_ACCE_XY                              0x50b

/**
 * Message IMU_ACCE_XY extended id bit.
 */
#define EXT_IMU_ACCE_XY                             0

/**
 * Message IMU_ACCE_XY Data Length Count.
 */
#define DLC_IMU_ACCE_XY                             8

/**
 * Message IMU_ACCE_XY cycle time.
 */
#define CYCLE_IMU_ACCE_XY                           0

/**
 * Message IMU_ACCE_XY fast cycle time.
 */
#define FAST_IMU_ACCE_XY                            0

/**
 * Initialise message IMU_ACCE_XY buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IMU_ACCE_XY(buf) { \
	INITSIG_IMU_ACCE_XY_IMU_AcceY(buf); \
	INITSIG_IMU_ACCE_XY_IMU_AcceX(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_GPS_Time Message GPS_Time (0x9b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_GPS_Time_GPS_Time_Second
 * - \ref SIG_GPS_Time_GPS_Time_Week
 *
 * @{
 */

/**
 * Message GPS_Time configuration tuple.
 */
#define MSG_GPS_Time                                0x9b, 0, 6

/**
 * Message GPS_Time id.
 */
#define ID_GPS_Time                                 0x9b

/**
 * Message GPS_Time extended id bit.
 */
#define EXT_GPS_Time                                0

/**
 * Message GPS_Time Data Length Count.
 */
#define DLC_GPS_Time                                6

/**
 * Message GPS_Time cycle time.
 */
#define CYCLE_GPS_Time                              0

/**
 * Message GPS_Time fast cycle time.
 */
#define FAST_GPS_Time                               0

/**
 * Initialise message GPS_Time buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_GPS_Time(buf) { \
	INITSIG_GPS_Time_GPS_Time_Second(buf); \
	INITSIG_GPS_Time_GPS_Time_Week(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_GPS_Speed Message GPS_Speed (0x41b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_GPS_Speed_GPS_Speed_Vh
 * - \ref SIG_GPS_Speed_GPS_Speed_Vu
 * - \ref SIG_GPS_Speed_GPS_Speed_Vn
 * - \ref SIG_GPS_Speed_GPS_Speed_Ve
 *
 * @{
 */

/**
 * Message GPS_Speed configuration tuple.
 */
#define MSG_GPS_Speed                               0x41b, 0, 8

/**
 * Message GPS_Speed id.
 */
#define ID_GPS_Speed                                0x41b

/**
 * Message GPS_Speed extended id bit.
 */
#define EXT_GPS_Speed                               0

/**
 * Message GPS_Speed Data Length Count.
 */
#define DLC_GPS_Speed                               8

/**
 * Message GPS_Speed cycle time.
 */
#define CYCLE_GPS_Speed                             0

/**
 * Message GPS_Speed fast cycle time.
 */
#define FAST_GPS_Speed                              0

/**
 * Initialise message GPS_Speed buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_GPS_Speed(buf) { \
	INITSIG_GPS_Speed_GPS_Speed_Vh(buf); \
	INITSIG_GPS_Speed_GPS_Speed_Vu(buf); \
	INITSIG_GPS_Speed_GPS_Speed_Vn(buf); \
	INITSIG_GPS_Speed_GPS_Speed_Ve(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_GPS_POS_LatLon Message GPS_POS_LatLon (0x21b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_GPS_POS_LatLon_GPS_POS_Longitude
 * - \ref SIG_GPS_POS_LatLon_GPS_POS_Latitude
 *
 * @{
 */

/**
 * Message GPS_POS_LatLon configuration tuple.
 */
#define MSG_GPS_POS_LatLon                          0x21b, 0, 8

/**
 * Message GPS_POS_LatLon id.
 */
#define ID_GPS_POS_LatLon                           0x21b

/**
 * Message GPS_POS_LatLon extended id bit.
 */
#define EXT_GPS_POS_LatLon                          0

/**
 * Message GPS_POS_LatLon Data Length Count.
 */
#define DLC_GPS_POS_LatLon                          8

/**
 * Message GPS_POS_LatLon cycle time.
 */
#define CYCLE_GPS_POS_LatLon                        0

/**
 * Message GPS_POS_LatLon fast cycle time.
 */
#define FAST_GPS_POS_LatLon                         0

/**
 * Initialise message GPS_POS_LatLon buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_GPS_POS_LatLon(buf) { \
	INITSIG_GPS_POS_LatLon_GPS_POS_Longitude(buf); \
	INITSIG_GPS_POS_LatLon_GPS_POS_Latitude(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_GPS_POS_AltFlag Message GPS_POS_AltFlag (0x31b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_GPS_POS_AltFlag_GPS_Flag
 * - \ref SIG_GPS_POS_AltFlag_GPS_POS_Atitude
 *
 * @{
 */

/**
 * Message GPS_POS_AltFlag configuration tuple.
 */
#define MSG_GPS_POS_AltFlag                         0x31b, 0, 5

/**
 * Message GPS_POS_AltFlag id.
 */
#define ID_GPS_POS_AltFlag                          0x31b

/**
 * Message GPS_POS_AltFlag extended id bit.
 */
#define EXT_GPS_POS_AltFlag                         0

/**
 * Message GPS_POS_AltFlag Data Length Count.
 */
#define DLC_GPS_POS_AltFlag                         5

/**
 * Message GPS_POS_AltFlag cycle time.
 */
#define CYCLE_GPS_POS_AltFlag                       0

/**
 * Message GPS_POS_AltFlag fast cycle time.
 */
#define FAST_GPS_POS_AltFlag                        0

/**
 * Initialise message GPS_POS_AltFlag buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_GPS_POS_AltFlag(buf) { \
	INITSIG_GPS_POS_AltFlag_GPS_Flag(buf); \
	INITSIG_GPS_POS_AltFlag_GPS_POS_Atitude(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_GPS_ATTI_Heading Message GPS_ATTI_Heading (0x11b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_GPS_ATTI_Heading_GPS_ATTI_HeadP
 * - \ref SIG_GPS_ATTI_Heading_GPS_ATTI_Pitch
 * - \ref SIG_GPS_ATTI_Heading_GPS_ATTI_Heading
 *
 * @{
 */

/**
 * Message GPS_ATTI_Heading configuration tuple.
 */
#define MSG_GPS_ATTI_Heading                        0x11b, 0, 6

/**
 * Message GPS_ATTI_Heading id.
 */
#define ID_GPS_ATTI_Heading                         0x11b

/**
 * Message GPS_ATTI_Heading extended id bit.
 */
#define EXT_GPS_ATTI_Heading                        0

/**
 * Message GPS_ATTI_Heading Data Length Count.
 */
#define DLC_GPS_ATTI_Heading                        6

/**
 * Message GPS_ATTI_Heading cycle time.
 */
#define CYCLE_GPS_ATTI_Heading                      0

/**
 * Message GPS_ATTI_Heading fast cycle time.
 */
#define FAST_GPS_ATTI_Heading                       0

/**
 * Initialise message GPS_ATTI_Heading buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_GPS_ATTI_Heading(buf) { \
	INITSIG_GPS_ATTI_Heading_GPS_ATTI_HeadP(buf); \
	INITSIG_GPS_ATTI_Heading_GPS_ATTI_Pitch(buf); \
	INITSIG_GPS_ATTI_Heading_GPS_ATTI_Heading(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_RevrStatus Message RevrStatus (0x737)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_RevrStatus_DiffId
 * - \ref SIG_RevrStatus_DiffTime
 * - \ref SIG_RevrStatus_Hdop_Receiver
 * - \ref SIG_RevrStatus_SateliteNum_Secondary
 * - \ref SIG_RevrStatus_SateliteNum_Primary
 *
 * @{
 */

/**
 * Message RevrStatus configuration tuple.
 */
#define MSG_RevrStatus                              0x737, 0, 8

/**
 * Message RevrStatus id.
 */
#define ID_RevrStatus                               0x737

/**
 * Message RevrStatus extended id bit.
 */
#define EXT_RevrStatus                              0

/**
 * Message RevrStatus Data Length Count.
 */
#define DLC_RevrStatus                              8

/**
 * Message RevrStatus cycle time.
 */
#define CYCLE_RevrStatus                            0

/**
 * Message RevrStatus fast cycle time.
 */
#define FAST_RevrStatus                             0

/**
 * Initialise message RevrStatus buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_RevrStatus(buf) { \
	INITSIG_RevrStatus_DiffId(buf); \
	INITSIG_RevrStatus_DiffTime(buf); \
	INITSIG_RevrStatus_Hdop_Receiver(buf); \
	INITSIG_RevrStatus_SateliteNum_Secondary(buf); \
	INITSIG_RevrStatus_SateliteNum_Primary(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_RevrAttitude Message RevrAttitude (0x736)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_RevrAttitude_Track_Receiver
 * - \ref SIG_RevrAttitude_Baseline
 * - \ref SIG_RevrAttitude_Pitch_Receiver
 * - \ref SIG_RevrAttitude_Yaw_Receiver
 *
 * @{
 */

/**
 * Message RevrAttitude configuration tuple.
 */
#define MSG_RevrAttitude                            0x736, 0, 8

/**
 * Message RevrAttitude id.
 */
#define ID_RevrAttitude                             0x736

/**
 * Message RevrAttitude extended id bit.
 */
#define EXT_RevrAttitude                            0

/**
 * Message RevrAttitude Data Length Count.
 */
#define DLC_RevrAttitude                            8

/**
 * Message RevrAttitude cycle time.
 */
#define CYCLE_RevrAttitude                          0

/**
 * Message RevrAttitude fast cycle time.
 */
#define FAST_RevrAttitude                           0

/**
 * Initialise message RevrAttitude buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_RevrAttitude(buf) { \
	INITSIG_RevrAttitude_Track_Receiver(buf); \
	INITSIG_RevrAttitude_Baseline(buf); \
	INITSIG_RevrAttitude_Pitch_Receiver(buf); \
	INITSIG_RevrAttitude_Yaw_Receiver(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_RevrVelocity Message RevrVelocity (0x735)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_RevrVelocity_VelocityHorizon_Receiver
 * - \ref SIG_RevrVelocity_VelocityUp_Receiver
 * - \ref SIG_RevrVelocity_VelocityNorth_Receiver
 * - \ref SIG_RevrVelocity_VelocityEast_Receiver
 *
 * @{
 */

/**
 * Message RevrVelocity configuration tuple.
 */
#define MSG_RevrVelocity                            0x735, 0, 8

/**
 * Message RevrVelocity id.
 */
#define ID_RevrVelocity                             0x735

/**
 * Message RevrVelocity extended id bit.
 */
#define EXT_RevrVelocity                            0

/**
 * Message RevrVelocity Data Length Count.
 */
#define DLC_RevrVelocity                            8

/**
 * Message RevrVelocity cycle time.
 */
#define CYCLE_RevrVelocity                          0

/**
 * Message RevrVelocity fast cycle time.
 */
#define FAST_RevrVelocity                           0

/**
 * Initialise message RevrVelocity buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_RevrVelocity(buf) { \
	INITSIG_RevrVelocity_VelocityHorizon_Receiver(buf); \
	INITSIG_RevrVelocity_VelocityUp_Receiver(buf); \
	INITSIG_RevrVelocity_VelocityNorth_Receiver(buf); \
	INITSIG_RevrVelocity_VelocityEast_Receiver(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_RevrAltitude Message RevrAltitude (0x734)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_RevrAltitude_AltitudeUndulation
 * - \ref SIG_RevrAltitude_Altitude_Receiver
 *
 * @{
 */

/**
 * Message RevrAltitude configuration tuple.
 */
#define MSG_RevrAltitude                            0x734, 0, 8

/**
 * Message RevrAltitude id.
 */
#define ID_RevrAltitude                             0x734

/**
 * Message RevrAltitude extended id bit.
 */
#define EXT_RevrAltitude                            0

/**
 * Message RevrAltitude Data Length Count.
 */
#define DLC_RevrAltitude                            8

/**
 * Message RevrAltitude cycle time.
 */
#define CYCLE_RevrAltitude                          0

/**
 * Message RevrAltitude fast cycle time.
 */
#define FAST_RevrAltitude                           0

/**
 * Initialise message RevrAltitude buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_RevrAltitude(buf) { \
	INITSIG_RevrAltitude_AltitudeUndulation(buf); \
	INITSIG_RevrAltitude_Altitude_Receiver(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_RevrPosition Message RevrPosition (0x733)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_RevrPosition_Longitude_Receiver
 * - \ref SIG_RevrPosition_Latitude_Receiver
 *
 * @{
 */

/**
 * Message RevrPosition configuration tuple.
 */
#define MSG_RevrPosition                            0x733, 0, 8

/**
 * Message RevrPosition id.
 */
#define ID_RevrPosition                             0x733

/**
 * Message RevrPosition extended id bit.
 */
#define EXT_RevrPosition                            0

/**
 * Message RevrPosition Data Length Count.
 */
#define DLC_RevrPosition                            8

/**
 * Message RevrPosition cycle time.
 */
#define CYCLE_RevrPosition                          0

/**
 * Message RevrPosition fast cycle time.
 */
#define FAST_RevrPosition                           0

/**
 * Initialise message RevrPosition buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_RevrPosition(buf) { \
	INITSIG_RevrPosition_Longitude_Receiver(buf); \
	INITSIG_RevrPosition_Latitude_Receiver(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_RevrUtcTime Message RevrUtcTime (0x732)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_RevrUtcTime_UtcTime_Receiver
 * - \ref SIG_RevrUtcTime_UtcDate_Receiver
 *
 * @{
 */

/**
 * Message RevrUtcTime configuration tuple.
 */
#define MSG_RevrUtcTime                             0x732, 0, 8

/**
 * Message RevrUtcTime id.
 */
#define ID_RevrUtcTime                              0x732

/**
 * Message RevrUtcTime extended id bit.
 */
#define EXT_RevrUtcTime                             0

/**
 * Message RevrUtcTime Data Length Count.
 */
#define DLC_RevrUtcTime                             8

/**
 * Message RevrUtcTime cycle time.
 */
#define CYCLE_RevrUtcTime                           0

/**
 * Message RevrUtcTime fast cycle time.
 */
#define FAST_RevrUtcTime                            0

/**
 * Initialise message RevrUtcTime buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_RevrUtcTime(buf) { \
	INITSIG_RevrUtcTime_UtcTime_Receiver(buf); \
	INITSIG_RevrUtcTime_UtcDate_Receiver(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_RevrGpsTime Message RevrGpsTime (0x731)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_RevrGpsTime_GpsSecond_Receiver
 * - \ref SIG_RevrGpsTime_GpsWeek_Receiver
 *
 * @{
 */

/**
 * Message RevrGpsTime configuration tuple.
 */
#define MSG_RevrGpsTime                             0x731, 0, 6

/**
 * Message RevrGpsTime id.
 */
#define ID_RevrGpsTime                              0x731

/**
 * Message RevrGpsTime extended id bit.
 */
#define EXT_RevrGpsTime                             0

/**
 * Message RevrGpsTime Data Length Count.
 */
#define DLC_RevrGpsTime                             6

/**
 * Message RevrGpsTime cycle time.
 */
#define CYCLE_RevrGpsTime                           0

/**
 * Message RevrGpsTime fast cycle time.
 */
#define FAST_RevrGpsTime                            0

/**
 * Initialise message RevrGpsTime buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_RevrGpsTime(buf) { \
	INITSIG_RevrGpsTime_GpsSecond_Receiver(buf); \
	INITSIG_RevrGpsTime_GpsWeek_Receiver(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IMU_3 Message IMU_3 (0x723)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IMU_3_Gyro_Z
 * - \ref SIG_IMU_3_Gyro_Y
 *
 * @{
 */

/**
 * Message IMU_3 configuration tuple.
 */
#define MSG_IMU_3                                   0x723, 0, 8

/**
 * Message IMU_3 id.
 */
#define ID_IMU_3                                    0x723

/**
 * Message IMU_3 extended id bit.
 */
#define EXT_IMU_3                                   0

/**
 * Message IMU_3 Data Length Count.
 */
#define DLC_IMU_3                                   8

/**
 * Message IMU_3 cycle time.
 */
#define CYCLE_IMU_3                                 0

/**
 * Message IMU_3 fast cycle time.
 */
#define FAST_IMU_3                                  0

/**
 * Initialise message IMU_3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IMU_3(buf) { \
	INITSIG_IMU_3_Gyro_Z(buf); \
	INITSIG_IMU_3_Gyro_Y(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IMU_2 Message IMU_2 (0x722)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IMU_2_Gyro_X
 * - \ref SIG_IMU_2_Accel_Z
 *
 * @{
 */

/**
 * Message IMU_2 configuration tuple.
 */
#define MSG_IMU_2                                   0x722, 0, 8

/**
 * Message IMU_2 id.
 */
#define ID_IMU_2                                    0x722

/**
 * Message IMU_2 extended id bit.
 */
#define EXT_IMU_2                                   0

/**
 * Message IMU_2 Data Length Count.
 */
#define DLC_IMU_2                                   8

/**
 * Message IMU_2 cycle time.
 */
#define CYCLE_IMU_2                                 0

/**
 * Message IMU_2 fast cycle time.
 */
#define FAST_IMU_2                                  0

/**
 * Initialise message IMU_2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IMU_2(buf) { \
	INITSIG_IMU_2_Gyro_X(buf); \
	INITSIG_IMU_2_Accel_Z(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_IMU_1 Message IMU_1 (0x721)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_IMU_1_Accel_Y
 * - \ref SIG_IMU_1_Accel_X
 *
 * @{
 */

/**
 * Message IMU_1 configuration tuple.
 */
#define MSG_IMU_1                                   0x721, 0, 8

/**
 * Message IMU_1 id.
 */
#define ID_IMU_1                                    0x721

/**
 * Message IMU_1 extended id bit.
 */
#define EXT_IMU_1                                   0

/**
 * Message IMU_1 Data Length Count.
 */
#define DLC_IMU_1                                   8

/**
 * Message IMU_1 cycle time.
 */
#define CYCLE_IMU_1                                 0

/**
 * Message IMU_1 fast cycle time.
 */
#define FAST_IMU_1                                  0

/**
 * Initialise message IMU_1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_IMU_1(buf) { \
	INITSIG_IMU_1_Accel_Y(buf); \
	INITSIG_IMU_1_Accel_X(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_CombineStatus Message CombineStatus (0x710)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_CombineStatus_GpsFlag
 * - \ref SIG_CombineStatus_DmiFlag
 * - \ref SIG_CombineStatus_NavFlag
 *
 * @{
 */

/**
 * Message CombineStatus configuration tuple.
 */
#define MSG_CombineStatus                           0x710, 0, 3

/**
 * Message CombineStatus id.
 */
#define ID_CombineStatus                            0x710

/**
 * Message CombineStatus extended id bit.
 */
#define EXT_CombineStatus                           0

/**
 * Message CombineStatus Data Length Count.
 */
#define DLC_CombineStatus                           3

/**
 * Message CombineStatus cycle time.
 */
#define CYCLE_CombineStatus                         0

/**
 * Message CombineStatus fast cycle time.
 */
#define FAST_CombineStatus                          0

/**
 * Initialise message CombineStatus buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_CombineStatus(buf) { \
	INITSIG_CombineStatus_GpsFlag(buf); \
	INITSIG_CombineStatus_DmiFlag(buf); \
	INITSIG_CombineStatus_NavFlag(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_StdAttitude Message StdAttitude (0x709)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_StdAttitude_RollStd
 * - \ref SIG_StdAttitude_PitchStd
 * - \ref SIG_StdAttitude_YawStd
 *
 * @{
 */

/**
 * Message StdAttitude configuration tuple.
 */
#define MSG_StdAttitude                             0x709, 0, 6

/**
 * Message StdAttitude id.
 */
#define ID_StdAttitude                              0x709

/**
 * Message StdAttitude extended id bit.
 */
#define EXT_StdAttitude                             0

/**
 * Message StdAttitude Data Length Count.
 */
#define DLC_StdAttitude                             6

/**
 * Message StdAttitude cycle time.
 */
#define CYCLE_StdAttitude                           0

/**
 * Message StdAttitude fast cycle time.
 */
#define FAST_StdAttitude                            0

/**
 * Initialise message StdAttitude buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_StdAttitude(buf) { \
	INITSIG_StdAttitude_RollStd(buf); \
	INITSIG_StdAttitude_PitchStd(buf); \
	INITSIG_StdAttitude_YawStd(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_StdVelocity Message StdVelocity (0x708)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_StdVelocity_VelocityUpStd
 * - \ref SIG_StdVelocity_VelocityNorthStd
 * - \ref SIG_StdVelocity_VelocityEastStd
 *
 * @{
 */

/**
 * Message StdVelocity configuration tuple.
 */
#define MSG_StdVelocity                             0x708, 0, 6

/**
 * Message StdVelocity id.
 */
#define ID_StdVelocity                              0x708

/**
 * Message StdVelocity extended id bit.
 */
#define EXT_StdVelocity                             0

/**
 * Message StdVelocity Data Length Count.
 */
#define DLC_StdVelocity                             6

/**
 * Message StdVelocity cycle time.
 */
#define CYCLE_StdVelocity                           0

/**
 * Message StdVelocity fast cycle time.
 */
#define FAST_StdVelocity                            0

/**
 * Initialise message StdVelocity buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_StdVelocity(buf) { \
	INITSIG_StdVelocity_VelocityUpStd(buf); \
	INITSIG_StdVelocity_VelocityNorthStd(buf); \
	INITSIG_StdVelocity_VelocityEastStd(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_StdPosition Message StdPosition (0x707)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_StdPosition_AltitudeStd
 * - \ref SIG_StdPosition_LongitudeStd
 * - \ref SIG_StdPosition_LatitudeStd
 *
 * @{
 */

/**
 * Message StdPosition configuration tuple.
 */
#define MSG_StdPosition                             0x707, 0, 6

/**
 * Message StdPosition id.
 */
#define ID_StdPosition                              0x707

/**
 * Message StdPosition extended id bit.
 */
#define EXT_StdPosition                             0

/**
 * Message StdPosition Data Length Count.
 */
#define DLC_StdPosition                             6

/**
 * Message StdPosition cycle time.
 */
#define CYCLE_StdPosition                           0

/**
 * Message StdPosition fast cycle time.
 */
#define FAST_StdPosition                            0

/**
 * Initialise message StdPosition buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_StdPosition(buf) { \
	INITSIG_StdPosition_AltitudeStd(buf); \
	INITSIG_StdPosition_LongitudeStd(buf); \
	INITSIG_StdPosition_LatitudeStd(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_CombineAttitude Message CombineAttitude (0x706)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_CombineAttitude_Roll
 * - \ref SIG_CombineAttitude_Pitch
 * - \ref SIG_CombineAttitude_Yaw
 *
 * @{
 */

/**
 * Message CombineAttitude configuration tuple.
 */
#define MSG_CombineAttitude                         0x706, 0, 8

/**
 * Message CombineAttitude id.
 */
#define ID_CombineAttitude                          0x706

/**
 * Message CombineAttitude extended id bit.
 */
#define EXT_CombineAttitude                         0

/**
 * Message CombineAttitude Data Length Count.
 */
#define DLC_CombineAttitude                         8

/**
 * Message CombineAttitude cycle time.
 */
#define CYCLE_CombineAttitude                       0

/**
 * Message CombineAttitude fast cycle time.
 */
#define FAST_CombineAttitude                        0

/**
 * Initialise message CombineAttitude buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_CombineAttitude(buf) { \
	INITSIG_CombineAttitude_Roll(buf); \
	INITSIG_CombineAttitude_Pitch(buf); \
	INITSIG_CombineAttitude_Yaw(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_CombineVelocity Message CombineVelocity (0x705)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_CombineVelocity_VelocityHorizon
 * - \ref SIG_CombineVelocity_VelocityUp
 * - \ref SIG_CombineVelocity_VelocityNorth
 * - \ref SIG_CombineVelocity_VelocityEast
 *
 * @{
 */

/**
 * Message CombineVelocity configuration tuple.
 */
#define MSG_CombineVelocity                         0x705, 0, 8

/**
 * Message CombineVelocity id.
 */
#define ID_CombineVelocity                          0x705

/**
 * Message CombineVelocity extended id bit.
 */
#define EXT_CombineVelocity                         0

/**
 * Message CombineVelocity Data Length Count.
 */
#define DLC_CombineVelocity                         8

/**
 * Message CombineVelocity cycle time.
 */
#define CYCLE_CombineVelocity                       0

/**
 * Message CombineVelocity fast cycle time.
 */
#define FAST_CombineVelocity                        0

/**
 * Initialise message CombineVelocity buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_CombineVelocity(buf) { \
	INITSIG_CombineVelocity_VelocityHorizon(buf); \
	INITSIG_CombineVelocity_VelocityUp(buf); \
	INITSIG_CombineVelocity_VelocityNorth(buf); \
	INITSIG_CombineVelocity_VelocityEast(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_CombineAltitude Message CombineAltitude (0x704)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_CombineAltitude_AltitudeUndulation
 * - \ref SIG_CombineAltitude_Altitude
 *
 * @{
 */

/**
 * Message CombineAltitude configuration tuple.
 */
#define MSG_CombineAltitude                         0x704, 0, 8

/**
 * Message CombineAltitude id.
 */
#define ID_CombineAltitude                          0x704

/**
 * Message CombineAltitude extended id bit.
 */
#define EXT_CombineAltitude                         0

/**
 * Message CombineAltitude Data Length Count.
 */
#define DLC_CombineAltitude                         8

/**
 * Message CombineAltitude cycle time.
 */
#define CYCLE_CombineAltitude                       0

/**
 * Message CombineAltitude fast cycle time.
 */
#define FAST_CombineAltitude                        0

/**
 * Initialise message CombineAltitude buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_CombineAltitude(buf) { \
	INITSIG_CombineAltitude_AltitudeUndulation(buf); \
	INITSIG_CombineAltitude_Altitude(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_CombinePosition Message CombinePosition (0x703)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_CombinePosition_Longitude
 * - \ref SIG_CombinePosition_Latitude
 *
 * @{
 */

/**
 * Message CombinePosition configuration tuple.
 */
#define MSG_CombinePosition                         0x703, 0, 8

/**
 * Message CombinePosition id.
 */
#define ID_CombinePosition                          0x703

/**
 * Message CombinePosition extended id bit.
 */
#define EXT_CombinePosition                         0

/**
 * Message CombinePosition Data Length Count.
 */
#define DLC_CombinePosition                         8

/**
 * Message CombinePosition cycle time.
 */
#define CYCLE_CombinePosition                       0

/**
 * Message CombinePosition fast cycle time.
 */
#define FAST_CombinePosition                        0

/**
 * Initialise message CombinePosition buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_CombinePosition(buf) { \
	INITSIG_CombinePosition_Longitude(buf); \
	INITSIG_CombinePosition_Latitude(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_CombineUtcTime Message CombineUtcTime (0x702)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_CombineUtcTime_UtcMilSecond
 * - \ref SIG_CombineUtcTime_UtcSecond
 * - \ref SIG_CombineUtcTime_UtcMinute
 * - \ref SIG_CombineUtcTime_UtcHour
 * - \ref SIG_CombineUtcTime_UtcDate
 * - \ref SIG_CombineUtcTime_UtcMonth
 * - \ref SIG_CombineUtcTime_UtcYear
 *
 * @{
 */

/**
 * Message CombineUtcTime configuration tuple.
 */
#define MSG_CombineUtcTime                          0x702, 0, 8

/**
 * Message CombineUtcTime id.
 */
#define ID_CombineUtcTime                           0x702

/**
 * Message CombineUtcTime extended id bit.
 */
#define EXT_CombineUtcTime                          0

/**
 * Message CombineUtcTime Data Length Count.
 */
#define DLC_CombineUtcTime                          8

/**
 * Message CombineUtcTime cycle time.
 */
#define CYCLE_CombineUtcTime                        0

/**
 * Message CombineUtcTime fast cycle time.
 */
#define FAST_CombineUtcTime                         0

/**
 * Initialise message CombineUtcTime buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_CombineUtcTime(buf) { \
	INITSIG_CombineUtcTime_UtcMilSecond(buf); \
	INITSIG_CombineUtcTime_UtcSecond(buf); \
	INITSIG_CombineUtcTime_UtcMinute(buf); \
	INITSIG_CombineUtcTime_UtcHour(buf); \
	INITSIG_CombineUtcTime_UtcDate(buf); \
	INITSIG_CombineUtcTime_UtcMonth(buf); \
	INITSIG_CombineUtcTime_UtcYear(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_CombineGpsTime Message CombineGpsTime (0x701)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_CombineGpsTime_GpsSecond
 * - \ref SIG_CombineGpsTime_GpsWeek
 *
 * @{
 */

/**
 * Message CombineGpsTime configuration tuple.
 */
#define MSG_CombineGpsTime                          0x701, 0, 8

/**
 * Message CombineGpsTime id.
 */
#define ID_CombineGpsTime                           0x701

/**
 * Message CombineGpsTime extended id bit.
 */
#define EXT_CombineGpsTime                          0

/**
 * Message CombineGpsTime Data Length Count.
 */
#define DLC_CombineGpsTime                          8

/**
 * Message CombineGpsTime cycle time.
 */
#define CYCLE_CombineGpsTime                        0

/**
 * Message CombineGpsTime fast cycle time.
 */
#define FAST_CombineGpsTime                         0

/**
 * Initialise message CombineGpsTime buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_CombineGpsTime(buf) { \
	INITSIG_CombineGpsTime_GpsSecond(buf); \
	INITSIG_CombineGpsTime_GpsWeek(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_Speed_NAV_Speed_Vh Signal NAV_Speed_Vh of Message NAV_Speed (0x40b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_Speed
 * @{
 */

/**
 * Signal NAV_Speed_Vh configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_Speed_NAV_Speed_Vh and \ref GET_NAV_Speed_NAV_Speed_Vh instead.
 */
#define SIG_NAV_Speed_NAV_Speed_Vh                  0, 1, 48, 16

/**
 * Signal NAV_Speed_Vh setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_Speed_NAV_Speed_Vh or \ref INIT_NAV_Speed instead.
 */
#define SETUP_NAV_Speed_NAV_Speed_Vh                0, 1, 48, 16, 0

/**
 * Get signal NAV_Speed_Vh from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_Speed_NAV_Speed_Vh(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 8) \
)

/**
 * Set signal NAV_Speed_Vh in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_Speed_NAV_Speed_Vh(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal NAV_Speed_Vh in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_Speed_NAV_Speed_Vh(buf) \
	SET_NAV_Speed_NAV_Speed_Vh(buf, 0)

/**
 * Signal NAV_Speed_Vh value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_Speed_NAV_Speed_Vh(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal NAV_Speed_Vh raw initial value.
 */
#define START_NAV_Speed_NAV_Speed_Vh                0

/**
 * Signal NAV_Speed_Vh raw minimum value.
 */
#define MIN_NAV_Speed_NAV_Speed_Vh                  0

/**
 * Signal NAV_Speed_Vh raw maximum value.
 */
#define MAX_NAV_Speed_NAV_Speed_Vh                  0

/**
 * Signal NAV_Speed_Vh raw offset value.
 */
#define OFF_NAV_Speed_NAV_Speed_Vh                  0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_Speed_NAV_Speed_Vu Signal NAV_Speed_Vu of Message NAV_Speed (0x40b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_Speed
 * @{
 */

/**
 * Signal NAV_Speed_Vu configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_Speed_NAV_Speed_Vu and \ref GET_NAV_Speed_NAV_Speed_Vu instead.
 */
#define SIG_NAV_Speed_NAV_Speed_Vu                  0, 1, 32, 16

/**
 * Signal NAV_Speed_Vu setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_Speed_NAV_Speed_Vu or \ref INIT_NAV_Speed instead.
 */
#define SETUP_NAV_Speed_NAV_Speed_Vu                0, 1, 32, 16, 0

/**
 * Get signal NAV_Speed_Vu from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_Speed_NAV_Speed_Vu(buf) (0 \
	| (int16_t)((buf[5] << 8) + (buf[4] << 0)) \
)

/**
 * Set signal NAV_Speed_Vu in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_Speed_NAV_Speed_Vu(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal NAV_Speed_Vu in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_Speed_NAV_Speed_Vu(buf) \
	SET_NAV_Speed_NAV_Speed_Vu(buf, 0)

/**
 * Signal NAV_Speed_Vu value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_Speed_NAV_Speed_Vu(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal NAV_Speed_Vu raw initial value.
 */
#define START_NAV_Speed_NAV_Speed_Vu                0

/**
 * Signal NAV_Speed_Vu raw minimum value.
 */
#define MIN_NAV_Speed_NAV_Speed_Vu                  0

/**
 * Signal NAV_Speed_Vu raw maximum value.
 */
#define MAX_NAV_Speed_NAV_Speed_Vu                  0

/**
 * Signal NAV_Speed_Vu raw offset value.
 */
#define OFF_NAV_Speed_NAV_Speed_Vu                  0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_Speed_NAV_Speed_Vn Signal NAV_Speed_Vn of Message NAV_Speed (0x40b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_Speed
 * @{
 */

/**
 * Signal NAV_Speed_Vn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_Speed_NAV_Speed_Vn and \ref GET_NAV_Speed_NAV_Speed_Vn instead.
 */
#define SIG_NAV_Speed_NAV_Speed_Vn                  0, 1, 16, 16

/**
 * Signal NAV_Speed_Vn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_Speed_NAV_Speed_Vn or \ref INIT_NAV_Speed instead.
 */
#define SETUP_NAV_Speed_NAV_Speed_Vn                0, 1, 16, 16, 0

/**
 * Get signal NAV_Speed_Vn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_Speed_NAV_Speed_Vn(buf) (0 \
	| (int16_t)((buf[3] << 8) + (buf[2] << 0)) \
)

/**
 * Set signal NAV_Speed_Vn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_Speed_NAV_Speed_Vn(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal NAV_Speed_Vn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_Speed_NAV_Speed_Vn(buf) \
	SET_NAV_Speed_NAV_Speed_Vn(buf, 0)

/**
 * Signal NAV_Speed_Vn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_Speed_NAV_Speed_Vn(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal NAV_Speed_Vn raw initial value.
 */
#define START_NAV_Speed_NAV_Speed_Vn                0

/**
 * Signal NAV_Speed_Vn raw minimum value.
 */
#define MIN_NAV_Speed_NAV_Speed_Vn                  0

/**
 * Signal NAV_Speed_Vn raw maximum value.
 */
#define MAX_NAV_Speed_NAV_Speed_Vn                  0

/**
 * Signal NAV_Speed_Vn raw offset value.
 */
#define OFF_NAV_Speed_NAV_Speed_Vn                  0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_Speed_NAV_Speed_Ve Signal NAV_Speed_Ve of Message NAV_Speed (0x40b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_Speed
 * @{
 */

/**
 * Signal NAV_Speed_Ve configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_Speed_NAV_Speed_Ve and \ref GET_NAV_Speed_NAV_Speed_Ve instead.
 */
#define SIG_NAV_Speed_NAV_Speed_Ve                  0, 1, 0, 16

/**
 * Signal NAV_Speed_Ve setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_Speed_NAV_Speed_Ve or \ref INIT_NAV_Speed instead.
 */
#define SETUP_NAV_Speed_NAV_Speed_Ve                0, 1, 0, 16, 0

/**
 * Get signal NAV_Speed_Ve from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_Speed_NAV_Speed_Ve(buf) (0 \
	| (int16_t)((buf[1] << 8) + (buf[0] << 0)) \
)

/**
 * Set signal NAV_Speed_Ve in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_Speed_NAV_Speed_Ve(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal NAV_Speed_Ve in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_Speed_NAV_Speed_Ve(buf) \
	SET_NAV_Speed_NAV_Speed_Ve(buf, 0)

/**
 * Signal NAV_Speed_Ve value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_Speed_NAV_Speed_Ve(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal NAV_Speed_Ve raw initial value.
 */
#define START_NAV_Speed_NAV_Speed_Ve                0

/**
 * Signal NAV_Speed_Ve raw minimum value.
 */
#define MIN_NAV_Speed_NAV_Speed_Ve                  0

/**
 * Signal NAV_Speed_Ve raw maximum value.
 */
#define MAX_NAV_Speed_NAV_Speed_Ve                  0

/**
 * Signal NAV_Speed_Ve raw offset value.
 */
#define OFF_NAV_Speed_NAV_Speed_Ve                  0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_POS_AltFlag_NAV_Flag Signal NAV_Flag of Message NAV_POS_AltFlag (0x30b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_POS_AltFlag
 * @{
 */

/**
 * Signal NAV_Flag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_POS_AltFlag_NAV_Flag and \ref GET_NAV_POS_AltFlag_NAV_Flag instead.
 */
#define SIG_NAV_POS_AltFlag_NAV_Flag                0, 0, 32, 8

/**
 * Signal NAV_Flag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_POS_AltFlag_NAV_Flag or \ref INIT_NAV_POS_AltFlag instead.
 */
#define SETUP_NAV_POS_AltFlag_NAV_Flag              0, 0, 32, 8, 0

/**
 * Get signal NAV_Flag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_POS_AltFlag_NAV_Flag(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal NAV_Flag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_POS_AltFlag_NAV_Flag(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal NAV_Flag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_POS_AltFlag_NAV_Flag(buf) \
	SET_NAV_POS_AltFlag_NAV_Flag(buf, 0)

/**
 * Signal NAV_Flag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_POS_AltFlag_NAV_Flag(x, fmt) \
	((x) * fmt)

/**
 * Signal NAV_Flag raw initial value.
 */
#define START_NAV_POS_AltFlag_NAV_Flag              0

/**
 * Signal NAV_Flag raw minimum value.
 */
#define MIN_NAV_POS_AltFlag_NAV_Flag                0

/**
 * Signal NAV_Flag raw maximum value.
 */
#define MAX_NAV_POS_AltFlag_NAV_Flag                0

/**
 * Signal NAV_Flag raw offset value.
 */
#define OFF_NAV_POS_AltFlag_NAV_Flag                0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_POS_AltFlag_NAV_POS_Altitude Signal NAV_POS_Altitude of Message NAV_POS_AltFlag (0x30b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_POS_AltFlag
 * @{
 */

/**
 * Signal NAV_POS_Altitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_POS_AltFlag_NAV_POS_Altitude and \ref GET_NAV_POS_AltFlag_NAV_POS_Altitude instead.
 */
#define SIG_NAV_POS_AltFlag_NAV_POS_Altitude        0, 1, 0, 32

/**
 * Signal NAV_POS_Altitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_POS_AltFlag_NAV_POS_Altitude or \ref INIT_NAV_POS_AltFlag instead.
 */
#define SETUP_NAV_POS_AltFlag_NAV_POS_Altitude      0, 1, 0, 32, 0

/**
 * Get signal NAV_POS_Altitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_POS_AltFlag_NAV_POS_Altitude(buf) (0 \
	| (int32_t)((buf[3] << 24) + (buf[2] << 16) + (buf[1] << 8) + (buf[0] << 0)) \
)

/**
 * Set signal NAV_POS_Altitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_POS_AltFlag_NAV_POS_Altitude(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal NAV_POS_Altitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_POS_AltFlag_NAV_POS_Altitude(buf) \
	SET_NAV_POS_AltFlag_NAV_POS_Altitude(buf, 0)

/**
 * Signal NAV_POS_Altitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_POS_AltFlag_NAV_POS_Altitude(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal NAV_POS_Altitude raw initial value.
 */
#define START_NAV_POS_AltFlag_NAV_POS_Altitude      0

/**
 * Signal NAV_POS_Altitude raw minimum value.
 */
#define MIN_NAV_POS_AltFlag_NAV_POS_Altitude        0

/**
 * Signal NAV_POS_Altitude raw maximum value.
 */
#define MAX_NAV_POS_AltFlag_NAV_POS_Altitude        0

/**
 * Signal NAV_POS_Altitude raw offset value.
 */
#define OFF_NAV_POS_AltFlag_NAV_POS_Altitude        0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_POS_LatLon_NAV_POS_Longitude Signal NAV_POS_Longitude of Message NAV_POS_LatLon (0x20b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_POS_LatLon
 * @{
 */

/**
 * Signal NAV_POS_Longitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_POS_LatLon_NAV_POS_Longitude and \ref GET_NAV_POS_LatLon_NAV_POS_Longitude instead.
 */
#define SIG_NAV_POS_LatLon_NAV_POS_Longitude        0, 1, 32, 32

/**
 * Signal NAV_POS_Longitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_POS_LatLon_NAV_POS_Longitude or \ref INIT_NAV_POS_LatLon instead.
 */
#define SETUP_NAV_POS_LatLon_NAV_POS_Longitude      0, 1, 32, 32, 0

/**
 * Get signal NAV_POS_Longitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_POS_LatLon_NAV_POS_Longitude(buf) (0 \
	| (int32_t)((buf[7] << 24) + (buf[6] << 16) + (buf[5] << 8) + (buf[4] << 0)) \
)

/**
 * Set signal NAV_POS_Longitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_POS_LatLon_NAV_POS_Longitude(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal NAV_POS_Longitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_POS_LatLon_NAV_POS_Longitude(buf) \
	SET_NAV_POS_LatLon_NAV_POS_Longitude(buf, 0)

/**
 * Signal NAV_POS_Longitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_POS_LatLon_NAV_POS_Longitude(x, fmt) \
	((x) * fmt / 10000000)

/**
 * Signal NAV_POS_Longitude raw initial value.
 */
#define START_NAV_POS_LatLon_NAV_POS_Longitude      0

/**
 * Signal NAV_POS_Longitude raw minimum value.
 */
#define MIN_NAV_POS_LatLon_NAV_POS_Longitude        0

/**
 * Signal NAV_POS_Longitude raw maximum value.
 */
#define MAX_NAV_POS_LatLon_NAV_POS_Longitude        0

/**
 * Signal NAV_POS_Longitude raw offset value.
 */
#define OFF_NAV_POS_LatLon_NAV_POS_Longitude        0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_POS_LatLon_NAV_POS_Latitude Signal NAV_POS_Latitude of Message NAV_POS_LatLon (0x20b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_POS_LatLon
 * @{
 */

/**
 * Signal NAV_POS_Latitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_POS_LatLon_NAV_POS_Latitude and \ref GET_NAV_POS_LatLon_NAV_POS_Latitude instead.
 */
#define SIG_NAV_POS_LatLon_NAV_POS_Latitude         0, 1, 0, 32

/**
 * Signal NAV_POS_Latitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_POS_LatLon_NAV_POS_Latitude or \ref INIT_NAV_POS_LatLon instead.
 */
#define SETUP_NAV_POS_LatLon_NAV_POS_Latitude       0, 1, 0, 32, 0

/**
 * Get signal NAV_POS_Latitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_POS_LatLon_NAV_POS_Latitude(buf) (0 \
	| (int32_t)((buf[3] << 24) + (buf[2] << 16) + (buf[1] << 8) + (buf[0] << 0)) \
)

/**
 * Set signal NAV_POS_Latitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_POS_LatLon_NAV_POS_Latitude(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal NAV_POS_Latitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_POS_LatLon_NAV_POS_Latitude(buf) \
	SET_NAV_POS_LatLon_NAV_POS_Latitude(buf, 0)

/**
 * Signal NAV_POS_Latitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_POS_LatLon_NAV_POS_Latitude(x, fmt) \
	((x) * fmt / 10000000)

/**
 * Signal NAV_POS_Latitude raw initial value.
 */
#define START_NAV_POS_LatLon_NAV_POS_Latitude       0

/**
 * Signal NAV_POS_Latitude raw minimum value.
 */
#define MIN_NAV_POS_LatLon_NAV_POS_Latitude         0

/**
 * Signal NAV_POS_Latitude raw maximum value.
 */
#define MAX_NAV_POS_LatLon_NAV_POS_Latitude         0

/**
 * Signal NAV_POS_Latitude raw offset value.
 */
#define OFF_NAV_POS_LatLon_NAV_POS_Latitude         0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_ATTI_NAV_ATTI_HeadP Signal NAV_ATTI_HeadP of Message NAV_ATTI (0x10b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_ATTI
 * @{
 */

/**
 * Signal NAV_ATTI_HeadP configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_ATTI_NAV_ATTI_HeadP and \ref GET_NAV_ATTI_NAV_ATTI_HeadP instead.
 */
#define SIG_NAV_ATTI_NAV_ATTI_HeadP                 0, 1, 48, 16

/**
 * Signal NAV_ATTI_HeadP setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_ATTI_NAV_ATTI_HeadP or \ref INIT_NAV_ATTI instead.
 */
#define SETUP_NAV_ATTI_NAV_ATTI_HeadP               0, 1, 48, 16, 0

/**
 * Get signal NAV_ATTI_HeadP from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_ATTI_NAV_ATTI_HeadP(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 8) \
)

/**
 * Set signal NAV_ATTI_HeadP in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_ATTI_NAV_ATTI_HeadP(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal NAV_ATTI_HeadP in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_ATTI_NAV_ATTI_HeadP(buf) \
	SET_NAV_ATTI_NAV_ATTI_HeadP(buf, 0)

/**
 * Signal NAV_ATTI_HeadP value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_ATTI_NAV_ATTI_HeadP(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal NAV_ATTI_HeadP raw initial value.
 */
#define START_NAV_ATTI_NAV_ATTI_HeadP               0

/**
 * Signal NAV_ATTI_HeadP raw minimum value.
 */
#define MIN_NAV_ATTI_NAV_ATTI_HeadP                 0

/**
 * Signal NAV_ATTI_HeadP raw maximum value.
 */
#define MAX_NAV_ATTI_NAV_ATTI_HeadP                 0

/**
 * Signal NAV_ATTI_HeadP raw offset value.
 */
#define OFF_NAV_ATTI_NAV_ATTI_HeadP                 0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_ATTI_NAV_ATTI_Roll Signal NAV_ATTI_Roll of Message NAV_ATTI (0x10b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_ATTI
 * @{
 */

/**
 * Signal NAV_ATTI_Roll configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_ATTI_NAV_ATTI_Roll and \ref GET_NAV_ATTI_NAV_ATTI_Roll instead.
 */
#define SIG_NAV_ATTI_NAV_ATTI_Roll                  0, 1, 32, 16

/**
 * Signal NAV_ATTI_Roll setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_ATTI_NAV_ATTI_Roll or \ref INIT_NAV_ATTI instead.
 */
#define SETUP_NAV_ATTI_NAV_ATTI_Roll                0, 1, 32, 16, 0

/**
 * Get signal NAV_ATTI_Roll from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_ATTI_NAV_ATTI_Roll(buf) (0 \
	| (int16_t)((buf[5] << 8) + (buf[4] >> 0)) \
)

/**
 * Set signal NAV_ATTI_Roll in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_ATTI_NAV_ATTI_Roll(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal NAV_ATTI_Roll in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_ATTI_NAV_ATTI_Roll(buf) \
	SET_NAV_ATTI_NAV_ATTI_Roll(buf, 0)

/**
 * Signal NAV_ATTI_Roll value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_ATTI_NAV_ATTI_Roll(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal NAV_ATTI_Roll raw initial value.
 */
#define START_NAV_ATTI_NAV_ATTI_Roll                0

/**
 * Signal NAV_ATTI_Roll raw minimum value.
 */
#define MIN_NAV_ATTI_NAV_ATTI_Roll                  0

/**
 * Signal NAV_ATTI_Roll raw maximum value.
 */
#define MAX_NAV_ATTI_NAV_ATTI_Roll                  0

/**
 * Signal NAV_ATTI_Roll raw offset value.
 */
#define OFF_NAV_ATTI_NAV_ATTI_Roll                  0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_ATTI_NAV_ATTI_Pitch Signal NAV_ATTI_Pitch of Message NAV_ATTI (0x10b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_ATTI
 * @{
 */

/**
 * Signal NAV_ATTI_Pitch configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_ATTI_NAV_ATTI_Pitch and \ref GET_NAV_ATTI_NAV_ATTI_Pitch instead.
 */
#define SIG_NAV_ATTI_NAV_ATTI_Pitch                 0, 1, 16, 16

/**
 * Signal NAV_ATTI_Pitch setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_ATTI_NAV_ATTI_Pitch or \ref INIT_NAV_ATTI instead.
 */
#define SETUP_NAV_ATTI_NAV_ATTI_Pitch               0, 1, 16, 16, 0

/**
 * Get signal NAV_ATTI_Pitch from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_ATTI_NAV_ATTI_Pitch(buf) (0 \
	| (int16_t)((buf[3] << 8) + (buf[2] << 0)) \
)

/**
 * Set signal NAV_ATTI_Pitch in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_ATTI_NAV_ATTI_Pitch(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal NAV_ATTI_Pitch in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_ATTI_NAV_ATTI_Pitch(buf) \
	SET_NAV_ATTI_NAV_ATTI_Pitch(buf, 0)

/**
 * Signal NAV_ATTI_Pitch value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_ATTI_NAV_ATTI_Pitch(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal NAV_ATTI_Pitch raw initial value.
 */
#define START_NAV_ATTI_NAV_ATTI_Pitch               0

/**
 * Signal NAV_ATTI_Pitch raw minimum value.
 */
#define MIN_NAV_ATTI_NAV_ATTI_Pitch                 0

/**
 * Signal NAV_ATTI_Pitch raw maximum value.
 */
#define MAX_NAV_ATTI_NAV_ATTI_Pitch                 0

/**
 * Signal NAV_ATTI_Pitch raw offset value.
 */
#define OFF_NAV_ATTI_NAV_ATTI_Pitch                 0

/**
 * @}
 */

/**
 * @defgroup SIG_NAV_ATTI_NAV_ATTI_Heading Signal NAV_ATTI_Heading of Message NAV_ATTI (0x10b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_NAV_ATTI
 * @{
 */

/**
 * Signal NAV_ATTI_Heading configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_NAV_ATTI_NAV_ATTI_Heading and \ref GET_NAV_ATTI_NAV_ATTI_Heading instead.
 */
#define SIG_NAV_ATTI_NAV_ATTI_Heading               0, 0, 0, 16

/**
 * Signal NAV_ATTI_Heading setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_NAV_ATTI_NAV_ATTI_Heading or \ref INIT_NAV_ATTI instead.
 */
#define SETUP_NAV_ATTI_NAV_ATTI_Heading             0, 0, 0, 16, 0

/**
 * Get signal NAV_ATTI_Heading from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_NAV_ATTI_NAV_ATTI_Heading(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) \
)

/**
 * Set signal NAV_ATTI_Heading in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_NAV_ATTI_NAV_ATTI_Heading(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal NAV_ATTI_Heading in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_NAV_ATTI_NAV_ATTI_Heading(buf) \
	SET_NAV_ATTI_NAV_ATTI_Heading(buf, 0)

/**
 * Signal NAV_ATTI_Heading value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_NAV_ATTI_NAV_ATTI_Heading(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal NAV_ATTI_Heading raw initial value.
 */
#define START_NAV_ATTI_NAV_ATTI_Heading             0

/**
 * Signal NAV_ATTI_Heading raw minimum value.
 */
#define MIN_NAV_ATTI_NAV_ATTI_Heading               0

/**
 * Signal NAV_ATTI_Heading raw maximum value.
 */
#define MAX_NAV_ATTI_NAV_ATTI_Heading               0

/**
 * Signal NAV_ATTI_Heading raw offset value.
 */
#define OFF_NAV_ATTI_NAV_ATTI_Heading               0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_AcceGyro_Z_IMU_GyroZ Signal IMU_GyroZ of Message IMU_AcceGyro_Z (0x70b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_AcceGyro_Z
 * @{
 */

/**
 * Signal IMU_GyroZ configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_AcceGyro_Z_IMU_GyroZ and \ref GET_IMU_AcceGyro_Z_IMU_GyroZ instead.
 */
#define SIG_IMU_AcceGyro_Z_IMU_GyroZ                0, 1, 0, 32

/**
 * Signal IMU_GyroZ setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_AcceGyro_Z_IMU_GyroZ or \ref INIT_IMU_AcceGyro_Z instead.
 */
#define SETUP_IMU_AcceGyro_Z_IMU_GyroZ              0, 1, 0, 32, 0

/**
 * Get signal IMU_GyroZ from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_AcceGyro_Z_IMU_GyroZ(buf) (0 \
	| (int32_t)((buf[3] << 24) + (buf[2] << 16) + (buf[1] << 8) + (buf[0] << 0)) \
)

/**
 * Set signal IMU_GyroZ in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_AcceGyro_Z_IMU_GyroZ(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal IMU_GyroZ in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_AcceGyro_Z_IMU_GyroZ(buf) \
	SET_IMU_AcceGyro_Z_IMU_GyroZ(buf, 0)

/**
 * Signal IMU_GyroZ value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_AcceGyro_Z_IMU_GyroZ(x, fmt) \
	((x) * fmt / 100000)

/**
 * Signal IMU_GyroZ raw initial value.
 */
#define START_IMU_AcceGyro_Z_IMU_GyroZ              0

/**
 * Signal IMU_GyroZ raw minimum value.
 */
#define MIN_IMU_AcceGyro_Z_IMU_GyroZ                0

/**
 * Signal IMU_GyroZ raw maximum value.
 */
#define MAX_IMU_AcceGyro_Z_IMU_GyroZ                0

/**
 * Signal IMU_GyroZ raw offset value.
 */
#define OFF_IMU_AcceGyro_Z_IMU_GyroZ                0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_AcceGyro_Z_IMU_AcceZ Signal IMU_AcceZ of Message IMU_AcceGyro_Z (0x70b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_AcceGyro_Z
 * @{
 */

/**
 * Signal IMU_AcceZ configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_AcceGyro_Z_IMU_AcceZ and \ref GET_IMU_AcceGyro_Z_IMU_AcceZ instead.
 */
#define SIG_IMU_AcceGyro_Z_IMU_AcceZ                0, 1, 32, 32

/**
 * Signal IMU_AcceZ setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_AcceGyro_Z_IMU_AcceZ or \ref INIT_IMU_AcceGyro_Z instead.
 */
#define SETUP_IMU_AcceGyro_Z_IMU_AcceZ              0, 1, 32, 32, 0

/**
 * Get signal IMU_AcceZ from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_AcceGyro_Z_IMU_AcceZ(buf) (0 \
	| (int32_t)((buf[7] << 24) + (buf[6] << 16) + (buf[5] << 8) + (buf[4] << 0)) \
)

/**
 * Set signal IMU_AcceZ in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_AcceGyro_Z_IMU_AcceZ(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal IMU_AcceZ in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_AcceGyro_Z_IMU_AcceZ(buf) \
	SET_IMU_AcceGyro_Z_IMU_AcceZ(buf, 0)

/**
 * Signal IMU_AcceZ value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_AcceGyro_Z_IMU_AcceZ(x, fmt) \
	((x) * fmt / 100000)

/**
 * Signal IMU_AcceZ raw initial value.
 */
#define START_IMU_AcceGyro_Z_IMU_AcceZ              0

/**
 * Signal IMU_AcceZ raw minimum value.
 */
#define MIN_IMU_AcceGyro_Z_IMU_AcceZ                0

/**
 * Signal IMU_AcceZ raw maximum value.
 */
#define MAX_IMU_AcceGyro_Z_IMU_AcceZ                0

/**
 * Signal IMU_AcceZ raw offset value.
 */
#define OFF_IMU_AcceGyro_Z_IMU_AcceZ                0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_GYRO_XY_IMU_GyroY Signal IMU_GyroY of Message IMU_GYRO_XY (0x60b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_GYRO_XY
 * @{
 */

/**
 * Signal IMU_GyroY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_GYRO_XY_IMU_GyroY and \ref GET_IMU_GYRO_XY_IMU_GyroY instead.
 */
#define SIG_IMU_GYRO_XY_IMU_GyroY                   0, 1, 32, 32

/**
 * Signal IMU_GyroY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_GYRO_XY_IMU_GyroY or \ref INIT_IMU_GYRO_XY instead.
 */
#define SETUP_IMU_GYRO_XY_IMU_GyroY                 0, 1, 32, 32, 0

/**
 * Get signal IMU_GyroY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_GYRO_XY_IMU_GyroY(buf) (0 \
	| (int32_t)((buf[7] << 24) + (buf[6] << 16) + (buf[5] << 8) + (buf[4] << 0)) \
)

/**
 * Set signal IMU_GyroY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_GYRO_XY_IMU_GyroY(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal IMU_GyroY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_GYRO_XY_IMU_GyroY(buf) \
	SET_IMU_GYRO_XY_IMU_GyroY(buf, 0)

/**
 * Signal IMU_GyroY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_GYRO_XY_IMU_GyroY(x, fmt) \
	((x) * fmt / 100000)

/**
 * Signal IMU_GyroY raw initial value.
 */
#define START_IMU_GYRO_XY_IMU_GyroY                 0

/**
 * Signal IMU_GyroY raw minimum value.
 */
#define MIN_IMU_GYRO_XY_IMU_GyroY                   0

/**
 * Signal IMU_GyroY raw maximum value.
 */
#define MAX_IMU_GYRO_XY_IMU_GyroY                   0

/**
 * Signal IMU_GyroY raw offset value.
 */
#define OFF_IMU_GYRO_XY_IMU_GyroY                   0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_GYRO_XY_IMU_GyroX Signal IMU_GyroX of Message IMU_GYRO_XY (0x60b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_GYRO_XY
 * @{
 */

/**
 * Signal IMU_GyroX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_GYRO_XY_IMU_GyroX and \ref GET_IMU_GYRO_XY_IMU_GyroX instead.
 */
#define SIG_IMU_GYRO_XY_IMU_GyroX                   0, 1, 0, 32

/**
 * Signal IMU_GyroX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_GYRO_XY_IMU_GyroX or \ref INIT_IMU_GYRO_XY instead.
 */
#define SETUP_IMU_GYRO_XY_IMU_GyroX                 0, 1, 0, 32, 0

/**
 * Get signal IMU_GyroX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_GYRO_XY_IMU_GyroX(buf) (0 \
	| (int32_t)((buf[3] << 24) + (buf[2] << 16) + (buf[1] << 8) + (buf[0] << 0)) \
)

/**
 * Set signal IMU_GyroX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_GYRO_XY_IMU_GyroX(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal IMU_GyroX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_GYRO_XY_IMU_GyroX(buf) \
	SET_IMU_GYRO_XY_IMU_GyroX(buf, 0)

/**
 * Signal IMU_GyroX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_GYRO_XY_IMU_GyroX(x, fmt) \
	((x) * fmt / 100000)

/**
 * Signal IMU_GyroX raw initial value.
 */
#define START_IMU_GYRO_XY_IMU_GyroX                 0

/**
 * Signal IMU_GyroX raw minimum value.
 */
#define MIN_IMU_GYRO_XY_IMU_GyroX                   0

/**
 * Signal IMU_GyroX raw maximum value.
 */
#define MAX_IMU_GYRO_XY_IMU_GyroX                   0

/**
 * Signal IMU_GyroX raw offset value.
 */
#define OFF_IMU_GYRO_XY_IMU_GyroX                   0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_ACCE_XY_IMU_AcceY Signal IMU_AcceY of Message IMU_ACCE_XY (0x50b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_ACCE_XY
 * @{
 */

/**
 * Signal IMU_AcceY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_ACCE_XY_IMU_AcceY and \ref GET_IMU_ACCE_XY_IMU_AcceY instead.
 */
#define SIG_IMU_ACCE_XY_IMU_AcceY                   0, 1, 32, 32

/**
 * Signal IMU_AcceY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_ACCE_XY_IMU_AcceY or \ref INIT_IMU_ACCE_XY instead.
 */
#define SETUP_IMU_ACCE_XY_IMU_AcceY                 0, 1, 32, 32, 0

/**
 * Get signal IMU_AcceY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_ACCE_XY_IMU_AcceY(buf) (0 \
	| (int32_t)((buf[7] << 24) + (buf[6] << 16) + (buf[5] << 8) + (buf[4] << 0)) \
)

/**
 * Set signal IMU_AcceY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_ACCE_XY_IMU_AcceY(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal IMU_AcceY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_ACCE_XY_IMU_AcceY(buf) \
	SET_IMU_ACCE_XY_IMU_AcceY(buf, 0)

/**
 * Signal IMU_AcceY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_ACCE_XY_IMU_AcceY(x, fmt) \
	((x) * fmt / 100000)

/**
 * Signal IMU_AcceY raw initial value.
 */
#define START_IMU_ACCE_XY_IMU_AcceY                 0

/**
 * Signal IMU_AcceY raw minimum value.
 */
#define MIN_IMU_ACCE_XY_IMU_AcceY                   0

/**
 * Signal IMU_AcceY raw maximum value.
 */
#define MAX_IMU_ACCE_XY_IMU_AcceY                   0

/**
 * Signal IMU_AcceY raw offset value.
 */
#define OFF_IMU_ACCE_XY_IMU_AcceY                   0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_ACCE_XY_IMU_AcceX Signal IMU_AcceX of Message IMU_ACCE_XY (0x50b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_ACCE_XY
 * @{
 */

/**
 * Signal IMU_AcceX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_ACCE_XY_IMU_AcceX and \ref GET_IMU_ACCE_XY_IMU_AcceX instead.
 */
#define SIG_IMU_ACCE_XY_IMU_AcceX                   0, 1, 0, 32

/**
 * Signal IMU_AcceX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_ACCE_XY_IMU_AcceX or \ref INIT_IMU_ACCE_XY instead.
 */
#define SETUP_IMU_ACCE_XY_IMU_AcceX                 0, 1, 0, 32, 0

/**
 * Get signal IMU_AcceX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_ACCE_XY_IMU_AcceX(buf) (0 \
	| (int32_t)((buf[3] << 24) + (buf[2] << 16) + (buf[1] << 8) + (buf[0] << 0)) \
)

/**
 * Set signal IMU_AcceX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_ACCE_XY_IMU_AcceX(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal IMU_AcceX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_ACCE_XY_IMU_AcceX(buf) \
	SET_IMU_ACCE_XY_IMU_AcceX(buf, 0)

/**
 * Signal IMU_AcceX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_ACCE_XY_IMU_AcceX(x, fmt) \
	((x) * fmt / 100000)

/**
 * Signal IMU_AcceX raw initial value.
 */
#define START_IMU_ACCE_XY_IMU_AcceX                 0

/**
 * Signal IMU_AcceX raw minimum value.
 */
#define MIN_IMU_ACCE_XY_IMU_AcceX                   0

/**
 * Signal IMU_AcceX raw maximum value.
 */
#define MAX_IMU_ACCE_XY_IMU_AcceX                   0

/**
 * Signal IMU_AcceX raw offset value.
 */
#define OFF_IMU_ACCE_XY_IMU_AcceX                   0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_Time_GPS_Time_Second Signal GPS_Time_Second of Message GPS_Time (0x9b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_Time
 * @{
 */

/**
 * Signal GPS_Time_Second configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_Time_GPS_Time_Second and \ref GET_GPS_Time_GPS_Time_Second instead.
 */
#define SIG_GPS_Time_GPS_Time_Second                0, 0, 16, 32

/**
 * Signal GPS_Time_Second setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_Time_GPS_Time_Second or \ref INIT_GPS_Time instead.
 */
#define SETUP_GPS_Time_GPS_Time_Second              0, 0, 16, 32, 0

/**
 * Get signal GPS_Time_Second from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_Time_GPS_Time_Second(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8) \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 16) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 24) \
)

/**
 * Set signal GPS_Time_Second in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_Time_GPS_Time_Second(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal GPS_Time_Second in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_Time_GPS_Time_Second(buf) \
	SET_GPS_Time_GPS_Time_Second(buf, 0)

/**
 * Signal GPS_Time_Second value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_Time_GPS_Time_Second(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal GPS_Time_Second raw initial value.
 */
#define START_GPS_Time_GPS_Time_Second              0

/**
 * Signal GPS_Time_Second raw minimum value.
 */
#define MIN_GPS_Time_GPS_Time_Second                0

/**
 * Signal GPS_Time_Second raw maximum value.
 */
#define MAX_GPS_Time_GPS_Time_Second                0

/**
 * Signal GPS_Time_Second raw offset value.
 */
#define OFF_GPS_Time_GPS_Time_Second                0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_Time_GPS_Time_Week Signal GPS_Time_Week of Message GPS_Time (0x9b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_Time
 * @{
 */

/**
 * Signal GPS_Time_Week configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_Time_GPS_Time_Week and \ref GET_GPS_Time_GPS_Time_Week instead.
 */
#define SIG_GPS_Time_GPS_Time_Week                  0, 0, 0, 16

/**
 * Signal GPS_Time_Week setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_Time_GPS_Time_Week or \ref INIT_GPS_Time instead.
 */
#define SETUP_GPS_Time_GPS_Time_Week                0, 0, 0, 16, 0

/**
 * Get signal GPS_Time_Week from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_Time_GPS_Time_Week(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) \
)

/**
 * Set signal GPS_Time_Week in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_Time_GPS_Time_Week(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal GPS_Time_Week in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_Time_GPS_Time_Week(buf) \
	SET_GPS_Time_GPS_Time_Week(buf, 0)

/**
 * Signal GPS_Time_Week value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_Time_GPS_Time_Week(x, fmt) \
	((x) * fmt)

/**
 * Signal GPS_Time_Week raw initial value.
 */
#define START_GPS_Time_GPS_Time_Week                0

/**
 * Signal GPS_Time_Week raw minimum value.
 */
#define MIN_GPS_Time_GPS_Time_Week                  0

/**
 * Signal GPS_Time_Week raw maximum value.
 */
#define MAX_GPS_Time_GPS_Time_Week                  0

/**
 * Signal GPS_Time_Week raw offset value.
 */
#define OFF_GPS_Time_GPS_Time_Week                  0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_Speed_GPS_Speed_Vh Signal GPS_Speed_Vh of Message GPS_Speed (0x41b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_Speed
 * @{
 */

/**
 * Signal GPS_Speed_Vh configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_Speed_GPS_Speed_Vh and \ref GET_GPS_Speed_GPS_Speed_Vh instead.
 */
#define SIG_GPS_Speed_GPS_Speed_Vh                  0, 1, 48, 16

/**
 * Signal GPS_Speed_Vh setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_Speed_GPS_Speed_Vh or \ref INIT_GPS_Speed instead.
 */
#define SETUP_GPS_Speed_GPS_Speed_Vh                0, 1, 48, 16, 0

/**
 * Get signal GPS_Speed_Vh from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_Speed_GPS_Speed_Vh(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 8) \
)

/**
 * Set signal GPS_Speed_Vh in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_Speed_GPS_Speed_Vh(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal GPS_Speed_Vh in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_Speed_GPS_Speed_Vh(buf) \
	SET_GPS_Speed_GPS_Speed_Vh(buf, 0)

/**
 * Signal GPS_Speed_Vh value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_Speed_GPS_Speed_Vh(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal GPS_Speed_Vh raw initial value.
 */
#define START_GPS_Speed_GPS_Speed_Vh                0

/**
 * Signal GPS_Speed_Vh raw minimum value.
 */
#define MIN_GPS_Speed_GPS_Speed_Vh                  0

/**
 * Signal GPS_Speed_Vh raw maximum value.
 */
#define MAX_GPS_Speed_GPS_Speed_Vh                  0

/**
 * Signal GPS_Speed_Vh raw offset value.
 */
#define OFF_GPS_Speed_GPS_Speed_Vh                  0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_Speed_GPS_Speed_Vu Signal GPS_Speed_Vu of Message GPS_Speed (0x41b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_Speed
 * @{
 */

/**
 * Signal GPS_Speed_Vu configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_Speed_GPS_Speed_Vu and \ref GET_GPS_Speed_GPS_Speed_Vu instead.
 */
#define SIG_GPS_Speed_GPS_Speed_Vu                  0, 1, 32, 16

/**
 * Signal GPS_Speed_Vu setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_Speed_GPS_Speed_Vu or \ref INIT_GPS_Speed instead.
 */
#define SETUP_GPS_Speed_GPS_Speed_Vu                0, 1, 32, 16, 0

/**
 * Get signal GPS_Speed_Vu from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_Speed_GPS_Speed_Vu(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 8) \
)

/**
 * Set signal GPS_Speed_Vu in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_Speed_GPS_Speed_Vu(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal GPS_Speed_Vu in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_Speed_GPS_Speed_Vu(buf) \
	SET_GPS_Speed_GPS_Speed_Vu(buf, 0)

/**
 * Signal GPS_Speed_Vu value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_Speed_GPS_Speed_Vu(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal GPS_Speed_Vu raw initial value.
 */
#define START_GPS_Speed_GPS_Speed_Vu                0

/**
 * Signal GPS_Speed_Vu raw minimum value.
 */
#define MIN_GPS_Speed_GPS_Speed_Vu                  0

/**
 * Signal GPS_Speed_Vu raw maximum value.
 */
#define MAX_GPS_Speed_GPS_Speed_Vu                  0

/**
 * Signal GPS_Speed_Vu raw offset value.
 */
#define OFF_GPS_Speed_GPS_Speed_Vu                  0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_Speed_GPS_Speed_Vn Signal GPS_Speed_Vn of Message GPS_Speed (0x41b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_Speed
 * @{
 */

/**
 * Signal GPS_Speed_Vn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_Speed_GPS_Speed_Vn and \ref GET_GPS_Speed_GPS_Speed_Vn instead.
 */
#define SIG_GPS_Speed_GPS_Speed_Vn                  0, 1, 16, 16

/**
 * Signal GPS_Speed_Vn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_Speed_GPS_Speed_Vn or \ref INIT_GPS_Speed instead.
 */
#define SETUP_GPS_Speed_GPS_Speed_Vn                0, 1, 16, 16, 0

/**
 * Get signal GPS_Speed_Vn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_Speed_GPS_Speed_Vn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8) \
)

/**
 * Set signal GPS_Speed_Vn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_Speed_GPS_Speed_Vn(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal GPS_Speed_Vn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_Speed_GPS_Speed_Vn(buf) \
	SET_GPS_Speed_GPS_Speed_Vn(buf, 0)

/**
 * Signal GPS_Speed_Vn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_Speed_GPS_Speed_Vn(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal GPS_Speed_Vn raw initial value.
 */
#define START_GPS_Speed_GPS_Speed_Vn                0

/**
 * Signal GPS_Speed_Vn raw minimum value.
 */
#define MIN_GPS_Speed_GPS_Speed_Vn                  0

/**
 * Signal GPS_Speed_Vn raw maximum value.
 */
#define MAX_GPS_Speed_GPS_Speed_Vn                  0

/**
 * Signal GPS_Speed_Vn raw offset value.
 */
#define OFF_GPS_Speed_GPS_Speed_Vn                  0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_Speed_GPS_Speed_Ve Signal GPS_Speed_Ve of Message GPS_Speed (0x41b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_Speed
 * @{
 */

/**
 * Signal GPS_Speed_Ve configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_Speed_GPS_Speed_Ve and \ref GET_GPS_Speed_GPS_Speed_Ve instead.
 */
#define SIG_GPS_Speed_GPS_Speed_Ve                  0, 1, 0, 16

/**
 * Signal GPS_Speed_Ve setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_Speed_GPS_Speed_Ve or \ref INIT_GPS_Speed instead.
 */
#define SETUP_GPS_Speed_GPS_Speed_Ve                0, 1, 0, 16, 0

/**
 * Get signal GPS_Speed_Ve from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_Speed_GPS_Speed_Ve(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) \
)

/**
 * Set signal GPS_Speed_Ve in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_Speed_GPS_Speed_Ve(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal GPS_Speed_Ve in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_Speed_GPS_Speed_Ve(buf) \
	SET_GPS_Speed_GPS_Speed_Ve(buf, 0)

/**
 * Signal GPS_Speed_Ve value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_Speed_GPS_Speed_Ve(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal GPS_Speed_Ve raw initial value.
 */
#define START_GPS_Speed_GPS_Speed_Ve                0

/**
 * Signal GPS_Speed_Ve raw minimum value.
 */
#define MIN_GPS_Speed_GPS_Speed_Ve                  0

/**
 * Signal GPS_Speed_Ve raw maximum value.
 */
#define MAX_GPS_Speed_GPS_Speed_Ve                  0

/**
 * Signal GPS_Speed_Ve raw offset value.
 */
#define OFF_GPS_Speed_GPS_Speed_Ve                  0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_POS_LatLon_GPS_POS_Longitude Signal GPS_POS_Longitude of Message GPS_POS_LatLon (0x21b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_POS_LatLon
 * @{
 */

/**
 * Signal GPS_POS_Longitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_POS_LatLon_GPS_POS_Longitude and \ref GET_GPS_POS_LatLon_GPS_POS_Longitude instead.
 */
#define SIG_GPS_POS_LatLon_GPS_POS_Longitude        0, 1, 32, 32

/**
 * Signal GPS_POS_Longitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_POS_LatLon_GPS_POS_Longitude or \ref INIT_GPS_POS_LatLon instead.
 */
#define SETUP_GPS_POS_LatLon_GPS_POS_Longitude      0, 1, 32, 32, 0

/**
 * Get signal GPS_POS_Longitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_POS_LatLon_GPS_POS_Longitude(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 8) \
	| (uint32_t)(+(uint32_t)((buf[6] >> 0) & 0xff) << 16) \
	| (uint32_t)(+(uint32_t)((buf[7] >> 0) & 0xff) << 24) \
)

/**
 * Set signal GPS_POS_Longitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_POS_LatLon_GPS_POS_Longitude(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal GPS_POS_Longitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_POS_LatLon_GPS_POS_Longitude(buf) \
	SET_GPS_POS_LatLon_GPS_POS_Longitude(buf, 0)

/**
 * Signal GPS_POS_Longitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_POS_LatLon_GPS_POS_Longitude(x, fmt) \
	((x) * fmt / 10000000)

/**
 * Signal GPS_POS_Longitude raw initial value.
 */
#define START_GPS_POS_LatLon_GPS_POS_Longitude      0

/**
 * Signal GPS_POS_Longitude raw minimum value.
 */
#define MIN_GPS_POS_LatLon_GPS_POS_Longitude        0

/**
 * Signal GPS_POS_Longitude raw maximum value.
 */
#define MAX_GPS_POS_LatLon_GPS_POS_Longitude        0

/**
 * Signal GPS_POS_Longitude raw offset value.
 */
#define OFF_GPS_POS_LatLon_GPS_POS_Longitude        0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_POS_LatLon_GPS_POS_Latitude Signal GPS_POS_Latitude of Message GPS_POS_LatLon (0x21b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_POS_LatLon
 * @{
 */

/**
 * Signal GPS_POS_Latitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_POS_LatLon_GPS_POS_Latitude and \ref GET_GPS_POS_LatLon_GPS_POS_Latitude instead.
 */
#define SIG_GPS_POS_LatLon_GPS_POS_Latitude         0, 1, 0, 32

/**
 * Signal GPS_POS_Latitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_POS_LatLon_GPS_POS_Latitude or \ref INIT_GPS_POS_LatLon instead.
 */
#define SETUP_GPS_POS_LatLon_GPS_POS_Latitude       0, 1, 0, 32, 0

/**
 * Get signal GPS_POS_Latitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_POS_LatLon_GPS_POS_Latitude(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) \
	| (uint32_t)(+(uint32_t)((buf[2] >> 0) & 0xff) << 16) \
	| (uint32_t)(+(uint32_t)((buf[3] >> 0) & 0xff) << 24) \
)

/**
 * Set signal GPS_POS_Latitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_POS_LatLon_GPS_POS_Latitude(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal GPS_POS_Latitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_POS_LatLon_GPS_POS_Latitude(buf) \
	SET_GPS_POS_LatLon_GPS_POS_Latitude(buf, 0)

/**
 * Signal GPS_POS_Latitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_POS_LatLon_GPS_POS_Latitude(x, fmt) \
	((x) * fmt / 10000000)

/**
 * Signal GPS_POS_Latitude raw initial value.
 */
#define START_GPS_POS_LatLon_GPS_POS_Latitude       0

/**
 * Signal GPS_POS_Latitude raw minimum value.
 */
#define MIN_GPS_POS_LatLon_GPS_POS_Latitude         0

/**
 * Signal GPS_POS_Latitude raw maximum value.
 */
#define MAX_GPS_POS_LatLon_GPS_POS_Latitude         0

/**
 * Signal GPS_POS_Latitude raw offset value.
 */
#define OFF_GPS_POS_LatLon_GPS_POS_Latitude         0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_POS_AltFlag_GPS_Flag Signal GPS_Flag of Message GPS_POS_AltFlag (0x31b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_POS_AltFlag
 * @{
 */

/**
 * Signal GPS_Flag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_POS_AltFlag_GPS_Flag and \ref GET_GPS_POS_AltFlag_GPS_Flag instead.
 */
#define SIG_GPS_POS_AltFlag_GPS_Flag                0, 0, 32, 8

/**
 * Signal GPS_Flag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_POS_AltFlag_GPS_Flag or \ref INIT_GPS_POS_AltFlag instead.
 */
#define SETUP_GPS_POS_AltFlag_GPS_Flag              0, 0, 32, 8, 0

/**
 * Get signal GPS_Flag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_POS_AltFlag_GPS_Flag(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GPS_Flag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_POS_AltFlag_GPS_Flag(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GPS_Flag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_POS_AltFlag_GPS_Flag(buf) \
	SET_GPS_POS_AltFlag_GPS_Flag(buf, 0)

/**
 * Signal GPS_Flag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_POS_AltFlag_GPS_Flag(x, fmt) \
	((x) * fmt)

/**
 * Signal GPS_Flag raw initial value.
 */
#define START_GPS_POS_AltFlag_GPS_Flag              0

/**
 * Signal GPS_Flag raw minimum value.
 */
#define MIN_GPS_POS_AltFlag_GPS_Flag                0

/**
 * Signal GPS_Flag raw maximum value.
 */
#define MAX_GPS_POS_AltFlag_GPS_Flag                0

/**
 * Signal GPS_Flag raw offset value.
 */
#define OFF_GPS_POS_AltFlag_GPS_Flag                0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_POS_AltFlag_GPS_POS_Atitude Signal GPS_POS_Atitude of Message GPS_POS_AltFlag (0x31b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_POS_AltFlag
 * @{
 */

/**
 * Signal GPS_POS_Atitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_POS_AltFlag_GPS_POS_Atitude and \ref GET_GPS_POS_AltFlag_GPS_POS_Atitude instead.
 */
#define SIG_GPS_POS_AltFlag_GPS_POS_Atitude         0, 1, 0, 32

/**
 * Signal GPS_POS_Atitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_POS_AltFlag_GPS_POS_Atitude or \ref INIT_GPS_POS_AltFlag instead.
 */
#define SETUP_GPS_POS_AltFlag_GPS_POS_Atitude       0, 1, 0, 32, 0

/**
 * Get signal GPS_POS_Atitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_POS_AltFlag_GPS_POS_Atitude(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) \
	| (uint32_t)(+(uint32_t)((buf[2] >> 0) & 0xff) << 16) \
	| (uint32_t)(+(uint32_t)((buf[3] >> 0) & 0xff) << 24) \
)

/**
 * Set signal GPS_POS_Atitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_POS_AltFlag_GPS_POS_Atitude(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal GPS_POS_Atitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_POS_AltFlag_GPS_POS_Atitude(buf) \
	SET_GPS_POS_AltFlag_GPS_POS_Atitude(buf, 0)

/**
 * Signal GPS_POS_Atitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_POS_AltFlag_GPS_POS_Atitude(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal GPS_POS_Atitude raw initial value.
 */
#define START_GPS_POS_AltFlag_GPS_POS_Atitude       0

/**
 * Signal GPS_POS_Atitude raw minimum value.
 */
#define MIN_GPS_POS_AltFlag_GPS_POS_Atitude         0

/**
 * Signal GPS_POS_Atitude raw maximum value.
 */
#define MAX_GPS_POS_AltFlag_GPS_POS_Atitude         0

/**
 * Signal GPS_POS_Atitude raw offset value.
 */
#define OFF_GPS_POS_AltFlag_GPS_POS_Atitude         0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_ATTI_Heading_GPS_ATTI_HeadP Signal GPS_ATTI_HeadP of Message GPS_ATTI_Heading (0x11b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_ATTI_Heading
 * @{
 */

/**
 * Signal GPS_ATTI_HeadP configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_ATTI_Heading_GPS_ATTI_HeadP and \ref GET_GPS_ATTI_Heading_GPS_ATTI_HeadP instead.
 */
#define SIG_GPS_ATTI_Heading_GPS_ATTI_HeadP         0, 1, 32, 16

/**
 * Signal GPS_ATTI_HeadP setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_ATTI_Heading_GPS_ATTI_HeadP or \ref INIT_GPS_ATTI_Heading instead.
 */
#define SETUP_GPS_ATTI_Heading_GPS_ATTI_HeadP       0, 1, 32, 16, 0

/**
 * Get signal GPS_ATTI_HeadP from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_ATTI_Heading_GPS_ATTI_HeadP(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 8) \
)

/**
 * Set signal GPS_ATTI_HeadP in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_ATTI_Heading_GPS_ATTI_HeadP(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal GPS_ATTI_HeadP in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_ATTI_Heading_GPS_ATTI_HeadP(buf) \
	SET_GPS_ATTI_Heading_GPS_ATTI_HeadP(buf, 0)

/**
 * Signal GPS_ATTI_HeadP value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_ATTI_Heading_GPS_ATTI_HeadP(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal GPS_ATTI_HeadP raw initial value.
 */
#define START_GPS_ATTI_Heading_GPS_ATTI_HeadP       0

/**
 * Signal GPS_ATTI_HeadP raw minimum value.
 */
#define MIN_GPS_ATTI_Heading_GPS_ATTI_HeadP         0

/**
 * Signal GPS_ATTI_HeadP raw maximum value.
 */
#define MAX_GPS_ATTI_Heading_GPS_ATTI_HeadP         0

/**
 * Signal GPS_ATTI_HeadP raw offset value.
 */
#define OFF_GPS_ATTI_Heading_GPS_ATTI_HeadP         0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_ATTI_Heading_GPS_ATTI_Pitch Signal GPS_ATTI_Pitch of Message GPS_ATTI_Heading (0x11b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_ATTI_Heading
 * @{
 */

/**
 * Signal GPS_ATTI_Pitch configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_ATTI_Heading_GPS_ATTI_Pitch and \ref GET_GPS_ATTI_Heading_GPS_ATTI_Pitch instead.
 */
#define SIG_GPS_ATTI_Heading_GPS_ATTI_Pitch         0, 1, 16, 16

/**
 * Signal GPS_ATTI_Pitch setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_ATTI_Heading_GPS_ATTI_Pitch or \ref INIT_GPS_ATTI_Heading instead.
 */
#define SETUP_GPS_ATTI_Heading_GPS_ATTI_Pitch       0, 1, 16, 16, 0

/**
 * Get signal GPS_ATTI_Pitch from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_ATTI_Heading_GPS_ATTI_Pitch(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8) \
)

/**
 * Set signal GPS_ATTI_Pitch in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_ATTI_Heading_GPS_ATTI_Pitch(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal GPS_ATTI_Pitch in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_ATTI_Heading_GPS_ATTI_Pitch(buf) \
	SET_GPS_ATTI_Heading_GPS_ATTI_Pitch(buf, 0)

/**
 * Signal GPS_ATTI_Pitch value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_ATTI_Heading_GPS_ATTI_Pitch(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal GPS_ATTI_Pitch raw initial value.
 */
#define START_GPS_ATTI_Heading_GPS_ATTI_Pitch       0

/**
 * Signal GPS_ATTI_Pitch raw minimum value.
 */
#define MIN_GPS_ATTI_Heading_GPS_ATTI_Pitch         0

/**
 * Signal GPS_ATTI_Pitch raw maximum value.
 */
#define MAX_GPS_ATTI_Heading_GPS_ATTI_Pitch         0

/**
 * Signal GPS_ATTI_Pitch raw offset value.
 */
#define OFF_GPS_ATTI_Heading_GPS_ATTI_Pitch         0

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_ATTI_Heading_GPS_ATTI_Heading Signal GPS_ATTI_Heading of Message GPS_ATTI_Heading (0x11b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_ATTI_Heading
 * @{
 */

/**
 * Signal GPS_ATTI_Heading configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_ATTI_Heading_GPS_ATTI_Heading and \ref GET_GPS_ATTI_Heading_GPS_ATTI_Heading instead.
 */
#define SIG_GPS_ATTI_Heading_GPS_ATTI_Heading        0, 0, 0, 16

/**
 * Signal GPS_ATTI_Heading setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_ATTI_Heading_GPS_ATTI_Heading or \ref INIT_GPS_ATTI_Heading instead.
 */
#define SETUP_GPS_ATTI_Heading_GPS_ATTI_Heading      0, 0, 0, 16, 0

/**
 * Get signal GPS_ATTI_Heading from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_ATTI_Heading_GPS_ATTI_Heading(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) \
)

/**
 * Set signal GPS_ATTI_Heading in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_ATTI_Heading_GPS_ATTI_Heading(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal GPS_ATTI_Heading in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_ATTI_Heading_GPS_ATTI_Heading(buf) \
	SET_GPS_ATTI_Heading_GPS_ATTI_Heading(buf, 0)

/**
 * Signal GPS_ATTI_Heading value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_ATTI_Heading_GPS_ATTI_Heading(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal GPS_ATTI_Heading raw initial value.
 */
#define START_GPS_ATTI_Heading_GPS_ATTI_Heading      0

/**
 * Signal GPS_ATTI_Heading raw minimum value.
 */
#define MIN_GPS_ATTI_Heading_GPS_ATTI_Heading        0

/**
 * Signal GPS_ATTI_Heading raw maximum value.
 */
#define MAX_GPS_ATTI_Heading_GPS_ATTI_Heading        0

/**
 * Signal GPS_ATTI_Heading raw offset value.
 */
#define OFF_GPS_ATTI_Heading_GPS_ATTI_Heading        0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrStatus_DiffId Signal DiffId of Message RevrStatus (0x737)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrStatus
 * @{
 */

/**
 * Signal DiffId configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrStatus_DiffId and \ref GET_RevrStatus_DiffId instead.
 */
#define SIG_RevrStatus_DiffId                       1, 0, 55, 16

/**
 * Signal DiffId setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrStatus_DiffId or \ref INIT_RevrStatus instead.
 */
#define SETUP_RevrStatus_DiffId                     1, 0, 55, 16, 0

/**
 * Get signal DiffId from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrStatus_DiffId(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal DiffId in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrStatus_DiffId(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal DiffId in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrStatus_DiffId(buf) \
	SET_RevrStatus_DiffId(buf, 0)

/**
 * Signal DiffId value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrStatus_DiffId(x, fmt) \
	((x) * fmt)

/**
 * Signal DiffId raw initial value.
 */
#define START_RevrStatus_DiffId                     0

/**
 * Signal DiffId raw minimum value.
 */
#define MIN_RevrStatus_DiffId                       0

/**
 * Signal DiffId raw maximum value.
 */
#define MAX_RevrStatus_DiffId                       0

/**
 * Signal DiffId raw offset value.
 */
#define OFF_RevrStatus_DiffId                       0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrStatus_DiffTime Signal DiffTime of Message RevrStatus (0x737)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrStatus
 * @{
 */

/**
 * Signal DiffTime configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrStatus_DiffTime and \ref GET_RevrStatus_DiffTime instead.
 */
#define SIG_RevrStatus_DiffTime                     1, 0, 39, 16

/**
 * Signal DiffTime setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrStatus_DiffTime or \ref INIT_RevrStatus instead.
 */
#define SETUP_RevrStatus_DiffTime                   1, 0, 39, 16, 0

/**
 * Get signal DiffTime from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrStatus_DiffTime(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal DiffTime in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrStatus_DiffTime(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal DiffTime in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrStatus_DiffTime(buf) \
	SET_RevrStatus_DiffTime(buf, 0)

/**
 * Signal DiffTime value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrStatus_DiffTime(x, fmt) \
	((x) * fmt)

/**
 * Signal DiffTime raw initial value.
 */
#define START_RevrStatus_DiffTime                   0

/**
 * Signal DiffTime raw minimum value.
 */
#define MIN_RevrStatus_DiffTime                     0

/**
 * Signal DiffTime raw maximum value.
 */
#define MAX_RevrStatus_DiffTime                     0

/**
 * Signal DiffTime raw offset value.
 */
#define OFF_RevrStatus_DiffTime                     0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrStatus_Hdop_Receiver Signal Hdop_Receiver of Message RevrStatus (0x737)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrStatus
 * @{
 */

/**
 * Signal Hdop_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrStatus_Hdop_Receiver and \ref GET_RevrStatus_Hdop_Receiver instead.
 */
#define SIG_RevrStatus_Hdop_Receiver                1, 0, 23, 16

/**
 * Signal Hdop_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrStatus_Hdop_Receiver or \ref INIT_RevrStatus instead.
 */
#define SETUP_RevrStatus_Hdop_Receiver              1, 0, 23, 16, 0

/**
 * Get signal Hdop_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrStatus_Hdop_Receiver(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Hdop_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrStatus_Hdop_Receiver(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Hdop_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrStatus_Hdop_Receiver(buf) \
	SET_RevrStatus_Hdop_Receiver(buf, 0)

/**
 * Signal Hdop_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrStatus_Hdop_Receiver(x, fmt) \
	((x) * fmt / 10)

/**
 * Signal Hdop_Receiver raw initial value.
 */
#define START_RevrStatus_Hdop_Receiver              0

/**
 * Signal Hdop_Receiver raw minimum value.
 */
#define MIN_RevrStatus_Hdop_Receiver                0

/**
 * Signal Hdop_Receiver raw maximum value.
 */
#define MAX_RevrStatus_Hdop_Receiver                0

/**
 * Signal Hdop_Receiver raw offset value.
 */
#define OFF_RevrStatus_Hdop_Receiver                0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrStatus_SateliteNum_Secondary Signal SateliteNum_Secondary of Message RevrStatus (0x737)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrStatus
 * @{
 */

/**
 * Signal SateliteNum_Secondary configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrStatus_SateliteNum_Secondary and \ref GET_RevrStatus_SateliteNum_Secondary instead.
 */
#define SIG_RevrStatus_SateliteNum_Secondary        1, 0, 15, 8

/**
 * Signal SateliteNum_Secondary setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrStatus_SateliteNum_Secondary or \ref INIT_RevrStatus instead.
 */
#define SETUP_RevrStatus_SateliteNum_Secondary      1, 0, 15, 8, 0

/**
 * Get signal SateliteNum_Secondary from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrStatus_SateliteNum_Secondary(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal SateliteNum_Secondary in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrStatus_SateliteNum_Secondary(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal SateliteNum_Secondary in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrStatus_SateliteNum_Secondary(buf) \
	SET_RevrStatus_SateliteNum_Secondary(buf, 0)

/**
 * Signal SateliteNum_Secondary value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrStatus_SateliteNum_Secondary(x, fmt) \
	((x) * fmt)

/**
 * Signal SateliteNum_Secondary raw initial value.
 */
#define START_RevrStatus_SateliteNum_Secondary      0

/**
 * Signal SateliteNum_Secondary raw minimum value.
 */
#define MIN_RevrStatus_SateliteNum_Secondary        0

/**
 * Signal SateliteNum_Secondary raw maximum value.
 */
#define MAX_RevrStatus_SateliteNum_Secondary        0

/**
 * Signal SateliteNum_Secondary raw offset value.
 */
#define OFF_RevrStatus_SateliteNum_Secondary        0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrStatus_SateliteNum_Primary Signal SateliteNum_Primary of Message RevrStatus (0x737)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrStatus
 * @{
 */

/**
 * Signal SateliteNum_Primary configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrStatus_SateliteNum_Primary and \ref GET_RevrStatus_SateliteNum_Primary instead.
 */
#define SIG_RevrStatus_SateliteNum_Primary          1, 0, 7, 8

/**
 * Signal SateliteNum_Primary setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrStatus_SateliteNum_Primary or \ref INIT_RevrStatus instead.
 */
#define SETUP_RevrStatus_SateliteNum_Primary        1, 0, 7, 8, 0

/**
 * Get signal SateliteNum_Primary from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrStatus_SateliteNum_Primary(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal SateliteNum_Primary in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrStatus_SateliteNum_Primary(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal SateliteNum_Primary in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrStatus_SateliteNum_Primary(buf) \
	SET_RevrStatus_SateliteNum_Primary(buf, 0)

/**
 * Signal SateliteNum_Primary value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrStatus_SateliteNum_Primary(x, fmt) \
	((x) * fmt)

/**
 * Signal SateliteNum_Primary raw initial value.
 */
#define START_RevrStatus_SateliteNum_Primary        0

/**
 * Signal SateliteNum_Primary raw minimum value.
 */
#define MIN_RevrStatus_SateliteNum_Primary          0

/**
 * Signal SateliteNum_Primary raw maximum value.
 */
#define MAX_RevrStatus_SateliteNum_Primary          0

/**
 * Signal SateliteNum_Primary raw offset value.
 */
#define OFF_RevrStatus_SateliteNum_Primary          0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrAttitude_Track_Receiver Signal Track_Receiver of Message RevrAttitude (0x736)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrAttitude
 * @{
 */

/**
 * Signal Track_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrAttitude_Track_Receiver and \ref GET_RevrAttitude_Track_Receiver instead.
 */
#define SIG_RevrAttitude_Track_Receiver             1, 0, 55, 16

/**
 * Signal Track_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrAttitude_Track_Receiver or \ref INIT_RevrAttitude instead.
 */
#define SETUP_RevrAttitude_Track_Receiver           1, 0, 55, 16, 0

/**
 * Get signal Track_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrAttitude_Track_Receiver(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Track_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrAttitude_Track_Receiver(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Track_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrAttitude_Track_Receiver(buf) \
	SET_RevrAttitude_Track_Receiver(buf, 0)

/**
 * Signal Track_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrAttitude_Track_Receiver(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Track_Receiver raw initial value.
 */
#define START_RevrAttitude_Track_Receiver           0

/**
 * Signal Track_Receiver raw minimum value.
 */
#define MIN_RevrAttitude_Track_Receiver             0

/**
 * Signal Track_Receiver raw maximum value.
 */
#define MAX_RevrAttitude_Track_Receiver             36000

/**
 * Signal Track_Receiver raw offset value.
 */
#define OFF_RevrAttitude_Track_Receiver             0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrAttitude_Baseline Signal Baseline of Message RevrAttitude (0x736)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrAttitude
 * @{
 */

/**
 * Signal Baseline configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrAttitude_Baseline and \ref GET_RevrAttitude_Baseline instead.
 */
#define SIG_RevrAttitude_Baseline                   1, 0, 39, 16

/**
 * Signal Baseline setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrAttitude_Baseline or \ref INIT_RevrAttitude instead.
 */
#define SETUP_RevrAttitude_Baseline                 1, 0, 39, 16, 0

/**
 * Get signal Baseline from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrAttitude_Baseline(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Baseline in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrAttitude_Baseline(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Baseline in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrAttitude_Baseline(buf) \
	SET_RevrAttitude_Baseline(buf, 0)

/**
 * Signal Baseline value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrAttitude_Baseline(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal Baseline raw initial value.
 */
#define START_RevrAttitude_Baseline                 0

/**
 * Signal Baseline raw minimum value.
 */
#define MIN_RevrAttitude_Baseline                   0

/**
 * Signal Baseline raw maximum value.
 */
#define MAX_RevrAttitude_Baseline                   0

/**
 * Signal Baseline raw offset value.
 */
#define OFF_RevrAttitude_Baseline                   0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrAttitude_Pitch_Receiver Signal Pitch_Receiver of Message RevrAttitude (0x736)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrAttitude
 * @{
 */

/**
 * Signal Pitch_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrAttitude_Pitch_Receiver and \ref GET_RevrAttitude_Pitch_Receiver instead.
 */
#define SIG_RevrAttitude_Pitch_Receiver             1, 1, 23, 16

/**
 * Signal Pitch_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrAttitude_Pitch_Receiver or \ref INIT_RevrAttitude instead.
 */
#define SETUP_RevrAttitude_Pitch_Receiver           1, 1, 23, 16, 0

/**
 * Get signal Pitch_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrAttitude_Pitch_Receiver(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Pitch_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrAttitude_Pitch_Receiver(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Pitch_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrAttitude_Pitch_Receiver(buf) \
	SET_RevrAttitude_Pitch_Receiver(buf, 0)

/**
 * Signal Pitch_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrAttitude_Pitch_Receiver(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Pitch_Receiver raw initial value.
 */
#define START_RevrAttitude_Pitch_Receiver           0

/**
 * Signal Pitch_Receiver raw minimum value.
 */
#define MIN_RevrAttitude_Pitch_Receiver             -9000

/**
 * Signal Pitch_Receiver raw maximum value.
 */
#define MAX_RevrAttitude_Pitch_Receiver             9000

/**
 * Signal Pitch_Receiver raw offset value.
 */
#define OFF_RevrAttitude_Pitch_Receiver             0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrAttitude_Yaw_Receiver Signal Yaw_Receiver of Message RevrAttitude (0x736)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrAttitude
 * @{
 */

/**
 * Signal Yaw_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrAttitude_Yaw_Receiver and \ref GET_RevrAttitude_Yaw_Receiver instead.
 */
#define SIG_RevrAttitude_Yaw_Receiver               1, 0, 7, 16

/**
 * Signal Yaw_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrAttitude_Yaw_Receiver or \ref INIT_RevrAttitude instead.
 */
#define SETUP_RevrAttitude_Yaw_Receiver             1, 0, 7, 16, 0

/**
 * Get signal Yaw_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrAttitude_Yaw_Receiver(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Yaw_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrAttitude_Yaw_Receiver(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Yaw_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrAttitude_Yaw_Receiver(buf) \
	SET_RevrAttitude_Yaw_Receiver(buf, 0)

/**
 * Signal Yaw_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrAttitude_Yaw_Receiver(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Yaw_Receiver raw initial value.
 */
#define START_RevrAttitude_Yaw_Receiver             0

/**
 * Signal Yaw_Receiver raw minimum value.
 */
#define MIN_RevrAttitude_Yaw_Receiver               0

/**
 * Signal Yaw_Receiver raw maximum value.
 */
#define MAX_RevrAttitude_Yaw_Receiver               36000

/**
 * Signal Yaw_Receiver raw offset value.
 */
#define OFF_RevrAttitude_Yaw_Receiver               0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrVelocity_VelocityHorizon_Receiver Signal VelocityHorizon_Receiver of Message RevrVelocity (0x735)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrVelocity
 * @{
 */

/**
 * Signal VelocityHorizon_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrVelocity_VelocityHorizon_Receiver and \ref GET_RevrVelocity_VelocityHorizon_Receiver instead.
 */
#define SIG_RevrVelocity_VelocityHorizon_Receiver        1, 1, 55, 16

/**
 * Signal VelocityHorizon_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrVelocity_VelocityHorizon_Receiver or \ref INIT_RevrVelocity instead.
 */
#define SETUP_RevrVelocity_VelocityHorizon_Receiver      1, 1, 55, 16, 0

/**
 * Get signal VelocityHorizon_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrVelocity_VelocityHorizon_Receiver(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityHorizon_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrVelocity_VelocityHorizon_Receiver(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityHorizon_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrVelocity_VelocityHorizon_Receiver(buf) \
	SET_RevrVelocity_VelocityHorizon_Receiver(buf, 0)

/**
 * Signal VelocityHorizon_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrVelocity_VelocityHorizon_Receiver(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal VelocityHorizon_Receiver raw initial value.
 */
#define START_RevrVelocity_VelocityHorizon_Receiver      0

/**
 * Signal VelocityHorizon_Receiver raw minimum value.
 */
#define MIN_RevrVelocity_VelocityHorizon_Receiver        0

/**
 * Signal VelocityHorizon_Receiver raw maximum value.
 */
#define MAX_RevrVelocity_VelocityHorizon_Receiver        0

/**
 * Signal VelocityHorizon_Receiver raw offset value.
 */
#define OFF_RevrVelocity_VelocityHorizon_Receiver        0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrVelocity_VelocityUp_Receiver Signal VelocityUp_Receiver of Message RevrVelocity (0x735)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrVelocity
 * @{
 */

/**
 * Signal VelocityUp_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrVelocity_VelocityUp_Receiver and \ref GET_RevrVelocity_VelocityUp_Receiver instead.
 */
#define SIG_RevrVelocity_VelocityUp_Receiver        1, 1, 39, 16

/**
 * Signal VelocityUp_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrVelocity_VelocityUp_Receiver or \ref INIT_RevrVelocity instead.
 */
#define SETUP_RevrVelocity_VelocityUp_Receiver      1, 1, 39, 16, 0

/**
 * Get signal VelocityUp_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrVelocity_VelocityUp_Receiver(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityUp_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrVelocity_VelocityUp_Receiver(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityUp_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrVelocity_VelocityUp_Receiver(buf) \
	SET_RevrVelocity_VelocityUp_Receiver(buf, 0)

/**
 * Signal VelocityUp_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrVelocity_VelocityUp_Receiver(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal VelocityUp_Receiver raw initial value.
 */
#define START_RevrVelocity_VelocityUp_Receiver      0

/**
 * Signal VelocityUp_Receiver raw minimum value.
 */
#define MIN_RevrVelocity_VelocityUp_Receiver        0

/**
 * Signal VelocityUp_Receiver raw maximum value.
 */
#define MAX_RevrVelocity_VelocityUp_Receiver        0

/**
 * Signal VelocityUp_Receiver raw offset value.
 */
#define OFF_RevrVelocity_VelocityUp_Receiver        0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrVelocity_VelocityNorth_Receiver Signal VelocityNorth_Receiver of Message RevrVelocity (0x735)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrVelocity
 * @{
 */

/**
 * Signal VelocityNorth_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrVelocity_VelocityNorth_Receiver and \ref GET_RevrVelocity_VelocityNorth_Receiver instead.
 */
#define SIG_RevrVelocity_VelocityNorth_Receiver        1, 1, 23, 16

/**
 * Signal VelocityNorth_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrVelocity_VelocityNorth_Receiver or \ref INIT_RevrVelocity instead.
 */
#define SETUP_RevrVelocity_VelocityNorth_Receiver      1, 1, 23, 16, 0

/**
 * Get signal VelocityNorth_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrVelocity_VelocityNorth_Receiver(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityNorth_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrVelocity_VelocityNorth_Receiver(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityNorth_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrVelocity_VelocityNorth_Receiver(buf) \
	SET_RevrVelocity_VelocityNorth_Receiver(buf, 0)

/**
 * Signal VelocityNorth_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrVelocity_VelocityNorth_Receiver(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal VelocityNorth_Receiver raw initial value.
 */
#define START_RevrVelocity_VelocityNorth_Receiver      0

/**
 * Signal VelocityNorth_Receiver raw minimum value.
 */
#define MIN_RevrVelocity_VelocityNorth_Receiver        0

/**
 * Signal VelocityNorth_Receiver raw maximum value.
 */
#define MAX_RevrVelocity_VelocityNorth_Receiver        0

/**
 * Signal VelocityNorth_Receiver raw offset value.
 */
#define OFF_RevrVelocity_VelocityNorth_Receiver        0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrVelocity_VelocityEast_Receiver Signal VelocityEast_Receiver of Message RevrVelocity (0x735)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrVelocity
 * @{
 */

/**
 * Signal VelocityEast_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrVelocity_VelocityEast_Receiver and \ref GET_RevrVelocity_VelocityEast_Receiver instead.
 */
#define SIG_RevrVelocity_VelocityEast_Receiver        1, 1, 7, 16

/**
 * Signal VelocityEast_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrVelocity_VelocityEast_Receiver or \ref INIT_RevrVelocity instead.
 */
#define SETUP_RevrVelocity_VelocityEast_Receiver      1, 1, 7, 16, 0

/**
 * Get signal VelocityEast_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrVelocity_VelocityEast_Receiver(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityEast_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrVelocity_VelocityEast_Receiver(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityEast_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrVelocity_VelocityEast_Receiver(buf) \
	SET_RevrVelocity_VelocityEast_Receiver(buf, 0)

/**
 * Signal VelocityEast_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrVelocity_VelocityEast_Receiver(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal VelocityEast_Receiver raw initial value.
 */
#define START_RevrVelocity_VelocityEast_Receiver      0

/**
 * Signal VelocityEast_Receiver raw minimum value.
 */
#define MIN_RevrVelocity_VelocityEast_Receiver        0

/**
 * Signal VelocityEast_Receiver raw maximum value.
 */
#define MAX_RevrVelocity_VelocityEast_Receiver        0

/**
 * Signal VelocityEast_Receiver raw offset value.
 */
#define OFF_RevrVelocity_VelocityEast_Receiver        0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrAltitude_AltitudeUndulation Signal AltitudeUndulation of Message RevrAltitude (0x734)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrAltitude
 * @{
 */

/**
 * Signal AltitudeUndulation configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrAltitude_AltitudeUndulation and \ref GET_RevrAltitude_AltitudeUndulation instead.
 */
#define SIG_RevrAltitude_AltitudeUndulation         1, 1, 39, 32

/**
 * Signal AltitudeUndulation setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrAltitude_AltitudeUndulation or \ref INIT_RevrAltitude instead.
 */
#define SETUP_RevrAltitude_AltitudeUndulation       1, 1, 39, 32, 0

/**
 * Get signal AltitudeUndulation from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrAltitude_AltitudeUndulation(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal AltitudeUndulation in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrAltitude_AltitudeUndulation(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal AltitudeUndulation in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrAltitude_AltitudeUndulation(buf) \
	SET_RevrAltitude_AltitudeUndulation(buf, 0)

/**
 * Signal AltitudeUndulation value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrAltitude_AltitudeUndulation(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal AltitudeUndulation raw initial value.
 */
#define START_RevrAltitude_AltitudeUndulation       0

/**
 * Signal AltitudeUndulation raw minimum value.
 */
#define MIN_RevrAltitude_AltitudeUndulation         0

/**
 * Signal AltitudeUndulation raw maximum value.
 */
#define MAX_RevrAltitude_AltitudeUndulation         0

/**
 * Signal AltitudeUndulation raw offset value.
 */
#define OFF_RevrAltitude_AltitudeUndulation         0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrAltitude_Altitude_Receiver Signal Altitude_Receiver of Message RevrAltitude (0x734)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrAltitude
 * @{
 */

/**
 * Signal Altitude_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrAltitude_Altitude_Receiver and \ref GET_RevrAltitude_Altitude_Receiver instead.
 */
#define SIG_RevrAltitude_Altitude_Receiver          1, 1, 7, 32

/**
 * Signal Altitude_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrAltitude_Altitude_Receiver or \ref INIT_RevrAltitude instead.
 */
#define SETUP_RevrAltitude_Altitude_Receiver        1, 1, 7, 32, 0

/**
 * Get signal Altitude_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrAltitude_Altitude_Receiver(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[1] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Altitude_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrAltitude_Altitude_Receiver(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Altitude_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrAltitude_Altitude_Receiver(buf) \
	SET_RevrAltitude_Altitude_Receiver(buf, 0)

/**
 * Signal Altitude_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrAltitude_Altitude_Receiver(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal Altitude_Receiver raw initial value.
 */
#define START_RevrAltitude_Altitude_Receiver        0

/**
 * Signal Altitude_Receiver raw minimum value.
 */
#define MIN_RevrAltitude_Altitude_Receiver          0

/**
 * Signal Altitude_Receiver raw maximum value.
 */
#define MAX_RevrAltitude_Altitude_Receiver          0

/**
 * Signal Altitude_Receiver raw offset value.
 */
#define OFF_RevrAltitude_Altitude_Receiver          0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrPosition_Longitude_Receiver Signal Longitude_Receiver of Message RevrPosition (0x733)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrPosition
 * @{
 */

/**
 * Signal Longitude_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrPosition_Longitude_Receiver and \ref GET_RevrPosition_Longitude_Receiver instead.
 */
#define SIG_RevrPosition_Longitude_Receiver         1, 1, 39, 32

/**
 * Signal Longitude_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrPosition_Longitude_Receiver or \ref INIT_RevrPosition instead.
 */
#define SETUP_RevrPosition_Longitude_Receiver       1, 1, 39, 32, 0

/**
 * Get signal Longitude_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrPosition_Longitude_Receiver(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Longitude_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrPosition_Longitude_Receiver(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Longitude_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrPosition_Longitude_Receiver(buf) \
	SET_RevrPosition_Longitude_Receiver(buf, 0)

/**
 * Signal Longitude_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrPosition_Longitude_Receiver(x, fmt) \
	((x) * fmt / 10000000)

/**
 * Signal Longitude_Receiver raw initial value.
 */
#define START_RevrPosition_Longitude_Receiver       0

/**
 * Signal Longitude_Receiver raw minimum value.
 */
#define MIN_RevrPosition_Longitude_Receiver         -1800000000

/**
 * Signal Longitude_Receiver raw maximum value.
 */
#define MAX_RevrPosition_Longitude_Receiver         1800000000

/**
 * Signal Longitude_Receiver raw offset value.
 */
#define OFF_RevrPosition_Longitude_Receiver         0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrPosition_Latitude_Receiver Signal Latitude_Receiver of Message RevrPosition (0x733)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrPosition
 * @{
 */

/**
 * Signal Latitude_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrPosition_Latitude_Receiver and \ref GET_RevrPosition_Latitude_Receiver instead.
 */
#define SIG_RevrPosition_Latitude_Receiver          1, 1, 7, 32

/**
 * Signal Latitude_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrPosition_Latitude_Receiver or \ref INIT_RevrPosition instead.
 */
#define SETUP_RevrPosition_Latitude_Receiver        1, 1, 7, 32, 0

/**
 * Get signal Latitude_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrPosition_Latitude_Receiver(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[1] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Latitude_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrPosition_Latitude_Receiver(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Latitude_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrPosition_Latitude_Receiver(buf) \
	SET_RevrPosition_Latitude_Receiver(buf, 0)

/**
 * Signal Latitude_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrPosition_Latitude_Receiver(x, fmt) \
	((x) * fmt / 10000000)

/**
 * Signal Latitude_Receiver raw initial value.
 */
#define START_RevrPosition_Latitude_Receiver        0

/**
 * Signal Latitude_Receiver raw minimum value.
 */
#define MIN_RevrPosition_Latitude_Receiver          -900000000

/**
 * Signal Latitude_Receiver raw maximum value.
 */
#define MAX_RevrPosition_Latitude_Receiver          900000000

/**
 * Signal Latitude_Receiver raw offset value.
 */
#define OFF_RevrPosition_Latitude_Receiver          0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrUtcTime_UtcTime_Receiver Signal UtcTime_Receiver of Message RevrUtcTime (0x732)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrUtcTime
 * @{
 */

/**
 * Signal UtcTime_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrUtcTime_UtcTime_Receiver and \ref GET_RevrUtcTime_UtcTime_Receiver instead.
 */
#define SIG_RevrUtcTime_UtcTime_Receiver            1, 0, 39, 32

/**
 * Signal UtcTime_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrUtcTime_UtcTime_Receiver or \ref INIT_RevrUtcTime instead.
 */
#define SETUP_RevrUtcTime_UtcTime_Receiver          1, 0, 39, 32, 0

/**
 * Get signal UtcTime_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrUtcTime_UtcTime_Receiver(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal UtcTime_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrUtcTime_UtcTime_Receiver(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal UtcTime_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrUtcTime_UtcTime_Receiver(buf) \
	SET_RevrUtcTime_UtcTime_Receiver(buf, 0)

/**
 * Signal UtcTime_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrUtcTime_UtcTime_Receiver(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal UtcTime_Receiver raw initial value.
 */
#define START_RevrUtcTime_UtcTime_Receiver          0

/**
 * Signal UtcTime_Receiver raw minimum value.
 */
#define MIN_RevrUtcTime_UtcTime_Receiver            0

/**
 * Signal UtcTime_Receiver raw maximum value.
 */
#define MAX_RevrUtcTime_UtcTime_Receiver            0

/**
 * Signal UtcTime_Receiver raw offset value.
 */
#define OFF_RevrUtcTime_UtcTime_Receiver            0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrUtcTime_UtcDate_Receiver Signal UtcDate_Receiver of Message RevrUtcTime (0x732)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrUtcTime
 * @{
 */

/**
 * Signal UtcDate_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrUtcTime_UtcDate_Receiver and \ref GET_RevrUtcTime_UtcDate_Receiver instead.
 */
#define SIG_RevrUtcTime_UtcDate_Receiver            1, 0, 7, 32

/**
 * Signal UtcDate_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrUtcTime_UtcDate_Receiver or \ref INIT_RevrUtcTime instead.
 */
#define SETUP_RevrUtcTime_UtcDate_Receiver          1, 0, 7, 32, 0

/**
 * Get signal UtcDate_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrUtcTime_UtcDate_Receiver(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[1] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal UtcDate_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrUtcTime_UtcDate_Receiver(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal UtcDate_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrUtcTime_UtcDate_Receiver(buf) \
	SET_RevrUtcTime_UtcDate_Receiver(buf, 0)

/**
 * Signal UtcDate_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrUtcTime_UtcDate_Receiver(x, fmt) \
	((x) * fmt)

/**
 * Signal UtcDate_Receiver raw initial value.
 */
#define START_RevrUtcTime_UtcDate_Receiver          0

/**
 * Signal UtcDate_Receiver raw minimum value.
 */
#define MIN_RevrUtcTime_UtcDate_Receiver            0

/**
 * Signal UtcDate_Receiver raw maximum value.
 */
#define MAX_RevrUtcTime_UtcDate_Receiver            0

/**
 * Signal UtcDate_Receiver raw offset value.
 */
#define OFF_RevrUtcTime_UtcDate_Receiver            0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrGpsTime_GpsSecond_Receiver Signal GpsSecond_Receiver of Message RevrGpsTime (0x731)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrGpsTime
 * @{
 */

/**
 * Signal GpsSecond_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrGpsTime_GpsSecond_Receiver and \ref GET_RevrGpsTime_GpsSecond_Receiver instead.
 */
#define SIG_RevrGpsTime_GpsSecond_Receiver          1, 0, 23, 32

/**
 * Signal GpsSecond_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrGpsTime_GpsSecond_Receiver or \ref INIT_RevrGpsTime instead.
 */
#define SETUP_RevrGpsTime_GpsSecond_Receiver        1, 0, 23, 32, 0

/**
 * Get signal GpsSecond_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrGpsTime_GpsSecond_Receiver(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[2] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[3] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GpsSecond_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrGpsTime_GpsSecond_Receiver(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GpsSecond_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrGpsTime_GpsSecond_Receiver(buf) \
	SET_RevrGpsTime_GpsSecond_Receiver(buf, 0)

/**
 * Signal GpsSecond_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrGpsTime_GpsSecond_Receiver(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal GpsSecond_Receiver raw initial value.
 */
#define START_RevrGpsTime_GpsSecond_Receiver        0

/**
 * Signal GpsSecond_Receiver raw minimum value.
 */
#define MIN_RevrGpsTime_GpsSecond_Receiver          0

/**
 * Signal GpsSecond_Receiver raw maximum value.
 */
#define MAX_RevrGpsTime_GpsSecond_Receiver          0

/**
 * Signal GpsSecond_Receiver raw offset value.
 */
#define OFF_RevrGpsTime_GpsSecond_Receiver          0

/**
 * @}
 */

/**
 * @defgroup SIG_RevrGpsTime_GpsWeek_Receiver Signal GpsWeek_Receiver of Message RevrGpsTime (0x731)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RevrGpsTime
 * @{
 */

/**
 * Signal GpsWeek_Receiver configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RevrGpsTime_GpsWeek_Receiver and \ref GET_RevrGpsTime_GpsWeek_Receiver instead.
 */
#define SIG_RevrGpsTime_GpsWeek_Receiver            1, 0, 7, 16

/**
 * Signal GpsWeek_Receiver setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RevrGpsTime_GpsWeek_Receiver or \ref INIT_RevrGpsTime instead.
 */
#define SETUP_RevrGpsTime_GpsWeek_Receiver          1, 0, 7, 16, 0

/**
 * Get signal GpsWeek_Receiver from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RevrGpsTime_GpsWeek_Receiver(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GpsWeek_Receiver in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RevrGpsTime_GpsWeek_Receiver(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GpsWeek_Receiver in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RevrGpsTime_GpsWeek_Receiver(buf) \
	SET_RevrGpsTime_GpsWeek_Receiver(buf, 0)

/**
 * Signal GpsWeek_Receiver value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RevrGpsTime_GpsWeek_Receiver(x, fmt) \
	((x) * fmt)

/**
 * Signal GpsWeek_Receiver raw initial value.
 */
#define START_RevrGpsTime_GpsWeek_Receiver          0

/**
 * Signal GpsWeek_Receiver raw minimum value.
 */
#define MIN_RevrGpsTime_GpsWeek_Receiver            0

/**
 * Signal GpsWeek_Receiver raw maximum value.
 */
#define MAX_RevrGpsTime_GpsWeek_Receiver            0

/**
 * Signal GpsWeek_Receiver raw offset value.
 */
#define OFF_RevrGpsTime_GpsWeek_Receiver            0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_3_Gyro_Z Signal Gyro_Z of Message IMU_3 (0x723)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_3
 * @{
 */

/**
 * Signal Gyro_Z configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_3_Gyro_Z and \ref GET_IMU_3_Gyro_Z instead.
 */
#define SIG_IMU_3_Gyro_Z                            1, 1, 39, 32

/**
 * Signal Gyro_Z setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_3_Gyro_Z or \ref INIT_IMU_3 instead.
 */
#define SETUP_IMU_3_Gyro_Z                          1, 1, 39, 32, 0

/**
 * Get signal Gyro_Z from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_3_Gyro_Z(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Gyro_Z in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_3_Gyro_Z(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Gyro_Z in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_3_Gyro_Z(buf) \
	SET_IMU_3_Gyro_Z(buf, 0)

/**
 * Signal Gyro_Z value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_3_Gyro_Z(x, fmt) \
	((x) * fmt * 306 / 2147483647)

/**
 * Signal Gyro_Z raw initial value.
 */
#define START_IMU_3_Gyro_Z                          0

/**
 * Signal Gyro_Z raw minimum value.
 */
#define MIN_IMU_3_Gyro_Z                            0

/**
 * Signal Gyro_Z raw maximum value.
 */
#define MAX_IMU_3_Gyro_Z                            0

/**
 * Signal Gyro_Z raw offset value.
 */
#define OFF_IMU_3_Gyro_Z                            0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_3_Gyro_Y Signal Gyro_Y of Message IMU_3 (0x723)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_3
 * @{
 */

/**
 * Signal Gyro_Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_3_Gyro_Y and \ref GET_IMU_3_Gyro_Y instead.
 */
#define SIG_IMU_3_Gyro_Y                            1, 1, 7, 32

/**
 * Signal Gyro_Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_3_Gyro_Y or \ref INIT_IMU_3 instead.
 */
#define SETUP_IMU_3_Gyro_Y                          1, 1, 7, 32, 0

/**
 * Get signal Gyro_Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_3_Gyro_Y(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[1] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Gyro_Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_3_Gyro_Y(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Gyro_Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_3_Gyro_Y(buf) \
	SET_IMU_3_Gyro_Y(buf, 0)

/**
 * Signal Gyro_Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_3_Gyro_Y(x, fmt) \
	((x) * fmt * 306 / 2147483647)

/**
 * Signal Gyro_Y raw initial value.
 */
#define START_IMU_3_Gyro_Y                          0

/**
 * Signal Gyro_Y raw minimum value.
 */
#define MIN_IMU_3_Gyro_Y                            0

/**
 * Signal Gyro_Y raw maximum value.
 */
#define MAX_IMU_3_Gyro_Y                            0

/**
 * Signal Gyro_Y raw offset value.
 */
#define OFF_IMU_3_Gyro_Y                            0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_2_Gyro_X Signal Gyro_X of Message IMU_2 (0x722)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_2
 * @{
 */

/**
 * Signal Gyro_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_2_Gyro_X and \ref GET_IMU_2_Gyro_X instead.
 */
#define SIG_IMU_2_Gyro_X                            1, 1, 39, 32

/**
 * Signal Gyro_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_2_Gyro_X or \ref INIT_IMU_2 instead.
 */
#define SETUP_IMU_2_Gyro_X                          1, 1, 39, 32, 0

/**
 * Get signal Gyro_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_2_Gyro_X(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Gyro_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_2_Gyro_X(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Gyro_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_2_Gyro_X(buf) \
	SET_IMU_2_Gyro_X(buf, 0)

/**
 * Signal Gyro_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_2_Gyro_X(x, fmt) \
	((x) * fmt * 306 / 2147483647)

/**
 * Signal Gyro_X raw initial value.
 */
#define START_IMU_2_Gyro_X                          0

/**
 * Signal Gyro_X raw minimum value.
 */
#define MIN_IMU_2_Gyro_X                            0

/**
 * Signal Gyro_X raw maximum value.
 */
#define MAX_IMU_2_Gyro_X                            0

/**
 * Signal Gyro_X raw offset value.
 */
#define OFF_IMU_2_Gyro_X                            0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_2_Accel_Z Signal Accel_Z of Message IMU_2 (0x722)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_2
 * @{
 */

/**
 * Signal Accel_Z configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_2_Accel_Z and \ref GET_IMU_2_Accel_Z instead.
 */
#define SIG_IMU_2_Accel_Z                           1, 1, 7, 32

/**
 * Signal Accel_Z setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_2_Accel_Z or \ref INIT_IMU_2 instead.
 */
#define SETUP_IMU_2_Accel_Z                         1, 1, 7, 32, 0

/**
 * Get signal Accel_Z from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_2_Accel_Z(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[1] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Accel_Z in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_2_Accel_Z(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Accel_Z in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_2_Accel_Z(buf) \
	SET_IMU_2_Accel_Z(buf, 0)

/**
 * Signal Accel_Z value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_2_Accel_Z(x, fmt) \
	((x) * fmt * 306 / 2147483647)

/**
 * Signal Accel_Z raw initial value.
 */
#define START_IMU_2_Accel_Z                         0

/**
 * Signal Accel_Z raw minimum value.
 */
#define MIN_IMU_2_Accel_Z                           0

/**
 * Signal Accel_Z raw maximum value.
 */
#define MAX_IMU_2_Accel_Z                           0

/**
 * Signal Accel_Z raw offset value.
 */
#define OFF_IMU_2_Accel_Z                           0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_1_Accel_Y Signal Accel_Y of Message IMU_1 (0x721)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_1
 * @{
 */

/**
 * Signal Accel_Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_1_Accel_Y and \ref GET_IMU_1_Accel_Y instead.
 */
#define SIG_IMU_1_Accel_Y                           1, 1, 39, 32

/**
 * Signal Accel_Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_1_Accel_Y or \ref INIT_IMU_1 instead.
 */
#define SETUP_IMU_1_Accel_Y                         1, 1, 39, 32, 0

/**
 * Get signal Accel_Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_1_Accel_Y(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Accel_Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_1_Accel_Y(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Accel_Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_1_Accel_Y(buf) \
	SET_IMU_1_Accel_Y(buf, 0)

/**
 * Signal Accel_Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_1_Accel_Y(x, fmt) \
	((x) * fmt * 306 / 2147483647)

/**
 * Signal Accel_Y raw initial value.
 */
#define START_IMU_1_Accel_Y                         0

/**
 * Signal Accel_Y raw minimum value.
 */
#define MIN_IMU_1_Accel_Y                           0

/**
 * Signal Accel_Y raw maximum value.
 */
#define MAX_IMU_1_Accel_Y                           0

/**
 * Signal Accel_Y raw offset value.
 */
#define OFF_IMU_1_Accel_Y                           0

/**
 * @}
 */

/**
 * @defgroup SIG_IMU_1_Accel_X Signal Accel_X of Message IMU_1 (0x721)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_IMU_1
 * @{
 */

/**
 * Signal Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_IMU_1_Accel_X and \ref GET_IMU_1_Accel_X instead.
 */
#define SIG_IMU_1_Accel_X                           1, 1, 7, 32

/**
 * Signal Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_IMU_1_Accel_X or \ref INIT_IMU_1 instead.
 */
#define SETUP_IMU_1_Accel_X                         1, 1, 7, 32, 0

/**
 * Get signal Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_IMU_1_Accel_X(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[1] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_IMU_1_Accel_X(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_IMU_1_Accel_X(buf) \
	SET_IMU_1_Accel_X(buf, 0)

/**
 * Signal Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_IMU_1_Accel_X(x, fmt) \
	((x) * fmt * 306 / 2147483647)

/**
 * Signal Accel_X raw initial value.
 */
#define START_IMU_1_Accel_X                         0

/**
 * Signal Accel_X raw minimum value.
 */
#define MIN_IMU_1_Accel_X                           0

/**
 * Signal Accel_X raw maximum value.
 */
#define MAX_IMU_1_Accel_X                           0

/**
 * Signal Accel_X raw offset value.
 */
#define OFF_IMU_1_Accel_X                           0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineStatus_GpsFlag Signal GpsFlag of Message CombineStatus (0x710)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineStatus
 * @{
 */

/**
 * Signal GpsFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineStatus_GpsFlag and \ref GET_CombineStatus_GpsFlag instead.
 */
#define SIG_CombineStatus_GpsFlag                   1, 0, 23, 8

/**
 * Signal GpsFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineStatus_GpsFlag or \ref INIT_CombineStatus instead.
 */
#define SETUP_CombineStatus_GpsFlag                 1, 0, 23, 8, 0

/**
 * Get signal GpsFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineStatus_GpsFlag(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GpsFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineStatus_GpsFlag(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GpsFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineStatus_GpsFlag(buf) \
	SET_CombineStatus_GpsFlag(buf, 0)

/**
 * Signal GpsFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineStatus_GpsFlag(x, fmt) \
	((x) * fmt)

/**
 * Signal GpsFlag raw initial value.
 */
#define START_CombineStatus_GpsFlag                 0

/**
 * Signal GpsFlag raw minimum value.
 */
#define MIN_CombineStatus_GpsFlag                   0

/**
 * Signal GpsFlag raw maximum value.
 */
#define MAX_CombineStatus_GpsFlag                   0

/**
 * Signal GpsFlag raw offset value.
 */
#define OFF_CombineStatus_GpsFlag                   0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineStatus_DmiFlag Signal DmiFlag of Message CombineStatus (0x710)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineStatus
 * @{
 */

/**
 * Signal DmiFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineStatus_DmiFlag and \ref GET_CombineStatus_DmiFlag instead.
 */
#define SIG_CombineStatus_DmiFlag                   1, 0, 15, 8

/**
 * Signal DmiFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineStatus_DmiFlag or \ref INIT_CombineStatus instead.
 */
#define SETUP_CombineStatus_DmiFlag                 1, 0, 15, 8, 0

/**
 * Get signal DmiFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineStatus_DmiFlag(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal DmiFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineStatus_DmiFlag(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal DmiFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineStatus_DmiFlag(buf) \
	SET_CombineStatus_DmiFlag(buf, 0)

/**
 * Signal DmiFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineStatus_DmiFlag(x, fmt) \
	((x) * fmt)

/**
 * Signal DmiFlag raw initial value.
 */
#define START_CombineStatus_DmiFlag                 0

/**
 * Signal DmiFlag raw minimum value.
 */
#define MIN_CombineStatus_DmiFlag                   0

/**
 * Signal DmiFlag raw maximum value.
 */
#define MAX_CombineStatus_DmiFlag                   0

/**
 * Signal DmiFlag raw offset value.
 */
#define OFF_CombineStatus_DmiFlag                   0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineStatus_NavFlag Signal NavFlag of Message CombineStatus (0x710)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineStatus
 * @{
 */

/**
 * Signal NavFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineStatus_NavFlag and \ref GET_CombineStatus_NavFlag instead.
 */
#define SIG_CombineStatus_NavFlag                   1, 0, 7, 8

/**
 * Signal NavFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineStatus_NavFlag or \ref INIT_CombineStatus instead.
 */
#define SETUP_CombineStatus_NavFlag                 1, 0, 7, 8, 0

/**
 * Get signal NavFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineStatus_NavFlag(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal NavFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineStatus_NavFlag(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal NavFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineStatus_NavFlag(buf) \
	SET_CombineStatus_NavFlag(buf, 0)

/**
 * Signal NavFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineStatus_NavFlag(x, fmt) \
	((x) * fmt)

/**
 * Signal NavFlag raw initial value.
 */
#define START_CombineStatus_NavFlag                 0

/**
 * Signal NavFlag raw minimum value.
 */
#define MIN_CombineStatus_NavFlag                   0

/**
 * Signal NavFlag raw maximum value.
 */
#define MAX_CombineStatus_NavFlag                   0

/**
 * Signal NavFlag raw offset value.
 */
#define OFF_CombineStatus_NavFlag                   0

/**
 * @}
 */

/**
 * @defgroup SIG_StdAttitude_RollStd Signal RollStd of Message StdAttitude (0x709)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_StdAttitude
 * @{
 */

/**
 * Signal RollStd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_StdAttitude_RollStd and \ref GET_StdAttitude_RollStd instead.
 */
#define SIG_StdAttitude_RollStd                     1, 0, 39, 16

/**
 * Signal RollStd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_StdAttitude_RollStd or \ref INIT_StdAttitude instead.
 */
#define SETUP_StdAttitude_RollStd                   1, 0, 39, 16, 0

/**
 * Get signal RollStd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_StdAttitude_RollStd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RollStd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_StdAttitude_RollStd(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RollStd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_StdAttitude_RollStd(buf) \
	SET_StdAttitude_RollStd(buf, 0)

/**
 * Signal RollStd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_StdAttitude_RollStd(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal RollStd raw initial value.
 */
#define START_StdAttitude_RollStd                   0

/**
 * Signal RollStd raw minimum value.
 */
#define MIN_StdAttitude_RollStd                     0

/**
 * Signal RollStd raw maximum value.
 */
#define MAX_StdAttitude_RollStd                     0

/**
 * Signal RollStd raw offset value.
 */
#define OFF_StdAttitude_RollStd                     0

/**
 * @}
 */

/**
 * @defgroup SIG_StdAttitude_PitchStd Signal PitchStd of Message StdAttitude (0x709)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_StdAttitude
 * @{
 */

/**
 * Signal PitchStd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_StdAttitude_PitchStd and \ref GET_StdAttitude_PitchStd instead.
 */
#define SIG_StdAttitude_PitchStd                    1, 0, 23, 16

/**
 * Signal PitchStd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_StdAttitude_PitchStd or \ref INIT_StdAttitude instead.
 */
#define SETUP_StdAttitude_PitchStd                  1, 0, 23, 16, 0

/**
 * Get signal PitchStd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_StdAttitude_PitchStd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PitchStd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_StdAttitude_PitchStd(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PitchStd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_StdAttitude_PitchStd(buf) \
	SET_StdAttitude_PitchStd(buf, 0)

/**
 * Signal PitchStd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_StdAttitude_PitchStd(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal PitchStd raw initial value.
 */
#define START_StdAttitude_PitchStd                  0

/**
 * Signal PitchStd raw minimum value.
 */
#define MIN_StdAttitude_PitchStd                    0

/**
 * Signal PitchStd raw maximum value.
 */
#define MAX_StdAttitude_PitchStd                    0

/**
 * Signal PitchStd raw offset value.
 */
#define OFF_StdAttitude_PitchStd                    0

/**
 * @}
 */

/**
 * @defgroup SIG_StdAttitude_YawStd Signal YawStd of Message StdAttitude (0x709)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_StdAttitude
 * @{
 */

/**
 * Signal YawStd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_StdAttitude_YawStd and \ref GET_StdAttitude_YawStd instead.
 */
#define SIG_StdAttitude_YawStd                      1, 0, 7, 16

/**
 * Signal YawStd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_StdAttitude_YawStd or \ref INIT_StdAttitude instead.
 */
#define SETUP_StdAttitude_YawStd                    1, 0, 7, 16, 0

/**
 * Get signal YawStd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_StdAttitude_YawStd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal YawStd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_StdAttitude_YawStd(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal YawStd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_StdAttitude_YawStd(buf) \
	SET_StdAttitude_YawStd(buf, 0)

/**
 * Signal YawStd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_StdAttitude_YawStd(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal YawStd raw initial value.
 */
#define START_StdAttitude_YawStd                    0

/**
 * Signal YawStd raw minimum value.
 */
#define MIN_StdAttitude_YawStd                      0

/**
 * Signal YawStd raw maximum value.
 */
#define MAX_StdAttitude_YawStd                      0

/**
 * Signal YawStd raw offset value.
 */
#define OFF_StdAttitude_YawStd                      0

/**
 * @}
 */

/**
 * @defgroup SIG_StdVelocity_VelocityUpStd Signal VelocityUpStd of Message StdVelocity (0x708)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_StdVelocity
 * @{
 */

/**
 * Signal VelocityUpStd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_StdVelocity_VelocityUpStd and \ref GET_StdVelocity_VelocityUpStd instead.
 */
#define SIG_StdVelocity_VelocityUpStd               1, 0, 39, 16

/**
 * Signal VelocityUpStd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_StdVelocity_VelocityUpStd or \ref INIT_StdVelocity instead.
 */
#define SETUP_StdVelocity_VelocityUpStd             1, 0, 39, 16, 0

/**
 * Get signal VelocityUpStd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_StdVelocity_VelocityUpStd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityUpStd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_StdVelocity_VelocityUpStd(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityUpStd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_StdVelocity_VelocityUpStd(buf) \
	SET_StdVelocity_VelocityUpStd(buf, 0)

/**
 * Signal VelocityUpStd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_StdVelocity_VelocityUpStd(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal VelocityUpStd raw initial value.
 */
#define START_StdVelocity_VelocityUpStd             0

/**
 * Signal VelocityUpStd raw minimum value.
 */
#define MIN_StdVelocity_VelocityUpStd               0

/**
 * Signal VelocityUpStd raw maximum value.
 */
#define MAX_StdVelocity_VelocityUpStd               0

/**
 * Signal VelocityUpStd raw offset value.
 */
#define OFF_StdVelocity_VelocityUpStd               0

/**
 * @}
 */

/**
 * @defgroup SIG_StdVelocity_VelocityNorthStd Signal VelocityNorthStd of Message StdVelocity (0x708)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_StdVelocity
 * @{
 */

/**
 * Signal VelocityNorthStd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_StdVelocity_VelocityNorthStd and \ref GET_StdVelocity_VelocityNorthStd instead.
 */
#define SIG_StdVelocity_VelocityNorthStd            1, 0, 23, 16

/**
 * Signal VelocityNorthStd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_StdVelocity_VelocityNorthStd or \ref INIT_StdVelocity instead.
 */
#define SETUP_StdVelocity_VelocityNorthStd          1, 0, 23, 16, 0

/**
 * Get signal VelocityNorthStd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_StdVelocity_VelocityNorthStd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityNorthStd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_StdVelocity_VelocityNorthStd(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityNorthStd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_StdVelocity_VelocityNorthStd(buf) \
	SET_StdVelocity_VelocityNorthStd(buf, 0)

/**
 * Signal VelocityNorthStd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_StdVelocity_VelocityNorthStd(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal VelocityNorthStd raw initial value.
 */
#define START_StdVelocity_VelocityNorthStd          0

/**
 * Signal VelocityNorthStd raw minimum value.
 */
#define MIN_StdVelocity_VelocityNorthStd            0

/**
 * Signal VelocityNorthStd raw maximum value.
 */
#define MAX_StdVelocity_VelocityNorthStd            0

/**
 * Signal VelocityNorthStd raw offset value.
 */
#define OFF_StdVelocity_VelocityNorthStd            0

/**
 * @}
 */

/**
 * @defgroup SIG_StdVelocity_VelocityEastStd Signal VelocityEastStd of Message StdVelocity (0x708)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_StdVelocity
 * @{
 */

/**
 * Signal VelocityEastStd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_StdVelocity_VelocityEastStd and \ref GET_StdVelocity_VelocityEastStd instead.
 */
#define SIG_StdVelocity_VelocityEastStd             1, 0, 7, 16

/**
 * Signal VelocityEastStd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_StdVelocity_VelocityEastStd or \ref INIT_StdVelocity instead.
 */
#define SETUP_StdVelocity_VelocityEastStd           1, 0, 7, 16, 0

/**
 * Get signal VelocityEastStd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_StdVelocity_VelocityEastStd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityEastStd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_StdVelocity_VelocityEastStd(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityEastStd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_StdVelocity_VelocityEastStd(buf) \
	SET_StdVelocity_VelocityEastStd(buf, 0)

/**
 * Signal VelocityEastStd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_StdVelocity_VelocityEastStd(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal VelocityEastStd raw initial value.
 */
#define START_StdVelocity_VelocityEastStd           0

/**
 * Signal VelocityEastStd raw minimum value.
 */
#define MIN_StdVelocity_VelocityEastStd             0

/**
 * Signal VelocityEastStd raw maximum value.
 */
#define MAX_StdVelocity_VelocityEastStd             0

/**
 * Signal VelocityEastStd raw offset value.
 */
#define OFF_StdVelocity_VelocityEastStd             0

/**
 * @}
 */

/**
 * @defgroup SIG_StdPosition_AltitudeStd Signal AltitudeStd of Message StdPosition (0x707)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_StdPosition
 * @{
 */

/**
 * Signal AltitudeStd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_StdPosition_AltitudeStd and \ref GET_StdPosition_AltitudeStd instead.
 */
#define SIG_StdPosition_AltitudeStd                 1, 0, 39, 16

/**
 * Signal AltitudeStd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_StdPosition_AltitudeStd or \ref INIT_StdPosition instead.
 */
#define SETUP_StdPosition_AltitudeStd               1, 0, 39, 16, 0

/**
 * Get signal AltitudeStd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_StdPosition_AltitudeStd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal AltitudeStd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_StdPosition_AltitudeStd(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal AltitudeStd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_StdPosition_AltitudeStd(buf) \
	SET_StdPosition_AltitudeStd(buf, 0)

/**
 * Signal AltitudeStd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_StdPosition_AltitudeStd(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal AltitudeStd raw initial value.
 */
#define START_StdPosition_AltitudeStd               0

/**
 * Signal AltitudeStd raw minimum value.
 */
#define MIN_StdPosition_AltitudeStd                 0

/**
 * Signal AltitudeStd raw maximum value.
 */
#define MAX_StdPosition_AltitudeStd                 0

/**
 * Signal AltitudeStd raw offset value.
 */
#define OFF_StdPosition_AltitudeStd                 0

/**
 * @}
 */

/**
 * @defgroup SIG_StdPosition_LongitudeStd Signal LongitudeStd of Message StdPosition (0x707)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_StdPosition
 * @{
 */

/**
 * Signal LongitudeStd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_StdPosition_LongitudeStd and \ref GET_StdPosition_LongitudeStd instead.
 */
#define SIG_StdPosition_LongitudeStd                1, 0, 23, 16

/**
 * Signal LongitudeStd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_StdPosition_LongitudeStd or \ref INIT_StdPosition instead.
 */
#define SETUP_StdPosition_LongitudeStd              1, 0, 23, 16, 0

/**
 * Get signal LongitudeStd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_StdPosition_LongitudeStd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal LongitudeStd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_StdPosition_LongitudeStd(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal LongitudeStd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_StdPosition_LongitudeStd(buf) \
	SET_StdPosition_LongitudeStd(buf, 0)

/**
 * Signal LongitudeStd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_StdPosition_LongitudeStd(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal LongitudeStd raw initial value.
 */
#define START_StdPosition_LongitudeStd              0

/**
 * Signal LongitudeStd raw minimum value.
 */
#define MIN_StdPosition_LongitudeStd                0

/**
 * Signal LongitudeStd raw maximum value.
 */
#define MAX_StdPosition_LongitudeStd                0

/**
 * Signal LongitudeStd raw offset value.
 */
#define OFF_StdPosition_LongitudeStd                0

/**
 * @}
 */

/**
 * @defgroup SIG_StdPosition_LatitudeStd Signal LatitudeStd of Message StdPosition (0x707)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_StdPosition
 * @{
 */

/**
 * Signal LatitudeStd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_StdPosition_LatitudeStd and \ref GET_StdPosition_LatitudeStd instead.
 */
#define SIG_StdPosition_LatitudeStd                 1, 0, 7, 16

/**
 * Signal LatitudeStd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_StdPosition_LatitudeStd or \ref INIT_StdPosition instead.
 */
#define SETUP_StdPosition_LatitudeStd               1, 0, 7, 16, 0

/**
 * Get signal LatitudeStd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_StdPosition_LatitudeStd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal LatitudeStd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_StdPosition_LatitudeStd(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal LatitudeStd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_StdPosition_LatitudeStd(buf) \
	SET_StdPosition_LatitudeStd(buf, 0)

/**
 * Signal LatitudeStd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_StdPosition_LatitudeStd(x, fmt) \
	((x) * fmt / 10000)

/**
 * Signal LatitudeStd raw initial value.
 */
#define START_StdPosition_LatitudeStd               0

/**
 * Signal LatitudeStd raw minimum value.
 */
#define MIN_StdPosition_LatitudeStd                 0

/**
 * Signal LatitudeStd raw maximum value.
 */
#define MAX_StdPosition_LatitudeStd                 0

/**
 * Signal LatitudeStd raw offset value.
 */
#define OFF_StdPosition_LatitudeStd                 0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineAttitude_Roll Signal Roll of Message CombineAttitude (0x706)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineAttitude
 * @{
 */

/**
 * Signal Roll configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineAttitude_Roll and \ref GET_CombineAttitude_Roll instead.
 */
#define SIG_CombineAttitude_Roll                    1, 1, 47, 20

/**
 * Signal Roll setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineAttitude_Roll or \ref INIT_CombineAttitude instead.
 */
#define SETUP_CombineAttitude_Roll                  1, 1, 47, 20, 0

/**
 * Get signal Roll from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineAttitude_Roll(buf) (0 \
	| (uint32_t)(-(uint32_t)((buf[5] >> 7) & 0x01) << 20) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 12) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 4) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Roll in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineAttitude_Roll(buf, val) { \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 12) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[7] &= ~(0x0f << 4); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Roll in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineAttitude_Roll(buf) \
	SET_CombineAttitude_Roll(buf, 0)

/**
 * Signal Roll value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineAttitude_Roll(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal Roll raw initial value.
 */
#define START_CombineAttitude_Roll                  0

/**
 * Signal Roll raw minimum value.
 */
#define MIN_CombineAttitude_Roll                    -180000

/**
 * Signal Roll raw maximum value.
 */
#define MAX_CombineAttitude_Roll                    180000

/**
 * Signal Roll raw offset value.
 */
#define OFF_CombineAttitude_Roll                    0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineAttitude_Pitch Signal Pitch of Message CombineAttitude (0x706)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineAttitude
 * @{
 */

/**
 * Signal Pitch configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineAttitude_Pitch and \ref GET_CombineAttitude_Pitch instead.
 */
#define SIG_CombineAttitude_Pitch                   1, 1, 19, 20

/**
 * Signal Pitch setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineAttitude_Pitch or \ref INIT_CombineAttitude instead.
 */
#define SETUP_CombineAttitude_Pitch                 1, 1, 19, 20, 0

/**
 * Get signal Pitch from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineAttitude_Pitch(buf) (0 \
	| (uint32_t)(-(uint32_t)((buf[2] >> 3) & 0x01) << 20) \
	| (uint32_t)(+(uint32_t)((buf[2] >> 0) & 0x0f) << 16) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Pitch in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineAttitude_Pitch(buf, val) { \
	buf[2] &= ~(0x0f << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 16) & 0x0f) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Pitch in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineAttitude_Pitch(buf) \
	SET_CombineAttitude_Pitch(buf, 0)

/**
 * Signal Pitch value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineAttitude_Pitch(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal Pitch raw initial value.
 */
#define START_CombineAttitude_Pitch                 0

/**
 * Signal Pitch raw minimum value.
 */
#define MIN_CombineAttitude_Pitch                   -90000

/**
 * Signal Pitch raw maximum value.
 */
#define MAX_CombineAttitude_Pitch                   90000

/**
 * Signal Pitch raw offset value.
 */
#define OFF_CombineAttitude_Pitch                   0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineAttitude_Yaw Signal Yaw of Message CombineAttitude (0x706)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineAttitude
 * @{
 */

/**
 * Signal Yaw configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineAttitude_Yaw and \ref GET_CombineAttitude_Yaw instead.
 */
#define SIG_CombineAttitude_Yaw                     1, 0, 7, 20

/**
 * Signal Yaw setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineAttitude_Yaw or \ref INIT_CombineAttitude instead.
 */
#define SETUP_CombineAttitude_Yaw                   1, 0, 7, 20, 0

/**
 * Get signal Yaw from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineAttitude_Yaw(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 12) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 4) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Yaw in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineAttitude_Yaw(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 12) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[2] &= ~(0x0f << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Yaw in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineAttitude_Yaw(buf) \
	SET_CombineAttitude_Yaw(buf, 0)

/**
 * Signal Yaw value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineAttitude_Yaw(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal Yaw raw initial value.
 */
#define START_CombineAttitude_Yaw                   0

/**
 * Signal Yaw raw minimum value.
 */
#define MIN_CombineAttitude_Yaw                     0

/**
 * Signal Yaw raw maximum value.
 */
#define MAX_CombineAttitude_Yaw                     360000

/**
 * Signal Yaw raw offset value.
 */
#define OFF_CombineAttitude_Yaw                     0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineVelocity_VelocityHorizon Signal VelocityHorizon of Message CombineVelocity (0x705)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineVelocity
 * @{
 */

/**
 * Signal VelocityHorizon configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineVelocity_VelocityHorizon and \ref GET_CombineVelocity_VelocityHorizon instead.
 */
#define SIG_CombineVelocity_VelocityHorizon         1, 1, 55, 16

/**
 * Signal VelocityHorizon setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineVelocity_VelocityHorizon or \ref INIT_CombineVelocity instead.
 */
#define SETUP_CombineVelocity_VelocityHorizon       1, 1, 55, 16, 0

/**
 * Get signal VelocityHorizon from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineVelocity_VelocityHorizon(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityHorizon in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineVelocity_VelocityHorizon(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityHorizon in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineVelocity_VelocityHorizon(buf) \
	SET_CombineVelocity_VelocityHorizon(buf, 0)

/**
 * Signal VelocityHorizon value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineVelocity_VelocityHorizon(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal VelocityHorizon raw initial value.
 */
#define START_CombineVelocity_VelocityHorizon       0

/**
 * Signal VelocityHorizon raw minimum value.
 */
#define MIN_CombineVelocity_VelocityHorizon         0

/**
 * Signal VelocityHorizon raw maximum value.
 */
#define MAX_CombineVelocity_VelocityHorizon         0

/**
 * Signal VelocityHorizon raw offset value.
 */
#define OFF_CombineVelocity_VelocityHorizon         0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineVelocity_VelocityUp Signal VelocityUp of Message CombineVelocity (0x705)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineVelocity
 * @{
 */

/**
 * Signal VelocityUp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineVelocity_VelocityUp and \ref GET_CombineVelocity_VelocityUp instead.
 */
#define SIG_CombineVelocity_VelocityUp              1, 1, 39, 16

/**
 * Signal VelocityUp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineVelocity_VelocityUp or \ref INIT_CombineVelocity instead.
 */
#define SETUP_CombineVelocity_VelocityUp            1, 1, 39, 16, 0

/**
 * Get signal VelocityUp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineVelocity_VelocityUp(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityUp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineVelocity_VelocityUp(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityUp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineVelocity_VelocityUp(buf) \
	SET_CombineVelocity_VelocityUp(buf, 0)

/**
 * Signal VelocityUp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineVelocity_VelocityUp(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal VelocityUp raw initial value.
 */
#define START_CombineVelocity_VelocityUp            0

/**
 * Signal VelocityUp raw minimum value.
 */
#define MIN_CombineVelocity_VelocityUp              0

/**
 * Signal VelocityUp raw maximum value.
 */
#define MAX_CombineVelocity_VelocityUp              0

/**
 * Signal VelocityUp raw offset value.
 */
#define OFF_CombineVelocity_VelocityUp              0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineVelocity_VelocityNorth Signal VelocityNorth of Message CombineVelocity (0x705)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineVelocity
 * @{
 */

/**
 * Signal VelocityNorth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineVelocity_VelocityNorth and \ref GET_CombineVelocity_VelocityNorth instead.
 */
#define SIG_CombineVelocity_VelocityNorth           1, 1, 23, 16

/**
 * Signal VelocityNorth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineVelocity_VelocityNorth or \ref INIT_CombineVelocity instead.
 */
#define SETUP_CombineVelocity_VelocityNorth         1, 1, 23, 16, 0

/**
 * Get signal VelocityNorth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineVelocity_VelocityNorth(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityNorth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineVelocity_VelocityNorth(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityNorth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineVelocity_VelocityNorth(buf) \
	SET_CombineVelocity_VelocityNorth(buf, 0)

/**
 * Signal VelocityNorth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineVelocity_VelocityNorth(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal VelocityNorth raw initial value.
 */
#define START_CombineVelocity_VelocityNorth         0

/**
 * Signal VelocityNorth raw minimum value.
 */
#define MIN_CombineVelocity_VelocityNorth           0

/**
 * Signal VelocityNorth raw maximum value.
 */
#define MAX_CombineVelocity_VelocityNorth           0

/**
 * Signal VelocityNorth raw offset value.
 */
#define OFF_CombineVelocity_VelocityNorth           0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineVelocity_VelocityEast Signal VelocityEast of Message CombineVelocity (0x705)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineVelocity
 * @{
 */

/**
 * Signal VelocityEast configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineVelocity_VelocityEast and \ref GET_CombineVelocity_VelocityEast instead.
 */
#define SIG_CombineVelocity_VelocityEast            1, 1, 7, 16

/**
 * Signal VelocityEast setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineVelocity_VelocityEast or \ref INIT_CombineVelocity instead.
 */
#define SETUP_CombineVelocity_VelocityEast          1, 1, 7, 16, 0

/**
 * Get signal VelocityEast from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineVelocity_VelocityEast(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VelocityEast in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineVelocity_VelocityEast(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VelocityEast in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineVelocity_VelocityEast(buf) \
	SET_CombineVelocity_VelocityEast(buf, 0)

/**
 * Signal VelocityEast value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineVelocity_VelocityEast(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal VelocityEast raw initial value.
 */
#define START_CombineVelocity_VelocityEast          0

/**
 * Signal VelocityEast raw minimum value.
 */
#define MIN_CombineVelocity_VelocityEast            0

/**
 * Signal VelocityEast raw maximum value.
 */
#define MAX_CombineVelocity_VelocityEast            0

/**
 * Signal VelocityEast raw offset value.
 */
#define OFF_CombineVelocity_VelocityEast            0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineAltitude_AltitudeUndulation Signal AltitudeUndulation of Message CombineAltitude (0x704)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineAltitude
 * @{
 */

/**
 * Signal AltitudeUndulation configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineAltitude_AltitudeUndulation and \ref GET_CombineAltitude_AltitudeUndulation instead.
 */
#define SIG_CombineAltitude_AltitudeUndulation        1, 1, 39, 32

/**
 * Signal AltitudeUndulation setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineAltitude_AltitudeUndulation or \ref INIT_CombineAltitude instead.
 */
#define SETUP_CombineAltitude_AltitudeUndulation      1, 1, 39, 32, 0

/**
 * Get signal AltitudeUndulation from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineAltitude_AltitudeUndulation(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal AltitudeUndulation in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineAltitude_AltitudeUndulation(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal AltitudeUndulation in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineAltitude_AltitudeUndulation(buf) \
	SET_CombineAltitude_AltitudeUndulation(buf, 0)

/**
 * Signal AltitudeUndulation value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineAltitude_AltitudeUndulation(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal AltitudeUndulation raw initial value.
 */
#define START_CombineAltitude_AltitudeUndulation      0

/**
 * Signal AltitudeUndulation raw minimum value.
 */
#define MIN_CombineAltitude_AltitudeUndulation        0

/**
 * Signal AltitudeUndulation raw maximum value.
 */
#define MAX_CombineAltitude_AltitudeUndulation        0

/**
 * Signal AltitudeUndulation raw offset value.
 */
#define OFF_CombineAltitude_AltitudeUndulation        0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineAltitude_Altitude Signal Altitude of Message CombineAltitude (0x704)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineAltitude
 * @{
 */

/**
 * Signal Altitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineAltitude_Altitude and \ref GET_CombineAltitude_Altitude instead.
 */
#define SIG_CombineAltitude_Altitude                1, 1, 7, 32

/**
 * Signal Altitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineAltitude_Altitude or \ref INIT_CombineAltitude instead.
 */
#define SETUP_CombineAltitude_Altitude              1, 1, 7, 32, 0

/**
 * Get signal Altitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineAltitude_Altitude(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[1] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Altitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineAltitude_Altitude(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Altitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineAltitude_Altitude(buf) \
	SET_CombineAltitude_Altitude(buf, 0)

/**
 * Signal Altitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineAltitude_Altitude(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal Altitude raw initial value.
 */
#define START_CombineAltitude_Altitude              0

/**
 * Signal Altitude raw minimum value.
 */
#define MIN_CombineAltitude_Altitude                0

/**
 * Signal Altitude raw maximum value.
 */
#define MAX_CombineAltitude_Altitude                0

/**
 * Signal Altitude raw offset value.
 */
#define OFF_CombineAltitude_Altitude                0

/**
 * @}
 */

/**
 * @defgroup SIG_CombinePosition_Longitude Signal Longitude of Message CombinePosition (0x703)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombinePosition
 * @{
 */

/**
 * Signal Longitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombinePosition_Longitude and \ref GET_CombinePosition_Longitude instead.
 */
#define SIG_CombinePosition_Longitude               1, 1, 39, 32

/**
 * Signal Longitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombinePosition_Longitude or \ref INIT_CombinePosition instead.
 */
#define SETUP_CombinePosition_Longitude             1, 1, 39, 32, 0

/**
 * Get signal Longitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombinePosition_Longitude(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Longitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombinePosition_Longitude(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Longitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombinePosition_Longitude(buf) \
	SET_CombinePosition_Longitude(buf, 0)

/**
 * Signal Longitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombinePosition_Longitude(x, fmt) \
	((x) * fmt / 10000000)

/**
 * Signal Longitude raw initial value.
 */
#define START_CombinePosition_Longitude             0

/**
 * Signal Longitude raw minimum value.
 */
#define MIN_CombinePosition_Longitude               -1800000000

/**
 * Signal Longitude raw maximum value.
 */
#define MAX_CombinePosition_Longitude               1800000000

/**
 * Signal Longitude raw offset value.
 */
#define OFF_CombinePosition_Longitude               0

/**
 * @}
 */

/**
 * @defgroup SIG_CombinePosition_Latitude Signal Latitude of Message CombinePosition (0x703)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombinePosition
 * @{
 */

/**
 * Signal Latitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombinePosition_Latitude and \ref GET_CombinePosition_Latitude instead.
 */
#define SIG_CombinePosition_Latitude                1, 1, 7, 32

/**
 * Signal Latitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombinePosition_Latitude or \ref INIT_CombinePosition instead.
 */
#define SETUP_CombinePosition_Latitude              1, 1, 7, 32, 0

/**
 * Get signal Latitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombinePosition_Latitude(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[1] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Latitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombinePosition_Latitude(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Latitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombinePosition_Latitude(buf) \
	SET_CombinePosition_Latitude(buf, 0)

/**
 * Signal Latitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombinePosition_Latitude(x, fmt) \
	((x) * fmt / 10000000)

/**
 * Signal Latitude raw initial value.
 */
#define START_CombinePosition_Latitude              0

/**
 * Signal Latitude raw minimum value.
 */
#define MIN_CombinePosition_Latitude                -900000000

/**
 * Signal Latitude raw maximum value.
 */
#define MAX_CombinePosition_Latitude                900000000

/**
 * Signal Latitude raw offset value.
 */
#define OFF_CombinePosition_Latitude                0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineUtcTime_UtcMilSecond Signal UtcMilSecond of Message CombineUtcTime (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineUtcTime
 * @{
 */

/**
 * Signal UtcMilSecond configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineUtcTime_UtcMilSecond and \ref GET_CombineUtcTime_UtcMilSecond instead.
 */
#define SIG_CombineUtcTime_UtcMilSecond             1, 0, 63, 8

/**
 * Signal UtcMilSecond setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineUtcTime_UtcMilSecond or \ref INIT_CombineUtcTime instead.
 */
#define SETUP_CombineUtcTime_UtcMilSecond           1, 0, 63, 8, 0

/**
 * Get signal UtcMilSecond from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineUtcTime_UtcMilSecond(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal UtcMilSecond in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineUtcTime_UtcMilSecond(buf, val) { \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal UtcMilSecond in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineUtcTime_UtcMilSecond(buf) \
	SET_CombineUtcTime_UtcMilSecond(buf, 0)

/**
 * Signal UtcMilSecond value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineUtcTime_UtcMilSecond(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal UtcMilSecond raw initial value.
 */
#define START_CombineUtcTime_UtcMilSecond           0

/**
 * Signal UtcMilSecond raw minimum value.
 */
#define MIN_CombineUtcTime_UtcMilSecond             0

/**
 * Signal UtcMilSecond raw maximum value.
 */
#define MAX_CombineUtcTime_UtcMilSecond             10000

/**
 * Signal UtcMilSecond raw offset value.
 */
#define OFF_CombineUtcTime_UtcMilSecond             0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineUtcTime_UtcSecond Signal UtcSecond of Message CombineUtcTime (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineUtcTime
 * @{
 */

/**
 * Signal UtcSecond configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineUtcTime_UtcSecond and \ref GET_CombineUtcTime_UtcSecond instead.
 */
#define SIG_CombineUtcTime_UtcSecond                1, 0, 55, 8

/**
 * Signal UtcSecond setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineUtcTime_UtcSecond or \ref INIT_CombineUtcTime instead.
 */
#define SETUP_CombineUtcTime_UtcSecond              1, 0, 55, 8, 0

/**
 * Get signal UtcSecond from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineUtcTime_UtcSecond(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal UtcSecond in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineUtcTime_UtcSecond(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal UtcSecond in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineUtcTime_UtcSecond(buf) \
	SET_CombineUtcTime_UtcSecond(buf, 0)

/**
 * Signal UtcSecond value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineUtcTime_UtcSecond(x, fmt) \
	((x) * fmt)

/**
 * Signal UtcSecond raw initial value.
 */
#define START_CombineUtcTime_UtcSecond              0

/**
 * Signal UtcSecond raw minimum value.
 */
#define MIN_CombineUtcTime_UtcSecond                0

/**
 * Signal UtcSecond raw maximum value.
 */
#define MAX_CombineUtcTime_UtcSecond                60

/**
 * Signal UtcSecond raw offset value.
 */
#define OFF_CombineUtcTime_UtcSecond                0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineUtcTime_UtcMinute Signal UtcMinute of Message CombineUtcTime (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineUtcTime
 * @{
 */

/**
 * Signal UtcMinute configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineUtcTime_UtcMinute and \ref GET_CombineUtcTime_UtcMinute instead.
 */
#define SIG_CombineUtcTime_UtcMinute                1, 0, 47, 8

/**
 * Signal UtcMinute setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineUtcTime_UtcMinute or \ref INIT_CombineUtcTime instead.
 */
#define SETUP_CombineUtcTime_UtcMinute              1, 0, 47, 8, 0

/**
 * Get signal UtcMinute from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineUtcTime_UtcMinute(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal UtcMinute in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineUtcTime_UtcMinute(buf, val) { \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal UtcMinute in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineUtcTime_UtcMinute(buf) \
	SET_CombineUtcTime_UtcMinute(buf, 0)

/**
 * Signal UtcMinute value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineUtcTime_UtcMinute(x, fmt) \
	((x) * fmt)

/**
 * Signal UtcMinute raw initial value.
 */
#define START_CombineUtcTime_UtcMinute              0

/**
 * Signal UtcMinute raw minimum value.
 */
#define MIN_CombineUtcTime_UtcMinute                0

/**
 * Signal UtcMinute raw maximum value.
 */
#define MAX_CombineUtcTime_UtcMinute                60

/**
 * Signal UtcMinute raw offset value.
 */
#define OFF_CombineUtcTime_UtcMinute                0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineUtcTime_UtcHour Signal UtcHour of Message CombineUtcTime (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineUtcTime
 * @{
 */

/**
 * Signal UtcHour configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineUtcTime_UtcHour and \ref GET_CombineUtcTime_UtcHour instead.
 */
#define SIG_CombineUtcTime_UtcHour                  1, 0, 39, 8

/**
 * Signal UtcHour setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineUtcTime_UtcHour or \ref INIT_CombineUtcTime instead.
 */
#define SETUP_CombineUtcTime_UtcHour                1, 0, 39, 8, 0

/**
 * Get signal UtcHour from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineUtcTime_UtcHour(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal UtcHour in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineUtcTime_UtcHour(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal UtcHour in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineUtcTime_UtcHour(buf) \
	SET_CombineUtcTime_UtcHour(buf, 0)

/**
 * Signal UtcHour value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineUtcTime_UtcHour(x, fmt) \
	((x) * fmt)

/**
 * Signal UtcHour raw initial value.
 */
#define START_CombineUtcTime_UtcHour                0

/**
 * Signal UtcHour raw minimum value.
 */
#define MIN_CombineUtcTime_UtcHour                  0

/**
 * Signal UtcHour raw maximum value.
 */
#define MAX_CombineUtcTime_UtcHour                  24

/**
 * Signal UtcHour raw offset value.
 */
#define OFF_CombineUtcTime_UtcHour                  0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineUtcTime_UtcDate Signal UtcDate of Message CombineUtcTime (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineUtcTime
 * @{
 */

/**
 * Signal UtcDate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineUtcTime_UtcDate and \ref GET_CombineUtcTime_UtcDate instead.
 */
#define SIG_CombineUtcTime_UtcDate                  1, 1, 31, 8

/**
 * Signal UtcDate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineUtcTime_UtcDate or \ref INIT_CombineUtcTime instead.
 */
#define SETUP_CombineUtcTime_UtcDate                1, 1, 31, 8, 0

/**
 * Get signal UtcDate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineUtcTime_UtcDate(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal UtcDate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineUtcTime_UtcDate(buf, val) { \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal UtcDate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineUtcTime_UtcDate(buf) \
	SET_CombineUtcTime_UtcDate(buf, 0)

/**
 * Signal UtcDate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineUtcTime_UtcDate(x, fmt) \
	((x) * fmt)

/**
 * Signal UtcDate raw initial value.
 */
#define START_CombineUtcTime_UtcDate                0

/**
 * Signal UtcDate raw minimum value.
 */
#define MIN_CombineUtcTime_UtcDate                  0

/**
 * Signal UtcDate raw maximum value.
 */
#define MAX_CombineUtcTime_UtcDate                  31

/**
 * Signal UtcDate raw offset value.
 */
#define OFF_CombineUtcTime_UtcDate                  0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineUtcTime_UtcMonth Signal UtcMonth of Message CombineUtcTime (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineUtcTime
 * @{
 */

/**
 * Signal UtcMonth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineUtcTime_UtcMonth and \ref GET_CombineUtcTime_UtcMonth instead.
 */
#define SIG_CombineUtcTime_UtcMonth                 1, 0, 23, 8

/**
 * Signal UtcMonth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineUtcTime_UtcMonth or \ref INIT_CombineUtcTime instead.
 */
#define SETUP_CombineUtcTime_UtcMonth               1, 0, 23, 8, 0

/**
 * Get signal UtcMonth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineUtcTime_UtcMonth(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
)

/**
 * Set signal UtcMonth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineUtcTime_UtcMonth(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal UtcMonth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineUtcTime_UtcMonth(buf) \
	SET_CombineUtcTime_UtcMonth(buf, 0)

/**
 * Signal UtcMonth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineUtcTime_UtcMonth(x, fmt) \
	((x) * fmt)

/**
 * Signal UtcMonth raw initial value.
 */
#define START_CombineUtcTime_UtcMonth               0

/**
 * Signal UtcMonth raw minimum value.
 */
#define MIN_CombineUtcTime_UtcMonth                 0

/**
 * Signal UtcMonth raw maximum value.
 */
#define MAX_CombineUtcTime_UtcMonth                 12

/**
 * Signal UtcMonth raw offset value.
 */
#define OFF_CombineUtcTime_UtcMonth                 0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineUtcTime_UtcYear Signal UtcYear of Message CombineUtcTime (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineUtcTime
 * @{
 */

/**
 * Signal UtcYear configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineUtcTime_UtcYear and \ref GET_CombineUtcTime_UtcYear instead.
 */
#define SIG_CombineUtcTime_UtcYear                  1, 0, 7, 16

/**
 * Signal UtcYear setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineUtcTime_UtcYear or \ref INIT_CombineUtcTime instead.
 */
#define SETUP_CombineUtcTime_UtcYear                1, 0, 7, 16, 0

/**
 * Get signal UtcYear from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineUtcTime_UtcYear(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal UtcYear in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineUtcTime_UtcYear(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal UtcYear in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineUtcTime_UtcYear(buf) \
	SET_CombineUtcTime_UtcYear(buf, 0)

/**
 * Signal UtcYear value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineUtcTime_UtcYear(x, fmt) \
	((x) * fmt)

/**
 * Signal UtcYear raw initial value.
 */
#define START_CombineUtcTime_UtcYear                0

/**
 * Signal UtcYear raw minimum value.
 */
#define MIN_CombineUtcTime_UtcYear                  0

/**
 * Signal UtcYear raw maximum value.
 */
#define MAX_CombineUtcTime_UtcYear                  0

/**
 * Signal UtcYear raw offset value.
 */
#define OFF_CombineUtcTime_UtcYear                  0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineGpsTime_GpsSecond Signal GpsSecond of Message CombineGpsTime (0x701)
 *
 * ×éºÏÏµÍ³GPSÃë
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineGpsTime
 * @{
 */

/**
 * Signal GpsSecond configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineGpsTime_GpsSecond and \ref GET_CombineGpsTime_GpsSecond instead.
 */
#define SIG_CombineGpsTime_GpsSecond                1, 0, 23, 32

/**
 * Signal GpsSecond setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineGpsTime_GpsSecond or \ref INIT_CombineGpsTime instead.
 */
#define SETUP_CombineGpsTime_GpsSecond              1, 0, 23, 32, 0

/**
 * Get signal GpsSecond from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineGpsTime_GpsSecond(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[2] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[3] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GpsSecond in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineGpsTime_GpsSecond(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GpsSecond in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineGpsTime_GpsSecond(buf) \
	SET_CombineGpsTime_GpsSecond(buf, 0)

/**
 * Signal GpsSecond value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineGpsTime_GpsSecond(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal GpsSecond raw initial value.
 */
#define START_CombineGpsTime_GpsSecond              0

/**
 * Signal GpsSecond raw minimum value.
 */
#define MIN_CombineGpsTime_GpsSecond                0

/**
 * Signal GpsSecond raw maximum value.
 */
#define MAX_CombineGpsTime_GpsSecond                604800000

/**
 * Signal GpsSecond raw offset value.
 */
#define OFF_CombineGpsTime_GpsSecond                0

/**
 * @}
 */

/**
 * @defgroup SIG_CombineGpsTime_GpsWeek Signal GpsWeek of Message CombineGpsTime (0x701)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_CombineGpsTime
 * @{
 */

/**
 * Signal GpsWeek configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_CombineGpsTime_GpsWeek and \ref GET_CombineGpsTime_GpsWeek instead.
 */
#define SIG_CombineGpsTime_GpsWeek                  1, 0, 7, 16

/**
 * Signal GpsWeek setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_CombineGpsTime_GpsWeek or \ref INIT_CombineGpsTime instead.
 */
#define SETUP_CombineGpsTime_GpsWeek                1, 0, 7, 16, 0

/**
 * Get signal GpsWeek from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_CombineGpsTime_GpsWeek(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GpsWeek in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_CombineGpsTime_GpsWeek(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GpsWeek in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_CombineGpsTime_GpsWeek(buf) \
	SET_CombineGpsTime_GpsWeek(buf, 0)

/**
 * Signal GpsWeek value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_CombineGpsTime_GpsWeek(x, fmt) \
	((x) * fmt)

/**
 * Signal GpsWeek raw initial value.
 */
#define START_CombineGpsTime_GpsWeek                0

/**
 * Signal GpsWeek raw minimum value.
 */
#define MIN_CombineGpsTime_GpsWeek                  0

/**
 * Signal GpsWeek raw maximum value.
 */
#define MAX_CombineGpsTime_GpsWeek                  65535

/**
 * Signal GpsWeek raw offset value.
 */
#define OFF_CombineGpsTime_GpsWeek                  0

/**
 * @}
 */

