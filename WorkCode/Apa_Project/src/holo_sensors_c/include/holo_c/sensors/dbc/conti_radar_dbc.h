#ifndef HOLO_C_SENSORS_CONTIRADAR_CONTIRADAR_DBC_H
#define HOLO_C_SENSORS_CONTIRADAR_CONTIRADAR_DBC_H

/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2017年 10月 18日 星期三 12:13:23 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_contiradar_dbc
 */

/**
 * @defgroup DB_contiradar_dbc CAN Database contiradar_dbc
 *
 * Path to file: output/contiradar_dbc.dbc
 *
 * Provides the following ECUs:
 */

/**
 * @defgroup MSG_Cluster_2_Quality Message Cluster_2_Quality (0x702)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Cluster_2_Quality_Cluster_InvalidState
 * - \ref SIG_Cluster_2_Quality_Cluster_ID
 * - \ref SIG_Cluster_2_Quality_Cluster_VrelLong_rms
 * - \ref SIG_Cluster_2_Quality_Cluster_VrelLat_rms
 * - \ref SIG_Cluster_2_Quality_Cluster_Pdh0
 * - \ref SIG_Cluster_2_Quality_Cluster_DistLong_rms
 * - \ref SIG_Cluster_2_Quality_Cluster_DistLat_rms
 * - \ref SIG_Cluster_2_Quality_Cluster_AmbigState
 *
 * @{
 */

typedef unsigned char ubyte;
typedef unsigned int uword;

/**
 * Message Cluster_2_Quality configuration tuple.
 */
#define MSG_Cluster_2_Quality                       0x702, 0, 8

/**
 * Message Cluster_2_Quality id.
 */
#define ID_Cluster_2_Quality                        0x702

/**
 * Message Cluster_2_Quality extended id bit.
 */
#define EXT_Cluster_2_Quality                       0

/**
 * Message Cluster_2_Quality Data Length Count.
 */
#define DLC_Cluster_2_Quality                       8

/**
 * Message Cluster_2_Quality cycle time.
 */
#define CYCLE_Cluster_2_Quality                     0

/**
 * Message Cluster_2_Quality fast cycle time.
 */
#define FAST_Cluster_2_Quality                      0

/**
 * Initialise message Cluster_2_Quality buffer.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INIT_Cluster_2_Quality(buf) { \
    INITSIG_Cluster_2_Quality_Cluster_InvalidState(buf); \
    INITSIG_Cluster_2_Quality_Cluster_ID(buf); \
    INITSIG_Cluster_2_Quality_Cluster_VrelLong_rms(buf); \
    INITSIG_Cluster_2_Quality_Cluster_VrelLat_rms(buf); \
    INITSIG_Cluster_2_Quality_Cluster_Pdh0(buf); \
    INITSIG_Cluster_2_Quality_Cluster_DistLong_rms(buf); \
    INITSIG_Cluster_2_Quality_Cluster_DistLat_rms(buf); \
    INITSIG_Cluster_2_Quality_Cluster_AmbigState(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Cluster_1_General Message Cluster_1_General (0x701)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Cluster_1_General_Cluster_VrelLong
 * - \ref SIG_Cluster_1_General_Cluster_VrelLat
 * - \ref SIG_Cluster_1_General_Cluster_RCS
 * - \ref SIG_Cluster_1_General_Cluster_ID
 * - \ref SIG_Cluster_1_General_Cluster_DynProp
 * - \ref SIG_Cluster_1_General_Cluster_DistLong
 * - \ref SIG_Cluster_1_General_Cluster_DistLat
 *
 * @{
 */

/**
 * Message Cluster_1_General configuration tuple.
 */
#define MSG_Cluster_1_General                       0x701, 0, 8

/**
 * Message Cluster_1_General id.
 */
#define ID_Cluster_1_General                        0x701

/**
 * Message Cluster_1_General extended id bit.
 */
#define EXT_Cluster_1_General                       0

/**
 * Message Cluster_1_General Data Length Count.
 */
#define DLC_Cluster_1_General                       8

/**
 * Message Cluster_1_General cycle time.
 */
#define CYCLE_Cluster_1_General                     0

/**
 * Message Cluster_1_General fast cycle time.
 */
#define FAST_Cluster_1_General                      0

/**
 * Initialise message Cluster_1_General buffer.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INIT_Cluster_1_General(buf) { \
    INITSIG_Cluster_1_General_Cluster_VrelLong(buf); \
    INITSIG_Cluster_1_General_Cluster_VrelLat(buf); \
    INITSIG_Cluster_1_General_Cluster_RCS(buf); \
    INITSIG_Cluster_1_General_Cluster_ID(buf); \
    INITSIG_Cluster_1_General_Cluster_DynProp(buf); \
    INITSIG_Cluster_1_General_Cluster_DistLong(buf); \
    INITSIG_Cluster_1_General_Cluster_DistLat(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Cluster_0_Status Message Cluster_0_Status (0x600)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Cluster_0_Status_Cluster_NofClustersNear
 * - \ref SIG_Cluster_0_Status_Cluster_NofClustersFar
 * - \ref SIG_Cluster_0_Status_Cluster_MeasCounter
 * - \ref SIG_Cluster_0_Status_Cluster_InterfaceVersion
 *
 * @{
 */

/**
 * Message Cluster_0_Status configuration tuple.
 */
#define MSG_Cluster_0_Status                        0x600, 0, 8

/**
 * Message Cluster_0_Status id.
 */
#define ID_Cluster_0_Status                         0x600

/**
 * Message Cluster_0_Status extended id bit.
 */
#define EXT_Cluster_0_Status                        0

/**
 * Message Cluster_0_Status Data Length Count.
 */
#define DLC_Cluster_0_Status                        8

/**
 * Message Cluster_0_Status cycle time.
 */
#define CYCLE_Cluster_0_Status                      0

/**
 * Message Cluster_0_Status fast cycle time.
 */
#define FAST_Cluster_0_Status                       0

/**
 * Initialise message Cluster_0_Status buffer.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INIT_Cluster_0_Status(buf) { \
    INITSIG_Cluster_0_Status_Cluster_NofClustersNear(buf); \
    INITSIG_Cluster_0_Status_Cluster_NofClustersFar(buf); \
    INITSIG_Cluster_0_Status_Cluster_MeasCounter(buf); \
    INITSIG_Cluster_0_Status_Cluster_InterfaceVersion(buf); \
}

/**
 * @defgroup MSG_Object_3_Extended Message Object_3_Extended (0x60d)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Object_3_Extended_Object_Length
 * - \ref SIG_Object_3_Extended_Object_OrientationAngle
 * - \ref SIG_Object_3_Extended_Object_ID
 * - \ref SIG_Object_3_Extended_Object_Width
 * - \ref SIG_Object_3_Extended_Object_Class
 * - \ref SIG_Object_3_Extended_Object_ArelLong
 * - \ref SIG_Object_3_Extended_Object_ArelLat
 *
 * @{
 */

/**
 * Message Object_3_Extended configuration tuple.
 */
#define MSG_Object_3_Extended                       0x60d, 0, 8

/**
 * Message Object_3_Extended id.
 */
#define ID_Object_3_Extended                        0x60d

/**
 * Message Object_3_Extended extended id bit.
 */
#define EXT_Object_3_Extended                       0

/**
 * Message Object_3_Extended Data Length Count.
 */
#define DLC_Object_3_Extended                       8

/**
 * Message Object_3_Extended cycle time.
 */
#define CYCLE_Object_3_Extended                     0

/**
 * Message Object_3_Extended fast cycle time.
 */
#define FAST_Object_3_Extended                      0

/**
 * Initialise message Object_3_Extended buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Object_3_Extended(buf) { \
	INITSIG_Object_3_Extended_Object_Length(buf); \
	INITSIG_Object_3_Extended_Object_OrientationAngle(buf); \
	INITSIG_Object_3_Extended_Object_ID(buf); \
	INITSIG_Object_3_Extended_Object_Width(buf); \
	INITSIG_Object_3_Extended_Object_Class(buf); \
	INITSIG_Object_3_Extended_Object_ArelLong(buf); \
	INITSIG_Object_3_Extended_Object_ArelLat(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Object_2_Quality Message Object_2_Quality (0x60c)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Object_2_Quality_Object_VrelLong_rms
 * - \ref SIG_Object_2_Quality_Object_VrelLat_rms
 * - \ref SIG_Object_2_Quality_Object_ProbOfexist
 * - \ref SIG_Object_2_Quality_Object_Orientation_rms
 * - \ref SIG_Object_2_Quality_Object_MeasState
 * - \ref SIG_Object_2_Quality_Object_ID
 * - \ref SIG_Object_2_Quality_Object_DistLong_rms
 * - \ref SIG_Object_2_Quality_Object_DistLat_rms
 * - \ref SIG_Object_2_Quality_Object_ArelLong_rms
 * - \ref SIG_Object_2_Quality_Object_ArelLat_rms
 *
 * @{
 */

/**
 * Message Object_2_Quality configuration tuple.
 */
#define MSG_Object_2_Quality                        0x60c, 0, 8

/**
 * Message Object_2_Quality id.
 */
#define ID_Object_2_Quality                         0x60c

/**
 * Message Object_2_Quality extended id bit.
 */
#define EXT_Object_2_Quality                        0

/**
 * Message Object_2_Quality Data Length Count.
 */
#define DLC_Object_2_Quality                        8

/**
 * Message Object_2_Quality cycle time.
 */
#define CYCLE_Object_2_Quality                      0

/**
 * Message Object_2_Quality fast cycle time.
 */
#define FAST_Object_2_Quality                       0

/**
 * Initialise message Object_2_Quality buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Object_2_Quality(buf) { \
	INITSIG_Object_2_Quality_Object_VrelLong_rms(buf); \
	INITSIG_Object_2_Quality_Object_VrelLat_rms(buf); \
	INITSIG_Object_2_Quality_Object_ProbOfexist(buf); \
	INITSIG_Object_2_Quality_Object_Orientation_rms(buf); \
	INITSIG_Object_2_Quality_Object_MeasState(buf); \
	INITSIG_Object_2_Quality_Object_ID(buf); \
	INITSIG_Object_2_Quality_Object_DistLong_rms(buf); \
	INITSIG_Object_2_Quality_Object_DistLat_rms(buf); \
	INITSIG_Object_2_Quality_Object_ArelLong_rms(buf); \
	INITSIG_Object_2_Quality_Object_ArelLat_rms(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Object_1_General Message Object_1_General (0x60b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Object_1_General_Object_VrelLong
 * - \ref SIG_Object_1_General_Object_VrelLat
 * - \ref SIG_Object_1_General_Object_RCS
 * - \ref SIG_Object_1_General_Object_ID
 * - \ref SIG_Object_1_General_Object_DynProp
 * - \ref SIG_Object_1_General_Object_DistLong
 * - \ref SIG_Object_1_General_Object_DistLat
 *
 * @{
 */

/**
 * Message Object_1_General configuration tuple.
 */
#define MSG_Object_1_General                        0x60b, 0, 8

/**
 * Message Object_1_General id.
 */
#define ID_Object_1_General                         0x60b

/**
 * Message Object_1_General extended id bit.
 */
#define EXT_Object_1_General                        0

/**
 * Message Object_1_General Data Length Count.
 */
#define DLC_Object_1_General                        8

/**
 * Message Object_1_General cycle time.
 */
#define CYCLE_Object_1_General                      0

/**
 * Message Object_1_General fast cycle time.
 */
#define FAST_Object_1_General                       0

/**
 * Initialise message Object_1_General buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Object_1_General(buf) { \
	INITSIG_Object_1_General_Object_VrelLong(buf); \
	INITSIG_Object_1_General_Object_VrelLat(buf); \
	INITSIG_Object_1_General_Object_RCS(buf); \
	INITSIG_Object_1_General_Object_ID(buf); \
	INITSIG_Object_1_General_Object_DynProp(buf); \
	INITSIG_Object_1_General_Object_DistLong(buf); \
	INITSIG_Object_1_General_Object_DistLat(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Object_0_Status Message Object_0_Status (0x60a)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Object_0_Status_Object_NofObjects
 * - \ref SIG_Object_0_Status_Object_MeasCounter
 * - \ref SIG_Object_0_Status_Object_InterfaceVersion
 *
 * @{
 */

/**
 * Message Object_0_Status configuration tuple.
 */
#define MSG_Object_0_Status                         0x60a, 0, 8

/**
 * Message Object_0_Status id.
 */
#define ID_Object_0_Status                          0x60a

/**
 * Message Object_0_Status extended id bit.
 */
#define EXT_Object_0_Status                         0

/**
 * Message Object_0_Status Data Length Count.
 */
#define DLC_Object_0_Status                         8

/**
 * Message Object_0_Status cycle time.
 */
#define CYCLE_Object_0_Status                       0

/**
 * Message Object_0_Status fast cycle time.
 */
#define FAST_Object_0_Status                        0

/**
 * Initialise message Object_0_Status buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Object_0_Status(buf) { \
	INITSIG_Object_0_Status_Object_NofObjects(buf); \
	INITSIG_Object_0_Status_Object_MeasCounter(buf); \
	INITSIG_Object_0_Status_Object_InterfaceVersion(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_RadarState Message RadarState (0x201)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_RadarState_RadarState_Voltage_Error
 * - \ref SIG_RadarState_RadarState_Temporary_Error
 * - \ref SIG_RadarState_RadarState_Temperature_Error
 * - \ref SIG_RadarState_RadarState_Persistent_Error
 * - \ref SIG_RadarState_RadarState_Interference
 * - \ref SIG_RadarState_RadarState_SortIndex
 * - \ref SIG_RadarState_RadarState_SensorID
 * - \ref SIG_RadarState_RadarState_SendQualityCfg
 * - \ref SIG_RadarState_RadarState_SendExtInfoCfg
 * - \ref SIG_RadarState_RadarState_RCS_Threshold
 * - \ref SIG_RadarState_RadarState_RadarPowerCfg
 * - \ref SIG_RadarState_RadarState_OutputTypeCfg
 * - \ref SIG_RadarState_RadarState_NVMWriteStatus
 * - \ref SIG_RadarState_RadarState_NVMReadStatus
 * - \ref SIG_RadarState_RadarState_MotionRxState
 * - \ref SIG_RadarState_RadarState_MaxDistanceCfg
 * - \ref SIG_RadarState_RadarState_CtrlRelayCfg
 *
 * @{
 */

/**
 * Message RadarState configuration tuple.
 */
#define MSG_RadarState                              0x201, 0, 8

/**
 * Message RadarState id.
 */
#define ID_RadarState                               0x201

/**
 * Message RadarState extended id bit.
 */
#define EXT_RadarState                              0

/**
 * Message RadarState Data Length Count.
 */
#define DLC_RadarState                              8

/**
 * Message RadarState cycle time.
 */
#define CYCLE_RadarState                            0

/**
 * Message RadarState fast cycle time.
 */
#define FAST_RadarState                             0

/**
 * Initialise message RadarState buffer.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INIT_RadarState(buf) { \
    INITSIG_RadarState_RadarState_Voltage_Error(buf); \
    INITSIG_RadarState_RadarState_Temporary_Error(buf); \
    INITSIG_RadarState_RadarState_Temperature_Error(buf); \
    INITSIG_RadarState_RadarState_Persistent_Error(buf); \
    INITSIG_RadarState_RadarState_Interference(buf); \
    INITSIG_RadarState_RadarState_SortIndex(buf); \
    INITSIG_RadarState_RadarState_SensorID(buf); \
    INITSIG_RadarState_RadarState_SendQualityCfg(buf); \
    INITSIG_RadarState_RadarState_SendExtInfoCfg(buf); \
    INITSIG_RadarState_RadarState_RCS_Threshold(buf); \
    INITSIG_RadarState_RadarState_RadarPowerCfg(buf); \
    INITSIG_RadarState_RadarState_OutputTypeCfg(buf); \
    INITSIG_RadarState_RadarState_NVMWriteStatus(buf); \
    INITSIG_RadarState_RadarState_NVMReadStatus(buf); \
    INITSIG_RadarState_RadarState_MotionRxState(buf); \
    INITSIG_RadarState_RadarState_MaxDistanceCfg(buf); \
    INITSIG_RadarState_RadarState_CtrlRelayCfg(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Software_versions Message Software_versions (0x700)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Software_versions_Version_PatchLevel
 * - \ref SIG_Software_versions_Version_MinorRelease
 * - \ref SIG_Software_versions_Version_MajorRelease
 *
 * @{
 */

/**
 * Message Software_versions configuration tuple.
 */
#define MSG_Software_versions                       0x700, 0, 8

/**
 * Message Software_versions id.
 */
#define ID_Software_versions                        0x700

/**
 * Message Software_versions extended id bit.
 */
#define EXT_Software_versions                       0

/**
 * Message Software_versions Data Length Count.
 */
#define DLC_Software_versions                       8

/**
 * Message Software_versions cycle time.
 */
#define CYCLE_Software_versions                     0

/**
 * Message Software_versions fast cycle time.
 */
#define FAST_Software_versions                      0

/**
 * Initialise message Software_versions buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Software_versions(buf) { \
	INITSIG_Software_versions_Version_PatchLevel(buf); \
	INITSIG_Software_versions_Version_MinorRelease(buf); \
	INITSIG_Software_versions_Version_MajorRelease(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_RadarCfg Message RadarCfg (0x200)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_RadarCfg_RadarCfg_RCS_Threshold_valid
 * - \ref SIG_RadarCfg_RadarCfg_RCS_Threshold
 * - \ref SIG_RadarCfg_RadarCfg_StoreInNVM_valid
 * - \ref SIG_RadarCfg_RadarCfg_StoreInNVM
 * - \ref SIG_RadarCfg_RadarCfg_SortIndex_valid
 * - \ref SIG_RadarCfg_RadarCfg_SortIndex
 * - \ref SIG_RadarCfg_RadarCfg_SensorID_valid
 * - \ref SIG_RadarCfg_RadarCfg_SensorID
 * - \ref SIG_RadarCfg_RadarCfg_SendQuality_valid
 * - \ref SIG_RadarCfg_RadarCfg_SendQuality
 * - \ref SIG_RadarCfg_RadarCfg_SendExtInfo
 * - \ref SIG_RadarCfg_RadarCfg_SendExtInfo_valid
 * - \ref SIG_RadarCfg_RadarCfg_RadarPower_valid
 * - \ref SIG_RadarCfg_RadarCfg_RadarPower
 * - \ref SIG_RadarCfg_RadarCfg_OutputType
 * - \ref SIG_RadarCfg_RadarCfg_OutputType_valid
 * - \ref SIG_RadarCfg_RadarCfg_MaxDistance_valid
 * - \ref SIG_RadarCfg_RadarCfg_MaxDistance
 * - \ref SIG_RadarCfg_RadarCfg_CtrlRelay_valid
 * - \ref SIG_RadarCfg_RadarCfg_CtrlRelay
 *
 * @{
 */

/**
 * Message RadarCfg configuration tuple.
 */
#define MSG_RadarCfg                                0x200, 0, 8

/**
 * Message RadarCfg id.
 */
#define ID_RadarCfg                                 0x200

/**
 * Message RadarCfg extended id bit.
 */
#define EXT_RadarCfg                                0

/**
 * Message RadarCfg Data Length Count.
 */
#define DLC_RadarCfg                                8

/**
 * Message RadarCfg cycle time.
 */
#define CYCLE_RadarCfg                              0

/**
 * Message RadarCfg fast cycle time.
 */
#define FAST_RadarCfg                               0

/**
 * Initialise message RadarCfg buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_RadarCfg(buf) { \
	INITSIG_RadarCfg_RadarCfg_RCS_Threshold_valid(buf); \
	INITSIG_RadarCfg_RadarCfg_RCS_Threshold(buf); \
	INITSIG_RadarCfg_RadarCfg_StoreInNVM_valid(buf); \
	INITSIG_RadarCfg_RadarCfg_StoreInNVM(buf); \
	INITSIG_RadarCfg_RadarCfg_SortIndex_valid(buf); \
	INITSIG_RadarCfg_RadarCfg_SortIndex(buf); \
	INITSIG_RadarCfg_RadarCfg_SensorID_valid(buf); \
	INITSIG_RadarCfg_RadarCfg_SensorID(buf); \
	INITSIG_RadarCfg_RadarCfg_SendQuality_valid(buf); \
	INITSIG_RadarCfg_RadarCfg_SendQuality(buf); \
	INITSIG_RadarCfg_RadarCfg_SendExtInfo(buf); \
	INITSIG_RadarCfg_RadarCfg_SendExtInfo_valid(buf); \
	INITSIG_RadarCfg_RadarCfg_RadarPower_valid(buf); \
	INITSIG_RadarCfg_RadarCfg_RadarPower(buf); \
	INITSIG_RadarCfg_RadarCfg_OutputType(buf); \
	INITSIG_RadarCfg_RadarCfg_OutputType_valid(buf); \
	INITSIG_RadarCfg_RadarCfg_MaxDistance_valid(buf); \
	INITSIG_RadarCfg_RadarCfg_MaxDistance(buf); \
	INITSIG_RadarCfg_RadarCfg_CtrlRelay_valid(buf); \
	INITSIG_RadarCfg_RadarCfg_CtrlRelay(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_YawrateInformation Message YawrateInformation (0x301)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_YawrateInformation_RadarDevice_YawRate
 *
 * @{
 */

/**
 * Message YawrateInformation configuration tuple.
 */
#define MSG_YawrateInformation                      0x301, 0, 8

/**
 * Message YawrateInformation id.
 */
#define ID_YawrateInformation                       0x301

/**
 * Message YawrateInformation extended id bit.
 */
#define EXT_YawrateInformation                      0

/**
 * Message YawrateInformation Data Length Count.
 */
#define DLC_YawrateInformation                      8

/**
 * Message YawrateInformation cycle time.
 */
#define CYCLE_YawrateInformation                    0

/**
 * Message YawrateInformation fast cycle time.
 */
#define FAST_YawrateInformation                     0

/**
 * Initialise message YawrateInformation buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_YawrateInformation(buf) { \
	INITSIG_YawrateInformation_RadarDevice_YawRate(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_SpeedInformation Message SpeedInformation (0x300)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_SpeedInformation_RadarDevice_Speed
 * - \ref SIG_SpeedInformation_RadarDevice_SpeedDirection
 *
 * @{
 */

/**
 * Message SpeedInformation configuration tuple.
 */
#define MSG_SpeedInformation                        0x300, 0, 8

/**
 * Message SpeedInformation id.
 */
#define ID_SpeedInformation                         0x300

/**
 * Message SpeedInformation extended id bit.
 */
#define EXT_SpeedInformation                        0

/**
 * Message SpeedInformation Data Length Count.
 */
#define DLC_SpeedInformation                        8

/**
 * Message SpeedInformation cycle time.
 */
#define CYCLE_SpeedInformation                      0

/**
 * Message SpeedInformation fast cycle time.
 */
#define FAST_SpeedInformation                       0

/**
 * Initialise message SpeedInformation buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_SpeedInformation(buf) { \
	INITSIG_SpeedInformation_RadarDevice_Speed(buf); \
	INITSIG_SpeedInformation_RadarDevice_SpeedDirection(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_2_Quality_Cluster_InvalidState Signal Cluster_InvalidState of Message Cluster_2_Quality (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_2_Quality
 * @{
 */

/**
 * Signal Cluster_InvalidState configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_2_Quality_Cluster_InvalidState and \ref GET_Cluster_2_Quality_Cluster_InvalidState instead.
 */
#define SIG_Cluster_2_Quality_Cluster_InvalidState        1, 0, 39, 5

/**
 * Signal Cluster_InvalidState setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_2_Quality_Cluster_InvalidState or \ref INIT_Cluster_2_Quality instead.
 */
#define SETUP_Cluster_2_Quality_Cluster_InvalidState      1, 0, 39, 5, 0

/**
 * Get signal Cluster_InvalidState from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_2_Quality_Cluster_InvalidState(buf) (0 \
    | (ubyte)(+(ubyte)((buf[4] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal Cluster_InvalidState in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_2_Quality_Cluster_InvalidState(buf, val) { \
    buf[4] &= ~(0x1f << 3); \
    buf[4] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal Cluster_InvalidState in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_2_Quality_Cluster_InvalidState(buf) \
    SET_Cluster_2_Quality_Cluster_InvalidState(buf, 0)

/**
 * Signal Cluster_InvalidState value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_2_Quality_Cluster_InvalidState(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_InvalidState raw initial value.
 */
#define START_Cluster_2_Quality_Cluster_InvalidState      0

/**
 * Signal Cluster_InvalidState raw minimum value.
 */
#define MIN_Cluster_2_Quality_Cluster_InvalidState        0

/**
 * Signal Cluster_InvalidState raw maximum value.
 */
#define MAX_Cluster_2_Quality_Cluster_InvalidState        31

/**
 * Signal Cluster_InvalidState raw offset value.
 */
#define OFF_Cluster_2_Quality_Cluster_InvalidState        0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_2_Quality_Cluster_ID Signal Cluster_ID of Message Cluster_2_Quality (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_2_Quality
 * @{
 */

/**
 * Signal Cluster_ID configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_2_Quality_Cluster_ID and \ref GET_Cluster_2_Quality_Cluster_ID instead.
 */
#define SIG_Cluster_2_Quality_Cluster_ID            1, 0, 7, 8

/**
 * Signal Cluster_ID setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_2_Quality_Cluster_ID or \ref INIT_Cluster_2_Quality instead.
 */
#define SETUP_Cluster_2_Quality_Cluster_ID          1, 0, 7, 8, 0

/**
 * Get signal Cluster_ID from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_2_Quality_Cluster_ID(buf) (0 \
    | (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Cluster_ID in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_2_Quality_Cluster_ID(buf, val) { \
    buf[0] &= ~(0xff << 0); \
    buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Cluster_ID in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_2_Quality_Cluster_ID(buf) \
    SET_Cluster_2_Quality_Cluster_ID(buf, 0)

/**
 * Signal Cluster_ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_2_Quality_Cluster_ID(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_ID raw initial value.
 */
#define START_Cluster_2_Quality_Cluster_ID          0

/**
 * Signal Cluster_ID raw minimum value.
 */
#define MIN_Cluster_2_Quality_Cluster_ID            0

/**
 * Signal Cluster_ID raw maximum value.
 */
#define MAX_Cluster_2_Quality_Cluster_ID            255

/**
 * Signal Cluster_ID raw offset value.
 */
#define OFF_Cluster_2_Quality_Cluster_ID            0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_2_Quality_Cluster_VrelLong_rms Signal Cluster_VrelLong_rms of Message Cluster_2_Quality (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_2_Quality
 * @{
 */

/**
 * Signal Cluster_VrelLong_rms configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_2_Quality_Cluster_VrelLong_rms and \ref GET_Cluster_2_Quality_Cluster_VrelLong_rms instead.
 */
#define SIG_Cluster_2_Quality_Cluster_VrelLong_rms        1, 0, 21, 5

/**
 * Signal Cluster_VrelLong_rms setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_2_Quality_Cluster_VrelLong_rms or \ref INIT_Cluster_2_Quality instead.
 */
#define SETUP_Cluster_2_Quality_Cluster_VrelLong_rms      1, 0, 21, 5, 0

/**
 * Get signal Cluster_VrelLong_rms from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_2_Quality_Cluster_VrelLong_rms(buf) (0 \
    | (ubyte)(+(ubyte)((buf[2] >> 1) & 0x1f) << 0) \
)

/**
 * Set signal Cluster_VrelLong_rms in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_2_Quality_Cluster_VrelLong_rms(buf, val) { \
    buf[2] &= ~(0x1f << 1); \
    buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 1; \
}

/**
 * Set signal Cluster_VrelLong_rms in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_2_Quality_Cluster_VrelLong_rms(buf) \
    SET_Cluster_2_Quality_Cluster_VrelLong_rms(buf, 0)

/**
 * Signal Cluster_VrelLong_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_2_Quality_Cluster_VrelLong_rms(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_VrelLong_rms raw initial value.
 */
#define START_Cluster_2_Quality_Cluster_VrelLong_rms      0

/**
 * Signal Cluster_VrelLong_rms raw minimum value.
 */
#define MIN_Cluster_2_Quality_Cluster_VrelLong_rms        0

/**
 * Signal Cluster_VrelLong_rms raw maximum value.
 */
#define MAX_Cluster_2_Quality_Cluster_VrelLong_rms        31

/**
 * Signal Cluster_VrelLong_rms raw offset value.
 */
#define OFF_Cluster_2_Quality_Cluster_VrelLong_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_2_Quality_Cluster_VrelLat_rms Signal Cluster_VrelLat_rms of Message Cluster_2_Quality (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_2_Quality
 * @{
 */

/**
 * Signal Cluster_VrelLat_rms configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_2_Quality_Cluster_VrelLat_rms and \ref GET_Cluster_2_Quality_Cluster_VrelLat_rms instead.
 */
#define SIG_Cluster_2_Quality_Cluster_VrelLat_rms        1, 0, 16, 5

/**
 * Signal Cluster_VrelLat_rms setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_2_Quality_Cluster_VrelLat_rms or \ref INIT_Cluster_2_Quality instead.
 */
#define SETUP_Cluster_2_Quality_Cluster_VrelLat_rms      1, 0, 16, 5, 0

/**
 * Get signal Cluster_VrelLat_rms from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_2_Quality_Cluster_VrelLat_rms(buf) (0 \
    | (ubyte)(+(ubyte)((buf[2] >> 0) & 0x01) << 4) \
    | (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Cluster_VrelLat_rms in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_2_Quality_Cluster_VrelLat_rms(buf, val) { \
    buf[2] &= ~(0x01 << 0); \
    buf[2] |= (((ubyte)(val) >> 4) & 0x01) << 0; \
    buf[3] &= ~(0x0f << 4); \
    buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Cluster_VrelLat_rms in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_2_Quality_Cluster_VrelLat_rms(buf) \
    SET_Cluster_2_Quality_Cluster_VrelLat_rms(buf, 0)

/**
 * Signal Cluster_VrelLat_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_2_Quality_Cluster_VrelLat_rms(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_VrelLat_rms raw initial value.
 */
#define START_Cluster_2_Quality_Cluster_VrelLat_rms      0

/**
 * Signal Cluster_VrelLat_rms raw minimum value.
 */
#define MIN_Cluster_2_Quality_Cluster_VrelLat_rms        0

/**
 * Signal Cluster_VrelLat_rms raw maximum value.
 */
#define MAX_Cluster_2_Quality_Cluster_VrelLat_rms        31

/**
 * Signal Cluster_VrelLat_rms raw offset value.
 */
#define OFF_Cluster_2_Quality_Cluster_VrelLat_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_2_Quality_Cluster_Pdh0 Signal Cluster_Pdh0 of Message Cluster_2_Quality (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_2_Quality
 * @{
 */

/**
 * Signal Cluster_Pdh0 configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_2_Quality_Cluster_Pdh0 and \ref GET_Cluster_2_Quality_Cluster_Pdh0 instead.
 */
#define SIG_Cluster_2_Quality_Cluster_Pdh0          1, 0, 26, 3

/**
 * Signal Cluster_Pdh0 setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_2_Quality_Cluster_Pdh0 or \ref INIT_Cluster_2_Quality instead.
 */
#define SETUP_Cluster_2_Quality_Cluster_Pdh0        1, 0, 26, 3, 0

/**
 * Get signal Cluster_Pdh0 from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_2_Quality_Cluster_Pdh0(buf) (0 \
    | (ubyte)(+(ubyte)((buf[3] >> 0) & 0x07) << 0) \
)

/**
 * Set signal Cluster_Pdh0 in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_2_Quality_Cluster_Pdh0(buf, val) { \
    buf[3] &= ~(0x07 << 0); \
    buf[3] |= (((ubyte)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal Cluster_Pdh0 in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_2_Quality_Cluster_Pdh0(buf) \
    SET_Cluster_2_Quality_Cluster_Pdh0(buf, 0)

/**
 * Signal Cluster_Pdh0 value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_2_Quality_Cluster_Pdh0(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_Pdh0 raw initial value.
 */
#define START_Cluster_2_Quality_Cluster_Pdh0        0

/**
 * Signal Cluster_Pdh0 raw minimum value.
 */
#define MIN_Cluster_2_Quality_Cluster_Pdh0          0

/**
 * Signal Cluster_Pdh0 raw maximum value.
 */
#define MAX_Cluster_2_Quality_Cluster_Pdh0          7

/**
 * Signal Cluster_Pdh0 raw offset value.
 */
#define OFF_Cluster_2_Quality_Cluster_Pdh0          0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_2_Quality_Cluster_DistLong_rms Signal Cluster_DistLong_rms of Message Cluster_2_Quality (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_2_Quality
 * @{
 */

/**
 * Signal Cluster_DistLong_rms configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_2_Quality_Cluster_DistLong_rms and \ref GET_Cluster_2_Quality_Cluster_DistLong_rms instead.
 */
#define SIG_Cluster_2_Quality_Cluster_DistLong_rms        1, 0, 15, 5

/**
 * Signal Cluster_DistLong_rms setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_2_Quality_Cluster_DistLong_rms or \ref INIT_Cluster_2_Quality instead.
 */
#define SETUP_Cluster_2_Quality_Cluster_DistLong_rms      1, 0, 15, 5, 0

/**
 * Get signal Cluster_DistLong_rms from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_2_Quality_Cluster_DistLong_rms(buf) (0 \
    | (ubyte)(+(ubyte)((buf[1] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal Cluster_DistLong_rms in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_2_Quality_Cluster_DistLong_rms(buf, val) { \
    buf[1] &= ~(0x1f << 3); \
    buf[1] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal Cluster_DistLong_rms in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_2_Quality_Cluster_DistLong_rms(buf) \
    SET_Cluster_2_Quality_Cluster_DistLong_rms(buf, 0)

/**
 * Signal Cluster_DistLong_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_2_Quality_Cluster_DistLong_rms(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_DistLong_rms raw initial value.
 */
#define START_Cluster_2_Quality_Cluster_DistLong_rms      0

/**
 * Signal Cluster_DistLong_rms raw minimum value.
 */
#define MIN_Cluster_2_Quality_Cluster_DistLong_rms        0

/**
 * Signal Cluster_DistLong_rms raw maximum value.
 */
#define MAX_Cluster_2_Quality_Cluster_DistLong_rms        31

/**
 * Signal Cluster_DistLong_rms raw offset value.
 */
#define OFF_Cluster_2_Quality_Cluster_DistLong_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_2_Quality_Cluster_DistLat_rms Signal Cluster_DistLat_rms of Message Cluster_2_Quality (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_2_Quality
 * @{
 */

/**
 * Signal Cluster_DistLat_rms configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_2_Quality_Cluster_DistLat_rms and \ref GET_Cluster_2_Quality_Cluster_DistLat_rms instead.
 */
#define SIG_Cluster_2_Quality_Cluster_DistLat_rms        1, 0, 10, 5

/**
 * Signal Cluster_DistLat_rms setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_2_Quality_Cluster_DistLat_rms or \ref INIT_Cluster_2_Quality instead.
 */
#define SETUP_Cluster_2_Quality_Cluster_DistLat_rms      1, 0, 10, 5, 0

/**
 * Get signal Cluster_DistLat_rms from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_2_Quality_Cluster_DistLat_rms(buf) (0 \
    | (ubyte)(+(ubyte)((buf[1] >> 0) & 0x07) << 2) \
    | (ubyte)(+(ubyte)((buf[2] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Cluster_DistLat_rms in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_2_Quality_Cluster_DistLat_rms(buf, val) { \
    buf[1] &= ~(0x07 << 0); \
    buf[1] |= (((ubyte)(val) >> 2) & 0x07) << 0; \
    buf[2] &= ~(0x03 << 6); \
    buf[2] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Cluster_DistLat_rms in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_2_Quality_Cluster_DistLat_rms(buf) \
    SET_Cluster_2_Quality_Cluster_DistLat_rms(buf, 0)

/**
 * Signal Cluster_DistLat_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_2_Quality_Cluster_DistLat_rms(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_DistLat_rms raw initial value.
 */
#define START_Cluster_2_Quality_Cluster_DistLat_rms      0

/**
 * Signal Cluster_DistLat_rms raw minimum value.
 */
#define MIN_Cluster_2_Quality_Cluster_DistLat_rms        0

/**
 * Signal Cluster_DistLat_rms raw maximum value.
 */
#define MAX_Cluster_2_Quality_Cluster_DistLat_rms        31

/**
 * Signal Cluster_DistLat_rms raw offset value.
 */
#define OFF_Cluster_2_Quality_Cluster_DistLat_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_2_Quality_Cluster_AmbigState Signal Cluster_AmbigState of Message Cluster_2_Quality (0x702)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_2_Quality
 * @{
 */

/**
 * Signal Cluster_AmbigState configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_2_Quality_Cluster_AmbigState and \ref GET_Cluster_2_Quality_Cluster_AmbigState instead.
 */
#define SIG_Cluster_2_Quality_Cluster_AmbigState        1, 0, 34, 3

/**
 * Signal Cluster_AmbigState setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_2_Quality_Cluster_AmbigState or \ref INIT_Cluster_2_Quality instead.
 */
#define SETUP_Cluster_2_Quality_Cluster_AmbigState      1, 0, 34, 3, 0

/**
 * Get signal Cluster_AmbigState from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_2_Quality_Cluster_AmbigState(buf) (0 \
    | (ubyte)(+(ubyte)((buf[4] >> 0) & 0x07) << 0) \
)

/**
 * Set signal Cluster_AmbigState in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_2_Quality_Cluster_AmbigState(buf, val) { \
    buf[4] &= ~(0x07 << 0); \
    buf[4] |= (((ubyte)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal Cluster_AmbigState in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_2_Quality_Cluster_AmbigState(buf) \
    SET_Cluster_2_Quality_Cluster_AmbigState(buf, 0)

/**
 * Signal Cluster_AmbigState value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_2_Quality_Cluster_AmbigState(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_AmbigState raw initial value.
 */
#define START_Cluster_2_Quality_Cluster_AmbigState      0

/**
 * Signal Cluster_AmbigState raw minimum value.
 */
#define MIN_Cluster_2_Quality_Cluster_AmbigState        0

/**
 * Signal Cluster_AmbigState raw maximum value.
 */
#define MAX_Cluster_2_Quality_Cluster_AmbigState        7

/**
 * Signal Cluster_AmbigState raw offset value.
 */
#define OFF_Cluster_2_Quality_Cluster_AmbigState        0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_1_General_Cluster_VrelLong Signal Cluster_VrelLong of Message Cluster_1_General (0x701)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_1_General
 * @{
 */

/**
 * Signal Cluster_VrelLong configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_1_General_Cluster_VrelLong and \ref GET_Cluster_1_General_Cluster_VrelLong instead.
 */
#define SIG_Cluster_1_General_Cluster_VrelLong        1, 0, 39, 10

/**
 * Signal Cluster_VrelLong setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_1_General_Cluster_VrelLong or \ref INIT_Cluster_1_General instead.
 */
#define SETUP_Cluster_1_General_Cluster_VrelLong      1, 0, 39, 10, 512

/**
 * Get signal Cluster_VrelLong from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_1_General_Cluster_VrelLong(buf) (0 \
    | (uword)(+(uword)((buf[4] >> 0) & 0xff) << 2) \
    | (ubyte)(+(ubyte)((buf[5] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Cluster_VrelLong in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_1_General_Cluster_VrelLong(buf, val) { \
    buf[4] &= ~(0xff << 0); \
    buf[4] |= ((ubyte)((uword)(val) >> 2) & 0xff) << 0; \
    buf[5] &= ~(0x03 << 6); \
    buf[5] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Cluster_VrelLong in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_1_General_Cluster_VrelLong(buf) \
    SET_Cluster_1_General_Cluster_VrelLong(buf, 512)

/**
 * Signal Cluster_VrelLong value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_1_General_Cluster_VrelLong(x, fmt) \
    ((x) * fmt / 4 + fmt * (-128))

/**
 * Signal Cluster_VrelLong raw initial value.
 */
#define START_Cluster_1_General_Cluster_VrelLong      512

/**
 * Signal Cluster_VrelLong raw minimum value.
 */
#define MIN_Cluster_1_General_Cluster_VrelLong        0

/**
 * Signal Cluster_VrelLong raw maximum value.
 */
#define MAX_Cluster_1_General_Cluster_VrelLong        1023

/**
 * Signal Cluster_VrelLong raw offset value.
 */
#define OFF_Cluster_1_General_Cluster_VrelLong        -512

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_1_General_Cluster_VrelLat Signal Cluster_VrelLat of Message Cluster_1_General (0x701)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_1_General
 * @{
 */

/**
 * Signal Cluster_VrelLat configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_1_General_Cluster_VrelLat and \ref GET_Cluster_1_General_Cluster_VrelLat instead.
 */
#define SIG_Cluster_1_General_Cluster_VrelLat        1, 0, 45, 9

/**
 * Signal Cluster_VrelLat setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_1_General_Cluster_VrelLat or \ref INIT_Cluster_1_General instead.
 */
#define SETUP_Cluster_1_General_Cluster_VrelLat      1, 0, 45, 9, 256

/**
 * Get signal Cluster_VrelLat from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_1_General_Cluster_VrelLat(buf) (0 \
    | (uword)(+(uword)((buf[5] >> 0) & 0x3f) << 3) \
    | (ubyte)(+(ubyte)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Cluster_VrelLat in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_1_General_Cluster_VrelLat(buf, val) { \
    buf[5] &= ~(0x3f << 0); \
    buf[5] |= ((ubyte)((uword)(val) >> 3) & 0x3f) << 0; \
    buf[6] &= ~(0x07 << 5); \
    buf[6] |= (((ubyte)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Cluster_VrelLat in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_1_General_Cluster_VrelLat(buf) \
    SET_Cluster_1_General_Cluster_VrelLat(buf, 256)

/**
 * Signal Cluster_VrelLat value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_1_General_Cluster_VrelLat(x, fmt) \
    ((x) * fmt / 4 + fmt * (-64))

/**
 * Signal Cluster_VrelLat raw initial value.
 */
#define START_Cluster_1_General_Cluster_VrelLat      256

/**
 * Signal Cluster_VrelLat raw minimum value.
 */
#define MIN_Cluster_1_General_Cluster_VrelLat        0

/**
 * Signal Cluster_VrelLat raw maximum value.
 */
#define MAX_Cluster_1_General_Cluster_VrelLat        511

/**
 * Signal Cluster_VrelLat raw offset value.
 */
#define OFF_Cluster_1_General_Cluster_VrelLat        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_1_General_Cluster_RCS Signal Cluster_RCS of Message Cluster_1_General (0x701)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_1_General
 * @{
 */

/**
 * Signal Cluster_RCS configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_1_General_Cluster_RCS and \ref GET_Cluster_1_General_Cluster_RCS instead.
 */
#define SIG_Cluster_1_General_Cluster_RCS           1, 0, 63, 8

/**
 * Signal Cluster_RCS setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_1_General_Cluster_RCS or \ref INIT_Cluster_1_General instead.
 */
#define SETUP_Cluster_1_General_Cluster_RCS         1, 0, 63, 8, 128

/**
 * Get signal Cluster_RCS from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_1_General_Cluster_RCS(buf) (0 \
    | (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Cluster_RCS in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_1_General_Cluster_RCS(buf, val) { \
    buf[7] &= ~(0xff << 0); \
    buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Cluster_RCS in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_1_General_Cluster_RCS(buf) \
    SET_Cluster_1_General_Cluster_RCS(buf, 128)

/**
 * Signal Cluster_RCS value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_1_General_Cluster_RCS(x, fmt) \
    ((x) * fmt / 2 + fmt * (-64))

/**
 * Signal Cluster_RCS raw initial value.
 */
#define START_Cluster_1_General_Cluster_RCS         128

/**
 * Signal Cluster_RCS raw minimum value.
 */
#define MIN_Cluster_1_General_Cluster_RCS           0

/**
 * Signal Cluster_RCS raw maximum value.
 */
#define MAX_Cluster_1_General_Cluster_RCS           255

/**
 * Signal Cluster_RCS raw offset value.
 */
#define OFF_Cluster_1_General_Cluster_RCS           -128

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_1_General_Cluster_ID Signal Cluster_ID of Message Cluster_1_General (0x701)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_1_General
 * @{
 */

/**
 * Signal Cluster_ID configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_1_General_Cluster_ID and \ref GET_Cluster_1_General_Cluster_ID instead.
 */
#define SIG_Cluster_1_General_Cluster_ID            1, 0, 7, 8

/**
 * Signal Cluster_ID setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_1_General_Cluster_ID or \ref INIT_Cluster_1_General instead.
 */
#define SETUP_Cluster_1_General_Cluster_ID          1, 0, 7, 8, 0

/**
 * Get signal Cluster_ID from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_1_General_Cluster_ID(buf) (0 \
    | (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Cluster_ID in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_1_General_Cluster_ID(buf, val) { \
    buf[0] &= ~(0xff << 0); \
    buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Cluster_ID in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_1_General_Cluster_ID(buf) \
    SET_Cluster_1_General_Cluster_ID(buf, 0)

/**
 * Signal Cluster_ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_1_General_Cluster_ID(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_ID raw initial value.
 */
#define START_Cluster_1_General_Cluster_ID          0

/**
 * Signal Cluster_ID raw minimum value.
 */
#define MIN_Cluster_1_General_Cluster_ID            0

/**
 * Signal Cluster_ID raw maximum value.
 */
#define MAX_Cluster_1_General_Cluster_ID            255

/**
 * Signal Cluster_ID raw offset value.
 */
#define OFF_Cluster_1_General_Cluster_ID            0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_1_General_Cluster_DynProp Signal Cluster_DynProp of Message Cluster_1_General (0x701)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_1_General
 * @{
 */

/**
 * Signal Cluster_DynProp configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_1_General_Cluster_DynProp and \ref GET_Cluster_1_General_Cluster_DynProp instead.
 */
#define SIG_Cluster_1_General_Cluster_DynProp        1, 0, 50, 3

/**
 * Signal Cluster_DynProp setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_1_General_Cluster_DynProp or \ref INIT_Cluster_1_General instead.
 */
#define SETUP_Cluster_1_General_Cluster_DynProp      1, 0, 50, 3, 0

/**
 * Get signal Cluster_DynProp from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_1_General_Cluster_DynProp(buf) (0 \
    | (ubyte)(+(ubyte)((buf[6] >> 0) & 0x07) << 0) \
)

/**
 * Set signal Cluster_DynProp in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_1_General_Cluster_DynProp(buf, val) { \
    buf[6] &= ~(0x07 << 0); \
    buf[6] |= (((ubyte)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal Cluster_DynProp in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_1_General_Cluster_DynProp(buf) \
    SET_Cluster_1_General_Cluster_DynProp(buf, 0)

/**
 * Signal Cluster_DynProp value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_1_General_Cluster_DynProp(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_DynProp raw initial value.
 */
#define START_Cluster_1_General_Cluster_DynProp      0

/**
 * Signal Cluster_DynProp raw minimum value.
 */
#define MIN_Cluster_1_General_Cluster_DynProp        0

/**
 * Signal Cluster_DynProp raw maximum value.
 */
#define MAX_Cluster_1_General_Cluster_DynProp        7

/**
 * Signal Cluster_DynProp raw offset value.
 */
#define OFF_Cluster_1_General_Cluster_DynProp        0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_1_General_Cluster_DistLong Signal Cluster_DistLong of Message Cluster_1_General (0x701)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_1_General
 * @{
 */

/**
 * Signal Cluster_DistLong configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_1_General_Cluster_DistLong and \ref GET_Cluster_1_General_Cluster_DistLong instead.
 */
#define SIG_Cluster_1_General_Cluster_DistLong        1, 0, 15, 13

/**
 * Signal Cluster_DistLong setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_1_General_Cluster_DistLong or \ref INIT_Cluster_1_General instead.
 */
#define SETUP_Cluster_1_General_Cluster_DistLong      1, 0, 15, 13, 2500

/**
 * Get signal Cluster_DistLong from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_1_General_Cluster_DistLong(buf) (0 \
    | (uword)(+(uword)((buf[1] >> 0) & 0xff) << 5) \
    | (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal Cluster_DistLong in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_1_General_Cluster_DistLong(buf, val) { \
    buf[1] &= ~(0xff << 0); \
    buf[1] |= ((ubyte)((uword)(val) >> 5) & 0xff) << 0; \
    buf[2] &= ~(0x1f << 3); \
    buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal Cluster_DistLong in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_1_General_Cluster_DistLong(buf) \
    SET_Cluster_1_General_Cluster_DistLong(buf, 2500)

/**
 * Signal Cluster_DistLong value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_1_General_Cluster_DistLong(x, fmt) \
    ((x) * fmt / 5 + fmt * (-500))

/**
 * Signal Cluster_DistLong raw initial value.
 */
#define START_Cluster_1_General_Cluster_DistLong      2500

/**
 * Signal Cluster_DistLong raw minimum value.
 */
#define MIN_Cluster_1_General_Cluster_DistLong        0

/**
 * Signal Cluster_DistLong raw maximum value.
 */
#define MAX_Cluster_1_General_Cluster_DistLong        8191

/**
 * Signal Cluster_DistLong raw offset value.
 */
#define OFF_Cluster_1_General_Cluster_DistLong        -2500

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_1_General_Cluster_DistLat Signal Cluster_DistLat of Message Cluster_1_General (0x701)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_1_General
 * @{
 */

/**
 * Signal Cluster_DistLat configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_1_General_Cluster_DistLat and \ref GET_Cluster_1_General_Cluster_DistLat instead.
 */
#define SIG_Cluster_1_General_Cluster_DistLat        1, 0, 17, 10

/**
 * Signal Cluster_DistLat setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_1_General_Cluster_DistLat or \ref INIT_Cluster_1_General instead.
 */
#define SETUP_Cluster_1_General_Cluster_DistLat      1, 0, 17, 10, 511

/**
 * Get signal Cluster_DistLat from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_1_General_Cluster_DistLat(buf) (0 \
    | (uword)(+(uword)((buf[2] >> 0) & 0x03) << 8) \
    | (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Cluster_DistLat in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_1_General_Cluster_DistLat(buf, val) { \
    buf[2] &= ~(0x03 << 0); \
    buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x03) << 0; \
    buf[3] &= ~(0xff << 0); \
    buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Cluster_DistLat in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_1_General_Cluster_DistLat(buf) \
    SET_Cluster_1_General_Cluster_DistLat(buf, 511)

/**
 * Signal Cluster_DistLat value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_1_General_Cluster_DistLat(x, fmt) \
    ((x) * fmt / 5 + fmt * (-1023) / 10)

/**
 * Signal Cluster_DistLat raw initial value.
 */
#define START_Cluster_1_General_Cluster_DistLat      511

/**
 * Signal Cluster_DistLat raw minimum value.
 */
#define MIN_Cluster_1_General_Cluster_DistLat        0

/**
 * Signal Cluster_DistLat raw maximum value.
 */
#define MAX_Cluster_1_General_Cluster_DistLat        1023

/**
 * Signal Cluster_DistLat raw offset value.
 */
#define OFF_Cluster_1_General_Cluster_DistLat        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_0_Status_Cluster_NofClustersNear Signal Cluster_NofClustersNear of Message Cluster_0_Status (0x600)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_0_Status
 * @{
 */

/**
 * Signal Cluster_NofClustersNear configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_0_Status_Cluster_NofClustersNear and \ref GET_Cluster_0_Status_Cluster_NofClustersNear instead.
 */
#define SIG_Cluster_0_Status_Cluster_NofClustersNear        1, 0, 7, 8

/**
 * Signal Cluster_NofClustersNear setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_0_Status_Cluster_NofClustersNear or \ref INIT_Cluster_0_Status instead.
 */
#define SETUP_Cluster_0_Status_Cluster_NofClustersNear      1, 0, 7, 8, 0

/**
 * Get signal Cluster_NofClustersNear from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_0_Status_Cluster_NofClustersNear(buf) (0 \
    | (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Cluster_NofClustersNear in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_0_Status_Cluster_NofClustersNear(buf, val) { \
    buf[0] &= ~(0xff << 0); \
    buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Cluster_NofClustersNear in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_0_Status_Cluster_NofClustersNear(buf) \
    SET_Cluster_0_Status_Cluster_NofClustersNear(buf, 0)

/**
 * Signal Cluster_NofClustersNear value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_0_Status_Cluster_NofClustersNear(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_NofClustersNear raw initial value.
 */
#define START_Cluster_0_Status_Cluster_NofClustersNear      0

/**
 * Signal Cluster_NofClustersNear raw minimum value.
 */
#define MIN_Cluster_0_Status_Cluster_NofClustersNear        0

/**
 * Signal Cluster_NofClustersNear raw maximum value.
 */
#define MAX_Cluster_0_Status_Cluster_NofClustersNear        255

/**
 * Signal Cluster_NofClustersNear raw offset value.
 */
#define OFF_Cluster_0_Status_Cluster_NofClustersNear        0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_0_Status_Cluster_NofClustersFar Signal Cluster_NofClustersFar of Message Cluster_0_Status (0x600)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_0_Status
 * @{
 */

/**
 * Signal Cluster_NofClustersFar configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_0_Status_Cluster_NofClustersFar and \ref GET_Cluster_0_Status_Cluster_NofClustersFar instead.
 */
#define SIG_Cluster_0_Status_Cluster_NofClustersFar        1, 0, 15, 8

/**
 * Signal Cluster_NofClustersFar setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_0_Status_Cluster_NofClustersFar or \ref INIT_Cluster_0_Status instead.
 */
#define SETUP_Cluster_0_Status_Cluster_NofClustersFar      1, 0, 15, 8, 0

/**
 * Get signal Cluster_NofClustersFar from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_0_Status_Cluster_NofClustersFar(buf) (0 \
    | (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Cluster_NofClustersFar in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_0_Status_Cluster_NofClustersFar(buf, val) { \
    buf[1] &= ~(0xff << 0); \
    buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Cluster_NofClustersFar in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_0_Status_Cluster_NofClustersFar(buf) \
    SET_Cluster_0_Status_Cluster_NofClustersFar(buf, 0)

/**
 * Signal Cluster_NofClustersFar value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_0_Status_Cluster_NofClustersFar(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_NofClustersFar raw initial value.
 */
#define START_Cluster_0_Status_Cluster_NofClustersFar      0

/**
 * Signal Cluster_NofClustersFar raw minimum value.
 */
#define MIN_Cluster_0_Status_Cluster_NofClustersFar        0

/**
 * Signal Cluster_NofClustersFar raw maximum value.
 */
#define MAX_Cluster_0_Status_Cluster_NofClustersFar        255

/**
 * Signal Cluster_NofClustersFar raw offset value.
 */
#define OFF_Cluster_0_Status_Cluster_NofClustersFar        0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_0_Status_Cluster_MeasCounter Signal Cluster_MeasCounter of Message Cluster_0_Status (0x600)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_0_Status
 * @{
 */

/**
 * Signal Cluster_MeasCounter configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_0_Status_Cluster_MeasCounter and \ref GET_Cluster_0_Status_Cluster_MeasCounter instead.
 */
#define SIG_Cluster_0_Status_Cluster_MeasCounter        1, 0, 23, 16

/**
 * Signal Cluster_MeasCounter setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_0_Status_Cluster_MeasCounter or \ref INIT_Cluster_0_Status instead.
 */
#define SETUP_Cluster_0_Status_Cluster_MeasCounter      1, 0, 23, 16, 0

/**
 * Get signal Cluster_MeasCounter from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_0_Status_Cluster_MeasCounter(buf) (0 \
    | (uword)(+(uword)((buf[2] >> 0) & 0xff) << 8) \
    | (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Cluster_MeasCounter in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_0_Status_Cluster_MeasCounter(buf, val) { \
    buf[2] &= ~(0xff << 0); \
    buf[2] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
    buf[3] &= ~(0xff << 0); \
    buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Cluster_MeasCounter in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_0_Status_Cluster_MeasCounter(buf) \
    SET_Cluster_0_Status_Cluster_MeasCounter(buf, 0)

/**
 * Signal Cluster_MeasCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_0_Status_Cluster_MeasCounter(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_MeasCounter raw initial value.
 */
#define START_Cluster_0_Status_Cluster_MeasCounter      0

/**
 * Signal Cluster_MeasCounter raw minimum value.
 */
#define MIN_Cluster_0_Status_Cluster_MeasCounter        0

/**
 * Signal Cluster_MeasCounter raw maximum value.
 */
#define MAX_Cluster_0_Status_Cluster_MeasCounter        65535

/**
 * Signal Cluster_MeasCounter raw offset value.
 */
#define OFF_Cluster_0_Status_Cluster_MeasCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_Cluster_0_Status_Cluster_InterfaceVersion Signal Cluster_InterfaceVersion of Message Cluster_0_Status (0x600)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Cluster_0_Status
 * @{
 */

/**
 * Signal Cluster_InterfaceVersion configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_Cluster_0_Status_Cluster_InterfaceVersion and \ref GET_Cluster_0_Status_Cluster_InterfaceVersion instead.
 */
#define SIG_Cluster_0_Status_Cluster_InterfaceVersion        1, 0, 39, 4

/**
 * Signal Cluster_InterfaceVersion setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_Cluster_0_Status_Cluster_InterfaceVersion or \ref INIT_Cluster_0_Status instead.
 */
#define SETUP_Cluster_0_Status_Cluster_InterfaceVersion      1, 0, 39, 4, 0

/**
 * Get signal Cluster_InterfaceVersion from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_Cluster_0_Status_Cluster_InterfaceVersion(buf) (0 \
    | (ubyte)(+(ubyte)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Cluster_InterfaceVersion in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_Cluster_0_Status_Cluster_InterfaceVersion(buf, val) { \
    buf[4] &= ~(0x0f << 4); \
    buf[4] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Cluster_InterfaceVersion in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_Cluster_0_Status_Cluster_InterfaceVersion(buf) \
    SET_Cluster_0_Status_Cluster_InterfaceVersion(buf, 0)

/**
 * Signal Cluster_InterfaceVersion value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_Cluster_0_Status_Cluster_InterfaceVersion(x, fmt) \
    ((x) * fmt)

/**
 * Signal Cluster_InterfaceVersion raw initial value.
 */
#define START_Cluster_0_Status_Cluster_InterfaceVersion      0

/**
 * Signal Cluster_InterfaceVersion raw minimum value.
 */
#define MIN_Cluster_0_Status_Cluster_InterfaceVersion        0

/**
 * Signal Cluster_InterfaceVersion raw maximum value.
 */
#define MAX_Cluster_0_Status_Cluster_InterfaceVersion        15

/**
 * Signal Cluster_InterfaceVersion raw offset value.
 */
#define OFF_Cluster_0_Status_Cluster_InterfaceVersion        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_3_Extended_Object_Length Signal Object_Length of Message Object_3_Extended (0x60d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_3_Extended
 * @{
 */

/**
 * Signal Object_Length configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_3_Extended_Object_Length and \ref GET_Object_3_Extended_Object_Length instead.
 */
#define SIG_Object_3_Extended_Object_Length         1, 0, 55, 8

/**
 * Signal Object_Length setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_3_Extended_Object_Length or \ref INIT_Object_3_Extended instead.
 */
#define SETUP_Object_3_Extended_Object_Length       1, 0, 55, 8, 0

/**
 * Get signal Object_Length from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_3_Extended_Object_Length(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Object_Length in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_3_Extended_Object_Length(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Object_Length in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_3_Extended_Object_Length(buf) \
	SET_Object_3_Extended_Object_Length(buf, 0)

/**
 * Signal Object_Length value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_3_Extended_Object_Length(x, fmt) \
	((x) * fmt / 5)

/**
 * Signal Object_Length raw initial value.
 */
#define START_Object_3_Extended_Object_Length       0

/**
 * Signal Object_Length raw minimum value.
 */
#define MIN_Object_3_Extended_Object_Length         0

/**
 * Signal Object_Length raw maximum value.
 */
#define MAX_Object_3_Extended_Object_Length         255

/**
 * Signal Object_Length raw offset value.
 */
#define OFF_Object_3_Extended_Object_Length         0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_3_Extended_Object_OrientationAngle Signal Object_OrientationAngle of Message Object_3_Extended (0x60d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_3_Extended
 * @{
 */

/**
 * Signal Object_OrientationAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_3_Extended_Object_OrientationAngle and \ref GET_Object_3_Extended_Object_OrientationAngle instead.
 */
#define SIG_Object_3_Extended_Object_OrientationAngle        1, 0, 39, 10

/**
 * Signal Object_OrientationAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_3_Extended_Object_OrientationAngle or \ref INIT_Object_3_Extended instead.
 */
#define SETUP_Object_3_Extended_Object_OrientationAngle      1, 0, 39, 10, 0

/**
 * Get signal Object_OrientationAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_3_Extended_Object_OrientationAngle(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0xff) << 2) \
	| (ubyte)(+(ubyte)((buf[5] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Object_OrientationAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_3_Extended_Object_OrientationAngle(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 2) & 0xff) << 0; \
	buf[5] &= ~(0x03 << 6); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Object_OrientationAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_3_Extended_Object_OrientationAngle(buf) \
	SET_Object_3_Extended_Object_OrientationAngle(buf, 0)

/**
 * Signal Object_OrientationAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_3_Extended_Object_OrientationAngle(x, fmt) \
	((x) * fmt * 2 / 5 + fmt * (-180))

/**
 * Signal Object_OrientationAngle raw initial value.
 */
#define START_Object_3_Extended_Object_OrientationAngle      0

/**
 * Signal Object_OrientationAngle raw minimum value.
 */
#define MIN_Object_3_Extended_Object_OrientationAngle        0

/**
 * Signal Object_OrientationAngle raw maximum value.
 */
#define MAX_Object_3_Extended_Object_OrientationAngle        900

/**
 * Signal Object_OrientationAngle raw offset value.
 */
#define OFF_Object_3_Extended_Object_OrientationAngle        -450

/**
 * @}
 */

/**
 * @defgroup SIG_Object_3_Extended_Object_ID Signal Object_ID of Message Object_3_Extended (0x60d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_3_Extended
 * @{
 */

/**
 * Signal Object_ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_3_Extended_Object_ID and \ref GET_Object_3_Extended_Object_ID instead.
 */
#define SIG_Object_3_Extended_Object_ID             1, 0, 7, 8

/**
 * Signal Object_ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_3_Extended_Object_ID or \ref INIT_Object_3_Extended instead.
 */
#define SETUP_Object_3_Extended_Object_ID           1, 0, 7, 8, 0

/**
 * Get signal Object_ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_3_Extended_Object_ID(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Object_ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_3_Extended_Object_ID(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Object_ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_3_Extended_Object_ID(buf) \
	SET_Object_3_Extended_Object_ID(buf, 0)

/**
 * Signal Object_ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_3_Extended_Object_ID(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_ID raw initial value.
 */
#define START_Object_3_Extended_Object_ID           0

/**
 * Signal Object_ID raw minimum value.
 */
#define MIN_Object_3_Extended_Object_ID             0

/**
 * Signal Object_ID raw maximum value.
 */
#define MAX_Object_3_Extended_Object_ID             255

/**
 * Signal Object_ID raw offset value.
 */
#define OFF_Object_3_Extended_Object_ID             0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_3_Extended_Object_Width Signal Object_Width of Message Object_3_Extended (0x60d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_3_Extended
 * @{
 */

/**
 * Signal Object_Width configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_3_Extended_Object_Width and \ref GET_Object_3_Extended_Object_Width instead.
 */
#define SIG_Object_3_Extended_Object_Width          1, 0, 63, 8

/**
 * Signal Object_Width setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_3_Extended_Object_Width or \ref INIT_Object_3_Extended instead.
 */
#define SETUP_Object_3_Extended_Object_Width        1, 0, 63, 8, 0

/**
 * Get signal Object_Width from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_3_Extended_Object_Width(buf) (0 \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Object_Width in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_3_Extended_Object_Width(buf, val) { \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Object_Width in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_3_Extended_Object_Width(buf) \
	SET_Object_3_Extended_Object_Width(buf, 0)

/**
 * Signal Object_Width value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_3_Extended_Object_Width(x, fmt) \
	((x) * fmt / 5)

/**
 * Signal Object_Width raw initial value.
 */
#define START_Object_3_Extended_Object_Width        0

/**
 * Signal Object_Width raw minimum value.
 */
#define MIN_Object_3_Extended_Object_Width          0

/**
 * Signal Object_Width raw maximum value.
 */
#define MAX_Object_3_Extended_Object_Width          255

/**
 * Signal Object_Width raw offset value.
 */
#define OFF_Object_3_Extended_Object_Width          0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_3_Extended_Object_Class Signal Object_Class of Message Object_3_Extended (0x60d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_3_Extended
 * @{
 */

/**
 * Signal Object_Class configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_3_Extended_Object_Class and \ref GET_Object_3_Extended_Object_Class instead.
 */
#define SIG_Object_3_Extended_Object_Class          1, 0, 26, 3

/**
 * Signal Object_Class setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_3_Extended_Object_Class or \ref INIT_Object_3_Extended instead.
 */
#define SETUP_Object_3_Extended_Object_Class        1, 0, 26, 3, 0

/**
 * Get signal Object_Class from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_3_Extended_Object_Class(buf) (0 \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0x07) << 0) \
)

/**
 * Set signal Object_Class in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_3_Extended_Object_Class(buf, val) { \
	buf[3] &= ~(0x07 << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal Object_Class in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_3_Extended_Object_Class(buf) \
	SET_Object_3_Extended_Object_Class(buf, 0)

/**
 * Signal Object_Class value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_3_Extended_Object_Class(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class raw initial value.
 */
#define START_Object_3_Extended_Object_Class        0

/**
 * Signal Object_Class raw minimum value.
 */
#define MIN_Object_3_Extended_Object_Class          0

/**
 * Signal Object_Class raw maximum value.
 */
#define MAX_Object_3_Extended_Object_Class          7

/**
 * Signal Object_Class raw offset value.
 */
#define OFF_Object_3_Extended_Object_Class          0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_3_Extended_Object_ArelLong Signal Object_ArelLong of Message Object_3_Extended (0x60d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_3_Extended
 * @{
 */

/**
 * Signal Object_ArelLong configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_3_Extended_Object_ArelLong and \ref GET_Object_3_Extended_Object_ArelLong instead.
 */
#define SIG_Object_3_Extended_Object_ArelLong        1, 0, 15, 11

/**
 * Signal Object_ArelLong setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_3_Extended_Object_ArelLong or \ref INIT_Object_3_Extended instead.
 */
#define SETUP_Object_3_Extended_Object_ArelLong      1, 0, 15, 11, 0

/**
 * Get signal Object_ArelLong from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_3_Extended_Object_ArelLong(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0xff) << 3) \
	| (ubyte)(+(ubyte)((buf[2] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Object_ArelLong in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_3_Extended_Object_ArelLong(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 3) & 0xff) << 0; \
	buf[2] &= ~(0x07 << 5); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Object_ArelLong in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_3_Extended_Object_ArelLong(buf) \
	SET_Object_3_Extended_Object_ArelLong(buf, 0)

/**
 * Signal Object_ArelLong value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_3_Extended_Object_ArelLong(x, fmt) \
	((x) * fmt / 100 + fmt * (-10))

/**
 * Signal Object_ArelLong raw initial value.
 */
#define START_Object_3_Extended_Object_ArelLong      0

/**
 * Signal Object_ArelLong raw minimum value.
 */
#define MIN_Object_3_Extended_Object_ArelLong        0

/**
 * Signal Object_ArelLong raw maximum value.
 */
#define MAX_Object_3_Extended_Object_ArelLong        2047

/**
 * Signal Object_ArelLong raw offset value.
 */
#define OFF_Object_3_Extended_Object_ArelLong        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Object_3_Extended_Object_ArelLat Signal Object_ArelLat of Message Object_3_Extended (0x60d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_3_Extended
 * @{
 */

/**
 * Signal Object_ArelLat configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_3_Extended_Object_ArelLat and \ref GET_Object_3_Extended_Object_ArelLat instead.
 */
#define SIG_Object_3_Extended_Object_ArelLat        1, 0, 20, 9

/**
 * Signal Object_ArelLat setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_3_Extended_Object_ArelLat or \ref INIT_Object_3_Extended instead.
 */
#define SETUP_Object_3_Extended_Object_ArelLat      1, 0, 20, 9, 0

/**
 * Get signal Object_ArelLat from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_3_Extended_Object_ArelLat(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x1f) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Object_ArelLat in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_3_Extended_Object_ArelLat(buf, val) { \
	buf[2] &= ~(0x1f << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 4) & 0x1f) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Object_ArelLat in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_3_Extended_Object_ArelLat(buf) \
	SET_Object_3_Extended_Object_ArelLat(buf, 0)

/**
 * Signal Object_ArelLat value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_3_Extended_Object_ArelLat(x, fmt) \
	((x) * fmt / 100 + fmt * 5 / (-2))

/**
 * Signal Object_ArelLat raw initial value.
 */
#define START_Object_3_Extended_Object_ArelLat      0

/**
 * Signal Object_ArelLat raw minimum value.
 */
#define MIN_Object_3_Extended_Object_ArelLat        0

/**
 * Signal Object_ArelLat raw maximum value.
 */
#define MAX_Object_3_Extended_Object_ArelLat        511

/**
 * Signal Object_ArelLat raw offset value.
 */
#define OFF_Object_3_Extended_Object_ArelLat        -250

/**
 * @}
 */

/**
 * @defgroup SIG_Object_2_Quality_Object_VrelLong_rms Signal Object_VrelLong_rms of Message Object_2_Quality (0x60c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_2_Quality
 * @{
 */

/**
 * Signal Object_VrelLong_rms configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_2_Quality_Object_VrelLong_rms and \ref GET_Object_2_Quality_Object_VrelLong_rms instead.
 */
#define SIG_Object_2_Quality_Object_VrelLong_rms        1, 0, 21, 5

/**
 * Signal Object_VrelLong_rms setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_2_Quality_Object_VrelLong_rms or \ref INIT_Object_2_Quality instead.
 */
#define SETUP_Object_2_Quality_Object_VrelLong_rms      1, 0, 21, 5, 0

/**
 * Get signal Object_VrelLong_rms from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_2_Quality_Object_VrelLong_rms(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 1) & 0x1f) << 0) \
)

/**
 * Set signal Object_VrelLong_rms in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_2_Quality_Object_VrelLong_rms(buf, val) { \
	buf[2] &= ~(0x1f << 1); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 1; \
}

/**
 * Set signal Object_VrelLong_rms in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_2_Quality_Object_VrelLong_rms(buf) \
	SET_Object_2_Quality_Object_VrelLong_rms(buf, 0)

/**
 * Signal Object_VrelLong_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_2_Quality_Object_VrelLong_rms(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_VrelLong_rms raw initial value.
 */
#define START_Object_2_Quality_Object_VrelLong_rms      0

/**
 * Signal Object_VrelLong_rms raw minimum value.
 */
#define MIN_Object_2_Quality_Object_VrelLong_rms        0

/**
 * Signal Object_VrelLong_rms raw maximum value.
 */
#define MAX_Object_2_Quality_Object_VrelLong_rms        31

/**
 * Signal Object_VrelLong_rms raw offset value.
 */
#define OFF_Object_2_Quality_Object_VrelLong_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_2_Quality_Object_VrelLat_rms Signal Object_VrelLat_rms of Message Object_2_Quality (0x60c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_2_Quality
 * @{
 */

/**
 * Signal Object_VrelLat_rms configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_2_Quality_Object_VrelLat_rms and \ref GET_Object_2_Quality_Object_VrelLat_rms instead.
 */
#define SIG_Object_2_Quality_Object_VrelLat_rms        1, 0, 16, 5

/**
 * Signal Object_VrelLat_rms setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_2_Quality_Object_VrelLat_rms or \ref INIT_Object_2_Quality instead.
 */
#define SETUP_Object_2_Quality_Object_VrelLat_rms      1, 0, 16, 5, 0

/**
 * Get signal Object_VrelLat_rms from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_2_Quality_Object_VrelLat_rms(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0x01) << 4) \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Object_VrelLat_rms in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_2_Quality_Object_VrelLat_rms(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((ubyte)(val) >> 4) & 0x01) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Object_VrelLat_rms in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_2_Quality_Object_VrelLat_rms(buf) \
	SET_Object_2_Quality_Object_VrelLat_rms(buf, 0)

/**
 * Signal Object_VrelLat_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_2_Quality_Object_VrelLat_rms(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_VrelLat_rms raw initial value.
 */
#define START_Object_2_Quality_Object_VrelLat_rms      0

/**
 * Signal Object_VrelLat_rms raw minimum value.
 */
#define MIN_Object_2_Quality_Object_VrelLat_rms        0

/**
 * Signal Object_VrelLat_rms raw maximum value.
 */
#define MAX_Object_2_Quality_Object_VrelLat_rms        31

/**
 * Signal Object_VrelLat_rms raw offset value.
 */
#define OFF_Object_2_Quality_Object_VrelLat_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_2_Quality_Object_ProbOfexist Signal Object_ProbOfexist of Message Object_2_Quality (0x60c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_2_Quality
 * @{
 */

/**
 * Signal Object_ProbOfexist configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_2_Quality_Object_ProbOfexist and \ref GET_Object_2_Quality_Object_ProbOfexist instead.
 */
#define SIG_Object_2_Quality_Object_ProbOfexist        1, 0, 55, 3

/**
 * Signal Object_ProbOfexist setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_2_Quality_Object_ProbOfexist or \ref INIT_Object_2_Quality instead.
 */
#define SETUP_Object_2_Quality_Object_ProbOfexist      1, 0, 55, 3, 0

/**
 * Get signal Object_ProbOfexist from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_2_Quality_Object_ProbOfexist(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Object_ProbOfexist in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_2_Quality_Object_ProbOfexist(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Object_ProbOfexist in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_2_Quality_Object_ProbOfexist(buf) \
	SET_Object_2_Quality_Object_ProbOfexist(buf, 0)

/**
 * Signal Object_ProbOfexist value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_2_Quality_Object_ProbOfexist(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_ProbOfexist raw initial value.
 */
#define START_Object_2_Quality_Object_ProbOfexist      0

/**
 * Signal Object_ProbOfexist raw minimum value.
 */
#define MIN_Object_2_Quality_Object_ProbOfexist        0

/**
 * Signal Object_ProbOfexist raw maximum value.
 */
#define MAX_Object_2_Quality_Object_ProbOfexist        7

/**
 * Signal Object_ProbOfexist raw offset value.
 */
#define OFF_Object_2_Quality_Object_ProbOfexist        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_2_Quality_Object_Orientation_rms Signal Object_Orientation_rms of Message Object_2_Quality (0x60c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_2_Quality
 * @{
 */

/**
 * Signal Object_Orientation_rms configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_2_Quality_Object_Orientation_rms and \ref GET_Object_2_Quality_Object_Orientation_rms instead.
 */
#define SIG_Object_2_Quality_Object_Orientation_rms        1, 0, 33, 5

/**
 * Signal Object_Orientation_rms setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_2_Quality_Object_Orientation_rms or \ref INIT_Object_2_Quality instead.
 */
#define SETUP_Object_2_Quality_Object_Orientation_rms      1, 0, 33, 5, 0

/**
 * Get signal Object_Orientation_rms from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_2_Quality_Object_Orientation_rms(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 0) & 0x03) << 3) \
	| (ubyte)(+(ubyte)((buf[5] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Object_Orientation_rms in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_2_Quality_Object_Orientation_rms(buf, val) { \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= (((ubyte)(val) >> 3) & 0x03) << 0; \
	buf[5] &= ~(0x07 << 5); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Object_Orientation_rms in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_2_Quality_Object_Orientation_rms(buf) \
	SET_Object_2_Quality_Object_Orientation_rms(buf, 0)

/**
 * Signal Object_Orientation_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_2_Quality_Object_Orientation_rms(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Orientation_rms raw initial value.
 */
#define START_Object_2_Quality_Object_Orientation_rms      0

/**
 * Signal Object_Orientation_rms raw minimum value.
 */
#define MIN_Object_2_Quality_Object_Orientation_rms        0

/**
 * Signal Object_Orientation_rms raw maximum value.
 */
#define MAX_Object_2_Quality_Object_Orientation_rms        31

/**
 * Signal Object_Orientation_rms raw offset value.
 */
#define OFF_Object_2_Quality_Object_Orientation_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_2_Quality_Object_MeasState Signal Object_MeasState of Message Object_2_Quality (0x60c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_2_Quality
 * @{
 */

/**
 * Signal Object_MeasState configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_2_Quality_Object_MeasState and \ref GET_Object_2_Quality_Object_MeasState instead.
 */
#define SIG_Object_2_Quality_Object_MeasState        1, 0, 52, 3

/**
 * Signal Object_MeasState setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_2_Quality_Object_MeasState or \ref INIT_Object_2_Quality instead.
 */
#define SETUP_Object_2_Quality_Object_MeasState      1, 0, 52, 3, 0

/**
 * Get signal Object_MeasState from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_2_Quality_Object_MeasState(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 2) & 0x07) << 0) \
)

/**
 * Set signal Object_MeasState in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_2_Quality_Object_MeasState(buf, val) { \
	buf[6] &= ~(0x07 << 2); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal Object_MeasState in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_2_Quality_Object_MeasState(buf) \
	SET_Object_2_Quality_Object_MeasState(buf, 0)

/**
 * Signal Object_MeasState value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_2_Quality_Object_MeasState(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_MeasState raw initial value.
 */
#define START_Object_2_Quality_Object_MeasState      0

/**
 * Signal Object_MeasState raw minimum value.
 */
#define MIN_Object_2_Quality_Object_MeasState        0

/**
 * Signal Object_MeasState raw maximum value.
 */
#define MAX_Object_2_Quality_Object_MeasState        7

/**
 * Signal Object_MeasState raw offset value.
 */
#define OFF_Object_2_Quality_Object_MeasState        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_2_Quality_Object_ID Signal Object_ID of Message Object_2_Quality (0x60c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_2_Quality
 * @{
 */

/**
 * Signal Object_ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_2_Quality_Object_ID and \ref GET_Object_2_Quality_Object_ID instead.
 */
#define SIG_Object_2_Quality_Object_ID              1, 0, 7, 8

/**
 * Signal Object_ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_2_Quality_Object_ID or \ref INIT_Object_2_Quality instead.
 */
#define SETUP_Object_2_Quality_Object_ID            1, 0, 7, 8, 0

/**
 * Get signal Object_ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_2_Quality_Object_ID(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Object_ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_2_Quality_Object_ID(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Object_ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_2_Quality_Object_ID(buf) \
	SET_Object_2_Quality_Object_ID(buf, 0)

/**
 * Signal Object_ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_2_Quality_Object_ID(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_ID raw initial value.
 */
#define START_Object_2_Quality_Object_ID            0

/**
 * Signal Object_ID raw minimum value.
 */
#define MIN_Object_2_Quality_Object_ID              0

/**
 * Signal Object_ID raw maximum value.
 */
#define MAX_Object_2_Quality_Object_ID              255

/**
 * Signal Object_ID raw offset value.
 */
#define OFF_Object_2_Quality_Object_ID              0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_2_Quality_Object_DistLong_rms Signal Object_DistLong_rms of Message Object_2_Quality (0x60c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_2_Quality
 * @{
 */

/**
 * Signal Object_DistLong_rms configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_2_Quality_Object_DistLong_rms and \ref GET_Object_2_Quality_Object_DistLong_rms instead.
 */
#define SIG_Object_2_Quality_Object_DistLong_rms        1, 0, 15, 5

/**
 * Signal Object_DistLong_rms setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_2_Quality_Object_DistLong_rms or \ref INIT_Object_2_Quality instead.
 */
#define SETUP_Object_2_Quality_Object_DistLong_rms      1, 0, 15, 5, 0

/**
 * Get signal Object_DistLong_rms from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_2_Quality_Object_DistLong_rms(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal Object_DistLong_rms in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_2_Quality_Object_DistLong_rms(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal Object_DistLong_rms in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_2_Quality_Object_DistLong_rms(buf) \
	SET_Object_2_Quality_Object_DistLong_rms(buf, 0)

/**
 * Signal Object_DistLong_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_2_Quality_Object_DistLong_rms(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_DistLong_rms raw initial value.
 */
#define START_Object_2_Quality_Object_DistLong_rms      0

/**
 * Signal Object_DistLong_rms raw minimum value.
 */
#define MIN_Object_2_Quality_Object_DistLong_rms        0

/**
 * Signal Object_DistLong_rms raw maximum value.
 */
#define MAX_Object_2_Quality_Object_DistLong_rms        31

/**
 * Signal Object_DistLong_rms raw offset value.
 */
#define OFF_Object_2_Quality_Object_DistLong_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_2_Quality_Object_DistLat_rms Signal Object_DistLat_rms of Message Object_2_Quality (0x60c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_2_Quality
 * @{
 */

/**
 * Signal Object_DistLat_rms configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_2_Quality_Object_DistLat_rms and \ref GET_Object_2_Quality_Object_DistLat_rms instead.
 */
#define SIG_Object_2_Quality_Object_DistLat_rms        1, 0, 10, 5

/**
 * Signal Object_DistLat_rms setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_2_Quality_Object_DistLat_rms or \ref INIT_Object_2_Quality instead.
 */
#define SETUP_Object_2_Quality_Object_DistLat_rms      1, 0, 10, 5, 0

/**
 * Get signal Object_DistLat_rms from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_2_Quality_Object_DistLat_rms(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0x07) << 2) \
	| (ubyte)(+(ubyte)((buf[2] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Object_DistLat_rms in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_2_Quality_Object_DistLat_rms(buf, val) { \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= (((ubyte)(val) >> 2) & 0x07) << 0; \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Object_DistLat_rms in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_2_Quality_Object_DistLat_rms(buf) \
	SET_Object_2_Quality_Object_DistLat_rms(buf, 0)

/**
 * Signal Object_DistLat_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_2_Quality_Object_DistLat_rms(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_DistLat_rms raw initial value.
 */
#define START_Object_2_Quality_Object_DistLat_rms      0

/**
 * Signal Object_DistLat_rms raw minimum value.
 */
#define MIN_Object_2_Quality_Object_DistLat_rms        0

/**
 * Signal Object_DistLat_rms raw maximum value.
 */
#define MAX_Object_2_Quality_Object_DistLat_rms        31

/**
 * Signal Object_DistLat_rms raw offset value.
 */
#define OFF_Object_2_Quality_Object_DistLat_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_2_Quality_Object_ArelLong_rms Signal Object_ArelLong_rms of Message Object_2_Quality (0x60c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_2_Quality
 * @{
 */

/**
 * Signal Object_ArelLong_rms configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_2_Quality_Object_ArelLong_rms and \ref GET_Object_2_Quality_Object_ArelLong_rms instead.
 */
#define SIG_Object_2_Quality_Object_ArelLong_rms        1, 0, 27, 5

/**
 * Signal Object_ArelLong_rms setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_2_Quality_Object_ArelLong_rms or \ref INIT_Object_2_Quality instead.
 */
#define SETUP_Object_2_Quality_Object_ArelLong_rms      1, 0, 27, 5, 0

/**
 * Get signal Object_ArelLong_rms from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_2_Quality_Object_ArelLong_rms(buf) (0 \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0x0f) << 1) \
	| (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal Object_ArelLong_rms in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_2_Quality_Object_ArelLong_rms(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= (((ubyte)(val) >> 1) & 0x0f) << 0; \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal Object_ArelLong_rms in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_2_Quality_Object_ArelLong_rms(buf) \
	SET_Object_2_Quality_Object_ArelLong_rms(buf, 0)

/**
 * Signal Object_ArelLong_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_2_Quality_Object_ArelLong_rms(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_ArelLong_rms raw initial value.
 */
#define START_Object_2_Quality_Object_ArelLong_rms      0

/**
 * Signal Object_ArelLong_rms raw minimum value.
 */
#define MIN_Object_2_Quality_Object_ArelLong_rms        0

/**
 * Signal Object_ArelLong_rms raw maximum value.
 */
#define MAX_Object_2_Quality_Object_ArelLong_rms        31

/**
 * Signal Object_ArelLong_rms raw offset value.
 */
#define OFF_Object_2_Quality_Object_ArelLong_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_2_Quality_Object_ArelLat_rms Signal Object_ArelLat_rms of Message Object_2_Quality (0x60c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_2_Quality
 * @{
 */

/**
 * Signal Object_ArelLat_rms configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_2_Quality_Object_ArelLat_rms and \ref GET_Object_2_Quality_Object_ArelLat_rms instead.
 */
#define SIG_Object_2_Quality_Object_ArelLat_rms        1, 0, 38, 5

/**
 * Signal Object_ArelLat_rms setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_2_Quality_Object_ArelLat_rms or \ref INIT_Object_2_Quality instead.
 */
#define SETUP_Object_2_Quality_Object_ArelLat_rms      1, 0, 38, 5, 0

/**
 * Get signal Object_ArelLat_rms from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_2_Quality_Object_ArelLat_rms(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 2) & 0x1f) << 0) \
)

/**
 * Set signal Object_ArelLat_rms in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_2_Quality_Object_ArelLat_rms(buf, val) { \
	buf[4] &= ~(0x1f << 2); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x1f) << 2; \
}

/**
 * Set signal Object_ArelLat_rms in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_2_Quality_Object_ArelLat_rms(buf) \
	SET_Object_2_Quality_Object_ArelLat_rms(buf, 0)

/**
 * Signal Object_ArelLat_rms value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_2_Quality_Object_ArelLat_rms(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_ArelLat_rms raw initial value.
 */
#define START_Object_2_Quality_Object_ArelLat_rms      0

/**
 * Signal Object_ArelLat_rms raw minimum value.
 */
#define MIN_Object_2_Quality_Object_ArelLat_rms        0

/**
 * Signal Object_ArelLat_rms raw maximum value.
 */
#define MAX_Object_2_Quality_Object_ArelLat_rms        31

/**
 * Signal Object_ArelLat_rms raw offset value.
 */
#define OFF_Object_2_Quality_Object_ArelLat_rms        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_1_General_Object_VrelLong Signal Object_VrelLong of Message Object_1_General (0x60b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_1_General
 * @{
 */

/**
 * Signal Object_VrelLong configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_1_General_Object_VrelLong and \ref GET_Object_1_General_Object_VrelLong instead.
 */
#define SIG_Object_1_General_Object_VrelLong        1, 0, 39, 10

/**
 * Signal Object_VrelLong setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_1_General_Object_VrelLong or \ref INIT_Object_1_General instead.
 */
#define SETUP_Object_1_General_Object_VrelLong      1, 0, 39, 10, 0

/**
 * Get signal Object_VrelLong from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_1_General_Object_VrelLong(buf) (0 \
	| (uword)(+(uword)((buf[4] >> 0) & 0xff) << 2) \
	| (ubyte)(+(ubyte)((buf[5] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Object_VrelLong in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_1_General_Object_VrelLong(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 2) & 0xff) << 0; \
	buf[5] &= ~(0x03 << 6); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Object_VrelLong in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_1_General_Object_VrelLong(buf) \
	SET_Object_1_General_Object_VrelLong(buf, 0)

/**
 * Signal Object_VrelLong value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_1_General_Object_VrelLong(x, fmt) \
	((x) * fmt / 4 + fmt * (-128))

/**
 * Signal Object_VrelLong raw initial value.
 */
#define START_Object_1_General_Object_VrelLong      0

/**
 * Signal Object_VrelLong raw minimum value.
 */
#define MIN_Object_1_General_Object_VrelLong        0

/**
 * Signal Object_VrelLong raw maximum value.
 */
#define MAX_Object_1_General_Object_VrelLong        1023

/**
 * Signal Object_VrelLong raw offset value.
 */
#define OFF_Object_1_General_Object_VrelLong        -512

/**
 * @}
 */

/**
 * @defgroup SIG_Object_1_General_Object_VrelLat Signal Object_VrelLat of Message Object_1_General (0x60b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_1_General
 * @{
 */

/**
 * Signal Object_VrelLat configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_1_General_Object_VrelLat and \ref GET_Object_1_General_Object_VrelLat instead.
 */
#define SIG_Object_1_General_Object_VrelLat         1, 0, 45, 9

/**
 * Signal Object_VrelLat setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_1_General_Object_VrelLat or \ref INIT_Object_1_General instead.
 */
#define SETUP_Object_1_General_Object_VrelLat       1, 0, 45, 9, 0

/**
 * Get signal Object_VrelLat from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_1_General_Object_VrelLat(buf) (0 \
	| (uword)(+(uword)((buf[5] >> 0) & 0x3f) << 3) \
	| (ubyte)(+(ubyte)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Object_VrelLat in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_1_General_Object_VrelLat(buf, val) { \
	buf[5] &= ~(0x3f << 0); \
	buf[5] |= ((ubyte)((uword)(val) >> 3) & 0x3f) << 0; \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Object_VrelLat in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_1_General_Object_VrelLat(buf) \
	SET_Object_1_General_Object_VrelLat(buf, 0)

/**
 * Signal Object_VrelLat value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_1_General_Object_VrelLat(x, fmt) \
	((x) * fmt / 4 + fmt * (-64))

/**
 * Signal Object_VrelLat raw initial value.
 */
#define START_Object_1_General_Object_VrelLat       0

/**
 * Signal Object_VrelLat raw minimum value.
 */
#define MIN_Object_1_General_Object_VrelLat         0

/**
 * Signal Object_VrelLat raw maximum value.
 */
#define MAX_Object_1_General_Object_VrelLat         511

/**
 * Signal Object_VrelLat raw offset value.
 */
#define OFF_Object_1_General_Object_VrelLat         -256

/**
 * @}
 */

/**
 * @defgroup SIG_Object_1_General_Object_RCS Signal Object_RCS of Message Object_1_General (0x60b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_1_General
 * @{
 */

/**
 * Signal Object_RCS configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_1_General_Object_RCS and \ref GET_Object_1_General_Object_RCS instead.
 */
#define SIG_Object_1_General_Object_RCS             1, 0, 63, 8

/**
 * Signal Object_RCS setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_1_General_Object_RCS or \ref INIT_Object_1_General instead.
 */
#define SETUP_Object_1_General_Object_RCS           1, 0, 63, 8, 0

/**
 * Get signal Object_RCS from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_1_General_Object_RCS(buf) (0 \
	| (ubyte)(+(ubyte)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Object_RCS in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_1_General_Object_RCS(buf, val) { \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Object_RCS in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_1_General_Object_RCS(buf) \
	SET_Object_1_General_Object_RCS(buf, 0)

/**
 * Signal Object_RCS value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_1_General_Object_RCS(x, fmt) \
	((x) * fmt / 2 + fmt * (-64))

/**
 * Signal Object_RCS raw initial value.
 */
#define START_Object_1_General_Object_RCS           0

/**
 * Signal Object_RCS raw minimum value.
 */
#define MIN_Object_1_General_Object_RCS             0

/**
 * Signal Object_RCS raw maximum value.
 */
#define MAX_Object_1_General_Object_RCS             255

/**
 * Signal Object_RCS raw offset value.
 */
#define OFF_Object_1_General_Object_RCS             -128

/**
 * @}
 */

/**
 * @defgroup SIG_Object_1_General_Object_ID Signal Object_ID of Message Object_1_General (0x60b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_1_General
 * @{
 */

/**
 * Signal Object_ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_1_General_Object_ID and \ref GET_Object_1_General_Object_ID instead.
 */
#define SIG_Object_1_General_Object_ID              1, 0, 7, 8

/**
 * Signal Object_ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_1_General_Object_ID or \ref INIT_Object_1_General instead.
 */
#define SETUP_Object_1_General_Object_ID            1, 0, 7, 8, 0

/**
 * Get signal Object_ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_1_General_Object_ID(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Object_ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_1_General_Object_ID(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Object_ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_1_General_Object_ID(buf) \
	SET_Object_1_General_Object_ID(buf, 0)

/**
 * Signal Object_ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_1_General_Object_ID(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_ID raw initial value.
 */
#define START_Object_1_General_Object_ID            0

/**
 * Signal Object_ID raw minimum value.
 */
#define MIN_Object_1_General_Object_ID              0

/**
 * Signal Object_ID raw maximum value.
 */
#define MAX_Object_1_General_Object_ID              255

/**
 * Signal Object_ID raw offset value.
 */
#define OFF_Object_1_General_Object_ID              0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_1_General_Object_DynProp Signal Object_DynProp of Message Object_1_General (0x60b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_1_General
 * @{
 */

/**
 * Signal Object_DynProp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_1_General_Object_DynProp and \ref GET_Object_1_General_Object_DynProp instead.
 */
#define SIG_Object_1_General_Object_DynProp         1, 0, 50, 3

/**
 * Signal Object_DynProp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_1_General_Object_DynProp or \ref INIT_Object_1_General instead.
 */
#define SETUP_Object_1_General_Object_DynProp       1, 0, 50, 3, 0

/**
 * Get signal Object_DynProp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_1_General_Object_DynProp(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0x07) << 0) \
)

/**
 * Set signal Object_DynProp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_1_General_Object_DynProp(buf, val) { \
	buf[6] &= ~(0x07 << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal Object_DynProp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_1_General_Object_DynProp(buf) \
	SET_Object_1_General_Object_DynProp(buf, 0)

/**
 * Signal Object_DynProp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_1_General_Object_DynProp(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_DynProp raw initial value.
 */
#define START_Object_1_General_Object_DynProp       0

/**
 * Signal Object_DynProp raw minimum value.
 */
#define MIN_Object_1_General_Object_DynProp         0

/**
 * Signal Object_DynProp raw maximum value.
 */
#define MAX_Object_1_General_Object_DynProp         7

/**
 * Signal Object_DynProp raw offset value.
 */
#define OFF_Object_1_General_Object_DynProp         0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_1_General_Object_DistLong Signal Object_DistLong of Message Object_1_General (0x60b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_1_General
 * @{
 */

/**
 * Signal Object_DistLong configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_1_General_Object_DistLong and \ref GET_Object_1_General_Object_DistLong instead.
 */
#define SIG_Object_1_General_Object_DistLong        1, 0, 15, 13

/**
 * Signal Object_DistLong setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_1_General_Object_DistLong or \ref INIT_Object_1_General instead.
 */
#define SETUP_Object_1_General_Object_DistLong      1, 0, 15, 13, 0

/**
 * Get signal Object_DistLong from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_1_General_Object_DistLong(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0xff) << 5) \
	| (ubyte)(+(ubyte)((buf[2] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal Object_DistLong in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_1_General_Object_DistLong(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 5) & 0xff) << 0; \
	buf[2] &= ~(0x1f << 3); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal Object_DistLong in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_1_General_Object_DistLong(buf) \
	SET_Object_1_General_Object_DistLong(buf, 0)

/**
 * Signal Object_DistLong value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_1_General_Object_DistLong(x, fmt) \
	((x) * fmt / 5 + fmt * (-500))

/**
 * Signal Object_DistLong raw initial value.
 */
#define START_Object_1_General_Object_DistLong      0

/**
 * Signal Object_DistLong raw minimum value.
 */
#define MIN_Object_1_General_Object_DistLong        0

/**
 * Signal Object_DistLong raw maximum value.
 */
#define MAX_Object_1_General_Object_DistLong        8191

/**
 * Signal Object_DistLong raw offset value.
 */
#define OFF_Object_1_General_Object_DistLong        -2500

/**
 * @}
 */

/**
 * @defgroup SIG_Object_1_General_Object_DistLat Signal Object_DistLat of Message Object_1_General (0x60b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_1_General
 * @{
 */

/**
 * Signal Object_DistLat configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_1_General_Object_DistLat and \ref GET_Object_1_General_Object_DistLat instead.
 */
#define SIG_Object_1_General_Object_DistLat         1, 0, 18, 11

/**
 * Signal Object_DistLat setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_1_General_Object_DistLat or \ref INIT_Object_1_General instead.
 */
#define SETUP_Object_1_General_Object_DistLat       1, 0, 18, 11, 0

/**
 * Get signal Object_DistLat from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_1_General_Object_DistLat(buf) (0 \
	| (uword)(+(uword)((buf[2] >> 0) & 0x07) << 8) \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Object_DistLat in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_1_General_Object_DistLat(buf, val) { \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= ((ubyte)((uword)(val) >> 8) & 0x07) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Object_DistLat in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_1_General_Object_DistLat(buf) \
	SET_Object_1_General_Object_DistLat(buf, 0)

/**
 * Signal Object_DistLat value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_1_General_Object_DistLat(x, fmt) \
	((x) * fmt / 5 + fmt * 1023 / (-5))

/**
 * Signal Object_DistLat raw initial value.
 */
#define START_Object_1_General_Object_DistLat       0

/**
 * Signal Object_DistLat raw minimum value.
 */
#define MIN_Object_1_General_Object_DistLat         0

/**
 * Signal Object_DistLat raw maximum value.
 */
#define MAX_Object_1_General_Object_DistLat         2047

/**
 * Signal Object_DistLat raw offset value.
 */
#define OFF_Object_1_General_Object_DistLat         -1023

/**
 * @}
 */

/**
 * @defgroup SIG_Object_0_Status_Object_NofObjects Signal Object_NofObjects of Message Object_0_Status (0x60a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_0_Status
 * @{
 */

/**
 * Signal Object_NofObjects configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_0_Status_Object_NofObjects and \ref GET_Object_0_Status_Object_NofObjects instead.
 */
#define SIG_Object_0_Status_Object_NofObjects        1, 0, 7, 8

/**
 * Signal Object_NofObjects setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_0_Status_Object_NofObjects or \ref INIT_Object_0_Status instead.
 */
#define SETUP_Object_0_Status_Object_NofObjects      1, 0, 7, 8, 0

/**
 * Get signal Object_NofObjects from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_0_Status_Object_NofObjects(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Object_NofObjects in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_0_Status_Object_NofObjects(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Object_NofObjects in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_0_Status_Object_NofObjects(buf) \
	SET_Object_0_Status_Object_NofObjects(buf, 0)

/**
 * Signal Object_NofObjects value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_0_Status_Object_NofObjects(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_NofObjects raw initial value.
 */
#define START_Object_0_Status_Object_NofObjects      0

/**
 * Signal Object_NofObjects raw minimum value.
 */
#define MIN_Object_0_Status_Object_NofObjects        0

/**
 * Signal Object_NofObjects raw maximum value.
 */
#define MAX_Object_0_Status_Object_NofObjects        255

/**
 * Signal Object_NofObjects raw offset value.
 */
#define OFF_Object_0_Status_Object_NofObjects        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_0_Status_Object_MeasCounter Signal Object_MeasCounter of Message Object_0_Status (0x60a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_0_Status
 * @{
 */

/**
 * Signal Object_MeasCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_0_Status_Object_MeasCounter and \ref GET_Object_0_Status_Object_MeasCounter instead.
 */
#define SIG_Object_0_Status_Object_MeasCounter        1, 0, 15, 16

/**
 * Signal Object_MeasCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_0_Status_Object_MeasCounter or \ref INIT_Object_0_Status instead.
 */
#define SETUP_Object_0_Status_Object_MeasCounter      1, 0, 15, 16, 0

/**
 * Get signal Object_MeasCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_0_Status_Object_MeasCounter(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Object_MeasCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_0_Status_Object_MeasCounter(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Object_MeasCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_0_Status_Object_MeasCounter(buf) \
	SET_Object_0_Status_Object_MeasCounter(buf, 0)

/**
 * Signal Object_MeasCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_0_Status_Object_MeasCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_MeasCounter raw initial value.
 */
#define START_Object_0_Status_Object_MeasCounter      0

/**
 * Signal Object_MeasCounter raw minimum value.
 */
#define MIN_Object_0_Status_Object_MeasCounter        0

/**
 * Signal Object_MeasCounter raw maximum value.
 */
#define MAX_Object_0_Status_Object_MeasCounter        65535

/**
 * Signal Object_MeasCounter raw offset value.
 */
#define OFF_Object_0_Status_Object_MeasCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_Object_0_Status_Object_InterfaceVersion Signal Object_InterfaceVersion of Message Object_0_Status (0x60a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Object_0_Status
 * @{
 */

/**
 * Signal Object_InterfaceVersion configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Object_0_Status_Object_InterfaceVersion and \ref GET_Object_0_Status_Object_InterfaceVersion instead.
 */
#define SIG_Object_0_Status_Object_InterfaceVersion        1, 0, 31, 4

/**
 * Signal Object_InterfaceVersion setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Object_0_Status_Object_InterfaceVersion or \ref INIT_Object_0_Status instead.
 */
#define SETUP_Object_0_Status_Object_InterfaceVersion      1, 0, 31, 4, 0

/**
 * Get signal Object_InterfaceVersion from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Object_0_Status_Object_InterfaceVersion(buf) (0 \
	| (ubyte)(+(ubyte)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Object_InterfaceVersion in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Object_0_Status_Object_InterfaceVersion(buf, val) { \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((ubyte)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Object_InterfaceVersion in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Object_0_Status_Object_InterfaceVersion(buf) \
	SET_Object_0_Status_Object_InterfaceVersion(buf, 0)

/**
 * Signal Object_InterfaceVersion value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Object_0_Status_Object_InterfaceVersion(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_InterfaceVersion raw initial value.
 */
#define START_Object_0_Status_Object_InterfaceVersion      0

/**
 * Signal Object_InterfaceVersion raw minimum value.
 */
#define MIN_Object_0_Status_Object_InterfaceVersion        0

/**
 * Signal Object_InterfaceVersion raw maximum value.
 */
#define MAX_Object_0_Status_Object_InterfaceVersion        15

/**
 * Signal Object_InterfaceVersion raw offset value.
 */
#define OFF_Object_0_Status_Object_InterfaceVersion        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_Voltage_Error Signal RadarState_Voltage_Error of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_Voltage_Error configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_Voltage_Error and \ref GET_RadarState_RadarState_Voltage_Error instead.
 */
#define SIG_RadarState_RadarState_Voltage_Error        1, 0, 17, 1

/**
 * Signal RadarState_Voltage_Error setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_Voltage_Error or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_Voltage_Error      1, 0, 17, 1, 0

/**
 * Get signal RadarState_Voltage_Error from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_Voltage_Error(buf) (0 \
    | (ubyte)(+(ubyte)((buf[2] >> 1) & 0x01) << 0) \
)

/**
 * Set signal RadarState_Voltage_Error in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_Voltage_Error(buf, val) { \
    buf[2] &= ~(0x01 << 1); \
    buf[2] |= (((ubyte)(val) >> 0) & 0x01) << 1; \
}

/**
 * Set signal RadarState_Voltage_Error in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_Voltage_Error(buf) \
    SET_RadarState_RadarState_Voltage_Error(buf, 0)

/**
 * Signal RadarState_Voltage_Error value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_Voltage_Error(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_Voltage_Error raw initial value.
 */
#define START_RadarState_RadarState_Voltage_Error      0

/**
 * Signal RadarState_Voltage_Error raw minimum value.
 */
#define MIN_RadarState_RadarState_Voltage_Error        0

/**
 * Signal RadarState_Voltage_Error raw maximum value.
 */
#define MAX_RadarState_RadarState_Voltage_Error        1

/**
 * Signal RadarState_Voltage_Error raw offset value.
 */
#define OFF_RadarState_RadarState_Voltage_Error        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_Temporary_Error Signal RadarState_Temporary_Error of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_Temporary_Error configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_Temporary_Error and \ref GET_RadarState_RadarState_Temporary_Error instead.
 */
#define SIG_RadarState_RadarState_Temporary_Error        1, 0, 18, 1

/**
 * Signal RadarState_Temporary_Error setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_Temporary_Error or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_Temporary_Error      1, 0, 18, 1, 0

/**
 * Get signal RadarState_Temporary_Error from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_Temporary_Error(buf) (0 \
    | (ubyte)(+(ubyte)((buf[2] >> 2) & 0x01) << 0) \
)

/**
 * Set signal RadarState_Temporary_Error in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_Temporary_Error(buf, val) { \
    buf[2] &= ~(0x01 << 2); \
    buf[2] |= (((ubyte)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal RadarState_Temporary_Error in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_Temporary_Error(buf) \
    SET_RadarState_RadarState_Temporary_Error(buf, 0)

/**
 * Signal RadarState_Temporary_Error value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_Temporary_Error(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_Temporary_Error raw initial value.
 */
#define START_RadarState_RadarState_Temporary_Error      0

/**
 * Signal RadarState_Temporary_Error raw minimum value.
 */
#define MIN_RadarState_RadarState_Temporary_Error        0

/**
 * Signal RadarState_Temporary_Error raw maximum value.
 */
#define MAX_RadarState_RadarState_Temporary_Error        1

/**
 * Signal RadarState_Temporary_Error raw offset value.
 */
#define OFF_RadarState_RadarState_Temporary_Error        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_Temperature_Error Signal RadarState_Temperature_Error of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_Temperature_Error configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_Temperature_Error and \ref GET_RadarState_RadarState_Temperature_Error instead.
 */
#define SIG_RadarState_RadarState_Temperature_Error        1, 0, 19, 1

/**
 * Signal RadarState_Temperature_Error setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_Temperature_Error or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_Temperature_Error      1, 0, 19, 1, 0

/**
 * Get signal RadarState_Temperature_Error from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_Temperature_Error(buf) (0 \
    | (ubyte)(+(ubyte)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal RadarState_Temperature_Error in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_Temperature_Error(buf, val) { \
    buf[2] &= ~(0x01 << 3); \
    buf[2] |= (((ubyte)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal RadarState_Temperature_Error in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_Temperature_Error(buf) \
    SET_RadarState_RadarState_Temperature_Error(buf, 0)

/**
 * Signal RadarState_Temperature_Error value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_Temperature_Error(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_Temperature_Error raw initial value.
 */
#define START_RadarState_RadarState_Temperature_Error      0

/**
 * Signal RadarState_Temperature_Error raw minimum value.
 */
#define MIN_RadarState_RadarState_Temperature_Error        0

/**
 * Signal RadarState_Temperature_Error raw maximum value.
 */
#define MAX_RadarState_RadarState_Temperature_Error        1

/**
 * Signal RadarState_Temperature_Error raw offset value.
 */
#define OFF_RadarState_RadarState_Temperature_Error        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_Persistent_Error Signal RadarState_Persistent_Error of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_Persistent_Error configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_Persistent_Error and \ref GET_RadarState_RadarState_Persistent_Error instead.
 */
#define SIG_RadarState_RadarState_Persistent_Error        1, 0, 21, 1

/**
 * Signal RadarState_Persistent_Error setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_Persistent_Error or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_Persistent_Error      1, 0, 21, 1, 0

/**
 * Get signal RadarState_Persistent_Error from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_Persistent_Error(buf) (0 \
    | (ubyte)(+(ubyte)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal RadarState_Persistent_Error in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_Persistent_Error(buf, val) { \
    buf[2] &= ~(0x01 << 5); \
    buf[2] |= (((ubyte)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal RadarState_Persistent_Error in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_Persistent_Error(buf) \
    SET_RadarState_RadarState_Persistent_Error(buf, 0)

/**
 * Signal RadarState_Persistent_Error value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_Persistent_Error(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_Persistent_Error raw initial value.
 */
#define START_RadarState_RadarState_Persistent_Error      0

/**
 * Signal RadarState_Persistent_Error raw minimum value.
 */
#define MIN_RadarState_RadarState_Persistent_Error        0

/**
 * Signal RadarState_Persistent_Error raw maximum value.
 */
#define MAX_RadarState_RadarState_Persistent_Error        1

/**
 * Signal RadarState_Persistent_Error raw offset value.
 */
#define OFF_RadarState_RadarState_Persistent_Error        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_Interference Signal RadarState_Interference of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_Interference configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_Interference and \ref GET_RadarState_RadarState_Interference instead.
 */
#define SIG_RadarState_RadarState_Interference        1, 0, 20, 1

/**
 * Signal RadarState_Interference setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_Interference or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_Interference      1, 0, 20, 1, 0

/**
 * Get signal RadarState_Interference from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_Interference(buf) (0 \
    | (ubyte)(+(ubyte)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal RadarState_Interference in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_Interference(buf, val) { \
    buf[2] &= ~(0x01 << 4); \
    buf[2] |= (((ubyte)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal RadarState_Interference in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_Interference(buf) \
    SET_RadarState_RadarState_Interference(buf, 0)

/**
 * Signal RadarState_Interference value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_Interference(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_Interference raw initial value.
 */
#define START_RadarState_RadarState_Interference      0

/**
 * Signal RadarState_Interference raw minimum value.
 */
#define MIN_RadarState_RadarState_Interference        0

/**
 * Signal RadarState_Interference raw maximum value.
 */
#define MAX_RadarState_RadarState_Interference        1

/**
 * Signal RadarState_Interference raw offset value.
 */
#define OFF_RadarState_RadarState_Interference        0


/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_SortIndex Signal RadarState_SortIndex of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_SortIndex configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_SortIndex and \ref GET_RadarState_RadarState_SortIndex instead.
 */
#define SIG_RadarState_RadarState_SortIndex         1, 0, 38, 3

/**
 * Signal RadarState_SortIndex setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_SortIndex or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_SortIndex       1, 0, 38, 3, 0

/**
 * Get signal RadarState_SortIndex from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_SortIndex(buf) (0 \
    | (ubyte)(+(ubyte)((buf[4] >> 4) & 0x07) << 0) \
)

/**
 * Set signal RadarState_SortIndex in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_SortIndex(buf, val) { \
    buf[4] &= ~(0x07 << 4); \
    buf[4] |= (((ubyte)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal RadarState_SortIndex in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_SortIndex(buf) \
    SET_RadarState_RadarState_SortIndex(buf, 0)

/**
 * Signal RadarState_SortIndex value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_SortIndex(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_SortIndex raw initial value.
 */
#define START_RadarState_RadarState_SortIndex       0

/**
 * Signal RadarState_SortIndex raw minimum value.
 */
#define MIN_RadarState_RadarState_SortIndex         0

/**
 * Signal RadarState_SortIndex raw maximum value.
 */
#define MAX_RadarState_RadarState_SortIndex         7

/**
 * Signal RadarState_SortIndex raw offset value.
 */
#define OFF_RadarState_RadarState_SortIndex         0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_SensorID Signal RadarState_SensorID of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_SensorID configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_SensorID and \ref GET_RadarState_RadarState_SensorID instead.
 */
#define SIG_RadarState_RadarState_SensorID          1, 0, 34, 3

/**
 * Signal RadarState_SensorID setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_SensorID or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_SensorID        1, 0, 34, 3, 0

/**
 * Get signal RadarState_SensorID from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_SensorID(buf) (0 \
    | (ubyte)(+(ubyte)((buf[4] >> 0) & 0x07) << 0) \
)

/**
 * Set signal RadarState_SensorID in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_SensorID(buf, val) { \
    buf[4] &= ~(0x07 << 0); \
    buf[4] |= (((ubyte)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal RadarState_SensorID in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_SensorID(buf) \
    SET_RadarState_RadarState_SensorID(buf, 0)

/**
 * Signal RadarState_SensorID value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_SensorID(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_SensorID raw initial value.
 */
#define START_RadarState_RadarState_SensorID        0

/**
 * Signal RadarState_SensorID raw minimum value.
 */
#define MIN_RadarState_RadarState_SensorID          0

/**
 * Signal RadarState_SensorID raw maximum value.
 */
#define MAX_RadarState_RadarState_SensorID          7

/**
 * Signal RadarState_SensorID raw offset value.
 */
#define OFF_RadarState_RadarState_SensorID          0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_SendQualityCfg Signal RadarState_SendQualityCfg of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_SendQualityCfg configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_SendQualityCfg and \ref GET_RadarState_RadarState_SendQualityCfg instead.
 */
#define SIG_RadarState_RadarState_SendQualityCfg        1, 0, 44, 1

/**
 * Signal RadarState_SendQualityCfg setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_SendQualityCfg or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_SendQualityCfg      1, 0, 44, 1, 0

/**
 * Get signal RadarState_SendQualityCfg from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_SendQualityCfg(buf) (0 \
    | (ubyte)(+(ubyte)((buf[5] >> 4) & 0x01) << 0) \
)

/**
 * Set signal RadarState_SendQualityCfg in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_SendQualityCfg(buf, val) { \
    buf[5] &= ~(0x01 << 4); \
    buf[5] |= (((ubyte)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal RadarState_SendQualityCfg in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_SendQualityCfg(buf) \
    SET_RadarState_RadarState_SendQualityCfg(buf, 0)

/**
 * Signal RadarState_SendQualityCfg value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_SendQualityCfg(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_SendQualityCfg raw initial value.
 */
#define START_RadarState_RadarState_SendQualityCfg      0

/**
 * Signal RadarState_SendQualityCfg raw minimum value.
 */
#define MIN_RadarState_RadarState_SendQualityCfg        0

/**
 * Signal RadarState_SendQualityCfg raw maximum value.
 */
#define MAX_RadarState_RadarState_SendQualityCfg        1

/**
 * Signal RadarState_SendQualityCfg raw offset value.
 */
#define OFF_RadarState_RadarState_SendQualityCfg        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_SendExtInfoCfg Signal RadarState_SendExtInfoCfg of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_SendExtInfoCfg configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_SendExtInfoCfg and \ref GET_RadarState_RadarState_SendExtInfoCfg instead.
 */
#define SIG_RadarState_RadarState_SendExtInfoCfg        1, 0, 45, 1

/**
 * Signal RadarState_SendExtInfoCfg setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_SendExtInfoCfg or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_SendExtInfoCfg      1, 0, 45, 1, 0

/**
 * Get signal RadarState_SendExtInfoCfg from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_SendExtInfoCfg(buf) (0 \
    | (ubyte)(+(ubyte)((buf[5] >> 5) & 0x01) << 0) \
)

/**
 * Set signal RadarState_SendExtInfoCfg in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_SendExtInfoCfg(buf, val) { \
    buf[5] &= ~(0x01 << 5); \
    buf[5] |= (((ubyte)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal RadarState_SendExtInfoCfg in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_SendExtInfoCfg(buf) \
    SET_RadarState_RadarState_SendExtInfoCfg(buf, 0)

/**
 * Signal RadarState_SendExtInfoCfg value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_SendExtInfoCfg(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_SendExtInfoCfg raw initial value.
 */
#define START_RadarState_RadarState_SendExtInfoCfg      0

/**
 * Signal RadarState_SendExtInfoCfg raw minimum value.
 */
#define MIN_RadarState_RadarState_SendExtInfoCfg        0

/**
 * Signal RadarState_SendExtInfoCfg raw maximum value.
 */
#define MAX_RadarState_RadarState_SendExtInfoCfg        1

/**
 * Signal RadarState_SendExtInfoCfg raw offset value.
 */
#define OFF_RadarState_RadarState_SendExtInfoCfg        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_RCS_Threshold Signal RadarState_RCS_Threshold of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_RCS_Threshold configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_RCS_Threshold and \ref GET_RadarState_RadarState_RCS_Threshold instead.
 */
#define SIG_RadarState_RadarState_RCS_Threshold        1, 0, 60, 3

/**
 * Signal RadarState_RCS_Threshold setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_RCS_Threshold or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_RCS_Threshold      1, 0, 60, 3, 0

/**
 * Get signal RadarState_RCS_Threshold from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_RCS_Threshold(buf) (0 \
    | (ubyte)(+(ubyte)((buf[7] >> 2) & 0x07) << 0) \
)

/**
 * Set signal RadarState_RCS_Threshold in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_RCS_Threshold(buf, val) { \
    buf[7] &= ~(0x07 << 2); \
    buf[7] |= (((ubyte)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal RadarState_RCS_Threshold in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_RCS_Threshold(buf) \
    SET_RadarState_RadarState_RCS_Threshold(buf, 0)

/**
 * Signal RadarState_RCS_Threshold value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_RCS_Threshold(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_RCS_Threshold raw initial value.
 */
#define START_RadarState_RadarState_RCS_Threshold      0

/**
 * Signal RadarState_RCS_Threshold raw minimum value.
 */
#define MIN_RadarState_RadarState_RCS_Threshold        0

/**
 * Signal RadarState_RCS_Threshold raw maximum value.
 */
#define MAX_RadarState_RadarState_RCS_Threshold        7

/**
 * Signal RadarState_RCS_Threshold raw offset value.
 */
#define OFF_RadarState_RadarState_RCS_Threshold        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_RadarPowerCfg Signal RadarState_RadarPowerCfg of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_RadarPowerCfg configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_RadarPowerCfg and \ref GET_RadarState_RadarState_RadarPowerCfg instead.
 */
#define SIG_RadarState_RadarState_RadarPowerCfg        1, 0, 25, 3

/**
 * Signal RadarState_RadarPowerCfg setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_RadarPowerCfg or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_RadarPowerCfg      1, 0, 25, 3, 0

/**
 * Get signal RadarState_RadarPowerCfg from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_RadarPowerCfg(buf) (0 \
    | (ubyte)(+(ubyte)((buf[3] >> 0) & 0x03) << 1) \
    | (ubyte)(+(ubyte)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RadarState_RadarPowerCfg in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_RadarPowerCfg(buf, val) { \
    buf[3] &= ~(0x03 << 0); \
    buf[3] |= (((ubyte)(val) >> 1) & 0x03) << 0; \
    buf[4] &= ~(0x01 << 7); \
    buf[4] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RadarState_RadarPowerCfg in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_RadarPowerCfg(buf) \
    SET_RadarState_RadarState_RadarPowerCfg(buf, 0)

/**
 * Signal RadarState_RadarPowerCfg value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_RadarPowerCfg(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_RadarPowerCfg raw initial value.
 */
#define START_RadarState_RadarState_RadarPowerCfg      0

/**
 * Signal RadarState_RadarPowerCfg raw minimum value.
 */
#define MIN_RadarState_RadarState_RadarPowerCfg        0

/**
 * Signal RadarState_RadarPowerCfg raw maximum value.
 */
#define MAX_RadarState_RadarState_RadarPowerCfg        7

/**
 * Signal RadarState_RadarPowerCfg raw offset value.
 */
#define OFF_RadarState_RadarState_RadarPowerCfg        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_OutputTypeCfg Signal RadarState_OutputTypeCfg of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_OutputTypeCfg configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_OutputTypeCfg and \ref GET_RadarState_RadarState_OutputTypeCfg instead.
 */
#define SIG_RadarState_RadarState_OutputTypeCfg        1, 0, 43, 2

/**
 * Signal RadarState_OutputTypeCfg setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_OutputTypeCfg or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_OutputTypeCfg      1, 0, 43, 2, 0

/**
 * Get signal RadarState_OutputTypeCfg from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_OutputTypeCfg(buf) (0 \
    | (ubyte)(+(ubyte)((buf[5] >> 2) & 0x03) << 0) \
)

/**
 * Set signal RadarState_OutputTypeCfg in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_OutputTypeCfg(buf, val) { \
    buf[5] &= ~(0x03 << 2); \
    buf[5] |= (((ubyte)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal RadarState_OutputTypeCfg in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_OutputTypeCfg(buf) \
    SET_RadarState_RadarState_OutputTypeCfg(buf, 0)

/**
 * Signal RadarState_OutputTypeCfg value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_OutputTypeCfg(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_OutputTypeCfg raw initial value.
 */
#define START_RadarState_RadarState_OutputTypeCfg      0

/**
 * Signal RadarState_OutputTypeCfg raw minimum value.
 */
#define MIN_RadarState_RadarState_OutputTypeCfg        0

/**
 * Signal RadarState_OutputTypeCfg raw maximum value.
 */
#define MAX_RadarState_RadarState_OutputTypeCfg        3

/**
 * Signal RadarState_OutputTypeCfg raw offset value.
 */
#define OFF_RadarState_RadarState_OutputTypeCfg        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_NVMWriteStatus Signal RadarState_NVMWriteStatus of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_NVMWriteStatus configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_NVMWriteStatus and \ref GET_RadarState_RadarState_NVMWriteStatus instead.
 */
#define SIG_RadarState_RadarState_NVMWriteStatus        1, 0, 7, 1

/**
 * Signal RadarState_NVMWriteStatus setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_NVMWriteStatus or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_NVMWriteStatus      1, 0, 7, 1, 0

/**
 * Get signal RadarState_NVMWriteStatus from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_NVMWriteStatus(buf) (0 \
    | (ubyte)(+(ubyte)((buf[0] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RadarState_NVMWriteStatus in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_NVMWriteStatus(buf, val) { \
    buf[0] &= ~(0x01 << 7); \
    buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RadarState_NVMWriteStatus in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_NVMWriteStatus(buf) \
    SET_RadarState_RadarState_NVMWriteStatus(buf, 0)

/**
 * Signal RadarState_NVMWriteStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_NVMWriteStatus(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_NVMWriteStatus raw initial value.
 */
#define START_RadarState_RadarState_NVMWriteStatus      0

/**
 * Signal RadarState_NVMWriteStatus raw minimum value.
 */
#define MIN_RadarState_RadarState_NVMWriteStatus        0

/**
 * Signal RadarState_NVMWriteStatus raw maximum value.
 */
#define MAX_RadarState_RadarState_NVMWriteStatus        1

/**
 * Signal RadarState_NVMWriteStatus raw offset value.
 */
#define OFF_RadarState_RadarState_NVMWriteStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_NVMReadStatus Signal RadarState_NVMReadStatus of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_NVMReadStatus configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_NVMReadStatus and \ref GET_RadarState_RadarState_NVMReadStatus instead.
 */
#define SIG_RadarState_RadarState_NVMReadStatus        1, 0, 6, 1

/**
 * Signal RadarState_NVMReadStatus setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_NVMReadStatus or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_NVMReadStatus      1, 0, 6, 1, 0

/**
 * Get signal RadarState_NVMReadStatus from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_NVMReadStatus(buf) (0 \
    | (ubyte)(+(ubyte)((buf[0] >> 6) & 0x01) << 0) \
)

/**
 * Set signal RadarState_NVMReadStatus in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_NVMReadStatus(buf, val) { \
    buf[0] &= ~(0x01 << 6); \
    buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal RadarState_NVMReadStatus in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_NVMReadStatus(buf) \
    SET_RadarState_RadarState_NVMReadStatus(buf, 0)

/**
 * Signal RadarState_NVMReadStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_NVMReadStatus(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_NVMReadStatus raw initial value.
 */
#define START_RadarState_RadarState_NVMReadStatus      0

/**
 * Signal RadarState_NVMReadStatus raw minimum value.
 */
#define MIN_RadarState_RadarState_NVMReadStatus        0

/**
 * Signal RadarState_NVMReadStatus raw maximum value.
 */
#define MAX_RadarState_RadarState_NVMReadStatus        1

/**
 * Signal RadarState_NVMReadStatus raw offset value.
 */
#define OFF_RadarState_RadarState_NVMReadStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_MotionRxState Signal RadarState_MotionRxState of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_MotionRxState configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_MotionRxState and \ref GET_RadarState_RadarState_MotionRxState instead.
 */
#define SIG_RadarState_RadarState_MotionRxState        1, 0, 47, 2

/**
 * Signal RadarState_MotionRxState setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_MotionRxState or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_MotionRxState      1, 0, 47, 2, 0

/**
 * Get signal RadarState_MotionRxState from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_MotionRxState(buf) (0 \
    | (ubyte)(+(ubyte)((buf[5] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RadarState_MotionRxState in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_MotionRxState(buf, val) { \
    buf[5] &= ~(0x03 << 6); \
    buf[5] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RadarState_MotionRxState in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_MotionRxState(buf) \
    SET_RadarState_RadarState_MotionRxState(buf, 0)

/**
 * Signal RadarState_MotionRxState value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_MotionRxState(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_MotionRxState raw initial value.
 */
#define START_RadarState_RadarState_MotionRxState      0

/**
 * Signal RadarState_MotionRxState raw minimum value.
 */
#define MIN_RadarState_RadarState_MotionRxState        0

/**
 * Signal RadarState_MotionRxState raw maximum value.
 */
#define MAX_RadarState_RadarState_MotionRxState        3

/**
 * Signal RadarState_MotionRxState raw offset value.
 */
#define OFF_RadarState_RadarState_MotionRxState        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_MaxDistanceCfg Signal RadarState_MaxDistanceCfg of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_MaxDistanceCfg configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_MaxDistanceCfg and \ref GET_RadarState_RadarState_MaxDistanceCfg instead.
 */
#define SIG_RadarState_RadarState_MaxDistanceCfg        1, 0, 15, 10

/**
 * Signal RadarState_MaxDistanceCfg setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_MaxDistanceCfg or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_MaxDistanceCfg      1, 0, 15, 10, 0

/**
 * Get signal RadarState_MaxDistanceCfg from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_MaxDistanceCfg(buf) (0 \
    | (uword)(+(uword)((buf[1] >> 0) & 0xff) << 2) \
    | (ubyte)(+(ubyte)((buf[2] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RadarState_MaxDistanceCfg in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_MaxDistanceCfg(buf, val) { \
    buf[1] &= ~(0xff << 0); \
    buf[1] |= ((ubyte)((uword)(val) >> 2) & 0xff) << 0; \
    buf[2] &= ~(0x03 << 6); \
    buf[2] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RadarState_MaxDistanceCfg in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_MaxDistanceCfg(buf) \
    SET_RadarState_RadarState_MaxDistanceCfg(buf, 0)

/**
 * Signal RadarState_MaxDistanceCfg value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_MaxDistanceCfg(x, fmt) \
    ((x) * fmt * 2)

/**
 * Signal RadarState_MaxDistanceCfg raw initial value.
 */
#define START_RadarState_RadarState_MaxDistanceCfg      0

/**
 * Signal RadarState_MaxDistanceCfg raw minimum value.
 */
#define MIN_RadarState_RadarState_MaxDistanceCfg        0

/**
 * Signal RadarState_MaxDistanceCfg raw maximum value.
 */
#define MAX_RadarState_RadarState_MaxDistanceCfg        1023

/**
 * Signal RadarState_MaxDistanceCfg raw offset value.
 */
#define OFF_RadarState_RadarState_MaxDistanceCfg        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarState_RadarState_CtrlRelayCfg Signal RadarState_CtrlRelayCfg of Message RadarState (0x201)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarState
 * @{
 */

/**
 * Signal RadarState_CtrlRelayCfg configuration tuple.
 *
 * @deprecated
 *  Use \ref SET_RadarState_RadarState_CtrlRelayCfg and \ref GET_RadarState_RadarState_CtrlRelayCfg instead.
 */
#define SIG_RadarState_RadarState_CtrlRelayCfg        1, 0, 41, 1

/**
 * Signal RadarState_CtrlRelayCfg setup tuple.
 *
 * @deprecated
 *  Use \ref INITSIG_RadarState_RadarState_CtrlRelayCfg or \ref INIT_RadarState instead.
 */
#define SETUP_RadarState_RadarState_CtrlRelayCfg      1, 0, 41, 1, 0

/**
 * Get signal RadarState_CtrlRelayCfg from buffer.
 *
 * @param buf
 *  The can message buffer containing the signal
 * @return
 *  The raw signal
 */
#define GET_RadarState_RadarState_CtrlRelayCfg(buf) (0 \
    | (ubyte)(+(ubyte)((buf[5] >> 1) & 0x01) << 0) \
)

/**
 * Set signal RadarState_CtrlRelayCfg in buffer.
 *
 * @param buf
 *  The can message buffer to add the signal to
 * @param val
 *  The raw value to set the signal to
 */
#define SET_RadarState_RadarState_CtrlRelayCfg(buf, val) { \
    buf[5] &= ~(0x01 << 1); \
    buf[5] |= (((ubyte)(val) >> 0) & 0x01) << 1; \
}

/**
 * Set signal RadarState_CtrlRelayCfg in buffer to its initial value.
 *
 * @param buf
 *  The can message buffer to initialise
 */
#define INITSIG_RadarState_RadarState_CtrlRelayCfg(buf) \
    SET_RadarState_RadarState_CtrlRelayCfg(buf, 0)

/**
 * Signal RadarState_CtrlRelayCfg value conversion with 16 bit factor and offset.
 *
 * @param x
 *  The raw signal value
 * @param fmt
 *  A factor to adjust values, e.g. 10 to get one additional
 *  digit or 1 / 1000 to dispay a fraction
 * @return
 *  The signal value as a human readable number
 */
#define CALC_RadarState_RadarState_CtrlRelayCfg(x, fmt) \
    ((x) * fmt)

/**
 * Signal RadarState_CtrlRelayCfg raw initial value.
 */
#define START_RadarState_RadarState_CtrlRelayCfg      0

/**
 * Signal RadarState_CtrlRelayCfg raw minimum value.
 */
#define MIN_RadarState_RadarState_CtrlRelayCfg        0

/**
 * Signal RadarState_CtrlRelayCfg raw maximum value.
 */
#define MAX_RadarState_RadarState_CtrlRelayCfg        1

/**
 * Signal RadarState_CtrlRelayCfg raw offset value.
 */
#define OFF_RadarState_RadarState_CtrlRelayCfg        0

/**
 * @}
 */

/**
 * @defgroup SIG_Software_versions_Version_PatchLevel Signal Version_PatchLevel of Message Software_versions (0x700)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Software_versions
 * @{
 */

/**
 * Signal Version_PatchLevel configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Software_versions_Version_PatchLevel and \ref GET_Software_versions_Version_PatchLevel instead.
 */
#define SIG_Software_versions_Version_PatchLevel        1, 0, 23, 8

/**
 * Signal Version_PatchLevel setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Software_versions_Version_PatchLevel or \ref INIT_Software_versions instead.
 */
#define SETUP_Software_versions_Version_PatchLevel      1, 0, 23, 8, 0

/**
 * Get signal Version_PatchLevel from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Software_versions_Version_PatchLevel(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Version_PatchLevel in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Software_versions_Version_PatchLevel(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Version_PatchLevel in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Software_versions_Version_PatchLevel(buf) \
	SET_Software_versions_Version_PatchLevel(buf, 0)

/**
 * Signal Version_PatchLevel value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Software_versions_Version_PatchLevel(x, fmt) \
	((x) * fmt)

/**
 * Signal Version_PatchLevel raw initial value.
 */
#define START_Software_versions_Version_PatchLevel      0

/**
 * Signal Version_PatchLevel raw minimum value.
 */
#define MIN_Software_versions_Version_PatchLevel        0

/**
 * Signal Version_PatchLevel raw maximum value.
 */
#define MAX_Software_versions_Version_PatchLevel        256

/**
 * Signal Version_PatchLevel raw offset value.
 */
#define OFF_Software_versions_Version_PatchLevel        0

/**
 * @}
 */

/**
 * @defgroup SIG_Software_versions_Version_MinorRelease Signal Version_MinorRelease of Message Software_versions (0x700)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Software_versions
 * @{
 */

/**
 * Signal Version_MinorRelease configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Software_versions_Version_MinorRelease and \ref GET_Software_versions_Version_MinorRelease instead.
 */
#define SIG_Software_versions_Version_MinorRelease        1, 0, 15, 8

/**
 * Signal Version_MinorRelease setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Software_versions_Version_MinorRelease or \ref INIT_Software_versions instead.
 */
#define SETUP_Software_versions_Version_MinorRelease      1, 0, 15, 8, 0

/**
 * Get signal Version_MinorRelease from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Software_versions_Version_MinorRelease(buf) (0 \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Version_MinorRelease in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Software_versions_Version_MinorRelease(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Version_MinorRelease in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Software_versions_Version_MinorRelease(buf) \
	SET_Software_versions_Version_MinorRelease(buf, 0)

/**
 * Signal Version_MinorRelease value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Software_versions_Version_MinorRelease(x, fmt) \
	((x) * fmt)

/**
 * Signal Version_MinorRelease raw initial value.
 */
#define START_Software_versions_Version_MinorRelease      0

/**
 * Signal Version_MinorRelease raw minimum value.
 */
#define MIN_Software_versions_Version_MinorRelease        0

/**
 * Signal Version_MinorRelease raw maximum value.
 */
#define MAX_Software_versions_Version_MinorRelease        256

/**
 * Signal Version_MinorRelease raw offset value.
 */
#define OFF_Software_versions_Version_MinorRelease        0

/**
 * @}
 */

/**
 * @defgroup SIG_Software_versions_Version_MajorRelease Signal Version_MajorRelease of Message Software_versions (0x700)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Software_versions
 * @{
 */

/**
 * Signal Version_MajorRelease configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Software_versions_Version_MajorRelease and \ref GET_Software_versions_Version_MajorRelease instead.
 */
#define SIG_Software_versions_Version_MajorRelease        1, 0, 7, 8

/**
 * Signal Version_MajorRelease setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Software_versions_Version_MajorRelease or \ref INIT_Software_versions instead.
 */
#define SETUP_Software_versions_Version_MajorRelease      1, 0, 7, 8, 0

/**
 * Get signal Version_MajorRelease from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Software_versions_Version_MajorRelease(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Version_MajorRelease in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Software_versions_Version_MajorRelease(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Version_MajorRelease in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Software_versions_Version_MajorRelease(buf) \
	SET_Software_versions_Version_MajorRelease(buf, 0)

/**
 * Signal Version_MajorRelease value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Software_versions_Version_MajorRelease(x, fmt) \
	((x) * fmt)

/**
 * Signal Version_MajorRelease raw initial value.
 */
#define START_Software_versions_Version_MajorRelease      0

/**
 * Signal Version_MajorRelease raw minimum value.
 */
#define MIN_Software_versions_Version_MajorRelease        0

/**
 * Signal Version_MajorRelease raw maximum value.
 */
#define MAX_Software_versions_Version_MajorRelease        256

/**
 * Signal Version_MajorRelease raw offset value.
 */
#define OFF_Software_versions_Version_MajorRelease        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_RCS_Threshold_valid Signal RadarCfg_RCS_Threshold_valid of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_RCS_Threshold_valid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_RCS_Threshold_valid and \ref GET_RadarCfg_RadarCfg_RCS_Threshold_valid instead.
 */
#define SIG_RadarCfg_RadarCfg_RCS_Threshold_valid        1, 0, 48, 1

/**
 * Signal RadarCfg_RCS_Threshold_valid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_RCS_Threshold_valid or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_RCS_Threshold_valid      1, 0, 48, 1, 0

/**
 * Get signal RadarCfg_RCS_Threshold_valid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_RCS_Threshold_valid(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 0) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_RCS_Threshold_valid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_RCS_Threshold_valid(buf, val) { \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal RadarCfg_RCS_Threshold_valid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_RCS_Threshold_valid(buf) \
	SET_RadarCfg_RadarCfg_RCS_Threshold_valid(buf, 0)

/**
 * Signal RadarCfg_RCS_Threshold_valid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_RCS_Threshold_valid(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_RCS_Threshold_valid raw initial value.
 */
#define START_RadarCfg_RadarCfg_RCS_Threshold_valid      0

/**
 * Signal RadarCfg_RCS_Threshold_valid raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_RCS_Threshold_valid        0

/**
 * Signal RadarCfg_RCS_Threshold_valid raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_RCS_Threshold_valid        1

/**
 * Signal RadarCfg_RCS_Threshold_valid raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_RCS_Threshold_valid        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_RCS_Threshold Signal RadarCfg_RCS_Threshold of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_RCS_Threshold configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_RCS_Threshold and \ref GET_RadarCfg_RadarCfg_RCS_Threshold instead.
 */
#define SIG_RadarCfg_RadarCfg_RCS_Threshold         1, 0, 51, 3

/**
 * Signal RadarCfg_RCS_Threshold setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_RCS_Threshold or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_RCS_Threshold       1, 0, 51, 3, 0

/**
 * Get signal RadarCfg_RCS_Threshold from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_RCS_Threshold(buf) (0 \
	| (ubyte)(+(ubyte)((buf[6] >> 1) & 0x07) << 0) \
)

/**
 * Set signal RadarCfg_RCS_Threshold in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_RCS_Threshold(buf, val) { \
	buf[6] &= ~(0x07 << 1); \
	buf[6] |= (((ubyte)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal RadarCfg_RCS_Threshold in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_RCS_Threshold(buf) \
	SET_RadarCfg_RadarCfg_RCS_Threshold(buf, 0)

/**
 * Signal RadarCfg_RCS_Threshold value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_RCS_Threshold(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_RCS_Threshold raw initial value.
 */
#define START_RadarCfg_RadarCfg_RCS_Threshold       0

/**
 * Signal RadarCfg_RCS_Threshold raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_RCS_Threshold         0

/**
 * Signal RadarCfg_RCS_Threshold raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_RCS_Threshold         7

/**
 * Signal RadarCfg_RCS_Threshold raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_RCS_Threshold         0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_StoreInNVM_valid Signal RadarCfg_StoreInNVM_valid of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_StoreInNVM_valid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_StoreInNVM_valid and \ref GET_RadarCfg_RadarCfg_StoreInNVM_valid instead.
 */
#define SIG_RadarCfg_RadarCfg_StoreInNVM_valid        1, 0, 7, 1

/**
 * Signal RadarCfg_StoreInNVM_valid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_StoreInNVM_valid or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_StoreInNVM_valid      1, 0, 7, 1, 0

/**
 * Get signal RadarCfg_StoreInNVM_valid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_StoreInNVM_valid(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_StoreInNVM_valid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_StoreInNVM_valid(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RadarCfg_StoreInNVM_valid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_StoreInNVM_valid(buf) \
	SET_RadarCfg_RadarCfg_StoreInNVM_valid(buf, 0)

/**
 * Signal RadarCfg_StoreInNVM_valid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_StoreInNVM_valid(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_StoreInNVM_valid raw initial value.
 */
#define START_RadarCfg_RadarCfg_StoreInNVM_valid      0

/**
 * Signal RadarCfg_StoreInNVM_valid raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_StoreInNVM_valid        0

/**
 * Signal RadarCfg_StoreInNVM_valid raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_StoreInNVM_valid        1

/**
 * Signal RadarCfg_StoreInNVM_valid raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_StoreInNVM_valid        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_StoreInNVM Signal RadarCfg_StoreInNVM of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_StoreInNVM configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_StoreInNVM and \ref GET_RadarCfg_RadarCfg_StoreInNVM instead.
 */
#define SIG_RadarCfg_RadarCfg_StoreInNVM            1, 0, 47, 1

/**
 * Signal RadarCfg_StoreInNVM setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_StoreInNVM or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_StoreInNVM          1, 0, 47, 1, 0

/**
 * Get signal RadarCfg_StoreInNVM from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_StoreInNVM(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 7) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_StoreInNVM in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_StoreInNVM(buf, val) { \
	buf[5] &= ~(0x01 << 7); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal RadarCfg_StoreInNVM in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_StoreInNVM(buf) \
	SET_RadarCfg_RadarCfg_StoreInNVM(buf, 0)

/**
 * Signal RadarCfg_StoreInNVM value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_StoreInNVM(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_StoreInNVM raw initial value.
 */
#define START_RadarCfg_RadarCfg_StoreInNVM          0

/**
 * Signal RadarCfg_StoreInNVM raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_StoreInNVM            0

/**
 * Signal RadarCfg_StoreInNVM raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_StoreInNVM            1

/**
 * Signal RadarCfg_StoreInNVM raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_StoreInNVM            0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_SortIndex_valid Signal RadarCfg_SortIndex_valid of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_SortIndex_valid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_SortIndex_valid and \ref GET_RadarCfg_RadarCfg_SortIndex_valid instead.
 */
#define SIG_RadarCfg_RadarCfg_SortIndex_valid        1, 0, 6, 1

/**
 * Signal RadarCfg_SortIndex_valid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_SortIndex_valid or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_SortIndex_valid      1, 0, 6, 1, 0

/**
 * Get signal RadarCfg_SortIndex_valid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_SortIndex_valid(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 6) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_SortIndex_valid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_SortIndex_valid(buf, val) { \
	buf[0] &= ~(0x01 << 6); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal RadarCfg_SortIndex_valid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_SortIndex_valid(buf) \
	SET_RadarCfg_RadarCfg_SortIndex_valid(buf, 0)

/**
 * Signal RadarCfg_SortIndex_valid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_SortIndex_valid(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_SortIndex_valid raw initial value.
 */
#define START_RadarCfg_RadarCfg_SortIndex_valid      0

/**
 * Signal RadarCfg_SortIndex_valid raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_SortIndex_valid        0

/**
 * Signal RadarCfg_SortIndex_valid raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_SortIndex_valid        1

/**
 * Signal RadarCfg_SortIndex_valid raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_SortIndex_valid        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_SortIndex Signal RadarCfg_SortIndex of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_SortIndex configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_SortIndex and \ref GET_RadarCfg_RadarCfg_SortIndex instead.
 */
#define SIG_RadarCfg_RadarCfg_SortIndex             1, 0, 46, 3

/**
 * Signal RadarCfg_SortIndex setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_SortIndex or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_SortIndex           1, 0, 46, 3, 0

/**
 * Get signal RadarCfg_SortIndex from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_SortIndex(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 4) & 0x07) << 0) \
)

/**
 * Set signal RadarCfg_SortIndex in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_SortIndex(buf, val) { \
	buf[5] &= ~(0x07 << 4); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal RadarCfg_SortIndex in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_SortIndex(buf) \
	SET_RadarCfg_RadarCfg_SortIndex(buf, 0)

/**
 * Signal RadarCfg_SortIndex value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_SortIndex(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_SortIndex raw initial value.
 */
#define START_RadarCfg_RadarCfg_SortIndex           0

/**
 * Signal RadarCfg_SortIndex raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_SortIndex             0

/**
 * Signal RadarCfg_SortIndex raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_SortIndex             7

/**
 * Signal RadarCfg_SortIndex raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_SortIndex             0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_SensorID_valid Signal RadarCfg_SensorID_valid of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_SensorID_valid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_SensorID_valid and \ref GET_RadarCfg_RadarCfg_SensorID_valid instead.
 */
#define SIG_RadarCfg_RadarCfg_SensorID_valid        1, 0, 1, 1

/**
 * Signal RadarCfg_SensorID_valid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_SensorID_valid or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_SensorID_valid      1, 0, 1, 1, 0

/**
 * Get signal RadarCfg_SensorID_valid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_SensorID_valid(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 1) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_SensorID_valid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_SensorID_valid(buf, val) { \
	buf[0] &= ~(0x01 << 1); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 1; \
}

/**
 * Set signal RadarCfg_SensorID_valid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_SensorID_valid(buf) \
	SET_RadarCfg_RadarCfg_SensorID_valid(buf, 0)

/**
 * Signal RadarCfg_SensorID_valid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_SensorID_valid(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_SensorID_valid raw initial value.
 */
#define START_RadarCfg_RadarCfg_SensorID_valid      0

/**
 * Signal RadarCfg_SensorID_valid raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_SensorID_valid        0

/**
 * Signal RadarCfg_SensorID_valid raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_SensorID_valid        1

/**
 * Signal RadarCfg_SensorID_valid raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_SensorID_valid        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_SensorID Signal RadarCfg_SensorID of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_SensorID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_SensorID and \ref GET_RadarCfg_RadarCfg_SensorID instead.
 */
#define SIG_RadarCfg_RadarCfg_SensorID              1, 0, 34, 3

/**
 * Signal RadarCfg_SensorID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_SensorID or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_SensorID            1, 0, 34, 3, 0

/**
 * Get signal RadarCfg_SensorID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_SensorID(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 0) & 0x07) << 0) \
)

/**
 * Set signal RadarCfg_SensorID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_SensorID(buf, val) { \
	buf[4] &= ~(0x07 << 0); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal RadarCfg_SensorID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_SensorID(buf) \
	SET_RadarCfg_RadarCfg_SensorID(buf, 0)

/**
 * Signal RadarCfg_SensorID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_SensorID(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_SensorID raw initial value.
 */
#define START_RadarCfg_RadarCfg_SensorID            0

/**
 * Signal RadarCfg_SensorID raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_SensorID              0

/**
 * Signal RadarCfg_SensorID raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_SensorID              7

/**
 * Signal RadarCfg_SensorID raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_SensorID              0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_SendQuality_valid Signal RadarCfg_SendQuality_valid of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_SendQuality_valid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_SendQuality_valid and \ref GET_RadarCfg_RadarCfg_SendQuality_valid instead.
 */
#define SIG_RadarCfg_RadarCfg_SendQuality_valid        1, 0, 4, 1

/**
 * Signal RadarCfg_SendQuality_valid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_SendQuality_valid or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_SendQuality_valid      1, 0, 4, 1, 0

/**
 * Get signal RadarCfg_SendQuality_valid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_SendQuality_valid(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 4) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_SendQuality_valid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_SendQuality_valid(buf, val) { \
	buf[0] &= ~(0x01 << 4); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal RadarCfg_SendQuality_valid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_SendQuality_valid(buf) \
	SET_RadarCfg_RadarCfg_SendQuality_valid(buf, 0)

/**
 * Signal RadarCfg_SendQuality_valid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_SendQuality_valid(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_SendQuality_valid raw initial value.
 */
#define START_RadarCfg_RadarCfg_SendQuality_valid      0

/**
 * Signal RadarCfg_SendQuality_valid raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_SendQuality_valid        0

/**
 * Signal RadarCfg_SendQuality_valid raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_SendQuality_valid        1

/**
 * Signal RadarCfg_SendQuality_valid raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_SendQuality_valid        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_SendQuality Signal RadarCfg_SendQuality of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_SendQuality configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_SendQuality and \ref GET_RadarCfg_RadarCfg_SendQuality instead.
 */
#define SIG_RadarCfg_RadarCfg_SendQuality           1, 0, 42, 1

/**
 * Signal RadarCfg_SendQuality setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_SendQuality or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_SendQuality         1, 0, 42, 1, 0

/**
 * Get signal RadarCfg_SendQuality from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_SendQuality(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 2) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_SendQuality in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_SendQuality(buf, val) { \
	buf[5] &= ~(0x01 << 2); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal RadarCfg_SendQuality in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_SendQuality(buf) \
	SET_RadarCfg_RadarCfg_SendQuality(buf, 0)

/**
 * Signal RadarCfg_SendQuality value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_SendQuality(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_SendQuality raw initial value.
 */
#define START_RadarCfg_RadarCfg_SendQuality         0

/**
 * Signal RadarCfg_SendQuality raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_SendQuality           0

/**
 * Signal RadarCfg_SendQuality raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_SendQuality           1

/**
 * Signal RadarCfg_SendQuality raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_SendQuality           0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_SendExtInfo Signal RadarCfg_SendExtInfo of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_SendExtInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_SendExtInfo and \ref GET_RadarCfg_RadarCfg_SendExtInfo instead.
 */
#define SIG_RadarCfg_RadarCfg_SendExtInfo           1, 0, 43, 1

/**
 * Signal RadarCfg_SendExtInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_SendExtInfo or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_SendExtInfo         1, 0, 43, 1, 0

/**
 * Get signal RadarCfg_SendExtInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_SendExtInfo(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 3) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_SendExtInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_SendExtInfo(buf, val) { \
	buf[5] &= ~(0x01 << 3); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal RadarCfg_SendExtInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_SendExtInfo(buf) \
	SET_RadarCfg_RadarCfg_SendExtInfo(buf, 0)

/**
 * Signal RadarCfg_SendExtInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_SendExtInfo(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_SendExtInfo raw initial value.
 */
#define START_RadarCfg_RadarCfg_SendExtInfo         0

/**
 * Signal RadarCfg_SendExtInfo raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_SendExtInfo           0

/**
 * Signal RadarCfg_SendExtInfo raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_SendExtInfo           1

/**
 * Signal RadarCfg_SendExtInfo raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_SendExtInfo           0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_SendExtInfo_valid Signal RadarCfg_SendExtInfo_valid of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_SendExtInfo_valid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_SendExtInfo_valid and \ref GET_RadarCfg_RadarCfg_SendExtInfo_valid instead.
 */
#define SIG_RadarCfg_RadarCfg_SendExtInfo_valid        1, 0, 5, 1

/**
 * Signal RadarCfg_SendExtInfo_valid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_SendExtInfo_valid or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_SendExtInfo_valid      1, 0, 5, 1, 0

/**
 * Get signal RadarCfg_SendExtInfo_valid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_SendExtInfo_valid(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 5) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_SendExtInfo_valid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_SendExtInfo_valid(buf, val) { \
	buf[0] &= ~(0x01 << 5); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal RadarCfg_SendExtInfo_valid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_SendExtInfo_valid(buf) \
	SET_RadarCfg_RadarCfg_SendExtInfo_valid(buf, 0)

/**
 * Signal RadarCfg_SendExtInfo_valid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_SendExtInfo_valid(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_SendExtInfo_valid raw initial value.
 */
#define START_RadarCfg_RadarCfg_SendExtInfo_valid      0

/**
 * Signal RadarCfg_SendExtInfo_valid raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_SendExtInfo_valid        0

/**
 * Signal RadarCfg_SendExtInfo_valid raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_SendExtInfo_valid        1

/**
 * Signal RadarCfg_SendExtInfo_valid raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_SendExtInfo_valid        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_RadarPower_valid Signal RadarCfg_RadarPower_valid of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_RadarPower_valid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_RadarPower_valid and \ref GET_RadarCfg_RadarCfg_RadarPower_valid instead.
 */
#define SIG_RadarCfg_RadarCfg_RadarPower_valid        1, 0, 2, 1

/**
 * Signal RadarCfg_RadarPower_valid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_RadarPower_valid or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_RadarPower_valid      1, 0, 2, 1, 0

/**
 * Get signal RadarCfg_RadarPower_valid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_RadarPower_valid(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 2) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_RadarPower_valid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_RadarPower_valid(buf, val) { \
	buf[0] &= ~(0x01 << 2); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal RadarCfg_RadarPower_valid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_RadarPower_valid(buf) \
	SET_RadarCfg_RadarCfg_RadarPower_valid(buf, 0)

/**
 * Signal RadarCfg_RadarPower_valid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_RadarPower_valid(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_RadarPower_valid raw initial value.
 */
#define START_RadarCfg_RadarCfg_RadarPower_valid      0

/**
 * Signal RadarCfg_RadarPower_valid raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_RadarPower_valid        0

/**
 * Signal RadarCfg_RadarPower_valid raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_RadarPower_valid        1

/**
 * Signal RadarCfg_RadarPower_valid raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_RadarPower_valid        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_RadarPower Signal RadarCfg_RadarPower of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_RadarPower configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_RadarPower and \ref GET_RadarCfg_RadarCfg_RadarPower instead.
 */
#define SIG_RadarCfg_RadarCfg_RadarPower            1, 0, 39, 3

/**
 * Signal RadarCfg_RadarPower setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_RadarPower or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_RadarPower          1, 0, 39, 3, 0

/**
 * Get signal RadarCfg_RadarPower from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_RadarPower(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 5) & 0x07) << 0) \
)

/**
 * Set signal RadarCfg_RadarPower in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_RadarPower(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal RadarCfg_RadarPower in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_RadarPower(buf) \
	SET_RadarCfg_RadarCfg_RadarPower(buf, 0)

/**
 * Signal RadarCfg_RadarPower value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_RadarPower(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_RadarPower raw initial value.
 */
#define START_RadarCfg_RadarCfg_RadarPower          0

/**
 * Signal RadarCfg_RadarPower raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_RadarPower            0

/**
 * Signal RadarCfg_RadarPower raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_RadarPower            7

/**
 * Signal RadarCfg_RadarPower raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_RadarPower            0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_OutputType Signal RadarCfg_OutputType of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_OutputType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_OutputType and \ref GET_RadarCfg_RadarCfg_OutputType instead.
 */
#define SIG_RadarCfg_RadarCfg_OutputType            1, 0, 36, 2

/**
 * Signal RadarCfg_OutputType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_OutputType or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_OutputType          1, 0, 36, 2, 0

/**
 * Get signal RadarCfg_OutputType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_OutputType(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 3) & 0x03) << 0) \
)

/**
 * Set signal RadarCfg_OutputType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_OutputType(buf, val) { \
	buf[4] &= ~(0x03 << 3); \
	buf[4] |= (((ubyte)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal RadarCfg_OutputType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_OutputType(buf) \
	SET_RadarCfg_RadarCfg_OutputType(buf, 0)

/**
 * Signal RadarCfg_OutputType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_OutputType(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_OutputType raw initial value.
 */
#define START_RadarCfg_RadarCfg_OutputType          0

/**
 * Signal RadarCfg_OutputType raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_OutputType            0

/**
 * Signal RadarCfg_OutputType raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_OutputType            2

/**
 * Signal RadarCfg_OutputType raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_OutputType            0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_OutputType_valid Signal RadarCfg_OutputType_valid of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_OutputType_valid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_OutputType_valid and \ref GET_RadarCfg_RadarCfg_OutputType_valid instead.
 */
#define SIG_RadarCfg_RadarCfg_OutputType_valid        1, 0, 3, 1

/**
 * Signal RadarCfg_OutputType_valid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_OutputType_valid or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_OutputType_valid      1, 0, 3, 1, 0

/**
 * Get signal RadarCfg_OutputType_valid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_OutputType_valid(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 3) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_OutputType_valid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_OutputType_valid(buf, val) { \
	buf[0] &= ~(0x01 << 3); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal RadarCfg_OutputType_valid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_OutputType_valid(buf) \
	SET_RadarCfg_RadarCfg_OutputType_valid(buf, 0)

/**
 * Signal RadarCfg_OutputType_valid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_OutputType_valid(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_OutputType_valid raw initial value.
 */
#define START_RadarCfg_RadarCfg_OutputType_valid      0

/**
 * Signal RadarCfg_OutputType_valid raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_OutputType_valid        0

/**
 * Signal RadarCfg_OutputType_valid raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_OutputType_valid        1

/**
 * Signal RadarCfg_OutputType_valid raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_OutputType_valid        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_MaxDistance_valid Signal RadarCfg_MaxDistance_valid of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_MaxDistance_valid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_MaxDistance_valid and \ref GET_RadarCfg_RadarCfg_MaxDistance_valid instead.
 */
#define SIG_RadarCfg_RadarCfg_MaxDistance_valid        1, 0, 0, 1

/**
 * Signal RadarCfg_MaxDistance_valid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_MaxDistance_valid or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_MaxDistance_valid      1, 0, 0, 1, 0

/**
 * Get signal RadarCfg_MaxDistance_valid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_MaxDistance_valid(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_MaxDistance_valid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_MaxDistance_valid(buf, val) { \
	buf[0] &= ~(0x01 << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal RadarCfg_MaxDistance_valid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_MaxDistance_valid(buf) \
	SET_RadarCfg_RadarCfg_MaxDistance_valid(buf, 0)

/**
 * Signal RadarCfg_MaxDistance_valid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_MaxDistance_valid(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_MaxDistance_valid raw initial value.
 */
#define START_RadarCfg_RadarCfg_MaxDistance_valid      0

/**
 * Signal RadarCfg_MaxDistance_valid raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_MaxDistance_valid        0

/**
 * Signal RadarCfg_MaxDistance_valid raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_MaxDistance_valid        1

/**
 * Signal RadarCfg_MaxDistance_valid raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_MaxDistance_valid        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_MaxDistance Signal RadarCfg_MaxDistance of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_MaxDistance configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_MaxDistance and \ref GET_RadarCfg_RadarCfg_MaxDistance instead.
 */
#define SIG_RadarCfg_RadarCfg_MaxDistance           1, 0, 15, 10

/**
 * Signal RadarCfg_MaxDistance setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_MaxDistance or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_MaxDistance         1, 0, 15, 10, 0

/**
 * Get signal RadarCfg_MaxDistance from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_MaxDistance(buf) (0 \
	| (uword)(+(uword)((buf[1] >> 0) & 0xff) << 2) \
	| (ubyte)(+(ubyte)((buf[2] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RadarCfg_MaxDistance in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_MaxDistance(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 2) & 0xff) << 0; \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RadarCfg_MaxDistance in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_MaxDistance(buf) \
	SET_RadarCfg_RadarCfg_MaxDistance(buf, 0)

/**
 * Signal RadarCfg_MaxDistance value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_MaxDistance(x, fmt) \
	((x) * fmt * 2)

/**
 * Signal RadarCfg_MaxDistance raw initial value.
 */
#define START_RadarCfg_RadarCfg_MaxDistance         0

/**
 * Signal RadarCfg_MaxDistance raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_MaxDistance           0

/**
 * Signal RadarCfg_MaxDistance raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_MaxDistance           1023

/**
 * Signal RadarCfg_MaxDistance raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_MaxDistance           0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_CtrlRelay_valid Signal RadarCfg_CtrlRelay_valid of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_CtrlRelay_valid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_CtrlRelay_valid and \ref GET_RadarCfg_RadarCfg_CtrlRelay_valid instead.
 */
#define SIG_RadarCfg_RadarCfg_CtrlRelay_valid        1, 0, 40, 1

/**
 * Signal RadarCfg_CtrlRelay_valid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_CtrlRelay_valid or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_CtrlRelay_valid      1, 0, 40, 1, 0

/**
 * Get signal RadarCfg_CtrlRelay_valid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_CtrlRelay_valid(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 0) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_CtrlRelay_valid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_CtrlRelay_valid(buf, val) { \
	buf[5] &= ~(0x01 << 0); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal RadarCfg_CtrlRelay_valid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_CtrlRelay_valid(buf) \
	SET_RadarCfg_RadarCfg_CtrlRelay_valid(buf, 0)

/**
 * Signal RadarCfg_CtrlRelay_valid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_CtrlRelay_valid(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_CtrlRelay_valid raw initial value.
 */
#define START_RadarCfg_RadarCfg_CtrlRelay_valid      0

/**
 * Signal RadarCfg_CtrlRelay_valid raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_CtrlRelay_valid        0

/**
 * Signal RadarCfg_CtrlRelay_valid raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_CtrlRelay_valid        1

/**
 * Signal RadarCfg_CtrlRelay_valid raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_CtrlRelay_valid        0

/**
 * @}
 */

/**
 * @defgroup SIG_RadarCfg_RadarCfg_CtrlRelay Signal RadarCfg_CtrlRelay of Message RadarCfg (0x200)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_RadarCfg
 * @{
 */

/**
 * Signal RadarCfg_CtrlRelay configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_RadarCfg_RadarCfg_CtrlRelay and \ref GET_RadarCfg_RadarCfg_CtrlRelay instead.
 */
#define SIG_RadarCfg_RadarCfg_CtrlRelay             1, 0, 41, 1

/**
 * Signal RadarCfg_CtrlRelay setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_RadarCfg_RadarCfg_CtrlRelay or \ref INIT_RadarCfg instead.
 */
#define SETUP_RadarCfg_RadarCfg_CtrlRelay           1, 0, 41, 1, 0

/**
 * Get signal RadarCfg_CtrlRelay from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_RadarCfg_RadarCfg_CtrlRelay(buf) (0 \
	| (ubyte)(+(ubyte)((buf[5] >> 1) & 0x01) << 0) \
)

/**
 * Set signal RadarCfg_CtrlRelay in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_RadarCfg_RadarCfg_CtrlRelay(buf, val) { \
	buf[5] &= ~(0x01 << 1); \
	buf[5] |= (((ubyte)(val) >> 0) & 0x01) << 1; \
}

/**
 * Set signal RadarCfg_CtrlRelay in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_RadarCfg_RadarCfg_CtrlRelay(buf) \
	SET_RadarCfg_RadarCfg_CtrlRelay(buf, 0)

/**
 * Signal RadarCfg_CtrlRelay value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_RadarCfg_RadarCfg_CtrlRelay(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarCfg_CtrlRelay raw initial value.
 */
#define START_RadarCfg_RadarCfg_CtrlRelay           0

/**
 * Signal RadarCfg_CtrlRelay raw minimum value.
 */
#define MIN_RadarCfg_RadarCfg_CtrlRelay             0

/**
 * Signal RadarCfg_CtrlRelay raw maximum value.
 */
#define MAX_RadarCfg_RadarCfg_CtrlRelay             1

/**
 * Signal RadarCfg_CtrlRelay raw offset value.
 */
#define OFF_RadarCfg_RadarCfg_CtrlRelay             0

/**
 * @}
 */

/**
 * @defgroup SIG_YawrateInformation_RadarDevice_YawRate Signal RadarDevice_YawRate of Message YawrateInformation (0x301)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_YawrateInformation
 * @{
 */

/**
 * Signal RadarDevice_YawRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_YawrateInformation_RadarDevice_YawRate and \ref GET_YawrateInformation_RadarDevice_YawRate instead.
 */
#define SIG_YawrateInformation_RadarDevice_YawRate        1, 0, 7, 16

/**
 * Signal RadarDevice_YawRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_YawrateInformation_RadarDevice_YawRate or \ref INIT_YawrateInformation instead.
 */
#define SETUP_YawrateInformation_RadarDevice_YawRate      1, 0, 7, 16, 0

/**
 * Get signal RadarDevice_YawRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_YawrateInformation_RadarDevice_YawRate(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0xff) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RadarDevice_YawRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_YawrateInformation_RadarDevice_YawRate(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RadarDevice_YawRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_YawrateInformation_RadarDevice_YawRate(buf) \
	SET_YawrateInformation_RadarDevice_YawRate(buf, 0)

/**
 * Signal RadarDevice_YawRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define RAW_PHYS_YawrateInformation_RadarDevice_YawRate(x, fmt) \
	((x) * fmt / 100 + fmt * 8192 / (-25))

/**
 * Signal RadarDevice_YawRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The physical signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define PHYS_RAW_YawrateInformation_RadarDevice_YawRate(x, fmt) \
	(((x) - fmt * 8192 / (-25)) / (fmt / 100))

/**
 * Signal RadarDevice_YawRate raw initial value.
 */
#define START_YawrateInformation_RadarDevice_YawRate      0

/**
 * Signal RadarDevice_YawRate raw minimum value.
 */
#define MIN_YawrateInformation_RadarDevice_YawRate        0

/**
 * Signal RadarDevice_YawRate raw maximum value.
 */
#define MAX_YawrateInformation_RadarDevice_YawRate        65536

/**
 * Signal RadarDevice_YawRate raw offset value.
 */
#define OFF_YawrateInformation_RadarDevice_YawRate        -32768

/**
 * @}
 */

/**
 * @defgroup SIG_SpeedInformation_RadarDevice_Speed Signal RadarDevice_Speed of Message SpeedInformation (0x300)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SpeedInformation
 * @{
 */

/**
 * Signal RadarDevice_Speed configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SpeedInformation_RadarDevice_Speed and \ref GET_SpeedInformation_RadarDevice_Speed instead.
 */
#define SIG_SpeedInformation_RadarDevice_Speed        1, 0, 4, 13

/**
 * Signal RadarDevice_Speed setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SpeedInformation_RadarDevice_Speed or \ref INIT_SpeedInformation instead.
 */
#define SETUP_SpeedInformation_RadarDevice_Speed      1, 0, 4, 13, 0

/**
 * Get signal RadarDevice_Speed from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SpeedInformation_RadarDevice_Speed(buf) (0 \
	| (uword)(+(uword)((buf[0] >> 0) & 0x1f) << 8) \
	| (ubyte)(+(ubyte)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal RadarDevice_Speed in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SpeedInformation_RadarDevice_Speed(buf, val) { \
	buf[0] &= ~(0x1f << 0); \
	buf[0] |= ((ubyte)((uword)(val) >> 8) & 0x1f) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal RadarDevice_Speed in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SpeedInformation_RadarDevice_Speed(buf) \
	SET_SpeedInformation_RadarDevice_Speed(buf, 0)

/**
 * Signal RadarDevice_Speed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define RAW_PHYS_SpeedInformation_RadarDevice_Speed(x, fmt) \
	((x) * fmt / 50)

/**
 * Signal RadarDevice_Speed value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The physical signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define PHYS_RAW_SpeedInformation_RadarDevice_Speed(x, fmt) \
	((x) / (fmt / 50))


/**
 * Signal RadarDevice_Speed raw initial value.
 */
#define START_SpeedInformation_RadarDevice_Speed      0

/**
 * Signal RadarDevice_Speed raw minimum value.
 */
#define MIN_SpeedInformation_RadarDevice_Speed        0

/**
 * Signal RadarDevice_Speed raw maximum value.
 */
#define MAX_SpeedInformation_RadarDevice_Speed        8190

/**
 * Signal RadarDevice_Speed raw offset value.
 */
#define OFF_SpeedInformation_RadarDevice_Speed        0

/**
 * @}
 */

/**
 * @defgroup SIG_SpeedInformation_RadarDevice_SpeedDirection Signal RadarDevice_SpeedDirection of Message SpeedInformation (0x300)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_SpeedInformation
 * @{
 */

/**
 * Signal RadarDevice_SpeedDirection configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_SpeedInformation_RadarDevice_SpeedDirection and \ref GET_SpeedInformation_RadarDevice_SpeedDirection instead.
 */
#define SIG_SpeedInformation_RadarDevice_SpeedDirection        1, 0, 7, 2

/**
 * Signal RadarDevice_SpeedDirection setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_SpeedInformation_RadarDevice_SpeedDirection or \ref INIT_SpeedInformation instead.
 */
#define SETUP_SpeedInformation_RadarDevice_SpeedDirection      1, 0, 7, 2, 0

/**
 * Get signal RadarDevice_SpeedDirection from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_SpeedInformation_RadarDevice_SpeedDirection(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 6) & 0x03) << 0) \
)

/**
 * Set signal RadarDevice_SpeedDirection in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_SpeedInformation_RadarDevice_SpeedDirection(buf, val) { \
	buf[0] &= ~(0x03 << 6); \
	buf[0] |= (((ubyte)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal RadarDevice_SpeedDirection in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_SpeedInformation_RadarDevice_SpeedDirection(buf) \
	SET_SpeedInformation_RadarDevice_SpeedDirection(buf, 0)

/**
 * Signal RadarDevice_SpeedDirection value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define RAW_PHYS_SpeedInformation_RadarDevice_SpeedDirection(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarDevice_SpeedDirection value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The physical signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define PHYS_RAW_SpeedInformation_RadarDevice_SpeedDirection(x, fmt) \
	((x) * fmt)

/**
 * Signal RadarDevice_SpeedDirection raw initial value.
 */
#define START_SpeedInformation_RadarDevice_SpeedDirection      0

/**
 * Signal RadarDevice_SpeedDirection raw minimum value.
 */
#define MIN_SpeedInformation_RadarDevice_SpeedDirection        0

/**
 * Signal RadarDevice_SpeedDirection raw maximum value.
 */
#define MAX_SpeedInformation_RadarDevice_SpeedDirection        2

/**
 * Signal RadarDevice_SpeedDirection raw offset value.
 */
#define OFF_SpeedInformation_RadarDevice_SpeedDirection        0

/**
 * @}
 */

#endif
