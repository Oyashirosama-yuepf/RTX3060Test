#ifndef HOLO_SENSORS_ME8_ME8_OPLANESADJACENT_H_
#define HOLO_SENSORS_ME8_ME8_OPLANESADJACENT_H_
/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2021年 12月 06日 星期一 13:13:09 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_opLanesAdjacent
 */

/**
 * @defgroup DB_opLanesAdjacent CAN Database opLanesAdjacent
 *
 * Path to file: output/opLanesAdjacent.dbc
 *
 * Provides the following ECUs:
 */

/**
 * @defgroup MSG_Lanes_Adjacent_Header Message Lanes_Adjacent_Header (0x782)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Adjacent_Header_Reserved
 * - \ref SIG_Lanes_Adjacent_Header_Lanes_Adjacent_Count
 *
 * @{
 */

/**
 * Message Lanes_Adjacent_Header configuration tuple.
 */
#define MSG_Lanes_Adjacent_Header                   0x782, 0, 1

/**
 * Message Lanes_Adjacent_Header id.
 */
#define ID_Lanes_Adjacent_Header                    0x782

/**
 * Message Lanes_Adjacent_Header extended id bit.
 */
#define EXT_Lanes_Adjacent_Header                   0

/**
 * Message Lanes_Adjacent_Header Data Length Count.
 */
#define DLC_Lanes_Adjacent_Header                   1

/**
 * Message Lanes_Adjacent_Header cycle time.
 */
#define CYCLE_Lanes_Adjacent_Header                 0

/**
 * Message Lanes_Adjacent_Header fast cycle time.
 */
#define FAST_Lanes_Adjacent_Header                  0

/**
 * Initialise message Lanes_Adjacent_Header buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Adjacent_Header(buf) { \
	INITSIG_Lanes_Adjacent_Header_Reserved(buf); \
	INITSIG_Lanes_Adjacent_Header_Lanes_Adjacent_Count(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Adjacent_1A Message Lanes_Adjacent_1A (0x784)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Adjacent_1A_Adjacent_Type_1
 * - \ref SIG_Lanes_Adjacent_1A_Adjacent_Confidence_1
 * - \ref SIG_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1
 * - \ref SIG_Lanes_Adjacent_1A_Adjacent_View_Range_End_1
 * - \ref SIG_Lanes_Adjacent_1A_Adjacent_Line_Role_1
 * - \ref SIG_Lanes_Adjacent_1A_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Adjacent_1A configuration tuple.
 */
#define MSG_Lanes_Adjacent_1A                       0x784, 0, 6

/**
 * Message Lanes_Adjacent_1A id.
 */
#define ID_Lanes_Adjacent_1A                        0x784

/**
 * Message Lanes_Adjacent_1A extended id bit.
 */
#define EXT_Lanes_Adjacent_1A                       0

/**
 * Message Lanes_Adjacent_1A Data Length Count.
 */
#define DLC_Lanes_Adjacent_1A                       6

/**
 * Message Lanes_Adjacent_1A cycle time.
 */
#define CYCLE_Lanes_Adjacent_1A                     0

/**
 * Message Lanes_Adjacent_1A fast cycle time.
 */
#define FAST_Lanes_Adjacent_1A                      0

/**
 * Initialise message Lanes_Adjacent_1A buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Adjacent_1A(buf) { \
	INITSIG_Lanes_Adjacent_1A_Adjacent_Type_1(buf); \
	INITSIG_Lanes_Adjacent_1A_Adjacent_Confidence_1(buf); \
	INITSIG_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1(buf); \
	INITSIG_Lanes_Adjacent_1A_Adjacent_View_Range_End_1(buf); \
	INITSIG_Lanes_Adjacent_1A_Adjacent_Line_Role_1(buf); \
	INITSIG_Lanes_Adjacent_1A_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Adjacent_1B Message Lanes_Adjacent_1B (0x785)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Adjacent_1B_Adjacent_Line_C0_1
 * - \ref SIG_Lanes_Adjacent_1B_Adjacent_Line_C1_1
 * - \ref SIG_Lanes_Adjacent_1B_Adjacent_Line_C2_1
 * - \ref SIG_Lanes_Adjacent_1B_Adjacent_Line_C3_1
 * - \ref SIG_Lanes_Adjacent_1B_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Adjacent_1B configuration tuple.
 */
#define MSG_Lanes_Adjacent_1B                       0x785, 0, 7

/**
 * Message Lanes_Adjacent_1B id.
 */
#define ID_Lanes_Adjacent_1B                        0x785

/**
 * Message Lanes_Adjacent_1B extended id bit.
 */
#define EXT_Lanes_Adjacent_1B                       0

/**
 * Message Lanes_Adjacent_1B Data Length Count.
 */
#define DLC_Lanes_Adjacent_1B                       7

/**
 * Message Lanes_Adjacent_1B cycle time.
 */
#define CYCLE_Lanes_Adjacent_1B                     0

/**
 * Message Lanes_Adjacent_1B fast cycle time.
 */
#define FAST_Lanes_Adjacent_1B                      0

/**
 * Initialise message Lanes_Adjacent_1B buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Adjacent_1B(buf) { \
	INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C0_1(buf); \
	INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C1_1(buf); \
	INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C2_1(buf); \
	INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C3_1(buf); \
	INITSIG_Lanes_Adjacent_1B_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Adjacent_2A Message Lanes_Adjacent_2A (0x786)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Adjacent_2A_Adjacent_Type_2
 * - \ref SIG_Lanes_Adjacent_2A_Adjacent_Confidence_2
 * - \ref SIG_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2
 * - \ref SIG_Lanes_Adjacent_2A_Adjacent_View_Range_End_2
 * - \ref SIG_Lanes_Adjacent_2A_Adjacent_Line_Role_2
 * - \ref SIG_Lanes_Adjacent_2A_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Adjacent_2A configuration tuple.
 */
#define MSG_Lanes_Adjacent_2A                       0x786, 0, 6

/**
 * Message Lanes_Adjacent_2A id.
 */
#define ID_Lanes_Adjacent_2A                        0x786

/**
 * Message Lanes_Adjacent_2A extended id bit.
 */
#define EXT_Lanes_Adjacent_2A                       0

/**
 * Message Lanes_Adjacent_2A Data Length Count.
 */
#define DLC_Lanes_Adjacent_2A                       6

/**
 * Message Lanes_Adjacent_2A cycle time.
 */
#define CYCLE_Lanes_Adjacent_2A                     0

/**
 * Message Lanes_Adjacent_2A fast cycle time.
 */
#define FAST_Lanes_Adjacent_2A                      0

/**
 * Initialise message Lanes_Adjacent_2A buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Adjacent_2A(buf) { \
	INITSIG_Lanes_Adjacent_2A_Adjacent_Type_2(buf); \
	INITSIG_Lanes_Adjacent_2A_Adjacent_Confidence_2(buf); \
	INITSIG_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2(buf); \
	INITSIG_Lanes_Adjacent_2A_Adjacent_View_Range_End_2(buf); \
	INITSIG_Lanes_Adjacent_2A_Adjacent_Line_Role_2(buf); \
	INITSIG_Lanes_Adjacent_2A_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Adjacent_2B Message Lanes_Adjacent_2B (0x787)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Adjacent_2B_Adjacent_Line_C0_2
 * - \ref SIG_Lanes_Adjacent_2B_Adjacent_Line_C1_2
 * - \ref SIG_Lanes_Adjacent_2B_Adjacent_Line_C2_2
 * - \ref SIG_Lanes_Adjacent_2B_Adjacent_Line_C3_2
 * - \ref SIG_Lanes_Adjacent_2B_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Adjacent_2B configuration tuple.
 */
#define MSG_Lanes_Adjacent_2B                       0x787, 0, 7

/**
 * Message Lanes_Adjacent_2B id.
 */
#define ID_Lanes_Adjacent_2B                        0x787

/**
 * Message Lanes_Adjacent_2B extended id bit.
 */
#define EXT_Lanes_Adjacent_2B                       0

/**
 * Message Lanes_Adjacent_2B Data Length Count.
 */
#define DLC_Lanes_Adjacent_2B                       7

/**
 * Message Lanes_Adjacent_2B cycle time.
 */
#define CYCLE_Lanes_Adjacent_2B                     0

/**
 * Message Lanes_Adjacent_2B fast cycle time.
 */
#define FAST_Lanes_Adjacent_2B                      0

/**
 * Initialise message Lanes_Adjacent_2B buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Adjacent_2B(buf) { \
	INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C0_2(buf); \
	INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C1_2(buf); \
	INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C2_2(buf); \
	INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C3_2(buf); \
	INITSIG_Lanes_Adjacent_2B_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Adjacent_3A Message Lanes_Adjacent_3A (0x788)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Adjacent_3A_Adjacent_Type_3
 * - \ref SIG_Lanes_Adjacent_3A_Adjacent_Confidence_3
 * - \ref SIG_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3
 * - \ref SIG_Lanes_Adjacent_3A_Adjacent_View_Range_End_3
 * - \ref SIG_Lanes_Adjacent_3A_Adjacent_Line_Role_3
 * - \ref SIG_Lanes_Adjacent_3A_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Adjacent_3A configuration tuple.
 */
#define MSG_Lanes_Adjacent_3A                       0x788, 0, 6

/**
 * Message Lanes_Adjacent_3A id.
 */
#define ID_Lanes_Adjacent_3A                        0x788

/**
 * Message Lanes_Adjacent_3A extended id bit.
 */
#define EXT_Lanes_Adjacent_3A                       0

/**
 * Message Lanes_Adjacent_3A Data Length Count.
 */
#define DLC_Lanes_Adjacent_3A                       6

/**
 * Message Lanes_Adjacent_3A cycle time.
 */
#define CYCLE_Lanes_Adjacent_3A                     0

/**
 * Message Lanes_Adjacent_3A fast cycle time.
 */
#define FAST_Lanes_Adjacent_3A                      0

/**
 * Initialise message Lanes_Adjacent_3A buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Adjacent_3A(buf) { \
	INITSIG_Lanes_Adjacent_3A_Adjacent_Type_3(buf); \
	INITSIG_Lanes_Adjacent_3A_Adjacent_Confidence_3(buf); \
	INITSIG_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3(buf); \
	INITSIG_Lanes_Adjacent_3A_Adjacent_View_Range_End_3(buf); \
	INITSIG_Lanes_Adjacent_3A_Adjacent_Line_Role_3(buf); \
	INITSIG_Lanes_Adjacent_3A_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Adjacent_3B Message Lanes_Adjacent_3B (0x789)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Adjacent_3B_Adjacent_Line_C0_3
 * - \ref SIG_Lanes_Adjacent_3B_Adjacent_Line_C1_3
 * - \ref SIG_Lanes_Adjacent_3B_Adjacent_Line_C2_3
 * - \ref SIG_Lanes_Adjacent_3B_Adjacent_Line_C3_3
 * - \ref SIG_Lanes_Adjacent_3B_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Adjacent_3B configuration tuple.
 */
#define MSG_Lanes_Adjacent_3B                       0x789, 0, 7

/**
 * Message Lanes_Adjacent_3B id.
 */
#define ID_Lanes_Adjacent_3B                        0x789

/**
 * Message Lanes_Adjacent_3B extended id bit.
 */
#define EXT_Lanes_Adjacent_3B                       0

/**
 * Message Lanes_Adjacent_3B Data Length Count.
 */
#define DLC_Lanes_Adjacent_3B                       7

/**
 * Message Lanes_Adjacent_3B cycle time.
 */
#define CYCLE_Lanes_Adjacent_3B                     0

/**
 * Message Lanes_Adjacent_3B fast cycle time.
 */
#define FAST_Lanes_Adjacent_3B                      0

/**
 * Initialise message Lanes_Adjacent_3B buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Adjacent_3B(buf) { \
	INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C0_3(buf); \
	INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C1_3(buf); \
	INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C2_3(buf); \
	INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C3_3(buf); \
	INITSIG_Lanes_Adjacent_3B_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Adjacent_4A Message Lanes_Adjacent_4A (0x78a)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Adjacent_4A_Adjacent_Type_4
 * - \ref SIG_Lanes_Adjacent_4A_Adjacent_Confidence_4
 * - \ref SIG_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4
 * - \ref SIG_Lanes_Adjacent_4A_Adjacent_View_Range_End_4
 * - \ref SIG_Lanes_Adjacent_4A_Adjacent_Line_Role_4
 * - \ref SIG_Lanes_Adjacent_4A_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Adjacent_4A configuration tuple.
 */
#define MSG_Lanes_Adjacent_4A                       0x78a, 0, 6

/**
 * Message Lanes_Adjacent_4A id.
 */
#define ID_Lanes_Adjacent_4A                        0x78a

/**
 * Message Lanes_Adjacent_4A extended id bit.
 */
#define EXT_Lanes_Adjacent_4A                       0

/**
 * Message Lanes_Adjacent_4A Data Length Count.
 */
#define DLC_Lanes_Adjacent_4A                       6

/**
 * Message Lanes_Adjacent_4A cycle time.
 */
#define CYCLE_Lanes_Adjacent_4A                     0

/**
 * Message Lanes_Adjacent_4A fast cycle time.
 */
#define FAST_Lanes_Adjacent_4A                      0

/**
 * Initialise message Lanes_Adjacent_4A buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Adjacent_4A(buf) { \
	INITSIG_Lanes_Adjacent_4A_Adjacent_Type_4(buf); \
	INITSIG_Lanes_Adjacent_4A_Adjacent_Confidence_4(buf); \
	INITSIG_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4(buf); \
	INITSIG_Lanes_Adjacent_4A_Adjacent_View_Range_End_4(buf); \
	INITSIG_Lanes_Adjacent_4A_Adjacent_Line_Role_4(buf); \
	INITSIG_Lanes_Adjacent_4A_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Adjacent_4B Message Lanes_Adjacent_4B (0x78b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Adjacent_4B_Adjacent_Line_C0_4
 * - \ref SIG_Lanes_Adjacent_4B_Adjacent_Line_C1_4
 * - \ref SIG_Lanes_Adjacent_4B_Adjacent_Line_C2_4
 * - \ref SIG_Lanes_Adjacent_4B_Adjacent_Line_C3_4
 * - \ref SIG_Lanes_Adjacent_4B_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Adjacent_4B configuration tuple.
 */
#define MSG_Lanes_Adjacent_4B                       0x78b, 0, 7

/**
 * Message Lanes_Adjacent_4B id.
 */
#define ID_Lanes_Adjacent_4B                        0x78b

/**
 * Message Lanes_Adjacent_4B extended id bit.
 */
#define EXT_Lanes_Adjacent_4B                       0

/**
 * Message Lanes_Adjacent_4B Data Length Count.
 */
#define DLC_Lanes_Adjacent_4B                       7

/**
 * Message Lanes_Adjacent_4B cycle time.
 */
#define CYCLE_Lanes_Adjacent_4B                     0

/**
 * Message Lanes_Adjacent_4B fast cycle time.
 */
#define FAST_Lanes_Adjacent_4B                      0

/**
 * Initialise message Lanes_Adjacent_4B buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Adjacent_4B(buf) { \
	INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C0_4(buf); \
	INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C1_4(buf); \
	INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C2_4(buf); \
	INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C3_4(buf); \
	INITSIG_Lanes_Adjacent_4B_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_Header_Reserved Signal Reserved of Message Lanes_Adjacent_Header (0x782)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_Header
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_Header_Reserved and \ref GET_Lanes_Adjacent_Header_Reserved instead.
 */
#define SIG_Lanes_Adjacent_Header_Reserved          0, 0, 0, 4

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_Header_Reserved or \ref INIT_Lanes_Adjacent_Header instead.
 */
#define SETUP_Lanes_Adjacent_Header_Reserved        0, 0, 0, 4, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_Header_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_Header_Reserved(buf, val) { \
	buf[0] &= ~(0x0f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_Header_Reserved(buf) \
	SET_Lanes_Adjacent_Header_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_Header_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Adjacent_Header_Reserved        0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Adjacent_Header_Reserved          0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Adjacent_Header_Reserved          0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Adjacent_Header_Reserved          0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_Header_Lanes_Adjacent_Count Signal Lanes_Adjacent_Count of Message Lanes_Adjacent_Header (0x782)
 *
 * number of lines supported by this protocol
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_Header
 * @{
 */

/**
 * Signal Lanes_Adjacent_Count configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_Header_Lanes_Adjacent_Count and \ref GET_Lanes_Adjacent_Header_Lanes_Adjacent_Count instead.
 */
#define SIG_Lanes_Adjacent_Header_Lanes_Adjacent_Count        0, 0, 4, 4

/**
 * Signal Lanes_Adjacent_Count setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_Header_Lanes_Adjacent_Count or \ref INIT_Lanes_Adjacent_Header instead.
 */
#define SETUP_Lanes_Adjacent_Header_Lanes_Adjacent_Count      0, 0, 4, 4, 0

/**
 * Get signal Lanes_Adjacent_Count from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_Header_Lanes_Adjacent_Count(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Lanes_Adjacent_Count in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_Header_Lanes_Adjacent_Count(buf, val) { \
	buf[0] &= ~(0x0f << 4); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Lanes_Adjacent_Count in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_Header_Lanes_Adjacent_Count(buf) \
	SET_Lanes_Adjacent_Header_Lanes_Adjacent_Count(buf, 0)

/**
 * Signal Lanes_Adjacent_Count value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_Header_Lanes_Adjacent_Count(x, fmt) \
	((x) * fmt)

/**
 * Signal Lanes_Adjacent_Count raw initial value.
 */
#define START_Lanes_Adjacent_Header_Lanes_Adjacent_Count      0

/**
 * Signal Lanes_Adjacent_Count raw minimum value.
 */
#define MIN_Lanes_Adjacent_Header_Lanes_Adjacent_Count        0

/**
 * Signal Lanes_Adjacent_Count raw maximum value.
 */
#define MAX_Lanes_Adjacent_Header_Lanes_Adjacent_Count        8

/**
 * Signal Lanes_Adjacent_Count raw offset value.
 */
#define OFF_Lanes_Adjacent_Header_Lanes_Adjacent_Count        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_1A_Adjacent_Type_1 Signal Adjacent_Type_1 of Message Lanes_Adjacent_1A (0x784)
 *
 * ENUM of Lane Mark Type Classification
 *
 * Contains the value table \ref ENUM_Lanes_Adjacent_1A_Adjacent_Type_1.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1A
 * @{
 */

/**
 * Signal Adjacent_Type_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1A_Adjacent_Type_1 and \ref GET_Lanes_Adjacent_1A_Adjacent_Type_1 instead.
 */
#define SIG_Lanes_Adjacent_1A_Adjacent_Type_1        0, 0, 0, 4

/**
 * Signal Adjacent_Type_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1A_Adjacent_Type_1 or \ref INIT_Lanes_Adjacent_1A instead.
 */
#define SETUP_Lanes_Adjacent_1A_Adjacent_Type_1      0, 0, 0, 4, 0

/**
 * Get signal Adjacent_Type_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1A_Adjacent_Type_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Adjacent_Type_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1A_Adjacent_Type_1(buf, val) { \
	buf[0] &= ~(0x0f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Adjacent_Type_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1A_Adjacent_Type_1(buf) \
	SET_Lanes_Adjacent_1A_Adjacent_Type_1(buf, 0)

/**
 * Signal Adjacent_Type_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1A_Adjacent_Type_1(x, fmt) \
	((x) * fmt)

/**
 * Signal Adjacent_Type_1 raw initial value.
 */
#define START_Lanes_Adjacent_1A_Adjacent_Type_1      0

/**
 * Signal Adjacent_Type_1 raw minimum value.
 */
#define MIN_Lanes_Adjacent_1A_Adjacent_Type_1        0

/**
 * Signal Adjacent_Type_1 raw maximum value.
 */
#define MAX_Lanes_Adjacent_1A_Adjacent_Type_1        15

/**
 * Signal Adjacent_Type_1 raw offset value.
 */
#define OFF_Lanes_Adjacent_1A_Adjacent_Type_1        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Adjacent_1A_Adjacent_Type_1 Value Table for Signal Adjacent_Type_1 in Message Lanes_Adjacent_1A (0x784)
 *
 * Enum values defined for \ref SIG_Lanes_Adjacent_1A_Adjacent_Type_1.
 *
 * @ingroup SIG_Lanes_Adjacent_1A_Adjacent_Type_1
 */

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Type_1 entry HOV_LANE.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Type_1
 */
#define Lanes_Adjacent_1A_Adjacent_Type_1_HOV_LANE            6

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Type_1 entry DECELERATION.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Type_1
 */
#define Lanes_Adjacent_1A_Adjacent_Type_1_DECELERATION        5

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Type_1 entry BOTTS.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Type_1
 */
#define Lanes_Adjacent_1A_Adjacent_Type_1_BOTTS               4

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Type_1 entry DLM.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Type_1
 */
#define Lanes_Adjacent_1A_Adjacent_Type_1_DLM                 3

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Type_1 entry DASHED.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Type_1
 */
#define Lanes_Adjacent_1A_Adjacent_Type_1_DASHED              2

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Type_1 entry SOLID.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Type_1
 */
#define Lanes_Adjacent_1A_Adjacent_Type_1_SOLID               1

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Type_1 entry UNDECIDED.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Type_1
 */
#define Lanes_Adjacent_1A_Adjacent_Type_1_UNDECIDED           0

/**
 * @defgroup SIG_Lanes_Adjacent_1A_Adjacent_Confidence_1 Signal Adjacent_Confidence_1 of Message Lanes_Adjacent_1A (0x784)
 *
 * Confidence of lane mark 
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1A
 * @{
 */

/**
 * Signal Adjacent_Confidence_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1A_Adjacent_Confidence_1 and \ref GET_Lanes_Adjacent_1A_Adjacent_Confidence_1 instead.
 */
#define SIG_Lanes_Adjacent_1A_Adjacent_Confidence_1        0, 0, 4, 7

/**
 * Signal Adjacent_Confidence_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1A_Adjacent_Confidence_1 or \ref INIT_Lanes_Adjacent_1A instead.
 */
#define SETUP_Lanes_Adjacent_1A_Adjacent_Confidence_1      0, 0, 4, 7, 0

/**
 * Get signal Adjacent_Confidence_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1A_Adjacent_Confidence_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 4) & 0x0f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x07) << 4) \
)

/**
 * Set signal Adjacent_Confidence_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1A_Adjacent_Confidence_1(buf, val) { \
	buf[0] &= ~(0x0f << 4); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= (((uint8_t)(val) >> 4) & 0x07) << 0; \
}

/**
 * Set signal Adjacent_Confidence_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1A_Adjacent_Confidence_1(buf) \
	SET_Lanes_Adjacent_1A_Adjacent_Confidence_1(buf, 0)

/**
 * Signal Adjacent_Confidence_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1A_Adjacent_Confidence_1(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_Confidence_1 raw initial value.
 */
#define START_Lanes_Adjacent_1A_Adjacent_Confidence_1      0

/**
 * Signal Adjacent_Confidence_1 raw minimum value.
 */
#define MIN_Lanes_Adjacent_1A_Adjacent_Confidence_1        0

/**
 * Signal Adjacent_Confidence_1 raw maximum value.
 */
#define MAX_Lanes_Adjacent_1A_Adjacent_Confidence_1        100

/**
 * Signal Adjacent_Confidence_1 raw offset value.
 */
#define OFF_Lanes_Adjacent_1A_Adjacent_Confidence_1        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1 Signal Adjacent_View_Range_Start_1 of Message Lanes_Adjacent_1A (0x784)
 *
 * Start of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1A
 * @{
 */

/**
 * Signal Adjacent_View_Range_Start_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1 and \ref GET_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1 instead.
 */
#define SIG_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1        0, 0, 11, 15

/**
 * Signal Adjacent_View_Range_Start_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1 or \ref INIT_Lanes_Adjacent_1A instead.
 */
#define SETUP_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1      0, 0, 11, 15, 0

/**
 * Get signal Adjacent_View_Range_Start_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x1f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 5) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 13) \
)

/**
 * Set signal Adjacent_View_Range_Start_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x03) << 0; \
}

/**
 * Set signal Adjacent_View_Range_Start_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1(buf) \
	SET_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1(buf, 0)

/**
 * Signal Adjacent_View_Range_Start_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_View_Range_Start_1 raw initial value.
 */
#define START_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1      0

/**
 * Signal Adjacent_View_Range_Start_1 raw minimum value.
 */
#define MIN_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1        0

/**
 * Signal Adjacent_View_Range_Start_1 raw maximum value.
 */
#define MAX_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1        20000

/**
 * Signal Adjacent_View_Range_Start_1 raw offset value.
 */
#define OFF_Lanes_Adjacent_1A_Adjacent_View_Range_Start_1        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_1A_Adjacent_View_Range_End_1 Signal Adjacent_View_Range_End_1 of Message Lanes_Adjacent_1A (0x784)
 *
 * End of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1A
 * @{
 */

/**
 * Signal Adjacent_View_Range_End_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1A_Adjacent_View_Range_End_1 and \ref GET_Lanes_Adjacent_1A_Adjacent_View_Range_End_1 instead.
 */
#define SIG_Lanes_Adjacent_1A_Adjacent_View_Range_End_1        0, 0, 26, 15

/**
 * Signal Adjacent_View_Range_End_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1A_Adjacent_View_Range_End_1 or \ref INIT_Lanes_Adjacent_1A instead.
 */
#define SETUP_Lanes_Adjacent_1A_Adjacent_View_Range_End_1      0, 0, 26, 15, 0

/**
 * Get signal Adjacent_View_Range_End_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1A_Adjacent_View_Range_End_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 6) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x01) << 14) \
)

/**
 * Set signal Adjacent_View_Range_End_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1A_Adjacent_View_Range_End_1(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0xff) << 0; \
	buf[5] &= ~(0x01 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 14) & 0x01) << 0; \
}

/**
 * Set signal Adjacent_View_Range_End_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1A_Adjacent_View_Range_End_1(buf) \
	SET_Lanes_Adjacent_1A_Adjacent_View_Range_End_1(buf, 0)

/**
 * Signal Adjacent_View_Range_End_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1A_Adjacent_View_Range_End_1(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_View_Range_End_1 raw initial value.
 */
#define START_Lanes_Adjacent_1A_Adjacent_View_Range_End_1      0

/**
 * Signal Adjacent_View_Range_End_1 raw minimum value.
 */
#define MIN_Lanes_Adjacent_1A_Adjacent_View_Range_End_1        0

/**
 * Signal Adjacent_View_Range_End_1 raw maximum value.
 */
#define MAX_Lanes_Adjacent_1A_Adjacent_View_Range_End_1        20000

/**
 * Signal Adjacent_View_Range_End_1 raw offset value.
 */
#define OFF_Lanes_Adjacent_1A_Adjacent_View_Range_End_1        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_1A_Adjacent_Line_Role_1 Signal Adjacent_Line_Role_1 of Message Lanes_Adjacent_1A (0x784)
 *
 * The role of the lane mark relative to the host vehicle.  Commonly the host left boundary is also the right boundary of the next left lane (and the host right boundary is also the left boundary of the next right lane)  RIGHT_RIGHT_LANEMARK represents the ne
 *
 * Contains the value table \ref ENUM_Lanes_Adjacent_1A_Adjacent_Line_Role_1.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1A
 * @{
 */

/**
 * Signal Adjacent_Line_Role_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1A_Adjacent_Line_Role_1 and \ref GET_Lanes_Adjacent_1A_Adjacent_Line_Role_1 instead.
 */
#define SIG_Lanes_Adjacent_1A_Adjacent_Line_Role_1        0, 0, 41, 4

/**
 * Signal Adjacent_Line_Role_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1A_Adjacent_Line_Role_1 or \ref INIT_Lanes_Adjacent_1A instead.
 */
#define SETUP_Lanes_Adjacent_1A_Adjacent_Line_Role_1      0, 0, 41, 4, 0

/**
 * Get signal Adjacent_Line_Role_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1A_Adjacent_Line_Role_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 1) & 0x0f) << 0) \
)

/**
 * Set signal Adjacent_Line_Role_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1A_Adjacent_Line_Role_1(buf, val) { \
	buf[5] &= ~(0x0f << 1); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x0f) << 1; \
}

/**
 * Set signal Adjacent_Line_Role_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1A_Adjacent_Line_Role_1(buf) \
	SET_Lanes_Adjacent_1A_Adjacent_Line_Role_1(buf, 0)

/**
 * Signal Adjacent_Line_Role_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1A_Adjacent_Line_Role_1(x, fmt) \
	((x) * fmt)

/**
 * Signal Adjacent_Line_Role_1 raw initial value.
 */
#define START_Lanes_Adjacent_1A_Adjacent_Line_Role_1      0

/**
 * Signal Adjacent_Line_Role_1 raw minimum value.
 */
#define MIN_Lanes_Adjacent_1A_Adjacent_Line_Role_1        0

/**
 * Signal Adjacent_Line_Role_1 raw maximum value.
 */
#define MAX_Lanes_Adjacent_1A_Adjacent_Line_Role_1        8

/**
 * Signal Adjacent_Line_Role_1 raw offset value.
 */
#define OFF_Lanes_Adjacent_1A_Adjacent_Line_Role_1        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Adjacent_1A_Adjacent_Line_Role_1 Value Table for Signal Adjacent_Line_Role_1 in Message Lanes_Adjacent_1A (0x784)
 *
 * Enum values defined for \ref SIG_Lanes_Adjacent_1A_Adjacent_Line_Role_1.
 *
 * @ingroup SIG_Lanes_Adjacent_1A_Adjacent_Line_Role_1
 */

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Line_Role_1 entry RIGHT__RIGHT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Line_Role_1
 */
#define Lanes_Adjacent_1A_Adjacent_Line_Role_1_RIGHT__RIGHT_LANEMARK    4

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Line_Role_1 entry RIGHT__LEFT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Line_Role_1
 */
#define Lanes_Adjacent_1A_Adjacent_Line_Role_1_RIGHT__LEFT_LANEMARK    3

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Line_Role_1 entry LEFT__RIGHT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Line_Role_1
 */
#define Lanes_Adjacent_1A_Adjacent_Line_Role_1_LEFT__RIGHT_LANEMARK    2

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Line_Role_1 entry LEFT__LEFT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Line_Role_1
 */
#define Lanes_Adjacent_1A_Adjacent_Line_Role_1_LEFT__LEFT_LANEMARK    1

/**
 * Value table Lanes_Adjacent_1A_Adjacent_Line_Role_1 entry NONE.
 *
 * @ingroup ENUM_Lanes_Adjacent_1A_Adjacent_Line_Role_1
 */
#define Lanes_Adjacent_1A_Adjacent_Line_Role_1_NONE                0

/**
 * @defgroup SIG_Lanes_Adjacent_1A_Reserved Signal Reserved of Message Lanes_Adjacent_1A (0x784)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1A
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1A_Reserved and \ref GET_Lanes_Adjacent_1A_Reserved instead.
 */
#define SIG_Lanes_Adjacent_1A_Reserved              0, 0, 45, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1A_Reserved or \ref INIT_Lanes_Adjacent_1A instead.
 */
#define SETUP_Lanes_Adjacent_1A_Reserved            0, 0, 45, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1A_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1A_Reserved(buf, val) { \
	buf[5] &= ~(0x07 << 5); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1A_Reserved(buf) \
	SET_Lanes_Adjacent_1A_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1A_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Adjacent_1A_Reserved            0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Adjacent_1A_Reserved              0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Adjacent_1A_Reserved              0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Adjacent_1A_Reserved              0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_1B_Adjacent_Line_C0_1 Signal Adjacent_Line_C0_1 of Message Lanes_Adjacent_1B (0x785)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1B
 * @{
 */

/**
 * Signal Adjacent_Line_C0_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1B_Adjacent_Line_C0_1 and \ref GET_Lanes_Adjacent_1B_Adjacent_Line_C0_1 instead.
 */
#define SIG_Lanes_Adjacent_1B_Adjacent_Line_C0_1        0, 0, 0, 11

/**
 * Signal Adjacent_Line_C0_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C0_1 or \ref INIT_Lanes_Adjacent_1B instead.
 */
#define SETUP_Lanes_Adjacent_1B_Adjacent_Line_C0_1      0, 0, 0, 11, 0

/**
 * Get signal Adjacent_Line_C0_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1B_Adjacent_Line_C0_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x07) << 8) \
)

/**
 * Set signal Adjacent_Line_C0_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1B_Adjacent_Line_C0_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x07) << 0; \
}

/**
 * Set signal Adjacent_Line_C0_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C0_1(buf) \
	SET_Lanes_Adjacent_1B_Adjacent_Line_C0_1(buf, 0)

/**
 * Signal Adjacent_Line_C0_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1B_Adjacent_Line_C0_1(x, fmt) \
	((x) * fmt / 100 + fmt * (-10))

/**
 * Signal Adjacent_Line_C0_1 raw initial value.
 */
#define START_Lanes_Adjacent_1B_Adjacent_Line_C0_1      0

/**
 * Signal Adjacent_Line_C0_1 raw minimum value.
 */
#define MIN_Lanes_Adjacent_1B_Adjacent_Line_C0_1        0

/**
 * Signal Adjacent_Line_C0_1 raw maximum value.
 */
#define MAX_Lanes_Adjacent_1B_Adjacent_Line_C0_1        2000

/**
 * Signal Adjacent_Line_C0_1 raw offset value.
 */
#define OFF_Lanes_Adjacent_1B_Adjacent_Line_C0_1        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_1B_Adjacent_Line_C1_1 Signal Adjacent_Line_C1_1 of Message Lanes_Adjacent_1B (0x785)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1B
 * @{
 */

/**
 * Signal Adjacent_Line_C1_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1B_Adjacent_Line_C1_1 and \ref GET_Lanes_Adjacent_1B_Adjacent_Line_C1_1 instead.
 */
#define SIG_Lanes_Adjacent_1B_Adjacent_Line_C1_1        0, 0, 11, 10

/**
 * Signal Adjacent_Line_C1_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C1_1 or \ref INIT_Lanes_Adjacent_1B instead.
 */
#define SETUP_Lanes_Adjacent_1B_Adjacent_Line_C1_1      0, 0, 11, 10, 0

/**
 * Get signal Adjacent_Line_C1_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1B_Adjacent_Line_C1_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x1f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 5) \
)

/**
 * Set signal Adjacent_Line_C1_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1B_Adjacent_Line_C1_1(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
	buf[2] &= ~(0x1f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C1_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C1_1(buf) \
	SET_Lanes_Adjacent_1B_Adjacent_Line_C1_1(buf, 0)

/**
 * Signal Adjacent_Line_C1_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1B_Adjacent_Line_C1_1(x, fmt) \
	((x) * fmt * 977 / 1000000 + fmt * (-383325831) / 1073741824)

/**
 * Signal Adjacent_Line_C1_1 raw initial value.
 */
#define START_Lanes_Adjacent_1B_Adjacent_Line_C1_1      0

/**
 * Signal Adjacent_Line_C1_1 raw minimum value.
 */
#define MIN_Lanes_Adjacent_1B_Adjacent_Line_C1_1        0

/**
 * Signal Adjacent_Line_C1_1 raw maximum value.
 */
#define MAX_Lanes_Adjacent_1B_Adjacent_Line_C1_1        731

/**
 * Signal Adjacent_Line_C1_1 raw offset value.
 */
#define OFF_Lanes_Adjacent_1B_Adjacent_Line_C1_1        -365

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_1B_Adjacent_Line_C2_1 Signal Adjacent_Line_C2_1 of Message Lanes_Adjacent_1B (0x785)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1B
 * @{
 */

/**
 * Signal Adjacent_Line_C2_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1B_Adjacent_Line_C2_1 and \ref GET_Lanes_Adjacent_1B_Adjacent_Line_C2_1 instead.
 */
#define SIG_Lanes_Adjacent_1B_Adjacent_Line_C2_1        0, 0, 21, 16

/**
 * Signal Adjacent_Line_C2_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C2_1 or \ref INIT_Lanes_Adjacent_1B instead.
 */
#define SETUP_Lanes_Adjacent_1B_Adjacent_Line_C2_1      0, 0, 21, 16, 0

/**
 * Get signal Adjacent_Line_C2_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1B_Adjacent_Line_C2_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal Adjacent_Line_C2_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1B_Adjacent_Line_C2_1(buf, val) { \
	buf[2] &= ~(0x07 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C2_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C2_1(buf) \
	SET_Lanes_Adjacent_1B_Adjacent_Line_C2_1(buf, 0)

/**
 * Signal Adjacent_Line_C2_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1B_Adjacent_Line_C2_1(x, fmt) \
	((x) * fmt * 500 / 511770726 + fmt * (-4) / 125)

/**
 * Signal Adjacent_Line_C2_1 raw initial value.
 */
#define START_Lanes_Adjacent_1B_Adjacent_Line_C2_1      0

/**
 * Signal Adjacent_Line_C2_1 raw minimum value.
 */
#define MIN_Lanes_Adjacent_1B_Adjacent_Line_C2_1        0

/**
 * Signal Adjacent_Line_C2_1 raw maximum value.
 */
#define MAX_Lanes_Adjacent_1B_Adjacent_Line_C2_1        65507

/**
 * Signal Adjacent_Line_C2_1 raw offset value.
 */
#define OFF_Lanes_Adjacent_1B_Adjacent_Line_C2_1        -32753

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_1B_Adjacent_Line_C3_1 Signal Adjacent_Line_C3_1 of Message Lanes_Adjacent_1B (0x785)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1B
 * @{
 */

/**
 * Signal Adjacent_Line_C3_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1B_Adjacent_Line_C3_1 and \ref GET_Lanes_Adjacent_1B_Adjacent_Line_C3_1 instead.
 */
#define SIG_Lanes_Adjacent_1B_Adjacent_Line_C3_1        0, 0, 37, 16

/**
 * Signal Adjacent_Line_C3_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C3_1 or \ref INIT_Lanes_Adjacent_1B instead.
 */
#define SETUP_Lanes_Adjacent_1B_Adjacent_Line_C3_1      0, 0, 37, 16, 0

/**
 * Get signal Adjacent_Line_C3_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1B_Adjacent_Line_C3_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal Adjacent_Line_C3_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1B_Adjacent_Line_C3_1(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C3_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1B_Adjacent_Line_C3_1(buf) \
	SET_Lanes_Adjacent_1B_Adjacent_Line_C3_1(buf, 0)

/**
 * Signal Adjacent_Line_C3_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1B_Adjacent_Line_C3_1(x, fmt) \
	((x) * fmt / 268435456 + fmt * 61 / (-500000))

/**
 * Signal Adjacent_Line_C3_1 raw initial value.
 */
#define START_Lanes_Adjacent_1B_Adjacent_Line_C3_1      0

/**
 * Signal Adjacent_Line_C3_1 raw minimum value.
 */
#define MIN_Lanes_Adjacent_1B_Adjacent_Line_C3_1        0

/**
 * Signal Adjacent_Line_C3_1 raw maximum value.
 */
#define MAX_Lanes_Adjacent_1B_Adjacent_Line_C3_1        65416

/**
 * Signal Adjacent_Line_C3_1 raw offset value.
 */
#define OFF_Lanes_Adjacent_1B_Adjacent_Line_C3_1        -32708

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_1B_Reserved Signal Reserved of Message Lanes_Adjacent_1B (0x785)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_1B
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_1B_Reserved and \ref GET_Lanes_Adjacent_1B_Reserved instead.
 */
#define SIG_Lanes_Adjacent_1B_Reserved              0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_1B_Reserved or \ref INIT_Lanes_Adjacent_1B instead.
 */
#define SETUP_Lanes_Adjacent_1B_Reserved            0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_1B_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_1B_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_1B_Reserved(buf) \
	SET_Lanes_Adjacent_1B_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_1B_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Adjacent_1B_Reserved            0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Adjacent_1B_Reserved              0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Adjacent_1B_Reserved              0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Adjacent_1B_Reserved              0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_2A_Adjacent_Type_2 Signal Adjacent_Type_2 of Message Lanes_Adjacent_2A (0x786)
 *
 * ENUM of Lane Mark Type Classification
 *
 * Contains the value table \ref ENUM_Lanes_Adjacent_2A_Adjacent_Type_2.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2A
 * @{
 */

/**
 * Signal Adjacent_Type_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2A_Adjacent_Type_2 and \ref GET_Lanes_Adjacent_2A_Adjacent_Type_2 instead.
 */
#define SIG_Lanes_Adjacent_2A_Adjacent_Type_2        0, 0, 0, 4

/**
 * Signal Adjacent_Type_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2A_Adjacent_Type_2 or \ref INIT_Lanes_Adjacent_2A instead.
 */
#define SETUP_Lanes_Adjacent_2A_Adjacent_Type_2      0, 0, 0, 4, 0

/**
 * Get signal Adjacent_Type_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2A_Adjacent_Type_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Adjacent_Type_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2A_Adjacent_Type_2(buf, val) { \
	buf[0] &= ~(0x0f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Adjacent_Type_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2A_Adjacent_Type_2(buf) \
	SET_Lanes_Adjacent_2A_Adjacent_Type_2(buf, 0)

/**
 * Signal Adjacent_Type_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2A_Adjacent_Type_2(x, fmt) \
	((x) * fmt)

/**
 * Signal Adjacent_Type_2 raw initial value.
 */
#define START_Lanes_Adjacent_2A_Adjacent_Type_2      0

/**
 * Signal Adjacent_Type_2 raw minimum value.
 */
#define MIN_Lanes_Adjacent_2A_Adjacent_Type_2        0

/**
 * Signal Adjacent_Type_2 raw maximum value.
 */
#define MAX_Lanes_Adjacent_2A_Adjacent_Type_2        15

/**
 * Signal Adjacent_Type_2 raw offset value.
 */
#define OFF_Lanes_Adjacent_2A_Adjacent_Type_2        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Adjacent_2A_Adjacent_Type_2 Value Table for Signal Adjacent_Type_2 in Message Lanes_Adjacent_2A (0x786)
 *
 * Enum values defined for \ref SIG_Lanes_Adjacent_2A_Adjacent_Type_2.
 *
 * @ingroup SIG_Lanes_Adjacent_2A_Adjacent_Type_2
 */

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Type_2 entry HOV_LANE.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Type_2
 */
#define Lanes_Adjacent_2A_Adjacent_Type_2_HOV_LANE            6

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Type_2 entry DECELERATION.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Type_2
 */
#define Lanes_Adjacent_2A_Adjacent_Type_2_DECELERATION        5

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Type_2 entry BOTTS.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Type_2
 */
#define Lanes_Adjacent_2A_Adjacent_Type_2_BOTTS               4

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Type_2 entry DLM.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Type_2
 */
#define Lanes_Adjacent_2A_Adjacent_Type_2_DLM                 3

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Type_2 entry DASHED.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Type_2
 */
#define Lanes_Adjacent_2A_Adjacent_Type_2_DASHED              2

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Type_2 entry SOLID.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Type_2
 */
#define Lanes_Adjacent_2A_Adjacent_Type_2_SOLID               1

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Type_2 entry UNDECIDED.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Type_2
 */
#define Lanes_Adjacent_2A_Adjacent_Type_2_UNDECIDED           0

/**
 * @defgroup SIG_Lanes_Adjacent_2A_Adjacent_Confidence_2 Signal Adjacent_Confidence_2 of Message Lanes_Adjacent_2A (0x786)
 *
 * Confidence of lane mark 
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2A
 * @{
 */

/**
 * Signal Adjacent_Confidence_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2A_Adjacent_Confidence_2 and \ref GET_Lanes_Adjacent_2A_Adjacent_Confidence_2 instead.
 */
#define SIG_Lanes_Adjacent_2A_Adjacent_Confidence_2        0, 0, 4, 7

/**
 * Signal Adjacent_Confidence_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2A_Adjacent_Confidence_2 or \ref INIT_Lanes_Adjacent_2A instead.
 */
#define SETUP_Lanes_Adjacent_2A_Adjacent_Confidence_2      0, 0, 4, 7, 0

/**
 * Get signal Adjacent_Confidence_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2A_Adjacent_Confidence_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 4) & 0x0f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x07) << 4) \
)

/**
 * Set signal Adjacent_Confidence_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2A_Adjacent_Confidence_2(buf, val) { \
	buf[0] &= ~(0x0f << 4); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= (((uint8_t)(val) >> 4) & 0x07) << 0; \
}

/**
 * Set signal Adjacent_Confidence_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2A_Adjacent_Confidence_2(buf) \
	SET_Lanes_Adjacent_2A_Adjacent_Confidence_2(buf, 0)

/**
 * Signal Adjacent_Confidence_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2A_Adjacent_Confidence_2(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_Confidence_2 raw initial value.
 */
#define START_Lanes_Adjacent_2A_Adjacent_Confidence_2      0

/**
 * Signal Adjacent_Confidence_2 raw minimum value.
 */
#define MIN_Lanes_Adjacent_2A_Adjacent_Confidence_2        0

/**
 * Signal Adjacent_Confidence_2 raw maximum value.
 */
#define MAX_Lanes_Adjacent_2A_Adjacent_Confidence_2        100

/**
 * Signal Adjacent_Confidence_2 raw offset value.
 */
#define OFF_Lanes_Adjacent_2A_Adjacent_Confidence_2        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2 Signal Adjacent_View_Range_Start_2 of Message Lanes_Adjacent_2A (0x786)
 *
 * Start of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2A
 * @{
 */

/**
 * Signal Adjacent_View_Range_Start_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2 and \ref GET_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2 instead.
 */
#define SIG_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2        0, 0, 11, 15

/**
 * Signal Adjacent_View_Range_Start_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2 or \ref INIT_Lanes_Adjacent_2A instead.
 */
#define SETUP_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2      0, 0, 11, 15, 0

/**
 * Get signal Adjacent_View_Range_Start_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x1f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 5) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 13) \
)

/**
 * Set signal Adjacent_View_Range_Start_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x03) << 0; \
}

/**
 * Set signal Adjacent_View_Range_Start_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2(buf) \
	SET_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2(buf, 0)

/**
 * Signal Adjacent_View_Range_Start_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_View_Range_Start_2 raw initial value.
 */
#define START_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2      0

/**
 * Signal Adjacent_View_Range_Start_2 raw minimum value.
 */
#define MIN_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2        0

/**
 * Signal Adjacent_View_Range_Start_2 raw maximum value.
 */
#define MAX_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2        20000

/**
 * Signal Adjacent_View_Range_Start_2 raw offset value.
 */
#define OFF_Lanes_Adjacent_2A_Adjacent_View_Range_Start_2        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_2A_Adjacent_View_Range_End_2 Signal Adjacent_View_Range_End_2 of Message Lanes_Adjacent_2A (0x786)
 *
 * End of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2A
 * @{
 */

/**
 * Signal Adjacent_View_Range_End_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2A_Adjacent_View_Range_End_2 and \ref GET_Lanes_Adjacent_2A_Adjacent_View_Range_End_2 instead.
 */
#define SIG_Lanes_Adjacent_2A_Adjacent_View_Range_End_2        0, 0, 26, 15

/**
 * Signal Adjacent_View_Range_End_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2A_Adjacent_View_Range_End_2 or \ref INIT_Lanes_Adjacent_2A instead.
 */
#define SETUP_Lanes_Adjacent_2A_Adjacent_View_Range_End_2      0, 0, 26, 15, 0

/**
 * Get signal Adjacent_View_Range_End_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2A_Adjacent_View_Range_End_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 6) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x01) << 14) \
)

/**
 * Set signal Adjacent_View_Range_End_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2A_Adjacent_View_Range_End_2(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0xff) << 0; \
	buf[5] &= ~(0x01 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 14) & 0x01) << 0; \
}

/**
 * Set signal Adjacent_View_Range_End_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2A_Adjacent_View_Range_End_2(buf) \
	SET_Lanes_Adjacent_2A_Adjacent_View_Range_End_2(buf, 0)

/**
 * Signal Adjacent_View_Range_End_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2A_Adjacent_View_Range_End_2(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_View_Range_End_2 raw initial value.
 */
#define START_Lanes_Adjacent_2A_Adjacent_View_Range_End_2      0

/**
 * Signal Adjacent_View_Range_End_2 raw minimum value.
 */
#define MIN_Lanes_Adjacent_2A_Adjacent_View_Range_End_2        0

/**
 * Signal Adjacent_View_Range_End_2 raw maximum value.
 */
#define MAX_Lanes_Adjacent_2A_Adjacent_View_Range_End_2        20000

/**
 * Signal Adjacent_View_Range_End_2 raw offset value.
 */
#define OFF_Lanes_Adjacent_2A_Adjacent_View_Range_End_2        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_2A_Adjacent_Line_Role_2 Signal Adjacent_Line_Role_2 of Message Lanes_Adjacent_2A (0x786)
 *
 * The role of the lane mark relative to the host vehicle.  Commonly the host left boundary is also the right boundary of the next left lane (and the host right boundary is also the left boundary of the next right lane)  RIGHT_RIGHT_LANEMARK represents the ne
 *
 * Contains the value table \ref ENUM_Lanes_Adjacent_2A_Adjacent_Line_Role_2.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2A
 * @{
 */

/**
 * Signal Adjacent_Line_Role_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2A_Adjacent_Line_Role_2 and \ref GET_Lanes_Adjacent_2A_Adjacent_Line_Role_2 instead.
 */
#define SIG_Lanes_Adjacent_2A_Adjacent_Line_Role_2        0, 0, 41, 4

/**
 * Signal Adjacent_Line_Role_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2A_Adjacent_Line_Role_2 or \ref INIT_Lanes_Adjacent_2A instead.
 */
#define SETUP_Lanes_Adjacent_2A_Adjacent_Line_Role_2      0, 0, 41, 4, 0

/**
 * Get signal Adjacent_Line_Role_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2A_Adjacent_Line_Role_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 1) & 0x0f) << 0) \
)

/**
 * Set signal Adjacent_Line_Role_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2A_Adjacent_Line_Role_2(buf, val) { \
	buf[5] &= ~(0x0f << 1); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x0f) << 1; \
}

/**
 * Set signal Adjacent_Line_Role_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2A_Adjacent_Line_Role_2(buf) \
	SET_Lanes_Adjacent_2A_Adjacent_Line_Role_2(buf, 0)

/**
 * Signal Adjacent_Line_Role_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2A_Adjacent_Line_Role_2(x, fmt) \
	((x) * fmt)

/**
 * Signal Adjacent_Line_Role_2 raw initial value.
 */
#define START_Lanes_Adjacent_2A_Adjacent_Line_Role_2      0

/**
 * Signal Adjacent_Line_Role_2 raw minimum value.
 */
#define MIN_Lanes_Adjacent_2A_Adjacent_Line_Role_2        0

/**
 * Signal Adjacent_Line_Role_2 raw maximum value.
 */
#define MAX_Lanes_Adjacent_2A_Adjacent_Line_Role_2        8

/**
 * Signal Adjacent_Line_Role_2 raw offset value.
 */
#define OFF_Lanes_Adjacent_2A_Adjacent_Line_Role_2        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Adjacent_2A_Adjacent_Line_Role_2 Value Table for Signal Adjacent_Line_Role_2 in Message Lanes_Adjacent_2A (0x786)
 *
 * Enum values defined for \ref SIG_Lanes_Adjacent_2A_Adjacent_Line_Role_2.
 *
 * @ingroup SIG_Lanes_Adjacent_2A_Adjacent_Line_Role_2
 */

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Line_Role_2 entry RIGHT__RIGHT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Line_Role_2
 */
#define Lanes_Adjacent_2A_Adjacent_Line_Role_2_RIGHT__RIGHT_LANEMARK    4

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Line_Role_2 entry RIGHT__LEFT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Line_Role_2
 */
#define Lanes_Adjacent_2A_Adjacent_Line_Role_2_RIGHT__LEFT_LANEMARK    3

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Line_Role_2 entry LEFT__RIGHT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Line_Role_2
 */
#define Lanes_Adjacent_2A_Adjacent_Line_Role_2_LEFT__RIGHT_LANEMARK    2

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Line_Role_2 entry LEFT__LEFT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Line_Role_2
 */
#define Lanes_Adjacent_2A_Adjacent_Line_Role_2_LEFT__LEFT_LANEMARK    1

/**
 * Value table Lanes_Adjacent_2A_Adjacent_Line_Role_2 entry NONE.
 *
 * @ingroup ENUM_Lanes_Adjacent_2A_Adjacent_Line_Role_2
 */
#define Lanes_Adjacent_2A_Adjacent_Line_Role_2_NONE                0

/**
 * @defgroup SIG_Lanes_Adjacent_2A_Reserved Signal Reserved of Message Lanes_Adjacent_2A (0x786)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2A
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2A_Reserved and \ref GET_Lanes_Adjacent_2A_Reserved instead.
 */
#define SIG_Lanes_Adjacent_2A_Reserved              0, 0, 45, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2A_Reserved or \ref INIT_Lanes_Adjacent_2A instead.
 */
#define SETUP_Lanes_Adjacent_2A_Reserved            0, 0, 45, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2A_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2A_Reserved(buf, val) { \
	buf[5] &= ~(0x07 << 5); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2A_Reserved(buf) \
	SET_Lanes_Adjacent_2A_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2A_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Adjacent_2A_Reserved            0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Adjacent_2A_Reserved              0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Adjacent_2A_Reserved              0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Adjacent_2A_Reserved              0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_2B_Adjacent_Line_C0_2 Signal Adjacent_Line_C0_2 of Message Lanes_Adjacent_2B (0x787)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2B
 * @{
 */

/**
 * Signal Adjacent_Line_C0_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2B_Adjacent_Line_C0_2 and \ref GET_Lanes_Adjacent_2B_Adjacent_Line_C0_2 instead.
 */
#define SIG_Lanes_Adjacent_2B_Adjacent_Line_C0_2        0, 0, 0, 11

/**
 * Signal Adjacent_Line_C0_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C0_2 or \ref INIT_Lanes_Adjacent_2B instead.
 */
#define SETUP_Lanes_Adjacent_2B_Adjacent_Line_C0_2      0, 0, 0, 11, 0

/**
 * Get signal Adjacent_Line_C0_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2B_Adjacent_Line_C0_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x07) << 8) \
)

/**
 * Set signal Adjacent_Line_C0_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2B_Adjacent_Line_C0_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x07) << 0; \
}

/**
 * Set signal Adjacent_Line_C0_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C0_2(buf) \
	SET_Lanes_Adjacent_2B_Adjacent_Line_C0_2(buf, 0)

/**
 * Signal Adjacent_Line_C0_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2B_Adjacent_Line_C0_2(x, fmt) \
	((x) * fmt / 100 + fmt * (-10))

/**
 * Signal Adjacent_Line_C0_2 raw initial value.
 */
#define START_Lanes_Adjacent_2B_Adjacent_Line_C0_2      0

/**
 * Signal Adjacent_Line_C0_2 raw minimum value.
 */
#define MIN_Lanes_Adjacent_2B_Adjacent_Line_C0_2        0

/**
 * Signal Adjacent_Line_C0_2 raw maximum value.
 */
#define MAX_Lanes_Adjacent_2B_Adjacent_Line_C0_2        2000

/**
 * Signal Adjacent_Line_C0_2 raw offset value.
 */
#define OFF_Lanes_Adjacent_2B_Adjacent_Line_C0_2        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_2B_Adjacent_Line_C1_2 Signal Adjacent_Line_C1_2 of Message Lanes_Adjacent_2B (0x787)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2B
 * @{
 */

/**
 * Signal Adjacent_Line_C1_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2B_Adjacent_Line_C1_2 and \ref GET_Lanes_Adjacent_2B_Adjacent_Line_C1_2 instead.
 */
#define SIG_Lanes_Adjacent_2B_Adjacent_Line_C1_2        0, 0, 11, 10

/**
 * Signal Adjacent_Line_C1_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C1_2 or \ref INIT_Lanes_Adjacent_2B instead.
 */
#define SETUP_Lanes_Adjacent_2B_Adjacent_Line_C1_2      0, 0, 11, 10, 0

/**
 * Get signal Adjacent_Line_C1_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2B_Adjacent_Line_C1_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x1f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 5) \
)

/**
 * Set signal Adjacent_Line_C1_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2B_Adjacent_Line_C1_2(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
	buf[2] &= ~(0x1f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C1_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C1_2(buf) \
	SET_Lanes_Adjacent_2B_Adjacent_Line_C1_2(buf, 0)

/**
 * Signal Adjacent_Line_C1_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2B_Adjacent_Line_C1_2(x, fmt) \
	((x) * fmt * 977 / 1000000 + fmt * (-383325831) / 1073741824)

/**
 * Signal Adjacent_Line_C1_2 raw initial value.
 */
#define START_Lanes_Adjacent_2B_Adjacent_Line_C1_2      0

/**
 * Signal Adjacent_Line_C1_2 raw minimum value.
 */
#define MIN_Lanes_Adjacent_2B_Adjacent_Line_C1_2        0

/**
 * Signal Adjacent_Line_C1_2 raw maximum value.
 */
#define MAX_Lanes_Adjacent_2B_Adjacent_Line_C1_2        731

/**
 * Signal Adjacent_Line_C1_2 raw offset value.
 */
#define OFF_Lanes_Adjacent_2B_Adjacent_Line_C1_2        -365

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_2B_Adjacent_Line_C2_2 Signal Adjacent_Line_C2_2 of Message Lanes_Adjacent_2B (0x787)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2B
 * @{
 */

/**
 * Signal Adjacent_Line_C2_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2B_Adjacent_Line_C2_2 and \ref GET_Lanes_Adjacent_2B_Adjacent_Line_C2_2 instead.
 */
#define SIG_Lanes_Adjacent_2B_Adjacent_Line_C2_2        0, 0, 21, 16

/**
 * Signal Adjacent_Line_C2_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C2_2 or \ref INIT_Lanes_Adjacent_2B instead.
 */
#define SETUP_Lanes_Adjacent_2B_Adjacent_Line_C2_2      0, 0, 21, 16, 0

/**
 * Get signal Adjacent_Line_C2_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2B_Adjacent_Line_C2_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal Adjacent_Line_C2_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2B_Adjacent_Line_C2_2(buf, val) { \
	buf[2] &= ~(0x07 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C2_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C2_2(buf) \
	SET_Lanes_Adjacent_2B_Adjacent_Line_C2_2(buf, 0)

/**
 * Signal Adjacent_Line_C2_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2B_Adjacent_Line_C2_2(x, fmt) \
	((x) * fmt * 500 / 511770726 + fmt * (-4) / 125)

/**
 * Signal Adjacent_Line_C2_2 raw initial value.
 */
#define START_Lanes_Adjacent_2B_Adjacent_Line_C2_2      0

/**
 * Signal Adjacent_Line_C2_2 raw minimum value.
 */
#define MIN_Lanes_Adjacent_2B_Adjacent_Line_C2_2        0

/**
 * Signal Adjacent_Line_C2_2 raw maximum value.
 */
#define MAX_Lanes_Adjacent_2B_Adjacent_Line_C2_2        65507

/**
 * Signal Adjacent_Line_C2_2 raw offset value.
 */
#define OFF_Lanes_Adjacent_2B_Adjacent_Line_C2_2        -32753

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_2B_Adjacent_Line_C3_2 Signal Adjacent_Line_C3_2 of Message Lanes_Adjacent_2B (0x787)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2B
 * @{
 */

/**
 * Signal Adjacent_Line_C3_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2B_Adjacent_Line_C3_2 and \ref GET_Lanes_Adjacent_2B_Adjacent_Line_C3_2 instead.
 */
#define SIG_Lanes_Adjacent_2B_Adjacent_Line_C3_2        0, 0, 37, 16

/**
 * Signal Adjacent_Line_C3_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C3_2 or \ref INIT_Lanes_Adjacent_2B instead.
 */
#define SETUP_Lanes_Adjacent_2B_Adjacent_Line_C3_2      0, 0, 37, 16, 0

/**
 * Get signal Adjacent_Line_C3_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2B_Adjacent_Line_C3_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal Adjacent_Line_C3_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2B_Adjacent_Line_C3_2(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C3_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2B_Adjacent_Line_C3_2(buf) \
	SET_Lanes_Adjacent_2B_Adjacent_Line_C3_2(buf, 0)

/**
 * Signal Adjacent_Line_C3_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2B_Adjacent_Line_C3_2(x, fmt) \
	((x) * fmt / 268435456 + fmt * 61 / (-500000))

/**
 * Signal Adjacent_Line_C3_2 raw initial value.
 */
#define START_Lanes_Adjacent_2B_Adjacent_Line_C3_2      0

/**
 * Signal Adjacent_Line_C3_2 raw minimum value.
 */
#define MIN_Lanes_Adjacent_2B_Adjacent_Line_C3_2        0

/**
 * Signal Adjacent_Line_C3_2 raw maximum value.
 */
#define MAX_Lanes_Adjacent_2B_Adjacent_Line_C3_2        65416

/**
 * Signal Adjacent_Line_C3_2 raw offset value.
 */
#define OFF_Lanes_Adjacent_2B_Adjacent_Line_C3_2        -32708

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_2B_Reserved Signal Reserved of Message Lanes_Adjacent_2B (0x787)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_2B
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_2B_Reserved and \ref GET_Lanes_Adjacent_2B_Reserved instead.
 */
#define SIG_Lanes_Adjacent_2B_Reserved              0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_2B_Reserved or \ref INIT_Lanes_Adjacent_2B instead.
 */
#define SETUP_Lanes_Adjacent_2B_Reserved            0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_2B_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_2B_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_2B_Reserved(buf) \
	SET_Lanes_Adjacent_2B_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_2B_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Adjacent_2B_Reserved            0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Adjacent_2B_Reserved              0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Adjacent_2B_Reserved              0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Adjacent_2B_Reserved              0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_3A_Adjacent_Type_3 Signal Adjacent_Type_3 of Message Lanes_Adjacent_3A (0x788)
 *
 * ENUM of Lane Mark Type Classification
 *
 * Contains the value table \ref ENUM_Lanes_Adjacent_3A_Adjacent_Type_3.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3A
 * @{
 */

/**
 * Signal Adjacent_Type_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3A_Adjacent_Type_3 and \ref GET_Lanes_Adjacent_3A_Adjacent_Type_3 instead.
 */
#define SIG_Lanes_Adjacent_3A_Adjacent_Type_3        0, 0, 0, 4

/**
 * Signal Adjacent_Type_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3A_Adjacent_Type_3 or \ref INIT_Lanes_Adjacent_3A instead.
 */
#define SETUP_Lanes_Adjacent_3A_Adjacent_Type_3      0, 0, 0, 4, 0

/**
 * Get signal Adjacent_Type_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3A_Adjacent_Type_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Adjacent_Type_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3A_Adjacent_Type_3(buf, val) { \
	buf[0] &= ~(0x0f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Adjacent_Type_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3A_Adjacent_Type_3(buf) \
	SET_Lanes_Adjacent_3A_Adjacent_Type_3(buf, 0)

/**
 * Signal Adjacent_Type_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3A_Adjacent_Type_3(x, fmt) \
	((x) * fmt)

/**
 * Signal Adjacent_Type_3 raw initial value.
 */
#define START_Lanes_Adjacent_3A_Adjacent_Type_3      0

/**
 * Signal Adjacent_Type_3 raw minimum value.
 */
#define MIN_Lanes_Adjacent_3A_Adjacent_Type_3        0

/**
 * Signal Adjacent_Type_3 raw maximum value.
 */
#define MAX_Lanes_Adjacent_3A_Adjacent_Type_3        15

/**
 * Signal Adjacent_Type_3 raw offset value.
 */
#define OFF_Lanes_Adjacent_3A_Adjacent_Type_3        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Adjacent_3A_Adjacent_Type_3 Value Table for Signal Adjacent_Type_3 in Message Lanes_Adjacent_3A (0x788)
 *
 * Enum values defined for \ref SIG_Lanes_Adjacent_3A_Adjacent_Type_3.
 *
 * @ingroup SIG_Lanes_Adjacent_3A_Adjacent_Type_3
 */

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Type_3 entry HOV_LANE.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Type_3
 */
#define Lanes_Adjacent_3A_Adjacent_Type_3_HOV_LANE            6

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Type_3 entry DECELERATION.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Type_3
 */
#define Lanes_Adjacent_3A_Adjacent_Type_3_DECELERATION        5

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Type_3 entry BOTTS.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Type_3
 */
#define Lanes_Adjacent_3A_Adjacent_Type_3_BOTTS               4

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Type_3 entry DLM.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Type_3
 */
#define Lanes_Adjacent_3A_Adjacent_Type_3_DLM                 3

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Type_3 entry DASHED.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Type_3
 */
#define Lanes_Adjacent_3A_Adjacent_Type_3_DASHED              2

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Type_3 entry SOLID.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Type_3
 */
#define Lanes_Adjacent_3A_Adjacent_Type_3_SOLID               1

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Type_3 entry UNDECIDED.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Type_3
 */
#define Lanes_Adjacent_3A_Adjacent_Type_3_UNDECIDED           0

/**
 * @defgroup SIG_Lanes_Adjacent_3A_Adjacent_Confidence_3 Signal Adjacent_Confidence_3 of Message Lanes_Adjacent_3A (0x788)
 *
 * Confidence of lane mark 
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3A
 * @{
 */

/**
 * Signal Adjacent_Confidence_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3A_Adjacent_Confidence_3 and \ref GET_Lanes_Adjacent_3A_Adjacent_Confidence_3 instead.
 */
#define SIG_Lanes_Adjacent_3A_Adjacent_Confidence_3        0, 0, 4, 7

/**
 * Signal Adjacent_Confidence_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3A_Adjacent_Confidence_3 or \ref INIT_Lanes_Adjacent_3A instead.
 */
#define SETUP_Lanes_Adjacent_3A_Adjacent_Confidence_3      0, 0, 4, 7, 0

/**
 * Get signal Adjacent_Confidence_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3A_Adjacent_Confidence_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 4) & 0x0f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x07) << 4) \
)

/**
 * Set signal Adjacent_Confidence_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3A_Adjacent_Confidence_3(buf, val) { \
	buf[0] &= ~(0x0f << 4); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= (((uint8_t)(val) >> 4) & 0x07) << 0; \
}

/**
 * Set signal Adjacent_Confidence_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3A_Adjacent_Confidence_3(buf) \
	SET_Lanes_Adjacent_3A_Adjacent_Confidence_3(buf, 0)

/**
 * Signal Adjacent_Confidence_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3A_Adjacent_Confidence_3(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_Confidence_3 raw initial value.
 */
#define START_Lanes_Adjacent_3A_Adjacent_Confidence_3      0

/**
 * Signal Adjacent_Confidence_3 raw minimum value.
 */
#define MIN_Lanes_Adjacent_3A_Adjacent_Confidence_3        0

/**
 * Signal Adjacent_Confidence_3 raw maximum value.
 */
#define MAX_Lanes_Adjacent_3A_Adjacent_Confidence_3        100

/**
 * Signal Adjacent_Confidence_3 raw offset value.
 */
#define OFF_Lanes_Adjacent_3A_Adjacent_Confidence_3        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3 Signal Adjacent_View_Range_Start_3 of Message Lanes_Adjacent_3A (0x788)
 *
 * Start of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3A
 * @{
 */

/**
 * Signal Adjacent_View_Range_Start_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3 and \ref GET_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3 instead.
 */
#define SIG_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3        0, 0, 11, 15

/**
 * Signal Adjacent_View_Range_Start_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3 or \ref INIT_Lanes_Adjacent_3A instead.
 */
#define SETUP_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3      0, 0, 11, 15, 0

/**
 * Get signal Adjacent_View_Range_Start_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x1f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 5) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 13) \
)

/**
 * Set signal Adjacent_View_Range_Start_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x03) << 0; \
}

/**
 * Set signal Adjacent_View_Range_Start_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3(buf) \
	SET_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3(buf, 0)

/**
 * Signal Adjacent_View_Range_Start_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_View_Range_Start_3 raw initial value.
 */
#define START_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3      0

/**
 * Signal Adjacent_View_Range_Start_3 raw minimum value.
 */
#define MIN_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3        0

/**
 * Signal Adjacent_View_Range_Start_3 raw maximum value.
 */
#define MAX_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3        20000

/**
 * Signal Adjacent_View_Range_Start_3 raw offset value.
 */
#define OFF_Lanes_Adjacent_3A_Adjacent_View_Range_Start_3        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_3A_Adjacent_View_Range_End_3 Signal Adjacent_View_Range_End_3 of Message Lanes_Adjacent_3A (0x788)
 *
 * End of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3A
 * @{
 */

/**
 * Signal Adjacent_View_Range_End_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3A_Adjacent_View_Range_End_3 and \ref GET_Lanes_Adjacent_3A_Adjacent_View_Range_End_3 instead.
 */
#define SIG_Lanes_Adjacent_3A_Adjacent_View_Range_End_3        0, 0, 26, 15

/**
 * Signal Adjacent_View_Range_End_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3A_Adjacent_View_Range_End_3 or \ref INIT_Lanes_Adjacent_3A instead.
 */
#define SETUP_Lanes_Adjacent_3A_Adjacent_View_Range_End_3      0, 0, 26, 15, 0

/**
 * Get signal Adjacent_View_Range_End_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3A_Adjacent_View_Range_End_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 6) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x01) << 14) \
)

/**
 * Set signal Adjacent_View_Range_End_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3A_Adjacent_View_Range_End_3(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0xff) << 0; \
	buf[5] &= ~(0x01 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 14) & 0x01) << 0; \
}

/**
 * Set signal Adjacent_View_Range_End_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3A_Adjacent_View_Range_End_3(buf) \
	SET_Lanes_Adjacent_3A_Adjacent_View_Range_End_3(buf, 0)

/**
 * Signal Adjacent_View_Range_End_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3A_Adjacent_View_Range_End_3(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_View_Range_End_3 raw initial value.
 */
#define START_Lanes_Adjacent_3A_Adjacent_View_Range_End_3      0

/**
 * Signal Adjacent_View_Range_End_3 raw minimum value.
 */
#define MIN_Lanes_Adjacent_3A_Adjacent_View_Range_End_3        0

/**
 * Signal Adjacent_View_Range_End_3 raw maximum value.
 */
#define MAX_Lanes_Adjacent_3A_Adjacent_View_Range_End_3        20000

/**
 * Signal Adjacent_View_Range_End_3 raw offset value.
 */
#define OFF_Lanes_Adjacent_3A_Adjacent_View_Range_End_3        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_3A_Adjacent_Line_Role_3 Signal Adjacent_Line_Role_3 of Message Lanes_Adjacent_3A (0x788)
 *
 * The role of the lane mark relative to the host vehicle.  Commonly the host left boundary is also the right boundary of the next left lane (and the host right boundary is also the left boundary of the next right lane)  RIGHT_RIGHT_LANEMARK represents the ne
 *
 * Contains the value table \ref ENUM_Lanes_Adjacent_3A_Adjacent_Line_Role_3.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3A
 * @{
 */

/**
 * Signal Adjacent_Line_Role_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3A_Adjacent_Line_Role_3 and \ref GET_Lanes_Adjacent_3A_Adjacent_Line_Role_3 instead.
 */
#define SIG_Lanes_Adjacent_3A_Adjacent_Line_Role_3        0, 0, 41, 4

/**
 * Signal Adjacent_Line_Role_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3A_Adjacent_Line_Role_3 or \ref INIT_Lanes_Adjacent_3A instead.
 */
#define SETUP_Lanes_Adjacent_3A_Adjacent_Line_Role_3      0, 0, 41, 4, 0

/**
 * Get signal Adjacent_Line_Role_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3A_Adjacent_Line_Role_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 1) & 0x0f) << 0) \
)

/**
 * Set signal Adjacent_Line_Role_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3A_Adjacent_Line_Role_3(buf, val) { \
	buf[5] &= ~(0x0f << 1); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x0f) << 1; \
}

/**
 * Set signal Adjacent_Line_Role_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3A_Adjacent_Line_Role_3(buf) \
	SET_Lanes_Adjacent_3A_Adjacent_Line_Role_3(buf, 0)

/**
 * Signal Adjacent_Line_Role_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3A_Adjacent_Line_Role_3(x, fmt) \
	((x) * fmt)

/**
 * Signal Adjacent_Line_Role_3 raw initial value.
 */
#define START_Lanes_Adjacent_3A_Adjacent_Line_Role_3      0

/**
 * Signal Adjacent_Line_Role_3 raw minimum value.
 */
#define MIN_Lanes_Adjacent_3A_Adjacent_Line_Role_3        0

/**
 * Signal Adjacent_Line_Role_3 raw maximum value.
 */
#define MAX_Lanes_Adjacent_3A_Adjacent_Line_Role_3        8

/**
 * Signal Adjacent_Line_Role_3 raw offset value.
 */
#define OFF_Lanes_Adjacent_3A_Adjacent_Line_Role_3        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Adjacent_3A_Adjacent_Line_Role_3 Value Table for Signal Adjacent_Line_Role_3 in Message Lanes_Adjacent_3A (0x788)
 *
 * Enum values defined for \ref SIG_Lanes_Adjacent_3A_Adjacent_Line_Role_3.
 *
 * @ingroup SIG_Lanes_Adjacent_3A_Adjacent_Line_Role_3
 */

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Line_Role_3 entry RIGHT__RIGHT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Line_Role_3
 */
#define Lanes_Adjacent_3A_Adjacent_Line_Role_3_RIGHT__RIGHT_LANEMARK    4

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Line_Role_3 entry RIGHT__LEFT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Line_Role_3
 */
#define Lanes_Adjacent_3A_Adjacent_Line_Role_3_RIGHT__LEFT_LANEMARK    3

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Line_Role_3 entry LEFT__RIGHT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Line_Role_3
 */
#define Lanes_Adjacent_3A_Adjacent_Line_Role_3_LEFT__RIGHT_LANEMARK    2

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Line_Role_3 entry LEFT__LEFT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Line_Role_3
 */
#define Lanes_Adjacent_3A_Adjacent_Line_Role_3_LEFT__LEFT_LANEMARK    1

/**
 * Value table Lanes_Adjacent_3A_Adjacent_Line_Role_3 entry NONE.
 *
 * @ingroup ENUM_Lanes_Adjacent_3A_Adjacent_Line_Role_3
 */
#define Lanes_Adjacent_3A_Adjacent_Line_Role_3_NONE                0

/**
 * @defgroup SIG_Lanes_Adjacent_3A_Reserved Signal Reserved of Message Lanes_Adjacent_3A (0x788)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3A
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3A_Reserved and \ref GET_Lanes_Adjacent_3A_Reserved instead.
 */
#define SIG_Lanes_Adjacent_3A_Reserved              0, 0, 45, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3A_Reserved or \ref INIT_Lanes_Adjacent_3A instead.
 */
#define SETUP_Lanes_Adjacent_3A_Reserved            0, 0, 45, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3A_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3A_Reserved(buf, val) { \
	buf[5] &= ~(0x07 << 5); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3A_Reserved(buf) \
	SET_Lanes_Adjacent_3A_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3A_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Adjacent_3A_Reserved            0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Adjacent_3A_Reserved              0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Adjacent_3A_Reserved              0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Adjacent_3A_Reserved              0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_3B_Adjacent_Line_C0_3 Signal Adjacent_Line_C0_3 of Message Lanes_Adjacent_3B (0x789)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3B
 * @{
 */

/**
 * Signal Adjacent_Line_C0_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3B_Adjacent_Line_C0_3 and \ref GET_Lanes_Adjacent_3B_Adjacent_Line_C0_3 instead.
 */
#define SIG_Lanes_Adjacent_3B_Adjacent_Line_C0_3        0, 0, 0, 11

/**
 * Signal Adjacent_Line_C0_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C0_3 or \ref INIT_Lanes_Adjacent_3B instead.
 */
#define SETUP_Lanes_Adjacent_3B_Adjacent_Line_C0_3      0, 0, 0, 11, 0

/**
 * Get signal Adjacent_Line_C0_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3B_Adjacent_Line_C0_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x07) << 8) \
)

/**
 * Set signal Adjacent_Line_C0_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3B_Adjacent_Line_C0_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x07) << 0; \
}

/**
 * Set signal Adjacent_Line_C0_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C0_3(buf) \
	SET_Lanes_Adjacent_3B_Adjacent_Line_C0_3(buf, 0)

/**
 * Signal Adjacent_Line_C0_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3B_Adjacent_Line_C0_3(x, fmt) \
	((x) * fmt / 100 + fmt * (-10))

/**
 * Signal Adjacent_Line_C0_3 raw initial value.
 */
#define START_Lanes_Adjacent_3B_Adjacent_Line_C0_3      0

/**
 * Signal Adjacent_Line_C0_3 raw minimum value.
 */
#define MIN_Lanes_Adjacent_3B_Adjacent_Line_C0_3        0

/**
 * Signal Adjacent_Line_C0_3 raw maximum value.
 */
#define MAX_Lanes_Adjacent_3B_Adjacent_Line_C0_3        2000

/**
 * Signal Adjacent_Line_C0_3 raw offset value.
 */
#define OFF_Lanes_Adjacent_3B_Adjacent_Line_C0_3        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_3B_Adjacent_Line_C1_3 Signal Adjacent_Line_C1_3 of Message Lanes_Adjacent_3B (0x789)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3B
 * @{
 */

/**
 * Signal Adjacent_Line_C1_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3B_Adjacent_Line_C1_3 and \ref GET_Lanes_Adjacent_3B_Adjacent_Line_C1_3 instead.
 */
#define SIG_Lanes_Adjacent_3B_Adjacent_Line_C1_3        0, 0, 11, 10

/**
 * Signal Adjacent_Line_C1_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C1_3 or \ref INIT_Lanes_Adjacent_3B instead.
 */
#define SETUP_Lanes_Adjacent_3B_Adjacent_Line_C1_3      0, 0, 11, 10, 0

/**
 * Get signal Adjacent_Line_C1_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3B_Adjacent_Line_C1_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x1f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 5) \
)

/**
 * Set signal Adjacent_Line_C1_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3B_Adjacent_Line_C1_3(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
	buf[2] &= ~(0x1f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C1_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C1_3(buf) \
	SET_Lanes_Adjacent_3B_Adjacent_Line_C1_3(buf, 0)

/**
 * Signal Adjacent_Line_C1_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3B_Adjacent_Line_C1_3(x, fmt) \
	((x) * fmt * 977 / 1000000 + fmt * (-383325831) / 1073741824)

/**
 * Signal Adjacent_Line_C1_3 raw initial value.
 */
#define START_Lanes_Adjacent_3B_Adjacent_Line_C1_3      0

/**
 * Signal Adjacent_Line_C1_3 raw minimum value.
 */
#define MIN_Lanes_Adjacent_3B_Adjacent_Line_C1_3        0

/**
 * Signal Adjacent_Line_C1_3 raw maximum value.
 */
#define MAX_Lanes_Adjacent_3B_Adjacent_Line_C1_3        731

/**
 * Signal Adjacent_Line_C1_3 raw offset value.
 */
#define OFF_Lanes_Adjacent_3B_Adjacent_Line_C1_3        -365

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_3B_Adjacent_Line_C2_3 Signal Adjacent_Line_C2_3 of Message Lanes_Adjacent_3B (0x789)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3B
 * @{
 */

/**
 * Signal Adjacent_Line_C2_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3B_Adjacent_Line_C2_3 and \ref GET_Lanes_Adjacent_3B_Adjacent_Line_C2_3 instead.
 */
#define SIG_Lanes_Adjacent_3B_Adjacent_Line_C2_3        0, 0, 21, 16

/**
 * Signal Adjacent_Line_C2_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C2_3 or \ref INIT_Lanes_Adjacent_3B instead.
 */
#define SETUP_Lanes_Adjacent_3B_Adjacent_Line_C2_3      0, 0, 21, 16, 0

/**
 * Get signal Adjacent_Line_C2_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3B_Adjacent_Line_C2_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal Adjacent_Line_C2_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3B_Adjacent_Line_C2_3(buf, val) { \
	buf[2] &= ~(0x07 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C2_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C2_3(buf) \
	SET_Lanes_Adjacent_3B_Adjacent_Line_C2_3(buf, 0)

/**
 * Signal Adjacent_Line_C2_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3B_Adjacent_Line_C2_3(x, fmt) \
	((x) * fmt * 500 / 511770726 + fmt * (-4) / 125)

/**
 * Signal Adjacent_Line_C2_3 raw initial value.
 */
#define START_Lanes_Adjacent_3B_Adjacent_Line_C2_3      0

/**
 * Signal Adjacent_Line_C2_3 raw minimum value.
 */
#define MIN_Lanes_Adjacent_3B_Adjacent_Line_C2_3        0

/**
 * Signal Adjacent_Line_C2_3 raw maximum value.
 */
#define MAX_Lanes_Adjacent_3B_Adjacent_Line_C2_3        65507

/**
 * Signal Adjacent_Line_C2_3 raw offset value.
 */
#define OFF_Lanes_Adjacent_3B_Adjacent_Line_C2_3        -32753

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_3B_Adjacent_Line_C3_3 Signal Adjacent_Line_C3_3 of Message Lanes_Adjacent_3B (0x789)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3B
 * @{
 */

/**
 * Signal Adjacent_Line_C3_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3B_Adjacent_Line_C3_3 and \ref GET_Lanes_Adjacent_3B_Adjacent_Line_C3_3 instead.
 */
#define SIG_Lanes_Adjacent_3B_Adjacent_Line_C3_3        0, 0, 37, 16

/**
 * Signal Adjacent_Line_C3_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C3_3 or \ref INIT_Lanes_Adjacent_3B instead.
 */
#define SETUP_Lanes_Adjacent_3B_Adjacent_Line_C3_3      0, 0, 37, 16, 0

/**
 * Get signal Adjacent_Line_C3_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3B_Adjacent_Line_C3_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal Adjacent_Line_C3_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3B_Adjacent_Line_C3_3(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C3_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3B_Adjacent_Line_C3_3(buf) \
	SET_Lanes_Adjacent_3B_Adjacent_Line_C3_3(buf, 0)

/**
 * Signal Adjacent_Line_C3_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3B_Adjacent_Line_C3_3(x, fmt) \
	((x) * fmt / 268435456 + fmt * 61 / (-500000))

/**
 * Signal Adjacent_Line_C3_3 raw initial value.
 */
#define START_Lanes_Adjacent_3B_Adjacent_Line_C3_3      0

/**
 * Signal Adjacent_Line_C3_3 raw minimum value.
 */
#define MIN_Lanes_Adjacent_3B_Adjacent_Line_C3_3        0

/**
 * Signal Adjacent_Line_C3_3 raw maximum value.
 */
#define MAX_Lanes_Adjacent_3B_Adjacent_Line_C3_3        65416

/**
 * Signal Adjacent_Line_C3_3 raw offset value.
 */
#define OFF_Lanes_Adjacent_3B_Adjacent_Line_C3_3        -32708

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_3B_Reserved Signal Reserved of Message Lanes_Adjacent_3B (0x789)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_3B
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_3B_Reserved and \ref GET_Lanes_Adjacent_3B_Reserved instead.
 */
#define SIG_Lanes_Adjacent_3B_Reserved              0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_3B_Reserved or \ref INIT_Lanes_Adjacent_3B instead.
 */
#define SETUP_Lanes_Adjacent_3B_Reserved            0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_3B_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_3B_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_3B_Reserved(buf) \
	SET_Lanes_Adjacent_3B_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_3B_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Adjacent_3B_Reserved            0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Adjacent_3B_Reserved              0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Adjacent_3B_Reserved              0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Adjacent_3B_Reserved              0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_4A_Adjacent_Type_4 Signal Adjacent_Type_4 of Message Lanes_Adjacent_4A (0x78a)
 *
 * ENUM of Lane Mark Type Classification
 *
 * Contains the value table \ref ENUM_Lanes_Adjacent_4A_Adjacent_Type_4.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4A
 * @{
 */

/**
 * Signal Adjacent_Type_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4A_Adjacent_Type_4 and \ref GET_Lanes_Adjacent_4A_Adjacent_Type_4 instead.
 */
#define SIG_Lanes_Adjacent_4A_Adjacent_Type_4        0, 0, 0, 4

/**
 * Signal Adjacent_Type_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4A_Adjacent_Type_4 or \ref INIT_Lanes_Adjacent_4A instead.
 */
#define SETUP_Lanes_Adjacent_4A_Adjacent_Type_4      0, 0, 0, 4, 0

/**
 * Get signal Adjacent_Type_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4A_Adjacent_Type_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Adjacent_Type_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4A_Adjacent_Type_4(buf, val) { \
	buf[0] &= ~(0x0f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Adjacent_Type_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4A_Adjacent_Type_4(buf) \
	SET_Lanes_Adjacent_4A_Adjacent_Type_4(buf, 0)

/**
 * Signal Adjacent_Type_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4A_Adjacent_Type_4(x, fmt) \
	((x) * fmt)

/**
 * Signal Adjacent_Type_4 raw initial value.
 */
#define START_Lanes_Adjacent_4A_Adjacent_Type_4      0

/**
 * Signal Adjacent_Type_4 raw minimum value.
 */
#define MIN_Lanes_Adjacent_4A_Adjacent_Type_4        0

/**
 * Signal Adjacent_Type_4 raw maximum value.
 */
#define MAX_Lanes_Adjacent_4A_Adjacent_Type_4        15

/**
 * Signal Adjacent_Type_4 raw offset value.
 */
#define OFF_Lanes_Adjacent_4A_Adjacent_Type_4        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Adjacent_4A_Adjacent_Type_4 Value Table for Signal Adjacent_Type_4 in Message Lanes_Adjacent_4A (0x78a)
 *
 * Enum values defined for \ref SIG_Lanes_Adjacent_4A_Adjacent_Type_4.
 *
 * @ingroup SIG_Lanes_Adjacent_4A_Adjacent_Type_4
 */

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Type_4 entry HOV_LANE.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Type_4
 */
#define Lanes_Adjacent_4A_Adjacent_Type_4_HOV_LANE            6

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Type_4 entry DECELERATION.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Type_4
 */
#define Lanes_Adjacent_4A_Adjacent_Type_4_DECELERATION        5

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Type_4 entry BOTTS.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Type_4
 */
#define Lanes_Adjacent_4A_Adjacent_Type_4_BOTTS               4

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Type_4 entry DLM.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Type_4
 */
#define Lanes_Adjacent_4A_Adjacent_Type_4_DLM                 3

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Type_4 entry DASHED.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Type_4
 */
#define Lanes_Adjacent_4A_Adjacent_Type_4_DASHED              2

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Type_4 entry SOLID.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Type_4
 */
#define Lanes_Adjacent_4A_Adjacent_Type_4_SOLID               1

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Type_4 entry UNDECIDED.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Type_4
 */
#define Lanes_Adjacent_4A_Adjacent_Type_4_UNDECIDED           0

/**
 * @defgroup SIG_Lanes_Adjacent_4A_Adjacent_Confidence_4 Signal Adjacent_Confidence_4 of Message Lanes_Adjacent_4A (0x78a)
 *
 * Confidence of lane mark 
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4A
 * @{
 */

/**
 * Signal Adjacent_Confidence_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4A_Adjacent_Confidence_4 and \ref GET_Lanes_Adjacent_4A_Adjacent_Confidence_4 instead.
 */
#define SIG_Lanes_Adjacent_4A_Adjacent_Confidence_4        0, 0, 4, 7

/**
 * Signal Adjacent_Confidence_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4A_Adjacent_Confidence_4 or \ref INIT_Lanes_Adjacent_4A instead.
 */
#define SETUP_Lanes_Adjacent_4A_Adjacent_Confidence_4      0, 0, 4, 7, 0

/**
 * Get signal Adjacent_Confidence_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4A_Adjacent_Confidence_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 4) & 0x0f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x07) << 4) \
)

/**
 * Set signal Adjacent_Confidence_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4A_Adjacent_Confidence_4(buf, val) { \
	buf[0] &= ~(0x0f << 4); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= (((uint8_t)(val) >> 4) & 0x07) << 0; \
}

/**
 * Set signal Adjacent_Confidence_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4A_Adjacent_Confidence_4(buf) \
	SET_Lanes_Adjacent_4A_Adjacent_Confidence_4(buf, 0)

/**
 * Signal Adjacent_Confidence_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4A_Adjacent_Confidence_4(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_Confidence_4 raw initial value.
 */
#define START_Lanes_Adjacent_4A_Adjacent_Confidence_4      0

/**
 * Signal Adjacent_Confidence_4 raw minimum value.
 */
#define MIN_Lanes_Adjacent_4A_Adjacent_Confidence_4        0

/**
 * Signal Adjacent_Confidence_4 raw maximum value.
 */
#define MAX_Lanes_Adjacent_4A_Adjacent_Confidence_4        100

/**
 * Signal Adjacent_Confidence_4 raw offset value.
 */
#define OFF_Lanes_Adjacent_4A_Adjacent_Confidence_4        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4 Signal Adjacent_View_Range_Start_4 of Message Lanes_Adjacent_4A (0x78a)
 *
 * Start of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4A
 * @{
 */

/**
 * Signal Adjacent_View_Range_Start_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4 and \ref GET_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4 instead.
 */
#define SIG_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4        0, 0, 11, 15

/**
 * Signal Adjacent_View_Range_Start_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4 or \ref INIT_Lanes_Adjacent_4A instead.
 */
#define SETUP_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4      0, 0, 11, 15, 0

/**
 * Get signal Adjacent_View_Range_Start_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x1f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 5) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 13) \
)

/**
 * Set signal Adjacent_View_Range_Start_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x03) << 0; \
}

/**
 * Set signal Adjacent_View_Range_Start_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4(buf) \
	SET_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4(buf, 0)

/**
 * Signal Adjacent_View_Range_Start_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_View_Range_Start_4 raw initial value.
 */
#define START_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4      0

/**
 * Signal Adjacent_View_Range_Start_4 raw minimum value.
 */
#define MIN_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4        0

/**
 * Signal Adjacent_View_Range_Start_4 raw maximum value.
 */
#define MAX_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4        20000

/**
 * Signal Adjacent_View_Range_Start_4 raw offset value.
 */
#define OFF_Lanes_Adjacent_4A_Adjacent_View_Range_Start_4        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_4A_Adjacent_View_Range_End_4 Signal Adjacent_View_Range_End_4 of Message Lanes_Adjacent_4A (0x78a)
 *
 * End of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4A
 * @{
 */

/**
 * Signal Adjacent_View_Range_End_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4A_Adjacent_View_Range_End_4 and \ref GET_Lanes_Adjacent_4A_Adjacent_View_Range_End_4 instead.
 */
#define SIG_Lanes_Adjacent_4A_Adjacent_View_Range_End_4        0, 0, 26, 15

/**
 * Signal Adjacent_View_Range_End_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4A_Adjacent_View_Range_End_4 or \ref INIT_Lanes_Adjacent_4A instead.
 */
#define SETUP_Lanes_Adjacent_4A_Adjacent_View_Range_End_4      0, 0, 26, 15, 0

/**
 * Get signal Adjacent_View_Range_End_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4A_Adjacent_View_Range_End_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 6) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x01) << 14) \
)

/**
 * Set signal Adjacent_View_Range_End_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4A_Adjacent_View_Range_End_4(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0xff) << 0; \
	buf[5] &= ~(0x01 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 14) & 0x01) << 0; \
}

/**
 * Set signal Adjacent_View_Range_End_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4A_Adjacent_View_Range_End_4(buf) \
	SET_Lanes_Adjacent_4A_Adjacent_View_Range_End_4(buf, 0)

/**
 * Signal Adjacent_View_Range_End_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4A_Adjacent_View_Range_End_4(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal Adjacent_View_Range_End_4 raw initial value.
 */
#define START_Lanes_Adjacent_4A_Adjacent_View_Range_End_4      0

/**
 * Signal Adjacent_View_Range_End_4 raw minimum value.
 */
#define MIN_Lanes_Adjacent_4A_Adjacent_View_Range_End_4        0

/**
 * Signal Adjacent_View_Range_End_4 raw maximum value.
 */
#define MAX_Lanes_Adjacent_4A_Adjacent_View_Range_End_4        20000

/**
 * Signal Adjacent_View_Range_End_4 raw offset value.
 */
#define OFF_Lanes_Adjacent_4A_Adjacent_View_Range_End_4        0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_4A_Adjacent_Line_Role_4 Signal Adjacent_Line_Role_4 of Message Lanes_Adjacent_4A (0x78a)
 *
 * The role of the lane mark relative to the host vehicle.  Commonly the host left boundary is also the right boundary of the next left lane (and the host right boundary is also the left boundary of the next right lane)  RIGHT_RIGHT_LANEMARK represents the ne
 *
 * Contains the value table \ref ENUM_Lanes_Adjacent_4A_Adjacent_Line_Role_4.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4A
 * @{
 */

/**
 * Signal Adjacent_Line_Role_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4A_Adjacent_Line_Role_4 and \ref GET_Lanes_Adjacent_4A_Adjacent_Line_Role_4 instead.
 */
#define SIG_Lanes_Adjacent_4A_Adjacent_Line_Role_4        0, 0, 41, 4

/**
 * Signal Adjacent_Line_Role_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4A_Adjacent_Line_Role_4 or \ref INIT_Lanes_Adjacent_4A instead.
 */
#define SETUP_Lanes_Adjacent_4A_Adjacent_Line_Role_4      0, 0, 41, 4, 0

/**
 * Get signal Adjacent_Line_Role_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4A_Adjacent_Line_Role_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 1) & 0x0f) << 0) \
)

/**
 * Set signal Adjacent_Line_Role_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4A_Adjacent_Line_Role_4(buf, val) { \
	buf[5] &= ~(0x0f << 1); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x0f) << 1; \
}

/**
 * Set signal Adjacent_Line_Role_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4A_Adjacent_Line_Role_4(buf) \
	SET_Lanes_Adjacent_4A_Adjacent_Line_Role_4(buf, 0)

/**
 * Signal Adjacent_Line_Role_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4A_Adjacent_Line_Role_4(x, fmt) \
	((x) * fmt)

/**
 * Signal Adjacent_Line_Role_4 raw initial value.
 */
#define START_Lanes_Adjacent_4A_Adjacent_Line_Role_4      0

/**
 * Signal Adjacent_Line_Role_4 raw minimum value.
 */
#define MIN_Lanes_Adjacent_4A_Adjacent_Line_Role_4        0

/**
 * Signal Adjacent_Line_Role_4 raw maximum value.
 */
#define MAX_Lanes_Adjacent_4A_Adjacent_Line_Role_4        8

/**
 * Signal Adjacent_Line_Role_4 raw offset value.
 */
#define OFF_Lanes_Adjacent_4A_Adjacent_Line_Role_4        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Adjacent_4A_Adjacent_Line_Role_4 Value Table for Signal Adjacent_Line_Role_4 in Message Lanes_Adjacent_4A (0x78a)
 *
 * Enum values defined for \ref SIG_Lanes_Adjacent_4A_Adjacent_Line_Role_4.
 *
 * @ingroup SIG_Lanes_Adjacent_4A_Adjacent_Line_Role_4
 */

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Line_Role_4 entry RIGHT__RIGHT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Line_Role_4
 */
#define Lanes_Adjacent_4A_Adjacent_Line_Role_4_RIGHT__RIGHT_LANEMARK    4

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Line_Role_4 entry RIGHT__LEFT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Line_Role_4
 */
#define Lanes_Adjacent_4A_Adjacent_Line_Role_4_RIGHT__LEFT_LANEMARK    3

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Line_Role_4 entry LEFT__RIGHT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Line_Role_4
 */
#define Lanes_Adjacent_4A_Adjacent_Line_Role_4_LEFT__RIGHT_LANEMARK    2

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Line_Role_4 entry LEFT__LEFT_LANEMARK.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Line_Role_4
 */
#define Lanes_Adjacent_4A_Adjacent_Line_Role_4_LEFT__LEFT_LANEMARK    1

/**
 * Value table Lanes_Adjacent_4A_Adjacent_Line_Role_4 entry NONE.
 *
 * @ingroup ENUM_Lanes_Adjacent_4A_Adjacent_Line_Role_4
 */
#define Lanes_Adjacent_4A_Adjacent_Line_Role_4_NONE                0

/**
 * @defgroup SIG_Lanes_Adjacent_4A_Reserved Signal Reserved of Message Lanes_Adjacent_4A (0x78a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4A
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4A_Reserved and \ref GET_Lanes_Adjacent_4A_Reserved instead.
 */
#define SIG_Lanes_Adjacent_4A_Reserved              0, 0, 45, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4A_Reserved or \ref INIT_Lanes_Adjacent_4A instead.
 */
#define SETUP_Lanes_Adjacent_4A_Reserved            0, 0, 45, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4A_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4A_Reserved(buf, val) { \
	buf[5] &= ~(0x07 << 5); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4A_Reserved(buf) \
	SET_Lanes_Adjacent_4A_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4A_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Adjacent_4A_Reserved            0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Adjacent_4A_Reserved              0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Adjacent_4A_Reserved              0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Adjacent_4A_Reserved              0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_4B_Adjacent_Line_C0_4 Signal Adjacent_Line_C0_4 of Message Lanes_Adjacent_4B (0x78b)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4B
 * @{
 */

/**
 * Signal Adjacent_Line_C0_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4B_Adjacent_Line_C0_4 and \ref GET_Lanes_Adjacent_4B_Adjacent_Line_C0_4 instead.
 */
#define SIG_Lanes_Adjacent_4B_Adjacent_Line_C0_4        0, 0, 0, 11

/**
 * Signal Adjacent_Line_C0_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C0_4 or \ref INIT_Lanes_Adjacent_4B instead.
 */
#define SETUP_Lanes_Adjacent_4B_Adjacent_Line_C0_4      0, 0, 0, 11, 0

/**
 * Get signal Adjacent_Line_C0_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4B_Adjacent_Line_C0_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x07) << 8) \
)

/**
 * Set signal Adjacent_Line_C0_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4B_Adjacent_Line_C0_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x07) << 0; \
}

/**
 * Set signal Adjacent_Line_C0_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C0_4(buf) \
	SET_Lanes_Adjacent_4B_Adjacent_Line_C0_4(buf, 0)

/**
 * Signal Adjacent_Line_C0_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4B_Adjacent_Line_C0_4(x, fmt) \
	((x) * fmt / 100 + fmt * (-10))

/**
 * Signal Adjacent_Line_C0_4 raw initial value.
 */
#define START_Lanes_Adjacent_4B_Adjacent_Line_C0_4      0

/**
 * Signal Adjacent_Line_C0_4 raw minimum value.
 */
#define MIN_Lanes_Adjacent_4B_Adjacent_Line_C0_4        0

/**
 * Signal Adjacent_Line_C0_4 raw maximum value.
 */
#define MAX_Lanes_Adjacent_4B_Adjacent_Line_C0_4        2000

/**
 * Signal Adjacent_Line_C0_4 raw offset value.
 */
#define OFF_Lanes_Adjacent_4B_Adjacent_Line_C0_4        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_4B_Adjacent_Line_C1_4 Signal Adjacent_Line_C1_4 of Message Lanes_Adjacent_4B (0x78b)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4B
 * @{
 */

/**
 * Signal Adjacent_Line_C1_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4B_Adjacent_Line_C1_4 and \ref GET_Lanes_Adjacent_4B_Adjacent_Line_C1_4 instead.
 */
#define SIG_Lanes_Adjacent_4B_Adjacent_Line_C1_4        0, 0, 11, 10

/**
 * Signal Adjacent_Line_C1_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C1_4 or \ref INIT_Lanes_Adjacent_4B instead.
 */
#define SETUP_Lanes_Adjacent_4B_Adjacent_Line_C1_4      0, 0, 11, 10, 0

/**
 * Get signal Adjacent_Line_C1_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4B_Adjacent_Line_C1_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x1f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 5) \
)

/**
 * Set signal Adjacent_Line_C1_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4B_Adjacent_Line_C1_4(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
	buf[2] &= ~(0x1f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C1_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C1_4(buf) \
	SET_Lanes_Adjacent_4B_Adjacent_Line_C1_4(buf, 0)

/**
 * Signal Adjacent_Line_C1_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4B_Adjacent_Line_C1_4(x, fmt) \
	((x) * fmt * 977 / 1000000 + fmt * (-383325831) / 1073741824)

/**
 * Signal Adjacent_Line_C1_4 raw initial value.
 */
#define START_Lanes_Adjacent_4B_Adjacent_Line_C1_4      0

/**
 * Signal Adjacent_Line_C1_4 raw minimum value.
 */
#define MIN_Lanes_Adjacent_4B_Adjacent_Line_C1_4        0

/**
 * Signal Adjacent_Line_C1_4 raw maximum value.
 */
#define MAX_Lanes_Adjacent_4B_Adjacent_Line_C1_4        731

/**
 * Signal Adjacent_Line_C1_4 raw offset value.
 */
#define OFF_Lanes_Adjacent_4B_Adjacent_Line_C1_4        -365

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_4B_Adjacent_Line_C2_4 Signal Adjacent_Line_C2_4 of Message Lanes_Adjacent_4B (0x78b)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4B
 * @{
 */

/**
 * Signal Adjacent_Line_C2_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4B_Adjacent_Line_C2_4 and \ref GET_Lanes_Adjacent_4B_Adjacent_Line_C2_4 instead.
 */
#define SIG_Lanes_Adjacent_4B_Adjacent_Line_C2_4        0, 0, 21, 16

/**
 * Signal Adjacent_Line_C2_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C2_4 or \ref INIT_Lanes_Adjacent_4B instead.
 */
#define SETUP_Lanes_Adjacent_4B_Adjacent_Line_C2_4      0, 0, 21, 16, 0

/**
 * Get signal Adjacent_Line_C2_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4B_Adjacent_Line_C2_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal Adjacent_Line_C2_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4B_Adjacent_Line_C2_4(buf, val) { \
	buf[2] &= ~(0x07 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C2_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C2_4(buf) \
	SET_Lanes_Adjacent_4B_Adjacent_Line_C2_4(buf, 0)

/**
 * Signal Adjacent_Line_C2_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4B_Adjacent_Line_C2_4(x, fmt) \
	((x) * fmt * 500 / 511770726 + fmt * (-4) / 125)

/**
 * Signal Adjacent_Line_C2_4 raw initial value.
 */
#define START_Lanes_Adjacent_4B_Adjacent_Line_C2_4      0

/**
 * Signal Adjacent_Line_C2_4 raw minimum value.
 */
#define MIN_Lanes_Adjacent_4B_Adjacent_Line_C2_4        0

/**
 * Signal Adjacent_Line_C2_4 raw maximum value.
 */
#define MAX_Lanes_Adjacent_4B_Adjacent_Line_C2_4        65507

/**
 * Signal Adjacent_Line_C2_4 raw offset value.
 */
#define OFF_Lanes_Adjacent_4B_Adjacent_Line_C2_4        -32753

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_4B_Adjacent_Line_C3_4 Signal Adjacent_Line_C3_4 of Message Lanes_Adjacent_4B (0x78b)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4B
 * @{
 */

/**
 * Signal Adjacent_Line_C3_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4B_Adjacent_Line_C3_4 and \ref GET_Lanes_Adjacent_4B_Adjacent_Line_C3_4 instead.
 */
#define SIG_Lanes_Adjacent_4B_Adjacent_Line_C3_4        0, 0, 37, 16

/**
 * Signal Adjacent_Line_C3_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C3_4 or \ref INIT_Lanes_Adjacent_4B instead.
 */
#define SETUP_Lanes_Adjacent_4B_Adjacent_Line_C3_4      0, 0, 37, 16, 0

/**
 * Get signal Adjacent_Line_C3_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4B_Adjacent_Line_C3_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal Adjacent_Line_C3_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4B_Adjacent_Line_C3_4(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal Adjacent_Line_C3_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4B_Adjacent_Line_C3_4(buf) \
	SET_Lanes_Adjacent_4B_Adjacent_Line_C3_4(buf, 0)

/**
 * Signal Adjacent_Line_C3_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4B_Adjacent_Line_C3_4(x, fmt) \
	((x) * fmt / 268435456 + fmt * 61 / (-500000))

/**
 * Signal Adjacent_Line_C3_4 raw initial value.
 */
#define START_Lanes_Adjacent_4B_Adjacent_Line_C3_4      0

/**
 * Signal Adjacent_Line_C3_4 raw minimum value.
 */
#define MIN_Lanes_Adjacent_4B_Adjacent_Line_C3_4        0

/**
 * Signal Adjacent_Line_C3_4 raw maximum value.
 */
#define MAX_Lanes_Adjacent_4B_Adjacent_Line_C3_4        65416

/**
 * Signal Adjacent_Line_C3_4 raw offset value.
 */
#define OFF_Lanes_Adjacent_4B_Adjacent_Line_C3_4        -32708

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Adjacent_4B_Reserved Signal Reserved of Message Lanes_Adjacent_4B (0x78b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Adjacent_4B
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Adjacent_4B_Reserved and \ref GET_Lanes_Adjacent_4B_Reserved instead.
 */
#define SIG_Lanes_Adjacent_4B_Reserved              0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Adjacent_4B_Reserved or \ref INIT_Lanes_Adjacent_4B instead.
 */
#define SETUP_Lanes_Adjacent_4B_Reserved            0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Adjacent_4B_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Adjacent_4B_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Adjacent_4B_Reserved(buf) \
	SET_Lanes_Adjacent_4B_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Adjacent_4B_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Adjacent_4B_Reserved            0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Adjacent_4B_Reserved              0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Adjacent_4B_Reserved              0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Adjacent_4B_Reserved              0

/**
 * @}
 */
#endif
