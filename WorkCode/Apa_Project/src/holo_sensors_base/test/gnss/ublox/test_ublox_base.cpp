#include <gtest/gtest.h>
#include <holo/sensors/gnss/ublox/ublox.h>

using namespace holo;
using namespace holo::sensors::ublox;

template <typename T>
class UbloxDriverTest : public UbloxDriverBaseT<T>
{
public:
    UbloxDriverTest() : UbloxDriverBaseT<T>()
    {
    }
    void ParseData(const T&)
    {
    }
};

static uint8_t nav_pvt_msg[100] = {
    0xB5, 0x62, 0x01, 0x07, 0x5C, 0x00, 0x68, 0x63, 0x74, 0x0B, 0xE3, 0x07, 0x06, 0x12, 0x05, 0x16, 0x27,
    0x37, 0x03, 0x00, 0x00, 0x00, 0xC8, 0x07, 0xFD, 0xFF, 0x03, 0x01, 0xEA, 0x20, 0x96, 0xDE, 0x71, 0x45,
    0x21, 0xB1, 0xDD, 0x17, 0x76, 0x59, 0x00, 0x00, 0x77, 0x79, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x36,
    0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x0E, 0xEC, 0x01, 0x01, 0x58, 0x00, 0x00,
    0x00, 0xB8, 0x41, 0x47, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x06};

static uint8_t rxm_rawx_msg[824] = {
    0xB5, 0x62, 0x02, 0x15, 0x30, 0x03, 0x75, 0x93, 0x18, 0x04, 0x98, 0x75, 0x07, 0x41, 0x0A, 0x08, 0x12, 0x19, 0x01,
    0x01, 0x1A, 0x63, 0x48, 0xC1, 0xED, 0x52, 0x28, 0x5D, 0x78, 0x41, 0x7C, 0xF9, 0x6C, 0x04, 0x0F, 0x01, 0xA0, 0x41,
    0x5D, 0x41, 0x93, 0xC5, 0x02, 0x18, 0x00, 0x00, 0xE8, 0xA8, 0x1D, 0x07, 0x05, 0x07, 0x07, 0x00, 0x3F, 0x99, 0xAC,
    0xED, 0x70, 0x15, 0x75, 0x41, 0xA6, 0xC0, 0x12, 0x91, 0xEF, 0xB2, 0x9B, 0x41, 0x27, 0xEE, 0x7D, 0xC5, 0x00, 0x0B,
    0x00, 0x00, 0xF4, 0xFB, 0x2E, 0x03, 0x01, 0x05, 0x0F, 0x00, 0x64, 0xB8, 0x4C, 0x5A, 0x69, 0x8C, 0x75, 0x41, 0xE2,
    0xA9, 0xEA, 0x13, 0x3C, 0x4F, 0x9C, 0x41, 0x71, 0x51, 0x2B, 0xC5, 0x02, 0x0B, 0x00, 0x00, 0xF4, 0xFB, 0x2D, 0x04,
    0x02, 0x06, 0x07, 0x00, 0x33, 0xCD, 0x32, 0x35, 0x65, 0x0A, 0x78, 0x41, 0x76, 0xBB, 0xE0, 0x32, 0x64, 0x95, 0x9F,
    0x41, 0xC8, 0xCC, 0xE2, 0x44, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x17, 0x09, 0x0F, 0x0C, 0x01, 0x00, 0x89, 0x28,
    0x04, 0x9A, 0xDD, 0x3B, 0x82, 0x41, 0xF4, 0x7A, 0x36, 0x25, 0x73, 0xF4, 0xA7, 0x41, 0x0E, 0x48, 0xD1, 0xC4, 0x05,
    0x07, 0x00, 0x00, 0xF4, 0xFB, 0x27, 0x04, 0x02, 0x07, 0x07, 0x00, 0x15, 0x03, 0x27, 0xCC, 0xAC, 0xB7, 0x76, 0x41,
    0x42, 0x65, 0x44, 0x26, 0x65, 0xD8, 0x9D, 0x41, 0x33, 0xAD, 0x95, 0xC5, 0x00, 0x1E, 0x00, 0x00, 0xF4, 0xFB, 0x22,
    0x05, 0x05, 0x08, 0x0F, 0x00, 0x96, 0x6C, 0x80, 0x49, 0x9D, 0x8C, 0x81, 0x41, 0x21, 0x3E, 0xDF, 0x35, 0x8E, 0xD8,
    0xA6, 0x41, 0x8E, 0x1E, 0xB6, 0xC4, 0x03, 0x08, 0x00, 0x00, 0xF4, 0xFB, 0x2C, 0x03, 0x02, 0x06, 0x0F, 0x00, 0x66,
    0x32, 0x32, 0x7B, 0xEE, 0x40, 0x82, 0x41, 0x8F, 0x79, 0xFA, 0x94, 0x4B, 0xC3, 0xA7, 0x41, 0x9E, 0xAC, 0x82, 0xC4,
    0x03, 0x0D, 0x00, 0x00, 0xF4, 0xFB, 0x2D, 0x03, 0x01, 0x06, 0x0F, 0x00, 0x27, 0x32, 0x7E, 0xF2, 0x52, 0x3C, 0x76,
    0x41, 0x71, 0xD2, 0xA0, 0x23, 0x5B, 0xF2, 0x9C, 0x41, 0xC6, 0xD1, 0x49, 0xC5, 0x03, 0x1D, 0x00, 0x00, 0xF4, 0xFB,
    0x2B, 0x03, 0x02, 0x07, 0x0F, 0x00, 0x61, 0x4F, 0x8E, 0xCE, 0xB7, 0xAA, 0x81, 0x41, 0x2F, 0x77, 0xFD, 0xA3, 0xBE,
    0xFF, 0xA6, 0x41, 0xA8, 0x17, 0x1A, 0xC5, 0x03, 0x07, 0x00, 0x00, 0xF4, 0xFB, 0x2E, 0x03, 0x01, 0x06, 0x07, 0x00,
    0x80, 0xB5, 0x5C, 0x88, 0xA6, 0x80, 0x76, 0x41, 0x3C, 0x71, 0x88, 0xF0, 0x4D, 0x4B, 0x9D, 0x41, 0x90, 0x03, 0xD7,
    0xC4, 0x03, 0x1A, 0x00, 0x00, 0xF4, 0xFB, 0x28, 0x04, 0x02, 0x07, 0x0F, 0x00, 0xA3, 0xD2, 0xAD, 0xAF, 0x6A, 0x2C,
    0x74, 0x41, 0x17, 0x3F, 0x0E, 0x3D, 0x1D, 0xF8, 0x9A, 0x41, 0x08, 0xAB, 0x89, 0xC3, 0x06, 0x18, 0x00, 0x09, 0xF4,
    0xFB, 0x2E, 0x07, 0x01, 0x05, 0x0F, 0x00, 0x0D, 0x32, 0xE5, 0xF0, 0xF5, 0x8E, 0x73, 0x41, 0xC2, 0xC3, 0x0A, 0x3D,
    0xF7, 0x27, 0x9A, 0x41, 0x27, 0x09, 0x40, 0xC5, 0x06, 0x17, 0x00, 0x0A, 0xF4, 0xFB, 0x34, 0x07, 0x01, 0x04, 0x07,
    0x00, 0x6E, 0x0F, 0x47, 0xA7, 0x32, 0xFC, 0x73, 0x41, 0x49, 0xBF, 0xBA, 0x86, 0x0D, 0xA2, 0x9A, 0x41, 0x00, 0xEC,
    0xD5, 0xC0, 0x06, 0x0E, 0x00, 0x00, 0xF4, 0xFB, 0x35, 0x07, 0x01, 0x04, 0x07, 0x00, 0xB1, 0x9D, 0x15, 0xE8, 0x8A,
    0x32, 0x77, 0x41, 0x66, 0x39, 0x28, 0x93, 0x14, 0xF5, 0x9E, 0x41, 0x2D, 0x68, 0x9B, 0xC5, 0x06, 0x16, 0x00, 0x04,
    0xCC, 0x4C, 0x25, 0x07, 0x03, 0x07, 0x0F, 0x00, 0x04, 0x26, 0x1D, 0x56, 0xE5, 0xBB, 0x73, 0x41, 0x2E, 0x87, 0xE5,
    0xD6, 0x35, 0x58, 0x9A, 0x41, 0x76, 0xDD, 0x85, 0xC5, 0x06, 0x0D, 0x00, 0x05, 0xF4, 0xFB, 0x32, 0x07, 0x01, 0x05,
    0x07, 0x00, 0x7A, 0xD9, 0x28, 0x7A, 0x9D, 0xB4, 0x76, 0x41, 0x5A, 0xBB, 0xC8, 0x22, 0xD8, 0x62, 0x9E, 0x41, 0x85,
    0x55, 0xBB, 0xC4, 0x06, 0x07, 0x00, 0x0C, 0xF4, 0xFB, 0x2A, 0x07, 0x01, 0x06, 0x0F, 0x00, 0x00, 0x01, 0x25, 0x12,
    0x73, 0x7F, 0x74, 0x41, 0xDA, 0x4E, 0x14, 0x03, 0xE2, 0xED, 0x9A, 0x41, 0xB5, 0xC9, 0x69, 0xC5, 0x00, 0x01, 0x00,
    0x00, 0xF4, 0xFB, 0x31, 0x03, 0x01, 0x05, 0x07, 0x00, 0xE6, 0x3C, 0xEB, 0xBD, 0x52, 0x11, 0x78, 0x41, 0xE5, 0x34,
    0x9A, 0x34, 0x7F, 0x9E, 0x9F, 0x41, 0x0C, 0xB1, 0x88, 0xC5, 0x00, 0x08, 0x00, 0x00, 0xA4, 0x2E, 0x1B, 0x08, 0x07,
    0x08, 0x0F, 0x00, 0x9A, 0x5A, 0x94, 0xB1, 0x8B, 0xB4, 0x75, 0x41, 0xBE, 0xD0, 0x0F, 0x1D, 0xF6, 0x83, 0x9C, 0x41,
    0x00, 0xDF, 0xCB, 0x41, 0x00, 0x11, 0x00, 0x00, 0xF4, 0xFB, 0x2F, 0x03, 0x01, 0x05, 0x07, 0x00, 0x37, 0x03, 0x00,
    0x0E, 0xA5, 0xD0, 0x75, 0x41, 0x46, 0x16, 0x0A, 0x91, 0xE0, 0xA8, 0x9C, 0x41, 0x98, 0x9B, 0x0A, 0x44, 0x00, 0x03,
    0x00, 0x00, 0xF4, 0xFB, 0x2C, 0x03, 0x01, 0x06, 0x0F, 0x00, 0xAA, 0xED, 0xB8, 0x31, 0xE0, 0xD7, 0x78, 0x41, 0xFF,
    0x57, 0xFF, 0xBC, 0xAB, 0x51, 0xA0, 0x41, 0x8F, 0xE4, 0x81, 0xC5, 0x02, 0x0C, 0x00, 0x00, 0xF4, 0xFB, 0x1D, 0x07,
    0x06, 0x08, 0x07, 0x00, 0x6A, 0x52, 0xDF, 0xC7, 0x8B, 0xF3, 0x75, 0x41, 0xCA, 0x91, 0xD0, 0xA2, 0xBA, 0xD6, 0x9C,
    0x41, 0xD2, 0x0F, 0x89, 0xC4, 0x00, 0x16, 0x00, 0x00, 0xF4, 0xFB, 0x27, 0x04, 0x02, 0x07, 0x07, 0x00, 0x21, 0xB0,
    0x65, 0xF1, 0x2D, 0x88, 0x81, 0x41, 0xDB, 0x63, 0x5D, 0x2A, 0xC8, 0xD2, 0xA6, 0x41, 0x7B, 0x9F, 0xE8, 0xC4, 0x03,
    0x0A, 0x00, 0x00, 0xF4, 0xFB, 0x2D, 0x03, 0x01, 0x06, 0x07, 0x00, 0xD8, 0x23, 0xDE, 0xA0, 0xC5, 0x6C, 0x79, 0x41,
    0x92, 0x24, 0xEE, 0x6C, 0x9C, 0x8C, 0xA0, 0x41, 0x1D, 0x43, 0x3E, 0x44, 0x03, 0x18, 0x00, 0x00, 0xF4, 0xFB, 0x27,
    0x04, 0x02, 0x07, 0x07, 0x00, 0xE6, 0xCD};

TEST(UbloxDriver, ConstructorFloat)
{
    UbloxDriverTest<float> driver;
    float                  data = 0;
    EXPECT_NO_THROW(driver.ParseData(data));
    EXPECT_NO_THROW(driver.InstallGnssRawCallback(nullptr));
    EXPECT_NO_THROW(driver.InstallPositionCallback(nullptr));
    EXPECT_NO_THROW(driver.InstallPositionTranslationCallback(nullptr));
    bool r1 = driver.ParseNavPvt(0, 0);
    ASSERT_FALSE(r1);
    bool r2 = driver.ParseRxmRawx(0, 0);
    ASSERT_FALSE(r2);
}

static void PositionCallback(const holo::common::GnssPvt& input, holo::common::GnssPvt& output, bool& called)
{
    output.SetCoordinate(input.GetCoordinate());
    output.SetTimestamp(input.GetTimestamp());
    output.SetMode(input.GetMode());
    output.SetLatitude(input.GetLatitude());
    output.SetLongitude(input.GetLongitude());
    output.SetHeight(input.GetHeight());
    output.SetLatitudeCov(input.GetLatitudeCov());
    output.SetLongitudeCov(input.GetLongitudeCov());
    output.SetHeightCov(input.GetHeightCov());
    output.SetVelocityEast(input.GetVelocityEast());
    output.SetVelocityNorth(input.GetVelocityNorth());
    output.SetVelocityUp(input.GetVelocityUp());
    output.SetVelocityEastCov(input.GetVelocityEastCov());
    output.SetVelocityNorthCov(input.GetVelocityNorthCov());
    output.SetVelocityUpCov(input.GetVelocityUpCov());
    called = true;
}

static void GnssRawCallback(const holo::common::GnssRawMeasurement& input, holo::common::GnssRawMeasurement& output,
                            bool& called)
{
    output.SetGpsWeek(input.GetGpsWeek());
    output.SetGpsSec(input.GetGpsSec());
    output.SetLeapSec(input.GetLeapSec());
    output.SetSatelliteNumber(input.GetSatelliteNumber());
    output.SetPDop(input.GetPDop());
    holo::common::GnssRawMeasurement::RawMeasurementBlock raw_block;
    for (uint32_t i = 0; i < input.GetSatelliteNumber(); i++)
    {
        input.GetRawMeasurementBlock(raw_block, i);
        output.SetRawMeasurementBlock(raw_block, i);
    }
    called = true;
}

TEST(UbloxDriver, ParseNavPvt1)
{
    UbloxDriverTest<float> driver;
    holo::common::GnssPvt  position;
    bool                   called = false;
    auto handler = std::bind(&PositionCallback, std::placeholders::_1, std::ref(position), std::ref(called));
    driver.InstallPositionCallback(handler);
    bool r = driver.ParseNavPvt(nav_pvt_msg + 6, sizeof(nav_pvt_msg) - 8);
    ASSERT_TRUE(r);
    ASSERT_TRUE(called);

    float64_t lon        = (float64_t)(*((int32_t*)(nav_pvt_msg + 30))) / 1e7;
    float64_t lat        = (float64_t)(*((int32_t*)(nav_pvt_msg + 34))) / 1e7;
    float64_t lat_std    = (float64_t)(*((int32_t*)(nav_pvt_msg + 46))) / 1e3;
    float64_t lon_std    = (float64_t)(*((int32_t*)(nav_pvt_msg + 46))) / 1e3;
    float64_t height_std = (float64_t)(*((int32_t*)(nav_pvt_msg + 50))) / 1e3;
    float64_t vel_east   = (float64_t)(*((int32_t*)(nav_pvt_msg + 58))) / 1e3;
    float64_t vel_north  = (float64_t)(*((int32_t*)(nav_pvt_msg + 54))) / 1e3;
    float64_t vel_up     = -(float64_t)(*((int32_t*)(nav_pvt_msg + 62))) / 1e3;
    float64_t vel_cov    = (float64_t)(*((uint32_t*)(nav_pvt_msg + 74))) / 1e3;

    // ASSERT_FLOAT_EQ(position.GetTimestamp().GetSec(), 192177);
    ASSERT_EQ(position.GetCoordinate(), holo::common::Coordinate::Wgs84Coordinate());
    /* wait gnss status */
    ASSERT_EQ(position.GetMode(), holo::common::GnssPvt::Mode::NO_POSITION);

    float64_t alt_compare = (float64_t)(*((int32_t*)(nav_pvt_msg + 38))) / 1e3;
    ASSERT_FLOAT_EQ(position.GetLatitude(), lat);
    ASSERT_FLOAT_EQ(position.GetLongitude(), lon);
    ASSERT_FLOAT_EQ(position.GetHeight(), alt_compare);

    ASSERT_FLOAT_EQ(position.GetLatitudeCov(), lat_std);
    ASSERT_FLOAT_EQ(position.GetLongitudeCov(), lon_std);
    ASSERT_FLOAT_EQ(position.GetHeightCov(), height_std);

    ASSERT_FLOAT_EQ(position.GetVelocityEast(), vel_east);
    ASSERT_FLOAT_EQ(position.GetVelocityNorth(), vel_north);
    ASSERT_FLOAT_EQ(position.GetVelocityUp(), vel_up);

    ASSERT_FLOAT_EQ(position.GetVelocityEastCov(), vel_cov);
    ASSERT_FLOAT_EQ(position.GetVelocityNorthCov(), vel_cov);
    ASSERT_FLOAT_EQ(position.GetVelocityUpCov(), vel_cov);
}

TEST(UbloxDriver, ParseNavPvt2)
{
    UbloxDriverTest<float> driver;
    holo::common::GnssPvt  position;
    bool                   called = false;
    auto handler = std::bind(&PositionCallback, std::placeholders::_1, std::ref(position), std::ref(called));
    driver.InstallPositionTranslationCallback(handler);
    bool r = driver.ParseNavPvt(nav_pvt_msg + 6, sizeof(nav_pvt_msg) - 8);
    ASSERT_TRUE(r);
    ASSERT_TRUE(called);
}

TEST(UbloxDriver, ParseRxmRawx)
{
    UbloxDriverTest<float>           driver;
    holo::common::GnssRawMeasurement raw;
    bool                             called = false;
    auto handler1 = std::bind(&GnssRawCallback, std::placeholders::_1, std::ref(raw), std::ref(called));
    driver.InstallGnssRawCallback(handler1);
    bool r1 = driver.ParseRxmRawx(rxm_rawx_msg + 6, sizeof(rxm_rawx_msg) - 8);
    ASSERT_TRUE(r1);
    ASSERT_TRUE(called);

    ASSERT_EQ(raw.GetGpsWeek(), 2058);
    ASSERT_FLOAT_EQ(raw.GetGpsSec(), 192179);
    ASSERT_EQ(raw.GetLeapSec(), 18);
    ASSERT_EQ(raw.GetSatelliteNumber(), 25);
    ASSERT_FLOAT_EQ(raw.GetPDop(), 0);
    holo::common::GnssRawMeasurement::RawMeasurementBlock raw_block_in, raw_block_out;
    for (uint32_t i = 0; i < raw.GetSatelliteNumber(); i++)
    {
        raw.GetRawMeasurementBlock(raw_block_out, i);
        (void)std::memcpy(&raw_block_in.pseudorange_measurement, &rxm_rawx_msg[22 + i * 32], 8);
        ASSERT_FLOAT_EQ(raw_block_out.pseudorange_measurement, raw_block_in.pseudorange_measurement);
        (void)std::memcpy(&raw_block_in.carrier_phase_measurement, &rxm_rawx_msg[30 + i * 32], 8);
        ASSERT_FLOAT_EQ(raw_block_out.carrier_phase_measurement, raw_block_in.carrier_phase_measurement);
        (void)std::memcpy(&raw_block_in.doppler_measurement, &rxm_rawx_msg[38 + i * 32], 4);
        ASSERT_EQ(raw_block_out.doppler_measurement, raw_block_in.doppler_measurement);
        raw_block_in.gnss_identifier = rxm_rawx_msg[42 + i * 32];
        ASSERT_EQ(raw_block_out.gnss_identifier, raw_block_in.gnss_identifier);
        raw_block_in.satellite_identifier = rxm_rawx_msg[43 + i * 32];
        ASSERT_EQ(raw_block_out.satellite_identifier, raw_block_in.satellite_identifier);
        raw_block_in.frequence_identifier = rxm_rawx_msg[45 + i * 32];
        ASSERT_EQ(raw_block_out.frequence_identifier, raw_block_in.frequence_identifier);
        (void)std::memcpy(&raw_block_in.carrier_phase_locktime, &rxm_rawx_msg[46 + i * 32], 2);
        ASSERT_EQ(raw_block_out.carrier_phase_locktime, raw_block_in.carrier_phase_locktime);
        raw_block_in.carrier_noise_ratio = rxm_rawx_msg[48 + i * 32];
        ASSERT_EQ(raw_block_out.carrier_noise_ratio, raw_block_in.carrier_noise_ratio);
        raw_block_in.pseudorange_standard_deviation = rxm_rawx_msg[49 + i * 32];
        ASSERT_EQ(raw_block_out.pseudorange_standard_deviation, raw_block_in.pseudorange_standard_deviation);
        raw_block_in.carrier_phase_standard_deviation = rxm_rawx_msg[50 + i * 32];
        ASSERT_EQ(raw_block_out.carrier_phase_standard_deviation, raw_block_in.carrier_phase_standard_deviation);
        raw_block_in.doppler_standard_deviation = rxm_rawx_msg[51 + i * 32];
        ASSERT_EQ(raw_block_out.doppler_standard_deviation, raw_block_in.doppler_standard_deviation);
        raw_block_in.tracking_status = rxm_rawx_msg[52 + i * 32];
        ASSERT_EQ(raw_block_out.tracking_status, raw_block_in.tracking_status);
    }

    called = false;
    holo::common::GnssPvt position;
    auto handler2 = std::bind(&PositionCallback, std::placeholders::_1, std::ref(position), std::ref(called));
    driver.InstallPositionCallback(handler2);
    bool r2 = driver.ParseNavPvt(nav_pvt_msg + 6, sizeof(nav_pvt_msg) - 8);
    ASSERT_TRUE(r2);
    ASSERT_TRUE(called);

    struct tm time;
    time.tm_year = 2019 - 1900;
    time.tm_mon  = 6 - 1;
    time.tm_mday = 18;
    time.tm_hour = 5;
    time.tm_min  = 22;
    time.tm_sec  = 39;
    holo::common::Timestamp utc_stamp(timegm(&time), 0);

    float64_t lon        = (float64_t)(*((int32_t*)(nav_pvt_msg + 30))) / 1e7;
    float64_t lat        = (float64_t)(*((int32_t*)(nav_pvt_msg + 34))) / 1e7;
    float64_t lat_std    = (float64_t)(*((int32_t*)(nav_pvt_msg + 46))) / 1e3;
    float64_t lon_std    = (float64_t)(*((int32_t*)(nav_pvt_msg + 46))) / 1e3;
    float64_t height_std = (float64_t)(*((int32_t*)(nav_pvt_msg + 50))) / 1e3;
    float64_t vel_east   = (float64_t)(*((int32_t*)(nav_pvt_msg + 58))) / 1e3;
    float64_t vel_north  = (float64_t)(*((int32_t*)(nav_pvt_msg + 54))) / 1e3;
    float64_t vel_up     = -(float64_t)(*((int32_t*)(nav_pvt_msg + 62))) / 1e3;
    float64_t vel_cov    = (float64_t)(*((uint32_t*)(nav_pvt_msg + 74))) / 1e3;

    ASSERT_FLOAT_EQ(position.GetTimestamp().ToSec(), utc_stamp.ToSec());
    ASSERT_EQ(position.GetCoordinate(), holo::common::Coordinate::Wgs84Coordinate());
    /* wait gnss status */
    ASSERT_EQ(position.GetMode(), holo::common::GnssPvt::Mode::SINGLE_FIX);

    float64_t alt_compare = (float64_t)(*((int32_t*)(nav_pvt_msg + 38))) / 1e3;
    ASSERT_FLOAT_EQ(position.GetLatitude(), lat);
    ASSERT_FLOAT_EQ(position.GetLongitude(), lon);
    ASSERT_FLOAT_EQ(position.GetHeight(), alt_compare);

    ASSERT_FLOAT_EQ(position.GetLatitudeCov(), lat_std);
    ASSERT_FLOAT_EQ(position.GetLongitudeCov(), lon_std);
    ASSERT_FLOAT_EQ(position.GetHeightCov(), height_std);

    ASSERT_FLOAT_EQ(position.GetVelocityEast(), vel_east);
    ASSERT_FLOAT_EQ(position.GetVelocityNorth(), vel_north);
    ASSERT_FLOAT_EQ(position.GetVelocityUp(), vel_up);

    ASSERT_FLOAT_EQ(position.GetVelocityEastCov(), vel_cov);
    ASSERT_FLOAT_EQ(position.GetVelocityNorthCov(), vel_cov);
    ASSERT_FLOAT_EQ(position.GetVelocityUpCov(), vel_cov);
}

int main(int argc, char** argv)
{
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
