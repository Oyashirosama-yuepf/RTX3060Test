// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/hfl/pavement_condition.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fpavement_5fcondition_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fpavement_5fcondition_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/interval_float64.pb.h"
#include "holo/map/proto/common/interval_type.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fhfl_2fpavement_5fcondition_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fhfl_2fpavement_5fcondition_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fhfl_2fpavement_5fcondition_2eproto
namespace holo {
namespace map {
namespace proto {
namespace hfl {
class PavementCondition;
class PavementConditionDefaultTypeInternal;
extern PavementConditionDefaultTypeInternal _PavementCondition_default_instance_;
}  // namespace hfl
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::hfl::PavementCondition* Arena::CreateMaybeMessage<::holo::map::proto::hfl::PavementCondition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace hfl {

enum PavementCondition_PavementType {
  PavementCondition_PavementType_PAVEMENT_TYPE_UNDEFINED = 0,
  PavementCondition_PavementType_PAVEMENT_TYPE_ROAD_CONSTRUCTION = 1,
  PavementCondition_PavementType_PAVEMENT_TYPE_PAVEMENT_ABNORMALITY = 2,
  PavementCondition_PavementType_PAVEMENT_TYPE_ROAD_CLOSED = 3,
  PavementCondition_PavementType_PAVEMENT_TYPE_ROAD_CHANGED = 4,
  PavementCondition_PavementType_PAVEMENT_TYPE_FACILITY_MAINTENANCE = 5,
  PavementCondition_PavementType_PAVEMENT_TYPE_OTHER = 6
};
bool PavementCondition_PavementType_IsValid(int value);
const PavementCondition_PavementType PavementCondition_PavementType_PavementType_MIN = PavementCondition_PavementType_PAVEMENT_TYPE_UNDEFINED;
const PavementCondition_PavementType PavementCondition_PavementType_PavementType_MAX = PavementCondition_PavementType_PAVEMENT_TYPE_OTHER;
const int PavementCondition_PavementType_PavementType_ARRAYSIZE = PavementCondition_PavementType_PavementType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PavementCondition_PavementType_descriptor();
inline const ::std::string& PavementCondition_PavementType_Name(PavementCondition_PavementType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PavementCondition_PavementType_descriptor(), value);
}
inline bool PavementCondition_PavementType_Parse(
    const ::std::string& name, PavementCondition_PavementType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PavementCondition_PavementType>(
    PavementCondition_PavementType_descriptor(), name, value);
}
enum PavementCondition_PavementAbnormalityType {
  PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_UNDEFINED = 0,
  PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_ICE = 1,
  PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_WATER = 2,
  PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_PAVEMENT_UP = 3,
  PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_PAVEMENT_DOWN = 4,
  PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_CRACK = 5,
  PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_OTHER = 6
};
bool PavementCondition_PavementAbnormalityType_IsValid(int value);
const PavementCondition_PavementAbnormalityType PavementCondition_PavementAbnormalityType_PavementAbnormalityType_MIN = PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_UNDEFINED;
const PavementCondition_PavementAbnormalityType PavementCondition_PavementAbnormalityType_PavementAbnormalityType_MAX = PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_OTHER;
const int PavementCondition_PavementAbnormalityType_PavementAbnormalityType_ARRAYSIZE = PavementCondition_PavementAbnormalityType_PavementAbnormalityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PavementCondition_PavementAbnormalityType_descriptor();
inline const ::std::string& PavementCondition_PavementAbnormalityType_Name(PavementCondition_PavementAbnormalityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PavementCondition_PavementAbnormalityType_descriptor(), value);
}
inline bool PavementCondition_PavementAbnormalityType_Parse(
    const ::std::string& name, PavementCondition_PavementAbnormalityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PavementCondition_PavementAbnormalityType>(
    PavementCondition_PavementAbnormalityType_descriptor(), name, value);
}
enum PavementCondition_FacilityMaintenanceType {
  PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_UNDEFINED = 0,
  PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_TRAFFIC_LIGHT = 1,
  PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_WELL = 2,
  PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_MARKING_PAINTED = 3,
  PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_LANE_BOUNDARY = 4,
  PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_OTHER = 5
};
bool PavementCondition_FacilityMaintenanceType_IsValid(int value);
const PavementCondition_FacilityMaintenanceType PavementCondition_FacilityMaintenanceType_FacilityMaintenanceType_MIN = PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_UNDEFINED;
const PavementCondition_FacilityMaintenanceType PavementCondition_FacilityMaintenanceType_FacilityMaintenanceType_MAX = PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_OTHER;
const int PavementCondition_FacilityMaintenanceType_FacilityMaintenanceType_ARRAYSIZE = PavementCondition_FacilityMaintenanceType_FacilityMaintenanceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PavementCondition_FacilityMaintenanceType_descriptor();
inline const ::std::string& PavementCondition_FacilityMaintenanceType_Name(PavementCondition_FacilityMaintenanceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PavementCondition_FacilityMaintenanceType_descriptor(), value);
}
inline bool PavementCondition_FacilityMaintenanceType_Parse(
    const ::std::string& name, PavementCondition_FacilityMaintenanceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PavementCondition_FacilityMaintenanceType>(
    PavementCondition_FacilityMaintenanceType_descriptor(), name, value);
}
// ===================================================================

class PavementCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.hfl.PavementCondition) */ {
 public:
  PavementCondition();
  virtual ~PavementCondition();

  PavementCondition(const PavementCondition& from);

  inline PavementCondition& operator=(const PavementCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PavementCondition(PavementCondition&& from) noexcept
    : PavementCondition() {
    *this = ::std::move(from);
  }

  inline PavementCondition& operator=(PavementCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PavementCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PavementCondition* internal_default_instance() {
    return reinterpret_cast<const PavementCondition*>(
               &_PavementCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PavementCondition* other);
  friend void swap(PavementCondition& a, PavementCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PavementCondition* New() const final {
    return CreateMaybeMessage<PavementCondition>(NULL);
  }

  PavementCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PavementCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PavementCondition& from);
  void MergeFrom(const PavementCondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PavementCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PavementCondition_PavementType PavementType;
  static const PavementType PAVEMENT_TYPE_UNDEFINED =
    PavementCondition_PavementType_PAVEMENT_TYPE_UNDEFINED;
  static const PavementType PAVEMENT_TYPE_ROAD_CONSTRUCTION =
    PavementCondition_PavementType_PAVEMENT_TYPE_ROAD_CONSTRUCTION;
  static const PavementType PAVEMENT_TYPE_PAVEMENT_ABNORMALITY =
    PavementCondition_PavementType_PAVEMENT_TYPE_PAVEMENT_ABNORMALITY;
  static const PavementType PAVEMENT_TYPE_ROAD_CLOSED =
    PavementCondition_PavementType_PAVEMENT_TYPE_ROAD_CLOSED;
  static const PavementType PAVEMENT_TYPE_ROAD_CHANGED =
    PavementCondition_PavementType_PAVEMENT_TYPE_ROAD_CHANGED;
  static const PavementType PAVEMENT_TYPE_FACILITY_MAINTENANCE =
    PavementCondition_PavementType_PAVEMENT_TYPE_FACILITY_MAINTENANCE;
  static const PavementType PAVEMENT_TYPE_OTHER =
    PavementCondition_PavementType_PAVEMENT_TYPE_OTHER;
  static inline bool PavementType_IsValid(int value) {
    return PavementCondition_PavementType_IsValid(value);
  }
  static const PavementType PavementType_MIN =
    PavementCondition_PavementType_PavementType_MIN;
  static const PavementType PavementType_MAX =
    PavementCondition_PavementType_PavementType_MAX;
  static const int PavementType_ARRAYSIZE =
    PavementCondition_PavementType_PavementType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PavementType_descriptor() {
    return PavementCondition_PavementType_descriptor();
  }
  static inline const ::std::string& PavementType_Name(PavementType value) {
    return PavementCondition_PavementType_Name(value);
  }
  static inline bool PavementType_Parse(const ::std::string& name,
      PavementType* value) {
    return PavementCondition_PavementType_Parse(name, value);
  }

  typedef PavementCondition_PavementAbnormalityType PavementAbnormalityType;
  static const PavementAbnormalityType PAVEMENT_ABNORMALITY_TYPE_UNDEFINED =
    PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_UNDEFINED;
  static const PavementAbnormalityType PAVEMENT_ABNORMALITY_TYPE_ICE =
    PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_ICE;
  static const PavementAbnormalityType PAVEMENT_ABNORMALITY_TYPE_WATER =
    PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_WATER;
  static const PavementAbnormalityType PAVEMENT_ABNORMALITY_TYPE_PAVEMENT_UP =
    PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_PAVEMENT_UP;
  static const PavementAbnormalityType PAVEMENT_ABNORMALITY_TYPE_PAVEMENT_DOWN =
    PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_PAVEMENT_DOWN;
  static const PavementAbnormalityType PAVEMENT_ABNORMALITY_TYPE_CRACK =
    PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_CRACK;
  static const PavementAbnormalityType PAVEMENT_ABNORMALITY_TYPE_OTHER =
    PavementCondition_PavementAbnormalityType_PAVEMENT_ABNORMALITY_TYPE_OTHER;
  static inline bool PavementAbnormalityType_IsValid(int value) {
    return PavementCondition_PavementAbnormalityType_IsValid(value);
  }
  static const PavementAbnormalityType PavementAbnormalityType_MIN =
    PavementCondition_PavementAbnormalityType_PavementAbnormalityType_MIN;
  static const PavementAbnormalityType PavementAbnormalityType_MAX =
    PavementCondition_PavementAbnormalityType_PavementAbnormalityType_MAX;
  static const int PavementAbnormalityType_ARRAYSIZE =
    PavementCondition_PavementAbnormalityType_PavementAbnormalityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PavementAbnormalityType_descriptor() {
    return PavementCondition_PavementAbnormalityType_descriptor();
  }
  static inline const ::std::string& PavementAbnormalityType_Name(PavementAbnormalityType value) {
    return PavementCondition_PavementAbnormalityType_Name(value);
  }
  static inline bool PavementAbnormalityType_Parse(const ::std::string& name,
      PavementAbnormalityType* value) {
    return PavementCondition_PavementAbnormalityType_Parse(name, value);
  }

  typedef PavementCondition_FacilityMaintenanceType FacilityMaintenanceType;
  static const FacilityMaintenanceType FACILITY_MAINTENANCE_TYPE_UNDEFINED =
    PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_UNDEFINED;
  static const FacilityMaintenanceType FACILITY_MAINTENANCE_TYPE_TRAFFIC_LIGHT =
    PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_TRAFFIC_LIGHT;
  static const FacilityMaintenanceType FACILITY_MAINTENANCE_TYPE_WELL =
    PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_WELL;
  static const FacilityMaintenanceType FACILITY_MAINTENANCE_TYPE_MARKING_PAINTED =
    PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_MARKING_PAINTED;
  static const FacilityMaintenanceType FACILITY_MAINTENANCE_TYPE_LANE_BOUNDARY =
    PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_LANE_BOUNDARY;
  static const FacilityMaintenanceType FACILITY_MAINTENANCE_TYPE_OTHER =
    PavementCondition_FacilityMaintenanceType_FACILITY_MAINTENANCE_TYPE_OTHER;
  static inline bool FacilityMaintenanceType_IsValid(int value) {
    return PavementCondition_FacilityMaintenanceType_IsValid(value);
  }
  static const FacilityMaintenanceType FacilityMaintenanceType_MIN =
    PavementCondition_FacilityMaintenanceType_FacilityMaintenanceType_MIN;
  static const FacilityMaintenanceType FacilityMaintenanceType_MAX =
    PavementCondition_FacilityMaintenanceType_FacilityMaintenanceType_MAX;
  static const int FacilityMaintenanceType_ARRAYSIZE =
    PavementCondition_FacilityMaintenanceType_FacilityMaintenanceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FacilityMaintenanceType_descriptor() {
    return PavementCondition_FacilityMaintenanceType_descriptor();
  }
  static inline const ::std::string& FacilityMaintenanceType_Name(FacilityMaintenanceType value) {
    return PavementCondition_FacilityMaintenanceType_Name(value);
  }
  static inline bool FacilityMaintenanceType_Parse(const ::std::string& name,
      FacilityMaintenanceType* value) {
    return PavementCondition_FacilityMaintenanceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .holo.map.proto.common.IntervalFloat64 pavement_pos = 5;
  int pavement_pos_size() const;
  void clear_pavement_pos();
  static const int kPavementPosFieldNumber = 5;
  ::holo::map::proto::common::IntervalFloat64* mutable_pavement_pos(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >*
      mutable_pavement_pos();
  const ::holo::map::proto::common::IntervalFloat64& pavement_pos(int index) const;
  ::holo::map::proto::common::IntervalFloat64* add_pavement_pos();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >&
      pavement_pos() const;

  // repeated .holo.map.proto.common.IntervalFloat64 exist_timestamp = 8;
  int exist_timestamp_size() const;
  void clear_exist_timestamp();
  static const int kExistTimestampFieldNumber = 8;
  ::holo::map::proto::common::IntervalFloat64* mutable_exist_timestamp(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >*
      mutable_exist_timestamp();
  const ::holo::map::proto::common::IntervalFloat64& exist_timestamp(int index) const;
  ::holo::map::proto::common::IntervalFloat64* add_exist_timestamp();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >&
      exist_timestamp() const;

  // optional .holo.map.proto.common.IntervalType pavement_pos_type = 6;
  bool has_pavement_pos_type() const;
  void clear_pavement_pos_type();
  static const int kPavementPosTypeFieldNumber = 6;
  private:
  const ::holo::map::proto::common::IntervalType& _internal_pavement_pos_type() const;
  public:
  const ::holo::map::proto::common::IntervalType& pavement_pos_type() const;
  ::holo::map::proto::common::IntervalType* release_pavement_pos_type();
  ::holo::map::proto::common::IntervalType* mutable_pavement_pos_type();
  void set_allocated_pavement_pos_type(::holo::map::proto::common::IntervalType* pavement_pos_type);

  // optional uint64 pavement_condition_id = 1;
  bool has_pavement_condition_id() const;
  void clear_pavement_condition_id();
  static const int kPavementConditionIdFieldNumber = 1;
  ::google::protobuf::uint64 pavement_condition_id() const;
  void set_pavement_condition_id(::google::protobuf::uint64 value);

  // optional .holo.map.proto.hfl.PavementCondition.PavementType pavement_type = 2;
  bool has_pavement_type() const;
  void clear_pavement_type();
  static const int kPavementTypeFieldNumber = 2;
  ::holo::map::proto::hfl::PavementCondition_PavementType pavement_type() const;
  void set_pavement_type(::holo::map::proto::hfl::PavementCondition_PavementType value);

  // optional .holo.map.proto.hfl.PavementCondition.PavementAbnormalityType pavement_abnormality_type = 3;
  bool has_pavement_abnormality_type() const;
  void clear_pavement_abnormality_type();
  static const int kPavementAbnormalityTypeFieldNumber = 3;
  ::holo::map::proto::hfl::PavementCondition_PavementAbnormalityType pavement_abnormality_type() const;
  void set_pavement_abnormality_type(::holo::map::proto::hfl::PavementCondition_PavementAbnormalityType value);

  // optional .holo.map.proto.hfl.PavementCondition.FacilityMaintenanceType facility_maintenance_type = 4;
  bool has_facility_maintenance_type() const;
  void clear_facility_maintenance_type();
  static const int kFacilityMaintenanceTypeFieldNumber = 4;
  ::holo::map::proto::hfl::PavementCondition_FacilityMaintenanceType facility_maintenance_type() const;
  void set_facility_maintenance_type(::holo::map::proto::hfl::PavementCondition_FacilityMaintenanceType value);

  // optional uint32 width_cm = 7;
  bool has_width_cm() const;
  void clear_width_cm();
  static const int kWidthCmFieldNumber = 7;
  ::google::protobuf::uint32 width_cm() const;
  void set_width_cm(::google::protobuf::uint32 value);

  // optional uint64 create_timestamp = 9;
  bool has_create_timestamp() const;
  void clear_create_timestamp();
  static const int kCreateTimestampFieldNumber = 9;
  ::google::protobuf::uint64 create_timestamp() const;
  void set_create_timestamp(::google::protobuf::uint64 value);

  // optional uint64 update_timestamp = 10;
  bool has_update_timestamp() const;
  void clear_update_timestamp();
  static const int kUpdateTimestampFieldNumber = 10;
  ::google::protobuf::uint64 update_timestamp() const;
  void set_update_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.hfl.PavementCondition)
 private:
  void set_has_pavement_condition_id();
  void clear_has_pavement_condition_id();
  void set_has_pavement_type();
  void clear_has_pavement_type();
  void set_has_pavement_abnormality_type();
  void clear_has_pavement_abnormality_type();
  void set_has_facility_maintenance_type();
  void clear_has_facility_maintenance_type();
  void set_has_pavement_pos_type();
  void clear_has_pavement_pos_type();
  void set_has_width_cm();
  void clear_has_width_cm();
  void set_has_create_timestamp();
  void clear_has_create_timestamp();
  void set_has_update_timestamp();
  void clear_has_update_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 > pavement_pos_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 > exist_timestamp_;
  ::holo::map::proto::common::IntervalType* pavement_pos_type_;
  ::google::protobuf::uint64 pavement_condition_id_;
  int pavement_type_;
  int pavement_abnormality_type_;
  int facility_maintenance_type_;
  ::google::protobuf::uint32 width_cm_;
  ::google::protobuf::uint64 create_timestamp_;
  ::google::protobuf::uint64 update_timestamp_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fhfl_2fpavement_5fcondition_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PavementCondition

// optional uint64 pavement_condition_id = 1;
inline bool PavementCondition::has_pavement_condition_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PavementCondition::set_has_pavement_condition_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PavementCondition::clear_has_pavement_condition_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PavementCondition::clear_pavement_condition_id() {
  pavement_condition_id_ = GOOGLE_ULONGLONG(0);
  clear_has_pavement_condition_id();
}
inline ::google::protobuf::uint64 PavementCondition::pavement_condition_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.PavementCondition.pavement_condition_id)
  return pavement_condition_id_;
}
inline void PavementCondition::set_pavement_condition_id(::google::protobuf::uint64 value) {
  set_has_pavement_condition_id();
  pavement_condition_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.PavementCondition.pavement_condition_id)
}

// optional .holo.map.proto.hfl.PavementCondition.PavementType pavement_type = 2;
inline bool PavementCondition::has_pavement_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PavementCondition::set_has_pavement_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PavementCondition::clear_has_pavement_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PavementCondition::clear_pavement_type() {
  pavement_type_ = 0;
  clear_has_pavement_type();
}
inline ::holo::map::proto::hfl::PavementCondition_PavementType PavementCondition::pavement_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.PavementCondition.pavement_type)
  return static_cast< ::holo::map::proto::hfl::PavementCondition_PavementType >(pavement_type_);
}
inline void PavementCondition::set_pavement_type(::holo::map::proto::hfl::PavementCondition_PavementType value) {
  assert(::holo::map::proto::hfl::PavementCondition_PavementType_IsValid(value));
  set_has_pavement_type();
  pavement_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.PavementCondition.pavement_type)
}

// optional .holo.map.proto.hfl.PavementCondition.PavementAbnormalityType pavement_abnormality_type = 3;
inline bool PavementCondition::has_pavement_abnormality_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PavementCondition::set_has_pavement_abnormality_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PavementCondition::clear_has_pavement_abnormality_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PavementCondition::clear_pavement_abnormality_type() {
  pavement_abnormality_type_ = 0;
  clear_has_pavement_abnormality_type();
}
inline ::holo::map::proto::hfl::PavementCondition_PavementAbnormalityType PavementCondition::pavement_abnormality_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.PavementCondition.pavement_abnormality_type)
  return static_cast< ::holo::map::proto::hfl::PavementCondition_PavementAbnormalityType >(pavement_abnormality_type_);
}
inline void PavementCondition::set_pavement_abnormality_type(::holo::map::proto::hfl::PavementCondition_PavementAbnormalityType value) {
  assert(::holo::map::proto::hfl::PavementCondition_PavementAbnormalityType_IsValid(value));
  set_has_pavement_abnormality_type();
  pavement_abnormality_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.PavementCondition.pavement_abnormality_type)
}

// optional .holo.map.proto.hfl.PavementCondition.FacilityMaintenanceType facility_maintenance_type = 4;
inline bool PavementCondition::has_facility_maintenance_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PavementCondition::set_has_facility_maintenance_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PavementCondition::clear_has_facility_maintenance_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PavementCondition::clear_facility_maintenance_type() {
  facility_maintenance_type_ = 0;
  clear_has_facility_maintenance_type();
}
inline ::holo::map::proto::hfl::PavementCondition_FacilityMaintenanceType PavementCondition::facility_maintenance_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.PavementCondition.facility_maintenance_type)
  return static_cast< ::holo::map::proto::hfl::PavementCondition_FacilityMaintenanceType >(facility_maintenance_type_);
}
inline void PavementCondition::set_facility_maintenance_type(::holo::map::proto::hfl::PavementCondition_FacilityMaintenanceType value) {
  assert(::holo::map::proto::hfl::PavementCondition_FacilityMaintenanceType_IsValid(value));
  set_has_facility_maintenance_type();
  facility_maintenance_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.PavementCondition.facility_maintenance_type)
}

// repeated .holo.map.proto.common.IntervalFloat64 pavement_pos = 5;
inline int PavementCondition::pavement_pos_size() const {
  return pavement_pos_.size();
}
inline ::holo::map::proto::common::IntervalFloat64* PavementCondition::mutable_pavement_pos(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.PavementCondition.pavement_pos)
  return pavement_pos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >*
PavementCondition::mutable_pavement_pos() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.PavementCondition.pavement_pos)
  return &pavement_pos_;
}
inline const ::holo::map::proto::common::IntervalFloat64& PavementCondition::pavement_pos(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.PavementCondition.pavement_pos)
  return pavement_pos_.Get(index);
}
inline ::holo::map::proto::common::IntervalFloat64* PavementCondition::add_pavement_pos() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.PavementCondition.pavement_pos)
  return pavement_pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >&
PavementCondition::pavement_pos() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.PavementCondition.pavement_pos)
  return pavement_pos_;
}

// optional .holo.map.proto.common.IntervalType pavement_pos_type = 6;
inline bool PavementCondition::has_pavement_pos_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PavementCondition::set_has_pavement_pos_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PavementCondition::clear_has_pavement_pos_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::IntervalType& PavementCondition::_internal_pavement_pos_type() const {
  return *pavement_pos_type_;
}
inline const ::holo::map::proto::common::IntervalType& PavementCondition::pavement_pos_type() const {
  const ::holo::map::proto::common::IntervalType* p = pavement_pos_type_;
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.PavementCondition.pavement_pos_type)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::IntervalType*>(
      &::holo::map::proto::common::_IntervalType_default_instance_);
}
inline ::holo::map::proto::common::IntervalType* PavementCondition::release_pavement_pos_type() {
  // @@protoc_insertion_point(field_release:holo.map.proto.hfl.PavementCondition.pavement_pos_type)
  clear_has_pavement_pos_type();
  ::holo::map::proto::common::IntervalType* temp = pavement_pos_type_;
  pavement_pos_type_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::IntervalType* PavementCondition::mutable_pavement_pos_type() {
  set_has_pavement_pos_type();
  if (pavement_pos_type_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::IntervalType>(GetArenaNoVirtual());
    pavement_pos_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.PavementCondition.pavement_pos_type)
  return pavement_pos_type_;
}
inline void PavementCondition::set_allocated_pavement_pos_type(::holo::map::proto::common::IntervalType* pavement_pos_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pavement_pos_type_);
  }
  if (pavement_pos_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pavement_pos_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pavement_pos_type, submessage_arena);
    }
    set_has_pavement_pos_type();
  } else {
    clear_has_pavement_pos_type();
  }
  pavement_pos_type_ = pavement_pos_type;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.hfl.PavementCondition.pavement_pos_type)
}

// optional uint32 width_cm = 7;
inline bool PavementCondition::has_width_cm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PavementCondition::set_has_width_cm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PavementCondition::clear_has_width_cm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PavementCondition::clear_width_cm() {
  width_cm_ = 0u;
  clear_has_width_cm();
}
inline ::google::protobuf::uint32 PavementCondition::width_cm() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.PavementCondition.width_cm)
  return width_cm_;
}
inline void PavementCondition::set_width_cm(::google::protobuf::uint32 value) {
  set_has_width_cm();
  width_cm_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.PavementCondition.width_cm)
}

// repeated .holo.map.proto.common.IntervalFloat64 exist_timestamp = 8;
inline int PavementCondition::exist_timestamp_size() const {
  return exist_timestamp_.size();
}
inline ::holo::map::proto::common::IntervalFloat64* PavementCondition::mutable_exist_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.PavementCondition.exist_timestamp)
  return exist_timestamp_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >*
PavementCondition::mutable_exist_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.PavementCondition.exist_timestamp)
  return &exist_timestamp_;
}
inline const ::holo::map::proto::common::IntervalFloat64& PavementCondition::exist_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.PavementCondition.exist_timestamp)
  return exist_timestamp_.Get(index);
}
inline ::holo::map::proto::common::IntervalFloat64* PavementCondition::add_exist_timestamp() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.PavementCondition.exist_timestamp)
  return exist_timestamp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >&
PavementCondition::exist_timestamp() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.PavementCondition.exist_timestamp)
  return exist_timestamp_;
}

// optional uint64 create_timestamp = 9;
inline bool PavementCondition::has_create_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PavementCondition::set_has_create_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PavementCondition::clear_has_create_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PavementCondition::clear_create_timestamp() {
  create_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_create_timestamp();
}
inline ::google::protobuf::uint64 PavementCondition::create_timestamp() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.PavementCondition.create_timestamp)
  return create_timestamp_;
}
inline void PavementCondition::set_create_timestamp(::google::protobuf::uint64 value) {
  set_has_create_timestamp();
  create_timestamp_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.PavementCondition.create_timestamp)
}

// optional uint64 update_timestamp = 10;
inline bool PavementCondition::has_update_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PavementCondition::set_has_update_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PavementCondition::clear_has_update_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PavementCondition::clear_update_timestamp() {
  update_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_update_timestamp();
}
inline ::google::protobuf::uint64 PavementCondition::update_timestamp() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.PavementCondition.update_timestamp)
  return update_timestamp_;
}
inline void PavementCondition::set_update_timestamp(::google::protobuf::uint64 value) {
  set_has_update_timestamp();
  update_timestamp_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.PavementCondition.update_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hfl
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::hfl::PavementCondition_PavementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::hfl::PavementCondition_PavementType>() {
  return ::holo::map::proto::hfl::PavementCondition_PavementType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::hfl::PavementCondition_PavementAbnormalityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::hfl::PavementCondition_PavementAbnormalityType>() {
  return ::holo::map::proto::hfl::PavementCondition_PavementAbnormalityType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::hfl::PavementCondition_FacilityMaintenanceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::hfl::PavementCondition_FacilityMaintenanceType>() {
  return ::holo::map::proto::hfl::PavementCondition_FacilityMaintenanceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fpavement_5fcondition_2eproto
