// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/hfl/weather_condition.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fweather_5fcondition_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fweather_5fcondition_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/interval_float64.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fhfl_2fweather_5fcondition_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fhfl_2fweather_5fcondition_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fhfl_2fweather_5fcondition_2eproto
namespace holo {
namespace map {
namespace proto {
namespace hfl {
class WeatherCondition;
class WeatherConditionDefaultTypeInternal;
extern WeatherConditionDefaultTypeInternal _WeatherCondition_default_instance_;
}  // namespace hfl
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::hfl::WeatherCondition* Arena::CreateMaybeMessage<::holo::map::proto::hfl::WeatherCondition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace hfl {

enum WeatherCondition_WeatherType {
  WeatherCondition_WeatherType_WEATHER_TYPE_UNDEFINED = 0,
  WeatherCondition_WeatherType_WEATHER_TYPE_SUNNY = 1,
  WeatherCondition_WeatherType_WEATHER_TYPE_CLOUD = 2,
  WeatherCondition_WeatherType_WEATHER_TYPE_RAIN = 3,
  WeatherCondition_WeatherType_WEATHER_TYPE_WIND = 4,
  WeatherCondition_WeatherType_WEATHER_TYPE_SNOW = 5,
  WeatherCondition_WeatherType_WEATHER_TYPE_FOGGY = 6,
  WeatherCondition_WeatherType_WEATHER_TYPE_HAIL = 7,
  WeatherCondition_WeatherType_WEATHER_TYPE_MIXED = 8,
  WeatherCondition_WeatherType_WEATHER_TYPE_OTHER = 9
};
bool WeatherCondition_WeatherType_IsValid(int value);
const WeatherCondition_WeatherType WeatherCondition_WeatherType_WeatherType_MIN = WeatherCondition_WeatherType_WEATHER_TYPE_UNDEFINED;
const WeatherCondition_WeatherType WeatherCondition_WeatherType_WeatherType_MAX = WeatherCondition_WeatherType_WEATHER_TYPE_OTHER;
const int WeatherCondition_WeatherType_WeatherType_ARRAYSIZE = WeatherCondition_WeatherType_WeatherType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WeatherCondition_WeatherType_descriptor();
inline const ::std::string& WeatherCondition_WeatherType_Name(WeatherCondition_WeatherType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WeatherCondition_WeatherType_descriptor(), value);
}
inline bool WeatherCondition_WeatherType_Parse(
    const ::std::string& name, WeatherCondition_WeatherType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WeatherCondition_WeatherType>(
    WeatherCondition_WeatherType_descriptor(), name, value);
}
enum WeatherCondition_RiskLevel {
  WeatherCondition_RiskLevel_RISK_LEVEL_UNDEFINED = 0,
  WeatherCondition_RiskLevel_RISK_LEVEL_NORMAL = 1,
  WeatherCondition_RiskLevel_RISK_LEVEL_MILD = 2,
  WeatherCondition_RiskLevel_RISK_LEVEL_MEDIUM = 3,
  WeatherCondition_RiskLevel_RISK_LEVEL_DANGER = 4,
  WeatherCondition_RiskLevel_RISK_LEVEL_OTHERS = 5
};
bool WeatherCondition_RiskLevel_IsValid(int value);
const WeatherCondition_RiskLevel WeatherCondition_RiskLevel_RiskLevel_MIN = WeatherCondition_RiskLevel_RISK_LEVEL_UNDEFINED;
const WeatherCondition_RiskLevel WeatherCondition_RiskLevel_RiskLevel_MAX = WeatherCondition_RiskLevel_RISK_LEVEL_OTHERS;
const int WeatherCondition_RiskLevel_RiskLevel_ARRAYSIZE = WeatherCondition_RiskLevel_RiskLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* WeatherCondition_RiskLevel_descriptor();
inline const ::std::string& WeatherCondition_RiskLevel_Name(WeatherCondition_RiskLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    WeatherCondition_RiskLevel_descriptor(), value);
}
inline bool WeatherCondition_RiskLevel_Parse(
    const ::std::string& name, WeatherCondition_RiskLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WeatherCondition_RiskLevel>(
    WeatherCondition_RiskLevel_descriptor(), name, value);
}
// ===================================================================

class WeatherCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.hfl.WeatherCondition) */ {
 public:
  WeatherCondition();
  virtual ~WeatherCondition();

  WeatherCondition(const WeatherCondition& from);

  inline WeatherCondition& operator=(const WeatherCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WeatherCondition(WeatherCondition&& from) noexcept
    : WeatherCondition() {
    *this = ::std::move(from);
  }

  inline WeatherCondition& operator=(WeatherCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeatherCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeatherCondition* internal_default_instance() {
    return reinterpret_cast<const WeatherCondition*>(
               &_WeatherCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WeatherCondition* other);
  friend void swap(WeatherCondition& a, WeatherCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WeatherCondition* New() const final {
    return CreateMaybeMessage<WeatherCondition>(NULL);
  }

  WeatherCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WeatherCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WeatherCondition& from);
  void MergeFrom(const WeatherCondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WeatherCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WeatherCondition_WeatherType WeatherType;
  static const WeatherType WEATHER_TYPE_UNDEFINED =
    WeatherCondition_WeatherType_WEATHER_TYPE_UNDEFINED;
  static const WeatherType WEATHER_TYPE_SUNNY =
    WeatherCondition_WeatherType_WEATHER_TYPE_SUNNY;
  static const WeatherType WEATHER_TYPE_CLOUD =
    WeatherCondition_WeatherType_WEATHER_TYPE_CLOUD;
  static const WeatherType WEATHER_TYPE_RAIN =
    WeatherCondition_WeatherType_WEATHER_TYPE_RAIN;
  static const WeatherType WEATHER_TYPE_WIND =
    WeatherCondition_WeatherType_WEATHER_TYPE_WIND;
  static const WeatherType WEATHER_TYPE_SNOW =
    WeatherCondition_WeatherType_WEATHER_TYPE_SNOW;
  static const WeatherType WEATHER_TYPE_FOGGY =
    WeatherCondition_WeatherType_WEATHER_TYPE_FOGGY;
  static const WeatherType WEATHER_TYPE_HAIL =
    WeatherCondition_WeatherType_WEATHER_TYPE_HAIL;
  static const WeatherType WEATHER_TYPE_MIXED =
    WeatherCondition_WeatherType_WEATHER_TYPE_MIXED;
  static const WeatherType WEATHER_TYPE_OTHER =
    WeatherCondition_WeatherType_WEATHER_TYPE_OTHER;
  static inline bool WeatherType_IsValid(int value) {
    return WeatherCondition_WeatherType_IsValid(value);
  }
  static const WeatherType WeatherType_MIN =
    WeatherCondition_WeatherType_WeatherType_MIN;
  static const WeatherType WeatherType_MAX =
    WeatherCondition_WeatherType_WeatherType_MAX;
  static const int WeatherType_ARRAYSIZE =
    WeatherCondition_WeatherType_WeatherType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WeatherType_descriptor() {
    return WeatherCondition_WeatherType_descriptor();
  }
  static inline const ::std::string& WeatherType_Name(WeatherType value) {
    return WeatherCondition_WeatherType_Name(value);
  }
  static inline bool WeatherType_Parse(const ::std::string& name,
      WeatherType* value) {
    return WeatherCondition_WeatherType_Parse(name, value);
  }

  typedef WeatherCondition_RiskLevel RiskLevel;
  static const RiskLevel RISK_LEVEL_UNDEFINED =
    WeatherCondition_RiskLevel_RISK_LEVEL_UNDEFINED;
  static const RiskLevel RISK_LEVEL_NORMAL =
    WeatherCondition_RiskLevel_RISK_LEVEL_NORMAL;
  static const RiskLevel RISK_LEVEL_MILD =
    WeatherCondition_RiskLevel_RISK_LEVEL_MILD;
  static const RiskLevel RISK_LEVEL_MEDIUM =
    WeatherCondition_RiskLevel_RISK_LEVEL_MEDIUM;
  static const RiskLevel RISK_LEVEL_DANGER =
    WeatherCondition_RiskLevel_RISK_LEVEL_DANGER;
  static const RiskLevel RISK_LEVEL_OTHERS =
    WeatherCondition_RiskLevel_RISK_LEVEL_OTHERS;
  static inline bool RiskLevel_IsValid(int value) {
    return WeatherCondition_RiskLevel_IsValid(value);
  }
  static const RiskLevel RiskLevel_MIN =
    WeatherCondition_RiskLevel_RiskLevel_MIN;
  static const RiskLevel RiskLevel_MAX =
    WeatherCondition_RiskLevel_RiskLevel_MAX;
  static const int RiskLevel_ARRAYSIZE =
    WeatherCondition_RiskLevel_RiskLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RiskLevel_descriptor() {
    return WeatherCondition_RiskLevel_descriptor();
  }
  static inline const ::std::string& RiskLevel_Name(RiskLevel value) {
    return WeatherCondition_RiskLevel_Name(value);
  }
  static inline bool RiskLevel_Parse(const ::std::string& name,
      RiskLevel* value) {
    return WeatherCondition_RiskLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .holo.map.proto.common.IntervalFloat64 weather_timestamp = 6;
  int weather_timestamp_size() const;
  void clear_weather_timestamp();
  static const int kWeatherTimestampFieldNumber = 6;
  ::holo::map::proto::common::IntervalFloat64* mutable_weather_timestamp(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >*
      mutable_weather_timestamp();
  const ::holo::map::proto::common::IntervalFloat64& weather_timestamp(int index) const;
  ::holo::map::proto::common::IntervalFloat64* add_weather_timestamp();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >&
      weather_timestamp() const;

  // optional uint64 weather_condition_id = 1;
  bool has_weather_condition_id() const;
  void clear_weather_condition_id();
  static const int kWeatherConditionIdFieldNumber = 1;
  ::google::protobuf::uint64 weather_condition_id() const;
  void set_weather_condition_id(::google::protobuf::uint64 value);

  // optional .holo.map.proto.hfl.WeatherCondition.WeatherType weather_type = 2;
  bool has_weather_type() const;
  void clear_weather_type();
  static const int kWeatherTypeFieldNumber = 2;
  ::holo::map::proto::hfl::WeatherCondition_WeatherType weather_type() const;
  void set_weather_type(::holo::map::proto::hfl::WeatherCondition_WeatherType value);

  // optional .holo.map.proto.hfl.WeatherCondition.RiskLevel risk_level = 3;
  bool has_risk_level() const;
  void clear_risk_level();
  static const int kRiskLevelFieldNumber = 3;
  ::holo::map::proto::hfl::WeatherCondition_RiskLevel risk_level() const;
  void set_risk_level(::holo::map::proto::hfl::WeatherCondition_RiskLevel value);

  // optional uint32 province = 4;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 4;
  ::google::protobuf::uint32 province() const;
  void set_province(::google::protobuf::uint32 value);

  // optional uint32 city = 5;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 5;
  ::google::protobuf::uint32 city() const;
  void set_city(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.hfl.WeatherCondition)
 private:
  void set_has_weather_condition_id();
  void clear_has_weather_condition_id();
  void set_has_weather_type();
  void clear_has_weather_type();
  void set_has_risk_level();
  void clear_has_risk_level();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 > weather_timestamp_;
  ::google::protobuf::uint64 weather_condition_id_;
  int weather_type_;
  int risk_level_;
  ::google::protobuf::uint32 province_;
  ::google::protobuf::uint32 city_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fhfl_2fweather_5fcondition_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WeatherCondition

// optional uint64 weather_condition_id = 1;
inline bool WeatherCondition::has_weather_condition_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeatherCondition::set_has_weather_condition_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeatherCondition::clear_has_weather_condition_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeatherCondition::clear_weather_condition_id() {
  weather_condition_id_ = GOOGLE_ULONGLONG(0);
  clear_has_weather_condition_id();
}
inline ::google::protobuf::uint64 WeatherCondition::weather_condition_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.WeatherCondition.weather_condition_id)
  return weather_condition_id_;
}
inline void WeatherCondition::set_weather_condition_id(::google::protobuf::uint64 value) {
  set_has_weather_condition_id();
  weather_condition_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.WeatherCondition.weather_condition_id)
}

// optional .holo.map.proto.hfl.WeatherCondition.WeatherType weather_type = 2;
inline bool WeatherCondition::has_weather_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeatherCondition::set_has_weather_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeatherCondition::clear_has_weather_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeatherCondition::clear_weather_type() {
  weather_type_ = 0;
  clear_has_weather_type();
}
inline ::holo::map::proto::hfl::WeatherCondition_WeatherType WeatherCondition::weather_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.WeatherCondition.weather_type)
  return static_cast< ::holo::map::proto::hfl::WeatherCondition_WeatherType >(weather_type_);
}
inline void WeatherCondition::set_weather_type(::holo::map::proto::hfl::WeatherCondition_WeatherType value) {
  assert(::holo::map::proto::hfl::WeatherCondition_WeatherType_IsValid(value));
  set_has_weather_type();
  weather_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.WeatherCondition.weather_type)
}

// optional .holo.map.proto.hfl.WeatherCondition.RiskLevel risk_level = 3;
inline bool WeatherCondition::has_risk_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeatherCondition::set_has_risk_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeatherCondition::clear_has_risk_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeatherCondition::clear_risk_level() {
  risk_level_ = 0;
  clear_has_risk_level();
}
inline ::holo::map::proto::hfl::WeatherCondition_RiskLevel WeatherCondition::risk_level() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.WeatherCondition.risk_level)
  return static_cast< ::holo::map::proto::hfl::WeatherCondition_RiskLevel >(risk_level_);
}
inline void WeatherCondition::set_risk_level(::holo::map::proto::hfl::WeatherCondition_RiskLevel value) {
  assert(::holo::map::proto::hfl::WeatherCondition_RiskLevel_IsValid(value));
  set_has_risk_level();
  risk_level_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.WeatherCondition.risk_level)
}

// optional uint32 province = 4;
inline bool WeatherCondition::has_province() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeatherCondition::set_has_province() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeatherCondition::clear_has_province() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeatherCondition::clear_province() {
  province_ = 0u;
  clear_has_province();
}
inline ::google::protobuf::uint32 WeatherCondition::province() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.WeatherCondition.province)
  return province_;
}
inline void WeatherCondition::set_province(::google::protobuf::uint32 value) {
  set_has_province();
  province_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.WeatherCondition.province)
}

// optional uint32 city = 5;
inline bool WeatherCondition::has_city() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeatherCondition::set_has_city() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeatherCondition::clear_has_city() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeatherCondition::clear_city() {
  city_ = 0u;
  clear_has_city();
}
inline ::google::protobuf::uint32 WeatherCondition::city() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.WeatherCondition.city)
  return city_;
}
inline void WeatherCondition::set_city(::google::protobuf::uint32 value) {
  set_has_city();
  city_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.WeatherCondition.city)
}

// repeated .holo.map.proto.common.IntervalFloat64 weather_timestamp = 6;
inline int WeatherCondition::weather_timestamp_size() const {
  return weather_timestamp_.size();
}
inline ::holo::map::proto::common::IntervalFloat64* WeatherCondition::mutable_weather_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.WeatherCondition.weather_timestamp)
  return weather_timestamp_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >*
WeatherCondition::mutable_weather_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.WeatherCondition.weather_timestamp)
  return &weather_timestamp_;
}
inline const ::holo::map::proto::common::IntervalFloat64& WeatherCondition::weather_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.WeatherCondition.weather_timestamp)
  return weather_timestamp_.Get(index);
}
inline ::holo::map::proto::common::IntervalFloat64* WeatherCondition::add_weather_timestamp() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.WeatherCondition.weather_timestamp)
  return weather_timestamp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >&
WeatherCondition::weather_timestamp() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.WeatherCondition.weather_timestamp)
  return weather_timestamp_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hfl
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::hfl::WeatherCondition_WeatherType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::hfl::WeatherCondition_WeatherType>() {
  return ::holo::map::proto::hfl::WeatherCondition_WeatherType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::hfl::WeatherCondition_RiskLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::hfl::WeatherCondition_RiskLevel>() {
  return ::holo::map::proto::hfl::WeatherCondition_RiskLevel_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fweather_5fcondition_2eproto
