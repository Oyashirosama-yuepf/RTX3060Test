// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/hfl/speed_limit_condition.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fspeed_5flimit_5fcondition_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fspeed_5flimit_5fcondition_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/interval_float64.pb.h"
#include "holo/map/proto/common/interval_type.pb.h"
#include "holo/map/proto/base/speed_limit_info.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fhfl_2fspeed_5flimit_5fcondition_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fhfl_2fspeed_5flimit_5fcondition_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fhfl_2fspeed_5flimit_5fcondition_2eproto
namespace holo {
namespace map {
namespace proto {
namespace hfl {
class SpeedLimitCondition;
class SpeedLimitConditionDefaultTypeInternal;
extern SpeedLimitConditionDefaultTypeInternal _SpeedLimitCondition_default_instance_;
}  // namespace hfl
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::hfl::SpeedLimitCondition* Arena::CreateMaybeMessage<::holo::map::proto::hfl::SpeedLimitCondition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace hfl {

enum SpeedLimitCondition_SpeedLimitType {
  SpeedLimitCondition_SpeedLimitType_SPEED_LIMIT_TYPE_UNDEFINED = 0,
  SpeedLimitCondition_SpeedLimitType_SPEED_LIMIT_TYPE_SPEED_LIMIT_CHANGED = 1,
  SpeedLimitCondition_SpeedLimitType_SPEED_LIMIT_TYPE_SPEED_LIMIT_ERROR = 2,
  SpeedLimitCondition_SpeedLimitType_SPEED_LIMIT_TYPE_OTHERS = 4
};
bool SpeedLimitCondition_SpeedLimitType_IsValid(int value);
const SpeedLimitCondition_SpeedLimitType SpeedLimitCondition_SpeedLimitType_SpeedLimitType_MIN = SpeedLimitCondition_SpeedLimitType_SPEED_LIMIT_TYPE_UNDEFINED;
const SpeedLimitCondition_SpeedLimitType SpeedLimitCondition_SpeedLimitType_SpeedLimitType_MAX = SpeedLimitCondition_SpeedLimitType_SPEED_LIMIT_TYPE_OTHERS;
const int SpeedLimitCondition_SpeedLimitType_SpeedLimitType_ARRAYSIZE = SpeedLimitCondition_SpeedLimitType_SpeedLimitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SpeedLimitCondition_SpeedLimitType_descriptor();
inline const ::std::string& SpeedLimitCondition_SpeedLimitType_Name(SpeedLimitCondition_SpeedLimitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SpeedLimitCondition_SpeedLimitType_descriptor(), value);
}
inline bool SpeedLimitCondition_SpeedLimitType_Parse(
    const ::std::string& name, SpeedLimitCondition_SpeedLimitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SpeedLimitCondition_SpeedLimitType>(
    SpeedLimitCondition_SpeedLimitType_descriptor(), name, value);
}
// ===================================================================

class SpeedLimitCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.hfl.SpeedLimitCondition) */ {
 public:
  SpeedLimitCondition();
  virtual ~SpeedLimitCondition();

  SpeedLimitCondition(const SpeedLimitCondition& from);

  inline SpeedLimitCondition& operator=(const SpeedLimitCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpeedLimitCondition(SpeedLimitCondition&& from) noexcept
    : SpeedLimitCondition() {
    *this = ::std::move(from);
  }

  inline SpeedLimitCondition& operator=(SpeedLimitCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedLimitCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedLimitCondition* internal_default_instance() {
    return reinterpret_cast<const SpeedLimitCondition*>(
               &_SpeedLimitCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SpeedLimitCondition* other);
  friend void swap(SpeedLimitCondition& a, SpeedLimitCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpeedLimitCondition* New() const final {
    return CreateMaybeMessage<SpeedLimitCondition>(NULL);
  }

  SpeedLimitCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpeedLimitCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpeedLimitCondition& from);
  void MergeFrom(const SpeedLimitCondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedLimitCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpeedLimitCondition_SpeedLimitType SpeedLimitType;
  static const SpeedLimitType SPEED_LIMIT_TYPE_UNDEFINED =
    SpeedLimitCondition_SpeedLimitType_SPEED_LIMIT_TYPE_UNDEFINED;
  static const SpeedLimitType SPEED_LIMIT_TYPE_SPEED_LIMIT_CHANGED =
    SpeedLimitCondition_SpeedLimitType_SPEED_LIMIT_TYPE_SPEED_LIMIT_CHANGED;
  static const SpeedLimitType SPEED_LIMIT_TYPE_SPEED_LIMIT_ERROR =
    SpeedLimitCondition_SpeedLimitType_SPEED_LIMIT_TYPE_SPEED_LIMIT_ERROR;
  static const SpeedLimitType SPEED_LIMIT_TYPE_OTHERS =
    SpeedLimitCondition_SpeedLimitType_SPEED_LIMIT_TYPE_OTHERS;
  static inline bool SpeedLimitType_IsValid(int value) {
    return SpeedLimitCondition_SpeedLimitType_IsValid(value);
  }
  static const SpeedLimitType SpeedLimitType_MIN =
    SpeedLimitCondition_SpeedLimitType_SpeedLimitType_MIN;
  static const SpeedLimitType SpeedLimitType_MAX =
    SpeedLimitCondition_SpeedLimitType_SpeedLimitType_MAX;
  static const int SpeedLimitType_ARRAYSIZE =
    SpeedLimitCondition_SpeedLimitType_SpeedLimitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SpeedLimitType_descriptor() {
    return SpeedLimitCondition_SpeedLimitType_descriptor();
  }
  static inline const ::std::string& SpeedLimitType_Name(SpeedLimitType value) {
    return SpeedLimitCondition_SpeedLimitType_Name(value);
  }
  static inline bool SpeedLimitType_Parse(const ::std::string& name,
      SpeedLimitType* value) {
    return SpeedLimitCondition_SpeedLimitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .holo.map.proto.base.SpeedLimitInfo speed_limit_info = 3;
  int speed_limit_info_size() const;
  void clear_speed_limit_info();
  static const int kSpeedLimitInfoFieldNumber = 3;
  ::holo::map::proto::base::SpeedLimitInfo* mutable_speed_limit_info(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::SpeedLimitInfo >*
      mutable_speed_limit_info();
  const ::holo::map::proto::base::SpeedLimitInfo& speed_limit_info(int index) const;
  ::holo::map::proto::base::SpeedLimitInfo* add_speed_limit_info();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::SpeedLimitInfo >&
      speed_limit_info() const;

  // repeated .holo.map.proto.common.IntervalFloat64 exist_timestamp = 7;
  int exist_timestamp_size() const;
  void clear_exist_timestamp();
  static const int kExistTimestampFieldNumber = 7;
  ::holo::map::proto::common::IntervalFloat64* mutable_exist_timestamp(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >*
      mutable_exist_timestamp();
  const ::holo::map::proto::common::IntervalFloat64& exist_timestamp(int index) const;
  ::holo::map::proto::common::IntervalFloat64* add_exist_timestamp();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >&
      exist_timestamp() const;

  // optional .holo.map.proto.common.IntervalType speed_limit_pos_type = 6;
  bool has_speed_limit_pos_type() const;
  void clear_speed_limit_pos_type();
  static const int kSpeedLimitPosTypeFieldNumber = 6;
  private:
  const ::holo::map::proto::common::IntervalType& _internal_speed_limit_pos_type() const;
  public:
  const ::holo::map::proto::common::IntervalType& speed_limit_pos_type() const;
  ::holo::map::proto::common::IntervalType* release_speed_limit_pos_type();
  ::holo::map::proto::common::IntervalType* mutable_speed_limit_pos_type();
  void set_allocated_speed_limit_pos_type(::holo::map::proto::common::IntervalType* speed_limit_pos_type);

  // optional uint64 speed_limit_condition_id = 1;
  bool has_speed_limit_condition_id() const;
  void clear_speed_limit_condition_id();
  static const int kSpeedLimitConditionIdFieldNumber = 1;
  ::google::protobuf::uint64 speed_limit_condition_id() const;
  void set_speed_limit_condition_id(::google::protobuf::uint64 value);

  // optional uint64 create_timestamp = 8;
  bool has_create_timestamp() const;
  void clear_create_timestamp();
  static const int kCreateTimestampFieldNumber = 8;
  ::google::protobuf::uint64 create_timestamp() const;
  void set_create_timestamp(::google::protobuf::uint64 value);

  // optional .holo.map.proto.hfl.SpeedLimitCondition.SpeedLimitType speed_limit_type = 2;
  bool has_speed_limit_type() const;
  void clear_speed_limit_type();
  static const int kSpeedLimitTypeFieldNumber = 2;
  ::holo::map::proto::hfl::SpeedLimitCondition_SpeedLimitType speed_limit_type() const;
  void set_speed_limit_type(::holo::map::proto::hfl::SpeedLimitCondition_SpeedLimitType value);

  // optional uint64 update_timestamp = 9;
  bool has_update_timestamp() const;
  void clear_update_timestamp();
  static const int kUpdateTimestampFieldNumber = 9;
  ::google::protobuf::uint64 update_timestamp() const;
  void set_update_timestamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.hfl.SpeedLimitCondition)
 private:
  void set_has_speed_limit_condition_id();
  void clear_has_speed_limit_condition_id();
  void set_has_speed_limit_type();
  void clear_has_speed_limit_type();
  void set_has_speed_limit_pos_type();
  void clear_has_speed_limit_pos_type();
  void set_has_create_timestamp();
  void clear_has_create_timestamp();
  void set_has_update_timestamp();
  void clear_has_update_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::SpeedLimitInfo > speed_limit_info_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 > exist_timestamp_;
  ::holo::map::proto::common::IntervalType* speed_limit_pos_type_;
  ::google::protobuf::uint64 speed_limit_condition_id_;
  ::google::protobuf::uint64 create_timestamp_;
  int speed_limit_type_;
  ::google::protobuf::uint64 update_timestamp_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fhfl_2fspeed_5flimit_5fcondition_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpeedLimitCondition

// optional uint64 speed_limit_condition_id = 1;
inline bool SpeedLimitCondition::has_speed_limit_condition_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpeedLimitCondition::set_has_speed_limit_condition_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpeedLimitCondition::clear_has_speed_limit_condition_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpeedLimitCondition::clear_speed_limit_condition_id() {
  speed_limit_condition_id_ = GOOGLE_ULONGLONG(0);
  clear_has_speed_limit_condition_id();
}
inline ::google::protobuf::uint64 SpeedLimitCondition::speed_limit_condition_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_condition_id)
  return speed_limit_condition_id_;
}
inline void SpeedLimitCondition::set_speed_limit_condition_id(::google::protobuf::uint64 value) {
  set_has_speed_limit_condition_id();
  speed_limit_condition_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_condition_id)
}

// optional .holo.map.proto.hfl.SpeedLimitCondition.SpeedLimitType speed_limit_type = 2;
inline bool SpeedLimitCondition::has_speed_limit_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpeedLimitCondition::set_has_speed_limit_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpeedLimitCondition::clear_has_speed_limit_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpeedLimitCondition::clear_speed_limit_type() {
  speed_limit_type_ = 0;
  clear_has_speed_limit_type();
}
inline ::holo::map::proto::hfl::SpeedLimitCondition_SpeedLimitType SpeedLimitCondition::speed_limit_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_type)
  return static_cast< ::holo::map::proto::hfl::SpeedLimitCondition_SpeedLimitType >(speed_limit_type_);
}
inline void SpeedLimitCondition::set_speed_limit_type(::holo::map::proto::hfl::SpeedLimitCondition_SpeedLimitType value) {
  assert(::holo::map::proto::hfl::SpeedLimitCondition_SpeedLimitType_IsValid(value));
  set_has_speed_limit_type();
  speed_limit_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_type)
}

// repeated .holo.map.proto.base.SpeedLimitInfo speed_limit_info = 3;
inline int SpeedLimitCondition::speed_limit_info_size() const {
  return speed_limit_info_.size();
}
inline ::holo::map::proto::base::SpeedLimitInfo* SpeedLimitCondition::mutable_speed_limit_info(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_info)
  return speed_limit_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::SpeedLimitInfo >*
SpeedLimitCondition::mutable_speed_limit_info() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_info)
  return &speed_limit_info_;
}
inline const ::holo::map::proto::base::SpeedLimitInfo& SpeedLimitCondition::speed_limit_info(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_info)
  return speed_limit_info_.Get(index);
}
inline ::holo::map::proto::base::SpeedLimitInfo* SpeedLimitCondition::add_speed_limit_info() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_info)
  return speed_limit_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::SpeedLimitInfo >&
SpeedLimitCondition::speed_limit_info() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_info)
  return speed_limit_info_;
}

// optional .holo.map.proto.common.IntervalType speed_limit_pos_type = 6;
inline bool SpeedLimitCondition::has_speed_limit_pos_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedLimitCondition::set_has_speed_limit_pos_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedLimitCondition::clear_has_speed_limit_pos_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::IntervalType& SpeedLimitCondition::_internal_speed_limit_pos_type() const {
  return *speed_limit_pos_type_;
}
inline const ::holo::map::proto::common::IntervalType& SpeedLimitCondition::speed_limit_pos_type() const {
  const ::holo::map::proto::common::IntervalType* p = speed_limit_pos_type_;
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_pos_type)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::IntervalType*>(
      &::holo::map::proto::common::_IntervalType_default_instance_);
}
inline ::holo::map::proto::common::IntervalType* SpeedLimitCondition::release_speed_limit_pos_type() {
  // @@protoc_insertion_point(field_release:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_pos_type)
  clear_has_speed_limit_pos_type();
  ::holo::map::proto::common::IntervalType* temp = speed_limit_pos_type_;
  speed_limit_pos_type_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::IntervalType* SpeedLimitCondition::mutable_speed_limit_pos_type() {
  set_has_speed_limit_pos_type();
  if (speed_limit_pos_type_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::IntervalType>(GetArenaNoVirtual());
    speed_limit_pos_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_pos_type)
  return speed_limit_pos_type_;
}
inline void SpeedLimitCondition::set_allocated_speed_limit_pos_type(::holo::map::proto::common::IntervalType* speed_limit_pos_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(speed_limit_pos_type_);
  }
  if (speed_limit_pos_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      speed_limit_pos_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, speed_limit_pos_type, submessage_arena);
    }
    set_has_speed_limit_pos_type();
  } else {
    clear_has_speed_limit_pos_type();
  }
  speed_limit_pos_type_ = speed_limit_pos_type;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.hfl.SpeedLimitCondition.speed_limit_pos_type)
}

// repeated .holo.map.proto.common.IntervalFloat64 exist_timestamp = 7;
inline int SpeedLimitCondition::exist_timestamp_size() const {
  return exist_timestamp_.size();
}
inline ::holo::map::proto::common::IntervalFloat64* SpeedLimitCondition::mutable_exist_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.SpeedLimitCondition.exist_timestamp)
  return exist_timestamp_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >*
SpeedLimitCondition::mutable_exist_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.SpeedLimitCondition.exist_timestamp)
  return &exist_timestamp_;
}
inline const ::holo::map::proto::common::IntervalFloat64& SpeedLimitCondition::exist_timestamp(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.SpeedLimitCondition.exist_timestamp)
  return exist_timestamp_.Get(index);
}
inline ::holo::map::proto::common::IntervalFloat64* SpeedLimitCondition::add_exist_timestamp() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.SpeedLimitCondition.exist_timestamp)
  return exist_timestamp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalFloat64 >&
SpeedLimitCondition::exist_timestamp() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.SpeedLimitCondition.exist_timestamp)
  return exist_timestamp_;
}

// optional uint64 create_timestamp = 8;
inline bool SpeedLimitCondition::has_create_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpeedLimitCondition::set_has_create_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpeedLimitCondition::clear_has_create_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpeedLimitCondition::clear_create_timestamp() {
  create_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_create_timestamp();
}
inline ::google::protobuf::uint64 SpeedLimitCondition::create_timestamp() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.SpeedLimitCondition.create_timestamp)
  return create_timestamp_;
}
inline void SpeedLimitCondition::set_create_timestamp(::google::protobuf::uint64 value) {
  set_has_create_timestamp();
  create_timestamp_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.SpeedLimitCondition.create_timestamp)
}

// optional uint64 update_timestamp = 9;
inline bool SpeedLimitCondition::has_update_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpeedLimitCondition::set_has_update_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpeedLimitCondition::clear_has_update_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpeedLimitCondition::clear_update_timestamp() {
  update_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_update_timestamp();
}
inline ::google::protobuf::uint64 SpeedLimitCondition::update_timestamp() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.SpeedLimitCondition.update_timestamp)
  return update_timestamp_;
}
inline void SpeedLimitCondition::set_update_timestamp(::google::protobuf::uint64 value) {
  set_has_update_timestamp();
  update_timestamp_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.SpeedLimitCondition.update_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hfl
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::hfl::SpeedLimitCondition_SpeedLimitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::hfl::SpeedLimitCondition_SpeedLimitType>() {
  return ::holo::map::proto::hfl::SpeedLimitCondition_SpeedLimitType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fspeed_5flimit_5fcondition_2eproto
