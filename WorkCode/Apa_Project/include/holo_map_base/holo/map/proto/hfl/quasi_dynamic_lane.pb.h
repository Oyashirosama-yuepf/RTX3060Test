// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/hfl/quasi_dynamic_lane.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fquasi_5fdynamic_5flane_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fquasi_5fdynamic_5flane_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/coordinate.pb.h"
#include "holo/map/proto/common/geo_point.pb.h"
#include "holo/map/proto/common/geo_line.pb.h"
#include "holo/map/proto/base/geofence.pb.h"
#include "holo/map/proto/hfl/pavement_condition.pb.h"
#include "holo/map/proto/hfl/traffic_condition.pb.h"
#include "holo/map/proto/hfl/map_condition.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fhfl_2fquasi_5fdynamic_5flane_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fhfl_2fquasi_5fdynamic_5flane_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fhfl_2fquasi_5fdynamic_5flane_2eproto
namespace holo {
namespace map {
namespace proto {
namespace hfl {
class QuasiDynamicLane;
class QuasiDynamicLaneDefaultTypeInternal;
extern QuasiDynamicLaneDefaultTypeInternal _QuasiDynamicLane_default_instance_;
class QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse;
class QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUseDefaultTypeInternal;
extern QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUseDefaultTypeInternal _QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse_default_instance_;
}  // namespace hfl
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::hfl::QuasiDynamicLane* Arena::CreateMaybeMessage<::holo::map::proto::hfl::QuasiDynamicLane>(Arena*);
template<> ::holo::map::proto::hfl::QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::hfl::QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace hfl {

// ===================================================================

class QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse();
  QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse& other);
  static const QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse*>(&_QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class QuasiDynamicLane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.hfl.QuasiDynamicLane) */ {
 public:
  QuasiDynamicLane();
  virtual ~QuasiDynamicLane();

  QuasiDynamicLane(const QuasiDynamicLane& from);

  inline QuasiDynamicLane& operator=(const QuasiDynamicLane& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuasiDynamicLane(QuasiDynamicLane&& from) noexcept
    : QuasiDynamicLane() {
    *this = ::std::move(from);
  }

  inline QuasiDynamicLane& operator=(QuasiDynamicLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuasiDynamicLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuasiDynamicLane* internal_default_instance() {
    return reinterpret_cast<const QuasiDynamicLane*>(
               &_QuasiDynamicLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(QuasiDynamicLane* other);
  friend void swap(QuasiDynamicLane& a, QuasiDynamicLane& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuasiDynamicLane* New() const final {
    return CreateMaybeMessage<QuasiDynamicLane>(NULL);
  }

  QuasiDynamicLane* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuasiDynamicLane>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuasiDynamicLane& from);
  void MergeFrom(const QuasiDynamicLane& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuasiDynamicLane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .holo.map.proto.hfl.PavementCondition pavement_condition = 2;
  int pavement_condition_size() const;
  void clear_pavement_condition();
  static const int kPavementConditionFieldNumber = 2;
  ::holo::map::proto::hfl::PavementCondition* mutable_pavement_condition(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::PavementCondition >*
      mutable_pavement_condition();
  const ::holo::map::proto::hfl::PavementCondition& pavement_condition(int index) const;
  ::holo::map::proto::hfl::PavementCondition* add_pavement_condition();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::PavementCondition >&
      pavement_condition() const;

  // repeated .holo.map.proto.hfl.TrafficCondition traffic_condition = 3;
  int traffic_condition_size() const;
  void clear_traffic_condition();
  static const int kTrafficConditionFieldNumber = 3;
  ::holo::map::proto::hfl::TrafficCondition* mutable_traffic_condition(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::TrafficCondition >*
      mutable_traffic_condition();
  const ::holo::map::proto::hfl::TrafficCondition& traffic_condition(int index) const;
  ::holo::map::proto::hfl::TrafficCondition* add_traffic_condition();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::TrafficCondition >&
      traffic_condition() const;

  // repeated .holo.map.proto.hfl.MapCondition map_condition = 4;
  int map_condition_size() const;
  void clear_map_condition();
  static const int kMapConditionFieldNumber = 4;
  ::holo::map::proto::hfl::MapCondition* mutable_map_condition(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::MapCondition >*
      mutable_map_condition();
  const ::holo::map::proto::hfl::MapCondition& map_condition(int index) const;
  ::holo::map::proto::hfl::MapCondition* add_map_condition();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::MapCondition >&
      map_condition() const;

  // repeated .holo.map.proto.base.Geofence geofence_condition = 5;
  int geofence_condition_size() const;
  void clear_geofence_condition();
  static const int kGeofenceConditionFieldNumber = 5;
  ::holo::map::proto::base::Geofence* mutable_geofence_condition(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::Geofence >*
      mutable_geofence_condition();
  const ::holo::map::proto::base::Geofence& geofence_condition(int index) const;
  ::holo::map::proto::base::Geofence* add_geofence_condition();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::Geofence >&
      geofence_condition() const;

  // repeated uint64 tile_ids = 10 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 10;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // repeated .holo.map.proto.common.GeoPoint geometry_points = 24;
  int geometry_points_size() const;
  void clear_geometry_points();
  static const int kGeometryPointsFieldNumber = 24;
  ::holo::map::proto::common::GeoPoint* mutable_geometry_points(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
      mutable_geometry_points();
  const ::holo::map::proto::common::GeoPoint& geometry_points(int index) const;
  ::holo::map::proto::common::GeoPoint* add_geometry_points();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
      geometry_points() const;

  // map<uint32, .holo.map.proto.common.GeoLine> extra_geometry_points = 25;
  int extra_geometry_points_size() const;
  void clear_extra_geometry_points();
  static const int kExtraGeometryPointsFieldNumber = 25;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >&
      extra_geometry_points() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >*
      mutable_extra_geometry_points();

  // optional .holo.map.proto.common.Coordinate coordinate = 20;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 20;
  private:
  const ::holo::map::proto::common::Coordinate& _internal_coordinate() const;
  public:
  const ::holo::map::proto::common::Coordinate& coordinate() const;
  ::holo::map::proto::common::Coordinate* release_coordinate();
  ::holo::map::proto::common::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate);

  // optional uint64 quasi_dynamic_lane_id = 1;
  bool has_quasi_dynamic_lane_id() const;
  void clear_quasi_dynamic_lane_id();
  static const int kQuasiDynamicLaneIdFieldNumber = 1;
  ::google::protobuf::uint64 quasi_dynamic_lane_id() const;
  void set_quasi_dynamic_lane_id(::google::protobuf::uint64 value);

  // optional uint64 associated_lane_id = 11;
  bool has_associated_lane_id() const;
  void clear_associated_lane_id();
  static const int kAssociatedLaneIdFieldNumber = 11;
  ::google::protobuf::uint64 associated_lane_id() const;
  void set_associated_lane_id(::google::protobuf::uint64 value);

  // optional bool south_flag = 23;
  bool has_south_flag() const;
  void clear_south_flag();
  static const int kSouthFlagFieldNumber = 23;
  bool south_flag() const;
  void set_south_flag(bool value);

  // optional uint32 zone_id = 21;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 21;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // optional uint32 extra_zone_id = 22;
  bool has_extra_zone_id() const;
  void clear_extra_zone_id();
  static const int kExtraZoneIdFieldNumber = 22;
  ::google::protobuf::uint32 extra_zone_id() const;
  void set_extra_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.hfl.QuasiDynamicLane)
 private:
  void set_has_quasi_dynamic_lane_id();
  void clear_has_quasi_dynamic_lane_id();
  void set_has_associated_lane_id();
  void clear_has_associated_lane_id();
  void set_has_coordinate();
  void clear_has_coordinate();
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_extra_zone_id();
  void clear_has_extra_zone_id();
  void set_has_south_flag();
  void clear_has_south_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::PavementCondition > pavement_condition_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::TrafficCondition > traffic_condition_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::MapCondition > map_condition_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::Geofence > geofence_condition_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint > geometry_points_;
  ::google::protobuf::internal::MapField<
      QuasiDynamicLane_ExtraGeometryPointsEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_geometry_points_;
  ::holo::map::proto::common::Coordinate* coordinate_;
  ::google::protobuf::uint64 quasi_dynamic_lane_id_;
  ::google::protobuf::uint64 associated_lane_id_;
  bool south_flag_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 extra_zone_id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fhfl_2fquasi_5fdynamic_5flane_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QuasiDynamicLane

// optional uint64 quasi_dynamic_lane_id = 1;
inline bool QuasiDynamicLane::has_quasi_dynamic_lane_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuasiDynamicLane::set_has_quasi_dynamic_lane_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuasiDynamicLane::clear_has_quasi_dynamic_lane_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuasiDynamicLane::clear_quasi_dynamic_lane_id() {
  quasi_dynamic_lane_id_ = GOOGLE_ULONGLONG(0);
  clear_has_quasi_dynamic_lane_id();
}
inline ::google::protobuf::uint64 QuasiDynamicLane::quasi_dynamic_lane_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.quasi_dynamic_lane_id)
  return quasi_dynamic_lane_id_;
}
inline void QuasiDynamicLane::set_quasi_dynamic_lane_id(::google::protobuf::uint64 value) {
  set_has_quasi_dynamic_lane_id();
  quasi_dynamic_lane_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.QuasiDynamicLane.quasi_dynamic_lane_id)
}

// repeated .holo.map.proto.hfl.PavementCondition pavement_condition = 2;
inline int QuasiDynamicLane::pavement_condition_size() const {
  return pavement_condition_.size();
}
inline ::holo::map::proto::hfl::PavementCondition* QuasiDynamicLane::mutable_pavement_condition(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.QuasiDynamicLane.pavement_condition)
  return pavement_condition_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::PavementCondition >*
QuasiDynamicLane::mutable_pavement_condition() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.QuasiDynamicLane.pavement_condition)
  return &pavement_condition_;
}
inline const ::holo::map::proto::hfl::PavementCondition& QuasiDynamicLane::pavement_condition(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.pavement_condition)
  return pavement_condition_.Get(index);
}
inline ::holo::map::proto::hfl::PavementCondition* QuasiDynamicLane::add_pavement_condition() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.QuasiDynamicLane.pavement_condition)
  return pavement_condition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::PavementCondition >&
QuasiDynamicLane::pavement_condition() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.QuasiDynamicLane.pavement_condition)
  return pavement_condition_;
}

// repeated .holo.map.proto.hfl.TrafficCondition traffic_condition = 3;
inline int QuasiDynamicLane::traffic_condition_size() const {
  return traffic_condition_.size();
}
inline ::holo::map::proto::hfl::TrafficCondition* QuasiDynamicLane::mutable_traffic_condition(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.QuasiDynamicLane.traffic_condition)
  return traffic_condition_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::TrafficCondition >*
QuasiDynamicLane::mutable_traffic_condition() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.QuasiDynamicLane.traffic_condition)
  return &traffic_condition_;
}
inline const ::holo::map::proto::hfl::TrafficCondition& QuasiDynamicLane::traffic_condition(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.traffic_condition)
  return traffic_condition_.Get(index);
}
inline ::holo::map::proto::hfl::TrafficCondition* QuasiDynamicLane::add_traffic_condition() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.QuasiDynamicLane.traffic_condition)
  return traffic_condition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::TrafficCondition >&
QuasiDynamicLane::traffic_condition() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.QuasiDynamicLane.traffic_condition)
  return traffic_condition_;
}

// repeated .holo.map.proto.hfl.MapCondition map_condition = 4;
inline int QuasiDynamicLane::map_condition_size() const {
  return map_condition_.size();
}
inline ::holo::map::proto::hfl::MapCondition* QuasiDynamicLane::mutable_map_condition(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.QuasiDynamicLane.map_condition)
  return map_condition_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::MapCondition >*
QuasiDynamicLane::mutable_map_condition() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.QuasiDynamicLane.map_condition)
  return &map_condition_;
}
inline const ::holo::map::proto::hfl::MapCondition& QuasiDynamicLane::map_condition(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.map_condition)
  return map_condition_.Get(index);
}
inline ::holo::map::proto::hfl::MapCondition* QuasiDynamicLane::add_map_condition() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.QuasiDynamicLane.map_condition)
  return map_condition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::MapCondition >&
QuasiDynamicLane::map_condition() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.QuasiDynamicLane.map_condition)
  return map_condition_;
}

// repeated .holo.map.proto.base.Geofence geofence_condition = 5;
inline int QuasiDynamicLane::geofence_condition_size() const {
  return geofence_condition_.size();
}
inline ::holo::map::proto::base::Geofence* QuasiDynamicLane::mutable_geofence_condition(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.QuasiDynamicLane.geofence_condition)
  return geofence_condition_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::Geofence >*
QuasiDynamicLane::mutable_geofence_condition() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.QuasiDynamicLane.geofence_condition)
  return &geofence_condition_;
}
inline const ::holo::map::proto::base::Geofence& QuasiDynamicLane::geofence_condition(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.geofence_condition)
  return geofence_condition_.Get(index);
}
inline ::holo::map::proto::base::Geofence* QuasiDynamicLane::add_geofence_condition() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.QuasiDynamicLane.geofence_condition)
  return geofence_condition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::Geofence >&
QuasiDynamicLane::geofence_condition() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.QuasiDynamicLane.geofence_condition)
  return geofence_condition_;
}

// repeated uint64 tile_ids = 10 [packed = true];
inline int QuasiDynamicLane::tile_ids_size() const {
  return tile_ids_.size();
}
inline void QuasiDynamicLane::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 QuasiDynamicLane::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.tile_ids)
  return tile_ids_.Get(index);
}
inline void QuasiDynamicLane::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.QuasiDynamicLane.tile_ids)
}
inline void QuasiDynamicLane::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.QuasiDynamicLane.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
QuasiDynamicLane::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.QuasiDynamicLane.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
QuasiDynamicLane::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.QuasiDynamicLane.tile_ids)
  return &tile_ids_;
}

// optional uint64 associated_lane_id = 11;
inline bool QuasiDynamicLane::has_associated_lane_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuasiDynamicLane::set_has_associated_lane_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuasiDynamicLane::clear_has_associated_lane_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuasiDynamicLane::clear_associated_lane_id() {
  associated_lane_id_ = GOOGLE_ULONGLONG(0);
  clear_has_associated_lane_id();
}
inline ::google::protobuf::uint64 QuasiDynamicLane::associated_lane_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.associated_lane_id)
  return associated_lane_id_;
}
inline void QuasiDynamicLane::set_associated_lane_id(::google::protobuf::uint64 value) {
  set_has_associated_lane_id();
  associated_lane_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.QuasiDynamicLane.associated_lane_id)
}

// optional .holo.map.proto.common.Coordinate coordinate = 20;
inline bool QuasiDynamicLane::has_coordinate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuasiDynamicLane::set_has_coordinate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuasiDynamicLane::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::Coordinate& QuasiDynamicLane::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::holo::map::proto::common::Coordinate& QuasiDynamicLane::coordinate() const {
  const ::holo::map::proto::common::Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::Coordinate*>(
      &::holo::map::proto::common::_Coordinate_default_instance_);
}
inline ::holo::map::proto::common::Coordinate* QuasiDynamicLane::release_coordinate() {
  // @@protoc_insertion_point(field_release:holo.map.proto.hfl.QuasiDynamicLane.coordinate)
  clear_has_coordinate();
  ::holo::map::proto::common::Coordinate* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::Coordinate* QuasiDynamicLane::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.QuasiDynamicLane.coordinate)
  return coordinate_;
}
inline void QuasiDynamicLane::set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.hfl.QuasiDynamicLane.coordinate)
}

// optional uint32 zone_id = 21;
inline bool QuasiDynamicLane::has_zone_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuasiDynamicLane::set_has_zone_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuasiDynamicLane::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuasiDynamicLane::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 QuasiDynamicLane::zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.zone_id)
  return zone_id_;
}
inline void QuasiDynamicLane::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.QuasiDynamicLane.zone_id)
}

// optional uint32 extra_zone_id = 22;
inline bool QuasiDynamicLane::has_extra_zone_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuasiDynamicLane::set_has_extra_zone_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuasiDynamicLane::clear_has_extra_zone_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuasiDynamicLane::clear_extra_zone_id() {
  extra_zone_id_ = 0u;
  clear_has_extra_zone_id();
}
inline ::google::protobuf::uint32 QuasiDynamicLane::extra_zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.extra_zone_id)
  return extra_zone_id_;
}
inline void QuasiDynamicLane::set_extra_zone_id(::google::protobuf::uint32 value) {
  set_has_extra_zone_id();
  extra_zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.QuasiDynamicLane.extra_zone_id)
}

// optional bool south_flag = 23;
inline bool QuasiDynamicLane::has_south_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuasiDynamicLane::set_has_south_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuasiDynamicLane::clear_has_south_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuasiDynamicLane::clear_south_flag() {
  south_flag_ = false;
  clear_has_south_flag();
}
inline bool QuasiDynamicLane::south_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.south_flag)
  return south_flag_;
}
inline void QuasiDynamicLane::set_south_flag(bool value) {
  set_has_south_flag();
  south_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.QuasiDynamicLane.south_flag)
}

// repeated .holo.map.proto.common.GeoPoint geometry_points = 24;
inline int QuasiDynamicLane::geometry_points_size() const {
  return geometry_points_.size();
}
inline ::holo::map::proto::common::GeoPoint* QuasiDynamicLane::mutable_geometry_points(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.QuasiDynamicLane.geometry_points)
  return geometry_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
QuasiDynamicLane::mutable_geometry_points() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.QuasiDynamicLane.geometry_points)
  return &geometry_points_;
}
inline const ::holo::map::proto::common::GeoPoint& QuasiDynamicLane::geometry_points(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.QuasiDynamicLane.geometry_points)
  return geometry_points_.Get(index);
}
inline ::holo::map::proto::common::GeoPoint* QuasiDynamicLane::add_geometry_points() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.QuasiDynamicLane.geometry_points)
  return geometry_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
QuasiDynamicLane::geometry_points() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.QuasiDynamicLane.geometry_points)
  return geometry_points_;
}

// map<uint32, .holo.map.proto.common.GeoLine> extra_geometry_points = 25;
inline int QuasiDynamicLane::extra_geometry_points_size() const {
  return extra_geometry_points_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >&
QuasiDynamicLane::extra_geometry_points() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.hfl.QuasiDynamicLane.extra_geometry_points)
  return extra_geometry_points_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >*
QuasiDynamicLane::mutable_extra_geometry_points() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.hfl.QuasiDynamicLane.extra_geometry_points)
  return extra_geometry_points_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hfl
}  // namespace proto
}  // namespace map
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fquasi_5fdynamic_5flane_2eproto
