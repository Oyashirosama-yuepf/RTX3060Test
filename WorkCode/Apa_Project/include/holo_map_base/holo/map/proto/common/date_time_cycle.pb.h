// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/common/date_time_cycle.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fdate_5ftime_5fcycle_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fdate_5ftime_5fcycle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/interval_uint64.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fcommon_2fdate_5ftime_5fcycle_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fcommon_2fdate_5ftime_5fcycle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fcommon_2fdate_5ftime_5fcycle_2eproto
namespace holo {
namespace map {
namespace proto {
namespace common {
class DateTimeCycle;
class DateTimeCycleDefaultTypeInternal;
extern DateTimeCycleDefaultTypeInternal _DateTimeCycle_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::common::DateTimeCycle* Arena::CreateMaybeMessage<::holo::map::proto::common::DateTimeCycle>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace common {

enum DateTimeCycle_CycleType {
  DateTimeCycle_CycleType_CYCLE_TYPE_UNDEFINED = 0,
  DateTimeCycle_CycleType_CYCLE_TYPE_YEAR = 1,
  DateTimeCycle_CycleType_CYCLE_TYPE_MONTH = 2,
  DateTimeCycle_CycleType_CYCLE_TYPE_WEEK = 3,
  DateTimeCycle_CycleType_CYCLE_TYPE_DAY = 4
};
bool DateTimeCycle_CycleType_IsValid(int value);
const DateTimeCycle_CycleType DateTimeCycle_CycleType_CycleType_MIN = DateTimeCycle_CycleType_CYCLE_TYPE_UNDEFINED;
const DateTimeCycle_CycleType DateTimeCycle_CycleType_CycleType_MAX = DateTimeCycle_CycleType_CYCLE_TYPE_DAY;
const int DateTimeCycle_CycleType_CycleType_ARRAYSIZE = DateTimeCycle_CycleType_CycleType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DateTimeCycle_CycleType_descriptor();
inline const ::std::string& DateTimeCycle_CycleType_Name(DateTimeCycle_CycleType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DateTimeCycle_CycleType_descriptor(), value);
}
inline bool DateTimeCycle_CycleType_Parse(
    const ::std::string& name, DateTimeCycle_CycleType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DateTimeCycle_CycleType>(
    DateTimeCycle_CycleType_descriptor(), name, value);
}
enum DateTimeCycle_WorkingTimeType {
  DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_UNDEFINED = 0,
  DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_YEAR = 1,
  DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_MONTH = 2,
  DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_WEEK = 3,
  DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_DAY = 4
};
bool DateTimeCycle_WorkingTimeType_IsValid(int value);
const DateTimeCycle_WorkingTimeType DateTimeCycle_WorkingTimeType_WorkingTimeType_MIN = DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_UNDEFINED;
const DateTimeCycle_WorkingTimeType DateTimeCycle_WorkingTimeType_WorkingTimeType_MAX = DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_DAY;
const int DateTimeCycle_WorkingTimeType_WorkingTimeType_ARRAYSIZE = DateTimeCycle_WorkingTimeType_WorkingTimeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DateTimeCycle_WorkingTimeType_descriptor();
inline const ::std::string& DateTimeCycle_WorkingTimeType_Name(DateTimeCycle_WorkingTimeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DateTimeCycle_WorkingTimeType_descriptor(), value);
}
inline bool DateTimeCycle_WorkingTimeType_Parse(
    const ::std::string& name, DateTimeCycle_WorkingTimeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DateTimeCycle_WorkingTimeType>(
    DateTimeCycle_WorkingTimeType_descriptor(), name, value);
}
enum DateTimeCycle_UnworkingTimeType {
  DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_UNDEFINED = 0,
  DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_YEAR = 1,
  DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_MONTH = 2,
  DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_WEEK = 3,
  DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_DAY = 4
};
bool DateTimeCycle_UnworkingTimeType_IsValid(int value);
const DateTimeCycle_UnworkingTimeType DateTimeCycle_UnworkingTimeType_UnworkingTimeType_MIN = DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_UNDEFINED;
const DateTimeCycle_UnworkingTimeType DateTimeCycle_UnworkingTimeType_UnworkingTimeType_MAX = DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_DAY;
const int DateTimeCycle_UnworkingTimeType_UnworkingTimeType_ARRAYSIZE = DateTimeCycle_UnworkingTimeType_UnworkingTimeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DateTimeCycle_UnworkingTimeType_descriptor();
inline const ::std::string& DateTimeCycle_UnworkingTimeType_Name(DateTimeCycle_UnworkingTimeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DateTimeCycle_UnworkingTimeType_descriptor(), value);
}
inline bool DateTimeCycle_UnworkingTimeType_Parse(
    const ::std::string& name, DateTimeCycle_UnworkingTimeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DateTimeCycle_UnworkingTimeType>(
    DateTimeCycle_UnworkingTimeType_descriptor(), name, value);
}
enum DateTimeCycle_ValidTimeType {
  DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_UNDEFINED = 0,
  DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_YEAR = 1,
  DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_MONTH = 2,
  DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_WEEK = 3,
  DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_DAY = 4
};
bool DateTimeCycle_ValidTimeType_IsValid(int value);
const DateTimeCycle_ValidTimeType DateTimeCycle_ValidTimeType_ValidTimeType_MIN = DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_UNDEFINED;
const DateTimeCycle_ValidTimeType DateTimeCycle_ValidTimeType_ValidTimeType_MAX = DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_DAY;
const int DateTimeCycle_ValidTimeType_ValidTimeType_ARRAYSIZE = DateTimeCycle_ValidTimeType_ValidTimeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DateTimeCycle_ValidTimeType_descriptor();
inline const ::std::string& DateTimeCycle_ValidTimeType_Name(DateTimeCycle_ValidTimeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DateTimeCycle_ValidTimeType_descriptor(), value);
}
inline bool DateTimeCycle_ValidTimeType_Parse(
    const ::std::string& name, DateTimeCycle_ValidTimeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DateTimeCycle_ValidTimeType>(
    DateTimeCycle_ValidTimeType_descriptor(), name, value);
}
// ===================================================================

class DateTimeCycle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.common.DateTimeCycle) */ {
 public:
  DateTimeCycle();
  virtual ~DateTimeCycle();

  DateTimeCycle(const DateTimeCycle& from);

  inline DateTimeCycle& operator=(const DateTimeCycle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTimeCycle(DateTimeCycle&& from) noexcept
    : DateTimeCycle() {
    *this = ::std::move(from);
  }

  inline DateTimeCycle& operator=(DateTimeCycle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DateTimeCycle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTimeCycle* internal_default_instance() {
    return reinterpret_cast<const DateTimeCycle*>(
               &_DateTimeCycle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DateTimeCycle* other);
  friend void swap(DateTimeCycle& a, DateTimeCycle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTimeCycle* New() const final {
    return CreateMaybeMessage<DateTimeCycle>(NULL);
  }

  DateTimeCycle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTimeCycle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTimeCycle& from);
  void MergeFrom(const DateTimeCycle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTimeCycle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DateTimeCycle_CycleType CycleType;
  static const CycleType CYCLE_TYPE_UNDEFINED =
    DateTimeCycle_CycleType_CYCLE_TYPE_UNDEFINED;
  static const CycleType CYCLE_TYPE_YEAR =
    DateTimeCycle_CycleType_CYCLE_TYPE_YEAR;
  static const CycleType CYCLE_TYPE_MONTH =
    DateTimeCycle_CycleType_CYCLE_TYPE_MONTH;
  static const CycleType CYCLE_TYPE_WEEK =
    DateTimeCycle_CycleType_CYCLE_TYPE_WEEK;
  static const CycleType CYCLE_TYPE_DAY =
    DateTimeCycle_CycleType_CYCLE_TYPE_DAY;
  static inline bool CycleType_IsValid(int value) {
    return DateTimeCycle_CycleType_IsValid(value);
  }
  static const CycleType CycleType_MIN =
    DateTimeCycle_CycleType_CycleType_MIN;
  static const CycleType CycleType_MAX =
    DateTimeCycle_CycleType_CycleType_MAX;
  static const int CycleType_ARRAYSIZE =
    DateTimeCycle_CycleType_CycleType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CycleType_descriptor() {
    return DateTimeCycle_CycleType_descriptor();
  }
  static inline const ::std::string& CycleType_Name(CycleType value) {
    return DateTimeCycle_CycleType_Name(value);
  }
  static inline bool CycleType_Parse(const ::std::string& name,
      CycleType* value) {
    return DateTimeCycle_CycleType_Parse(name, value);
  }

  typedef DateTimeCycle_WorkingTimeType WorkingTimeType;
  static const WorkingTimeType WORKING_TIME_TYPE_UNDEFINED =
    DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_UNDEFINED;
  static const WorkingTimeType WORKING_TIME_TYPE_YEAR =
    DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_YEAR;
  static const WorkingTimeType WORKING_TIME_TYPE_MONTH =
    DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_MONTH;
  static const WorkingTimeType WORKING_TIME_TYPE_WEEK =
    DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_WEEK;
  static const WorkingTimeType WORKING_TIME_TYPE_DAY =
    DateTimeCycle_WorkingTimeType_WORKING_TIME_TYPE_DAY;
  static inline bool WorkingTimeType_IsValid(int value) {
    return DateTimeCycle_WorkingTimeType_IsValid(value);
  }
  static const WorkingTimeType WorkingTimeType_MIN =
    DateTimeCycle_WorkingTimeType_WorkingTimeType_MIN;
  static const WorkingTimeType WorkingTimeType_MAX =
    DateTimeCycle_WorkingTimeType_WorkingTimeType_MAX;
  static const int WorkingTimeType_ARRAYSIZE =
    DateTimeCycle_WorkingTimeType_WorkingTimeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WorkingTimeType_descriptor() {
    return DateTimeCycle_WorkingTimeType_descriptor();
  }
  static inline const ::std::string& WorkingTimeType_Name(WorkingTimeType value) {
    return DateTimeCycle_WorkingTimeType_Name(value);
  }
  static inline bool WorkingTimeType_Parse(const ::std::string& name,
      WorkingTimeType* value) {
    return DateTimeCycle_WorkingTimeType_Parse(name, value);
  }

  typedef DateTimeCycle_UnworkingTimeType UnworkingTimeType;
  static const UnworkingTimeType UNWORKING_TIME_TYPE_UNDEFINED =
    DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_UNDEFINED;
  static const UnworkingTimeType UNWORKING_TIME_TYPE_YEAR =
    DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_YEAR;
  static const UnworkingTimeType UNWORKING_TIME_TYPE_MONTH =
    DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_MONTH;
  static const UnworkingTimeType UNWORKING_TIME_TYPE_WEEK =
    DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_WEEK;
  static const UnworkingTimeType UNWORKING_TIME_TYPE_DAY =
    DateTimeCycle_UnworkingTimeType_UNWORKING_TIME_TYPE_DAY;
  static inline bool UnworkingTimeType_IsValid(int value) {
    return DateTimeCycle_UnworkingTimeType_IsValid(value);
  }
  static const UnworkingTimeType UnworkingTimeType_MIN =
    DateTimeCycle_UnworkingTimeType_UnworkingTimeType_MIN;
  static const UnworkingTimeType UnworkingTimeType_MAX =
    DateTimeCycle_UnworkingTimeType_UnworkingTimeType_MAX;
  static const int UnworkingTimeType_ARRAYSIZE =
    DateTimeCycle_UnworkingTimeType_UnworkingTimeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UnworkingTimeType_descriptor() {
    return DateTimeCycle_UnworkingTimeType_descriptor();
  }
  static inline const ::std::string& UnworkingTimeType_Name(UnworkingTimeType value) {
    return DateTimeCycle_UnworkingTimeType_Name(value);
  }
  static inline bool UnworkingTimeType_Parse(const ::std::string& name,
      UnworkingTimeType* value) {
    return DateTimeCycle_UnworkingTimeType_Parse(name, value);
  }

  typedef DateTimeCycle_ValidTimeType ValidTimeType;
  static const ValidTimeType VALID_TIME_TYPE_UNDEFINED =
    DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_UNDEFINED;
  static const ValidTimeType VALID_TIME_TYPE_YEAR =
    DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_YEAR;
  static const ValidTimeType VALID_TIME_TYPE_MONTH =
    DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_MONTH;
  static const ValidTimeType VALID_TIME_TYPE_WEEK =
    DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_WEEK;
  static const ValidTimeType VALID_TIME_TYPE_DAY =
    DateTimeCycle_ValidTimeType_VALID_TIME_TYPE_DAY;
  static inline bool ValidTimeType_IsValid(int value) {
    return DateTimeCycle_ValidTimeType_IsValid(value);
  }
  static const ValidTimeType ValidTimeType_MIN =
    DateTimeCycle_ValidTimeType_ValidTimeType_MIN;
  static const ValidTimeType ValidTimeType_MAX =
    DateTimeCycle_ValidTimeType_ValidTimeType_MAX;
  static const int ValidTimeType_ARRAYSIZE =
    DateTimeCycle_ValidTimeType_ValidTimeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValidTimeType_descriptor() {
    return DateTimeCycle_ValidTimeType_descriptor();
  }
  static inline const ::std::string& ValidTimeType_Name(ValidTimeType value) {
    return DateTimeCycle_ValidTimeType_Name(value);
  }
  static inline bool ValidTimeType_Parse(const ::std::string& name,
      ValidTimeType* value) {
    return DateTimeCycle_ValidTimeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .holo.map.proto.common.IntervalUint64 working_interval = 11;
  int working_interval_size() const;
  void clear_working_interval();
  static const int kWorkingIntervalFieldNumber = 11;
  ::holo::map::proto::common::IntervalUint64* mutable_working_interval(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >*
      mutable_working_interval();
  const ::holo::map::proto::common::IntervalUint64& working_interval(int index) const;
  ::holo::map::proto::common::IntervalUint64* add_working_interval();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >&
      working_interval() const;

  // repeated .holo.map.proto.common.IntervalUint64 unworking_interval = 13;
  int unworking_interval_size() const;
  void clear_unworking_interval();
  static const int kUnworkingIntervalFieldNumber = 13;
  ::holo::map::proto::common::IntervalUint64* mutable_unworking_interval(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >*
      mutable_unworking_interval();
  const ::holo::map::proto::common::IntervalUint64& unworking_interval(int index) const;
  ::holo::map::proto::common::IntervalUint64* add_unworking_interval();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >&
      unworking_interval() const;

  // repeated .holo.map.proto.common.IntervalUint64 valid_interval = 15;
  int valid_interval_size() const;
  void clear_valid_interval();
  static const int kValidIntervalFieldNumber = 15;
  ::holo::map::proto::common::IntervalUint64* mutable_valid_interval(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >*
      mutable_valid_interval();
  const ::holo::map::proto::common::IntervalUint64& valid_interval(int index) const;
  ::holo::map::proto::common::IntervalUint64* add_valid_interval();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >&
      valid_interval() const;

  // optional .holo.map.proto.common.DateTimeCycle.CycleType cycle_type = 1;
  bool has_cycle_type() const;
  void clear_cycle_type();
  static const int kCycleTypeFieldNumber = 1;
  ::holo::map::proto::common::DateTimeCycle_CycleType cycle_type() const;
  void set_cycle_type(::holo::map::proto::common::DateTimeCycle_CycleType value);

  // optional .holo.map.proto.common.DateTimeCycle.WorkingTimeType working_time_type = 12;
  bool has_working_time_type() const;
  void clear_working_time_type();
  static const int kWorkingTimeTypeFieldNumber = 12;
  ::holo::map::proto::common::DateTimeCycle_WorkingTimeType working_time_type() const;
  void set_working_time_type(::holo::map::proto::common::DateTimeCycle_WorkingTimeType value);

  // optional .holo.map.proto.common.DateTimeCycle.UnworkingTimeType unworking_time_type = 14;
  bool has_unworking_time_type() const;
  void clear_unworking_time_type();
  static const int kUnworkingTimeTypeFieldNumber = 14;
  ::holo::map::proto::common::DateTimeCycle_UnworkingTimeType unworking_time_type() const;
  void set_unworking_time_type(::holo::map::proto::common::DateTimeCycle_UnworkingTimeType value);

  // optional .holo.map.proto.common.DateTimeCycle.ValidTimeType valid_time_type = 16;
  bool has_valid_time_type() const;
  void clear_valid_time_type();
  static const int kValidTimeTypeFieldNumber = 16;
  ::holo::map::proto::common::DateTimeCycle_ValidTimeType valid_time_type() const;
  void set_valid_time_type(::holo::map::proto::common::DateTimeCycle_ValidTimeType value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.common.DateTimeCycle)
 private:
  void set_has_cycle_type();
  void clear_has_cycle_type();
  void set_has_working_time_type();
  void clear_has_working_time_type();
  void set_has_unworking_time_type();
  void clear_has_unworking_time_type();
  void set_has_valid_time_type();
  void clear_has_valid_time_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 > working_interval_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 > unworking_interval_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 > valid_interval_;
  int cycle_type_;
  int working_time_type_;
  int unworking_time_type_;
  int valid_time_type_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fcommon_2fdate_5ftime_5fcycle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DateTimeCycle

// optional .holo.map.proto.common.DateTimeCycle.CycleType cycle_type = 1;
inline bool DateTimeCycle::has_cycle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DateTimeCycle::set_has_cycle_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DateTimeCycle::clear_has_cycle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DateTimeCycle::clear_cycle_type() {
  cycle_type_ = 0;
  clear_has_cycle_type();
}
inline ::holo::map::proto::common::DateTimeCycle_CycleType DateTimeCycle::cycle_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.DateTimeCycle.cycle_type)
  return static_cast< ::holo::map::proto::common::DateTimeCycle_CycleType >(cycle_type_);
}
inline void DateTimeCycle::set_cycle_type(::holo::map::proto::common::DateTimeCycle_CycleType value) {
  assert(::holo::map::proto::common::DateTimeCycle_CycleType_IsValid(value));
  set_has_cycle_type();
  cycle_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.DateTimeCycle.cycle_type)
}

// repeated .holo.map.proto.common.IntervalUint64 working_interval = 11;
inline int DateTimeCycle::working_interval_size() const {
  return working_interval_.size();
}
inline ::holo::map::proto::common::IntervalUint64* DateTimeCycle::mutable_working_interval(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.DateTimeCycle.working_interval)
  return working_interval_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >*
DateTimeCycle::mutable_working_interval() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.DateTimeCycle.working_interval)
  return &working_interval_;
}
inline const ::holo::map::proto::common::IntervalUint64& DateTimeCycle::working_interval(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.DateTimeCycle.working_interval)
  return working_interval_.Get(index);
}
inline ::holo::map::proto::common::IntervalUint64* DateTimeCycle::add_working_interval() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.DateTimeCycle.working_interval)
  return working_interval_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >&
DateTimeCycle::working_interval() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.DateTimeCycle.working_interval)
  return working_interval_;
}

// optional .holo.map.proto.common.DateTimeCycle.WorkingTimeType working_time_type = 12;
inline bool DateTimeCycle::has_working_time_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DateTimeCycle::set_has_working_time_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DateTimeCycle::clear_has_working_time_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DateTimeCycle::clear_working_time_type() {
  working_time_type_ = 0;
  clear_has_working_time_type();
}
inline ::holo::map::proto::common::DateTimeCycle_WorkingTimeType DateTimeCycle::working_time_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.DateTimeCycle.working_time_type)
  return static_cast< ::holo::map::proto::common::DateTimeCycle_WorkingTimeType >(working_time_type_);
}
inline void DateTimeCycle::set_working_time_type(::holo::map::proto::common::DateTimeCycle_WorkingTimeType value) {
  assert(::holo::map::proto::common::DateTimeCycle_WorkingTimeType_IsValid(value));
  set_has_working_time_type();
  working_time_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.DateTimeCycle.working_time_type)
}

// repeated .holo.map.proto.common.IntervalUint64 unworking_interval = 13;
inline int DateTimeCycle::unworking_interval_size() const {
  return unworking_interval_.size();
}
inline ::holo::map::proto::common::IntervalUint64* DateTimeCycle::mutable_unworking_interval(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.DateTimeCycle.unworking_interval)
  return unworking_interval_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >*
DateTimeCycle::mutable_unworking_interval() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.DateTimeCycle.unworking_interval)
  return &unworking_interval_;
}
inline const ::holo::map::proto::common::IntervalUint64& DateTimeCycle::unworking_interval(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.DateTimeCycle.unworking_interval)
  return unworking_interval_.Get(index);
}
inline ::holo::map::proto::common::IntervalUint64* DateTimeCycle::add_unworking_interval() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.DateTimeCycle.unworking_interval)
  return unworking_interval_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >&
DateTimeCycle::unworking_interval() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.DateTimeCycle.unworking_interval)
  return unworking_interval_;
}

// optional .holo.map.proto.common.DateTimeCycle.UnworkingTimeType unworking_time_type = 14;
inline bool DateTimeCycle::has_unworking_time_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DateTimeCycle::set_has_unworking_time_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DateTimeCycle::clear_has_unworking_time_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DateTimeCycle::clear_unworking_time_type() {
  unworking_time_type_ = 0;
  clear_has_unworking_time_type();
}
inline ::holo::map::proto::common::DateTimeCycle_UnworkingTimeType DateTimeCycle::unworking_time_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.DateTimeCycle.unworking_time_type)
  return static_cast< ::holo::map::proto::common::DateTimeCycle_UnworkingTimeType >(unworking_time_type_);
}
inline void DateTimeCycle::set_unworking_time_type(::holo::map::proto::common::DateTimeCycle_UnworkingTimeType value) {
  assert(::holo::map::proto::common::DateTimeCycle_UnworkingTimeType_IsValid(value));
  set_has_unworking_time_type();
  unworking_time_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.DateTimeCycle.unworking_time_type)
}

// repeated .holo.map.proto.common.IntervalUint64 valid_interval = 15;
inline int DateTimeCycle::valid_interval_size() const {
  return valid_interval_.size();
}
inline ::holo::map::proto::common::IntervalUint64* DateTimeCycle::mutable_valid_interval(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.DateTimeCycle.valid_interval)
  return valid_interval_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >*
DateTimeCycle::mutable_valid_interval() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.DateTimeCycle.valid_interval)
  return &valid_interval_;
}
inline const ::holo::map::proto::common::IntervalUint64& DateTimeCycle::valid_interval(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.DateTimeCycle.valid_interval)
  return valid_interval_.Get(index);
}
inline ::holo::map::proto::common::IntervalUint64* DateTimeCycle::add_valid_interval() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.DateTimeCycle.valid_interval)
  return valid_interval_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >&
DateTimeCycle::valid_interval() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.DateTimeCycle.valid_interval)
  return valid_interval_;
}

// optional .holo.map.proto.common.DateTimeCycle.ValidTimeType valid_time_type = 16;
inline bool DateTimeCycle::has_valid_time_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DateTimeCycle::set_has_valid_time_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DateTimeCycle::clear_has_valid_time_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DateTimeCycle::clear_valid_time_type() {
  valid_time_type_ = 0;
  clear_has_valid_time_type();
}
inline ::holo::map::proto::common::DateTimeCycle_ValidTimeType DateTimeCycle::valid_time_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.DateTimeCycle.valid_time_type)
  return static_cast< ::holo::map::proto::common::DateTimeCycle_ValidTimeType >(valid_time_type_);
}
inline void DateTimeCycle::set_valid_time_type(::holo::map::proto::common::DateTimeCycle_ValidTimeType value) {
  assert(::holo::map::proto::common::DateTimeCycle_ValidTimeType_IsValid(value));
  set_has_valid_time_type();
  valid_time_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.DateTimeCycle.valid_time_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::common::DateTimeCycle_CycleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::common::DateTimeCycle_CycleType>() {
  return ::holo::map::proto::common::DateTimeCycle_CycleType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::common::DateTimeCycle_WorkingTimeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::common::DateTimeCycle_WorkingTimeType>() {
  return ::holo::map::proto::common::DateTimeCycle_WorkingTimeType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::common::DateTimeCycle_UnworkingTimeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::common::DateTimeCycle_UnworkingTimeType>() {
  return ::holo::map::proto::common::DateTimeCycle_UnworkingTimeType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::common::DateTimeCycle_ValidTimeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::common::DateTimeCycle_ValidTimeType>() {
  return ::holo::map::proto::common::DateTimeCycle_ValidTimeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fdate_5ftime_5fcycle_2eproto
