// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/common/coordinate.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fcoordinate_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fcoordinate_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fcommon_2fcoordinate_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fcommon_2fcoordinate_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fcommon_2fcoordinate_2eproto
namespace holo {
namespace map {
namespace proto {
namespace common {
class Coordinate;
class CoordinateDefaultTypeInternal;
extern CoordinateDefaultTypeInternal _Coordinate_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::common::Coordinate* Arena::CreateMaybeMessage<::holo::map::proto::common::Coordinate>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace common {

enum Coordinate_CoordinateType {
  Coordinate_CoordinateType_COORDINATE_TYPE_UNDEFINED = 0,
  Coordinate_CoordinateType_COORDINATE_TYPE_WGS84 = 1,
  Coordinate_CoordinateType_COORDINATE_TYPE_CGCS2000 = 2,
  Coordinate_CoordinateType_COORDINATE_TYPE_GCJ02 = 3,
  Coordinate_CoordinateType_COORDINATE_TYPE_UTM6 = 4,
  Coordinate_CoordinateType_COORDINATE_TYPE_UTM3 = 5,
  Coordinate_CoordinateType_COORDINATE_TYPE_WEBMOCATOR = 6,
  Coordinate_CoordinateType_COORDINATE_TYPE_LOCAL = 7,
  Coordinate_CoordinateType_COORDINATE_TYPE_OTHER = 99
};
bool Coordinate_CoordinateType_IsValid(int value);
const Coordinate_CoordinateType Coordinate_CoordinateType_CoordinateType_MIN = Coordinate_CoordinateType_COORDINATE_TYPE_UNDEFINED;
const Coordinate_CoordinateType Coordinate_CoordinateType_CoordinateType_MAX = Coordinate_CoordinateType_COORDINATE_TYPE_OTHER;
const int Coordinate_CoordinateType_CoordinateType_ARRAYSIZE = Coordinate_CoordinateType_CoordinateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Coordinate_CoordinateType_descriptor();
inline const ::std::string& Coordinate_CoordinateType_Name(Coordinate_CoordinateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Coordinate_CoordinateType_descriptor(), value);
}
inline bool Coordinate_CoordinateType_Parse(
    const ::std::string& name, Coordinate_CoordinateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Coordinate_CoordinateType>(
    Coordinate_CoordinateType_descriptor(), name, value);
}
// ===================================================================

class Coordinate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.common.Coordinate) */ {
 public:
  Coordinate();
  virtual ~Coordinate();

  Coordinate(const Coordinate& from);

  inline Coordinate& operator=(const Coordinate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Coordinate(Coordinate&& from) noexcept
    : Coordinate() {
    *this = ::std::move(from);
  }

  inline Coordinate& operator=(Coordinate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Coordinate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coordinate* internal_default_instance() {
    return reinterpret_cast<const Coordinate*>(
               &_Coordinate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Coordinate* other);
  friend void swap(Coordinate& a, Coordinate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Coordinate* New() const final {
    return CreateMaybeMessage<Coordinate>(NULL);
  }

  Coordinate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Coordinate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Coordinate& from);
  void MergeFrom(const Coordinate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Coordinate_CoordinateType CoordinateType;
  static const CoordinateType COORDINATE_TYPE_UNDEFINED =
    Coordinate_CoordinateType_COORDINATE_TYPE_UNDEFINED;
  static const CoordinateType COORDINATE_TYPE_WGS84 =
    Coordinate_CoordinateType_COORDINATE_TYPE_WGS84;
  static const CoordinateType COORDINATE_TYPE_CGCS2000 =
    Coordinate_CoordinateType_COORDINATE_TYPE_CGCS2000;
  static const CoordinateType COORDINATE_TYPE_GCJ02 =
    Coordinate_CoordinateType_COORDINATE_TYPE_GCJ02;
  static const CoordinateType COORDINATE_TYPE_UTM6 =
    Coordinate_CoordinateType_COORDINATE_TYPE_UTM6;
  static const CoordinateType COORDINATE_TYPE_UTM3 =
    Coordinate_CoordinateType_COORDINATE_TYPE_UTM3;
  static const CoordinateType COORDINATE_TYPE_WEBMOCATOR =
    Coordinate_CoordinateType_COORDINATE_TYPE_WEBMOCATOR;
  static const CoordinateType COORDINATE_TYPE_LOCAL =
    Coordinate_CoordinateType_COORDINATE_TYPE_LOCAL;
  static const CoordinateType COORDINATE_TYPE_OTHER =
    Coordinate_CoordinateType_COORDINATE_TYPE_OTHER;
  static inline bool CoordinateType_IsValid(int value) {
    return Coordinate_CoordinateType_IsValid(value);
  }
  static const CoordinateType CoordinateType_MIN =
    Coordinate_CoordinateType_CoordinateType_MIN;
  static const CoordinateType CoordinateType_MAX =
    Coordinate_CoordinateType_CoordinateType_MAX;
  static const int CoordinateType_ARRAYSIZE =
    Coordinate_CoordinateType_CoordinateType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CoordinateType_descriptor() {
    return Coordinate_CoordinateType_descriptor();
  }
  static inline const ::std::string& CoordinateType_Name(CoordinateType value) {
    return Coordinate_CoordinateType_Name(value);
  }
  static inline bool CoordinateType_Parse(const ::std::string& name,
      CoordinateType* value) {
    return Coordinate_CoordinateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .holo.map.proto.common.Coordinate.CoordinateType coordinate_type = 1;
  bool has_coordinate_type() const;
  void clear_coordinate_type();
  static const int kCoordinateTypeFieldNumber = 1;
  ::holo::map::proto::common::Coordinate_CoordinateType coordinate_type() const;
  void set_coordinate_type(::holo::map::proto::common::Coordinate_CoordinateType value);

  // optional uint32 utm_zone_id = 2;
  bool has_utm_zone_id() const;
  void clear_utm_zone_id();
  static const int kUtmZoneIdFieldNumber = 2;
  ::google::protobuf::uint32 utm_zone_id() const;
  void set_utm_zone_id(::google::protobuf::uint32 value);

  // optional bool utm_south_flag = 3;
  bool has_utm_south_flag() const;
  void clear_utm_south_flag();
  static const int kUtmSouthFlagFieldNumber = 3;
  bool utm_south_flag() const;
  void set_utm_south_flag(bool value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.common.Coordinate)
 private:
  void set_has_coordinate_type();
  void clear_has_coordinate_type();
  void set_has_utm_zone_id();
  void clear_has_utm_zone_id();
  void set_has_utm_south_flag();
  void clear_has_utm_south_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int coordinate_type_;
  ::google::protobuf::uint32 utm_zone_id_;
  bool utm_south_flag_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fcommon_2fcoordinate_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinate

// optional .holo.map.proto.common.Coordinate.CoordinateType coordinate_type = 1;
inline bool Coordinate::has_coordinate_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Coordinate::set_has_coordinate_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Coordinate::clear_has_coordinate_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Coordinate::clear_coordinate_type() {
  coordinate_type_ = 0;
  clear_has_coordinate_type();
}
inline ::holo::map::proto::common::Coordinate_CoordinateType Coordinate::coordinate_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.Coordinate.coordinate_type)
  return static_cast< ::holo::map::proto::common::Coordinate_CoordinateType >(coordinate_type_);
}
inline void Coordinate::set_coordinate_type(::holo::map::proto::common::Coordinate_CoordinateType value) {
  assert(::holo::map::proto::common::Coordinate_CoordinateType_IsValid(value));
  set_has_coordinate_type();
  coordinate_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.Coordinate.coordinate_type)
}

// optional uint32 utm_zone_id = 2;
inline bool Coordinate::has_utm_zone_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Coordinate::set_has_utm_zone_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Coordinate::clear_has_utm_zone_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Coordinate::clear_utm_zone_id() {
  utm_zone_id_ = 0u;
  clear_has_utm_zone_id();
}
inline ::google::protobuf::uint32 Coordinate::utm_zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.Coordinate.utm_zone_id)
  return utm_zone_id_;
}
inline void Coordinate::set_utm_zone_id(::google::protobuf::uint32 value) {
  set_has_utm_zone_id();
  utm_zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.Coordinate.utm_zone_id)
}

// optional bool utm_south_flag = 3;
inline bool Coordinate::has_utm_south_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Coordinate::set_has_utm_south_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Coordinate::clear_has_utm_south_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Coordinate::clear_utm_south_flag() {
  utm_south_flag_ = false;
  clear_has_utm_south_flag();
}
inline bool Coordinate::utm_south_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.Coordinate.utm_south_flag)
  return utm_south_flag_;
}
inline void Coordinate::set_utm_south_flag(bool value) {
  set_has_utm_south_flag();
  utm_south_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.Coordinate.utm_south_flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::common::Coordinate_CoordinateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::common::Coordinate_CoordinateType>() {
  return ::holo::map::proto::common::Coordinate_CoordinateType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fcoordinate_2eproto
