// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/common/geo_box4.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fgeo_5fbox4_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fgeo_5fbox4_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/geo_point.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fbox4_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fbox4_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fbox4_2eproto
namespace holo {
namespace map {
namespace proto {
namespace common {
class GeoBox4;
class GeoBox4DefaultTypeInternal;
extern GeoBox4DefaultTypeInternal _GeoBox4_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::common::GeoBox4* Arena::CreateMaybeMessage<::holo::map::proto::common::GeoBox4>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace common {

// ===================================================================

class GeoBox4 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.common.GeoBox4) */ {
 public:
  GeoBox4();
  virtual ~GeoBox4();

  GeoBox4(const GeoBox4& from);

  inline GeoBox4& operator=(const GeoBox4& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoBox4(GeoBox4&& from) noexcept
    : GeoBox4() {
    *this = ::std::move(from);
  }

  inline GeoBox4& operator=(GeoBox4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoBox4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoBox4* internal_default_instance() {
    return reinterpret_cast<const GeoBox4*>(
               &_GeoBox4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GeoBox4* other);
  friend void swap(GeoBox4& a, GeoBox4& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoBox4* New() const final {
    return CreateMaybeMessage<GeoBox4>(NULL);
  }

  GeoBox4* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoBox4>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoBox4& from);
  void MergeFrom(const GeoBox4& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoBox4* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .holo.map.proto.common.GeoPoint left_back_bottom = 1;
  bool has_left_back_bottom() const;
  void clear_left_back_bottom();
  static const int kLeftBackBottomFieldNumber = 1;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_left_back_bottom() const;
  public:
  const ::holo::map::proto::common::GeoPoint& left_back_bottom() const;
  ::holo::map::proto::common::GeoPoint* release_left_back_bottom();
  ::holo::map::proto::common::GeoPoint* mutable_left_back_bottom();
  void set_allocated_left_back_bottom(::holo::map::proto::common::GeoPoint* left_back_bottom);

  // optional .holo.map.proto.common.GeoPoint left_back_top = 2;
  bool has_left_back_top() const;
  void clear_left_back_top();
  static const int kLeftBackTopFieldNumber = 2;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_left_back_top() const;
  public:
  const ::holo::map::proto::common::GeoPoint& left_back_top() const;
  ::holo::map::proto::common::GeoPoint* release_left_back_top();
  ::holo::map::proto::common::GeoPoint* mutable_left_back_top();
  void set_allocated_left_back_top(::holo::map::proto::common::GeoPoint* left_back_top);

  // optional .holo.map.proto.common.GeoPoint right_forward_top = 3;
  bool has_right_forward_top() const;
  void clear_right_forward_top();
  static const int kRightForwardTopFieldNumber = 3;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_right_forward_top() const;
  public:
  const ::holo::map::proto::common::GeoPoint& right_forward_top() const;
  ::holo::map::proto::common::GeoPoint* release_right_forward_top();
  ::holo::map::proto::common::GeoPoint* mutable_right_forward_top();
  void set_allocated_right_forward_top(::holo::map::proto::common::GeoPoint* right_forward_top);

  // optional .holo.map.proto.common.GeoPoint right_forward_bottom = 4;
  bool has_right_forward_bottom() const;
  void clear_right_forward_bottom();
  static const int kRightForwardBottomFieldNumber = 4;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_right_forward_bottom() const;
  public:
  const ::holo::map::proto::common::GeoPoint& right_forward_bottom() const;
  ::holo::map::proto::common::GeoPoint* release_right_forward_bottom();
  ::holo::map::proto::common::GeoPoint* mutable_right_forward_bottom();
  void set_allocated_right_forward_bottom(::holo::map::proto::common::GeoPoint* right_forward_bottom);

  // @@protoc_insertion_point(class_scope:holo.map.proto.common.GeoBox4)
 private:
  void set_has_left_back_bottom();
  void clear_has_left_back_bottom();
  void set_has_left_back_top();
  void clear_has_left_back_top();
  void set_has_right_forward_top();
  void clear_has_right_forward_top();
  void set_has_right_forward_bottom();
  void clear_has_right_forward_bottom();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::holo::map::proto::common::GeoPoint* left_back_bottom_;
  ::holo::map::proto::common::GeoPoint* left_back_top_;
  ::holo::map::proto::common::GeoPoint* right_forward_top_;
  ::holo::map::proto::common::GeoPoint* right_forward_bottom_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fbox4_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeoBox4

// optional .holo.map.proto.common.GeoPoint left_back_bottom = 1;
inline bool GeoBox4::has_left_back_bottom() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoBox4::set_has_left_back_bottom() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoBox4::clear_has_left_back_bottom() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::GeoPoint& GeoBox4::_internal_left_back_bottom() const {
  return *left_back_bottom_;
}
inline const ::holo::map::proto::common::GeoPoint& GeoBox4::left_back_bottom() const {
  const ::holo::map::proto::common::GeoPoint* p = left_back_bottom_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoBox4.left_back_bottom)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* GeoBox4::release_left_back_bottom() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.GeoBox4.left_back_bottom)
  clear_has_left_back_bottom();
  ::holo::map::proto::common::GeoPoint* temp = left_back_bottom_;
  left_back_bottom_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* GeoBox4::mutable_left_back_bottom() {
  set_has_left_back_bottom();
  if (left_back_bottom_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    left_back_bottom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoBox4.left_back_bottom)
  return left_back_bottom_;
}
inline void GeoBox4::set_allocated_left_back_bottom(::holo::map::proto::common::GeoPoint* left_back_bottom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(left_back_bottom_);
  }
  if (left_back_bottom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_back_bottom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_back_bottom, submessage_arena);
    }
    set_has_left_back_bottom();
  } else {
    clear_has_left_back_bottom();
  }
  left_back_bottom_ = left_back_bottom;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.GeoBox4.left_back_bottom)
}

// optional .holo.map.proto.common.GeoPoint left_back_top = 2;
inline bool GeoBox4::has_left_back_top() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoBox4::set_has_left_back_top() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoBox4::clear_has_left_back_top() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::GeoPoint& GeoBox4::_internal_left_back_top() const {
  return *left_back_top_;
}
inline const ::holo::map::proto::common::GeoPoint& GeoBox4::left_back_top() const {
  const ::holo::map::proto::common::GeoPoint* p = left_back_top_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoBox4.left_back_top)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* GeoBox4::release_left_back_top() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.GeoBox4.left_back_top)
  clear_has_left_back_top();
  ::holo::map::proto::common::GeoPoint* temp = left_back_top_;
  left_back_top_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* GeoBox4::mutable_left_back_top() {
  set_has_left_back_top();
  if (left_back_top_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    left_back_top_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoBox4.left_back_top)
  return left_back_top_;
}
inline void GeoBox4::set_allocated_left_back_top(::holo::map::proto::common::GeoPoint* left_back_top) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(left_back_top_);
  }
  if (left_back_top) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      left_back_top = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, left_back_top, submessage_arena);
    }
    set_has_left_back_top();
  } else {
    clear_has_left_back_top();
  }
  left_back_top_ = left_back_top;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.GeoBox4.left_back_top)
}

// optional .holo.map.proto.common.GeoPoint right_forward_top = 3;
inline bool GeoBox4::has_right_forward_top() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeoBox4::set_has_right_forward_top() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GeoBox4::clear_has_right_forward_top() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::holo::map::proto::common::GeoPoint& GeoBox4::_internal_right_forward_top() const {
  return *right_forward_top_;
}
inline const ::holo::map::proto::common::GeoPoint& GeoBox4::right_forward_top() const {
  const ::holo::map::proto::common::GeoPoint* p = right_forward_top_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoBox4.right_forward_top)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* GeoBox4::release_right_forward_top() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.GeoBox4.right_forward_top)
  clear_has_right_forward_top();
  ::holo::map::proto::common::GeoPoint* temp = right_forward_top_;
  right_forward_top_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* GeoBox4::mutable_right_forward_top() {
  set_has_right_forward_top();
  if (right_forward_top_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    right_forward_top_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoBox4.right_forward_top)
  return right_forward_top_;
}
inline void GeoBox4::set_allocated_right_forward_top(::holo::map::proto::common::GeoPoint* right_forward_top) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_forward_top_);
  }
  if (right_forward_top) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_forward_top = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_forward_top, submessage_arena);
    }
    set_has_right_forward_top();
  } else {
    clear_has_right_forward_top();
  }
  right_forward_top_ = right_forward_top;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.GeoBox4.right_forward_top)
}

// optional .holo.map.proto.common.GeoPoint right_forward_bottom = 4;
inline bool GeoBox4::has_right_forward_bottom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GeoBox4::set_has_right_forward_bottom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GeoBox4::clear_has_right_forward_bottom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::holo::map::proto::common::GeoPoint& GeoBox4::_internal_right_forward_bottom() const {
  return *right_forward_bottom_;
}
inline const ::holo::map::proto::common::GeoPoint& GeoBox4::right_forward_bottom() const {
  const ::holo::map::proto::common::GeoPoint* p = right_forward_bottom_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoBox4.right_forward_bottom)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* GeoBox4::release_right_forward_bottom() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.GeoBox4.right_forward_bottom)
  clear_has_right_forward_bottom();
  ::holo::map::proto::common::GeoPoint* temp = right_forward_bottom_;
  right_forward_bottom_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* GeoBox4::mutable_right_forward_bottom() {
  set_has_right_forward_bottom();
  if (right_forward_bottom_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    right_forward_bottom_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoBox4.right_forward_bottom)
  return right_forward_bottom_;
}
inline void GeoBox4::set_allocated_right_forward_bottom(::holo::map::proto::common::GeoPoint* right_forward_bottom) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(right_forward_bottom_);
  }
  if (right_forward_bottom) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      right_forward_bottom = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, right_forward_bottom, submessage_arena);
    }
    set_has_right_forward_bottom();
  } else {
    clear_has_right_forward_bottom();
  }
  right_forward_bottom_ = right_forward_bottom;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.GeoBox4.right_forward_bottom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fgeo_5fbox4_2eproto
