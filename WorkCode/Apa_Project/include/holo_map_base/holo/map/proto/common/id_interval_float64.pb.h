// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/common/id_interval_float64.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fid_5finterval_5ffloat64_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fid_5finterval_5ffloat64_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/interval_float64.pb.h"
#include "holo/map/proto/common/interval_type.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fcommon_2fid_5finterval_5ffloat64_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fcommon_2fid_5finterval_5ffloat64_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fcommon_2fid_5finterval_5ffloat64_2eproto
namespace holo {
namespace map {
namespace proto {
namespace common {
class IdIntervalFloat64;
class IdIntervalFloat64DefaultTypeInternal;
extern IdIntervalFloat64DefaultTypeInternal _IdIntervalFloat64_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::common::IdIntervalFloat64* Arena::CreateMaybeMessage<::holo::map::proto::common::IdIntervalFloat64>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace common {

// ===================================================================

class IdIntervalFloat64 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.common.IdIntervalFloat64) */ {
 public:
  IdIntervalFloat64();
  virtual ~IdIntervalFloat64();

  IdIntervalFloat64(const IdIntervalFloat64& from);

  inline IdIntervalFloat64& operator=(const IdIntervalFloat64& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdIntervalFloat64(IdIntervalFloat64&& from) noexcept
    : IdIntervalFloat64() {
    *this = ::std::move(from);
  }

  inline IdIntervalFloat64& operator=(IdIntervalFloat64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IdIntervalFloat64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdIntervalFloat64* internal_default_instance() {
    return reinterpret_cast<const IdIntervalFloat64*>(
               &_IdIntervalFloat64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IdIntervalFloat64* other);
  friend void swap(IdIntervalFloat64& a, IdIntervalFloat64& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdIntervalFloat64* New() const final {
    return CreateMaybeMessage<IdIntervalFloat64>(NULL);
  }

  IdIntervalFloat64* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IdIntervalFloat64>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IdIntervalFloat64& from);
  void MergeFrom(const IdIntervalFloat64& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdIntervalFloat64* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .holo.map.proto.common.IntervalType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  private:
  const ::holo::map::proto::common::IntervalType& _internal_type() const;
  public:
  const ::holo::map::proto::common::IntervalType& type() const;
  ::holo::map::proto::common::IntervalType* release_type();
  ::holo::map::proto::common::IntervalType* mutable_type();
  void set_allocated_type(::holo::map::proto::common::IntervalType* type);

  // optional .holo.map.proto.common.IntervalFloat64 interval = 3;
  bool has_interval() const;
  void clear_interval();
  static const int kIntervalFieldNumber = 3;
  private:
  const ::holo::map::proto::common::IntervalFloat64& _internal_interval() const;
  public:
  const ::holo::map::proto::common::IntervalFloat64& interval() const;
  ::holo::map::proto::common::IntervalFloat64* release_interval();
  ::holo::map::proto::common::IntervalFloat64* mutable_interval();
  void set_allocated_interval(::holo::map::proto::common::IntervalFloat64* interval);

  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.common.IdIntervalFloat64)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_interval();
  void clear_has_interval();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::holo::map::proto::common::IntervalType* type_;
  ::holo::map::proto::common::IntervalFloat64* interval_;
  ::google::protobuf::uint64 id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fcommon_2fid_5finterval_5ffloat64_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IdIntervalFloat64

// optional uint64 id = 1;
inline bool IdIntervalFloat64::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IdIntervalFloat64::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IdIntervalFloat64::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IdIntervalFloat64::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 IdIntervalFloat64::id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.IdIntervalFloat64.id)
  return id_;
}
inline void IdIntervalFloat64::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.IdIntervalFloat64.id)
}

// optional .holo.map.proto.common.IntervalType type = 2;
inline bool IdIntervalFloat64::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IdIntervalFloat64::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IdIntervalFloat64::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::IntervalType& IdIntervalFloat64::_internal_type() const {
  return *type_;
}
inline const ::holo::map::proto::common::IntervalType& IdIntervalFloat64::type() const {
  const ::holo::map::proto::common::IntervalType* p = type_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.IdIntervalFloat64.type)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::IntervalType*>(
      &::holo::map::proto::common::_IntervalType_default_instance_);
}
inline ::holo::map::proto::common::IntervalType* IdIntervalFloat64::release_type() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.IdIntervalFloat64.type)
  clear_has_type();
  ::holo::map::proto::common::IntervalType* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::IntervalType* IdIntervalFloat64::mutable_type() {
  set_has_type();
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::IntervalType>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.IdIntervalFloat64.type)
  return type_;
}
inline void IdIntervalFloat64::set_allocated_type(::holo::map::proto::common::IntervalType* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
  } else {
    clear_has_type();
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.IdIntervalFloat64.type)
}

// optional .holo.map.proto.common.IntervalFloat64 interval = 3;
inline bool IdIntervalFloat64::has_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IdIntervalFloat64::set_has_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IdIntervalFloat64::clear_has_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::IntervalFloat64& IdIntervalFloat64::_internal_interval() const {
  return *interval_;
}
inline const ::holo::map::proto::common::IntervalFloat64& IdIntervalFloat64::interval() const {
  const ::holo::map::proto::common::IntervalFloat64* p = interval_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.IdIntervalFloat64.interval)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::IntervalFloat64*>(
      &::holo::map::proto::common::_IntervalFloat64_default_instance_);
}
inline ::holo::map::proto::common::IntervalFloat64* IdIntervalFloat64::release_interval() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.IdIntervalFloat64.interval)
  clear_has_interval();
  ::holo::map::proto::common::IntervalFloat64* temp = interval_;
  interval_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::IntervalFloat64* IdIntervalFloat64::mutable_interval() {
  set_has_interval();
  if (interval_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::IntervalFloat64>(GetArenaNoVirtual());
    interval_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.IdIntervalFloat64.interval)
  return interval_;
}
inline void IdIntervalFloat64::set_allocated_interval(::holo::map::proto::common::IntervalFloat64* interval) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interval_);
  }
  if (interval) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interval = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    set_has_interval();
  } else {
    clear_has_interval();
  }
  interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.IdIntervalFloat64.interval)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fid_5finterval_5ffloat64_2eproto
