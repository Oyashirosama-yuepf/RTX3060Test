// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/navigation/routing_path_element.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fnavigation_2frouting_5fpath_5felement_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fnavigation_2frouting_5fpath_5felement_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fnavigation_2frouting_5fpath_5felement_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fnavigation_2frouting_5fpath_5felement_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fnavigation_2frouting_5fpath_5felement_2eproto
namespace holo {
namespace map {
namespace proto {
namespace navigation {
class RoutingPathElement;
class RoutingPathElementDefaultTypeInternal;
extern RoutingPathElementDefaultTypeInternal _RoutingPathElement_default_instance_;
}  // namespace navigation
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::navigation::RoutingPathElement* Arena::CreateMaybeMessage<::holo::map::proto::navigation::RoutingPathElement>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace navigation {

enum RoutingPathElement_NavigationType {
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_UNKNOWN = 0,
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_REGULAR = 1,
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_NAVIGATION_START = 2,
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_NAVIGATION_END = 3,
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_NAVIGATION_START_END = 4,
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_RESERVE_1 = 200,
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_RESERVE_2 = 201,
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_RESERVE_3 = 202,
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_RESERVE_4 = 203,
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_RESERVE_5 = 204,
  RoutingPathElement_NavigationType_NAVIGATION_TYPE_OTHERS = 255
};
bool RoutingPathElement_NavigationType_IsValid(int value);
const RoutingPathElement_NavigationType RoutingPathElement_NavigationType_NavigationType_MIN = RoutingPathElement_NavigationType_NAVIGATION_TYPE_UNKNOWN;
const RoutingPathElement_NavigationType RoutingPathElement_NavigationType_NavigationType_MAX = RoutingPathElement_NavigationType_NAVIGATION_TYPE_OTHERS;
const int RoutingPathElement_NavigationType_NavigationType_ARRAYSIZE = RoutingPathElement_NavigationType_NavigationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoutingPathElement_NavigationType_descriptor();
inline const ::std::string& RoutingPathElement_NavigationType_Name(RoutingPathElement_NavigationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoutingPathElement_NavigationType_descriptor(), value);
}
inline bool RoutingPathElement_NavigationType_Parse(
    const ::std::string& name, RoutingPathElement_NavigationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoutingPathElement_NavigationType>(
    RoutingPathElement_NavigationType_descriptor(), name, value);
}
enum RoutingPathElement_RoutingType {
  RoutingPathElement_RoutingType_ROUTING_TYPE_UNKNOWN = 0,
  RoutingPathElement_RoutingType_ROUTING_TYPE_REGULAR = 1,
  RoutingPathElement_RoutingType_ROUTING_TYPE_ROUTING_ENTRY_EDGE = 2,
  RoutingPathElement_RoutingType_ROUTING_TYPE_ROUTING_EXIT_EDGE = 3,
  RoutingPathElement_RoutingType_ROUTING_TYPE_ROUTING_ENTRY_EXIT_EDGE = 4,
  RoutingPathElement_RoutingType_ROUTING_TYPE_RESERVE_1 = 200,
  RoutingPathElement_RoutingType_ROUTING_TYPE_RESERVE_2 = 201,
  RoutingPathElement_RoutingType_ROUTING_TYPE_RESERVE_3 = 202,
  RoutingPathElement_RoutingType_ROUTING_TYPE_RESERVE_4 = 203,
  RoutingPathElement_RoutingType_ROUTING_TYPE_RESERVE_5 = 204,
  RoutingPathElement_RoutingType_ROUTING_TYPE_OTHERS = 255
};
bool RoutingPathElement_RoutingType_IsValid(int value);
const RoutingPathElement_RoutingType RoutingPathElement_RoutingType_RoutingType_MIN = RoutingPathElement_RoutingType_ROUTING_TYPE_UNKNOWN;
const RoutingPathElement_RoutingType RoutingPathElement_RoutingType_RoutingType_MAX = RoutingPathElement_RoutingType_ROUTING_TYPE_OTHERS;
const int RoutingPathElement_RoutingType_RoutingType_ARRAYSIZE = RoutingPathElement_RoutingType_RoutingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoutingPathElement_RoutingType_descriptor();
inline const ::std::string& RoutingPathElement_RoutingType_Name(RoutingPathElement_RoutingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoutingPathElement_RoutingType_descriptor(), value);
}
inline bool RoutingPathElement_RoutingType_Parse(
    const ::std::string& name, RoutingPathElement_RoutingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoutingPathElement_RoutingType>(
    RoutingPathElement_RoutingType_descriptor(), name, value);
}
// ===================================================================

class RoutingPathElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.navigation.RoutingPathElement) */ {
 public:
  RoutingPathElement();
  virtual ~RoutingPathElement();

  RoutingPathElement(const RoutingPathElement& from);

  inline RoutingPathElement& operator=(const RoutingPathElement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoutingPathElement(RoutingPathElement&& from) noexcept
    : RoutingPathElement() {
    *this = ::std::move(from);
  }

  inline RoutingPathElement& operator=(RoutingPathElement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutingPathElement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingPathElement* internal_default_instance() {
    return reinterpret_cast<const RoutingPathElement*>(
               &_RoutingPathElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RoutingPathElement* other);
  friend void swap(RoutingPathElement& a, RoutingPathElement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoutingPathElement* New() const final {
    return CreateMaybeMessage<RoutingPathElement>(NULL);
  }

  RoutingPathElement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoutingPathElement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoutingPathElement& from);
  void MergeFrom(const RoutingPathElement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingPathElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RoutingPathElement_NavigationType NavigationType;
  static const NavigationType NAVIGATION_TYPE_UNKNOWN =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_UNKNOWN;
  static const NavigationType NAVIGATION_TYPE_REGULAR =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_REGULAR;
  static const NavigationType NAVIGATION_TYPE_NAVIGATION_START =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_NAVIGATION_START;
  static const NavigationType NAVIGATION_TYPE_NAVIGATION_END =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_NAVIGATION_END;
  static const NavigationType NAVIGATION_TYPE_NAVIGATION_START_END =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_NAVIGATION_START_END;
  static const NavigationType NAVIGATION_TYPE_RESERVE_1 =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_RESERVE_1;
  static const NavigationType NAVIGATION_TYPE_RESERVE_2 =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_RESERVE_2;
  static const NavigationType NAVIGATION_TYPE_RESERVE_3 =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_RESERVE_3;
  static const NavigationType NAVIGATION_TYPE_RESERVE_4 =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_RESERVE_4;
  static const NavigationType NAVIGATION_TYPE_RESERVE_5 =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_RESERVE_5;
  static const NavigationType NAVIGATION_TYPE_OTHERS =
    RoutingPathElement_NavigationType_NAVIGATION_TYPE_OTHERS;
  static inline bool NavigationType_IsValid(int value) {
    return RoutingPathElement_NavigationType_IsValid(value);
  }
  static const NavigationType NavigationType_MIN =
    RoutingPathElement_NavigationType_NavigationType_MIN;
  static const NavigationType NavigationType_MAX =
    RoutingPathElement_NavigationType_NavigationType_MAX;
  static const int NavigationType_ARRAYSIZE =
    RoutingPathElement_NavigationType_NavigationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NavigationType_descriptor() {
    return RoutingPathElement_NavigationType_descriptor();
  }
  static inline const ::std::string& NavigationType_Name(NavigationType value) {
    return RoutingPathElement_NavigationType_Name(value);
  }
  static inline bool NavigationType_Parse(const ::std::string& name,
      NavigationType* value) {
    return RoutingPathElement_NavigationType_Parse(name, value);
  }

  typedef RoutingPathElement_RoutingType RoutingType;
  static const RoutingType ROUTING_TYPE_UNKNOWN =
    RoutingPathElement_RoutingType_ROUTING_TYPE_UNKNOWN;
  static const RoutingType ROUTING_TYPE_REGULAR =
    RoutingPathElement_RoutingType_ROUTING_TYPE_REGULAR;
  static const RoutingType ROUTING_TYPE_ROUTING_ENTRY_EDGE =
    RoutingPathElement_RoutingType_ROUTING_TYPE_ROUTING_ENTRY_EDGE;
  static const RoutingType ROUTING_TYPE_ROUTING_EXIT_EDGE =
    RoutingPathElement_RoutingType_ROUTING_TYPE_ROUTING_EXIT_EDGE;
  static const RoutingType ROUTING_TYPE_ROUTING_ENTRY_EXIT_EDGE =
    RoutingPathElement_RoutingType_ROUTING_TYPE_ROUTING_ENTRY_EXIT_EDGE;
  static const RoutingType ROUTING_TYPE_RESERVE_1 =
    RoutingPathElement_RoutingType_ROUTING_TYPE_RESERVE_1;
  static const RoutingType ROUTING_TYPE_RESERVE_2 =
    RoutingPathElement_RoutingType_ROUTING_TYPE_RESERVE_2;
  static const RoutingType ROUTING_TYPE_RESERVE_3 =
    RoutingPathElement_RoutingType_ROUTING_TYPE_RESERVE_3;
  static const RoutingType ROUTING_TYPE_RESERVE_4 =
    RoutingPathElement_RoutingType_ROUTING_TYPE_RESERVE_4;
  static const RoutingType ROUTING_TYPE_RESERVE_5 =
    RoutingPathElement_RoutingType_ROUTING_TYPE_RESERVE_5;
  static const RoutingType ROUTING_TYPE_OTHERS =
    RoutingPathElement_RoutingType_ROUTING_TYPE_OTHERS;
  static inline bool RoutingType_IsValid(int value) {
    return RoutingPathElement_RoutingType_IsValid(value);
  }
  static const RoutingType RoutingType_MIN =
    RoutingPathElement_RoutingType_RoutingType_MIN;
  static const RoutingType RoutingType_MAX =
    RoutingPathElement_RoutingType_RoutingType_MAX;
  static const int RoutingType_ARRAYSIZE =
    RoutingPathElement_RoutingType_RoutingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoutingType_descriptor() {
    return RoutingPathElement_RoutingType_descriptor();
  }
  static inline const ::std::string& RoutingType_Name(RoutingType value) {
    return RoutingPathElement_RoutingType_Name(value);
  }
  static inline bool RoutingType_Parse(const ::std::string& name,
      RoutingType* value) {
    return RoutingPathElement_RoutingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 branch_path_ids = 4 [packed = true];
  int branch_path_ids_size() const;
  void clear_branch_path_ids();
  static const int kBranchPathIdsFieldNumber = 4;
  ::google::protobuf::uint64 branch_path_ids(int index) const;
  void set_branch_path_ids(int index, ::google::protobuf::uint64 value);
  void add_branch_path_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      branch_path_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_branch_path_ids();

  // optional uint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // optional uint32 length_cm = 2;
  bool has_length_cm() const;
  void clear_length_cm();
  static const int kLengthCmFieldNumber = 2;
  ::google::protobuf::uint32 length_cm() const;
  void set_length_cm(::google::protobuf::uint32 value);

  // optional bool is_positive = 3;
  bool has_is_positive() const;
  void clear_is_positive();
  static const int kIsPositiveFieldNumber = 3;
  bool is_positive() const;
  void set_is_positive(bool value);

  // optional .holo.map.proto.navigation.RoutingPathElement.NavigationType navigation_type = 10;
  bool has_navigation_type() const;
  void clear_navigation_type();
  static const int kNavigationTypeFieldNumber = 10;
  ::holo::map::proto::navigation::RoutingPathElement_NavigationType navigation_type() const;
  void set_navigation_type(::holo::map::proto::navigation::RoutingPathElement_NavigationType value);

  // optional .holo.map.proto.navigation.RoutingPathElement.RoutingType routing_type = 11;
  bool has_routing_type() const;
  void clear_routing_type();
  static const int kRoutingTypeFieldNumber = 11;
  ::holo::map::proto::navigation::RoutingPathElement_RoutingType routing_type() const;
  void set_routing_type(::holo::map::proto::navigation::RoutingPathElement_RoutingType value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.navigation.RoutingPathElement)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_length_cm();
  void clear_has_length_cm();
  void set_has_is_positive();
  void clear_has_is_positive();
  void set_has_navigation_type();
  void clear_has_navigation_type();
  void set_has_routing_type();
  void clear_has_routing_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > branch_path_ids_;
  mutable int _branch_path_ids_cached_byte_size_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 length_cm_;
  bool is_positive_;
  int navigation_type_;
  int routing_type_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fnavigation_2frouting_5fpath_5felement_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutingPathElement

// optional uint64 id = 1;
inline bool RoutingPathElement::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoutingPathElement::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoutingPathElement::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoutingPathElement::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RoutingPathElement::id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.RoutingPathElement.id)
  return id_;
}
inline void RoutingPathElement::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.RoutingPathElement.id)
}

// optional uint32 length_cm = 2;
inline bool RoutingPathElement::has_length_cm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoutingPathElement::set_has_length_cm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoutingPathElement::clear_has_length_cm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoutingPathElement::clear_length_cm() {
  length_cm_ = 0u;
  clear_has_length_cm();
}
inline ::google::protobuf::uint32 RoutingPathElement::length_cm() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.RoutingPathElement.length_cm)
  return length_cm_;
}
inline void RoutingPathElement::set_length_cm(::google::protobuf::uint32 value) {
  set_has_length_cm();
  length_cm_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.RoutingPathElement.length_cm)
}

// optional bool is_positive = 3;
inline bool RoutingPathElement::has_is_positive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoutingPathElement::set_has_is_positive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoutingPathElement::clear_has_is_positive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoutingPathElement::clear_is_positive() {
  is_positive_ = false;
  clear_has_is_positive();
}
inline bool RoutingPathElement::is_positive() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.RoutingPathElement.is_positive)
  return is_positive_;
}
inline void RoutingPathElement::set_is_positive(bool value) {
  set_has_is_positive();
  is_positive_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.RoutingPathElement.is_positive)
}

// repeated uint64 branch_path_ids = 4 [packed = true];
inline int RoutingPathElement::branch_path_ids_size() const {
  return branch_path_ids_.size();
}
inline void RoutingPathElement::clear_branch_path_ids() {
  branch_path_ids_.Clear();
}
inline ::google::protobuf::uint64 RoutingPathElement::branch_path_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.RoutingPathElement.branch_path_ids)
  return branch_path_ids_.Get(index);
}
inline void RoutingPathElement::set_branch_path_ids(int index, ::google::protobuf::uint64 value) {
  branch_path_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.RoutingPathElement.branch_path_ids)
}
inline void RoutingPathElement::add_branch_path_ids(::google::protobuf::uint64 value) {
  branch_path_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.navigation.RoutingPathElement.branch_path_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RoutingPathElement::branch_path_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.navigation.RoutingPathElement.branch_path_ids)
  return branch_path_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RoutingPathElement::mutable_branch_path_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.navigation.RoutingPathElement.branch_path_ids)
  return &branch_path_ids_;
}

// optional .holo.map.proto.navigation.RoutingPathElement.NavigationType navigation_type = 10;
inline bool RoutingPathElement::has_navigation_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoutingPathElement::set_has_navigation_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoutingPathElement::clear_has_navigation_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoutingPathElement::clear_navigation_type() {
  navigation_type_ = 0;
  clear_has_navigation_type();
}
inline ::holo::map::proto::navigation::RoutingPathElement_NavigationType RoutingPathElement::navigation_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.RoutingPathElement.navigation_type)
  return static_cast< ::holo::map::proto::navigation::RoutingPathElement_NavigationType >(navigation_type_);
}
inline void RoutingPathElement::set_navigation_type(::holo::map::proto::navigation::RoutingPathElement_NavigationType value) {
  assert(::holo::map::proto::navigation::RoutingPathElement_NavigationType_IsValid(value));
  set_has_navigation_type();
  navigation_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.RoutingPathElement.navigation_type)
}

// optional .holo.map.proto.navigation.RoutingPathElement.RoutingType routing_type = 11;
inline bool RoutingPathElement::has_routing_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoutingPathElement::set_has_routing_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoutingPathElement::clear_has_routing_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoutingPathElement::clear_routing_type() {
  routing_type_ = 0;
  clear_has_routing_type();
}
inline ::holo::map::proto::navigation::RoutingPathElement_RoutingType RoutingPathElement::routing_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.RoutingPathElement.routing_type)
  return static_cast< ::holo::map::proto::navigation::RoutingPathElement_RoutingType >(routing_type_);
}
inline void RoutingPathElement::set_routing_type(::holo::map::proto::navigation::RoutingPathElement_RoutingType value) {
  assert(::holo::map::proto::navigation::RoutingPathElement_RoutingType_IsValid(value));
  set_has_routing_type();
  routing_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.RoutingPathElement.routing_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace navigation
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::navigation::RoutingPathElement_NavigationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::navigation::RoutingPathElement_NavigationType>() {
  return ::holo::map::proto::navigation::RoutingPathElement_NavigationType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::navigation::RoutingPathElement_RoutingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::navigation::RoutingPathElement_RoutingType>() {
  return ::holo::map::proto::navigation::RoutingPathElement_RoutingType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fnavigation_2frouting_5fpath_5felement_2eproto
