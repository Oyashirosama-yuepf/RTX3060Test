// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/navigation/connection.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fnavigation_2fconnection_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fnavigation_2fconnection_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/geo_point.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fnavigation_2fconnection_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fnavigation_2fconnection_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fnavigation_2fconnection_2eproto
namespace holo {
namespace map {
namespace proto {
namespace navigation {
class Connection;
class ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
}  // namespace navigation
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::navigation::Connection* Arena::CreateMaybeMessage<::holo::map::proto::navigation::Connection>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace navigation {

// ===================================================================

class Connection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.navigation.Connection) */ {
 public:
  Connection();
  virtual ~Connection();

  Connection(const Connection& from);

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(Connection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Connection* other);
  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Connection* New() const final {
    return CreateMaybeMessage<Connection>(NULL);
  }

  Connection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Connection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .holo.map.proto.common.GeoPoint incoming_lane_contact_node = 3;
  bool has_incoming_lane_contact_node() const;
  void clear_incoming_lane_contact_node();
  static const int kIncomingLaneContactNodeFieldNumber = 3;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_incoming_lane_contact_node() const;
  public:
  const ::holo::map::proto::common::GeoPoint& incoming_lane_contact_node() const;
  ::holo::map::proto::common::GeoPoint* release_incoming_lane_contact_node();
  ::holo::map::proto::common::GeoPoint* mutable_incoming_lane_contact_node();
  void set_allocated_incoming_lane_contact_node(::holo::map::proto::common::GeoPoint* incoming_lane_contact_node);

  // optional .holo.map.proto.common.GeoPoint outgoing_lane_contact_node = 5;
  bool has_outgoing_lane_contact_node() const;
  void clear_outgoing_lane_contact_node();
  static const int kOutgoingLaneContactNodeFieldNumber = 5;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_outgoing_lane_contact_node() const;
  public:
  const ::holo::map::proto::common::GeoPoint& outgoing_lane_contact_node() const;
  ::holo::map::proto::common::GeoPoint* release_outgoing_lane_contact_node();
  ::holo::map::proto::common::GeoPoint* mutable_outgoing_lane_contact_node();
  void set_allocated_outgoing_lane_contact_node(::holo::map::proto::common::GeoPoint* outgoing_lane_contact_node);

  // optional uint64 connection_id = 1;
  bool has_connection_id() const;
  void clear_connection_id();
  static const int kConnectionIdFieldNumber = 1;
  ::google::protobuf::uint64 connection_id() const;
  void set_connection_id(::google::protobuf::uint64 value);

  // optional uint64 incoming_lane_id = 2;
  bool has_incoming_lane_id() const;
  void clear_incoming_lane_id();
  static const int kIncomingLaneIdFieldNumber = 2;
  ::google::protobuf::uint64 incoming_lane_id() const;
  void set_incoming_lane_id(::google::protobuf::uint64 value);

  // optional uint64 outgoing_lane_id = 4;
  bool has_outgoing_lane_id() const;
  void clear_outgoing_lane_id();
  static const int kOutgoingLaneIdFieldNumber = 4;
  ::google::protobuf::uint64 outgoing_lane_id() const;
  void set_outgoing_lane_id(::google::protobuf::uint64 value);

  // optional uint64 lane_id = 6;
  bool has_lane_id() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 6;
  ::google::protobuf::uint64 lane_id() const;
  void set_lane_id(::google::protobuf::uint64 value);

  // optional bool is_allowed = 7;
  bool has_is_allowed() const;
  void clear_is_allowed();
  static const int kIsAllowedFieldNumber = 7;
  bool is_allowed() const;
  void set_is_allowed(bool value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.navigation.Connection)
 private:
  void set_has_connection_id();
  void clear_has_connection_id();
  void set_has_incoming_lane_id();
  void clear_has_incoming_lane_id();
  void set_has_incoming_lane_contact_node();
  void clear_has_incoming_lane_contact_node();
  void set_has_outgoing_lane_id();
  void clear_has_outgoing_lane_id();
  void set_has_outgoing_lane_contact_node();
  void clear_has_outgoing_lane_contact_node();
  void set_has_lane_id();
  void clear_has_lane_id();
  void set_has_is_allowed();
  void clear_has_is_allowed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::holo::map::proto::common::GeoPoint* incoming_lane_contact_node_;
  ::holo::map::proto::common::GeoPoint* outgoing_lane_contact_node_;
  ::google::protobuf::uint64 connection_id_;
  ::google::protobuf::uint64 incoming_lane_id_;
  ::google::protobuf::uint64 outgoing_lane_id_;
  ::google::protobuf::uint64 lane_id_;
  bool is_allowed_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fnavigation_2fconnection_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Connection

// optional uint64 connection_id = 1;
inline bool Connection::has_connection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Connection::set_has_connection_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Connection::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Connection::clear_connection_id() {
  connection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_connection_id();
}
inline ::google::protobuf::uint64 Connection::connection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.Connection.connection_id)
  return connection_id_;
}
inline void Connection::set_connection_id(::google::protobuf::uint64 value) {
  set_has_connection_id();
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.Connection.connection_id)
}

// optional uint64 incoming_lane_id = 2;
inline bool Connection::has_incoming_lane_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Connection::set_has_incoming_lane_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Connection::clear_has_incoming_lane_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Connection::clear_incoming_lane_id() {
  incoming_lane_id_ = GOOGLE_ULONGLONG(0);
  clear_has_incoming_lane_id();
}
inline ::google::protobuf::uint64 Connection::incoming_lane_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.Connection.incoming_lane_id)
  return incoming_lane_id_;
}
inline void Connection::set_incoming_lane_id(::google::protobuf::uint64 value) {
  set_has_incoming_lane_id();
  incoming_lane_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.Connection.incoming_lane_id)
}

// optional .holo.map.proto.common.GeoPoint incoming_lane_contact_node = 3;
inline bool Connection::has_incoming_lane_contact_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Connection::set_has_incoming_lane_contact_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Connection::clear_has_incoming_lane_contact_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::GeoPoint& Connection::_internal_incoming_lane_contact_node() const {
  return *incoming_lane_contact_node_;
}
inline const ::holo::map::proto::common::GeoPoint& Connection::incoming_lane_contact_node() const {
  const ::holo::map::proto::common::GeoPoint* p = incoming_lane_contact_node_;
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.Connection.incoming_lane_contact_node)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* Connection::release_incoming_lane_contact_node() {
  // @@protoc_insertion_point(field_release:holo.map.proto.navigation.Connection.incoming_lane_contact_node)
  clear_has_incoming_lane_contact_node();
  ::holo::map::proto::common::GeoPoint* temp = incoming_lane_contact_node_;
  incoming_lane_contact_node_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* Connection::mutable_incoming_lane_contact_node() {
  set_has_incoming_lane_contact_node();
  if (incoming_lane_contact_node_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    incoming_lane_contact_node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.navigation.Connection.incoming_lane_contact_node)
  return incoming_lane_contact_node_;
}
inline void Connection::set_allocated_incoming_lane_contact_node(::holo::map::proto::common::GeoPoint* incoming_lane_contact_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(incoming_lane_contact_node_);
  }
  if (incoming_lane_contact_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      incoming_lane_contact_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, incoming_lane_contact_node, submessage_arena);
    }
    set_has_incoming_lane_contact_node();
  } else {
    clear_has_incoming_lane_contact_node();
  }
  incoming_lane_contact_node_ = incoming_lane_contact_node;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.navigation.Connection.incoming_lane_contact_node)
}

// optional uint64 outgoing_lane_id = 4;
inline bool Connection::has_outgoing_lane_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Connection::set_has_outgoing_lane_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Connection::clear_has_outgoing_lane_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Connection::clear_outgoing_lane_id() {
  outgoing_lane_id_ = GOOGLE_ULONGLONG(0);
  clear_has_outgoing_lane_id();
}
inline ::google::protobuf::uint64 Connection::outgoing_lane_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.Connection.outgoing_lane_id)
  return outgoing_lane_id_;
}
inline void Connection::set_outgoing_lane_id(::google::protobuf::uint64 value) {
  set_has_outgoing_lane_id();
  outgoing_lane_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.Connection.outgoing_lane_id)
}

// optional .holo.map.proto.common.GeoPoint outgoing_lane_contact_node = 5;
inline bool Connection::has_outgoing_lane_contact_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Connection::set_has_outgoing_lane_contact_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Connection::clear_has_outgoing_lane_contact_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::GeoPoint& Connection::_internal_outgoing_lane_contact_node() const {
  return *outgoing_lane_contact_node_;
}
inline const ::holo::map::proto::common::GeoPoint& Connection::outgoing_lane_contact_node() const {
  const ::holo::map::proto::common::GeoPoint* p = outgoing_lane_contact_node_;
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.Connection.outgoing_lane_contact_node)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* Connection::release_outgoing_lane_contact_node() {
  // @@protoc_insertion_point(field_release:holo.map.proto.navigation.Connection.outgoing_lane_contact_node)
  clear_has_outgoing_lane_contact_node();
  ::holo::map::proto::common::GeoPoint* temp = outgoing_lane_contact_node_;
  outgoing_lane_contact_node_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* Connection::mutable_outgoing_lane_contact_node() {
  set_has_outgoing_lane_contact_node();
  if (outgoing_lane_contact_node_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    outgoing_lane_contact_node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.navigation.Connection.outgoing_lane_contact_node)
  return outgoing_lane_contact_node_;
}
inline void Connection::set_allocated_outgoing_lane_contact_node(::holo::map::proto::common::GeoPoint* outgoing_lane_contact_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(outgoing_lane_contact_node_);
  }
  if (outgoing_lane_contact_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      outgoing_lane_contact_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outgoing_lane_contact_node, submessage_arena);
    }
    set_has_outgoing_lane_contact_node();
  } else {
    clear_has_outgoing_lane_contact_node();
  }
  outgoing_lane_contact_node_ = outgoing_lane_contact_node;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.navigation.Connection.outgoing_lane_contact_node)
}

// optional uint64 lane_id = 6;
inline bool Connection::has_lane_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Connection::set_has_lane_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Connection::clear_has_lane_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Connection::clear_lane_id() {
  lane_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lane_id();
}
inline ::google::protobuf::uint64 Connection::lane_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.Connection.lane_id)
  return lane_id_;
}
inline void Connection::set_lane_id(::google::protobuf::uint64 value) {
  set_has_lane_id();
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.Connection.lane_id)
}

// optional bool is_allowed = 7;
inline bool Connection::has_is_allowed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Connection::set_has_is_allowed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Connection::clear_has_is_allowed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Connection::clear_is_allowed() {
  is_allowed_ = false;
  clear_has_is_allowed();
}
inline bool Connection::is_allowed() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.navigation.Connection.is_allowed)
  return is_allowed_;
}
inline void Connection::set_is_allowed(bool value) {
  set_has_is_allowed();
  is_allowed_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.navigation.Connection.is_allowed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace navigation
}  // namespace proto
}  // namespace map
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fnavigation_2fconnection_2eproto
