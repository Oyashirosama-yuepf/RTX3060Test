// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/parking/object_parking_poi.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fparking_2fobject_5fparking_5fpoi_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fparking_2fobject_5fparking_5fpoi_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/coordinate.pb.h"
#include "holo/map/proto/common/geo_point.pb.h"
#include "holo/map/proto/common/geo_line.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fparking_2fobject_5fparking_5fpoi_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fparking_2fobject_5fparking_5fpoi_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fparking_2fobject_5fparking_5fpoi_2eproto
namespace holo {
namespace map {
namespace proto {
namespace parking {
class ObjectParkingPoi;
class ObjectParkingPoiDefaultTypeInternal;
extern ObjectParkingPoiDefaultTypeInternal _ObjectParkingPoi_default_instance_;
class ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse;
class ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUseDefaultTypeInternal;
extern ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUseDefaultTypeInternal _ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse_default_instance_;
}  // namespace parking
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::parking::ObjectParkingPoi* Arena::CreateMaybeMessage<::holo::map::proto::parking::ObjectParkingPoi>(Arena*);
template<> ::holo::map::proto::parking::ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::parking::ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace parking {

enum ObjectParkingPoi_ObjectParkingPoiType {
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_UNDEFINED = 0,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_EXTERNAL_EXIT = 1,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_EXTERNAL_ENTRANCE = 2,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_EXTERNAL_ENTRANCE_EXIT = 3,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_INTERNAL_EXIT = 4,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_INTERNAL_ENTRANCE = 5,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_INTERNAL_ENTRANCE_EXIT = 6,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_GATE = 7,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_PASSAGE_BTWEEN_FLOOR = 8,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_AVP_ENTRANCE = 9,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_AVP_EXIT = 10,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_STAIR = 11,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_CARGO_ELEVATOR = 12,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_ESCALATOR = 13,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_HORIZONTAL_ESCALATOR = 14,
  ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_PASSENGER_ELEVATOR = 15
};
bool ObjectParkingPoi_ObjectParkingPoiType_IsValid(int value);
const ObjectParkingPoi_ObjectParkingPoiType ObjectParkingPoi_ObjectParkingPoiType_ObjectParkingPoiType_MIN = ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_UNDEFINED;
const ObjectParkingPoi_ObjectParkingPoiType ObjectParkingPoi_ObjectParkingPoiType_ObjectParkingPoiType_MAX = ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_PASSENGER_ELEVATOR;
const int ObjectParkingPoi_ObjectParkingPoiType_ObjectParkingPoiType_ARRAYSIZE = ObjectParkingPoi_ObjectParkingPoiType_ObjectParkingPoiType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectParkingPoi_ObjectParkingPoiType_descriptor();
inline const ::std::string& ObjectParkingPoi_ObjectParkingPoiType_Name(ObjectParkingPoi_ObjectParkingPoiType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectParkingPoi_ObjectParkingPoiType_descriptor(), value);
}
inline bool ObjectParkingPoi_ObjectParkingPoiType_Parse(
    const ::std::string& name, ObjectParkingPoi_ObjectParkingPoiType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectParkingPoi_ObjectParkingPoiType>(
    ObjectParkingPoi_ObjectParkingPoiType_descriptor(), name, value);
}
enum ObjectParkingPoi_RoadSide {
  ObjectParkingPoi_RoadSide_ROAD_SIDE_NONE = 0,
  ObjectParkingPoi_RoadSide_ROAD_SIDE_LEFT = 1,
  ObjectParkingPoi_RoadSide_ROAD_SIDE_RIGHT = 2,
  ObjectParkingPoi_RoadSide_ROAD_SIDE_ON_ROAD = 3
};
bool ObjectParkingPoi_RoadSide_IsValid(int value);
const ObjectParkingPoi_RoadSide ObjectParkingPoi_RoadSide_RoadSide_MIN = ObjectParkingPoi_RoadSide_ROAD_SIDE_NONE;
const ObjectParkingPoi_RoadSide ObjectParkingPoi_RoadSide_RoadSide_MAX = ObjectParkingPoi_RoadSide_ROAD_SIDE_ON_ROAD;
const int ObjectParkingPoi_RoadSide_RoadSide_ARRAYSIZE = ObjectParkingPoi_RoadSide_RoadSide_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectParkingPoi_RoadSide_descriptor();
inline const ::std::string& ObjectParkingPoi_RoadSide_Name(ObjectParkingPoi_RoadSide value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectParkingPoi_RoadSide_descriptor(), value);
}
inline bool ObjectParkingPoi_RoadSide_Parse(
    const ::std::string& name, ObjectParkingPoi_RoadSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectParkingPoi_RoadSide>(
    ObjectParkingPoi_RoadSide_descriptor(), name, value);
}
// ===================================================================

class ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse();
  ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse& other);
  static const ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse*>(&_ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ObjectParkingPoi : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.parking.ObjectParkingPoi) */ {
 public:
  ObjectParkingPoi();
  virtual ~ObjectParkingPoi();

  ObjectParkingPoi(const ObjectParkingPoi& from);

  inline ObjectParkingPoi& operator=(const ObjectParkingPoi& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectParkingPoi(ObjectParkingPoi&& from) noexcept
    : ObjectParkingPoi() {
    *this = ::std::move(from);
  }

  inline ObjectParkingPoi& operator=(ObjectParkingPoi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectParkingPoi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectParkingPoi* internal_default_instance() {
    return reinterpret_cast<const ObjectParkingPoi*>(
               &_ObjectParkingPoi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ObjectParkingPoi* other);
  friend void swap(ObjectParkingPoi& a, ObjectParkingPoi& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectParkingPoi* New() const final {
    return CreateMaybeMessage<ObjectParkingPoi>(NULL);
  }

  ObjectParkingPoi* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectParkingPoi>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectParkingPoi& from);
  void MergeFrom(const ObjectParkingPoi& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectParkingPoi* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef ObjectParkingPoi_ObjectParkingPoiType ObjectParkingPoiType;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_UNDEFINED =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_UNDEFINED;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_EXTERNAL_EXIT =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_EXTERNAL_EXIT;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_EXTERNAL_ENTRANCE =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_EXTERNAL_ENTRANCE;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_EXTERNAL_ENTRANCE_EXIT =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_EXTERNAL_ENTRANCE_EXIT;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_INTERNAL_EXIT =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_INTERNAL_EXIT;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_INTERNAL_ENTRANCE =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_INTERNAL_ENTRANCE;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_INTERNAL_ENTRANCE_EXIT =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_INTERNAL_ENTRANCE_EXIT;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_GATE =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_GATE;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_PASSAGE_BTWEEN_FLOOR =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_PASSAGE_BTWEEN_FLOOR;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_AVP_ENTRANCE =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_AVP_ENTRANCE;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_AVP_EXIT =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_AVP_EXIT;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_STAIR =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_STAIR;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_CARGO_ELEVATOR =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_CARGO_ELEVATOR;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_ESCALATOR =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_ESCALATOR;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_HORIZONTAL_ESCALATOR =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_HORIZONTAL_ESCALATOR;
  static const ObjectParkingPoiType OBJECT_PARKING_POI_TYPE_PARKING_PASSENGER_ELEVATOR =
    ObjectParkingPoi_ObjectParkingPoiType_OBJECT_PARKING_POI_TYPE_PARKING_PASSENGER_ELEVATOR;
  static inline bool ObjectParkingPoiType_IsValid(int value) {
    return ObjectParkingPoi_ObjectParkingPoiType_IsValid(value);
  }
  static const ObjectParkingPoiType ObjectParkingPoiType_MIN =
    ObjectParkingPoi_ObjectParkingPoiType_ObjectParkingPoiType_MIN;
  static const ObjectParkingPoiType ObjectParkingPoiType_MAX =
    ObjectParkingPoi_ObjectParkingPoiType_ObjectParkingPoiType_MAX;
  static const int ObjectParkingPoiType_ARRAYSIZE =
    ObjectParkingPoi_ObjectParkingPoiType_ObjectParkingPoiType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ObjectParkingPoiType_descriptor() {
    return ObjectParkingPoi_ObjectParkingPoiType_descriptor();
  }
  static inline const ::std::string& ObjectParkingPoiType_Name(ObjectParkingPoiType value) {
    return ObjectParkingPoi_ObjectParkingPoiType_Name(value);
  }
  static inline bool ObjectParkingPoiType_Parse(const ::std::string& name,
      ObjectParkingPoiType* value) {
    return ObjectParkingPoi_ObjectParkingPoiType_Parse(name, value);
  }

  typedef ObjectParkingPoi_RoadSide RoadSide;
  static const RoadSide ROAD_SIDE_NONE =
    ObjectParkingPoi_RoadSide_ROAD_SIDE_NONE;
  static const RoadSide ROAD_SIDE_LEFT =
    ObjectParkingPoi_RoadSide_ROAD_SIDE_LEFT;
  static const RoadSide ROAD_SIDE_RIGHT =
    ObjectParkingPoi_RoadSide_ROAD_SIDE_RIGHT;
  static const RoadSide ROAD_SIDE_ON_ROAD =
    ObjectParkingPoi_RoadSide_ROAD_SIDE_ON_ROAD;
  static inline bool RoadSide_IsValid(int value) {
    return ObjectParkingPoi_RoadSide_IsValid(value);
  }
  static const RoadSide RoadSide_MIN =
    ObjectParkingPoi_RoadSide_RoadSide_MIN;
  static const RoadSide RoadSide_MAX =
    ObjectParkingPoi_RoadSide_RoadSide_MAX;
  static const int RoadSide_ARRAYSIZE =
    ObjectParkingPoi_RoadSide_RoadSide_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoadSide_descriptor() {
    return ObjectParkingPoi_RoadSide_descriptor();
  }
  static inline const ::std::string& RoadSide_Name(RoadSide value) {
    return ObjectParkingPoi_RoadSide_Name(value);
  }
  static inline bool RoadSide_Parse(const ::std::string& name,
      RoadSide* value) {
    return ObjectParkingPoi_RoadSide_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 road_ids = 6 [packed = true];
  int road_ids_size() const;
  void clear_road_ids();
  static const int kRoadIdsFieldNumber = 6;
  ::google::protobuf::uint64 road_ids(int index) const;
  void set_road_ids(int index, ::google::protobuf::uint64 value);
  void add_road_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      road_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_road_ids();

  // repeated uint64 lane_ids = 7 [packed = true];
  int lane_ids_size() const;
  void clear_lane_ids();
  static const int kLaneIdsFieldNumber = 7;
  ::google::protobuf::uint64 lane_ids(int index) const;
  void set_lane_ids(int index, ::google::protobuf::uint64 value);
  void add_lane_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      lane_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_lane_ids();

  // repeated uint64 tile_ids = 20 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 20;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // repeated .holo.map.proto.common.GeoPoint geometry_points = 34;
  int geometry_points_size() const;
  void clear_geometry_points();
  static const int kGeometryPointsFieldNumber = 34;
  ::holo::map::proto::common::GeoPoint* mutable_geometry_points(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
      mutable_geometry_points();
  const ::holo::map::proto::common::GeoPoint& geometry_points(int index) const;
  ::holo::map::proto::common::GeoPoint* add_geometry_points();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
      geometry_points() const;

  // map<uint32, .holo.map.proto.common.GeoLine> extra_geometry_points = 35;
  int extra_geometry_points_size() const;
  void clear_extra_geometry_points();
  static const int kExtraGeometryPointsFieldNumber = 35;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >&
      extra_geometry_points() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >*
      mutable_extra_geometry_points();

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .holo.map.proto.common.GeoPoint position_point = 11;
  bool has_position_point() const;
  void clear_position_point();
  static const int kPositionPointFieldNumber = 11;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_position_point() const;
  public:
  const ::holo::map::proto::common::GeoPoint& position_point() const;
  ::holo::map::proto::common::GeoPoint* release_position_point();
  ::holo::map::proto::common::GeoPoint* mutable_position_point();
  void set_allocated_position_point(::holo::map::proto::common::GeoPoint* position_point);

  // optional .holo.map.proto.common.GeoPoint display_point = 12;
  bool has_display_point() const;
  void clear_display_point();
  static const int kDisplayPointFieldNumber = 12;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_display_point() const;
  public:
  const ::holo::map::proto::common::GeoPoint& display_point() const;
  ::holo::map::proto::common::GeoPoint* release_display_point();
  ::holo::map::proto::common::GeoPoint* mutable_display_point();
  void set_allocated_display_point(::holo::map::proto::common::GeoPoint* display_point);

  // optional .holo.map.proto.common.Coordinate coordinate = 30;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 30;
  private:
  const ::holo::map::proto::common::Coordinate& _internal_coordinate() const;
  public:
  const ::holo::map::proto::common::Coordinate& coordinate() const;
  ::holo::map::proto::common::Coordinate* release_coordinate();
  ::holo::map::proto::common::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate);

  // optional uint64 object_parking_poi_id = 1;
  bool has_object_parking_poi_id() const;
  void clear_object_parking_poi_id();
  static const int kObjectParkingPoiIdFieldNumber = 1;
  ::google::protobuf::uint64 object_parking_poi_id() const;
  void set_object_parking_poi_id(::google::protobuf::uint64 value);

  // optional uint64 object_parking_lot_id = 4;
  bool has_object_parking_lot_id() const;
  void clear_object_parking_lot_id();
  static const int kObjectParkingLotIdFieldNumber = 4;
  ::google::protobuf::uint64 object_parking_lot_id() const;
  void set_object_parking_lot_id(::google::protobuf::uint64 value);

  // optional uint64 object_parking_floor_id = 5;
  bool has_object_parking_floor_id() const;
  void clear_object_parking_floor_id();
  static const int kObjectParkingFloorIdFieldNumber = 5;
  ::google::protobuf::uint64 object_parking_floor_id() const;
  void set_object_parking_floor_id(::google::protobuf::uint64 value);

  // optional .holo.map.proto.parking.ObjectParkingPoi.ObjectParkingPoiType object_parking_poi_type = 2;
  bool has_object_parking_poi_type() const;
  void clear_object_parking_poi_type();
  static const int kObjectParkingPoiTypeFieldNumber = 2;
  ::holo::map::proto::parking::ObjectParkingPoi_ObjectParkingPoiType object_parking_poi_type() const;
  void set_object_parking_poi_type(::holo::map::proto::parking::ObjectParkingPoi_ObjectParkingPoiType value);

  // optional .holo.map.proto.parking.ObjectParkingPoi.RoadSide road_side = 8;
  bool has_road_side() const;
  void clear_road_side();
  static const int kRoadSideFieldNumber = 8;
  ::holo::map::proto::parking::ObjectParkingPoi_RoadSide road_side() const;
  void set_road_side(::holo::map::proto::parking::ObjectParkingPoi_RoadSide value);

  // optional uint32 high_limit_cm = 10;
  bool has_high_limit_cm() const;
  void clear_high_limit_cm();
  static const int kHighLimitCmFieldNumber = 10;
  ::google::protobuf::uint32 high_limit_cm() const;
  void set_high_limit_cm(::google::protobuf::uint32 value);

  // optional bool is_use = 9;
  bool has_is_use() const;
  void clear_is_use();
  static const int kIsUseFieldNumber = 9;
  bool is_use() const;
  void set_is_use(bool value);

  // optional bool south_flag = 33;
  bool has_south_flag() const;
  void clear_south_flag();
  static const int kSouthFlagFieldNumber = 33;
  bool south_flag() const;
  void set_south_flag(bool value);

  // optional uint64 parking_background_id = 21;
  bool has_parking_background_id() const;
  void clear_parking_background_id();
  static const int kParkingBackgroundIdFieldNumber = 21;
  ::google::protobuf::uint64 parking_background_id() const;
  void set_parking_background_id(::google::protobuf::uint64 value);

  // optional uint32 zone_id = 31;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 31;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // optional uint32 extra_zone_id = 32;
  bool has_extra_zone_id() const;
  void clear_extra_zone_id();
  static const int kExtraZoneIdFieldNumber = 32;
  ::google::protobuf::uint32 extra_zone_id() const;
  void set_extra_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.parking.ObjectParkingPoi)
 private:
  void set_has_object_parking_poi_id();
  void clear_has_object_parking_poi_id();
  void set_has_object_parking_poi_type();
  void clear_has_object_parking_poi_type();
  void set_has_name();
  void clear_has_name();
  void set_has_object_parking_lot_id();
  void clear_has_object_parking_lot_id();
  void set_has_object_parking_floor_id();
  void clear_has_object_parking_floor_id();
  void set_has_road_side();
  void clear_has_road_side();
  void set_has_is_use();
  void clear_has_is_use();
  void set_has_high_limit_cm();
  void clear_has_high_limit_cm();
  void set_has_position_point();
  void clear_has_position_point();
  void set_has_display_point();
  void clear_has_display_point();
  void set_has_parking_background_id();
  void clear_has_parking_background_id();
  void set_has_coordinate();
  void clear_has_coordinate();
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_extra_zone_id();
  void clear_has_extra_zone_id();
  void set_has_south_flag();
  void clear_has_south_flag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > road_ids_;
  mutable int _road_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > lane_ids_;
  mutable int _lane_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint > geometry_points_;
  ::google::protobuf::internal::MapField<
      ObjectParkingPoi_ExtraGeometryPointsEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_geometry_points_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::holo::map::proto::common::GeoPoint* position_point_;
  ::holo::map::proto::common::GeoPoint* display_point_;
  ::holo::map::proto::common::Coordinate* coordinate_;
  ::google::protobuf::uint64 object_parking_poi_id_;
  ::google::protobuf::uint64 object_parking_lot_id_;
  ::google::protobuf::uint64 object_parking_floor_id_;
  int object_parking_poi_type_;
  int road_side_;
  ::google::protobuf::uint32 high_limit_cm_;
  bool is_use_;
  bool south_flag_;
  ::google::protobuf::uint64 parking_background_id_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 extra_zone_id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fparking_2fobject_5fparking_5fpoi_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ObjectParkingPoi

// optional uint64 object_parking_poi_id = 1;
inline bool ObjectParkingPoi::has_object_parking_poi_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObjectParkingPoi::set_has_object_parking_poi_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObjectParkingPoi::clear_has_object_parking_poi_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObjectParkingPoi::clear_object_parking_poi_id() {
  object_parking_poi_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_parking_poi_id();
}
inline ::google::protobuf::uint64 ObjectParkingPoi::object_parking_poi_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.object_parking_poi_id)
  return object_parking_poi_id_;
}
inline void ObjectParkingPoi::set_object_parking_poi_id(::google::protobuf::uint64 value) {
  set_has_object_parking_poi_id();
  object_parking_poi_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.object_parking_poi_id)
}

// optional .holo.map.proto.parking.ObjectParkingPoi.ObjectParkingPoiType object_parking_poi_type = 2;
inline bool ObjectParkingPoi::has_object_parking_poi_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ObjectParkingPoi::set_has_object_parking_poi_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ObjectParkingPoi::clear_has_object_parking_poi_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ObjectParkingPoi::clear_object_parking_poi_type() {
  object_parking_poi_type_ = 0;
  clear_has_object_parking_poi_type();
}
inline ::holo::map::proto::parking::ObjectParkingPoi_ObjectParkingPoiType ObjectParkingPoi::object_parking_poi_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.object_parking_poi_type)
  return static_cast< ::holo::map::proto::parking::ObjectParkingPoi_ObjectParkingPoiType >(object_parking_poi_type_);
}
inline void ObjectParkingPoi::set_object_parking_poi_type(::holo::map::proto::parking::ObjectParkingPoi_ObjectParkingPoiType value) {
  assert(::holo::map::proto::parking::ObjectParkingPoi_ObjectParkingPoiType_IsValid(value));
  set_has_object_parking_poi_type();
  object_parking_poi_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.object_parking_poi_type)
}

// optional string name = 3;
inline bool ObjectParkingPoi::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectParkingPoi::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectParkingPoi::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectParkingPoi::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ObjectParkingPoi::name() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.name)
  return name_.GetNoArena();
}
inline void ObjectParkingPoi::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.name)
}
#if LANG_CXX11
inline void ObjectParkingPoi::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.map.proto.parking.ObjectParkingPoi.name)
}
#endif
inline void ObjectParkingPoi::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.map.proto.parking.ObjectParkingPoi.name)
}
inline void ObjectParkingPoi::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.map.proto.parking.ObjectParkingPoi.name)
}
inline ::std::string* ObjectParkingPoi::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:holo.map.proto.parking.ObjectParkingPoi.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectParkingPoi::release_name() {
  // @@protoc_insertion_point(field_release:holo.map.proto.parking.ObjectParkingPoi.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectParkingPoi::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.parking.ObjectParkingPoi.name)
}

// optional uint64 object_parking_lot_id = 4;
inline bool ObjectParkingPoi::has_object_parking_lot_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObjectParkingPoi::set_has_object_parking_lot_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObjectParkingPoi::clear_has_object_parking_lot_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObjectParkingPoi::clear_object_parking_lot_id() {
  object_parking_lot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_parking_lot_id();
}
inline ::google::protobuf::uint64 ObjectParkingPoi::object_parking_lot_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.object_parking_lot_id)
  return object_parking_lot_id_;
}
inline void ObjectParkingPoi::set_object_parking_lot_id(::google::protobuf::uint64 value) {
  set_has_object_parking_lot_id();
  object_parking_lot_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.object_parking_lot_id)
}

// optional uint64 object_parking_floor_id = 5;
inline bool ObjectParkingPoi::has_object_parking_floor_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObjectParkingPoi::set_has_object_parking_floor_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ObjectParkingPoi::clear_has_object_parking_floor_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ObjectParkingPoi::clear_object_parking_floor_id() {
  object_parking_floor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_parking_floor_id();
}
inline ::google::protobuf::uint64 ObjectParkingPoi::object_parking_floor_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.object_parking_floor_id)
  return object_parking_floor_id_;
}
inline void ObjectParkingPoi::set_object_parking_floor_id(::google::protobuf::uint64 value) {
  set_has_object_parking_floor_id();
  object_parking_floor_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.object_parking_floor_id)
}

// repeated uint64 road_ids = 6 [packed = true];
inline int ObjectParkingPoi::road_ids_size() const {
  return road_ids_.size();
}
inline void ObjectParkingPoi::clear_road_ids() {
  road_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectParkingPoi::road_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.road_ids)
  return road_ids_.Get(index);
}
inline void ObjectParkingPoi::set_road_ids(int index, ::google::protobuf::uint64 value) {
  road_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.road_ids)
}
inline void ObjectParkingPoi::add_road_ids(::google::protobuf::uint64 value) {
  road_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.parking.ObjectParkingPoi.road_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectParkingPoi::road_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.parking.ObjectParkingPoi.road_ids)
  return road_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectParkingPoi::mutable_road_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.parking.ObjectParkingPoi.road_ids)
  return &road_ids_;
}

// repeated uint64 lane_ids = 7 [packed = true];
inline int ObjectParkingPoi::lane_ids_size() const {
  return lane_ids_.size();
}
inline void ObjectParkingPoi::clear_lane_ids() {
  lane_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectParkingPoi::lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.lane_ids)
  return lane_ids_.Get(index);
}
inline void ObjectParkingPoi::set_lane_ids(int index, ::google::protobuf::uint64 value) {
  lane_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.lane_ids)
}
inline void ObjectParkingPoi::add_lane_ids(::google::protobuf::uint64 value) {
  lane_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.parking.ObjectParkingPoi.lane_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectParkingPoi::lane_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.parking.ObjectParkingPoi.lane_ids)
  return lane_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectParkingPoi::mutable_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.parking.ObjectParkingPoi.lane_ids)
  return &lane_ids_;
}

// optional .holo.map.proto.parking.ObjectParkingPoi.RoadSide road_side = 8;
inline bool ObjectParkingPoi::has_road_side() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ObjectParkingPoi::set_has_road_side() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ObjectParkingPoi::clear_has_road_side() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ObjectParkingPoi::clear_road_side() {
  road_side_ = 0;
  clear_has_road_side();
}
inline ::holo::map::proto::parking::ObjectParkingPoi_RoadSide ObjectParkingPoi::road_side() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.road_side)
  return static_cast< ::holo::map::proto::parking::ObjectParkingPoi_RoadSide >(road_side_);
}
inline void ObjectParkingPoi::set_road_side(::holo::map::proto::parking::ObjectParkingPoi_RoadSide value) {
  assert(::holo::map::proto::parking::ObjectParkingPoi_RoadSide_IsValid(value));
  set_has_road_side();
  road_side_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.road_side)
}

// optional bool is_use = 9;
inline bool ObjectParkingPoi::has_is_use() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ObjectParkingPoi::set_has_is_use() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ObjectParkingPoi::clear_has_is_use() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ObjectParkingPoi::clear_is_use() {
  is_use_ = false;
  clear_has_is_use();
}
inline bool ObjectParkingPoi::is_use() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.is_use)
  return is_use_;
}
inline void ObjectParkingPoi::set_is_use(bool value) {
  set_has_is_use();
  is_use_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.is_use)
}

// optional uint32 high_limit_cm = 10;
inline bool ObjectParkingPoi::has_high_limit_cm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ObjectParkingPoi::set_has_high_limit_cm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ObjectParkingPoi::clear_has_high_limit_cm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ObjectParkingPoi::clear_high_limit_cm() {
  high_limit_cm_ = 0u;
  clear_has_high_limit_cm();
}
inline ::google::protobuf::uint32 ObjectParkingPoi::high_limit_cm() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.high_limit_cm)
  return high_limit_cm_;
}
inline void ObjectParkingPoi::set_high_limit_cm(::google::protobuf::uint32 value) {
  set_has_high_limit_cm();
  high_limit_cm_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.high_limit_cm)
}

// optional .holo.map.proto.common.GeoPoint position_point = 11;
inline bool ObjectParkingPoi::has_position_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectParkingPoi::set_has_position_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectParkingPoi::clear_has_position_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::GeoPoint& ObjectParkingPoi::_internal_position_point() const {
  return *position_point_;
}
inline const ::holo::map::proto::common::GeoPoint& ObjectParkingPoi::position_point() const {
  const ::holo::map::proto::common::GeoPoint* p = position_point_;
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.position_point)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* ObjectParkingPoi::release_position_point() {
  // @@protoc_insertion_point(field_release:holo.map.proto.parking.ObjectParkingPoi.position_point)
  clear_has_position_point();
  ::holo::map::proto::common::GeoPoint* temp = position_point_;
  position_point_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* ObjectParkingPoi::mutable_position_point() {
  set_has_position_point();
  if (position_point_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    position_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.parking.ObjectParkingPoi.position_point)
  return position_point_;
}
inline void ObjectParkingPoi::set_allocated_position_point(::holo::map::proto::common::GeoPoint* position_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_point_);
  }
  if (position_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position_point, submessage_arena);
    }
    set_has_position_point();
  } else {
    clear_has_position_point();
  }
  position_point_ = position_point;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.parking.ObjectParkingPoi.position_point)
}

// optional .holo.map.proto.common.GeoPoint display_point = 12;
inline bool ObjectParkingPoi::has_display_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectParkingPoi::set_has_display_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectParkingPoi::clear_has_display_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::holo::map::proto::common::GeoPoint& ObjectParkingPoi::_internal_display_point() const {
  return *display_point_;
}
inline const ::holo::map::proto::common::GeoPoint& ObjectParkingPoi::display_point() const {
  const ::holo::map::proto::common::GeoPoint* p = display_point_;
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.display_point)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* ObjectParkingPoi::release_display_point() {
  // @@protoc_insertion_point(field_release:holo.map.proto.parking.ObjectParkingPoi.display_point)
  clear_has_display_point();
  ::holo::map::proto::common::GeoPoint* temp = display_point_;
  display_point_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* ObjectParkingPoi::mutable_display_point() {
  set_has_display_point();
  if (display_point_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    display_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.parking.ObjectParkingPoi.display_point)
  return display_point_;
}
inline void ObjectParkingPoi::set_allocated_display_point(::holo::map::proto::common::GeoPoint* display_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(display_point_);
  }
  if (display_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      display_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, display_point, submessage_arena);
    }
    set_has_display_point();
  } else {
    clear_has_display_point();
  }
  display_point_ = display_point;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.parking.ObjectParkingPoi.display_point)
}

// repeated uint64 tile_ids = 20 [packed = true];
inline int ObjectParkingPoi::tile_ids_size() const {
  return tile_ids_.size();
}
inline void ObjectParkingPoi::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectParkingPoi::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.tile_ids)
  return tile_ids_.Get(index);
}
inline void ObjectParkingPoi::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.tile_ids)
}
inline void ObjectParkingPoi::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.parking.ObjectParkingPoi.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectParkingPoi::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.parking.ObjectParkingPoi.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectParkingPoi::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.parking.ObjectParkingPoi.tile_ids)
  return &tile_ids_;
}

// optional uint64 parking_background_id = 21;
inline bool ObjectParkingPoi::has_parking_background_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ObjectParkingPoi::set_has_parking_background_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ObjectParkingPoi::clear_has_parking_background_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ObjectParkingPoi::clear_parking_background_id() {
  parking_background_id_ = GOOGLE_ULONGLONG(0);
  clear_has_parking_background_id();
}
inline ::google::protobuf::uint64 ObjectParkingPoi::parking_background_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.parking_background_id)
  return parking_background_id_;
}
inline void ObjectParkingPoi::set_parking_background_id(::google::protobuf::uint64 value) {
  set_has_parking_background_id();
  parking_background_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.parking_background_id)
}

// optional .holo.map.proto.common.Coordinate coordinate = 30;
inline bool ObjectParkingPoi::has_coordinate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectParkingPoi::set_has_coordinate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectParkingPoi::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::holo::map::proto::common::Coordinate& ObjectParkingPoi::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::holo::map::proto::common::Coordinate& ObjectParkingPoi::coordinate() const {
  const ::holo::map::proto::common::Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::Coordinate*>(
      &::holo::map::proto::common::_Coordinate_default_instance_);
}
inline ::holo::map::proto::common::Coordinate* ObjectParkingPoi::release_coordinate() {
  // @@protoc_insertion_point(field_release:holo.map.proto.parking.ObjectParkingPoi.coordinate)
  clear_has_coordinate();
  ::holo::map::proto::common::Coordinate* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::Coordinate* ObjectParkingPoi::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.parking.ObjectParkingPoi.coordinate)
  return coordinate_;
}
inline void ObjectParkingPoi::set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.parking.ObjectParkingPoi.coordinate)
}

// optional uint32 zone_id = 31;
inline bool ObjectParkingPoi::has_zone_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ObjectParkingPoi::set_has_zone_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ObjectParkingPoi::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ObjectParkingPoi::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 ObjectParkingPoi::zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.zone_id)
  return zone_id_;
}
inline void ObjectParkingPoi::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.zone_id)
}

// optional uint32 extra_zone_id = 32;
inline bool ObjectParkingPoi::has_extra_zone_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ObjectParkingPoi::set_has_extra_zone_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ObjectParkingPoi::clear_has_extra_zone_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ObjectParkingPoi::clear_extra_zone_id() {
  extra_zone_id_ = 0u;
  clear_has_extra_zone_id();
}
inline ::google::protobuf::uint32 ObjectParkingPoi::extra_zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.extra_zone_id)
  return extra_zone_id_;
}
inline void ObjectParkingPoi::set_extra_zone_id(::google::protobuf::uint32 value) {
  set_has_extra_zone_id();
  extra_zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.extra_zone_id)
}

// optional bool south_flag = 33;
inline bool ObjectParkingPoi::has_south_flag() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ObjectParkingPoi::set_has_south_flag() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ObjectParkingPoi::clear_has_south_flag() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ObjectParkingPoi::clear_south_flag() {
  south_flag_ = false;
  clear_has_south_flag();
}
inline bool ObjectParkingPoi::south_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.south_flag)
  return south_flag_;
}
inline void ObjectParkingPoi::set_south_flag(bool value) {
  set_has_south_flag();
  south_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.parking.ObjectParkingPoi.south_flag)
}

// repeated .holo.map.proto.common.GeoPoint geometry_points = 34;
inline int ObjectParkingPoi::geometry_points_size() const {
  return geometry_points_.size();
}
inline ::holo::map::proto::common::GeoPoint* ObjectParkingPoi::mutable_geometry_points(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.parking.ObjectParkingPoi.geometry_points)
  return geometry_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
ObjectParkingPoi::mutable_geometry_points() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.parking.ObjectParkingPoi.geometry_points)
  return &geometry_points_;
}
inline const ::holo::map::proto::common::GeoPoint& ObjectParkingPoi::geometry_points(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.parking.ObjectParkingPoi.geometry_points)
  return geometry_points_.Get(index);
}
inline ::holo::map::proto::common::GeoPoint* ObjectParkingPoi::add_geometry_points() {
  // @@protoc_insertion_point(field_add:holo.map.proto.parking.ObjectParkingPoi.geometry_points)
  return geometry_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
ObjectParkingPoi::geometry_points() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.parking.ObjectParkingPoi.geometry_points)
  return geometry_points_;
}

// map<uint32, .holo.map.proto.common.GeoLine> extra_geometry_points = 35;
inline int ObjectParkingPoi::extra_geometry_points_size() const {
  return extra_geometry_points_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >&
ObjectParkingPoi::extra_geometry_points() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.parking.ObjectParkingPoi.extra_geometry_points)
  return extra_geometry_points_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >*
ObjectParkingPoi::mutable_extra_geometry_points() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.parking.ObjectParkingPoi.extra_geometry_points)
  return extra_geometry_points_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace parking
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::parking::ObjectParkingPoi_ObjectParkingPoiType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::parking::ObjectParkingPoi_ObjectParkingPoiType>() {
  return ::holo::map::proto::parking::ObjectParkingPoi_ObjectParkingPoiType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::parking::ObjectParkingPoi_RoadSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::parking::ObjectParkingPoi_RoadSide>() {
  return ::holo::map::proto::parking::ObjectParkingPoi_RoadSide_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fparking_2fobject_5fparking_5fpoi_2eproto
