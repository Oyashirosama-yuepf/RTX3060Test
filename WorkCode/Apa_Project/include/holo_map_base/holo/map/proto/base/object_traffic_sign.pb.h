// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/object_traffic_sign.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5fsign_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5fsign_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/coordinate.pb.h"
#include "holo/map/proto/common/geo_box4.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5fsign_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5fsign_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5fsign_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class ObjectTrafficSign;
class ObjectTrafficSignDefaultTypeInternal;
extern ObjectTrafficSignDefaultTypeInternal _ObjectTrafficSign_default_instance_;
class ObjectTrafficSign_ExtraGeometryEntry_DoNotUse;
class ObjectTrafficSign_ExtraGeometryEntry_DoNotUseDefaultTypeInternal;
extern ObjectTrafficSign_ExtraGeometryEntry_DoNotUseDefaultTypeInternal _ObjectTrafficSign_ExtraGeometryEntry_DoNotUse_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::ObjectTrafficSign* Arena::CreateMaybeMessage<::holo::map::proto::base::ObjectTrafficSign>(Arena*);
template<> ::holo::map::proto::base::ObjectTrafficSign_ExtraGeometryEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::ObjectTrafficSign_ExtraGeometryEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

enum ObjectTrafficSign_TrafficSignType {
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_UNDEFINED = 0,
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_WARNING = 1,
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_BAN = 2,
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_MANDATORY = 3,
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_GUIDE = 4,
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_TOURIST_AREAS = 5,
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_OPERATION_AREA = 6,
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_NOTICE = 7,
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_AUXILIARY = 8,
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_VARIABLE = 9,
  ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_OTHER = 10
};
bool ObjectTrafficSign_TrafficSignType_IsValid(int value);
const ObjectTrafficSign_TrafficSignType ObjectTrafficSign_TrafficSignType_TrafficSignType_MIN = ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_UNDEFINED;
const ObjectTrafficSign_TrafficSignType ObjectTrafficSign_TrafficSignType_TrafficSignType_MAX = ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_OTHER;
const int ObjectTrafficSign_TrafficSignType_TrafficSignType_ARRAYSIZE = ObjectTrafficSign_TrafficSignType_TrafficSignType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectTrafficSign_TrafficSignType_descriptor();
inline const ::std::string& ObjectTrafficSign_TrafficSignType_Name(ObjectTrafficSign_TrafficSignType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectTrafficSign_TrafficSignType_descriptor(), value);
}
inline bool ObjectTrafficSign_TrafficSignType_Parse(
    const ::std::string& name, ObjectTrafficSign_TrafficSignType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectTrafficSign_TrafficSignType>(
    ObjectTrafficSign_TrafficSignType_descriptor(), name, value);
}
enum ObjectTrafficSign_TrafficSignContent {
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_UNDEFINED = 0,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_CURVE_RIGHT = 1,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_CURVE_LEFT = 2,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_NO_OVERTAKING = 3,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_NO_OVERTAKING_END = 4,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_SPEED_LIMIT = 5,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_SPEED_LIMIT_END = 6,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_ADVISORY_SPEED_LIMIT = 7,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_VARIABLE_SPEED_LIMIT = 8,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_VARIABLE_INFO = 9,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_DO_NOT_ENTER = 10,
  ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_OTHER = 11
};
bool ObjectTrafficSign_TrafficSignContent_IsValid(int value);
const ObjectTrafficSign_TrafficSignContent ObjectTrafficSign_TrafficSignContent_TrafficSignContent_MIN = ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_UNDEFINED;
const ObjectTrafficSign_TrafficSignContent ObjectTrafficSign_TrafficSignContent_TrafficSignContent_MAX = ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_OTHER;
const int ObjectTrafficSign_TrafficSignContent_TrafficSignContent_ARRAYSIZE = ObjectTrafficSign_TrafficSignContent_TrafficSignContent_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectTrafficSign_TrafficSignContent_descriptor();
inline const ::std::string& ObjectTrafficSign_TrafficSignContent_Name(ObjectTrafficSign_TrafficSignContent value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectTrafficSign_TrafficSignContent_descriptor(), value);
}
inline bool ObjectTrafficSign_TrafficSignContent_Parse(
    const ::std::string& name, ObjectTrafficSign_TrafficSignContent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectTrafficSign_TrafficSignContent>(
    ObjectTrafficSign_TrafficSignContent_descriptor(), name, value);
}
enum ObjectTrafficSign_TrafficSignColor {
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_UNKNOWN = 0,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_LIGHT_GRAY = 1,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_GRAY = 2,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_DARK_GRAY = 3,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_BLACK = 4,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_RED = 5,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_YELLOW = 6,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_GREEN = 7,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_CYAN = 8,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_BLUE = 9,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_ORANGE = 10,
  ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_WHITE = 11
};
bool ObjectTrafficSign_TrafficSignColor_IsValid(int value);
const ObjectTrafficSign_TrafficSignColor ObjectTrafficSign_TrafficSignColor_TrafficSignColor_MIN = ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_UNKNOWN;
const ObjectTrafficSign_TrafficSignColor ObjectTrafficSign_TrafficSignColor_TrafficSignColor_MAX = ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_WHITE;
const int ObjectTrafficSign_TrafficSignColor_TrafficSignColor_ARRAYSIZE = ObjectTrafficSign_TrafficSignColor_TrafficSignColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectTrafficSign_TrafficSignColor_descriptor();
inline const ::std::string& ObjectTrafficSign_TrafficSignColor_Name(ObjectTrafficSign_TrafficSignColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectTrafficSign_TrafficSignColor_descriptor(), value);
}
inline bool ObjectTrafficSign_TrafficSignColor_Parse(
    const ::std::string& name, ObjectTrafficSign_TrafficSignColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectTrafficSign_TrafficSignColor>(
    ObjectTrafficSign_TrafficSignColor_descriptor(), name, value);
}
enum ObjectTrafficSign_TrafficSignShape {
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_UNDEFINED = 0,
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_RECTANGLE = 1,
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_ROUND = 2,
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_OCTAGON = 3,
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_DIAMOND = 4,
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_CROSBUCK = 5,
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_TRIANGLE_TIP_DOWN = 6,
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_ELLIPSE = 7,
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_OTHER = 8,
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_TRIANGLE_TIP_UP = 9,
  ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_UNKNOWN = 10
};
bool ObjectTrafficSign_TrafficSignShape_IsValid(int value);
const ObjectTrafficSign_TrafficSignShape ObjectTrafficSign_TrafficSignShape_TrafficSignShape_MIN = ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_UNDEFINED;
const ObjectTrafficSign_TrafficSignShape ObjectTrafficSign_TrafficSignShape_TrafficSignShape_MAX = ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_UNKNOWN;
const int ObjectTrafficSign_TrafficSignShape_TrafficSignShape_ARRAYSIZE = ObjectTrafficSign_TrafficSignShape_TrafficSignShape_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectTrafficSign_TrafficSignShape_descriptor();
inline const ::std::string& ObjectTrafficSign_TrafficSignShape_Name(ObjectTrafficSign_TrafficSignShape value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectTrafficSign_TrafficSignShape_descriptor(), value);
}
inline bool ObjectTrafficSign_TrafficSignShape_Parse(
    const ::std::string& name, ObjectTrafficSign_TrafficSignShape* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectTrafficSign_TrafficSignShape>(
    ObjectTrafficSign_TrafficSignShape_descriptor(), name, value);
}
// ===================================================================

class ObjectTrafficSign_ExtraGeometryEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ObjectTrafficSign_ExtraGeometryEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ObjectTrafficSign_ExtraGeometryEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ObjectTrafficSign_ExtraGeometryEntry_DoNotUse();
  ObjectTrafficSign_ExtraGeometryEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ObjectTrafficSign_ExtraGeometryEntry_DoNotUse& other);
  static const ObjectTrafficSign_ExtraGeometryEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ObjectTrafficSign_ExtraGeometryEntry_DoNotUse*>(&_ObjectTrafficSign_ExtraGeometryEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ObjectTrafficSign : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.ObjectTrafficSign) */ {
 public:
  ObjectTrafficSign();
  virtual ~ObjectTrafficSign();

  ObjectTrafficSign(const ObjectTrafficSign& from);

  inline ObjectTrafficSign& operator=(const ObjectTrafficSign& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectTrafficSign(ObjectTrafficSign&& from) noexcept
    : ObjectTrafficSign() {
    *this = ::std::move(from);
  }

  inline ObjectTrafficSign& operator=(ObjectTrafficSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectTrafficSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectTrafficSign* internal_default_instance() {
    return reinterpret_cast<const ObjectTrafficSign*>(
               &_ObjectTrafficSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ObjectTrafficSign* other);
  friend void swap(ObjectTrafficSign& a, ObjectTrafficSign& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectTrafficSign* New() const final {
    return CreateMaybeMessage<ObjectTrafficSign>(NULL);
  }

  ObjectTrafficSign* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectTrafficSign>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectTrafficSign& from);
  void MergeFrom(const ObjectTrafficSign& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectTrafficSign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef ObjectTrafficSign_TrafficSignType TrafficSignType;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_UNDEFINED =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_UNDEFINED;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_WARNING =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_WARNING;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_BAN =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_BAN;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_MANDATORY =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_MANDATORY;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_GUIDE =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_GUIDE;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_TOURIST_AREAS =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_TOURIST_AREAS;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_OPERATION_AREA =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_OPERATION_AREA;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_NOTICE =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_NOTICE;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_AUXILIARY =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_AUXILIARY;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_VARIABLE =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_VARIABLE;
  static const TrafficSignType TRAFFIC_SIGN_TYPE_OTHER =
    ObjectTrafficSign_TrafficSignType_TRAFFIC_SIGN_TYPE_OTHER;
  static inline bool TrafficSignType_IsValid(int value) {
    return ObjectTrafficSign_TrafficSignType_IsValid(value);
  }
  static const TrafficSignType TrafficSignType_MIN =
    ObjectTrafficSign_TrafficSignType_TrafficSignType_MIN;
  static const TrafficSignType TrafficSignType_MAX =
    ObjectTrafficSign_TrafficSignType_TrafficSignType_MAX;
  static const int TrafficSignType_ARRAYSIZE =
    ObjectTrafficSign_TrafficSignType_TrafficSignType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignType_descriptor() {
    return ObjectTrafficSign_TrafficSignType_descriptor();
  }
  static inline const ::std::string& TrafficSignType_Name(TrafficSignType value) {
    return ObjectTrafficSign_TrafficSignType_Name(value);
  }
  static inline bool TrafficSignType_Parse(const ::std::string& name,
      TrafficSignType* value) {
    return ObjectTrafficSign_TrafficSignType_Parse(name, value);
  }

  typedef ObjectTrafficSign_TrafficSignContent TrafficSignContent;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_UNDEFINED =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_UNDEFINED;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_CURVE_RIGHT =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_CURVE_RIGHT;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_CURVE_LEFT =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_CURVE_LEFT;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_NO_OVERTAKING =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_NO_OVERTAKING;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_NO_OVERTAKING_END =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_NO_OVERTAKING_END;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_SPEED_LIMIT =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_SPEED_LIMIT;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_SPEED_LIMIT_END =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_SPEED_LIMIT_END;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_ADVISORY_SPEED_LIMIT =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_ADVISORY_SPEED_LIMIT;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_VARIABLE_SPEED_LIMIT =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_VARIABLE_SPEED_LIMIT;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_VARIABLE_INFO =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_VARIABLE_INFO;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_DO_NOT_ENTER =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_DO_NOT_ENTER;
  static const TrafficSignContent TRAFFIC_SIGN_CONTENT_OTHER =
    ObjectTrafficSign_TrafficSignContent_TRAFFIC_SIGN_CONTENT_OTHER;
  static inline bool TrafficSignContent_IsValid(int value) {
    return ObjectTrafficSign_TrafficSignContent_IsValid(value);
  }
  static const TrafficSignContent TrafficSignContent_MIN =
    ObjectTrafficSign_TrafficSignContent_TrafficSignContent_MIN;
  static const TrafficSignContent TrafficSignContent_MAX =
    ObjectTrafficSign_TrafficSignContent_TrafficSignContent_MAX;
  static const int TrafficSignContent_ARRAYSIZE =
    ObjectTrafficSign_TrafficSignContent_TrafficSignContent_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignContent_descriptor() {
    return ObjectTrafficSign_TrafficSignContent_descriptor();
  }
  static inline const ::std::string& TrafficSignContent_Name(TrafficSignContent value) {
    return ObjectTrafficSign_TrafficSignContent_Name(value);
  }
  static inline bool TrafficSignContent_Parse(const ::std::string& name,
      TrafficSignContent* value) {
    return ObjectTrafficSign_TrafficSignContent_Parse(name, value);
  }

  typedef ObjectTrafficSign_TrafficSignColor TrafficSignColor;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_UNKNOWN =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_UNKNOWN;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_LIGHT_GRAY =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_LIGHT_GRAY;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_GRAY =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_GRAY;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_DARK_GRAY =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_DARK_GRAY;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_BLACK =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_BLACK;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_RED =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_RED;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_YELLOW =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_YELLOW;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_GREEN =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_GREEN;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_CYAN =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_CYAN;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_BLUE =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_BLUE;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_ORANGE =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_ORANGE;
  static const TrafficSignColor TRAFFIC_SIGN_COLOR_WHITE =
    ObjectTrafficSign_TrafficSignColor_TRAFFIC_SIGN_COLOR_WHITE;
  static inline bool TrafficSignColor_IsValid(int value) {
    return ObjectTrafficSign_TrafficSignColor_IsValid(value);
  }
  static const TrafficSignColor TrafficSignColor_MIN =
    ObjectTrafficSign_TrafficSignColor_TrafficSignColor_MIN;
  static const TrafficSignColor TrafficSignColor_MAX =
    ObjectTrafficSign_TrafficSignColor_TrafficSignColor_MAX;
  static const int TrafficSignColor_ARRAYSIZE =
    ObjectTrafficSign_TrafficSignColor_TrafficSignColor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignColor_descriptor() {
    return ObjectTrafficSign_TrafficSignColor_descriptor();
  }
  static inline const ::std::string& TrafficSignColor_Name(TrafficSignColor value) {
    return ObjectTrafficSign_TrafficSignColor_Name(value);
  }
  static inline bool TrafficSignColor_Parse(const ::std::string& name,
      TrafficSignColor* value) {
    return ObjectTrafficSign_TrafficSignColor_Parse(name, value);
  }

  typedef ObjectTrafficSign_TrafficSignShape TrafficSignShape;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_UNDEFINED =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_UNDEFINED;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_RECTANGLE =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_RECTANGLE;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_ROUND =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_ROUND;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_OCTAGON =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_OCTAGON;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_DIAMOND =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_DIAMOND;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_CROSBUCK =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_CROSBUCK;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_TRIANGLE_TIP_DOWN =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_TRIANGLE_TIP_DOWN;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_ELLIPSE =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_ELLIPSE;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_OTHER =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_OTHER;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_TRIANGLE_TIP_UP =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_TRIANGLE_TIP_UP;
  static const TrafficSignShape TRAFFIC_SIGN_SHAPE_UNKNOWN =
    ObjectTrafficSign_TrafficSignShape_TRAFFIC_SIGN_SHAPE_UNKNOWN;
  static inline bool TrafficSignShape_IsValid(int value) {
    return ObjectTrafficSign_TrafficSignShape_IsValid(value);
  }
  static const TrafficSignShape TrafficSignShape_MIN =
    ObjectTrafficSign_TrafficSignShape_TrafficSignShape_MIN;
  static const TrafficSignShape TrafficSignShape_MAX =
    ObjectTrafficSign_TrafficSignShape_TrafficSignShape_MAX;
  static const int TrafficSignShape_ARRAYSIZE =
    ObjectTrafficSign_TrafficSignShape_TrafficSignShape_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficSignShape_descriptor() {
    return ObjectTrafficSign_TrafficSignShape_descriptor();
  }
  static inline const ::std::string& TrafficSignShape_Name(TrafficSignShape value) {
    return ObjectTrafficSign_TrafficSignShape_Name(value);
  }
  static inline bool TrafficSignShape_Parse(const ::std::string& name,
      TrafficSignShape* value) {
    return ObjectTrafficSign_TrafficSignShape_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 tile_ids = 10 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 10;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // repeated uint64 associated_lane_ids = 11 [packed = true];
  int associated_lane_ids_size() const;
  void clear_associated_lane_ids();
  static const int kAssociatedLaneIdsFieldNumber = 11;
  ::google::protobuf::uint64 associated_lane_ids(int index) const;
  void set_associated_lane_ids(int index, ::google::protobuf::uint64 value);
  void add_associated_lane_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_lane_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_lane_ids();

  // repeated uint64 associated_lane_group_ids = 12 [packed = true];
  int associated_lane_group_ids_size() const;
  void clear_associated_lane_group_ids();
  static const int kAssociatedLaneGroupIdsFieldNumber = 12;
  ::google::protobuf::uint64 associated_lane_group_ids(int index) const;
  void set_associated_lane_group_ids(int index, ::google::protobuf::uint64 value);
  void add_associated_lane_group_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_lane_group_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_lane_group_ids();

  // map<uint32, .holo.map.proto.common.GeoBox4> extra_geometry = 24;
  int extra_geometry_size() const;
  void clear_extra_geometry();
  static const int kExtraGeometryFieldNumber = 24;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4 >&
      extra_geometry() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4 >*
      mutable_extra_geometry();

  // optional string traffic_sign_content_data = 4;
  bool has_traffic_sign_content_data() const;
  void clear_traffic_sign_content_data();
  static const int kTrafficSignContentDataFieldNumber = 4;
  const ::std::string& traffic_sign_content_data() const;
  void set_traffic_sign_content_data(const ::std::string& value);
  #if LANG_CXX11
  void set_traffic_sign_content_data(::std::string&& value);
  #endif
  void set_traffic_sign_content_data(const char* value);
  void set_traffic_sign_content_data(const char* value, size_t size);
  ::std::string* mutable_traffic_sign_content_data();
  ::std::string* release_traffic_sign_content_data();
  void set_allocated_traffic_sign_content_data(::std::string* traffic_sign_content_data);

  // optional .holo.map.proto.common.GeoBox4 geometry = 23;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 23;
  private:
  const ::holo::map::proto::common::GeoBox4& _internal_geometry() const;
  public:
  const ::holo::map::proto::common::GeoBox4& geometry() const;
  ::holo::map::proto::common::GeoBox4* release_geometry();
  ::holo::map::proto::common::GeoBox4* mutable_geometry();
  void set_allocated_geometry(::holo::map::proto::common::GeoBox4* geometry);

  // optional .holo.map.proto.common.Coordinate coordinate = 25;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 25;
  private:
  const ::holo::map::proto::common::Coordinate& _internal_coordinate() const;
  public:
  const ::holo::map::proto::common::Coordinate& coordinate() const;
  ::holo::map::proto::common::Coordinate* release_coordinate();
  ::holo::map::proto::common::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate);

  // optional uint64 object_traffic_sign_id = 1;
  bool has_object_traffic_sign_id() const;
  void clear_object_traffic_sign_id();
  static const int kObjectTrafficSignIdFieldNumber = 1;
  ::google::protobuf::uint64 object_traffic_sign_id() const;
  void set_object_traffic_sign_id(::google::protobuf::uint64 value);

  // optional .holo.map.proto.base.ObjectTrafficSign.TrafficSignType traffic_sign_type = 2;
  bool has_traffic_sign_type() const;
  void clear_traffic_sign_type();
  static const int kTrafficSignTypeFieldNumber = 2;
  ::holo::map::proto::base::ObjectTrafficSign_TrafficSignType traffic_sign_type() const;
  void set_traffic_sign_type(::holo::map::proto::base::ObjectTrafficSign_TrafficSignType value);

  // optional .holo.map.proto.base.ObjectTrafficSign.TrafficSignContent traffic_sign_content = 3;
  bool has_traffic_sign_content() const;
  void clear_traffic_sign_content();
  static const int kTrafficSignContentFieldNumber = 3;
  ::holo::map::proto::base::ObjectTrafficSign_TrafficSignContent traffic_sign_content() const;
  void set_traffic_sign_content(::holo::map::proto::base::ObjectTrafficSign_TrafficSignContent value);

  // optional .holo.map.proto.base.ObjectTrafficSign.TrafficSignColor traffic_sign_color = 5;
  bool has_traffic_sign_color() const;
  void clear_traffic_sign_color();
  static const int kTrafficSignColorFieldNumber = 5;
  ::holo::map::proto::base::ObjectTrafficSign_TrafficSignColor traffic_sign_color() const;
  void set_traffic_sign_color(::holo::map::proto::base::ObjectTrafficSign_TrafficSignColor value);

  // optional .holo.map.proto.base.ObjectTrafficSign.TrafficSignShape traffic_sign_shape = 6;
  bool has_traffic_sign_shape() const;
  void clear_traffic_sign_shape();
  static const int kTrafficSignShapeFieldNumber = 6;
  ::holo::map::proto::base::ObjectTrafficSign_TrafficSignShape traffic_sign_shape() const;
  void set_traffic_sign_shape(::holo::map::proto::base::ObjectTrafficSign_TrafficSignShape value);

  // optional uint64 traffic_sign_heading = 7;
  bool has_traffic_sign_heading() const;
  void clear_traffic_sign_heading();
  static const int kTrafficSignHeadingFieldNumber = 7;
  ::google::protobuf::uint64 traffic_sign_heading() const;
  void set_traffic_sign_heading(::google::protobuf::uint64 value);

  // optional bool south_flag = 22;
  bool has_south_flag() const;
  void clear_south_flag();
  static const int kSouthFlagFieldNumber = 22;
  bool south_flag() const;
  void set_south_flag(bool value);

  // optional uint32 zone_id = 20;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 20;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // optional uint32 extra_zone_id = 21;
  bool has_extra_zone_id() const;
  void clear_extra_zone_id();
  static const int kExtraZoneIdFieldNumber = 21;
  ::google::protobuf::uint32 extra_zone_id() const;
  void set_extra_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.ObjectTrafficSign)
 private:
  void set_has_object_traffic_sign_id();
  void clear_has_object_traffic_sign_id();
  void set_has_traffic_sign_type();
  void clear_has_traffic_sign_type();
  void set_has_traffic_sign_content();
  void clear_has_traffic_sign_content();
  void set_has_traffic_sign_content_data();
  void clear_has_traffic_sign_content_data();
  void set_has_traffic_sign_color();
  void clear_has_traffic_sign_color();
  void set_has_traffic_sign_shape();
  void clear_has_traffic_sign_shape();
  void set_has_traffic_sign_heading();
  void clear_has_traffic_sign_heading();
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_extra_zone_id();
  void clear_has_extra_zone_id();
  void set_has_south_flag();
  void clear_has_south_flag();
  void set_has_geometry();
  void clear_has_geometry();
  void set_has_coordinate();
  void clear_has_coordinate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_lane_ids_;
  mutable int _associated_lane_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_lane_group_ids_;
  mutable int _associated_lane_group_ids_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      ObjectTrafficSign_ExtraGeometryEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_geometry_;
  ::google::protobuf::internal::ArenaStringPtr traffic_sign_content_data_;
  ::holo::map::proto::common::GeoBox4* geometry_;
  ::holo::map::proto::common::Coordinate* coordinate_;
  ::google::protobuf::uint64 object_traffic_sign_id_;
  int traffic_sign_type_;
  int traffic_sign_content_;
  int traffic_sign_color_;
  int traffic_sign_shape_;
  ::google::protobuf::uint64 traffic_sign_heading_;
  bool south_flag_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 extra_zone_id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5fsign_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ObjectTrafficSign

// optional uint64 object_traffic_sign_id = 1;
inline bool ObjectTrafficSign::has_object_traffic_sign_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectTrafficSign::set_has_object_traffic_sign_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectTrafficSign::clear_has_object_traffic_sign_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectTrafficSign::clear_object_traffic_sign_id() {
  object_traffic_sign_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_traffic_sign_id();
}
inline ::google::protobuf::uint64 ObjectTrafficSign::object_traffic_sign_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.object_traffic_sign_id)
  return object_traffic_sign_id_;
}
inline void ObjectTrafficSign::set_object_traffic_sign_id(::google::protobuf::uint64 value) {
  set_has_object_traffic_sign_id();
  object_traffic_sign_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.object_traffic_sign_id)
}

// optional .holo.map.proto.base.ObjectTrafficSign.TrafficSignType traffic_sign_type = 2;
inline bool ObjectTrafficSign::has_traffic_sign_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObjectTrafficSign::set_has_traffic_sign_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObjectTrafficSign::clear_has_traffic_sign_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObjectTrafficSign::clear_traffic_sign_type() {
  traffic_sign_type_ = 0;
  clear_has_traffic_sign_type();
}
inline ::holo::map::proto::base::ObjectTrafficSign_TrafficSignType ObjectTrafficSign::traffic_sign_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.traffic_sign_type)
  return static_cast< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignType >(traffic_sign_type_);
}
inline void ObjectTrafficSign::set_traffic_sign_type(::holo::map::proto::base::ObjectTrafficSign_TrafficSignType value) {
  assert(::holo::map::proto::base::ObjectTrafficSign_TrafficSignType_IsValid(value));
  set_has_traffic_sign_type();
  traffic_sign_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.traffic_sign_type)
}

// optional .holo.map.proto.base.ObjectTrafficSign.TrafficSignContent traffic_sign_content = 3;
inline bool ObjectTrafficSign::has_traffic_sign_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObjectTrafficSign::set_has_traffic_sign_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObjectTrafficSign::clear_has_traffic_sign_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObjectTrafficSign::clear_traffic_sign_content() {
  traffic_sign_content_ = 0;
  clear_has_traffic_sign_content();
}
inline ::holo::map::proto::base::ObjectTrafficSign_TrafficSignContent ObjectTrafficSign::traffic_sign_content() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.traffic_sign_content)
  return static_cast< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignContent >(traffic_sign_content_);
}
inline void ObjectTrafficSign::set_traffic_sign_content(::holo::map::proto::base::ObjectTrafficSign_TrafficSignContent value) {
  assert(::holo::map::proto::base::ObjectTrafficSign_TrafficSignContent_IsValid(value));
  set_has_traffic_sign_content();
  traffic_sign_content_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.traffic_sign_content)
}

// optional string traffic_sign_content_data = 4;
inline bool ObjectTrafficSign::has_traffic_sign_content_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectTrafficSign::set_has_traffic_sign_content_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectTrafficSign::clear_has_traffic_sign_content_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjectTrafficSign::clear_traffic_sign_content_data() {
  traffic_sign_content_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_traffic_sign_content_data();
}
inline const ::std::string& ObjectTrafficSign::traffic_sign_content_data() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.traffic_sign_content_data)
  return traffic_sign_content_data_.GetNoArena();
}
inline void ObjectTrafficSign::set_traffic_sign_content_data(const ::std::string& value) {
  set_has_traffic_sign_content_data();
  traffic_sign_content_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.traffic_sign_content_data)
}
#if LANG_CXX11
inline void ObjectTrafficSign::set_traffic_sign_content_data(::std::string&& value) {
  set_has_traffic_sign_content_data();
  traffic_sign_content_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.map.proto.base.ObjectTrafficSign.traffic_sign_content_data)
}
#endif
inline void ObjectTrafficSign::set_traffic_sign_content_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_traffic_sign_content_data();
  traffic_sign_content_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.map.proto.base.ObjectTrafficSign.traffic_sign_content_data)
}
inline void ObjectTrafficSign::set_traffic_sign_content_data(const char* value, size_t size) {
  set_has_traffic_sign_content_data();
  traffic_sign_content_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.map.proto.base.ObjectTrafficSign.traffic_sign_content_data)
}
inline ::std::string* ObjectTrafficSign::mutable_traffic_sign_content_data() {
  set_has_traffic_sign_content_data();
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.ObjectTrafficSign.traffic_sign_content_data)
  return traffic_sign_content_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectTrafficSign::release_traffic_sign_content_data() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.ObjectTrafficSign.traffic_sign_content_data)
  if (!has_traffic_sign_content_data()) {
    return NULL;
  }
  clear_has_traffic_sign_content_data();
  return traffic_sign_content_data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectTrafficSign::set_allocated_traffic_sign_content_data(::std::string* traffic_sign_content_data) {
  if (traffic_sign_content_data != NULL) {
    set_has_traffic_sign_content_data();
  } else {
    clear_has_traffic_sign_content_data();
  }
  traffic_sign_content_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traffic_sign_content_data);
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.ObjectTrafficSign.traffic_sign_content_data)
}

// optional .holo.map.proto.base.ObjectTrafficSign.TrafficSignColor traffic_sign_color = 5;
inline bool ObjectTrafficSign::has_traffic_sign_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObjectTrafficSign::set_has_traffic_sign_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ObjectTrafficSign::clear_has_traffic_sign_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ObjectTrafficSign::clear_traffic_sign_color() {
  traffic_sign_color_ = 0;
  clear_has_traffic_sign_color();
}
inline ::holo::map::proto::base::ObjectTrafficSign_TrafficSignColor ObjectTrafficSign::traffic_sign_color() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.traffic_sign_color)
  return static_cast< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignColor >(traffic_sign_color_);
}
inline void ObjectTrafficSign::set_traffic_sign_color(::holo::map::proto::base::ObjectTrafficSign_TrafficSignColor value) {
  assert(::holo::map::proto::base::ObjectTrafficSign_TrafficSignColor_IsValid(value));
  set_has_traffic_sign_color();
  traffic_sign_color_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.traffic_sign_color)
}

// optional .holo.map.proto.base.ObjectTrafficSign.TrafficSignShape traffic_sign_shape = 6;
inline bool ObjectTrafficSign::has_traffic_sign_shape() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ObjectTrafficSign::set_has_traffic_sign_shape() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ObjectTrafficSign::clear_has_traffic_sign_shape() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ObjectTrafficSign::clear_traffic_sign_shape() {
  traffic_sign_shape_ = 0;
  clear_has_traffic_sign_shape();
}
inline ::holo::map::proto::base::ObjectTrafficSign_TrafficSignShape ObjectTrafficSign::traffic_sign_shape() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.traffic_sign_shape)
  return static_cast< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignShape >(traffic_sign_shape_);
}
inline void ObjectTrafficSign::set_traffic_sign_shape(::holo::map::proto::base::ObjectTrafficSign_TrafficSignShape value) {
  assert(::holo::map::proto::base::ObjectTrafficSign_TrafficSignShape_IsValid(value));
  set_has_traffic_sign_shape();
  traffic_sign_shape_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.traffic_sign_shape)
}

// optional uint64 traffic_sign_heading = 7;
inline bool ObjectTrafficSign::has_traffic_sign_heading() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ObjectTrafficSign::set_has_traffic_sign_heading() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ObjectTrafficSign::clear_has_traffic_sign_heading() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ObjectTrafficSign::clear_traffic_sign_heading() {
  traffic_sign_heading_ = GOOGLE_ULONGLONG(0);
  clear_has_traffic_sign_heading();
}
inline ::google::protobuf::uint64 ObjectTrafficSign::traffic_sign_heading() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.traffic_sign_heading)
  return traffic_sign_heading_;
}
inline void ObjectTrafficSign::set_traffic_sign_heading(::google::protobuf::uint64 value) {
  set_has_traffic_sign_heading();
  traffic_sign_heading_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.traffic_sign_heading)
}

// repeated uint64 tile_ids = 10 [packed = true];
inline int ObjectTrafficSign::tile_ids_size() const {
  return tile_ids_.size();
}
inline void ObjectTrafficSign::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectTrafficSign::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.tile_ids)
  return tile_ids_.Get(index);
}
inline void ObjectTrafficSign::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.tile_ids)
}
inline void ObjectTrafficSign::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectTrafficSign.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectTrafficSign::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectTrafficSign.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectTrafficSign::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectTrafficSign.tile_ids)
  return &tile_ids_;
}

// repeated uint64 associated_lane_ids = 11 [packed = true];
inline int ObjectTrafficSign::associated_lane_ids_size() const {
  return associated_lane_ids_.size();
}
inline void ObjectTrafficSign::clear_associated_lane_ids() {
  associated_lane_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectTrafficSign::associated_lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.associated_lane_ids)
  return associated_lane_ids_.Get(index);
}
inline void ObjectTrafficSign::set_associated_lane_ids(int index, ::google::protobuf::uint64 value) {
  associated_lane_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.associated_lane_ids)
}
inline void ObjectTrafficSign::add_associated_lane_ids(::google::protobuf::uint64 value) {
  associated_lane_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectTrafficSign.associated_lane_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectTrafficSign::associated_lane_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectTrafficSign.associated_lane_ids)
  return associated_lane_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectTrafficSign::mutable_associated_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectTrafficSign.associated_lane_ids)
  return &associated_lane_ids_;
}

// repeated uint64 associated_lane_group_ids = 12 [packed = true];
inline int ObjectTrafficSign::associated_lane_group_ids_size() const {
  return associated_lane_group_ids_.size();
}
inline void ObjectTrafficSign::clear_associated_lane_group_ids() {
  associated_lane_group_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectTrafficSign::associated_lane_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.associated_lane_group_ids)
  return associated_lane_group_ids_.Get(index);
}
inline void ObjectTrafficSign::set_associated_lane_group_ids(int index, ::google::protobuf::uint64 value) {
  associated_lane_group_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.associated_lane_group_ids)
}
inline void ObjectTrafficSign::add_associated_lane_group_ids(::google::protobuf::uint64 value) {
  associated_lane_group_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectTrafficSign.associated_lane_group_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectTrafficSign::associated_lane_group_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectTrafficSign.associated_lane_group_ids)
  return associated_lane_group_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectTrafficSign::mutable_associated_lane_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectTrafficSign.associated_lane_group_ids)
  return &associated_lane_group_ids_;
}

// optional uint32 zone_id = 20;
inline bool ObjectTrafficSign::has_zone_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ObjectTrafficSign::set_has_zone_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ObjectTrafficSign::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ObjectTrafficSign::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 ObjectTrafficSign::zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.zone_id)
  return zone_id_;
}
inline void ObjectTrafficSign::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.zone_id)
}

// optional uint32 extra_zone_id = 21;
inline bool ObjectTrafficSign::has_extra_zone_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ObjectTrafficSign::set_has_extra_zone_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ObjectTrafficSign::clear_has_extra_zone_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ObjectTrafficSign::clear_extra_zone_id() {
  extra_zone_id_ = 0u;
  clear_has_extra_zone_id();
}
inline ::google::protobuf::uint32 ObjectTrafficSign::extra_zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.extra_zone_id)
  return extra_zone_id_;
}
inline void ObjectTrafficSign::set_extra_zone_id(::google::protobuf::uint32 value) {
  set_has_extra_zone_id();
  extra_zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.extra_zone_id)
}

// optional bool south_flag = 22;
inline bool ObjectTrafficSign::has_south_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ObjectTrafficSign::set_has_south_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ObjectTrafficSign::clear_has_south_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ObjectTrafficSign::clear_south_flag() {
  south_flag_ = false;
  clear_has_south_flag();
}
inline bool ObjectTrafficSign::south_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.south_flag)
  return south_flag_;
}
inline void ObjectTrafficSign::set_south_flag(bool value) {
  set_has_south_flag();
  south_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficSign.south_flag)
}

// optional .holo.map.proto.common.GeoBox4 geometry = 23;
inline bool ObjectTrafficSign::has_geometry() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectTrafficSign::set_has_geometry() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectTrafficSign::clear_has_geometry() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::GeoBox4& ObjectTrafficSign::_internal_geometry() const {
  return *geometry_;
}
inline const ::holo::map::proto::common::GeoBox4& ObjectTrafficSign::geometry() const {
  const ::holo::map::proto::common::GeoBox4* p = geometry_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.geometry)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoBox4*>(
      &::holo::map::proto::common::_GeoBox4_default_instance_);
}
inline ::holo::map::proto::common::GeoBox4* ObjectTrafficSign::release_geometry() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.ObjectTrafficSign.geometry)
  clear_has_geometry();
  ::holo::map::proto::common::GeoBox4* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoBox4* ObjectTrafficSign::mutable_geometry() {
  set_has_geometry();
  if (geometry_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoBox4>(GetArenaNoVirtual());
    geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.ObjectTrafficSign.geometry)
  return geometry_;
}
inline void ObjectTrafficSign::set_allocated_geometry(::holo::map::proto::common::GeoBox4* geometry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geometry_);
  }
  if (geometry) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geometry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    set_has_geometry();
  } else {
    clear_has_geometry();
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.ObjectTrafficSign.geometry)
}

// map<uint32, .holo.map.proto.common.GeoBox4> extra_geometry = 24;
inline int ObjectTrafficSign::extra_geometry_size() const {
  return extra_geometry_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4 >&
ObjectTrafficSign::extra_geometry() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.ObjectTrafficSign.extra_geometry)
  return extra_geometry_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4 >*
ObjectTrafficSign::mutable_extra_geometry() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.ObjectTrafficSign.extra_geometry)
  return extra_geometry_.MutableMap();
}

// optional .holo.map.proto.common.Coordinate coordinate = 25;
inline bool ObjectTrafficSign::has_coordinate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectTrafficSign::set_has_coordinate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectTrafficSign::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::holo::map::proto::common::Coordinate& ObjectTrafficSign::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::holo::map::proto::common::Coordinate& ObjectTrafficSign::coordinate() const {
  const ::holo::map::proto::common::Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficSign.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::Coordinate*>(
      &::holo::map::proto::common::_Coordinate_default_instance_);
}
inline ::holo::map::proto::common::Coordinate* ObjectTrafficSign::release_coordinate() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.ObjectTrafficSign.coordinate)
  clear_has_coordinate();
  ::holo::map::proto::common::Coordinate* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::Coordinate* ObjectTrafficSign::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.ObjectTrafficSign.coordinate)
  return coordinate_;
}
inline void ObjectTrafficSign::set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.ObjectTrafficSign.coordinate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignType>() {
  return ::holo::map::proto::base::ObjectTrafficSign_TrafficSignType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignContent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignContent>() {
  return ::holo::map::proto::base::ObjectTrafficSign_TrafficSignContent_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignColor>() {
  return ::holo::map::proto::base::ObjectTrafficSign_TrafficSignColor_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignShape> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::ObjectTrafficSign_TrafficSignShape>() {
  return ::holo::map::proto::base::ObjectTrafficSign_TrafficSignShape_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5fsign_2eproto
