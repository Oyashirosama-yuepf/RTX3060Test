// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/lane_group.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2flane_5fgroup_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2flane_5fgroup_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/coordinate.pb.h"
#include "holo/map/proto/common/geo_box.pb.h"
#include "holo/map/proto/common/geo_line.pb.h"
#include "holo/map/proto/common/geo_point.pb.h"
#include "holo/map/proto/base/lane_group_attribute.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2flane_5fgroup_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2flane_5fgroup_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2flane_5fgroup_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class LaneGroup;
class LaneGroupDefaultTypeInternal;
extern LaneGroupDefaultTypeInternal _LaneGroup_default_instance_;
class LaneGroup_ExtraGeometryPointsEntry_DoNotUse;
class LaneGroup_ExtraGeometryPointsEntry_DoNotUseDefaultTypeInternal;
extern LaneGroup_ExtraGeometryPointsEntry_DoNotUseDefaultTypeInternal _LaneGroup_ExtraGeometryPointsEntry_DoNotUse_default_instance_;
class LaneGroup_ExtraRegionEntry_DoNotUse;
class LaneGroup_ExtraRegionEntry_DoNotUseDefaultTypeInternal;
extern LaneGroup_ExtraRegionEntry_DoNotUseDefaultTypeInternal _LaneGroup_ExtraRegionEntry_DoNotUse_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::LaneGroup* Arena::CreateMaybeMessage<::holo::map::proto::base::LaneGroup>(Arena*);
template<> ::holo::map::proto::base::LaneGroup_ExtraGeometryPointsEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::LaneGroup_ExtraGeometryPointsEntry_DoNotUse>(Arena*);
template<> ::holo::map::proto::base::LaneGroup_ExtraRegionEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::LaneGroup_ExtraRegionEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

enum LaneGroup_AssociationType {
  LaneGroup_AssociationType_ASSOCIATION_TYPE_UNDEFINED = 0,
  LaneGroup_AssociationType_ASSOCIATION_TYPE_SAME_TRAVEL_DIRECTION = 1,
  LaneGroup_AssociationType_ASSOCIATION_TYPE_OPPOSITE_TRAVEL_DIRECTION = 2,
  LaneGroup_AssociationType_ASSOCIATION_TYPE_INTERSECTION = 3
};
bool LaneGroup_AssociationType_IsValid(int value);
const LaneGroup_AssociationType LaneGroup_AssociationType_AssociationType_MIN = LaneGroup_AssociationType_ASSOCIATION_TYPE_UNDEFINED;
const LaneGroup_AssociationType LaneGroup_AssociationType_AssociationType_MAX = LaneGroup_AssociationType_ASSOCIATION_TYPE_INTERSECTION;
const int LaneGroup_AssociationType_AssociationType_ARRAYSIZE = LaneGroup_AssociationType_AssociationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneGroup_AssociationType_descriptor();
inline const ::std::string& LaneGroup_AssociationType_Name(LaneGroup_AssociationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneGroup_AssociationType_descriptor(), value);
}
inline bool LaneGroup_AssociationType_Parse(
    const ::std::string& name, LaneGroup_AssociationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneGroup_AssociationType>(
    LaneGroup_AssociationType_descriptor(), name, value);
}
enum LaneGroup_LaneGroupType {
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_UNDEFINED = 0,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_EXPRESSWAY = 1,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_FREEWAY = 2,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_ENTRY_RAMP = 3,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_EXIT_RAMP = 4,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RAMP = 5,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_JCT = 6,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_SERVICE = 7,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_REGULAR = 8,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_AUXILIARY = 9,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_INTERSECTION = 10,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_ROUNDABOUT = 11,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_PEDESTRIAN = 12,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_PARALLEL = 13,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_SERVICE_AREA = 14,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_TOLL_BOOTH = 15,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RESERVED_1 = 250,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RESERVED_2 = 251,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RESERVED_3 = 252,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RESERVED_4 = 253,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RESERVED_5 = 254,
  LaneGroup_LaneGroupType_LANE_GROUP_TYPE_OTHERS = 255
};
bool LaneGroup_LaneGroupType_IsValid(int value);
const LaneGroup_LaneGroupType LaneGroup_LaneGroupType_LaneGroupType_MIN = LaneGroup_LaneGroupType_LANE_GROUP_TYPE_UNDEFINED;
const LaneGroup_LaneGroupType LaneGroup_LaneGroupType_LaneGroupType_MAX = LaneGroup_LaneGroupType_LANE_GROUP_TYPE_OTHERS;
const int LaneGroup_LaneGroupType_LaneGroupType_ARRAYSIZE = LaneGroup_LaneGroupType_LaneGroupType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneGroup_LaneGroupType_descriptor();
inline const ::std::string& LaneGroup_LaneGroupType_Name(LaneGroup_LaneGroupType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneGroup_LaneGroupType_descriptor(), value);
}
inline bool LaneGroup_LaneGroupType_Parse(
    const ::std::string& name, LaneGroup_LaneGroupType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneGroup_LaneGroupType>(
    LaneGroup_LaneGroupType_descriptor(), name, value);
}
enum LaneGroup_LaneGroupClass {
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_UNKNOWN = 0,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_EXPRESS = 1,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_FREEWAY = 2,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_STATE_ROAD = 3,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_PROVINCE_ROAD = 4,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_CITY_MAIN_ROAD = 5,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_CITY_SECONDARY_ROAD = 6,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_CITY_BRANCH_ROAD = 7,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_1 = 8,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_2 = 9,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_3 = 10,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_4 = 11,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_5 = 12,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_COUNTY_ROAD = 13,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_TOWNSHIP_ROAD = 14,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_6 = 15,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_7 = 16,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_8 = 17,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_9 = 18,
  LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_OTHERS = 255
};
bool LaneGroup_LaneGroupClass_IsValid(int value);
const LaneGroup_LaneGroupClass LaneGroup_LaneGroupClass_LaneGroupClass_MIN = LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_UNKNOWN;
const LaneGroup_LaneGroupClass LaneGroup_LaneGroupClass_LaneGroupClass_MAX = LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_OTHERS;
const int LaneGroup_LaneGroupClass_LaneGroupClass_ARRAYSIZE = LaneGroup_LaneGroupClass_LaneGroupClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneGroup_LaneGroupClass_descriptor();
inline const ::std::string& LaneGroup_LaneGroupClass_Name(LaneGroup_LaneGroupClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneGroup_LaneGroupClass_descriptor(), value);
}
inline bool LaneGroup_LaneGroupClass_Parse(
    const ::std::string& name, LaneGroup_LaneGroupClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneGroup_LaneGroupClass>(
    LaneGroup_LaneGroupClass_descriptor(), name, value);
}
// ===================================================================

class LaneGroup_ExtraRegionEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<LaneGroup_ExtraRegionEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<LaneGroup_ExtraRegionEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  LaneGroup_ExtraRegionEntry_DoNotUse();
  LaneGroup_ExtraRegionEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const LaneGroup_ExtraRegionEntry_DoNotUse& other);
  static const LaneGroup_ExtraRegionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LaneGroup_ExtraRegionEntry_DoNotUse*>(&_LaneGroup_ExtraRegionEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LaneGroup_ExtraGeometryPointsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<LaneGroup_ExtraGeometryPointsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<LaneGroup_ExtraGeometryPointsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  LaneGroup_ExtraGeometryPointsEntry_DoNotUse();
  LaneGroup_ExtraGeometryPointsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const LaneGroup_ExtraGeometryPointsEntry_DoNotUse& other);
  static const LaneGroup_ExtraGeometryPointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LaneGroup_ExtraGeometryPointsEntry_DoNotUse*>(&_LaneGroup_ExtraGeometryPointsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LaneGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.LaneGroup) */ {
 public:
  LaneGroup();
  virtual ~LaneGroup();

  LaneGroup(const LaneGroup& from);

  inline LaneGroup& operator=(const LaneGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneGroup(LaneGroup&& from) noexcept
    : LaneGroup() {
    *this = ::std::move(from);
  }

  inline LaneGroup& operator=(LaneGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneGroup* internal_default_instance() {
    return reinterpret_cast<const LaneGroup*>(
               &_LaneGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LaneGroup* other);
  friend void swap(LaneGroup& a, LaneGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneGroup* New() const final {
    return CreateMaybeMessage<LaneGroup>(NULL);
  }

  LaneGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneGroup& from);
  void MergeFrom(const LaneGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef LaneGroup_AssociationType AssociationType;
  static const AssociationType ASSOCIATION_TYPE_UNDEFINED =
    LaneGroup_AssociationType_ASSOCIATION_TYPE_UNDEFINED;
  static const AssociationType ASSOCIATION_TYPE_SAME_TRAVEL_DIRECTION =
    LaneGroup_AssociationType_ASSOCIATION_TYPE_SAME_TRAVEL_DIRECTION;
  static const AssociationType ASSOCIATION_TYPE_OPPOSITE_TRAVEL_DIRECTION =
    LaneGroup_AssociationType_ASSOCIATION_TYPE_OPPOSITE_TRAVEL_DIRECTION;
  static const AssociationType ASSOCIATION_TYPE_INTERSECTION =
    LaneGroup_AssociationType_ASSOCIATION_TYPE_INTERSECTION;
  static inline bool AssociationType_IsValid(int value) {
    return LaneGroup_AssociationType_IsValid(value);
  }
  static const AssociationType AssociationType_MIN =
    LaneGroup_AssociationType_AssociationType_MIN;
  static const AssociationType AssociationType_MAX =
    LaneGroup_AssociationType_AssociationType_MAX;
  static const int AssociationType_ARRAYSIZE =
    LaneGroup_AssociationType_AssociationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AssociationType_descriptor() {
    return LaneGroup_AssociationType_descriptor();
  }
  static inline const ::std::string& AssociationType_Name(AssociationType value) {
    return LaneGroup_AssociationType_Name(value);
  }
  static inline bool AssociationType_Parse(const ::std::string& name,
      AssociationType* value) {
    return LaneGroup_AssociationType_Parse(name, value);
  }

  typedef LaneGroup_LaneGroupType LaneGroupType;
  static const LaneGroupType LANE_GROUP_TYPE_UNDEFINED =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_UNDEFINED;
  static const LaneGroupType LANE_GROUP_TYPE_EXPRESSWAY =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_EXPRESSWAY;
  static const LaneGroupType LANE_GROUP_TYPE_FREEWAY =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_FREEWAY;
  static const LaneGroupType LANE_GROUP_TYPE_ENTRY_RAMP =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_ENTRY_RAMP;
  static const LaneGroupType LANE_GROUP_TYPE_EXIT_RAMP =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_EXIT_RAMP;
  static const LaneGroupType LANE_GROUP_TYPE_RAMP =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RAMP;
  static const LaneGroupType LANE_GROUP_TYPE_JCT =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_JCT;
  static const LaneGroupType LANE_GROUP_TYPE_SERVICE =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_SERVICE;
  static const LaneGroupType LANE_GROUP_TYPE_REGULAR =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_REGULAR;
  static const LaneGroupType LANE_GROUP_TYPE_AUXILIARY =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_AUXILIARY;
  static const LaneGroupType LANE_GROUP_TYPE_INTERSECTION =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_INTERSECTION;
  static const LaneGroupType LANE_GROUP_TYPE_ROUNDABOUT =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_ROUNDABOUT;
  static const LaneGroupType LANE_GROUP_TYPE_PEDESTRIAN =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_PEDESTRIAN;
  static const LaneGroupType LANE_GROUP_TYPE_PARALLEL =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_PARALLEL;
  static const LaneGroupType LANE_GROUP_TYPE_SERVICE_AREA =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_SERVICE_AREA;
  static const LaneGroupType LANE_GROUP_TYPE_TOLL_BOOTH =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_TOLL_BOOTH;
  static const LaneGroupType LANE_GROUP_TYPE_RESERVED_1 =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RESERVED_1;
  static const LaneGroupType LANE_GROUP_TYPE_RESERVED_2 =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RESERVED_2;
  static const LaneGroupType LANE_GROUP_TYPE_RESERVED_3 =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RESERVED_3;
  static const LaneGroupType LANE_GROUP_TYPE_RESERVED_4 =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RESERVED_4;
  static const LaneGroupType LANE_GROUP_TYPE_RESERVED_5 =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_RESERVED_5;
  static const LaneGroupType LANE_GROUP_TYPE_OTHERS =
    LaneGroup_LaneGroupType_LANE_GROUP_TYPE_OTHERS;
  static inline bool LaneGroupType_IsValid(int value) {
    return LaneGroup_LaneGroupType_IsValid(value);
  }
  static const LaneGroupType LaneGroupType_MIN =
    LaneGroup_LaneGroupType_LaneGroupType_MIN;
  static const LaneGroupType LaneGroupType_MAX =
    LaneGroup_LaneGroupType_LaneGroupType_MAX;
  static const int LaneGroupType_ARRAYSIZE =
    LaneGroup_LaneGroupType_LaneGroupType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneGroupType_descriptor() {
    return LaneGroup_LaneGroupType_descriptor();
  }
  static inline const ::std::string& LaneGroupType_Name(LaneGroupType value) {
    return LaneGroup_LaneGroupType_Name(value);
  }
  static inline bool LaneGroupType_Parse(const ::std::string& name,
      LaneGroupType* value) {
    return LaneGroup_LaneGroupType_Parse(name, value);
  }

  typedef LaneGroup_LaneGroupClass LaneGroupClass;
  static const LaneGroupClass LANE_GROUP_CLASS_UNKNOWN =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_UNKNOWN;
  static const LaneGroupClass LANE_GROUP_CLASS_EXPRESS =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_EXPRESS;
  static const LaneGroupClass LANE_GROUP_CLASS_FREEWAY =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_FREEWAY;
  static const LaneGroupClass LANE_GROUP_CLASS_STATE_ROAD =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_STATE_ROAD;
  static const LaneGroupClass LANE_GROUP_CLASS_PROVINCE_ROAD =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_PROVINCE_ROAD;
  static const LaneGroupClass LANE_GROUP_CLASS_CITY_MAIN_ROAD =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_CITY_MAIN_ROAD;
  static const LaneGroupClass LANE_GROUP_CLASS_CITY_SECONDARY_ROAD =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_CITY_SECONDARY_ROAD;
  static const LaneGroupClass LANE_GROUP_CLASS_CITY_BRANCH_ROAD =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_CITY_BRANCH_ROAD;
  static const LaneGroupClass LANE_GROUP_CLASS_RESERVE_1 =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_1;
  static const LaneGroupClass LANE_GROUP_CLASS_RESERVE_2 =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_2;
  static const LaneGroupClass LANE_GROUP_CLASS_RESERVE_3 =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_3;
  static const LaneGroupClass LANE_GROUP_CLASS_RESERVE_4 =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_4;
  static const LaneGroupClass LANE_GROUP_CLASS_RESERVE_5 =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_5;
  static const LaneGroupClass LANE_GROUP_CLASS_COUNTY_ROAD =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_COUNTY_ROAD;
  static const LaneGroupClass LANE_GROUP_CLASS_TOWNSHIP_ROAD =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_TOWNSHIP_ROAD;
  static const LaneGroupClass LANE_GROUP_CLASS_RESERVE_6 =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_6;
  static const LaneGroupClass LANE_GROUP_CLASS_RESERVE_7 =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_7;
  static const LaneGroupClass LANE_GROUP_CLASS_RESERVE_8 =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_8;
  static const LaneGroupClass LANE_GROUP_CLASS_RESERVE_9 =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_RESERVE_9;
  static const LaneGroupClass LANE_GROUP_CLASS_OTHERS =
    LaneGroup_LaneGroupClass_LANE_GROUP_CLASS_OTHERS;
  static inline bool LaneGroupClass_IsValid(int value) {
    return LaneGroup_LaneGroupClass_IsValid(value);
  }
  static const LaneGroupClass LaneGroupClass_MIN =
    LaneGroup_LaneGroupClass_LaneGroupClass_MIN;
  static const LaneGroupClass LaneGroupClass_MAX =
    LaneGroup_LaneGroupClass_LaneGroupClass_MAX;
  static const int LaneGroupClass_ARRAYSIZE =
    LaneGroup_LaneGroupClass_LaneGroupClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneGroupClass_descriptor() {
    return LaneGroup_LaneGroupClass_descriptor();
  }
  static inline const ::std::string& LaneGroupClass_Name(LaneGroupClass value) {
    return LaneGroup_LaneGroupClass_Name(value);
  }
  static inline bool LaneGroupClass_Parse(const ::std::string& name,
      LaneGroupClass* value) {
    return LaneGroup_LaneGroupClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 lanes = 2 [packed = true];
  int lanes_size() const;
  void clear_lanes();
  static const int kLanesFieldNumber = 2;
  ::google::protobuf::uint64 lanes(int index) const;
  void set_lanes(int index, ::google::protobuf::uint64 value);
  void add_lanes(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      lanes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_lanes();

  // repeated uint64 preceding_lane_group_ids = 3 [packed = true];
  int preceding_lane_group_ids_size() const;
  void clear_preceding_lane_group_ids();
  static const int kPrecedingLaneGroupIdsFieldNumber = 3;
  ::google::protobuf::uint64 preceding_lane_group_ids(int index) const;
  void set_preceding_lane_group_ids(int index, ::google::protobuf::uint64 value);
  void add_preceding_lane_group_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      preceding_lane_group_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_preceding_lane_group_ids();

  // repeated uint64 succeeding_lane_group_ids = 4 [packed = true];
  int succeeding_lane_group_ids_size() const;
  void clear_succeeding_lane_group_ids();
  static const int kSucceedingLaneGroupIdsFieldNumber = 4;
  ::google::protobuf::uint64 succeeding_lane_group_ids(int index) const;
  void set_succeeding_lane_group_ids(int index, ::google::protobuf::uint64 value);
  void add_succeeding_lane_group_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      succeeding_lane_group_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_succeeding_lane_group_ids();

  // repeated uint64 associated_lane_group_ids = 7 [packed = true];
  int associated_lane_group_ids_size() const;
  void clear_associated_lane_group_ids();
  static const int kAssociatedLaneGroupIdsFieldNumber = 7;
  ::google::protobuf::uint64 associated_lane_group_ids(int index) const;
  void set_associated_lane_group_ids(int index, ::google::protobuf::uint64 value);
  void add_associated_lane_group_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_lane_group_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_lane_group_ids();

  // repeated .holo.map.proto.base.LaneGroupAttribute lane_group_attributes = 12;
  int lane_group_attributes_size() const;
  void clear_lane_group_attributes();
  static const int kLaneGroupAttributesFieldNumber = 12;
  ::holo::map::proto::base::LaneGroupAttribute* mutable_lane_group_attributes(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::LaneGroupAttribute >*
      mutable_lane_group_attributes();
  const ::holo::map::proto::base::LaneGroupAttribute& lane_group_attributes(int index) const;
  ::holo::map::proto::base::LaneGroupAttribute* add_lane_group_attributes();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::LaneGroupAttribute >&
      lane_group_attributes() const;

  // repeated uint64 tile_ids = 18 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 18;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // repeated uint64 all_lane_boundaries = 19 [packed = true];
  int all_lane_boundaries_size() const;
  void clear_all_lane_boundaries();
  static const int kAllLaneBoundariesFieldNumber = 19;
  ::google::protobuf::uint64 all_lane_boundaries(int index) const;
  void set_all_lane_boundaries(int index, ::google::protobuf::uint64 value);
  void add_all_lane_boundaries(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      all_lane_boundaries() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_all_lane_boundaries();

  // repeated uint64 trajectory_ids = 20 [packed = true];
  int trajectory_ids_size() const;
  void clear_trajectory_ids();
  static const int kTrajectoryIdsFieldNumber = 20;
  ::google::protobuf::uint64 trajectory_ids(int index) const;
  void set_trajectory_ids(int index, ::google::protobuf::uint64 value);
  void add_trajectory_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      trajectory_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_trajectory_ids();

  // map<uint32, .holo.map.proto.common.GeoBox> extra_region = 45;
  int extra_region_size() const;
  void clear_extra_region();
  static const int kExtraRegionFieldNumber = 45;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >&
      extra_region() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >*
      mutable_extra_region();

  // repeated .holo.map.proto.common.GeoPoint geometry_points = 46;
  int geometry_points_size() const;
  void clear_geometry_points();
  static const int kGeometryPointsFieldNumber = 46;
  ::holo::map::proto::common::GeoPoint* mutable_geometry_points(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
      mutable_geometry_points();
  const ::holo::map::proto::common::GeoPoint& geometry_points(int index) const;
  ::holo::map::proto::common::GeoPoint* add_geometry_points();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
      geometry_points() const;

  // map<uint32, .holo.map.proto.common.GeoLine> extra_geometry_points = 47;
  int extra_geometry_points_size() const;
  void clear_extra_geometry_points();
  static const int kExtraGeometryPointsFieldNumber = 47;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >&
      extra_geometry_points() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >*
      mutable_extra_geometry_points();

  // optional .holo.map.proto.common.Coordinate coordinate = 40;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 40;
  private:
  const ::holo::map::proto::common::Coordinate& _internal_coordinate() const;
  public:
  const ::holo::map::proto::common::Coordinate& coordinate() const;
  ::holo::map::proto::common::Coordinate* release_coordinate();
  ::holo::map::proto::common::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate);

  // optional .holo.map.proto.common.GeoBox region = 44;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 44;
  private:
  const ::holo::map::proto::common::GeoBox& _internal_region() const;
  public:
  const ::holo::map::proto::common::GeoBox& region() const;
  ::holo::map::proto::common::GeoBox* release_region();
  ::holo::map::proto::common::GeoBox* mutable_region();
  void set_allocated_region(::holo::map::proto::common::GeoBox* region);

  // optional uint64 lane_group_id = 1;
  bool has_lane_group_id() const;
  void clear_lane_group_id();
  static const int kLaneGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 lane_group_id() const;
  void set_lane_group_id(::google::protobuf::uint64 value);

  // optional uint64 left_boundary = 5;
  bool has_left_boundary() const;
  void clear_left_boundary();
  static const int kLeftBoundaryFieldNumber = 5;
  ::google::protobuf::uint64 left_boundary() const;
  void set_left_boundary(::google::protobuf::uint64 value);

  // optional uint64 right_boundary = 6;
  bool has_right_boundary() const;
  void clear_right_boundary();
  static const int kRightBoundaryFieldNumber = 6;
  ::google::protobuf::uint64 right_boundary() const;
  void set_right_boundary(::google::protobuf::uint64 value);

  // optional .holo.map.proto.base.LaneGroup.AssociationType association_type = 8;
  bool has_association_type() const;
  void clear_association_type();
  static const int kAssociationTypeFieldNumber = 8;
  ::holo::map::proto::base::LaneGroup_AssociationType association_type() const;
  void set_association_type(::holo::map::proto::base::LaneGroup_AssociationType value);

  // optional .holo.map.proto.base.LaneGroup.LaneGroupType lane_group_type = 9;
  bool has_lane_group_type() const;
  void clear_lane_group_type();
  static const int kLaneGroupTypeFieldNumber = 9;
  ::holo::map::proto::base::LaneGroup_LaneGroupType lane_group_type() const;
  void set_lane_group_type(::holo::map::proto::base::LaneGroup_LaneGroupType value);

  // optional uint64 intersection_id = 10;
  bool has_intersection_id() const;
  void clear_intersection_id();
  static const int kIntersectionIdFieldNumber = 10;
  ::google::protobuf::uint64 intersection_id() const;
  void set_intersection_id(::google::protobuf::uint64 value);

  // optional uint64 begin_intersection_id = 13;
  bool has_begin_intersection_id() const;
  void clear_begin_intersection_id();
  static const int kBeginIntersectionIdFieldNumber = 13;
  ::google::protobuf::uint64 begin_intersection_id() const;
  void set_begin_intersection_id(::google::protobuf::uint64 value);

  // optional .holo.map.proto.base.LaneGroup.LaneGroupClass lane_group_class = 11;
  bool has_lane_group_class() const;
  void clear_lane_group_class();
  static const int kLaneGroupClassFieldNumber = 11;
  ::holo::map::proto::base::LaneGroup_LaneGroupClass lane_group_class() const;
  void set_lane_group_class(::holo::map::proto::base::LaneGroup_LaneGroupClass value);

  // optional uint32 level = 15;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 15;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint64 end_intersection_id = 14;
  bool has_end_intersection_id() const;
  void clear_end_intersection_id();
  static const int kEndIntersectionIdFieldNumber = 14;
  ::google::protobuf::uint64 end_intersection_id() const;
  void set_end_intersection_id(::google::protobuf::uint64 value);

  // optional uint64 road_id = 17;
  bool has_road_id() const;
  void clear_road_id();
  static const int kRoadIdFieldNumber = 17;
  ::google::protobuf::uint64 road_id() const;
  void set_road_id(::google::protobuf::uint64 value);

  // optional uint64 adas_id = 21;
  bool has_adas_id() const;
  void clear_adas_id();
  static const int kAdasIdFieldNumber = 21;
  ::google::protobuf::uint64 adas_id() const;
  void set_adas_id(::google::protobuf::uint64 value);

  // optional uint32 lane_group_length_cm = 22;
  bool has_lane_group_length_cm() const;
  void clear_lane_group_length_cm();
  static const int kLaneGroupLengthCmFieldNumber = 22;
  ::google::protobuf::uint32 lane_group_length_cm() const;
  void set_lane_group_length_cm(::google::protobuf::uint32 value);

  // optional bool is_intersection_lane_group = 16;
  bool has_is_intersection_lane_group() const;
  void clear_is_intersection_lane_group();
  static const int kIsIntersectionLaneGroupFieldNumber = 16;
  bool is_intersection_lane_group() const;
  void set_is_intersection_lane_group(bool value);

  // optional bool south_flag = 43;
  bool has_south_flag() const;
  void clear_south_flag();
  static const int kSouthFlagFieldNumber = 43;
  bool south_flag() const;
  void set_south_flag(bool value);

  // optional uint64 object_parking_lot_id = 30;
  bool has_object_parking_lot_id() const;
  void clear_object_parking_lot_id();
  static const int kObjectParkingLotIdFieldNumber = 30;
  ::google::protobuf::uint64 object_parking_lot_id() const;
  void set_object_parking_lot_id(::google::protobuf::uint64 value);

  // optional uint64 object_parking_floor_id = 31;
  bool has_object_parking_floor_id() const;
  void clear_object_parking_floor_id();
  static const int kObjectParkingFloorIdFieldNumber = 31;
  ::google::protobuf::uint64 object_parking_floor_id() const;
  void set_object_parking_floor_id(::google::protobuf::uint64 value);

  // optional uint32 zone_id = 41;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 41;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // optional uint32 extra_zone_id = 42;
  bool has_extra_zone_id() const;
  void clear_extra_zone_id();
  static const int kExtraZoneIdFieldNumber = 42;
  ::google::protobuf::uint32 extra_zone_id() const;
  void set_extra_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.LaneGroup)
 private:
  void set_has_lane_group_id();
  void clear_has_lane_group_id();
  void set_has_left_boundary();
  void clear_has_left_boundary();
  void set_has_right_boundary();
  void clear_has_right_boundary();
  void set_has_association_type();
  void clear_has_association_type();
  void set_has_lane_group_type();
  void clear_has_lane_group_type();
  void set_has_intersection_id();
  void clear_has_intersection_id();
  void set_has_lane_group_class();
  void clear_has_lane_group_class();
  void set_has_begin_intersection_id();
  void clear_has_begin_intersection_id();
  void set_has_end_intersection_id();
  void clear_has_end_intersection_id();
  void set_has_level();
  void clear_has_level();
  void set_has_is_intersection_lane_group();
  void clear_has_is_intersection_lane_group();
  void set_has_road_id();
  void clear_has_road_id();
  void set_has_adas_id();
  void clear_has_adas_id();
  void set_has_lane_group_length_cm();
  void clear_has_lane_group_length_cm();
  void set_has_object_parking_lot_id();
  void clear_has_object_parking_lot_id();
  void set_has_object_parking_floor_id();
  void clear_has_object_parking_floor_id();
  void set_has_coordinate();
  void clear_has_coordinate();
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_extra_zone_id();
  void clear_has_extra_zone_id();
  void set_has_south_flag();
  void clear_has_south_flag();
  void set_has_region();
  void clear_has_region();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > lanes_;
  mutable int _lanes_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > preceding_lane_group_ids_;
  mutable int _preceding_lane_group_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > succeeding_lane_group_ids_;
  mutable int _succeeding_lane_group_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_lane_group_ids_;
  mutable int _associated_lane_group_ids_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::LaneGroupAttribute > lane_group_attributes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > all_lane_boundaries_;
  mutable int _all_lane_boundaries_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > trajectory_ids_;
  mutable int _trajectory_ids_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      LaneGroup_ExtraRegionEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_region_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint > geometry_points_;
  ::google::protobuf::internal::MapField<
      LaneGroup_ExtraGeometryPointsEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_geometry_points_;
  ::holo::map::proto::common::Coordinate* coordinate_;
  ::holo::map::proto::common::GeoBox* region_;
  ::google::protobuf::uint64 lane_group_id_;
  ::google::protobuf::uint64 left_boundary_;
  ::google::protobuf::uint64 right_boundary_;
  int association_type_;
  int lane_group_type_;
  ::google::protobuf::uint64 intersection_id_;
  ::google::protobuf::uint64 begin_intersection_id_;
  int lane_group_class_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 end_intersection_id_;
  ::google::protobuf::uint64 road_id_;
  ::google::protobuf::uint64 adas_id_;
  ::google::protobuf::uint32 lane_group_length_cm_;
  bool is_intersection_lane_group_;
  bool south_flag_;
  ::google::protobuf::uint64 object_parking_lot_id_;
  ::google::protobuf::uint64 object_parking_floor_id_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 extra_zone_id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2flane_5fgroup_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LaneGroup

// optional uint64 lane_group_id = 1;
inline bool LaneGroup::has_lane_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneGroup::set_has_lane_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneGroup::clear_has_lane_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneGroup::clear_lane_group_id() {
  lane_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lane_group_id();
}
inline ::google::protobuf::uint64 LaneGroup::lane_group_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.lane_group_id)
  return lane_group_id_;
}
inline void LaneGroup::set_lane_group_id(::google::protobuf::uint64 value) {
  set_has_lane_group_id();
  lane_group_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.lane_group_id)
}

// repeated uint64 lanes = 2 [packed = true];
inline int LaneGroup::lanes_size() const {
  return lanes_.size();
}
inline void LaneGroup::clear_lanes() {
  lanes_.Clear();
}
inline ::google::protobuf::uint64 LaneGroup::lanes(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.lanes)
  return lanes_.Get(index);
}
inline void LaneGroup::set_lanes(int index, ::google::protobuf::uint64 value) {
  lanes_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.lanes)
}
inline void LaneGroup::add_lanes(::google::protobuf::uint64 value) {
  lanes_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneGroup.lanes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaneGroup::lanes() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneGroup.lanes)
  return lanes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaneGroup::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneGroup.lanes)
  return &lanes_;
}

// repeated uint64 preceding_lane_group_ids = 3 [packed = true];
inline int LaneGroup::preceding_lane_group_ids_size() const {
  return preceding_lane_group_ids_.size();
}
inline void LaneGroup::clear_preceding_lane_group_ids() {
  preceding_lane_group_ids_.Clear();
}
inline ::google::protobuf::uint64 LaneGroup::preceding_lane_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.preceding_lane_group_ids)
  return preceding_lane_group_ids_.Get(index);
}
inline void LaneGroup::set_preceding_lane_group_ids(int index, ::google::protobuf::uint64 value) {
  preceding_lane_group_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.preceding_lane_group_ids)
}
inline void LaneGroup::add_preceding_lane_group_ids(::google::protobuf::uint64 value) {
  preceding_lane_group_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneGroup.preceding_lane_group_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaneGroup::preceding_lane_group_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneGroup.preceding_lane_group_ids)
  return preceding_lane_group_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaneGroup::mutable_preceding_lane_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneGroup.preceding_lane_group_ids)
  return &preceding_lane_group_ids_;
}

// repeated uint64 succeeding_lane_group_ids = 4 [packed = true];
inline int LaneGroup::succeeding_lane_group_ids_size() const {
  return succeeding_lane_group_ids_.size();
}
inline void LaneGroup::clear_succeeding_lane_group_ids() {
  succeeding_lane_group_ids_.Clear();
}
inline ::google::protobuf::uint64 LaneGroup::succeeding_lane_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.succeeding_lane_group_ids)
  return succeeding_lane_group_ids_.Get(index);
}
inline void LaneGroup::set_succeeding_lane_group_ids(int index, ::google::protobuf::uint64 value) {
  succeeding_lane_group_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.succeeding_lane_group_ids)
}
inline void LaneGroup::add_succeeding_lane_group_ids(::google::protobuf::uint64 value) {
  succeeding_lane_group_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneGroup.succeeding_lane_group_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaneGroup::succeeding_lane_group_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneGroup.succeeding_lane_group_ids)
  return succeeding_lane_group_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaneGroup::mutable_succeeding_lane_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneGroup.succeeding_lane_group_ids)
  return &succeeding_lane_group_ids_;
}

// optional uint64 left_boundary = 5;
inline bool LaneGroup::has_left_boundary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneGroup::set_has_left_boundary() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneGroup::clear_has_left_boundary() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneGroup::clear_left_boundary() {
  left_boundary_ = GOOGLE_ULONGLONG(0);
  clear_has_left_boundary();
}
inline ::google::protobuf::uint64 LaneGroup::left_boundary() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.left_boundary)
  return left_boundary_;
}
inline void LaneGroup::set_left_boundary(::google::protobuf::uint64 value) {
  set_has_left_boundary();
  left_boundary_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.left_boundary)
}

// optional uint64 right_boundary = 6;
inline bool LaneGroup::has_right_boundary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneGroup::set_has_right_boundary() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneGroup::clear_has_right_boundary() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneGroup::clear_right_boundary() {
  right_boundary_ = GOOGLE_ULONGLONG(0);
  clear_has_right_boundary();
}
inline ::google::protobuf::uint64 LaneGroup::right_boundary() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.right_boundary)
  return right_boundary_;
}
inline void LaneGroup::set_right_boundary(::google::protobuf::uint64 value) {
  set_has_right_boundary();
  right_boundary_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.right_boundary)
}

// repeated uint64 associated_lane_group_ids = 7 [packed = true];
inline int LaneGroup::associated_lane_group_ids_size() const {
  return associated_lane_group_ids_.size();
}
inline void LaneGroup::clear_associated_lane_group_ids() {
  associated_lane_group_ids_.Clear();
}
inline ::google::protobuf::uint64 LaneGroup::associated_lane_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.associated_lane_group_ids)
  return associated_lane_group_ids_.Get(index);
}
inline void LaneGroup::set_associated_lane_group_ids(int index, ::google::protobuf::uint64 value) {
  associated_lane_group_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.associated_lane_group_ids)
}
inline void LaneGroup::add_associated_lane_group_ids(::google::protobuf::uint64 value) {
  associated_lane_group_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneGroup.associated_lane_group_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaneGroup::associated_lane_group_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneGroup.associated_lane_group_ids)
  return associated_lane_group_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaneGroup::mutable_associated_lane_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneGroup.associated_lane_group_ids)
  return &associated_lane_group_ids_;
}

// optional .holo.map.proto.base.LaneGroup.AssociationType association_type = 8;
inline bool LaneGroup::has_association_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneGroup::set_has_association_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaneGroup::clear_has_association_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaneGroup::clear_association_type() {
  association_type_ = 0;
  clear_has_association_type();
}
inline ::holo::map::proto::base::LaneGroup_AssociationType LaneGroup::association_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.association_type)
  return static_cast< ::holo::map::proto::base::LaneGroup_AssociationType >(association_type_);
}
inline void LaneGroup::set_association_type(::holo::map::proto::base::LaneGroup_AssociationType value) {
  assert(::holo::map::proto::base::LaneGroup_AssociationType_IsValid(value));
  set_has_association_type();
  association_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.association_type)
}

// optional .holo.map.proto.base.LaneGroup.LaneGroupType lane_group_type = 9;
inline bool LaneGroup::has_lane_group_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaneGroup::set_has_lane_group_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LaneGroup::clear_has_lane_group_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LaneGroup::clear_lane_group_type() {
  lane_group_type_ = 0;
  clear_has_lane_group_type();
}
inline ::holo::map::proto::base::LaneGroup_LaneGroupType LaneGroup::lane_group_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.lane_group_type)
  return static_cast< ::holo::map::proto::base::LaneGroup_LaneGroupType >(lane_group_type_);
}
inline void LaneGroup::set_lane_group_type(::holo::map::proto::base::LaneGroup_LaneGroupType value) {
  assert(::holo::map::proto::base::LaneGroup_LaneGroupType_IsValid(value));
  set_has_lane_group_type();
  lane_group_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.lane_group_type)
}

// optional uint64 intersection_id = 10;
inline bool LaneGroup::has_intersection_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaneGroup::set_has_intersection_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LaneGroup::clear_has_intersection_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LaneGroup::clear_intersection_id() {
  intersection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_intersection_id();
}
inline ::google::protobuf::uint64 LaneGroup::intersection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.intersection_id)
  return intersection_id_;
}
inline void LaneGroup::set_intersection_id(::google::protobuf::uint64 value) {
  set_has_intersection_id();
  intersection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.intersection_id)
}

// optional .holo.map.proto.base.LaneGroup.LaneGroupClass lane_group_class = 11;
inline bool LaneGroup::has_lane_group_class() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LaneGroup::set_has_lane_group_class() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LaneGroup::clear_has_lane_group_class() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LaneGroup::clear_lane_group_class() {
  lane_group_class_ = 0;
  clear_has_lane_group_class();
}
inline ::holo::map::proto::base::LaneGroup_LaneGroupClass LaneGroup::lane_group_class() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.lane_group_class)
  return static_cast< ::holo::map::proto::base::LaneGroup_LaneGroupClass >(lane_group_class_);
}
inline void LaneGroup::set_lane_group_class(::holo::map::proto::base::LaneGroup_LaneGroupClass value) {
  assert(::holo::map::proto::base::LaneGroup_LaneGroupClass_IsValid(value));
  set_has_lane_group_class();
  lane_group_class_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.lane_group_class)
}

// repeated .holo.map.proto.base.LaneGroupAttribute lane_group_attributes = 12;
inline int LaneGroup::lane_group_attributes_size() const {
  return lane_group_attributes_.size();
}
inline ::holo::map::proto::base::LaneGroupAttribute* LaneGroup::mutable_lane_group_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.LaneGroup.lane_group_attributes)
  return lane_group_attributes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::LaneGroupAttribute >*
LaneGroup::mutable_lane_group_attributes() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneGroup.lane_group_attributes)
  return &lane_group_attributes_;
}
inline const ::holo::map::proto::base::LaneGroupAttribute& LaneGroup::lane_group_attributes(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.lane_group_attributes)
  return lane_group_attributes_.Get(index);
}
inline ::holo::map::proto::base::LaneGroupAttribute* LaneGroup::add_lane_group_attributes() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneGroup.lane_group_attributes)
  return lane_group_attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::LaneGroupAttribute >&
LaneGroup::lane_group_attributes() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneGroup.lane_group_attributes)
  return lane_group_attributes_;
}

// optional uint64 begin_intersection_id = 13;
inline bool LaneGroup::has_begin_intersection_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LaneGroup::set_has_begin_intersection_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LaneGroup::clear_has_begin_intersection_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LaneGroup::clear_begin_intersection_id() {
  begin_intersection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_intersection_id();
}
inline ::google::protobuf::uint64 LaneGroup::begin_intersection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.begin_intersection_id)
  return begin_intersection_id_;
}
inline void LaneGroup::set_begin_intersection_id(::google::protobuf::uint64 value) {
  set_has_begin_intersection_id();
  begin_intersection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.begin_intersection_id)
}

// optional uint64 end_intersection_id = 14;
inline bool LaneGroup::has_end_intersection_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LaneGroup::set_has_end_intersection_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LaneGroup::clear_has_end_intersection_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LaneGroup::clear_end_intersection_id() {
  end_intersection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_end_intersection_id();
}
inline ::google::protobuf::uint64 LaneGroup::end_intersection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.end_intersection_id)
  return end_intersection_id_;
}
inline void LaneGroup::set_end_intersection_id(::google::protobuf::uint64 value) {
  set_has_end_intersection_id();
  end_intersection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.end_intersection_id)
}

// optional uint32 level = 15;
inline bool LaneGroup::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LaneGroup::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LaneGroup::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LaneGroup::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 LaneGroup::level() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.level)
  return level_;
}
inline void LaneGroup::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.level)
}

// optional bool is_intersection_lane_group = 16;
inline bool LaneGroup::has_is_intersection_lane_group() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LaneGroup::set_has_is_intersection_lane_group() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LaneGroup::clear_has_is_intersection_lane_group() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LaneGroup::clear_is_intersection_lane_group() {
  is_intersection_lane_group_ = false;
  clear_has_is_intersection_lane_group();
}
inline bool LaneGroup::is_intersection_lane_group() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.is_intersection_lane_group)
  return is_intersection_lane_group_;
}
inline void LaneGroup::set_is_intersection_lane_group(bool value) {
  set_has_is_intersection_lane_group();
  is_intersection_lane_group_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.is_intersection_lane_group)
}

// optional uint64 road_id = 17;
inline bool LaneGroup::has_road_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LaneGroup::set_has_road_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LaneGroup::clear_has_road_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LaneGroup::clear_road_id() {
  road_id_ = GOOGLE_ULONGLONG(0);
  clear_has_road_id();
}
inline ::google::protobuf::uint64 LaneGroup::road_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.road_id)
  return road_id_;
}
inline void LaneGroup::set_road_id(::google::protobuf::uint64 value) {
  set_has_road_id();
  road_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.road_id)
}

// repeated uint64 tile_ids = 18 [packed = true];
inline int LaneGroup::tile_ids_size() const {
  return tile_ids_.size();
}
inline void LaneGroup::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 LaneGroup::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.tile_ids)
  return tile_ids_.Get(index);
}
inline void LaneGroup::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.tile_ids)
}
inline void LaneGroup::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneGroup.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaneGroup::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneGroup.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaneGroup::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneGroup.tile_ids)
  return &tile_ids_;
}

// repeated uint64 all_lane_boundaries = 19 [packed = true];
inline int LaneGroup::all_lane_boundaries_size() const {
  return all_lane_boundaries_.size();
}
inline void LaneGroup::clear_all_lane_boundaries() {
  all_lane_boundaries_.Clear();
}
inline ::google::protobuf::uint64 LaneGroup::all_lane_boundaries(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.all_lane_boundaries)
  return all_lane_boundaries_.Get(index);
}
inline void LaneGroup::set_all_lane_boundaries(int index, ::google::protobuf::uint64 value) {
  all_lane_boundaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.all_lane_boundaries)
}
inline void LaneGroup::add_all_lane_boundaries(::google::protobuf::uint64 value) {
  all_lane_boundaries_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneGroup.all_lane_boundaries)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaneGroup::all_lane_boundaries() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneGroup.all_lane_boundaries)
  return all_lane_boundaries_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaneGroup::mutable_all_lane_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneGroup.all_lane_boundaries)
  return &all_lane_boundaries_;
}

// repeated uint64 trajectory_ids = 20 [packed = true];
inline int LaneGroup::trajectory_ids_size() const {
  return trajectory_ids_.size();
}
inline void LaneGroup::clear_trajectory_ids() {
  trajectory_ids_.Clear();
}
inline ::google::protobuf::uint64 LaneGroup::trajectory_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.trajectory_ids)
  return trajectory_ids_.Get(index);
}
inline void LaneGroup::set_trajectory_ids(int index, ::google::protobuf::uint64 value) {
  trajectory_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.trajectory_ids)
}
inline void LaneGroup::add_trajectory_ids(::google::protobuf::uint64 value) {
  trajectory_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneGroup.trajectory_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaneGroup::trajectory_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneGroup.trajectory_ids)
  return trajectory_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaneGroup::mutable_trajectory_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneGroup.trajectory_ids)
  return &trajectory_ids_;
}

// optional uint64 adas_id = 21;
inline bool LaneGroup::has_adas_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LaneGroup::set_has_adas_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LaneGroup::clear_has_adas_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LaneGroup::clear_adas_id() {
  adas_id_ = GOOGLE_ULONGLONG(0);
  clear_has_adas_id();
}
inline ::google::protobuf::uint64 LaneGroup::adas_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.adas_id)
  return adas_id_;
}
inline void LaneGroup::set_adas_id(::google::protobuf::uint64 value) {
  set_has_adas_id();
  adas_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.adas_id)
}

// optional uint32 lane_group_length_cm = 22;
inline bool LaneGroup::has_lane_group_length_cm() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LaneGroup::set_has_lane_group_length_cm() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LaneGroup::clear_has_lane_group_length_cm() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LaneGroup::clear_lane_group_length_cm() {
  lane_group_length_cm_ = 0u;
  clear_has_lane_group_length_cm();
}
inline ::google::protobuf::uint32 LaneGroup::lane_group_length_cm() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.lane_group_length_cm)
  return lane_group_length_cm_;
}
inline void LaneGroup::set_lane_group_length_cm(::google::protobuf::uint32 value) {
  set_has_lane_group_length_cm();
  lane_group_length_cm_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.lane_group_length_cm)
}

// optional uint64 object_parking_lot_id = 30;
inline bool LaneGroup::has_object_parking_lot_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LaneGroup::set_has_object_parking_lot_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LaneGroup::clear_has_object_parking_lot_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LaneGroup::clear_object_parking_lot_id() {
  object_parking_lot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_parking_lot_id();
}
inline ::google::protobuf::uint64 LaneGroup::object_parking_lot_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.object_parking_lot_id)
  return object_parking_lot_id_;
}
inline void LaneGroup::set_object_parking_lot_id(::google::protobuf::uint64 value) {
  set_has_object_parking_lot_id();
  object_parking_lot_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.object_parking_lot_id)
}

// optional uint64 object_parking_floor_id = 31;
inline bool LaneGroup::has_object_parking_floor_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LaneGroup::set_has_object_parking_floor_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LaneGroup::clear_has_object_parking_floor_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LaneGroup::clear_object_parking_floor_id() {
  object_parking_floor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_parking_floor_id();
}
inline ::google::protobuf::uint64 LaneGroup::object_parking_floor_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.object_parking_floor_id)
  return object_parking_floor_id_;
}
inline void LaneGroup::set_object_parking_floor_id(::google::protobuf::uint64 value) {
  set_has_object_parking_floor_id();
  object_parking_floor_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.object_parking_floor_id)
}

// optional .holo.map.proto.common.Coordinate coordinate = 40;
inline bool LaneGroup::has_coordinate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneGroup::set_has_coordinate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneGroup::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::Coordinate& LaneGroup::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::holo::map::proto::common::Coordinate& LaneGroup::coordinate() const {
  const ::holo::map::proto::common::Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::Coordinate*>(
      &::holo::map::proto::common::_Coordinate_default_instance_);
}
inline ::holo::map::proto::common::Coordinate* LaneGroup::release_coordinate() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.LaneGroup.coordinate)
  clear_has_coordinate();
  ::holo::map::proto::common::Coordinate* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::Coordinate* LaneGroup::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.LaneGroup.coordinate)
  return coordinate_;
}
inline void LaneGroup::set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.LaneGroup.coordinate)
}

// optional uint32 zone_id = 41;
inline bool LaneGroup::has_zone_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LaneGroup::set_has_zone_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LaneGroup::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LaneGroup::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 LaneGroup::zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.zone_id)
  return zone_id_;
}
inline void LaneGroup::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.zone_id)
}

// optional uint32 extra_zone_id = 42;
inline bool LaneGroup::has_extra_zone_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LaneGroup::set_has_extra_zone_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LaneGroup::clear_has_extra_zone_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LaneGroup::clear_extra_zone_id() {
  extra_zone_id_ = 0u;
  clear_has_extra_zone_id();
}
inline ::google::protobuf::uint32 LaneGroup::extra_zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.extra_zone_id)
  return extra_zone_id_;
}
inline void LaneGroup::set_extra_zone_id(::google::protobuf::uint32 value) {
  set_has_extra_zone_id();
  extra_zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.extra_zone_id)
}

// optional bool south_flag = 43;
inline bool LaneGroup::has_south_flag() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LaneGroup::set_has_south_flag() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LaneGroup::clear_has_south_flag() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LaneGroup::clear_south_flag() {
  south_flag_ = false;
  clear_has_south_flag();
}
inline bool LaneGroup::south_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.south_flag)
  return south_flag_;
}
inline void LaneGroup::set_south_flag(bool value) {
  set_has_south_flag();
  south_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroup.south_flag)
}

// optional .holo.map.proto.common.GeoBox region = 44;
inline bool LaneGroup::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneGroup::set_has_region() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneGroup::clear_has_region() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::GeoBox& LaneGroup::_internal_region() const {
  return *region_;
}
inline const ::holo::map::proto::common::GeoBox& LaneGroup::region() const {
  const ::holo::map::proto::common::GeoBox* p = region_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.region)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoBox*>(
      &::holo::map::proto::common::_GeoBox_default_instance_);
}
inline ::holo::map::proto::common::GeoBox* LaneGroup::release_region() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.LaneGroup.region)
  clear_has_region();
  ::holo::map::proto::common::GeoBox* temp = region_;
  region_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoBox* LaneGroup::mutable_region() {
  set_has_region();
  if (region_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoBox>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.LaneGroup.region)
  return region_;
}
inline void LaneGroup::set_allocated_region(::holo::map::proto::common::GeoBox* region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(region_);
  }
  if (region) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    set_has_region();
  } else {
    clear_has_region();
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.LaneGroup.region)
}

// map<uint32, .holo.map.proto.common.GeoBox> extra_region = 45;
inline int LaneGroup::extra_region_size() const {
  return extra_region_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >&
LaneGroup::extra_region() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.LaneGroup.extra_region)
  return extra_region_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >*
LaneGroup::mutable_extra_region() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.LaneGroup.extra_region)
  return extra_region_.MutableMap();
}

// repeated .holo.map.proto.common.GeoPoint geometry_points = 46;
inline int LaneGroup::geometry_points_size() const {
  return geometry_points_.size();
}
inline ::holo::map::proto::common::GeoPoint* LaneGroup::mutable_geometry_points(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.LaneGroup.geometry_points)
  return geometry_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
LaneGroup::mutable_geometry_points() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneGroup.geometry_points)
  return &geometry_points_;
}
inline const ::holo::map::proto::common::GeoPoint& LaneGroup::geometry_points(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroup.geometry_points)
  return geometry_points_.Get(index);
}
inline ::holo::map::proto::common::GeoPoint* LaneGroup::add_geometry_points() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneGroup.geometry_points)
  return geometry_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
LaneGroup::geometry_points() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneGroup.geometry_points)
  return geometry_points_;
}

// map<uint32, .holo.map.proto.common.GeoLine> extra_geometry_points = 47;
inline int LaneGroup::extra_geometry_points_size() const {
  return extra_geometry_points_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >&
LaneGroup::extra_geometry_points() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.LaneGroup.extra_geometry_points)
  return extra_geometry_points_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >*
LaneGroup::mutable_extra_geometry_points() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.LaneGroup.extra_geometry_points)
  return extra_geometry_points_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::base::LaneGroup_AssociationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::LaneGroup_AssociationType>() {
  return ::holo::map::proto::base::LaneGroup_AssociationType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::LaneGroup_LaneGroupType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::LaneGroup_LaneGroupType>() {
  return ::holo::map::proto::base::LaneGroup_LaneGroupType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::LaneGroup_LaneGroupClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::LaneGroup_LaneGroupClass>() {
  return ::holo::map::proto::base::LaneGroup_LaneGroupClass_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2flane_5fgroup_2eproto
