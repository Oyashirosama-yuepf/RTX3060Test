// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/road.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2froad_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2froad_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/coordinate.pb.h"
#include "holo/map/proto/common/geo_box.pb.h"
#include "holo/map/proto/common/geo_line.pb.h"
#include "holo/map/proto/common/geo_point.pb.h"
#include "holo/map/proto/common/position.pb.h"
#include "holo/map/proto/common/multi_position.pb.h"
#include "holo/map/proto/base/speed_limit_info.pb.h"
#include "holo/map/proto/base/road_attribute.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2froad_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2froad_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2froad_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class Road;
class RoadDefaultTypeInternal;
extern RoadDefaultTypeInternal _Road_default_instance_;
class Road_ExtraGeometryPointsEntry_DoNotUse;
class Road_ExtraGeometryPointsEntry_DoNotUseDefaultTypeInternal;
extern Road_ExtraGeometryPointsEntry_DoNotUseDefaultTypeInternal _Road_ExtraGeometryPointsEntry_DoNotUse_default_instance_;
class Road_ExtraPositionsEntry_DoNotUse;
class Road_ExtraPositionsEntry_DoNotUseDefaultTypeInternal;
extern Road_ExtraPositionsEntry_DoNotUseDefaultTypeInternal _Road_ExtraPositionsEntry_DoNotUse_default_instance_;
class Road_ExtraRegionEntry_DoNotUse;
class Road_ExtraRegionEntry_DoNotUseDefaultTypeInternal;
extern Road_ExtraRegionEntry_DoNotUseDefaultTypeInternal _Road_ExtraRegionEntry_DoNotUse_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::Road* Arena::CreateMaybeMessage<::holo::map::proto::base::Road>(Arena*);
template<> ::holo::map::proto::base::Road_ExtraGeometryPointsEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::Road_ExtraGeometryPointsEntry_DoNotUse>(Arena*);
template<> ::holo::map::proto::base::Road_ExtraPositionsEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::Road_ExtraPositionsEntry_DoNotUse>(Arena*);
template<> ::holo::map::proto::base::Road_ExtraRegionEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::Road_ExtraRegionEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

enum Road_RoadType {
  Road_RoadType_ROAD_TYPE_NO_SPECIAL = 0,
  Road_RoadType_ROAD_TYPE_RAMP = 1,
  Road_RoadType_ROAD_TYPE_ROUNDABOUT_ROAD = 2,
  Road_RoadType_ROAD_TYPE_PARALLEL = 3,
  Road_RoadType_ROAD_TYPE_SERVICE_ROAD = 4,
  Road_RoadType_ROAD_TYPE_MAIN_ROAD = 5,
  Road_RoadType_ROAD_TYPE_SQUARE = 6,
  Road_RoadType_ROAD_TYPE_PEDESTRIAN_ZONE = 8,
  Road_RoadType_ROAD_TYPE_PEDESTRIAN = 9,
  Road_RoadType_ROAD_TYPE_ROUNDABOUT_INTERIOR = 10,
  Road_RoadType_ROAD_TYPE_SLIP_ROAD = 11,
  Road_RoadType_ROAD_TYPE_SPECIAL_TRAFFIC_FIGURE = 12,
  Road_RoadType_ROAD_TYPE_BOUNDARY = 13,
  Road_RoadType_ROAD_TYPE_PARKING_NORMAL = 14,
  Road_RoadType_ROAD_TYPE_PARKING_WALK = 15,
  Road_RoadType_ROAD_TYPE_PARKING_CONN_PARKING = 16,
  Road_RoadType_ROAD_TYPE_PARKING_INTERNAL = 17,
  Road_RoadType_ROAD_TYPE_PARKING_INTERNAL_CONN = 18,
  Road_RoadType_ROAD_TYPE_PARKING_INTERNAL_CROSS = 19,
  Road_RoadType_ROAD_TYPE_PARKING_EXTERNAL_CONN = 20,
  Road_RoadType_ROAD_TYPE_PARKING_ENTRANCE_EXIT_CONN = 21,
  Road_RoadType_ROAD_TYPE_PARKING_TURN_AROUND = 22
};
bool Road_RoadType_IsValid(int value);
const Road_RoadType Road_RoadType_RoadType_MIN = Road_RoadType_ROAD_TYPE_NO_SPECIAL;
const Road_RoadType Road_RoadType_RoadType_MAX = Road_RoadType_ROAD_TYPE_PARKING_TURN_AROUND;
const int Road_RoadType_RoadType_ARRAYSIZE = Road_RoadType_RoadType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Road_RoadType_descriptor();
inline const ::std::string& Road_RoadType_Name(Road_RoadType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Road_RoadType_descriptor(), value);
}
inline bool Road_RoadType_Parse(
    const ::std::string& name, Road_RoadType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Road_RoadType>(
    Road_RoadType_descriptor(), name, value);
}
enum Road_Direction {
  Road_Direction_DIRECTION_UNDEFINED = 0,
  Road_Direction_DIRECTION_BIDIRECTIONAL = 1,
  Road_Direction_DIRECTION_POSITIVE_DIRECTION = 2,
  Road_Direction_DIRECTION_NEGATIVE_DIRECTION = 3
};
bool Road_Direction_IsValid(int value);
const Road_Direction Road_Direction_Direction_MIN = Road_Direction_DIRECTION_UNDEFINED;
const Road_Direction Road_Direction_Direction_MAX = Road_Direction_DIRECTION_NEGATIVE_DIRECTION;
const int Road_Direction_Direction_ARRAYSIZE = Road_Direction_Direction_MAX + 1;

const ::google::protobuf::EnumDescriptor* Road_Direction_descriptor();
inline const ::std::string& Road_Direction_Name(Road_Direction value) {
  return ::google::protobuf::internal::NameOfEnum(
    Road_Direction_descriptor(), value);
}
inline bool Road_Direction_Parse(
    const ::std::string& name, Road_Direction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Road_Direction>(
    Road_Direction_descriptor(), name, value);
}
enum Road_FuncClass {
  Road_FuncClass_FUNC_CLASS_NOT_APPLICABLE = 0,
  Road_FuncClass_FUNC_CLASS_CLASS_1 = 1,
  Road_FuncClass_FUNC_CLASS_CLASS_2 = 2,
  Road_FuncClass_FUNC_CLASS_CLASS_3 = 3,
  Road_FuncClass_FUNC_CLASS_CLASS_4 = 4,
  Road_FuncClass_FUNC_CLASS_CLASS_5 = 5,
  Road_FuncClass_FUNC_CLASS_CLASS_11 = 11
};
bool Road_FuncClass_IsValid(int value);
const Road_FuncClass Road_FuncClass_FuncClass_MIN = Road_FuncClass_FUNC_CLASS_NOT_APPLICABLE;
const Road_FuncClass Road_FuncClass_FuncClass_MAX = Road_FuncClass_FUNC_CLASS_CLASS_11;
const int Road_FuncClass_FuncClass_ARRAYSIZE = Road_FuncClass_FuncClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* Road_FuncClass_descriptor();
inline const ::std::string& Road_FuncClass_Name(Road_FuncClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    Road_FuncClass_descriptor(), value);
}
inline bool Road_FuncClass_Parse(
    const ::std::string& name, Road_FuncClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Road_FuncClass>(
    Road_FuncClass_descriptor(), name, value);
}
enum Road_RoadTypeV2 {
  Road_RoadTypeV2_ROAD_TYPE_V2_UNDEFINED = 0,
  Road_RoadTypeV2_ROAD_TYPE_V2_EXPRESSWAY = 1,
  Road_RoadTypeV2_ROAD_TYPE_V2_FREEWAY = 2,
  Road_RoadTypeV2_ROAD_TYPE_V2_ENTRY_RAMP = 3,
  Road_RoadTypeV2_ROAD_TYPE_V2_EXIT_RAMP = 4,
  Road_RoadTypeV2_ROAD_TYPE_V2_RAMP = 5,
  Road_RoadTypeV2_ROAD_TYPE_V2_JCT = 6,
  Road_RoadTypeV2_ROAD_TYPE_V2_SERVICE = 7,
  Road_RoadTypeV2_ROAD_TYPE_V2_REGULAR = 8,
  Road_RoadTypeV2_ROAD_TYPE_V2_AUXILIARY = 9,
  Road_RoadTypeV2_ROAD_TYPE_V2_INTERSECTION = 10,
  Road_RoadTypeV2_ROAD_TYPE_V2_ROUNDABOUT = 11,
  Road_RoadTypeV2_ROAD_TYPE_V2_PEDESTRIAN = 12,
  Road_RoadTypeV2_ROAD_TYPE_V2_PARALLEL = 13,
  Road_RoadTypeV2_ROAD_TYPE_V2_SERVICE_AREA = 14,
  Road_RoadTypeV2_ROAD_TYPE_V2_TOLL_BOOTH = 15,
  Road_RoadTypeV2_ROAD_TYPE_V2_RESERVED_1 = 250,
  Road_RoadTypeV2_ROAD_TYPE_V2_RESERVED_2 = 251,
  Road_RoadTypeV2_ROAD_TYPE_V2_RESERVED_3 = 252,
  Road_RoadTypeV2_ROAD_TYPE_V2_RESERVED_4 = 253,
  Road_RoadTypeV2_ROAD_TYPE_V2_RESERVED_5 = 254,
  Road_RoadTypeV2_ROAD_TYPE_V2_OTHERS = 255
};
bool Road_RoadTypeV2_IsValid(int value);
const Road_RoadTypeV2 Road_RoadTypeV2_RoadTypeV2_MIN = Road_RoadTypeV2_ROAD_TYPE_V2_UNDEFINED;
const Road_RoadTypeV2 Road_RoadTypeV2_RoadTypeV2_MAX = Road_RoadTypeV2_ROAD_TYPE_V2_OTHERS;
const int Road_RoadTypeV2_RoadTypeV2_ARRAYSIZE = Road_RoadTypeV2_RoadTypeV2_MAX + 1;

const ::google::protobuf::EnumDescriptor* Road_RoadTypeV2_descriptor();
inline const ::std::string& Road_RoadTypeV2_Name(Road_RoadTypeV2 value) {
  return ::google::protobuf::internal::NameOfEnum(
    Road_RoadTypeV2_descriptor(), value);
}
inline bool Road_RoadTypeV2_Parse(
    const ::std::string& name, Road_RoadTypeV2* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Road_RoadTypeV2>(
    Road_RoadTypeV2_descriptor(), name, value);
}
enum Road_RoadClass {
  Road_RoadClass_ROAD_CLASS_UNKNOWN = 0,
  Road_RoadClass_ROAD_CLASS_EXPRESS = 1,
  Road_RoadClass_ROAD_CLASS_FREEWAY = 2,
  Road_RoadClass_ROAD_CLASS_STATE_ROAD = 3,
  Road_RoadClass_ROAD_CLASS_PROVINCE_ROAD = 4,
  Road_RoadClass_ROAD_CLASS_CITY_MAIN_ROAD = 5,
  Road_RoadClass_ROAD_CLASS_CITY_SECONDARY_ROAD = 6,
  Road_RoadClass_ROAD_CLASS_CITY_BRANCH_ROAD = 7,
  Road_RoadClass_ROAD_CLASS_CITY_AUXILIARY_ROAD = 8,
  Road_RoadClass_ROAD_CLASS_RESERVE_1 = 9,
  Road_RoadClass_ROAD_CLASS_RESERVE_2 = 10,
  Road_RoadClass_ROAD_CLASS_RESERVE_3 = 11,
  Road_RoadClass_ROAD_CLASS_RESERVE_4 = 12,
  Road_RoadClass_ROAD_CLASS_RESERVE_5 = 13,
  Road_RoadClass_ROAD_CLASS_COUNTY_ROAD = 14,
  Road_RoadClass_ROAD_CLASS_TOWNSHIP_ROAD = 15,
  Road_RoadClass_ROAD_CLASS_RESERVE_6 = 16,
  Road_RoadClass_ROAD_CLASS_RESERVE_7 = 17,
  Road_RoadClass_ROAD_CLASS_RESERVE_8 = 18,
  Road_RoadClass_ROAD_CLASS_RESERVE_9 = 19,
  Road_RoadClass_ROAD_CLASS_OTHERS = 255
};
bool Road_RoadClass_IsValid(int value);
const Road_RoadClass Road_RoadClass_RoadClass_MIN = Road_RoadClass_ROAD_CLASS_UNKNOWN;
const Road_RoadClass Road_RoadClass_RoadClass_MAX = Road_RoadClass_ROAD_CLASS_OTHERS;
const int Road_RoadClass_RoadClass_ARRAYSIZE = Road_RoadClass_RoadClass_MAX + 1;

const ::google::protobuf::EnumDescriptor* Road_RoadClass_descriptor();
inline const ::std::string& Road_RoadClass_Name(Road_RoadClass value) {
  return ::google::protobuf::internal::NameOfEnum(
    Road_RoadClass_descriptor(), value);
}
inline bool Road_RoadClass_Parse(
    const ::std::string& name, Road_RoadClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Road_RoadClass>(
    Road_RoadClass_descriptor(), name, value);
}
// ===================================================================

class Road_ExtraRegionEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Road_ExtraRegionEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Road_ExtraRegionEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Road_ExtraRegionEntry_DoNotUse();
  Road_ExtraRegionEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Road_ExtraRegionEntry_DoNotUse& other);
  static const Road_ExtraRegionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Road_ExtraRegionEntry_DoNotUse*>(&_Road_ExtraRegionEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Road_ExtraGeometryPointsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Road_ExtraGeometryPointsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Road_ExtraGeometryPointsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Road_ExtraGeometryPointsEntry_DoNotUse();
  Road_ExtraGeometryPointsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Road_ExtraGeometryPointsEntry_DoNotUse& other);
  static const Road_ExtraGeometryPointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Road_ExtraGeometryPointsEntry_DoNotUse*>(&_Road_ExtraGeometryPointsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Road_ExtraPositionsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Road_ExtraPositionsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::MultiPosition,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Road_ExtraPositionsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::MultiPosition,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Road_ExtraPositionsEntry_DoNotUse();
  Road_ExtraPositionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Road_ExtraPositionsEntry_DoNotUse& other);
  static const Road_ExtraPositionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Road_ExtraPositionsEntry_DoNotUse*>(&_Road_ExtraPositionsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Road : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.Road) */ {
 public:
  Road();
  virtual ~Road();

  Road(const Road& from);

  inline Road& operator=(const Road& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Road(Road&& from) noexcept
    : Road() {
    *this = ::std::move(from);
  }

  inline Road& operator=(Road&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Road& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Road* internal_default_instance() {
    return reinterpret_cast<const Road*>(
               &_Road_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Road* other);
  friend void swap(Road& a, Road& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Road* New() const final {
    return CreateMaybeMessage<Road>(NULL);
  }

  Road* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Road>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Road& from);
  void MergeFrom(const Road& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Road* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Road_RoadType RoadType;
  static const RoadType ROAD_TYPE_NO_SPECIAL =
    Road_RoadType_ROAD_TYPE_NO_SPECIAL;
  static const RoadType ROAD_TYPE_RAMP =
    Road_RoadType_ROAD_TYPE_RAMP;
  static const RoadType ROAD_TYPE_ROUNDABOUT_ROAD =
    Road_RoadType_ROAD_TYPE_ROUNDABOUT_ROAD;
  static const RoadType ROAD_TYPE_PARALLEL =
    Road_RoadType_ROAD_TYPE_PARALLEL;
  static const RoadType ROAD_TYPE_SERVICE_ROAD =
    Road_RoadType_ROAD_TYPE_SERVICE_ROAD;
  static const RoadType ROAD_TYPE_MAIN_ROAD =
    Road_RoadType_ROAD_TYPE_MAIN_ROAD;
  static const RoadType ROAD_TYPE_SQUARE =
    Road_RoadType_ROAD_TYPE_SQUARE;
  static const RoadType ROAD_TYPE_PEDESTRIAN_ZONE =
    Road_RoadType_ROAD_TYPE_PEDESTRIAN_ZONE;
  static const RoadType ROAD_TYPE_PEDESTRIAN =
    Road_RoadType_ROAD_TYPE_PEDESTRIAN;
  static const RoadType ROAD_TYPE_ROUNDABOUT_INTERIOR =
    Road_RoadType_ROAD_TYPE_ROUNDABOUT_INTERIOR;
  static const RoadType ROAD_TYPE_SLIP_ROAD =
    Road_RoadType_ROAD_TYPE_SLIP_ROAD;
  static const RoadType ROAD_TYPE_SPECIAL_TRAFFIC_FIGURE =
    Road_RoadType_ROAD_TYPE_SPECIAL_TRAFFIC_FIGURE;
  static const RoadType ROAD_TYPE_BOUNDARY =
    Road_RoadType_ROAD_TYPE_BOUNDARY;
  static const RoadType ROAD_TYPE_PARKING_NORMAL =
    Road_RoadType_ROAD_TYPE_PARKING_NORMAL;
  static const RoadType ROAD_TYPE_PARKING_WALK =
    Road_RoadType_ROAD_TYPE_PARKING_WALK;
  static const RoadType ROAD_TYPE_PARKING_CONN_PARKING =
    Road_RoadType_ROAD_TYPE_PARKING_CONN_PARKING;
  static const RoadType ROAD_TYPE_PARKING_INTERNAL =
    Road_RoadType_ROAD_TYPE_PARKING_INTERNAL;
  static const RoadType ROAD_TYPE_PARKING_INTERNAL_CONN =
    Road_RoadType_ROAD_TYPE_PARKING_INTERNAL_CONN;
  static const RoadType ROAD_TYPE_PARKING_INTERNAL_CROSS =
    Road_RoadType_ROAD_TYPE_PARKING_INTERNAL_CROSS;
  static const RoadType ROAD_TYPE_PARKING_EXTERNAL_CONN =
    Road_RoadType_ROAD_TYPE_PARKING_EXTERNAL_CONN;
  static const RoadType ROAD_TYPE_PARKING_ENTRANCE_EXIT_CONN =
    Road_RoadType_ROAD_TYPE_PARKING_ENTRANCE_EXIT_CONN;
  static const RoadType ROAD_TYPE_PARKING_TURN_AROUND =
    Road_RoadType_ROAD_TYPE_PARKING_TURN_AROUND;
  static inline bool RoadType_IsValid(int value) {
    return Road_RoadType_IsValid(value);
  }
  static const RoadType RoadType_MIN =
    Road_RoadType_RoadType_MIN;
  static const RoadType RoadType_MAX =
    Road_RoadType_RoadType_MAX;
  static const int RoadType_ARRAYSIZE =
    Road_RoadType_RoadType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoadType_descriptor() {
    return Road_RoadType_descriptor();
  }
  static inline const ::std::string& RoadType_Name(RoadType value) {
    return Road_RoadType_Name(value);
  }
  static inline bool RoadType_Parse(const ::std::string& name,
      RoadType* value) {
    return Road_RoadType_Parse(name, value);
  }

  typedef Road_Direction Direction;
  static const Direction DIRECTION_UNDEFINED =
    Road_Direction_DIRECTION_UNDEFINED;
  static const Direction DIRECTION_BIDIRECTIONAL =
    Road_Direction_DIRECTION_BIDIRECTIONAL;
  static const Direction DIRECTION_POSITIVE_DIRECTION =
    Road_Direction_DIRECTION_POSITIVE_DIRECTION;
  static const Direction DIRECTION_NEGATIVE_DIRECTION =
    Road_Direction_DIRECTION_NEGATIVE_DIRECTION;
  static inline bool Direction_IsValid(int value) {
    return Road_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    Road_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    Road_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    Road_Direction_Direction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Direction_descriptor() {
    return Road_Direction_descriptor();
  }
  static inline const ::std::string& Direction_Name(Direction value) {
    return Road_Direction_Name(value);
  }
  static inline bool Direction_Parse(const ::std::string& name,
      Direction* value) {
    return Road_Direction_Parse(name, value);
  }

  typedef Road_FuncClass FuncClass;
  static const FuncClass FUNC_CLASS_NOT_APPLICABLE =
    Road_FuncClass_FUNC_CLASS_NOT_APPLICABLE;
  static const FuncClass FUNC_CLASS_CLASS_1 =
    Road_FuncClass_FUNC_CLASS_CLASS_1;
  static const FuncClass FUNC_CLASS_CLASS_2 =
    Road_FuncClass_FUNC_CLASS_CLASS_2;
  static const FuncClass FUNC_CLASS_CLASS_3 =
    Road_FuncClass_FUNC_CLASS_CLASS_3;
  static const FuncClass FUNC_CLASS_CLASS_4 =
    Road_FuncClass_FUNC_CLASS_CLASS_4;
  static const FuncClass FUNC_CLASS_CLASS_5 =
    Road_FuncClass_FUNC_CLASS_CLASS_5;
  static const FuncClass FUNC_CLASS_CLASS_11 =
    Road_FuncClass_FUNC_CLASS_CLASS_11;
  static inline bool FuncClass_IsValid(int value) {
    return Road_FuncClass_IsValid(value);
  }
  static const FuncClass FuncClass_MIN =
    Road_FuncClass_FuncClass_MIN;
  static const FuncClass FuncClass_MAX =
    Road_FuncClass_FuncClass_MAX;
  static const int FuncClass_ARRAYSIZE =
    Road_FuncClass_FuncClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FuncClass_descriptor() {
    return Road_FuncClass_descriptor();
  }
  static inline const ::std::string& FuncClass_Name(FuncClass value) {
    return Road_FuncClass_Name(value);
  }
  static inline bool FuncClass_Parse(const ::std::string& name,
      FuncClass* value) {
    return Road_FuncClass_Parse(name, value);
  }

  typedef Road_RoadTypeV2 RoadTypeV2;
  static const RoadTypeV2 ROAD_TYPE_V2_UNDEFINED =
    Road_RoadTypeV2_ROAD_TYPE_V2_UNDEFINED;
  static const RoadTypeV2 ROAD_TYPE_V2_EXPRESSWAY =
    Road_RoadTypeV2_ROAD_TYPE_V2_EXPRESSWAY;
  static const RoadTypeV2 ROAD_TYPE_V2_FREEWAY =
    Road_RoadTypeV2_ROAD_TYPE_V2_FREEWAY;
  static const RoadTypeV2 ROAD_TYPE_V2_ENTRY_RAMP =
    Road_RoadTypeV2_ROAD_TYPE_V2_ENTRY_RAMP;
  static const RoadTypeV2 ROAD_TYPE_V2_EXIT_RAMP =
    Road_RoadTypeV2_ROAD_TYPE_V2_EXIT_RAMP;
  static const RoadTypeV2 ROAD_TYPE_V2_RAMP =
    Road_RoadTypeV2_ROAD_TYPE_V2_RAMP;
  static const RoadTypeV2 ROAD_TYPE_V2_JCT =
    Road_RoadTypeV2_ROAD_TYPE_V2_JCT;
  static const RoadTypeV2 ROAD_TYPE_V2_SERVICE =
    Road_RoadTypeV2_ROAD_TYPE_V2_SERVICE;
  static const RoadTypeV2 ROAD_TYPE_V2_REGULAR =
    Road_RoadTypeV2_ROAD_TYPE_V2_REGULAR;
  static const RoadTypeV2 ROAD_TYPE_V2_AUXILIARY =
    Road_RoadTypeV2_ROAD_TYPE_V2_AUXILIARY;
  static const RoadTypeV2 ROAD_TYPE_V2_INTERSECTION =
    Road_RoadTypeV2_ROAD_TYPE_V2_INTERSECTION;
  static const RoadTypeV2 ROAD_TYPE_V2_ROUNDABOUT =
    Road_RoadTypeV2_ROAD_TYPE_V2_ROUNDABOUT;
  static const RoadTypeV2 ROAD_TYPE_V2_PEDESTRIAN =
    Road_RoadTypeV2_ROAD_TYPE_V2_PEDESTRIAN;
  static const RoadTypeV2 ROAD_TYPE_V2_PARALLEL =
    Road_RoadTypeV2_ROAD_TYPE_V2_PARALLEL;
  static const RoadTypeV2 ROAD_TYPE_V2_SERVICE_AREA =
    Road_RoadTypeV2_ROAD_TYPE_V2_SERVICE_AREA;
  static const RoadTypeV2 ROAD_TYPE_V2_TOLL_BOOTH =
    Road_RoadTypeV2_ROAD_TYPE_V2_TOLL_BOOTH;
  static const RoadTypeV2 ROAD_TYPE_V2_RESERVED_1 =
    Road_RoadTypeV2_ROAD_TYPE_V2_RESERVED_1;
  static const RoadTypeV2 ROAD_TYPE_V2_RESERVED_2 =
    Road_RoadTypeV2_ROAD_TYPE_V2_RESERVED_2;
  static const RoadTypeV2 ROAD_TYPE_V2_RESERVED_3 =
    Road_RoadTypeV2_ROAD_TYPE_V2_RESERVED_3;
  static const RoadTypeV2 ROAD_TYPE_V2_RESERVED_4 =
    Road_RoadTypeV2_ROAD_TYPE_V2_RESERVED_4;
  static const RoadTypeV2 ROAD_TYPE_V2_RESERVED_5 =
    Road_RoadTypeV2_ROAD_TYPE_V2_RESERVED_5;
  static const RoadTypeV2 ROAD_TYPE_V2_OTHERS =
    Road_RoadTypeV2_ROAD_TYPE_V2_OTHERS;
  static inline bool RoadTypeV2_IsValid(int value) {
    return Road_RoadTypeV2_IsValid(value);
  }
  static const RoadTypeV2 RoadTypeV2_MIN =
    Road_RoadTypeV2_RoadTypeV2_MIN;
  static const RoadTypeV2 RoadTypeV2_MAX =
    Road_RoadTypeV2_RoadTypeV2_MAX;
  static const int RoadTypeV2_ARRAYSIZE =
    Road_RoadTypeV2_RoadTypeV2_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoadTypeV2_descriptor() {
    return Road_RoadTypeV2_descriptor();
  }
  static inline const ::std::string& RoadTypeV2_Name(RoadTypeV2 value) {
    return Road_RoadTypeV2_Name(value);
  }
  static inline bool RoadTypeV2_Parse(const ::std::string& name,
      RoadTypeV2* value) {
    return Road_RoadTypeV2_Parse(name, value);
  }

  typedef Road_RoadClass RoadClass;
  static const RoadClass ROAD_CLASS_UNKNOWN =
    Road_RoadClass_ROAD_CLASS_UNKNOWN;
  static const RoadClass ROAD_CLASS_EXPRESS =
    Road_RoadClass_ROAD_CLASS_EXPRESS;
  static const RoadClass ROAD_CLASS_FREEWAY =
    Road_RoadClass_ROAD_CLASS_FREEWAY;
  static const RoadClass ROAD_CLASS_STATE_ROAD =
    Road_RoadClass_ROAD_CLASS_STATE_ROAD;
  static const RoadClass ROAD_CLASS_PROVINCE_ROAD =
    Road_RoadClass_ROAD_CLASS_PROVINCE_ROAD;
  static const RoadClass ROAD_CLASS_CITY_MAIN_ROAD =
    Road_RoadClass_ROAD_CLASS_CITY_MAIN_ROAD;
  static const RoadClass ROAD_CLASS_CITY_SECONDARY_ROAD =
    Road_RoadClass_ROAD_CLASS_CITY_SECONDARY_ROAD;
  static const RoadClass ROAD_CLASS_CITY_BRANCH_ROAD =
    Road_RoadClass_ROAD_CLASS_CITY_BRANCH_ROAD;
  static const RoadClass ROAD_CLASS_CITY_AUXILIARY_ROAD =
    Road_RoadClass_ROAD_CLASS_CITY_AUXILIARY_ROAD;
  static const RoadClass ROAD_CLASS_RESERVE_1 =
    Road_RoadClass_ROAD_CLASS_RESERVE_1;
  static const RoadClass ROAD_CLASS_RESERVE_2 =
    Road_RoadClass_ROAD_CLASS_RESERVE_2;
  static const RoadClass ROAD_CLASS_RESERVE_3 =
    Road_RoadClass_ROAD_CLASS_RESERVE_3;
  static const RoadClass ROAD_CLASS_RESERVE_4 =
    Road_RoadClass_ROAD_CLASS_RESERVE_4;
  static const RoadClass ROAD_CLASS_RESERVE_5 =
    Road_RoadClass_ROAD_CLASS_RESERVE_5;
  static const RoadClass ROAD_CLASS_COUNTY_ROAD =
    Road_RoadClass_ROAD_CLASS_COUNTY_ROAD;
  static const RoadClass ROAD_CLASS_TOWNSHIP_ROAD =
    Road_RoadClass_ROAD_CLASS_TOWNSHIP_ROAD;
  static const RoadClass ROAD_CLASS_RESERVE_6 =
    Road_RoadClass_ROAD_CLASS_RESERVE_6;
  static const RoadClass ROAD_CLASS_RESERVE_7 =
    Road_RoadClass_ROAD_CLASS_RESERVE_7;
  static const RoadClass ROAD_CLASS_RESERVE_8 =
    Road_RoadClass_ROAD_CLASS_RESERVE_8;
  static const RoadClass ROAD_CLASS_RESERVE_9 =
    Road_RoadClass_ROAD_CLASS_RESERVE_9;
  static const RoadClass ROAD_CLASS_OTHERS =
    Road_RoadClass_ROAD_CLASS_OTHERS;
  static inline bool RoadClass_IsValid(int value) {
    return Road_RoadClass_IsValid(value);
  }
  static const RoadClass RoadClass_MIN =
    Road_RoadClass_RoadClass_MIN;
  static const RoadClass RoadClass_MAX =
    Road_RoadClass_RoadClass_MAX;
  static const int RoadClass_ARRAYSIZE =
    Road_RoadClass_RoadClass_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RoadClass_descriptor() {
    return Road_RoadClass_descriptor();
  }
  static inline const ::std::string& RoadClass_Name(RoadClass value) {
    return Road_RoadClass_Name(value);
  }
  static inline bool RoadClass_Parse(const ::std::string& name,
      RoadClass* value) {
    return Road_RoadClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 lane_groups = 5 [packed = true];
  int lane_groups_size() const;
  void clear_lane_groups();
  static const int kLaneGroupsFieldNumber = 5;
  ::google::protobuf::uint64 lane_groups(int index) const;
  void set_lane_groups(int index, ::google::protobuf::uint64 value);
  void add_lane_groups(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      lane_groups() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_lane_groups();

  // repeated uint64 pre_connected_roads = 6 [packed = true];
  int pre_connected_roads_size() const;
  void clear_pre_connected_roads();
  static const int kPreConnectedRoadsFieldNumber = 6;
  ::google::protobuf::uint64 pre_connected_roads(int index) const;
  void set_pre_connected_roads(int index, ::google::protobuf::uint64 value);
  void add_pre_connected_roads(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pre_connected_roads() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pre_connected_roads();

  // repeated uint64 suc_connected_roads = 7 [packed = true];
  int suc_connected_roads_size() const;
  void clear_suc_connected_roads();
  static const int kSucConnectedRoadsFieldNumber = 7;
  ::google::protobuf::uint64 suc_connected_roads(int index) const;
  void set_suc_connected_roads(int index, ::google::protobuf::uint64 value);
  void add_suc_connected_roads(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      suc_connected_roads() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_suc_connected_roads();

  // repeated uint64 object_ids = 8 [packed = true];
  int object_ids_size() const;
  void clear_object_ids();
  static const int kObjectIdsFieldNumber = 8;
  ::google::protobuf::uint64 object_ids(int index) const;
  void set_object_ids(int index, ::google::protobuf::uint64 value);
  void add_object_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      object_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_object_ids();

  // repeated uint64 left_road_boundaries = 9 [packed = true];
  int left_road_boundaries_size() const;
  void clear_left_road_boundaries();
  static const int kLeftRoadBoundariesFieldNumber = 9;
  ::google::protobuf::uint64 left_road_boundaries(int index) const;
  void set_left_road_boundaries(int index, ::google::protobuf::uint64 value);
  void add_left_road_boundaries(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      left_road_boundaries() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_left_road_boundaries();

  // repeated uint64 right_road_boundaries = 10 [packed = true];
  int right_road_boundaries_size() const;
  void clear_right_road_boundaries();
  static const int kRightRoadBoundariesFieldNumber = 10;
  ::google::protobuf::uint64 right_road_boundaries(int index) const;
  void set_right_road_boundaries(int index, ::google::protobuf::uint64 value);
  void add_right_road_boundaries(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      right_road_boundaries() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_right_road_boundaries();

  // repeated uint64 valid_signals = 15 [packed = true];
  int valid_signals_size() const;
  void clear_valid_signals();
  static const int kValidSignalsFieldNumber = 15;
  ::google::protobuf::uint64 valid_signals(int index) const;
  void set_valid_signals(int index, ::google::protobuf::uint64 value);
  void add_valid_signals(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      valid_signals() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_valid_signals();

  // repeated .holo.map.proto.base.SpeedLimitInfo lane_speed_limit = 16;
  int lane_speed_limit_size() const;
  void clear_lane_speed_limit();
  static const int kLaneSpeedLimitFieldNumber = 16;
  ::holo::map::proto::base::SpeedLimitInfo* mutable_lane_speed_limit(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::SpeedLimitInfo >*
      mutable_lane_speed_limit();
  const ::holo::map::proto::base::SpeedLimitInfo& lane_speed_limit(int index) const;
  ::holo::map::proto::base::SpeedLimitInfo* add_lane_speed_limit();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::SpeedLimitInfo >&
      lane_speed_limit() const;

  // repeated .holo.map.proto.base.RoadAttribute attributes = 17;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 17;
  ::holo::map::proto::base::RoadAttribute* mutable_attributes(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::RoadAttribute >*
      mutable_attributes();
  const ::holo::map::proto::base::RoadAttribute& attributes(int index) const;
  ::holo::map::proto::base::RoadAttribute* add_attributes();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::RoadAttribute >&
      attributes() const;

  // repeated uint64 tile_ids = 19 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 19;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // map<uint32, .holo.map.proto.common.GeoBox> extra_region = 55;
  int extra_region_size() const;
  void clear_extra_region();
  static const int kExtraRegionFieldNumber = 55;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >&
      extra_region() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >*
      mutable_extra_region();

  // repeated .holo.map.proto.common.GeoPoint geometry_points = 56;
  int geometry_points_size() const;
  void clear_geometry_points();
  static const int kGeometryPointsFieldNumber = 56;
  ::holo::map::proto::common::GeoPoint* mutable_geometry_points(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
      mutable_geometry_points();
  const ::holo::map::proto::common::GeoPoint& geometry_points(int index) const;
  ::holo::map::proto::common::GeoPoint* add_geometry_points();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
      geometry_points() const;

  // map<uint32, .holo.map.proto.common.GeoLine> extra_geometry_points = 57;
  int extra_geometry_points_size() const;
  void clear_extra_geometry_points();
  static const int kExtraGeometryPointsFieldNumber = 57;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >&
      extra_geometry_points() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >*
      mutable_extra_geometry_points();

  // repeated .holo.map.proto.common.Position positions = 58;
  int positions_size() const;
  void clear_positions();
  static const int kPositionsFieldNumber = 58;
  ::holo::map::proto::common::Position* mutable_positions(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::Position >*
      mutable_positions();
  const ::holo::map::proto::common::Position& positions(int index) const;
  ::holo::map::proto::common::Position* add_positions();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::Position >&
      positions() const;

  // map<uint32, .holo.map.proto.common.MultiPosition> extra_positions = 59;
  int extra_positions_size() const;
  void clear_extra_positions();
  static const int kExtraPositionsFieldNumber = 59;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::MultiPosition >&
      extra_positions() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::MultiPosition >*
      mutable_extra_positions();

  // optional string road_name = 40;
  bool has_road_name() const;
  void clear_road_name();
  static const int kRoadNameFieldNumber = 40;
  const ::std::string& road_name() const;
  void set_road_name(const ::std::string& value);
  #if LANG_CXX11
  void set_road_name(::std::string&& value);
  #endif
  void set_road_name(const char* value);
  void set_road_name(const char* value, size_t size);
  ::std::string* mutable_road_name();
  ::std::string* release_road_name();
  void set_allocated_road_name(::std::string* road_name);

  // optional .holo.map.proto.common.Coordinate coordinate = 50;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 50;
  private:
  const ::holo::map::proto::common::Coordinate& _internal_coordinate() const;
  public:
  const ::holo::map::proto::common::Coordinate& coordinate() const;
  ::holo::map::proto::common::Coordinate* release_coordinate();
  ::holo::map::proto::common::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate);

  // optional .holo.map.proto.common.GeoBox region = 54;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 54;
  private:
  const ::holo::map::proto::common::GeoBox& _internal_region() const;
  public:
  const ::holo::map::proto::common::GeoBox& region() const;
  ::holo::map::proto::common::GeoBox* release_region();
  ::holo::map::proto::common::GeoBox* mutable_region();
  void set_allocated_region(::holo::map::proto::common::GeoBox* region);

  // optional uint64 road_id = 1;
  bool has_road_id() const;
  void clear_road_id();
  static const int kRoadIdFieldNumber = 1;
  ::google::protobuf::uint64 road_id() const;
  void set_road_id(::google::protobuf::uint64 value);

  // optional .holo.map.proto.base.Road.RoadType road_type = 2;
  bool has_road_type() const;
  void clear_road_type();
  static const int kRoadTypeFieldNumber = 2;
  ::holo::map::proto::base::Road_RoadType road_type() const;
  void set_road_type(::holo::map::proto::base::Road_RoadType value);

  // optional .holo.map.proto.base.Road.Direction direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::holo::map::proto::base::Road_Direction direction() const;
  void set_direction(::holo::map::proto::base::Road_Direction value);

  // optional .holo.map.proto.base.Road.FuncClass func_class = 4;
  bool has_func_class() const;
  void clear_func_class();
  static const int kFuncClassFieldNumber = 4;
  ::holo::map::proto::base::Road_FuncClass func_class() const;
  void set_func_class(::holo::map::proto::base::Road_FuncClass value);

  // optional .holo.map.proto.base.Road.RoadTypeV2 road_type_v2 = 11;
  bool has_road_type_v2() const;
  void clear_road_type_v2();
  static const int kRoadTypeV2FieldNumber = 11;
  ::holo::map::proto::base::Road_RoadTypeV2 road_type_v2() const;
  void set_road_type_v2(::holo::map::proto::base::Road_RoadTypeV2 value);

  // optional .holo.map.proto.base.Road.RoadClass road_class = 12;
  bool has_road_class() const;
  void clear_road_class();
  static const int kRoadClassFieldNumber = 12;
  ::holo::map::proto::base::Road_RoadClass road_class() const;
  void set_road_class(::holo::map::proto::base::Road_RoadClass value);

  // optional uint32 road_length_cm = 14;
  bool has_road_length_cm() const;
  void clear_road_length_cm();
  static const int kRoadLengthCmFieldNumber = 14;
  ::google::protobuf::uint32 road_length_cm() const;
  void set_road_length_cm(::google::protobuf::uint32 value);

  // optional uint64 intersection_id = 20;
  bool has_intersection_id() const;
  void clear_intersection_id();
  static const int kIntersectionIdFieldNumber = 20;
  ::google::protobuf::uint64 intersection_id() const;
  void set_intersection_id(::google::protobuf::uint64 value);

  // optional uint64 begin_intersection_id = 21;
  bool has_begin_intersection_id() const;
  void clear_begin_intersection_id();
  static const int kBeginIntersectionIdFieldNumber = 21;
  ::google::protobuf::uint64 begin_intersection_id() const;
  void set_begin_intersection_id(::google::protobuf::uint64 value);

  // optional uint64 end_intersection_id = 22;
  bool has_end_intersection_id() const;
  void clear_end_intersection_id();
  static const int kEndIntersectionIdFieldNumber = 22;
  ::google::protobuf::uint64 end_intersection_id() const;
  void set_end_intersection_id(::google::protobuf::uint64 value);

  // optional uint64 object_parking_lot_id = 30;
  bool has_object_parking_lot_id() const;
  void clear_object_parking_lot_id();
  static const int kObjectParkingLotIdFieldNumber = 30;
  ::google::protobuf::uint64 object_parking_lot_id() const;
  void set_object_parking_lot_id(::google::protobuf::uint64 value);

  // optional uint64 object_parking_floor_id = 31;
  bool has_object_parking_floor_id() const;
  void clear_object_parking_floor_id();
  static const int kObjectParkingFloorIdFieldNumber = 31;
  ::google::protobuf::uint64 object_parking_floor_id() const;
  void set_object_parking_floor_id(::google::protobuf::uint64 value);

  // optional uint32 level = 23;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 23;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 zone_id = 51;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 51;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // optional uint32 extra_zone_id = 52;
  bool has_extra_zone_id() const;
  void clear_extra_zone_id();
  static const int kExtraZoneIdFieldNumber = 52;
  ::google::protobuf::uint32 extra_zone_id() const;
  void set_extra_zone_id(::google::protobuf::uint32 value);

  // optional bool south_flag = 53;
  bool has_south_flag() const;
  void clear_south_flag();
  static const int kSouthFlagFieldNumber = 53;
  bool south_flag() const;
  void set_south_flag(bool value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.Road)
 private:
  void set_has_road_id();
  void clear_has_road_id();
  void set_has_road_type();
  void clear_has_road_type();
  void set_has_direction();
  void clear_has_direction();
  void set_has_func_class();
  void clear_has_func_class();
  void set_has_road_type_v2();
  void clear_has_road_type_v2();
  void set_has_road_class();
  void clear_has_road_class();
  void set_has_road_length_cm();
  void clear_has_road_length_cm();
  void set_has_intersection_id();
  void clear_has_intersection_id();
  void set_has_begin_intersection_id();
  void clear_has_begin_intersection_id();
  void set_has_end_intersection_id();
  void clear_has_end_intersection_id();
  void set_has_level();
  void clear_has_level();
  void set_has_object_parking_lot_id();
  void clear_has_object_parking_lot_id();
  void set_has_object_parking_floor_id();
  void clear_has_object_parking_floor_id();
  void set_has_road_name();
  void clear_has_road_name();
  void set_has_coordinate();
  void clear_has_coordinate();
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_extra_zone_id();
  void clear_has_extra_zone_id();
  void set_has_south_flag();
  void clear_has_south_flag();
  void set_has_region();
  void clear_has_region();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > lane_groups_;
  mutable int _lane_groups_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pre_connected_roads_;
  mutable int _pre_connected_roads_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > suc_connected_roads_;
  mutable int _suc_connected_roads_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > object_ids_;
  mutable int _object_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > left_road_boundaries_;
  mutable int _left_road_boundaries_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > right_road_boundaries_;
  mutable int _right_road_boundaries_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > valid_signals_;
  mutable int _valid_signals_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::SpeedLimitInfo > lane_speed_limit_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::RoadAttribute > attributes_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      Road_ExtraRegionEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_region_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint > geometry_points_;
  ::google::protobuf::internal::MapField<
      Road_ExtraGeometryPointsEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_geometry_points_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::Position > positions_;
  ::google::protobuf::internal::MapField<
      Road_ExtraPositionsEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::MultiPosition,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_positions_;
  ::google::protobuf::internal::ArenaStringPtr road_name_;
  ::holo::map::proto::common::Coordinate* coordinate_;
  ::holo::map::proto::common::GeoBox* region_;
  ::google::protobuf::uint64 road_id_;
  int road_type_;
  int direction_;
  int func_class_;
  int road_type_v2_;
  int road_class_;
  ::google::protobuf::uint32 road_length_cm_;
  ::google::protobuf::uint64 intersection_id_;
  ::google::protobuf::uint64 begin_intersection_id_;
  ::google::protobuf::uint64 end_intersection_id_;
  ::google::protobuf::uint64 object_parking_lot_id_;
  ::google::protobuf::uint64 object_parking_floor_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 extra_zone_id_;
  bool south_flag_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2froad_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Road

// optional uint64 road_id = 1;
inline bool Road::has_road_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Road::set_has_road_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Road::clear_has_road_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Road::clear_road_id() {
  road_id_ = GOOGLE_ULONGLONG(0);
  clear_has_road_id();
}
inline ::google::protobuf::uint64 Road::road_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.road_id)
  return road_id_;
}
inline void Road::set_road_id(::google::protobuf::uint64 value) {
  set_has_road_id();
  road_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.road_id)
}

// optional .holo.map.proto.base.Road.RoadType road_type = 2;
inline bool Road::has_road_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Road::set_has_road_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Road::clear_has_road_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Road::clear_road_type() {
  road_type_ = 0;
  clear_has_road_type();
}
inline ::holo::map::proto::base::Road_RoadType Road::road_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.road_type)
  return static_cast< ::holo::map::proto::base::Road_RoadType >(road_type_);
}
inline void Road::set_road_type(::holo::map::proto::base::Road_RoadType value) {
  assert(::holo::map::proto::base::Road_RoadType_IsValid(value));
  set_has_road_type();
  road_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.road_type)
}

// optional .holo.map.proto.base.Road.Direction direction = 3;
inline bool Road::has_direction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Road::set_has_direction() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Road::clear_has_direction() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Road::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::holo::map::proto::base::Road_Direction Road::direction() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.direction)
  return static_cast< ::holo::map::proto::base::Road_Direction >(direction_);
}
inline void Road::set_direction(::holo::map::proto::base::Road_Direction value) {
  assert(::holo::map::proto::base::Road_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.direction)
}

// optional .holo.map.proto.base.Road.FuncClass func_class = 4;
inline bool Road::has_func_class() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Road::set_has_func_class() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Road::clear_has_func_class() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Road::clear_func_class() {
  func_class_ = 0;
  clear_has_func_class();
}
inline ::holo::map::proto::base::Road_FuncClass Road::func_class() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.func_class)
  return static_cast< ::holo::map::proto::base::Road_FuncClass >(func_class_);
}
inline void Road::set_func_class(::holo::map::proto::base::Road_FuncClass value) {
  assert(::holo::map::proto::base::Road_FuncClass_IsValid(value));
  set_has_func_class();
  func_class_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.func_class)
}

// repeated uint64 lane_groups = 5 [packed = true];
inline int Road::lane_groups_size() const {
  return lane_groups_.size();
}
inline void Road::clear_lane_groups() {
  lane_groups_.Clear();
}
inline ::google::protobuf::uint64 Road::lane_groups(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.lane_groups)
  return lane_groups_.Get(index);
}
inline void Road::set_lane_groups(int index, ::google::protobuf::uint64 value) {
  lane_groups_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.lane_groups)
}
inline void Road::add_lane_groups(::google::protobuf::uint64 value) {
  lane_groups_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.lane_groups)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Road::lane_groups() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.lane_groups)
  return lane_groups_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Road::mutable_lane_groups() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.lane_groups)
  return &lane_groups_;
}

// repeated uint64 pre_connected_roads = 6 [packed = true];
inline int Road::pre_connected_roads_size() const {
  return pre_connected_roads_.size();
}
inline void Road::clear_pre_connected_roads() {
  pre_connected_roads_.Clear();
}
inline ::google::protobuf::uint64 Road::pre_connected_roads(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.pre_connected_roads)
  return pre_connected_roads_.Get(index);
}
inline void Road::set_pre_connected_roads(int index, ::google::protobuf::uint64 value) {
  pre_connected_roads_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.pre_connected_roads)
}
inline void Road::add_pre_connected_roads(::google::protobuf::uint64 value) {
  pre_connected_roads_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.pre_connected_roads)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Road::pre_connected_roads() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.pre_connected_roads)
  return pre_connected_roads_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Road::mutable_pre_connected_roads() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.pre_connected_roads)
  return &pre_connected_roads_;
}

// repeated uint64 suc_connected_roads = 7 [packed = true];
inline int Road::suc_connected_roads_size() const {
  return suc_connected_roads_.size();
}
inline void Road::clear_suc_connected_roads() {
  suc_connected_roads_.Clear();
}
inline ::google::protobuf::uint64 Road::suc_connected_roads(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.suc_connected_roads)
  return suc_connected_roads_.Get(index);
}
inline void Road::set_suc_connected_roads(int index, ::google::protobuf::uint64 value) {
  suc_connected_roads_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.suc_connected_roads)
}
inline void Road::add_suc_connected_roads(::google::protobuf::uint64 value) {
  suc_connected_roads_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.suc_connected_roads)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Road::suc_connected_roads() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.suc_connected_roads)
  return suc_connected_roads_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Road::mutable_suc_connected_roads() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.suc_connected_roads)
  return &suc_connected_roads_;
}

// repeated uint64 object_ids = 8 [packed = true];
inline int Road::object_ids_size() const {
  return object_ids_.size();
}
inline void Road::clear_object_ids() {
  object_ids_.Clear();
}
inline ::google::protobuf::uint64 Road::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.object_ids)
  return object_ids_.Get(index);
}
inline void Road::set_object_ids(int index, ::google::protobuf::uint64 value) {
  object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.object_ids)
}
inline void Road::add_object_ids(::google::protobuf::uint64 value) {
  object_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.object_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Road::object_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.object_ids)
  return object_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Road::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.object_ids)
  return &object_ids_;
}

// repeated uint64 left_road_boundaries = 9 [packed = true];
inline int Road::left_road_boundaries_size() const {
  return left_road_boundaries_.size();
}
inline void Road::clear_left_road_boundaries() {
  left_road_boundaries_.Clear();
}
inline ::google::protobuf::uint64 Road::left_road_boundaries(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.left_road_boundaries)
  return left_road_boundaries_.Get(index);
}
inline void Road::set_left_road_boundaries(int index, ::google::protobuf::uint64 value) {
  left_road_boundaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.left_road_boundaries)
}
inline void Road::add_left_road_boundaries(::google::protobuf::uint64 value) {
  left_road_boundaries_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.left_road_boundaries)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Road::left_road_boundaries() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.left_road_boundaries)
  return left_road_boundaries_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Road::mutable_left_road_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.left_road_boundaries)
  return &left_road_boundaries_;
}

// repeated uint64 right_road_boundaries = 10 [packed = true];
inline int Road::right_road_boundaries_size() const {
  return right_road_boundaries_.size();
}
inline void Road::clear_right_road_boundaries() {
  right_road_boundaries_.Clear();
}
inline ::google::protobuf::uint64 Road::right_road_boundaries(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.right_road_boundaries)
  return right_road_boundaries_.Get(index);
}
inline void Road::set_right_road_boundaries(int index, ::google::protobuf::uint64 value) {
  right_road_boundaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.right_road_boundaries)
}
inline void Road::add_right_road_boundaries(::google::protobuf::uint64 value) {
  right_road_boundaries_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.right_road_boundaries)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Road::right_road_boundaries() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.right_road_boundaries)
  return right_road_boundaries_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Road::mutable_right_road_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.right_road_boundaries)
  return &right_road_boundaries_;
}

// optional .holo.map.proto.base.Road.RoadTypeV2 road_type_v2 = 11;
inline bool Road::has_road_type_v2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Road::set_has_road_type_v2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Road::clear_has_road_type_v2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Road::clear_road_type_v2() {
  road_type_v2_ = 0;
  clear_has_road_type_v2();
}
inline ::holo::map::proto::base::Road_RoadTypeV2 Road::road_type_v2() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.road_type_v2)
  return static_cast< ::holo::map::proto::base::Road_RoadTypeV2 >(road_type_v2_);
}
inline void Road::set_road_type_v2(::holo::map::proto::base::Road_RoadTypeV2 value) {
  assert(::holo::map::proto::base::Road_RoadTypeV2_IsValid(value));
  set_has_road_type_v2();
  road_type_v2_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.road_type_v2)
}

// optional .holo.map.proto.base.Road.RoadClass road_class = 12;
inline bool Road::has_road_class() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Road::set_has_road_class() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Road::clear_has_road_class() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Road::clear_road_class() {
  road_class_ = 0;
  clear_has_road_class();
}
inline ::holo::map::proto::base::Road_RoadClass Road::road_class() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.road_class)
  return static_cast< ::holo::map::proto::base::Road_RoadClass >(road_class_);
}
inline void Road::set_road_class(::holo::map::proto::base::Road_RoadClass value) {
  assert(::holo::map::proto::base::Road_RoadClass_IsValid(value));
  set_has_road_class();
  road_class_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.road_class)
}

// optional uint32 road_length_cm = 14;
inline bool Road::has_road_length_cm() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Road::set_has_road_length_cm() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Road::clear_has_road_length_cm() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Road::clear_road_length_cm() {
  road_length_cm_ = 0u;
  clear_has_road_length_cm();
}
inline ::google::protobuf::uint32 Road::road_length_cm() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.road_length_cm)
  return road_length_cm_;
}
inline void Road::set_road_length_cm(::google::protobuf::uint32 value) {
  set_has_road_length_cm();
  road_length_cm_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.road_length_cm)
}

// repeated uint64 valid_signals = 15 [packed = true];
inline int Road::valid_signals_size() const {
  return valid_signals_.size();
}
inline void Road::clear_valid_signals() {
  valid_signals_.Clear();
}
inline ::google::protobuf::uint64 Road::valid_signals(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.valid_signals)
  return valid_signals_.Get(index);
}
inline void Road::set_valid_signals(int index, ::google::protobuf::uint64 value) {
  valid_signals_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.valid_signals)
}
inline void Road::add_valid_signals(::google::protobuf::uint64 value) {
  valid_signals_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.valid_signals)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Road::valid_signals() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.valid_signals)
  return valid_signals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Road::mutable_valid_signals() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.valid_signals)
  return &valid_signals_;
}

// repeated .holo.map.proto.base.SpeedLimitInfo lane_speed_limit = 16;
inline int Road::lane_speed_limit_size() const {
  return lane_speed_limit_.size();
}
inline ::holo::map::proto::base::SpeedLimitInfo* Road::mutable_lane_speed_limit(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Road.lane_speed_limit)
  return lane_speed_limit_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::SpeedLimitInfo >*
Road::mutable_lane_speed_limit() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.lane_speed_limit)
  return &lane_speed_limit_;
}
inline const ::holo::map::proto::base::SpeedLimitInfo& Road::lane_speed_limit(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.lane_speed_limit)
  return lane_speed_limit_.Get(index);
}
inline ::holo::map::proto::base::SpeedLimitInfo* Road::add_lane_speed_limit() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.lane_speed_limit)
  return lane_speed_limit_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::SpeedLimitInfo >&
Road::lane_speed_limit() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.lane_speed_limit)
  return lane_speed_limit_;
}

// repeated .holo.map.proto.base.RoadAttribute attributes = 17;
inline int Road::attributes_size() const {
  return attributes_.size();
}
inline ::holo::map::proto::base::RoadAttribute* Road::mutable_attributes(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Road.attributes)
  return attributes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::RoadAttribute >*
Road::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.attributes)
  return &attributes_;
}
inline const ::holo::map::proto::base::RoadAttribute& Road::attributes(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.attributes)
  return attributes_.Get(index);
}
inline ::holo::map::proto::base::RoadAttribute* Road::add_attributes() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.attributes)
  return attributes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::RoadAttribute >&
Road::attributes() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.attributes)
  return attributes_;
}

// repeated uint64 tile_ids = 19 [packed = true];
inline int Road::tile_ids_size() const {
  return tile_ids_.size();
}
inline void Road::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 Road::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.tile_ids)
  return tile_ids_.Get(index);
}
inline void Road::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.tile_ids)
}
inline void Road::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Road::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Road::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.tile_ids)
  return &tile_ids_;
}

// optional uint64 intersection_id = 20;
inline bool Road::has_intersection_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Road::set_has_intersection_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Road::clear_has_intersection_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Road::clear_intersection_id() {
  intersection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_intersection_id();
}
inline ::google::protobuf::uint64 Road::intersection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.intersection_id)
  return intersection_id_;
}
inline void Road::set_intersection_id(::google::protobuf::uint64 value) {
  set_has_intersection_id();
  intersection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.intersection_id)
}

// optional uint64 begin_intersection_id = 21;
inline bool Road::has_begin_intersection_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Road::set_has_begin_intersection_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Road::clear_has_begin_intersection_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Road::clear_begin_intersection_id() {
  begin_intersection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_begin_intersection_id();
}
inline ::google::protobuf::uint64 Road::begin_intersection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.begin_intersection_id)
  return begin_intersection_id_;
}
inline void Road::set_begin_intersection_id(::google::protobuf::uint64 value) {
  set_has_begin_intersection_id();
  begin_intersection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.begin_intersection_id)
}

// optional uint64 end_intersection_id = 22;
inline bool Road::has_end_intersection_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Road::set_has_end_intersection_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Road::clear_has_end_intersection_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Road::clear_end_intersection_id() {
  end_intersection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_end_intersection_id();
}
inline ::google::protobuf::uint64 Road::end_intersection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.end_intersection_id)
  return end_intersection_id_;
}
inline void Road::set_end_intersection_id(::google::protobuf::uint64 value) {
  set_has_end_intersection_id();
  end_intersection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.end_intersection_id)
}

// optional uint32 level = 23;
inline bool Road::has_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Road::set_has_level() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Road::clear_has_level() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Road::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Road::level() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.level)
  return level_;
}
inline void Road::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.level)
}

// optional uint64 object_parking_lot_id = 30;
inline bool Road::has_object_parking_lot_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Road::set_has_object_parking_lot_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Road::clear_has_object_parking_lot_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Road::clear_object_parking_lot_id() {
  object_parking_lot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_parking_lot_id();
}
inline ::google::protobuf::uint64 Road::object_parking_lot_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.object_parking_lot_id)
  return object_parking_lot_id_;
}
inline void Road::set_object_parking_lot_id(::google::protobuf::uint64 value) {
  set_has_object_parking_lot_id();
  object_parking_lot_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.object_parking_lot_id)
}

// optional uint64 object_parking_floor_id = 31;
inline bool Road::has_object_parking_floor_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Road::set_has_object_parking_floor_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Road::clear_has_object_parking_floor_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Road::clear_object_parking_floor_id() {
  object_parking_floor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_parking_floor_id();
}
inline ::google::protobuf::uint64 Road::object_parking_floor_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.object_parking_floor_id)
  return object_parking_floor_id_;
}
inline void Road::set_object_parking_floor_id(::google::protobuf::uint64 value) {
  set_has_object_parking_floor_id();
  object_parking_floor_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.object_parking_floor_id)
}

// optional string road_name = 40;
inline bool Road::has_road_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Road::set_has_road_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Road::clear_has_road_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Road::clear_road_name() {
  road_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_road_name();
}
inline const ::std::string& Road::road_name() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.road_name)
  return road_name_.GetNoArena();
}
inline void Road::set_road_name(const ::std::string& value) {
  set_has_road_name();
  road_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.road_name)
}
#if LANG_CXX11
inline void Road::set_road_name(::std::string&& value) {
  set_has_road_name();
  road_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.map.proto.base.Road.road_name)
}
#endif
inline void Road::set_road_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_road_name();
  road_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.map.proto.base.Road.road_name)
}
inline void Road::set_road_name(const char* value, size_t size) {
  set_has_road_name();
  road_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.map.proto.base.Road.road_name)
}
inline ::std::string* Road::mutable_road_name() {
  set_has_road_name();
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Road.road_name)
  return road_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Road::release_road_name() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.Road.road_name)
  if (!has_road_name()) {
    return NULL;
  }
  clear_has_road_name();
  return road_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Road::set_allocated_road_name(::std::string* road_name) {
  if (road_name != NULL) {
    set_has_road_name();
  } else {
    clear_has_road_name();
  }
  road_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), road_name);
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.Road.road_name)
}

// optional .holo.map.proto.common.Coordinate coordinate = 50;
inline bool Road::has_coordinate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Road::set_has_coordinate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Road::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::Coordinate& Road::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::holo::map::proto::common::Coordinate& Road::coordinate() const {
  const ::holo::map::proto::common::Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::Coordinate*>(
      &::holo::map::proto::common::_Coordinate_default_instance_);
}
inline ::holo::map::proto::common::Coordinate* Road::release_coordinate() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.Road.coordinate)
  clear_has_coordinate();
  ::holo::map::proto::common::Coordinate* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::Coordinate* Road::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Road.coordinate)
  return coordinate_;
}
inline void Road::set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.Road.coordinate)
}

// optional uint32 zone_id = 51;
inline bool Road::has_zone_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Road::set_has_zone_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Road::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Road::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 Road::zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.zone_id)
  return zone_id_;
}
inline void Road::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.zone_id)
}

// optional uint32 extra_zone_id = 52;
inline bool Road::has_extra_zone_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Road::set_has_extra_zone_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Road::clear_has_extra_zone_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Road::clear_extra_zone_id() {
  extra_zone_id_ = 0u;
  clear_has_extra_zone_id();
}
inline ::google::protobuf::uint32 Road::extra_zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.extra_zone_id)
  return extra_zone_id_;
}
inline void Road::set_extra_zone_id(::google::protobuf::uint32 value) {
  set_has_extra_zone_id();
  extra_zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.extra_zone_id)
}

// optional bool south_flag = 53;
inline bool Road::has_south_flag() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Road::set_has_south_flag() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Road::clear_has_south_flag() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Road::clear_south_flag() {
  south_flag_ = false;
  clear_has_south_flag();
}
inline bool Road::south_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.south_flag)
  return south_flag_;
}
inline void Road::set_south_flag(bool value) {
  set_has_south_flag();
  south_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Road.south_flag)
}

// optional .holo.map.proto.common.GeoBox region = 54;
inline bool Road::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Road::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Road::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::holo::map::proto::common::GeoBox& Road::_internal_region() const {
  return *region_;
}
inline const ::holo::map::proto::common::GeoBox& Road::region() const {
  const ::holo::map::proto::common::GeoBox* p = region_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.region)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoBox*>(
      &::holo::map::proto::common::_GeoBox_default_instance_);
}
inline ::holo::map::proto::common::GeoBox* Road::release_region() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.Road.region)
  clear_has_region();
  ::holo::map::proto::common::GeoBox* temp = region_;
  region_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoBox* Road::mutable_region() {
  set_has_region();
  if (region_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoBox>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Road.region)
  return region_;
}
inline void Road::set_allocated_region(::holo::map::proto::common::GeoBox* region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(region_);
  }
  if (region) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    set_has_region();
  } else {
    clear_has_region();
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.Road.region)
}

// map<uint32, .holo.map.proto.common.GeoBox> extra_region = 55;
inline int Road::extra_region_size() const {
  return extra_region_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >&
Road::extra_region() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.Road.extra_region)
  return extra_region_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >*
Road::mutable_extra_region() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.Road.extra_region)
  return extra_region_.MutableMap();
}

// repeated .holo.map.proto.common.GeoPoint geometry_points = 56;
inline int Road::geometry_points_size() const {
  return geometry_points_.size();
}
inline ::holo::map::proto::common::GeoPoint* Road::mutable_geometry_points(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Road.geometry_points)
  return geometry_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
Road::mutable_geometry_points() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.geometry_points)
  return &geometry_points_;
}
inline const ::holo::map::proto::common::GeoPoint& Road::geometry_points(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.geometry_points)
  return geometry_points_.Get(index);
}
inline ::holo::map::proto::common::GeoPoint* Road::add_geometry_points() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.geometry_points)
  return geometry_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
Road::geometry_points() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.geometry_points)
  return geometry_points_;
}

// map<uint32, .holo.map.proto.common.GeoLine> extra_geometry_points = 57;
inline int Road::extra_geometry_points_size() const {
  return extra_geometry_points_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >&
Road::extra_geometry_points() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.Road.extra_geometry_points)
  return extra_geometry_points_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >*
Road::mutable_extra_geometry_points() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.Road.extra_geometry_points)
  return extra_geometry_points_.MutableMap();
}

// repeated .holo.map.proto.common.Position positions = 58;
inline int Road::positions_size() const {
  return positions_.size();
}
inline ::holo::map::proto::common::Position* Road::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Road.positions)
  return positions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::Position >*
Road::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Road.positions)
  return &positions_;
}
inline const ::holo::map::proto::common::Position& Road::positions(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Road.positions)
  return positions_.Get(index);
}
inline ::holo::map::proto::common::Position* Road::add_positions() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Road.positions)
  return positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::Position >&
Road::positions() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Road.positions)
  return positions_;
}

// map<uint32, .holo.map.proto.common.MultiPosition> extra_positions = 59;
inline int Road::extra_positions_size() const {
  return extra_positions_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::MultiPosition >&
Road::extra_positions() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.Road.extra_positions)
  return extra_positions_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::MultiPosition >*
Road::mutable_extra_positions() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.Road.extra_positions)
  return extra_positions_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::base::Road_RoadType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Road_RoadType>() {
  return ::holo::map::proto::base::Road_RoadType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::Road_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Road_Direction>() {
  return ::holo::map::proto::base::Road_Direction_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::Road_FuncClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Road_FuncClass>() {
  return ::holo::map::proto::base::Road_FuncClass_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::Road_RoadTypeV2> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Road_RoadTypeV2>() {
  return ::holo::map::proto::base::Road_RoadTypeV2_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::Road_RoadClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Road_RoadClass>() {
  return ::holo::map::proto::base::Road_RoadClass_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2froad_2eproto
