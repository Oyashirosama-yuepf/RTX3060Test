// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/object_pedestrian_crossing.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5fpedestrian_5fcrossing_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5fpedestrian_5fcrossing_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/coordinate.pb.h"
#include "holo/map/proto/common/geo_box4.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2fobject_5fpedestrian_5fcrossing_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2fobject_5fpedestrian_5fcrossing_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2fobject_5fpedestrian_5fcrossing_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class ObjectPedestrianCrossing;
class ObjectPedestrianCrossingDefaultTypeInternal;
extern ObjectPedestrianCrossingDefaultTypeInternal _ObjectPedestrianCrossing_default_instance_;
class ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse;
class ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUseDefaultTypeInternal;
extern ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUseDefaultTypeInternal _ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::ObjectPedestrianCrossing* Arena::CreateMaybeMessage<::holo::map::proto::base::ObjectPedestrianCrossing>(Arena*);
template<> ::holo::map::proto::base::ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

// ===================================================================

class ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse();
  ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse& other);
  static const ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse*>(&_ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ObjectPedestrianCrossing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.ObjectPedestrianCrossing) */ {
 public:
  ObjectPedestrianCrossing();
  virtual ~ObjectPedestrianCrossing();

  ObjectPedestrianCrossing(const ObjectPedestrianCrossing& from);

  inline ObjectPedestrianCrossing& operator=(const ObjectPedestrianCrossing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectPedestrianCrossing(ObjectPedestrianCrossing&& from) noexcept
    : ObjectPedestrianCrossing() {
    *this = ::std::move(from);
  }

  inline ObjectPedestrianCrossing& operator=(ObjectPedestrianCrossing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectPedestrianCrossing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectPedestrianCrossing* internal_default_instance() {
    return reinterpret_cast<const ObjectPedestrianCrossing*>(
               &_ObjectPedestrianCrossing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ObjectPedestrianCrossing* other);
  friend void swap(ObjectPedestrianCrossing& a, ObjectPedestrianCrossing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectPedestrianCrossing* New() const final {
    return CreateMaybeMessage<ObjectPedestrianCrossing>(NULL);
  }

  ObjectPedestrianCrossing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPedestrianCrossing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectPedestrianCrossing& from);
  void MergeFrom(const ObjectPedestrianCrossing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPedestrianCrossing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated uint64 tile_ids = 10 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 10;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // repeated uint64 associated_lane_ids = 11 [packed = true];
  int associated_lane_ids_size() const;
  void clear_associated_lane_ids();
  static const int kAssociatedLaneIdsFieldNumber = 11;
  ::google::protobuf::uint64 associated_lane_ids(int index) const;
  void set_associated_lane_ids(int index, ::google::protobuf::uint64 value);
  void add_associated_lane_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_lane_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_lane_ids();

  // repeated uint64 associated_lane_group_ids = 12 [packed = true];
  int associated_lane_group_ids_size() const;
  void clear_associated_lane_group_ids();
  static const int kAssociatedLaneGroupIdsFieldNumber = 12;
  ::google::protobuf::uint64 associated_lane_group_ids(int index) const;
  void set_associated_lane_group_ids(int index, ::google::protobuf::uint64 value);
  void add_associated_lane_group_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_lane_group_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_lane_group_ids();

  // map<uint32, .holo.map.proto.common.GeoBox4> extra_geometry = 24;
  int extra_geometry_size() const;
  void clear_extra_geometry();
  static const int kExtraGeometryFieldNumber = 24;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4 >&
      extra_geometry() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4 >*
      mutable_extra_geometry();

  // optional .holo.map.proto.common.GeoBox4 geometry = 23;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 23;
  private:
  const ::holo::map::proto::common::GeoBox4& _internal_geometry() const;
  public:
  const ::holo::map::proto::common::GeoBox4& geometry() const;
  ::holo::map::proto::common::GeoBox4* release_geometry();
  ::holo::map::proto::common::GeoBox4* mutable_geometry();
  void set_allocated_geometry(::holo::map::proto::common::GeoBox4* geometry);

  // optional .holo.map.proto.common.Coordinate coordinate = 25;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 25;
  private:
  const ::holo::map::proto::common::Coordinate& _internal_coordinate() const;
  public:
  const ::holo::map::proto::common::Coordinate& coordinate() const;
  ::holo::map::proto::common::Coordinate* release_coordinate();
  ::holo::map::proto::common::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate);

  // optional uint64 object_pedestrian_crossing_id = 1;
  bool has_object_pedestrian_crossing_id() const;
  void clear_object_pedestrian_crossing_id();
  static const int kObjectPedestrianCrossingIdFieldNumber = 1;
  ::google::protobuf::uint64 object_pedestrian_crossing_id() const;
  void set_object_pedestrian_crossing_id(::google::protobuf::uint64 value);

  // optional uint64 intersection_id = 2;
  bool has_intersection_id() const;
  void clear_intersection_id();
  static const int kIntersectionIdFieldNumber = 2;
  ::google::protobuf::uint64 intersection_id() const;
  void set_intersection_id(::google::protobuf::uint64 value);

  // optional bool south_flag = 22;
  bool has_south_flag() const;
  void clear_south_flag();
  static const int kSouthFlagFieldNumber = 22;
  bool south_flag() const;
  void set_south_flag(bool value);

  // optional uint32 zone_id = 20;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 20;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // optional uint32 extra_zone_id = 21;
  bool has_extra_zone_id() const;
  void clear_extra_zone_id();
  static const int kExtraZoneIdFieldNumber = 21;
  ::google::protobuf::uint32 extra_zone_id() const;
  void set_extra_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.ObjectPedestrianCrossing)
 private:
  void set_has_object_pedestrian_crossing_id();
  void clear_has_object_pedestrian_crossing_id();
  void set_has_intersection_id();
  void clear_has_intersection_id();
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_extra_zone_id();
  void clear_has_extra_zone_id();
  void set_has_south_flag();
  void clear_has_south_flag();
  void set_has_geometry();
  void clear_has_geometry();
  void set_has_coordinate();
  void clear_has_coordinate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_lane_ids_;
  mutable int _associated_lane_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_lane_group_ids_;
  mutable int _associated_lane_group_ids_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      ObjectPedestrianCrossing_ExtraGeometryEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_geometry_;
  ::holo::map::proto::common::GeoBox4* geometry_;
  ::holo::map::proto::common::Coordinate* coordinate_;
  ::google::protobuf::uint64 object_pedestrian_crossing_id_;
  ::google::protobuf::uint64 intersection_id_;
  bool south_flag_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 extra_zone_id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2fobject_5fpedestrian_5fcrossing_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ObjectPedestrianCrossing

// optional uint64 object_pedestrian_crossing_id = 1;
inline bool ObjectPedestrianCrossing::has_object_pedestrian_crossing_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectPedestrianCrossing::set_has_object_pedestrian_crossing_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectPedestrianCrossing::clear_has_object_pedestrian_crossing_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectPedestrianCrossing::clear_object_pedestrian_crossing_id() {
  object_pedestrian_crossing_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_pedestrian_crossing_id();
}
inline ::google::protobuf::uint64 ObjectPedestrianCrossing::object_pedestrian_crossing_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectPedestrianCrossing.object_pedestrian_crossing_id)
  return object_pedestrian_crossing_id_;
}
inline void ObjectPedestrianCrossing::set_object_pedestrian_crossing_id(::google::protobuf::uint64 value) {
  set_has_object_pedestrian_crossing_id();
  object_pedestrian_crossing_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectPedestrianCrossing.object_pedestrian_crossing_id)
}

// optional uint64 intersection_id = 2;
inline bool ObjectPedestrianCrossing::has_intersection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectPedestrianCrossing::set_has_intersection_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectPedestrianCrossing::clear_has_intersection_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectPedestrianCrossing::clear_intersection_id() {
  intersection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_intersection_id();
}
inline ::google::protobuf::uint64 ObjectPedestrianCrossing::intersection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectPedestrianCrossing.intersection_id)
  return intersection_id_;
}
inline void ObjectPedestrianCrossing::set_intersection_id(::google::protobuf::uint64 value) {
  set_has_intersection_id();
  intersection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectPedestrianCrossing.intersection_id)
}

// repeated uint64 tile_ids = 10 [packed = true];
inline int ObjectPedestrianCrossing::tile_ids_size() const {
  return tile_ids_.size();
}
inline void ObjectPedestrianCrossing::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectPedestrianCrossing::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectPedestrianCrossing.tile_ids)
  return tile_ids_.Get(index);
}
inline void ObjectPedestrianCrossing::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectPedestrianCrossing.tile_ids)
}
inline void ObjectPedestrianCrossing::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectPedestrianCrossing.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectPedestrianCrossing::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectPedestrianCrossing.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectPedestrianCrossing::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectPedestrianCrossing.tile_ids)
  return &tile_ids_;
}

// repeated uint64 associated_lane_ids = 11 [packed = true];
inline int ObjectPedestrianCrossing::associated_lane_ids_size() const {
  return associated_lane_ids_.size();
}
inline void ObjectPedestrianCrossing::clear_associated_lane_ids() {
  associated_lane_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectPedestrianCrossing::associated_lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectPedestrianCrossing.associated_lane_ids)
  return associated_lane_ids_.Get(index);
}
inline void ObjectPedestrianCrossing::set_associated_lane_ids(int index, ::google::protobuf::uint64 value) {
  associated_lane_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectPedestrianCrossing.associated_lane_ids)
}
inline void ObjectPedestrianCrossing::add_associated_lane_ids(::google::protobuf::uint64 value) {
  associated_lane_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectPedestrianCrossing.associated_lane_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectPedestrianCrossing::associated_lane_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectPedestrianCrossing.associated_lane_ids)
  return associated_lane_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectPedestrianCrossing::mutable_associated_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectPedestrianCrossing.associated_lane_ids)
  return &associated_lane_ids_;
}

// repeated uint64 associated_lane_group_ids = 12 [packed = true];
inline int ObjectPedestrianCrossing::associated_lane_group_ids_size() const {
  return associated_lane_group_ids_.size();
}
inline void ObjectPedestrianCrossing::clear_associated_lane_group_ids() {
  associated_lane_group_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectPedestrianCrossing::associated_lane_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectPedestrianCrossing.associated_lane_group_ids)
  return associated_lane_group_ids_.Get(index);
}
inline void ObjectPedestrianCrossing::set_associated_lane_group_ids(int index, ::google::protobuf::uint64 value) {
  associated_lane_group_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectPedestrianCrossing.associated_lane_group_ids)
}
inline void ObjectPedestrianCrossing::add_associated_lane_group_ids(::google::protobuf::uint64 value) {
  associated_lane_group_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectPedestrianCrossing.associated_lane_group_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectPedestrianCrossing::associated_lane_group_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectPedestrianCrossing.associated_lane_group_ids)
  return associated_lane_group_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectPedestrianCrossing::mutable_associated_lane_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectPedestrianCrossing.associated_lane_group_ids)
  return &associated_lane_group_ids_;
}

// optional uint32 zone_id = 20;
inline bool ObjectPedestrianCrossing::has_zone_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObjectPedestrianCrossing::set_has_zone_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObjectPedestrianCrossing::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObjectPedestrianCrossing::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 ObjectPedestrianCrossing::zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectPedestrianCrossing.zone_id)
  return zone_id_;
}
inline void ObjectPedestrianCrossing::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectPedestrianCrossing.zone_id)
}

// optional uint32 extra_zone_id = 21;
inline bool ObjectPedestrianCrossing::has_extra_zone_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObjectPedestrianCrossing::set_has_extra_zone_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ObjectPedestrianCrossing::clear_has_extra_zone_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ObjectPedestrianCrossing::clear_extra_zone_id() {
  extra_zone_id_ = 0u;
  clear_has_extra_zone_id();
}
inline ::google::protobuf::uint32 ObjectPedestrianCrossing::extra_zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectPedestrianCrossing.extra_zone_id)
  return extra_zone_id_;
}
inline void ObjectPedestrianCrossing::set_extra_zone_id(::google::protobuf::uint32 value) {
  set_has_extra_zone_id();
  extra_zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectPedestrianCrossing.extra_zone_id)
}

// optional bool south_flag = 22;
inline bool ObjectPedestrianCrossing::has_south_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObjectPedestrianCrossing::set_has_south_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObjectPedestrianCrossing::clear_has_south_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObjectPedestrianCrossing::clear_south_flag() {
  south_flag_ = false;
  clear_has_south_flag();
}
inline bool ObjectPedestrianCrossing::south_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectPedestrianCrossing.south_flag)
  return south_flag_;
}
inline void ObjectPedestrianCrossing::set_south_flag(bool value) {
  set_has_south_flag();
  south_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectPedestrianCrossing.south_flag)
}

// optional .holo.map.proto.common.GeoBox4 geometry = 23;
inline bool ObjectPedestrianCrossing::has_geometry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectPedestrianCrossing::set_has_geometry() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectPedestrianCrossing::clear_has_geometry() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::GeoBox4& ObjectPedestrianCrossing::_internal_geometry() const {
  return *geometry_;
}
inline const ::holo::map::proto::common::GeoBox4& ObjectPedestrianCrossing::geometry() const {
  const ::holo::map::proto::common::GeoBox4* p = geometry_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectPedestrianCrossing.geometry)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoBox4*>(
      &::holo::map::proto::common::_GeoBox4_default_instance_);
}
inline ::holo::map::proto::common::GeoBox4* ObjectPedestrianCrossing::release_geometry() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.ObjectPedestrianCrossing.geometry)
  clear_has_geometry();
  ::holo::map::proto::common::GeoBox4* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoBox4* ObjectPedestrianCrossing::mutable_geometry() {
  set_has_geometry();
  if (geometry_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoBox4>(GetArenaNoVirtual());
    geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.ObjectPedestrianCrossing.geometry)
  return geometry_;
}
inline void ObjectPedestrianCrossing::set_allocated_geometry(::holo::map::proto::common::GeoBox4* geometry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geometry_);
  }
  if (geometry) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geometry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    set_has_geometry();
  } else {
    clear_has_geometry();
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.ObjectPedestrianCrossing.geometry)
}

// map<uint32, .holo.map.proto.common.GeoBox4> extra_geometry = 24;
inline int ObjectPedestrianCrossing::extra_geometry_size() const {
  return extra_geometry_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4 >&
ObjectPedestrianCrossing::extra_geometry() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.ObjectPedestrianCrossing.extra_geometry)
  return extra_geometry_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox4 >*
ObjectPedestrianCrossing::mutable_extra_geometry() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.ObjectPedestrianCrossing.extra_geometry)
  return extra_geometry_.MutableMap();
}

// optional .holo.map.proto.common.Coordinate coordinate = 25;
inline bool ObjectPedestrianCrossing::has_coordinate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectPedestrianCrossing::set_has_coordinate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectPedestrianCrossing::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::Coordinate& ObjectPedestrianCrossing::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::holo::map::proto::common::Coordinate& ObjectPedestrianCrossing::coordinate() const {
  const ::holo::map::proto::common::Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectPedestrianCrossing.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::Coordinate*>(
      &::holo::map::proto::common::_Coordinate_default_instance_);
}
inline ::holo::map::proto::common::Coordinate* ObjectPedestrianCrossing::release_coordinate() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.ObjectPedestrianCrossing.coordinate)
  clear_has_coordinate();
  ::holo::map::proto::common::Coordinate* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::Coordinate* ObjectPedestrianCrossing::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.ObjectPedestrianCrossing.coordinate)
  return coordinate_;
}
inline void ObjectPedestrianCrossing::set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.ObjectPedestrianCrossing.coordinate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5fpedestrian_5fcrossing_2eproto
