// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/lane_boundary.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2flane_5fboundary_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2flane_5fboundary_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/coordinate.pb.h"
#include "holo/map/proto/common/geo_box.pb.h"
#include "holo/map/proto/common/geo_point.pb.h"
#include "holo/map/proto/common/geo_line.pb.h"
#include "holo/map/proto/base/lane_boundary_info.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2flane_5fboundary_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2flane_5fboundary_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2flane_5fboundary_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class LaneBoundary;
class LaneBoundaryDefaultTypeInternal;
extern LaneBoundaryDefaultTypeInternal _LaneBoundary_default_instance_;
class LaneBoundary_ExtraGeometryPointsEntry_DoNotUse;
class LaneBoundary_ExtraGeometryPointsEntry_DoNotUseDefaultTypeInternal;
extern LaneBoundary_ExtraGeometryPointsEntry_DoNotUseDefaultTypeInternal _LaneBoundary_ExtraGeometryPointsEntry_DoNotUse_default_instance_;
class LaneBoundary_ExtraRegionEntry_DoNotUse;
class LaneBoundary_ExtraRegionEntry_DoNotUseDefaultTypeInternal;
extern LaneBoundary_ExtraRegionEntry_DoNotUseDefaultTypeInternal _LaneBoundary_ExtraRegionEntry_DoNotUse_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::LaneBoundary* Arena::CreateMaybeMessage<::holo::map::proto::base::LaneBoundary>(Arena*);
template<> ::holo::map::proto::base::LaneBoundary_ExtraGeometryPointsEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::LaneBoundary_ExtraGeometryPointsEntry_DoNotUse>(Arena*);
template<> ::holo::map::proto::base::LaneBoundary_ExtraRegionEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::LaneBoundary_ExtraRegionEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

// ===================================================================

class LaneBoundary_ExtraRegionEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<LaneBoundary_ExtraRegionEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<LaneBoundary_ExtraRegionEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  LaneBoundary_ExtraRegionEntry_DoNotUse();
  LaneBoundary_ExtraRegionEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const LaneBoundary_ExtraRegionEntry_DoNotUse& other);
  static const LaneBoundary_ExtraRegionEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LaneBoundary_ExtraRegionEntry_DoNotUse*>(&_LaneBoundary_ExtraRegionEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LaneBoundary_ExtraGeometryPointsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<LaneBoundary_ExtraGeometryPointsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<LaneBoundary_ExtraGeometryPointsEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  LaneBoundary_ExtraGeometryPointsEntry_DoNotUse();
  LaneBoundary_ExtraGeometryPointsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const LaneBoundary_ExtraGeometryPointsEntry_DoNotUse& other);
  static const LaneBoundary_ExtraGeometryPointsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LaneBoundary_ExtraGeometryPointsEntry_DoNotUse*>(&_LaneBoundary_ExtraGeometryPointsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class LaneBoundary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.LaneBoundary) */ {
 public:
  LaneBoundary();
  virtual ~LaneBoundary();

  LaneBoundary(const LaneBoundary& from);

  inline LaneBoundary& operator=(const LaneBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneBoundary(LaneBoundary&& from) noexcept
    : LaneBoundary() {
    *this = ::std::move(from);
  }

  inline LaneBoundary& operator=(LaneBoundary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneBoundary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneBoundary* internal_default_instance() {
    return reinterpret_cast<const LaneBoundary*>(
               &_LaneBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(LaneBoundary* other);
  friend void swap(LaneBoundary& a, LaneBoundary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneBoundary* New() const final {
    return CreateMaybeMessage<LaneBoundary>(NULL);
  }

  LaneBoundary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneBoundary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneBoundary& from);
  void MergeFrom(const LaneBoundary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneBoundary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated uint64 tile_ids = 2 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 2;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // repeated .holo.map.proto.base.LaneBoundaryInfo lane_boundary_info = 3;
  int lane_boundary_info_size() const;
  void clear_lane_boundary_info();
  static const int kLaneBoundaryInfoFieldNumber = 3;
  ::holo::map::proto::base::LaneBoundaryInfo* mutable_lane_boundary_info(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::LaneBoundaryInfo >*
      mutable_lane_boundary_info();
  const ::holo::map::proto::base::LaneBoundaryInfo& lane_boundary_info(int index) const;
  ::holo::map::proto::base::LaneBoundaryInfo* add_lane_boundary_info();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::LaneBoundaryInfo >&
      lane_boundary_info() const;

  // repeated uint64 pre_lane_boundary_ids = 7 [packed = true];
  int pre_lane_boundary_ids_size() const;
  void clear_pre_lane_boundary_ids();
  static const int kPreLaneBoundaryIdsFieldNumber = 7;
  ::google::protobuf::uint64 pre_lane_boundary_ids(int index) const;
  void set_pre_lane_boundary_ids(int index, ::google::protobuf::uint64 value);
  void add_pre_lane_boundary_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pre_lane_boundary_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pre_lane_boundary_ids();

  // repeated uint64 succ_lane_boundary_ids = 8 [packed = true];
  int succ_lane_boundary_ids_size() const;
  void clear_succ_lane_boundary_ids();
  static const int kSuccLaneBoundaryIdsFieldNumber = 8;
  ::google::protobuf::uint64 succ_lane_boundary_ids(int index) const;
  void set_succ_lane_boundary_ids(int index, ::google::protobuf::uint64 value);
  void add_succ_lane_boundary_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      succ_lane_boundary_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_succ_lane_boundary_ids();

  // map<uint32, .holo.map.proto.common.GeoBox> extra_region = 35;
  int extra_region_size() const;
  void clear_extra_region();
  static const int kExtraRegionFieldNumber = 35;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >&
      extra_region() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >*
      mutable_extra_region();

  // repeated .holo.map.proto.common.GeoPoint geometry_points = 36;
  int geometry_points_size() const;
  void clear_geometry_points();
  static const int kGeometryPointsFieldNumber = 36;
  ::holo::map::proto::common::GeoPoint* mutable_geometry_points(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
      mutable_geometry_points();
  const ::holo::map::proto::common::GeoPoint& geometry_points(int index) const;
  ::holo::map::proto::common::GeoPoint* add_geometry_points();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
      geometry_points() const;

  // map<uint32, .holo.map.proto.common.GeoLine> extra_geometry_points = 37;
  int extra_geometry_points_size() const;
  void clear_extra_geometry_points();
  static const int kExtraGeometryPointsFieldNumber = 37;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >&
      extra_geometry_points() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >*
      mutable_extra_geometry_points();

  // optional .holo.map.proto.common.Coordinate coordinate = 30;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 30;
  private:
  const ::holo::map::proto::common::Coordinate& _internal_coordinate() const;
  public:
  const ::holo::map::proto::common::Coordinate& coordinate() const;
  ::holo::map::proto::common::Coordinate* release_coordinate();
  ::holo::map::proto::common::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate);

  // optional .holo.map.proto.common.GeoBox region = 34;
  bool has_region() const;
  void clear_region();
  static const int kRegionFieldNumber = 34;
  private:
  const ::holo::map::proto::common::GeoBox& _internal_region() const;
  public:
  const ::holo::map::proto::common::GeoBox& region() const;
  ::holo::map::proto::common::GeoBox* release_region();
  ::holo::map::proto::common::GeoBox* mutable_region();
  void set_allocated_region(::holo::map::proto::common::GeoBox* region);

  // optional uint64 lane_boundary_id = 1;
  bool has_lane_boundary_id() const;
  void clear_lane_boundary_id();
  static const int kLaneBoundaryIdFieldNumber = 1;
  ::google::protobuf::uint64 lane_boundary_id() const;
  void set_lane_boundary_id(::google::protobuf::uint64 value);

  // optional uint64 left_lane_id = 4;
  bool has_left_lane_id() const;
  void clear_left_lane_id();
  static const int kLeftLaneIdFieldNumber = 4;
  ::google::protobuf::uint64 left_lane_id() const;
  void set_left_lane_id(::google::protobuf::uint64 value);

  // optional uint64 right_lane_id = 5;
  bool has_right_lane_id() const;
  void clear_right_lane_id();
  static const int kRightLaneIdFieldNumber = 5;
  ::google::protobuf::uint64 right_lane_id() const;
  void set_right_lane_id(::google::protobuf::uint64 value);

  // optional uint64 boundary_seq = 6;
  bool has_boundary_seq() const;
  void clear_boundary_seq();
  static const int kBoundarySeqFieldNumber = 6;
  ::google::protobuf::uint64 boundary_seq() const;
  void set_boundary_seq(::google::protobuf::uint64 value);

  // optional uint64 road_id = 9;
  bool has_road_id() const;
  void clear_road_id();
  static const int kRoadIdFieldNumber = 9;
  ::google::protobuf::uint64 road_id() const;
  void set_road_id(::google::protobuf::uint64 value);

  // optional uint64 lane_group_id = 11;
  bool has_lane_group_id() const;
  void clear_lane_group_id();
  static const int kLaneGroupIdFieldNumber = 11;
  ::google::protobuf::uint64 lane_group_id() const;
  void set_lane_group_id(::google::protobuf::uint64 value);

  // optional uint64 object_parking_lot_id = 20;
  bool has_object_parking_lot_id() const;
  void clear_object_parking_lot_id();
  static const int kObjectParkingLotIdFieldNumber = 20;
  ::google::protobuf::uint64 object_parking_lot_id() const;
  void set_object_parking_lot_id(::google::protobuf::uint64 value);

  // optional uint64 object_parking_floor_id = 21;
  bool has_object_parking_floor_id() const;
  void clear_object_parking_floor_id();
  static const int kObjectParkingFloorIdFieldNumber = 21;
  ::google::protobuf::uint64 object_parking_floor_id() const;
  void set_object_parking_floor_id(::google::protobuf::uint64 value);

  // optional bool south_flag = 33;
  bool has_south_flag() const;
  void clear_south_flag();
  static const int kSouthFlagFieldNumber = 33;
  bool south_flag() const;
  void set_south_flag(bool value);

  // optional uint32 zone_id = 31;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 31;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // optional uint32 extra_zone_id = 32;
  bool has_extra_zone_id() const;
  void clear_extra_zone_id();
  static const int kExtraZoneIdFieldNumber = 32;
  ::google::protobuf::uint32 extra_zone_id() const;
  void set_extra_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.LaneBoundary)
 private:
  void set_has_lane_boundary_id();
  void clear_has_lane_boundary_id();
  void set_has_left_lane_id();
  void clear_has_left_lane_id();
  void set_has_right_lane_id();
  void clear_has_right_lane_id();
  void set_has_boundary_seq();
  void clear_has_boundary_seq();
  void set_has_road_id();
  void clear_has_road_id();
  void set_has_lane_group_id();
  void clear_has_lane_group_id();
  void set_has_object_parking_lot_id();
  void clear_has_object_parking_lot_id();
  void set_has_object_parking_floor_id();
  void clear_has_object_parking_floor_id();
  void set_has_coordinate();
  void clear_has_coordinate();
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_extra_zone_id();
  void clear_has_extra_zone_id();
  void set_has_south_flag();
  void clear_has_south_flag();
  void set_has_region();
  void clear_has_region();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::LaneBoundaryInfo > lane_boundary_info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pre_lane_boundary_ids_;
  mutable int _pre_lane_boundary_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > succ_lane_boundary_ids_;
  mutable int _succ_lane_boundary_ids_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      LaneBoundary_ExtraRegionEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_region_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint > geometry_points_;
  ::google::protobuf::internal::MapField<
      LaneBoundary_ExtraGeometryPointsEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_geometry_points_;
  ::holo::map::proto::common::Coordinate* coordinate_;
  ::holo::map::proto::common::GeoBox* region_;
  ::google::protobuf::uint64 lane_boundary_id_;
  ::google::protobuf::uint64 left_lane_id_;
  ::google::protobuf::uint64 right_lane_id_;
  ::google::protobuf::uint64 boundary_seq_;
  ::google::protobuf::uint64 road_id_;
  ::google::protobuf::uint64 lane_group_id_;
  ::google::protobuf::uint64 object_parking_lot_id_;
  ::google::protobuf::uint64 object_parking_floor_id_;
  bool south_flag_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 extra_zone_id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2flane_5fboundary_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LaneBoundary

// optional uint64 lane_boundary_id = 1;
inline bool LaneBoundary::has_lane_boundary_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneBoundary::set_has_lane_boundary_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneBoundary::clear_has_lane_boundary_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneBoundary::clear_lane_boundary_id() {
  lane_boundary_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lane_boundary_id();
}
inline ::google::protobuf::uint64 LaneBoundary::lane_boundary_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.lane_boundary_id)
  return lane_boundary_id_;
}
inline void LaneBoundary::set_lane_boundary_id(::google::protobuf::uint64 value) {
  set_has_lane_boundary_id();
  lane_boundary_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.lane_boundary_id)
}

// repeated uint64 tile_ids = 2 [packed = true];
inline int LaneBoundary::tile_ids_size() const {
  return tile_ids_.size();
}
inline void LaneBoundary::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 LaneBoundary::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.tile_ids)
  return tile_ids_.Get(index);
}
inline void LaneBoundary::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.tile_ids)
}
inline void LaneBoundary::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneBoundary.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaneBoundary::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneBoundary.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaneBoundary::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneBoundary.tile_ids)
  return &tile_ids_;
}

// repeated .holo.map.proto.base.LaneBoundaryInfo lane_boundary_info = 3;
inline int LaneBoundary::lane_boundary_info_size() const {
  return lane_boundary_info_.size();
}
inline ::holo::map::proto::base::LaneBoundaryInfo* LaneBoundary::mutable_lane_boundary_info(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.LaneBoundary.lane_boundary_info)
  return lane_boundary_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::LaneBoundaryInfo >*
LaneBoundary::mutable_lane_boundary_info() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneBoundary.lane_boundary_info)
  return &lane_boundary_info_;
}
inline const ::holo::map::proto::base::LaneBoundaryInfo& LaneBoundary::lane_boundary_info(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.lane_boundary_info)
  return lane_boundary_info_.Get(index);
}
inline ::holo::map::proto::base::LaneBoundaryInfo* LaneBoundary::add_lane_boundary_info() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneBoundary.lane_boundary_info)
  return lane_boundary_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::LaneBoundaryInfo >&
LaneBoundary::lane_boundary_info() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneBoundary.lane_boundary_info)
  return lane_boundary_info_;
}

// optional uint64 left_lane_id = 4;
inline bool LaneBoundary::has_left_lane_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneBoundary::set_has_left_lane_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneBoundary::clear_has_left_lane_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneBoundary::clear_left_lane_id() {
  left_lane_id_ = GOOGLE_ULONGLONG(0);
  clear_has_left_lane_id();
}
inline ::google::protobuf::uint64 LaneBoundary::left_lane_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.left_lane_id)
  return left_lane_id_;
}
inline void LaneBoundary::set_left_lane_id(::google::protobuf::uint64 value) {
  set_has_left_lane_id();
  left_lane_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.left_lane_id)
}

// optional uint64 right_lane_id = 5;
inline bool LaneBoundary::has_right_lane_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaneBoundary::set_has_right_lane_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LaneBoundary::clear_has_right_lane_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LaneBoundary::clear_right_lane_id() {
  right_lane_id_ = GOOGLE_ULONGLONG(0);
  clear_has_right_lane_id();
}
inline ::google::protobuf::uint64 LaneBoundary::right_lane_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.right_lane_id)
  return right_lane_id_;
}
inline void LaneBoundary::set_right_lane_id(::google::protobuf::uint64 value) {
  set_has_right_lane_id();
  right_lane_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.right_lane_id)
}

// optional uint64 boundary_seq = 6;
inline bool LaneBoundary::has_boundary_seq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaneBoundary::set_has_boundary_seq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LaneBoundary::clear_has_boundary_seq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LaneBoundary::clear_boundary_seq() {
  boundary_seq_ = GOOGLE_ULONGLONG(0);
  clear_has_boundary_seq();
}
inline ::google::protobuf::uint64 LaneBoundary::boundary_seq() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.boundary_seq)
  return boundary_seq_;
}
inline void LaneBoundary::set_boundary_seq(::google::protobuf::uint64 value) {
  set_has_boundary_seq();
  boundary_seq_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.boundary_seq)
}

// repeated uint64 pre_lane_boundary_ids = 7 [packed = true];
inline int LaneBoundary::pre_lane_boundary_ids_size() const {
  return pre_lane_boundary_ids_.size();
}
inline void LaneBoundary::clear_pre_lane_boundary_ids() {
  pre_lane_boundary_ids_.Clear();
}
inline ::google::protobuf::uint64 LaneBoundary::pre_lane_boundary_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.pre_lane_boundary_ids)
  return pre_lane_boundary_ids_.Get(index);
}
inline void LaneBoundary::set_pre_lane_boundary_ids(int index, ::google::protobuf::uint64 value) {
  pre_lane_boundary_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.pre_lane_boundary_ids)
}
inline void LaneBoundary::add_pre_lane_boundary_ids(::google::protobuf::uint64 value) {
  pre_lane_boundary_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneBoundary.pre_lane_boundary_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaneBoundary::pre_lane_boundary_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneBoundary.pre_lane_boundary_ids)
  return pre_lane_boundary_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaneBoundary::mutable_pre_lane_boundary_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneBoundary.pre_lane_boundary_ids)
  return &pre_lane_boundary_ids_;
}

// repeated uint64 succ_lane_boundary_ids = 8 [packed = true];
inline int LaneBoundary::succ_lane_boundary_ids_size() const {
  return succ_lane_boundary_ids_.size();
}
inline void LaneBoundary::clear_succ_lane_boundary_ids() {
  succ_lane_boundary_ids_.Clear();
}
inline ::google::protobuf::uint64 LaneBoundary::succ_lane_boundary_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.succ_lane_boundary_ids)
  return succ_lane_boundary_ids_.Get(index);
}
inline void LaneBoundary::set_succ_lane_boundary_ids(int index, ::google::protobuf::uint64 value) {
  succ_lane_boundary_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.succ_lane_boundary_ids)
}
inline void LaneBoundary::add_succ_lane_boundary_ids(::google::protobuf::uint64 value) {
  succ_lane_boundary_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneBoundary.succ_lane_boundary_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LaneBoundary::succ_lane_boundary_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneBoundary.succ_lane_boundary_ids)
  return succ_lane_boundary_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LaneBoundary::mutable_succ_lane_boundary_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneBoundary.succ_lane_boundary_ids)
  return &succ_lane_boundary_ids_;
}

// optional uint64 road_id = 9;
inline bool LaneBoundary::has_road_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaneBoundary::set_has_road_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LaneBoundary::clear_has_road_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LaneBoundary::clear_road_id() {
  road_id_ = GOOGLE_ULONGLONG(0);
  clear_has_road_id();
}
inline ::google::protobuf::uint64 LaneBoundary::road_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.road_id)
  return road_id_;
}
inline void LaneBoundary::set_road_id(::google::protobuf::uint64 value) {
  set_has_road_id();
  road_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.road_id)
}

// optional uint64 lane_group_id = 11;
inline bool LaneBoundary::has_lane_group_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaneBoundary::set_has_lane_group_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LaneBoundary::clear_has_lane_group_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LaneBoundary::clear_lane_group_id() {
  lane_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lane_group_id();
}
inline ::google::protobuf::uint64 LaneBoundary::lane_group_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.lane_group_id)
  return lane_group_id_;
}
inline void LaneBoundary::set_lane_group_id(::google::protobuf::uint64 value) {
  set_has_lane_group_id();
  lane_group_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.lane_group_id)
}

// optional uint64 object_parking_lot_id = 20;
inline bool LaneBoundary::has_object_parking_lot_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LaneBoundary::set_has_object_parking_lot_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LaneBoundary::clear_has_object_parking_lot_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LaneBoundary::clear_object_parking_lot_id() {
  object_parking_lot_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_parking_lot_id();
}
inline ::google::protobuf::uint64 LaneBoundary::object_parking_lot_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.object_parking_lot_id)
  return object_parking_lot_id_;
}
inline void LaneBoundary::set_object_parking_lot_id(::google::protobuf::uint64 value) {
  set_has_object_parking_lot_id();
  object_parking_lot_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.object_parking_lot_id)
}

// optional uint64 object_parking_floor_id = 21;
inline bool LaneBoundary::has_object_parking_floor_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LaneBoundary::set_has_object_parking_floor_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LaneBoundary::clear_has_object_parking_floor_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LaneBoundary::clear_object_parking_floor_id() {
  object_parking_floor_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_parking_floor_id();
}
inline ::google::protobuf::uint64 LaneBoundary::object_parking_floor_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.object_parking_floor_id)
  return object_parking_floor_id_;
}
inline void LaneBoundary::set_object_parking_floor_id(::google::protobuf::uint64 value) {
  set_has_object_parking_floor_id();
  object_parking_floor_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.object_parking_floor_id)
}

// optional .holo.map.proto.common.Coordinate coordinate = 30;
inline bool LaneBoundary::has_coordinate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneBoundary::set_has_coordinate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneBoundary::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::Coordinate& LaneBoundary::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::holo::map::proto::common::Coordinate& LaneBoundary::coordinate() const {
  const ::holo::map::proto::common::Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::Coordinate*>(
      &::holo::map::proto::common::_Coordinate_default_instance_);
}
inline ::holo::map::proto::common::Coordinate* LaneBoundary::release_coordinate() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.LaneBoundary.coordinate)
  clear_has_coordinate();
  ::holo::map::proto::common::Coordinate* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::Coordinate* LaneBoundary::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.LaneBoundary.coordinate)
  return coordinate_;
}
inline void LaneBoundary::set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.LaneBoundary.coordinate)
}

// optional uint32 zone_id = 31;
inline bool LaneBoundary::has_zone_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LaneBoundary::set_has_zone_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LaneBoundary::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LaneBoundary::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 LaneBoundary::zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.zone_id)
  return zone_id_;
}
inline void LaneBoundary::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.zone_id)
}

// optional uint32 extra_zone_id = 32;
inline bool LaneBoundary::has_extra_zone_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LaneBoundary::set_has_extra_zone_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LaneBoundary::clear_has_extra_zone_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LaneBoundary::clear_extra_zone_id() {
  extra_zone_id_ = 0u;
  clear_has_extra_zone_id();
}
inline ::google::protobuf::uint32 LaneBoundary::extra_zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.extra_zone_id)
  return extra_zone_id_;
}
inline void LaneBoundary::set_extra_zone_id(::google::protobuf::uint32 value) {
  set_has_extra_zone_id();
  extra_zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.extra_zone_id)
}

// optional bool south_flag = 33;
inline bool LaneBoundary::has_south_flag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LaneBoundary::set_has_south_flag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LaneBoundary::clear_has_south_flag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LaneBoundary::clear_south_flag() {
  south_flag_ = false;
  clear_has_south_flag();
}
inline bool LaneBoundary::south_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.south_flag)
  return south_flag_;
}
inline void LaneBoundary::set_south_flag(bool value) {
  set_has_south_flag();
  south_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneBoundary.south_flag)
}

// optional .holo.map.proto.common.GeoBox region = 34;
inline bool LaneBoundary::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneBoundary::set_has_region() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneBoundary::clear_has_region() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::GeoBox& LaneBoundary::_internal_region() const {
  return *region_;
}
inline const ::holo::map::proto::common::GeoBox& LaneBoundary::region() const {
  const ::holo::map::proto::common::GeoBox* p = region_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.region)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoBox*>(
      &::holo::map::proto::common::_GeoBox_default_instance_);
}
inline ::holo::map::proto::common::GeoBox* LaneBoundary::release_region() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.LaneBoundary.region)
  clear_has_region();
  ::holo::map::proto::common::GeoBox* temp = region_;
  region_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoBox* LaneBoundary::mutable_region() {
  set_has_region();
  if (region_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoBox>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.LaneBoundary.region)
  return region_;
}
inline void LaneBoundary::set_allocated_region(::holo::map::proto::common::GeoBox* region) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(region_);
  }
  if (region) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      region = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    set_has_region();
  } else {
    clear_has_region();
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.LaneBoundary.region)
}

// map<uint32, .holo.map.proto.common.GeoBox> extra_region = 35;
inline int LaneBoundary::extra_region_size() const {
  return extra_region_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >&
LaneBoundary::extra_region() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.LaneBoundary.extra_region)
  return extra_region_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >*
LaneBoundary::mutable_extra_region() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.LaneBoundary.extra_region)
  return extra_region_.MutableMap();
}

// repeated .holo.map.proto.common.GeoPoint geometry_points = 36;
inline int LaneBoundary::geometry_points_size() const {
  return geometry_points_.size();
}
inline ::holo::map::proto::common::GeoPoint* LaneBoundary::mutable_geometry_points(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.LaneBoundary.geometry_points)
  return geometry_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
LaneBoundary::mutable_geometry_points() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.LaneBoundary.geometry_points)
  return &geometry_points_;
}
inline const ::holo::map::proto::common::GeoPoint& LaneBoundary::geometry_points(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneBoundary.geometry_points)
  return geometry_points_.Get(index);
}
inline ::holo::map::proto::common::GeoPoint* LaneBoundary::add_geometry_points() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.LaneBoundary.geometry_points)
  return geometry_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
LaneBoundary::geometry_points() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.LaneBoundary.geometry_points)
  return geometry_points_;
}

// map<uint32, .holo.map.proto.common.GeoLine> extra_geometry_points = 37;
inline int LaneBoundary::extra_geometry_points_size() const {
  return extra_geometry_points_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >&
LaneBoundary::extra_geometry_points() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.LaneBoundary.extra_geometry_points)
  return extra_geometry_points_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoLine >*
LaneBoundary::mutable_extra_geometry_points() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.LaneBoundary.extra_geometry_points)
  return extra_geometry_points_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2flane_5fboundary_2eproto
