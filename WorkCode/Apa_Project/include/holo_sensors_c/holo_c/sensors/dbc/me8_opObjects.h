#ifndef HOLO_SENSORS_ME8_ME8_OPOBJECTS_H_
#define HOLO_SENSORS_ME8_ME8_OPOBJECTS_H_
/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2021年 12月 06日 星期一 13:13:09 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_opObjects
 */

/**
 * @defgroup DB_opObjects CAN Database opObjects
 *
 * Path to file: output/opObjects.dbc
 *
 * Provides the following ECUs:
 */

/**
 * @defgroup MSG_Objects_Header Message Objects_Header (0x541)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Header_Sync_Frame_Index
 * - \ref SIG_Objects_Header_Num_Of_Video_Objs
 * - \ref SIG_Objects_Header_VD_CIPV_ID
 * - \ref SIG_Objects_Header_VD_CIPV_Lost
 * - \ref SIG_Objects_Header_OBJ_VD_Allow_Acc
 * - \ref SIG_Objects_Header_Reserved
 *
 * @{
 */

/**
 * Message Objects_Header configuration tuple.
 */
#define MSG_Objects_Header                          0x541, 0, 3

/**
 * Message Objects_Header id.
 */
#define ID_Objects_Header                           0x541

/**
 * Message Objects_Header extended id bit.
 */
#define EXT_Objects_Header                          0

/**
 * Message Objects_Header Data Length Count.
 */
#define DLC_Objects_Header                          3

/**
 * Message Objects_Header cycle time.
 */
#define CYCLE_Objects_Header                        0

/**
 * Message Objects_Header fast cycle time.
 */
#define FAST_Objects_Header                         0

/**
 * Initialise message Objects_Header buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Header(buf) { \
	INITSIG_Objects_Header_Sync_Frame_Index(buf); \
	INITSIG_Objects_Header_Num_Of_Video_Objs(buf); \
	INITSIG_Objects_Header_VD_CIPV_ID(buf); \
	INITSIG_Objects_Header_VD_CIPV_Lost(buf); \
	INITSIG_Objects_Header_OBJ_VD_Allow_Acc(buf); \
	INITSIG_Objects_Header_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A1 Message Objects_Signals_A1 (0x500)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A1_Obj_ID_1
 * - \ref SIG_Objects_Signals_A1_Object_Class_1
 * - \ref SIG_Objects_Signals_A1_OBJ_Width_1
 * - \ref SIG_Objects_Signals_A1_OBJ_Length_1
 * - \ref SIG_Objects_Signals_A1_Relative_Long_Velocity_1
 * - \ref SIG_Objects_Signals_A1_OBJ_Lane_Assignment_1
 * - \ref SIG_Objects_Signals_A1_Relative_Lat_Velocity_1
 * - \ref SIG_Objects_Signals_A1_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A1 configuration tuple.
 */
#define MSG_Objects_Signals_A1                      0x500, 0, 7

/**
 * Message Objects_Signals_A1 id.
 */
#define ID_Objects_Signals_A1                       0x500

/**
 * Message Objects_Signals_A1 extended id bit.
 */
#define EXT_Objects_Signals_A1                      0

/**
 * Message Objects_Signals_A1 Data Length Count.
 */
#define DLC_Objects_Signals_A1                      7

/**
 * Message Objects_Signals_A1 cycle time.
 */
#define CYCLE_Objects_Signals_A1                    0

/**
 * Message Objects_Signals_A1 fast cycle time.
 */
#define FAST_Objects_Signals_A1                     0

/**
 * Initialise message Objects_Signals_A1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A1(buf) { \
	INITSIG_Objects_Signals_A1_Obj_ID_1(buf); \
	INITSIG_Objects_Signals_A1_Object_Class_1(buf); \
	INITSIG_Objects_Signals_A1_OBJ_Width_1(buf); \
	INITSIG_Objects_Signals_A1_OBJ_Length_1(buf); \
	INITSIG_Objects_Signals_A1_Relative_Long_Velocity_1(buf); \
	INITSIG_Objects_Signals_A1_OBJ_Lane_Assignment_1(buf); \
	INITSIG_Objects_Signals_A1_Relative_Lat_Velocity_1(buf); \
	INITSIG_Objects_Signals_A1_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B1 Message Objects_Signals_B1 (0x501)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B1_Absolute_Long_Acc_1
 * - \ref SIG_Objects_Signals_B1_Long_Distance_1
 * - \ref SIG_Objects_Signals_B1_Lateral_Distance_1
 * - \ref SIG_Objects_Signals_B1_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B1 configuration tuple.
 */
#define MSG_Objects_Signals_B1                      0x501, 0, 5

/**
 * Message Objects_Signals_B1 id.
 */
#define ID_Objects_Signals_B1                       0x501

/**
 * Message Objects_Signals_B1 extended id bit.
 */
#define EXT_Objects_Signals_B1                      0

/**
 * Message Objects_Signals_B1 Data Length Count.
 */
#define DLC_Objects_Signals_B1                      5

/**
 * Message Objects_Signals_B1 cycle time.
 */
#define CYCLE_Objects_Signals_B1                    0

/**
 * Message Objects_Signals_B1 fast cycle time.
 */
#define FAST_Objects_Signals_B1                     0

/**
 * Initialise message Objects_Signals_B1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B1(buf) { \
	INITSIG_Objects_Signals_B1_Absolute_Long_Acc_1(buf); \
	INITSIG_Objects_Signals_B1_Long_Distance_1(buf); \
	INITSIG_Objects_Signals_B1_Lateral_Distance_1(buf); \
	INITSIG_Objects_Signals_B1_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C1 Message Objects_Signals_C1 (0x502)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C1_Absolute_Speed_1
 * - \ref SIG_Objects_Signals_C1_OBJ_Motion_Status_1
 * - \ref SIG_Objects_Signals_C1_OBJ_Motion_Category_1
 * - \ref SIG_Objects_Signals_C1_Brake_Light_1
 * - \ref SIG_Objects_Signals_C1_Turn_Indicator_Right_1
 * - \ref SIG_Objects_Signals_C1_Turn_Indicator_Left_1
 * - \ref SIG_Objects_Signals_C1_Light_indicator_validity_1
 * - \ref SIG_Objects_Signals_C1_OBJ_Angle_Mid_1
 * - \ref SIG_Objects_Signals_C1_OBJ_Angle_Rate_1
 * - \ref SIG_Objects_Signals_C1_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C1 configuration tuple.
 */
#define MSG_Objects_Signals_C1                      0x502, 0, 7

/**
 * Message Objects_Signals_C1 id.
 */
#define ID_Objects_Signals_C1                       0x502

/**
 * Message Objects_Signals_C1 extended id bit.
 */
#define EXT_Objects_Signals_C1                      0

/**
 * Message Objects_Signals_C1 Data Length Count.
 */
#define DLC_Objects_Signals_C1                      7

/**
 * Message Objects_Signals_C1 cycle time.
 */
#define CYCLE_Objects_Signals_C1                    0

/**
 * Message Objects_Signals_C1 fast cycle time.
 */
#define FAST_Objects_Signals_C1                     0

/**
 * Initialise message Objects_Signals_C1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C1(buf) { \
	INITSIG_Objects_Signals_C1_Absolute_Speed_1(buf); \
	INITSIG_Objects_Signals_C1_OBJ_Motion_Status_1(buf); \
	INITSIG_Objects_Signals_C1_OBJ_Motion_Category_1(buf); \
	INITSIG_Objects_Signals_C1_Brake_Light_1(buf); \
	INITSIG_Objects_Signals_C1_Turn_Indicator_Right_1(buf); \
	INITSIG_Objects_Signals_C1_Turn_Indicator_Left_1(buf); \
	INITSIG_Objects_Signals_C1_Light_indicator_validity_1(buf); \
	INITSIG_Objects_Signals_C1_OBJ_Angle_Mid_1(buf); \
	INITSIG_Objects_Signals_C1_OBJ_Angle_Rate_1(buf); \
	INITSIG_Objects_Signals_C1_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A2 Message Objects_Signals_A2 (0x503)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A2_Obj_ID_2
 * - \ref SIG_Objects_Signals_A2_Object_Class_2
 * - \ref SIG_Objects_Signals_A2_OBJ_Width_2
 * - \ref SIG_Objects_Signals_A2_OBJ_Length_2
 * - \ref SIG_Objects_Signals_A2_Relative_Long_Velocity_2
 * - \ref SIG_Objects_Signals_A2_OBJ_Lane_Assignment_2
 * - \ref SIG_Objects_Signals_A2_Relative_Lat_Velocity_2
 * - \ref SIG_Objects_Signals_A2_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A2 configuration tuple.
 */
#define MSG_Objects_Signals_A2                      0x503, 0, 7

/**
 * Message Objects_Signals_A2 id.
 */
#define ID_Objects_Signals_A2                       0x503

/**
 * Message Objects_Signals_A2 extended id bit.
 */
#define EXT_Objects_Signals_A2                      0

/**
 * Message Objects_Signals_A2 Data Length Count.
 */
#define DLC_Objects_Signals_A2                      7

/**
 * Message Objects_Signals_A2 cycle time.
 */
#define CYCLE_Objects_Signals_A2                    0

/**
 * Message Objects_Signals_A2 fast cycle time.
 */
#define FAST_Objects_Signals_A2                     0

/**
 * Initialise message Objects_Signals_A2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A2(buf) { \
	INITSIG_Objects_Signals_A2_Obj_ID_2(buf); \
	INITSIG_Objects_Signals_A2_Object_Class_2(buf); \
	INITSIG_Objects_Signals_A2_OBJ_Width_2(buf); \
	INITSIG_Objects_Signals_A2_OBJ_Length_2(buf); \
	INITSIG_Objects_Signals_A2_Relative_Long_Velocity_2(buf); \
	INITSIG_Objects_Signals_A2_OBJ_Lane_Assignment_2(buf); \
	INITSIG_Objects_Signals_A2_Relative_Lat_Velocity_2(buf); \
	INITSIG_Objects_Signals_A2_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B2 Message Objects_Signals_B2 (0x504)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B2_Absolute_Long_Acc_2
 * - \ref SIG_Objects_Signals_B2_Long_Distance_2
 * - \ref SIG_Objects_Signals_B2_Lateral_Distance_2
 * - \ref SIG_Objects_Signals_B2_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B2 configuration tuple.
 */
#define MSG_Objects_Signals_B2                      0x504, 0, 5

/**
 * Message Objects_Signals_B2 id.
 */
#define ID_Objects_Signals_B2                       0x504

/**
 * Message Objects_Signals_B2 extended id bit.
 */
#define EXT_Objects_Signals_B2                      0

/**
 * Message Objects_Signals_B2 Data Length Count.
 */
#define DLC_Objects_Signals_B2                      5

/**
 * Message Objects_Signals_B2 cycle time.
 */
#define CYCLE_Objects_Signals_B2                    0

/**
 * Message Objects_Signals_B2 fast cycle time.
 */
#define FAST_Objects_Signals_B2                     0

/**
 * Initialise message Objects_Signals_B2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B2(buf) { \
	INITSIG_Objects_Signals_B2_Absolute_Long_Acc_2(buf); \
	INITSIG_Objects_Signals_B2_Long_Distance_2(buf); \
	INITSIG_Objects_Signals_B2_Lateral_Distance_2(buf); \
	INITSIG_Objects_Signals_B2_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C2 Message Objects_Signals_C2 (0x505)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C2_Absolute_Speed_2
 * - \ref SIG_Objects_Signals_C2_OBJ_Motion_Status_2
 * - \ref SIG_Objects_Signals_C2_OBJ_Motion_Category_2
 * - \ref SIG_Objects_Signals_C2_Brake_Light_2
 * - \ref SIG_Objects_Signals_C2_Turn_Indicator_Right_2
 * - \ref SIG_Objects_Signals_C2_Turn_Indicator_Left_2
 * - \ref SIG_Objects_Signals_C2_Light_indicator_validity_2
 * - \ref SIG_Objects_Signals_C2_OBJ_Angle_Mid_2
 * - \ref SIG_Objects_Signals_C2_OBJ_Angle_Rate_2
 * - \ref SIG_Objects_Signals_C2_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C2 configuration tuple.
 */
#define MSG_Objects_Signals_C2                      0x505, 0, 7

/**
 * Message Objects_Signals_C2 id.
 */
#define ID_Objects_Signals_C2                       0x505

/**
 * Message Objects_Signals_C2 extended id bit.
 */
#define EXT_Objects_Signals_C2                      0

/**
 * Message Objects_Signals_C2 Data Length Count.
 */
#define DLC_Objects_Signals_C2                      7

/**
 * Message Objects_Signals_C2 cycle time.
 */
#define CYCLE_Objects_Signals_C2                    0

/**
 * Message Objects_Signals_C2 fast cycle time.
 */
#define FAST_Objects_Signals_C2                     0

/**
 * Initialise message Objects_Signals_C2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C2(buf) { \
	INITSIG_Objects_Signals_C2_Absolute_Speed_2(buf); \
	INITSIG_Objects_Signals_C2_OBJ_Motion_Status_2(buf); \
	INITSIG_Objects_Signals_C2_OBJ_Motion_Category_2(buf); \
	INITSIG_Objects_Signals_C2_Brake_Light_2(buf); \
	INITSIG_Objects_Signals_C2_Turn_Indicator_Right_2(buf); \
	INITSIG_Objects_Signals_C2_Turn_Indicator_Left_2(buf); \
	INITSIG_Objects_Signals_C2_Light_indicator_validity_2(buf); \
	INITSIG_Objects_Signals_C2_OBJ_Angle_Mid_2(buf); \
	INITSIG_Objects_Signals_C2_OBJ_Angle_Rate_2(buf); \
	INITSIG_Objects_Signals_C2_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A3 Message Objects_Signals_A3 (0x506)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A3_Obj_ID_3
 * - \ref SIG_Objects_Signals_A3_Object_Class_3
 * - \ref SIG_Objects_Signals_A3_OBJ_Width_3
 * - \ref SIG_Objects_Signals_A3_OBJ_Length_3
 * - \ref SIG_Objects_Signals_A3_Relative_Long_Velocity_3
 * - \ref SIG_Objects_Signals_A3_OBJ_Lane_Assignment_3
 * - \ref SIG_Objects_Signals_A3_Relative_Lat_Velocity_3
 * - \ref SIG_Objects_Signals_A3_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A3 configuration tuple.
 */
#define MSG_Objects_Signals_A3                      0x506, 0, 7

/**
 * Message Objects_Signals_A3 id.
 */
#define ID_Objects_Signals_A3                       0x506

/**
 * Message Objects_Signals_A3 extended id bit.
 */
#define EXT_Objects_Signals_A3                      0

/**
 * Message Objects_Signals_A3 Data Length Count.
 */
#define DLC_Objects_Signals_A3                      7

/**
 * Message Objects_Signals_A3 cycle time.
 */
#define CYCLE_Objects_Signals_A3                    0

/**
 * Message Objects_Signals_A3 fast cycle time.
 */
#define FAST_Objects_Signals_A3                     0

/**
 * Initialise message Objects_Signals_A3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A3(buf) { \
	INITSIG_Objects_Signals_A3_Obj_ID_3(buf); \
	INITSIG_Objects_Signals_A3_Object_Class_3(buf); \
	INITSIG_Objects_Signals_A3_OBJ_Width_3(buf); \
	INITSIG_Objects_Signals_A3_OBJ_Length_3(buf); \
	INITSIG_Objects_Signals_A3_Relative_Long_Velocity_3(buf); \
	INITSIG_Objects_Signals_A3_OBJ_Lane_Assignment_3(buf); \
	INITSIG_Objects_Signals_A3_Relative_Lat_Velocity_3(buf); \
	INITSIG_Objects_Signals_A3_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B3 Message Objects_Signals_B3 (0x507)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B3_Absolute_Long_Acc_3
 * - \ref SIG_Objects_Signals_B3_Long_Distance_3
 * - \ref SIG_Objects_Signals_B3_Lateral_Distance_3
 * - \ref SIG_Objects_Signals_B3_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B3 configuration tuple.
 */
#define MSG_Objects_Signals_B3                      0x507, 0, 5

/**
 * Message Objects_Signals_B3 id.
 */
#define ID_Objects_Signals_B3                       0x507

/**
 * Message Objects_Signals_B3 extended id bit.
 */
#define EXT_Objects_Signals_B3                      0

/**
 * Message Objects_Signals_B3 Data Length Count.
 */
#define DLC_Objects_Signals_B3                      5

/**
 * Message Objects_Signals_B3 cycle time.
 */
#define CYCLE_Objects_Signals_B3                    0

/**
 * Message Objects_Signals_B3 fast cycle time.
 */
#define FAST_Objects_Signals_B3                     0

/**
 * Initialise message Objects_Signals_B3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B3(buf) { \
	INITSIG_Objects_Signals_B3_Absolute_Long_Acc_3(buf); \
	INITSIG_Objects_Signals_B3_Long_Distance_3(buf); \
	INITSIG_Objects_Signals_B3_Lateral_Distance_3(buf); \
	INITSIG_Objects_Signals_B3_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C3 Message Objects_Signals_C3 (0x508)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C3_Absolute_Speed_3
 * - \ref SIG_Objects_Signals_C3_OBJ_Motion_Status_3
 * - \ref SIG_Objects_Signals_C3_OBJ_Motion_Category_3
 * - \ref SIG_Objects_Signals_C3_Brake_Light_3
 * - \ref SIG_Objects_Signals_C3_Turn_Indicator_Right_3
 * - \ref SIG_Objects_Signals_C3_Turn_Indicator_Left_3
 * - \ref SIG_Objects_Signals_C3_Light_indicator_validity_3
 * - \ref SIG_Objects_Signals_C3_OBJ_Angle_Mid_3
 * - \ref SIG_Objects_Signals_C3_OBJ_Angle_Rate_3
 * - \ref SIG_Objects_Signals_C3_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C3 configuration tuple.
 */
#define MSG_Objects_Signals_C3                      0x508, 0, 7

/**
 * Message Objects_Signals_C3 id.
 */
#define ID_Objects_Signals_C3                       0x508

/**
 * Message Objects_Signals_C3 extended id bit.
 */
#define EXT_Objects_Signals_C3                      0

/**
 * Message Objects_Signals_C3 Data Length Count.
 */
#define DLC_Objects_Signals_C3                      7

/**
 * Message Objects_Signals_C3 cycle time.
 */
#define CYCLE_Objects_Signals_C3                    0

/**
 * Message Objects_Signals_C3 fast cycle time.
 */
#define FAST_Objects_Signals_C3                     0

/**
 * Initialise message Objects_Signals_C3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C3(buf) { \
	INITSIG_Objects_Signals_C3_Absolute_Speed_3(buf); \
	INITSIG_Objects_Signals_C3_OBJ_Motion_Status_3(buf); \
	INITSIG_Objects_Signals_C3_OBJ_Motion_Category_3(buf); \
	INITSIG_Objects_Signals_C3_Brake_Light_3(buf); \
	INITSIG_Objects_Signals_C3_Turn_Indicator_Right_3(buf); \
	INITSIG_Objects_Signals_C3_Turn_Indicator_Left_3(buf); \
	INITSIG_Objects_Signals_C3_Light_indicator_validity_3(buf); \
	INITSIG_Objects_Signals_C3_OBJ_Angle_Mid_3(buf); \
	INITSIG_Objects_Signals_C3_OBJ_Angle_Rate_3(buf); \
	INITSIG_Objects_Signals_C3_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A4 Message Objects_Signals_A4 (0x509)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A4_Obj_ID_4
 * - \ref SIG_Objects_Signals_A4_Object_Class_4
 * - \ref SIG_Objects_Signals_A4_OBJ_Width_4
 * - \ref SIG_Objects_Signals_A4_OBJ_Length_4
 * - \ref SIG_Objects_Signals_A4_Relative_Long_Velocity_4
 * - \ref SIG_Objects_Signals_A4_OBJ_Lane_Assignment_4
 * - \ref SIG_Objects_Signals_A4_Relative_Lat_Velocity_4
 * - \ref SIG_Objects_Signals_A4_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A4 configuration tuple.
 */
#define MSG_Objects_Signals_A4                      0x509, 0, 7

/**
 * Message Objects_Signals_A4 id.
 */
#define ID_Objects_Signals_A4                       0x509

/**
 * Message Objects_Signals_A4 extended id bit.
 */
#define EXT_Objects_Signals_A4                      0

/**
 * Message Objects_Signals_A4 Data Length Count.
 */
#define DLC_Objects_Signals_A4                      7

/**
 * Message Objects_Signals_A4 cycle time.
 */
#define CYCLE_Objects_Signals_A4                    0

/**
 * Message Objects_Signals_A4 fast cycle time.
 */
#define FAST_Objects_Signals_A4                     0

/**
 * Initialise message Objects_Signals_A4 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A4(buf) { \
	INITSIG_Objects_Signals_A4_Obj_ID_4(buf); \
	INITSIG_Objects_Signals_A4_Object_Class_4(buf); \
	INITSIG_Objects_Signals_A4_OBJ_Width_4(buf); \
	INITSIG_Objects_Signals_A4_OBJ_Length_4(buf); \
	INITSIG_Objects_Signals_A4_Relative_Long_Velocity_4(buf); \
	INITSIG_Objects_Signals_A4_OBJ_Lane_Assignment_4(buf); \
	INITSIG_Objects_Signals_A4_Relative_Lat_Velocity_4(buf); \
	INITSIG_Objects_Signals_A4_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B4 Message Objects_Signals_B4 (0x50a)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B4_Absolute_Long_Acc_4
 * - \ref SIG_Objects_Signals_B4_Long_Distance_4
 * - \ref SIG_Objects_Signals_B4_Lateral_Distance_4
 * - \ref SIG_Objects_Signals_B4_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B4 configuration tuple.
 */
#define MSG_Objects_Signals_B4                      0x50a, 0, 5

/**
 * Message Objects_Signals_B4 id.
 */
#define ID_Objects_Signals_B4                       0x50a

/**
 * Message Objects_Signals_B4 extended id bit.
 */
#define EXT_Objects_Signals_B4                      0

/**
 * Message Objects_Signals_B4 Data Length Count.
 */
#define DLC_Objects_Signals_B4                      5

/**
 * Message Objects_Signals_B4 cycle time.
 */
#define CYCLE_Objects_Signals_B4                    0

/**
 * Message Objects_Signals_B4 fast cycle time.
 */
#define FAST_Objects_Signals_B4                     0

/**
 * Initialise message Objects_Signals_B4 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B4(buf) { \
	INITSIG_Objects_Signals_B4_Absolute_Long_Acc_4(buf); \
	INITSIG_Objects_Signals_B4_Long_Distance_4(buf); \
	INITSIG_Objects_Signals_B4_Lateral_Distance_4(buf); \
	INITSIG_Objects_Signals_B4_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C4 Message Objects_Signals_C4 (0x50b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C4_Absolute_Speed_4
 * - \ref SIG_Objects_Signals_C4_OBJ_Motion_Status_4
 * - \ref SIG_Objects_Signals_C4_OBJ_Motion_Category_4
 * - \ref SIG_Objects_Signals_C4_Brake_Light_4
 * - \ref SIG_Objects_Signals_C4_Turn_Indicator_Right_4
 * - \ref SIG_Objects_Signals_C4_Turn_Indicator_Left_4
 * - \ref SIG_Objects_Signals_C4_Light_indicator_validity_4
 * - \ref SIG_Objects_Signals_C4_OBJ_Angle_Mid_4
 * - \ref SIG_Objects_Signals_C4_OBJ_Angle_Rate_4
 * - \ref SIG_Objects_Signals_C4_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C4 configuration tuple.
 */
#define MSG_Objects_Signals_C4                      0x50b, 0, 7

/**
 * Message Objects_Signals_C4 id.
 */
#define ID_Objects_Signals_C4                       0x50b

/**
 * Message Objects_Signals_C4 extended id bit.
 */
#define EXT_Objects_Signals_C4                      0

/**
 * Message Objects_Signals_C4 Data Length Count.
 */
#define DLC_Objects_Signals_C4                      7

/**
 * Message Objects_Signals_C4 cycle time.
 */
#define CYCLE_Objects_Signals_C4                    0

/**
 * Message Objects_Signals_C4 fast cycle time.
 */
#define FAST_Objects_Signals_C4                     0

/**
 * Initialise message Objects_Signals_C4 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C4(buf) { \
	INITSIG_Objects_Signals_C4_Absolute_Speed_4(buf); \
	INITSIG_Objects_Signals_C4_OBJ_Motion_Status_4(buf); \
	INITSIG_Objects_Signals_C4_OBJ_Motion_Category_4(buf); \
	INITSIG_Objects_Signals_C4_Brake_Light_4(buf); \
	INITSIG_Objects_Signals_C4_Turn_Indicator_Right_4(buf); \
	INITSIG_Objects_Signals_C4_Turn_Indicator_Left_4(buf); \
	INITSIG_Objects_Signals_C4_Light_indicator_validity_4(buf); \
	INITSIG_Objects_Signals_C4_OBJ_Angle_Mid_4(buf); \
	INITSIG_Objects_Signals_C4_OBJ_Angle_Rate_4(buf); \
	INITSIG_Objects_Signals_C4_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A5 Message Objects_Signals_A5 (0x50c)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A5_Obj_ID_5
 * - \ref SIG_Objects_Signals_A5_Object_Class_5
 * - \ref SIG_Objects_Signals_A5_OBJ_Width_5
 * - \ref SIG_Objects_Signals_A5_OBJ_Length_5
 * - \ref SIG_Objects_Signals_A5_Relative_Long_Velocity_5
 * - \ref SIG_Objects_Signals_A5_OBJ_Lane_Assignment_5
 * - \ref SIG_Objects_Signals_A5_Relative_Lat_Velocity_5
 * - \ref SIG_Objects_Signals_A5_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A5 configuration tuple.
 */
#define MSG_Objects_Signals_A5                      0x50c, 0, 7

/**
 * Message Objects_Signals_A5 id.
 */
#define ID_Objects_Signals_A5                       0x50c

/**
 * Message Objects_Signals_A5 extended id bit.
 */
#define EXT_Objects_Signals_A5                      0

/**
 * Message Objects_Signals_A5 Data Length Count.
 */
#define DLC_Objects_Signals_A5                      7

/**
 * Message Objects_Signals_A5 cycle time.
 */
#define CYCLE_Objects_Signals_A5                    0

/**
 * Message Objects_Signals_A5 fast cycle time.
 */
#define FAST_Objects_Signals_A5                     0

/**
 * Initialise message Objects_Signals_A5 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A5(buf) { \
	INITSIG_Objects_Signals_A5_Obj_ID_5(buf); \
	INITSIG_Objects_Signals_A5_Object_Class_5(buf); \
	INITSIG_Objects_Signals_A5_OBJ_Width_5(buf); \
	INITSIG_Objects_Signals_A5_OBJ_Length_5(buf); \
	INITSIG_Objects_Signals_A5_Relative_Long_Velocity_5(buf); \
	INITSIG_Objects_Signals_A5_OBJ_Lane_Assignment_5(buf); \
	INITSIG_Objects_Signals_A5_Relative_Lat_Velocity_5(buf); \
	INITSIG_Objects_Signals_A5_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B5 Message Objects_Signals_B5 (0x50d)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B5_Absolute_Long_Acc_5
 * - \ref SIG_Objects_Signals_B5_Long_Distance_5
 * - \ref SIG_Objects_Signals_B5_Lateral_Distance_5
 * - \ref SIG_Objects_Signals_B5_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B5 configuration tuple.
 */
#define MSG_Objects_Signals_B5                      0x50d, 0, 5

/**
 * Message Objects_Signals_B5 id.
 */
#define ID_Objects_Signals_B5                       0x50d

/**
 * Message Objects_Signals_B5 extended id bit.
 */
#define EXT_Objects_Signals_B5                      0

/**
 * Message Objects_Signals_B5 Data Length Count.
 */
#define DLC_Objects_Signals_B5                      5

/**
 * Message Objects_Signals_B5 cycle time.
 */
#define CYCLE_Objects_Signals_B5                    0

/**
 * Message Objects_Signals_B5 fast cycle time.
 */
#define FAST_Objects_Signals_B5                     0

/**
 * Initialise message Objects_Signals_B5 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B5(buf) { \
	INITSIG_Objects_Signals_B5_Absolute_Long_Acc_5(buf); \
	INITSIG_Objects_Signals_B5_Long_Distance_5(buf); \
	INITSIG_Objects_Signals_B5_Lateral_Distance_5(buf); \
	INITSIG_Objects_Signals_B5_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C5 Message Objects_Signals_C5 (0x50e)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C5_Absolute_Speed_5
 * - \ref SIG_Objects_Signals_C5_OBJ_Motion_Status_5
 * - \ref SIG_Objects_Signals_C5_OBJ_Motion_Category_5
 * - \ref SIG_Objects_Signals_C5_Brake_Light_5
 * - \ref SIG_Objects_Signals_C5_Turn_Indicator_Right_5
 * - \ref SIG_Objects_Signals_C5_Turn_Indicator_Left_5
 * - \ref SIG_Objects_Signals_C5_Light_indicator_validity_5
 * - \ref SIG_Objects_Signals_C5_OBJ_Angle_Mid_5
 * - \ref SIG_Objects_Signals_C5_OBJ_Angle_Rate_5
 * - \ref SIG_Objects_Signals_C5_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C5 configuration tuple.
 */
#define MSG_Objects_Signals_C5                      0x50e, 0, 7

/**
 * Message Objects_Signals_C5 id.
 */
#define ID_Objects_Signals_C5                       0x50e

/**
 * Message Objects_Signals_C5 extended id bit.
 */
#define EXT_Objects_Signals_C5                      0

/**
 * Message Objects_Signals_C5 Data Length Count.
 */
#define DLC_Objects_Signals_C5                      7

/**
 * Message Objects_Signals_C5 cycle time.
 */
#define CYCLE_Objects_Signals_C5                    0

/**
 * Message Objects_Signals_C5 fast cycle time.
 */
#define FAST_Objects_Signals_C5                     0

/**
 * Initialise message Objects_Signals_C5 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C5(buf) { \
	INITSIG_Objects_Signals_C5_Absolute_Speed_5(buf); \
	INITSIG_Objects_Signals_C5_OBJ_Motion_Status_5(buf); \
	INITSIG_Objects_Signals_C5_OBJ_Motion_Category_5(buf); \
	INITSIG_Objects_Signals_C5_Brake_Light_5(buf); \
	INITSIG_Objects_Signals_C5_Turn_Indicator_Right_5(buf); \
	INITSIG_Objects_Signals_C5_Turn_Indicator_Left_5(buf); \
	INITSIG_Objects_Signals_C5_Light_indicator_validity_5(buf); \
	INITSIG_Objects_Signals_C5_OBJ_Angle_Mid_5(buf); \
	INITSIG_Objects_Signals_C5_OBJ_Angle_Rate_5(buf); \
	INITSIG_Objects_Signals_C5_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A6 Message Objects_Signals_A6 (0x50f)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A6_Obj_ID_6
 * - \ref SIG_Objects_Signals_A6_Object_Class_6
 * - \ref SIG_Objects_Signals_A6_OBJ_Width_6
 * - \ref SIG_Objects_Signals_A6_OBJ_Length_6
 * - \ref SIG_Objects_Signals_A6_Relative_Long_Velocity_6
 * - \ref SIG_Objects_Signals_A6_OBJ_Lane_Assignment_6
 * - \ref SIG_Objects_Signals_A6_Relative_Lat_Velocity_6
 * - \ref SIG_Objects_Signals_A6_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A6 configuration tuple.
 */
#define MSG_Objects_Signals_A6                      0x50f, 0, 7

/**
 * Message Objects_Signals_A6 id.
 */
#define ID_Objects_Signals_A6                       0x50f

/**
 * Message Objects_Signals_A6 extended id bit.
 */
#define EXT_Objects_Signals_A6                      0

/**
 * Message Objects_Signals_A6 Data Length Count.
 */
#define DLC_Objects_Signals_A6                      7

/**
 * Message Objects_Signals_A6 cycle time.
 */
#define CYCLE_Objects_Signals_A6                    0

/**
 * Message Objects_Signals_A6 fast cycle time.
 */
#define FAST_Objects_Signals_A6                     0

/**
 * Initialise message Objects_Signals_A6 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A6(buf) { \
	INITSIG_Objects_Signals_A6_Obj_ID_6(buf); \
	INITSIG_Objects_Signals_A6_Object_Class_6(buf); \
	INITSIG_Objects_Signals_A6_OBJ_Width_6(buf); \
	INITSIG_Objects_Signals_A6_OBJ_Length_6(buf); \
	INITSIG_Objects_Signals_A6_Relative_Long_Velocity_6(buf); \
	INITSIG_Objects_Signals_A6_OBJ_Lane_Assignment_6(buf); \
	INITSIG_Objects_Signals_A6_Relative_Lat_Velocity_6(buf); \
	INITSIG_Objects_Signals_A6_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B6 Message Objects_Signals_B6 (0x510)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B6_Absolute_Long_Acc_6
 * - \ref SIG_Objects_Signals_B6_Long_Distance_6
 * - \ref SIG_Objects_Signals_B6_Lateral_Distance_6
 * - \ref SIG_Objects_Signals_B6_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B6 configuration tuple.
 */
#define MSG_Objects_Signals_B6                      0x510, 0, 5

/**
 * Message Objects_Signals_B6 id.
 */
#define ID_Objects_Signals_B6                       0x510

/**
 * Message Objects_Signals_B6 extended id bit.
 */
#define EXT_Objects_Signals_B6                      0

/**
 * Message Objects_Signals_B6 Data Length Count.
 */
#define DLC_Objects_Signals_B6                      5

/**
 * Message Objects_Signals_B6 cycle time.
 */
#define CYCLE_Objects_Signals_B6                    0

/**
 * Message Objects_Signals_B6 fast cycle time.
 */
#define FAST_Objects_Signals_B6                     0

/**
 * Initialise message Objects_Signals_B6 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B6(buf) { \
	INITSIG_Objects_Signals_B6_Absolute_Long_Acc_6(buf); \
	INITSIG_Objects_Signals_B6_Long_Distance_6(buf); \
	INITSIG_Objects_Signals_B6_Lateral_Distance_6(buf); \
	INITSIG_Objects_Signals_B6_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C6 Message Objects_Signals_C6 (0x511)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C6_Absolute_Speed_6
 * - \ref SIG_Objects_Signals_C6_OBJ_Motion_Status_6
 * - \ref SIG_Objects_Signals_C6_OBJ_Motion_Category_6
 * - \ref SIG_Objects_Signals_C6_Brake_Light_6
 * - \ref SIG_Objects_Signals_C6_Turn_Indicator_Right_6
 * - \ref SIG_Objects_Signals_C6_Turn_Indicator_Left_6
 * - \ref SIG_Objects_Signals_C6_Light_indicator_validity_6
 * - \ref SIG_Objects_Signals_C6_OBJ_Angle_Mid_6
 * - \ref SIG_Objects_Signals_C6_OBJ_Angle_Rate_6
 * - \ref SIG_Objects_Signals_C6_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C6 configuration tuple.
 */
#define MSG_Objects_Signals_C6                      0x511, 0, 7

/**
 * Message Objects_Signals_C6 id.
 */
#define ID_Objects_Signals_C6                       0x511

/**
 * Message Objects_Signals_C6 extended id bit.
 */
#define EXT_Objects_Signals_C6                      0

/**
 * Message Objects_Signals_C6 Data Length Count.
 */
#define DLC_Objects_Signals_C6                      7

/**
 * Message Objects_Signals_C6 cycle time.
 */
#define CYCLE_Objects_Signals_C6                    0

/**
 * Message Objects_Signals_C6 fast cycle time.
 */
#define FAST_Objects_Signals_C6                     0

/**
 * Initialise message Objects_Signals_C6 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C6(buf) { \
	INITSIG_Objects_Signals_C6_Absolute_Speed_6(buf); \
	INITSIG_Objects_Signals_C6_OBJ_Motion_Status_6(buf); \
	INITSIG_Objects_Signals_C6_OBJ_Motion_Category_6(buf); \
	INITSIG_Objects_Signals_C6_Brake_Light_6(buf); \
	INITSIG_Objects_Signals_C6_Turn_Indicator_Right_6(buf); \
	INITSIG_Objects_Signals_C6_Turn_Indicator_Left_6(buf); \
	INITSIG_Objects_Signals_C6_Light_indicator_validity_6(buf); \
	INITSIG_Objects_Signals_C6_OBJ_Angle_Mid_6(buf); \
	INITSIG_Objects_Signals_C6_OBJ_Angle_Rate_6(buf); \
	INITSIG_Objects_Signals_C6_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A7 Message Objects_Signals_A7 (0x512)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A7_Obj_ID_7
 * - \ref SIG_Objects_Signals_A7_Object_Class_7
 * - \ref SIG_Objects_Signals_A7_OBJ_Width_7
 * - \ref SIG_Objects_Signals_A7_OBJ_Length_7
 * - \ref SIG_Objects_Signals_A7_Relative_Long_Velocity_7
 * - \ref SIG_Objects_Signals_A7_OBJ_Lane_Assignment_7
 * - \ref SIG_Objects_Signals_A7_Relative_Lat_Velocity_7
 * - \ref SIG_Objects_Signals_A7_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A7 configuration tuple.
 */
#define MSG_Objects_Signals_A7                      0x512, 0, 7

/**
 * Message Objects_Signals_A7 id.
 */
#define ID_Objects_Signals_A7                       0x512

/**
 * Message Objects_Signals_A7 extended id bit.
 */
#define EXT_Objects_Signals_A7                      0

/**
 * Message Objects_Signals_A7 Data Length Count.
 */
#define DLC_Objects_Signals_A7                      7

/**
 * Message Objects_Signals_A7 cycle time.
 */
#define CYCLE_Objects_Signals_A7                    0

/**
 * Message Objects_Signals_A7 fast cycle time.
 */
#define FAST_Objects_Signals_A7                     0

/**
 * Initialise message Objects_Signals_A7 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A7(buf) { \
	INITSIG_Objects_Signals_A7_Obj_ID_7(buf); \
	INITSIG_Objects_Signals_A7_Object_Class_7(buf); \
	INITSIG_Objects_Signals_A7_OBJ_Width_7(buf); \
	INITSIG_Objects_Signals_A7_OBJ_Length_7(buf); \
	INITSIG_Objects_Signals_A7_Relative_Long_Velocity_7(buf); \
	INITSIG_Objects_Signals_A7_OBJ_Lane_Assignment_7(buf); \
	INITSIG_Objects_Signals_A7_Relative_Lat_Velocity_7(buf); \
	INITSIG_Objects_Signals_A7_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B7 Message Objects_Signals_B7 (0x513)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B7_Absolute_Long_Acc_7
 * - \ref SIG_Objects_Signals_B7_Long_Distance_7
 * - \ref SIG_Objects_Signals_B7_Lateral_Distance_7
 * - \ref SIG_Objects_Signals_B7_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B7 configuration tuple.
 */
#define MSG_Objects_Signals_B7                      0x513, 0, 5

/**
 * Message Objects_Signals_B7 id.
 */
#define ID_Objects_Signals_B7                       0x513

/**
 * Message Objects_Signals_B7 extended id bit.
 */
#define EXT_Objects_Signals_B7                      0

/**
 * Message Objects_Signals_B7 Data Length Count.
 */
#define DLC_Objects_Signals_B7                      5

/**
 * Message Objects_Signals_B7 cycle time.
 */
#define CYCLE_Objects_Signals_B7                    0

/**
 * Message Objects_Signals_B7 fast cycle time.
 */
#define FAST_Objects_Signals_B7                     0

/**
 * Initialise message Objects_Signals_B7 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B7(buf) { \
	INITSIG_Objects_Signals_B7_Absolute_Long_Acc_7(buf); \
	INITSIG_Objects_Signals_B7_Long_Distance_7(buf); \
	INITSIG_Objects_Signals_B7_Lateral_Distance_7(buf); \
	INITSIG_Objects_Signals_B7_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C7 Message Objects_Signals_C7 (0x514)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C7_Absolute_Speed_7
 * - \ref SIG_Objects_Signals_C7_OBJ_Motion_Status_7
 * - \ref SIG_Objects_Signals_C7_OBJ_Motion_Category_7
 * - \ref SIG_Objects_Signals_C7_Brake_Light_7
 * - \ref SIG_Objects_Signals_C7_Turn_Indicator_Right_7
 * - \ref SIG_Objects_Signals_C7_Turn_Indicator_Left_7
 * - \ref SIG_Objects_Signals_C7_Light_indicator_validity_7
 * - \ref SIG_Objects_Signals_C7_OBJ_Angle_Mid_7
 * - \ref SIG_Objects_Signals_C7_OBJ_Angle_Rate_7
 * - \ref SIG_Objects_Signals_C7_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C7 configuration tuple.
 */
#define MSG_Objects_Signals_C7                      0x514, 0, 7

/**
 * Message Objects_Signals_C7 id.
 */
#define ID_Objects_Signals_C7                       0x514

/**
 * Message Objects_Signals_C7 extended id bit.
 */
#define EXT_Objects_Signals_C7                      0

/**
 * Message Objects_Signals_C7 Data Length Count.
 */
#define DLC_Objects_Signals_C7                      7

/**
 * Message Objects_Signals_C7 cycle time.
 */
#define CYCLE_Objects_Signals_C7                    0

/**
 * Message Objects_Signals_C7 fast cycle time.
 */
#define FAST_Objects_Signals_C7                     0

/**
 * Initialise message Objects_Signals_C7 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C7(buf) { \
	INITSIG_Objects_Signals_C7_Absolute_Speed_7(buf); \
	INITSIG_Objects_Signals_C7_OBJ_Motion_Status_7(buf); \
	INITSIG_Objects_Signals_C7_OBJ_Motion_Category_7(buf); \
	INITSIG_Objects_Signals_C7_Brake_Light_7(buf); \
	INITSIG_Objects_Signals_C7_Turn_Indicator_Right_7(buf); \
	INITSIG_Objects_Signals_C7_Turn_Indicator_Left_7(buf); \
	INITSIG_Objects_Signals_C7_Light_indicator_validity_7(buf); \
	INITSIG_Objects_Signals_C7_OBJ_Angle_Mid_7(buf); \
	INITSIG_Objects_Signals_C7_OBJ_Angle_Rate_7(buf); \
	INITSIG_Objects_Signals_C7_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A8 Message Objects_Signals_A8 (0x515)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A8_Obj_ID_8
 * - \ref SIG_Objects_Signals_A8_Object_Class_8
 * - \ref SIG_Objects_Signals_A8_OBJ_Width_8
 * - \ref SIG_Objects_Signals_A8_OBJ_Length_8
 * - \ref SIG_Objects_Signals_A8_Relative_Long_Velocity_8
 * - \ref SIG_Objects_Signals_A8_OBJ_Lane_Assignment_8
 * - \ref SIG_Objects_Signals_A8_Relative_Lat_Velocity_8
 * - \ref SIG_Objects_Signals_A8_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A8 configuration tuple.
 */
#define MSG_Objects_Signals_A8                      0x515, 0, 7

/**
 * Message Objects_Signals_A8 id.
 */
#define ID_Objects_Signals_A8                       0x515

/**
 * Message Objects_Signals_A8 extended id bit.
 */
#define EXT_Objects_Signals_A8                      0

/**
 * Message Objects_Signals_A8 Data Length Count.
 */
#define DLC_Objects_Signals_A8                      7

/**
 * Message Objects_Signals_A8 cycle time.
 */
#define CYCLE_Objects_Signals_A8                    0

/**
 * Message Objects_Signals_A8 fast cycle time.
 */
#define FAST_Objects_Signals_A8                     0

/**
 * Initialise message Objects_Signals_A8 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A8(buf) { \
	INITSIG_Objects_Signals_A8_Obj_ID_8(buf); \
	INITSIG_Objects_Signals_A8_Object_Class_8(buf); \
	INITSIG_Objects_Signals_A8_OBJ_Width_8(buf); \
	INITSIG_Objects_Signals_A8_OBJ_Length_8(buf); \
	INITSIG_Objects_Signals_A8_Relative_Long_Velocity_8(buf); \
	INITSIG_Objects_Signals_A8_OBJ_Lane_Assignment_8(buf); \
	INITSIG_Objects_Signals_A8_Relative_Lat_Velocity_8(buf); \
	INITSIG_Objects_Signals_A8_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B8 Message Objects_Signals_B8 (0x516)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B8_Absolute_Long_Acc_8
 * - \ref SIG_Objects_Signals_B8_Long_Distance_8
 * - \ref SIG_Objects_Signals_B8_Lateral_Distance_8
 * - \ref SIG_Objects_Signals_B8_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B8 configuration tuple.
 */
#define MSG_Objects_Signals_B8                      0x516, 0, 5

/**
 * Message Objects_Signals_B8 id.
 */
#define ID_Objects_Signals_B8                       0x516

/**
 * Message Objects_Signals_B8 extended id bit.
 */
#define EXT_Objects_Signals_B8                      0

/**
 * Message Objects_Signals_B8 Data Length Count.
 */
#define DLC_Objects_Signals_B8                      5

/**
 * Message Objects_Signals_B8 cycle time.
 */
#define CYCLE_Objects_Signals_B8                    0

/**
 * Message Objects_Signals_B8 fast cycle time.
 */
#define FAST_Objects_Signals_B8                     0

/**
 * Initialise message Objects_Signals_B8 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B8(buf) { \
	INITSIG_Objects_Signals_B8_Absolute_Long_Acc_8(buf); \
	INITSIG_Objects_Signals_B8_Long_Distance_8(buf); \
	INITSIG_Objects_Signals_B8_Lateral_Distance_8(buf); \
	INITSIG_Objects_Signals_B8_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C8 Message Objects_Signals_C8 (0x517)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C8_Absolute_Speed_8
 * - \ref SIG_Objects_Signals_C8_OBJ_Motion_Status_8
 * - \ref SIG_Objects_Signals_C8_OBJ_Motion_Category_8
 * - \ref SIG_Objects_Signals_C8_Brake_Light_8
 * - \ref SIG_Objects_Signals_C8_Turn_Indicator_Right_8
 * - \ref SIG_Objects_Signals_C8_Turn_Indicator_Left_8
 * - \ref SIG_Objects_Signals_C8_Light_indicator_validity_8
 * - \ref SIG_Objects_Signals_C8_OBJ_Angle_Mid_8
 * - \ref SIG_Objects_Signals_C8_OBJ_Angle_Rate_8
 * - \ref SIG_Objects_Signals_C8_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C8 configuration tuple.
 */
#define MSG_Objects_Signals_C8                      0x517, 0, 7

/**
 * Message Objects_Signals_C8 id.
 */
#define ID_Objects_Signals_C8                       0x517

/**
 * Message Objects_Signals_C8 extended id bit.
 */
#define EXT_Objects_Signals_C8                      0

/**
 * Message Objects_Signals_C8 Data Length Count.
 */
#define DLC_Objects_Signals_C8                      7

/**
 * Message Objects_Signals_C8 cycle time.
 */
#define CYCLE_Objects_Signals_C8                    0

/**
 * Message Objects_Signals_C8 fast cycle time.
 */
#define FAST_Objects_Signals_C8                     0

/**
 * Initialise message Objects_Signals_C8 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C8(buf) { \
	INITSIG_Objects_Signals_C8_Absolute_Speed_8(buf); \
	INITSIG_Objects_Signals_C8_OBJ_Motion_Status_8(buf); \
	INITSIG_Objects_Signals_C8_OBJ_Motion_Category_8(buf); \
	INITSIG_Objects_Signals_C8_Brake_Light_8(buf); \
	INITSIG_Objects_Signals_C8_Turn_Indicator_Right_8(buf); \
	INITSIG_Objects_Signals_C8_Turn_Indicator_Left_8(buf); \
	INITSIG_Objects_Signals_C8_Light_indicator_validity_8(buf); \
	INITSIG_Objects_Signals_C8_OBJ_Angle_Mid_8(buf); \
	INITSIG_Objects_Signals_C8_OBJ_Angle_Rate_8(buf); \
	INITSIG_Objects_Signals_C8_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A9 Message Objects_Signals_A9 (0x518)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A9_Obj_ID_9
 * - \ref SIG_Objects_Signals_A9_Object_Class_9
 * - \ref SIG_Objects_Signals_A9_OBJ_Width_9
 * - \ref SIG_Objects_Signals_A9_OBJ_Length_9
 * - \ref SIG_Objects_Signals_A9_Relative_Long_Velocity_9
 * - \ref SIG_Objects_Signals_A9_OBJ_Lane_Assignment_9
 * - \ref SIG_Objects_Signals_A9_Relative_Lat_Velocity_9
 * - \ref SIG_Objects_Signals_A9_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A9 configuration tuple.
 */
#define MSG_Objects_Signals_A9                      0x518, 0, 7

/**
 * Message Objects_Signals_A9 id.
 */
#define ID_Objects_Signals_A9                       0x518

/**
 * Message Objects_Signals_A9 extended id bit.
 */
#define EXT_Objects_Signals_A9                      0

/**
 * Message Objects_Signals_A9 Data Length Count.
 */
#define DLC_Objects_Signals_A9                      7

/**
 * Message Objects_Signals_A9 cycle time.
 */
#define CYCLE_Objects_Signals_A9                    0

/**
 * Message Objects_Signals_A9 fast cycle time.
 */
#define FAST_Objects_Signals_A9                     0

/**
 * Initialise message Objects_Signals_A9 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A9(buf) { \
	INITSIG_Objects_Signals_A9_Obj_ID_9(buf); \
	INITSIG_Objects_Signals_A9_Object_Class_9(buf); \
	INITSIG_Objects_Signals_A9_OBJ_Width_9(buf); \
	INITSIG_Objects_Signals_A9_OBJ_Length_9(buf); \
	INITSIG_Objects_Signals_A9_Relative_Long_Velocity_9(buf); \
	INITSIG_Objects_Signals_A9_OBJ_Lane_Assignment_9(buf); \
	INITSIG_Objects_Signals_A9_Relative_Lat_Velocity_9(buf); \
	INITSIG_Objects_Signals_A9_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B9 Message Objects_Signals_B9 (0x519)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B9_Absolute_Long_Acc_9
 * - \ref SIG_Objects_Signals_B9_Long_Distance_9
 * - \ref SIG_Objects_Signals_B9_Lateral_Distance_9
 * - \ref SIG_Objects_Signals_B9_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B9 configuration tuple.
 */
#define MSG_Objects_Signals_B9                      0x519, 0, 5

/**
 * Message Objects_Signals_B9 id.
 */
#define ID_Objects_Signals_B9                       0x519

/**
 * Message Objects_Signals_B9 extended id bit.
 */
#define EXT_Objects_Signals_B9                      0

/**
 * Message Objects_Signals_B9 Data Length Count.
 */
#define DLC_Objects_Signals_B9                      5

/**
 * Message Objects_Signals_B9 cycle time.
 */
#define CYCLE_Objects_Signals_B9                    0

/**
 * Message Objects_Signals_B9 fast cycle time.
 */
#define FAST_Objects_Signals_B9                     0

/**
 * Initialise message Objects_Signals_B9 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B9(buf) { \
	INITSIG_Objects_Signals_B9_Absolute_Long_Acc_9(buf); \
	INITSIG_Objects_Signals_B9_Long_Distance_9(buf); \
	INITSIG_Objects_Signals_B9_Lateral_Distance_9(buf); \
	INITSIG_Objects_Signals_B9_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C9 Message Objects_Signals_C9 (0x51a)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C9_Absolute_Speed_9
 * - \ref SIG_Objects_Signals_C9_OBJ_Motion_Status_9
 * - \ref SIG_Objects_Signals_C9_OBJ_Motion_Category_9
 * - \ref SIG_Objects_Signals_C9_Brake_Light_9
 * - \ref SIG_Objects_Signals_C9_Turn_Indicator_Right_9
 * - \ref SIG_Objects_Signals_C9_Turn_Indicator_Left_9
 * - \ref SIG_Objects_Signals_C9_Light_indicator_validity_9
 * - \ref SIG_Objects_Signals_C9_OBJ_Angle_Mid_9
 * - \ref SIG_Objects_Signals_C9_OBJ_Angle_Rate_9
 * - \ref SIG_Objects_Signals_C9_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C9 configuration tuple.
 */
#define MSG_Objects_Signals_C9                      0x51a, 0, 7

/**
 * Message Objects_Signals_C9 id.
 */
#define ID_Objects_Signals_C9                       0x51a

/**
 * Message Objects_Signals_C9 extended id bit.
 */
#define EXT_Objects_Signals_C9                      0

/**
 * Message Objects_Signals_C9 Data Length Count.
 */
#define DLC_Objects_Signals_C9                      7

/**
 * Message Objects_Signals_C9 cycle time.
 */
#define CYCLE_Objects_Signals_C9                    0

/**
 * Message Objects_Signals_C9 fast cycle time.
 */
#define FAST_Objects_Signals_C9                     0

/**
 * Initialise message Objects_Signals_C9 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C9(buf) { \
	INITSIG_Objects_Signals_C9_Absolute_Speed_9(buf); \
	INITSIG_Objects_Signals_C9_OBJ_Motion_Status_9(buf); \
	INITSIG_Objects_Signals_C9_OBJ_Motion_Category_9(buf); \
	INITSIG_Objects_Signals_C9_Brake_Light_9(buf); \
	INITSIG_Objects_Signals_C9_Turn_Indicator_Right_9(buf); \
	INITSIG_Objects_Signals_C9_Turn_Indicator_Left_9(buf); \
	INITSIG_Objects_Signals_C9_Light_indicator_validity_9(buf); \
	INITSIG_Objects_Signals_C9_OBJ_Angle_Mid_9(buf); \
	INITSIG_Objects_Signals_C9_OBJ_Angle_Rate_9(buf); \
	INITSIG_Objects_Signals_C9_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A10 Message Objects_Signals_A10 (0x51b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A10_Obj_ID_10
 * - \ref SIG_Objects_Signals_A10_Object_Class_10
 * - \ref SIG_Objects_Signals_A10_OBJ_Width_10
 * - \ref SIG_Objects_Signals_A10_OBJ_Length_10
 * - \ref SIG_Objects_Signals_A10_Relative_Long_Velocity_10
 * - \ref SIG_Objects_Signals_A10_OBJ_Lane_Assignment_10
 * - \ref SIG_Objects_Signals_A10_Relative_Lat_Velocity_10
 * - \ref SIG_Objects_Signals_A10_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A10 configuration tuple.
 */
#define MSG_Objects_Signals_A10                     0x51b, 0, 7

/**
 * Message Objects_Signals_A10 id.
 */
#define ID_Objects_Signals_A10                      0x51b

/**
 * Message Objects_Signals_A10 extended id bit.
 */
#define EXT_Objects_Signals_A10                     0

/**
 * Message Objects_Signals_A10 Data Length Count.
 */
#define DLC_Objects_Signals_A10                     7

/**
 * Message Objects_Signals_A10 cycle time.
 */
#define CYCLE_Objects_Signals_A10                   0

/**
 * Message Objects_Signals_A10 fast cycle time.
 */
#define FAST_Objects_Signals_A10                    0

/**
 * Initialise message Objects_Signals_A10 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A10(buf) { \
	INITSIG_Objects_Signals_A10_Obj_ID_10(buf); \
	INITSIG_Objects_Signals_A10_Object_Class_10(buf); \
	INITSIG_Objects_Signals_A10_OBJ_Width_10(buf); \
	INITSIG_Objects_Signals_A10_OBJ_Length_10(buf); \
	INITSIG_Objects_Signals_A10_Relative_Long_Velocity_10(buf); \
	INITSIG_Objects_Signals_A10_OBJ_Lane_Assignment_10(buf); \
	INITSIG_Objects_Signals_A10_Relative_Lat_Velocity_10(buf); \
	INITSIG_Objects_Signals_A10_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B10 Message Objects_Signals_B10 (0x51c)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B10_Absolute_Long_Acc_10
 * - \ref SIG_Objects_Signals_B10_Long_Distance_10
 * - \ref SIG_Objects_Signals_B10_Lateral_Distance_10
 * - \ref SIG_Objects_Signals_B10_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B10 configuration tuple.
 */
#define MSG_Objects_Signals_B10                     0x51c, 0, 5

/**
 * Message Objects_Signals_B10 id.
 */
#define ID_Objects_Signals_B10                      0x51c

/**
 * Message Objects_Signals_B10 extended id bit.
 */
#define EXT_Objects_Signals_B10                     0

/**
 * Message Objects_Signals_B10 Data Length Count.
 */
#define DLC_Objects_Signals_B10                     5

/**
 * Message Objects_Signals_B10 cycle time.
 */
#define CYCLE_Objects_Signals_B10                   0

/**
 * Message Objects_Signals_B10 fast cycle time.
 */
#define FAST_Objects_Signals_B10                    0

/**
 * Initialise message Objects_Signals_B10 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B10(buf) { \
	INITSIG_Objects_Signals_B10_Absolute_Long_Acc_10(buf); \
	INITSIG_Objects_Signals_B10_Long_Distance_10(buf); \
	INITSIG_Objects_Signals_B10_Lateral_Distance_10(buf); \
	INITSIG_Objects_Signals_B10_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C10 Message Objects_Signals_C10 (0x51d)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C10_Absolute_Speed_10
 * - \ref SIG_Objects_Signals_C10_OBJ_Motion_Status_10
 * - \ref SIG_Objects_Signals_C10_OBJ_Motion_Category_10
 * - \ref SIG_Objects_Signals_C10_Brake_Light_10
 * - \ref SIG_Objects_Signals_C10_Turn_Indicator_Right_10
 * - \ref SIG_Objects_Signals_C10_Turn_Indicator_Left_10
 * - \ref SIG_Objects_Signals_C10_Light_indicator_validity_10
 * - \ref SIG_Objects_Signals_C10_OBJ_Angle_Mid_10
 * - \ref SIG_Objects_Signals_C10_OBJ_Angle_Rate_10
 * - \ref SIG_Objects_Signals_C10_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C10 configuration tuple.
 */
#define MSG_Objects_Signals_C10                     0x51d, 0, 7

/**
 * Message Objects_Signals_C10 id.
 */
#define ID_Objects_Signals_C10                      0x51d

/**
 * Message Objects_Signals_C10 extended id bit.
 */
#define EXT_Objects_Signals_C10                     0

/**
 * Message Objects_Signals_C10 Data Length Count.
 */
#define DLC_Objects_Signals_C10                     7

/**
 * Message Objects_Signals_C10 cycle time.
 */
#define CYCLE_Objects_Signals_C10                   0

/**
 * Message Objects_Signals_C10 fast cycle time.
 */
#define FAST_Objects_Signals_C10                    0

/**
 * Initialise message Objects_Signals_C10 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C10(buf) { \
	INITSIG_Objects_Signals_C10_Absolute_Speed_10(buf); \
	INITSIG_Objects_Signals_C10_OBJ_Motion_Status_10(buf); \
	INITSIG_Objects_Signals_C10_OBJ_Motion_Category_10(buf); \
	INITSIG_Objects_Signals_C10_Brake_Light_10(buf); \
	INITSIG_Objects_Signals_C10_Turn_Indicator_Right_10(buf); \
	INITSIG_Objects_Signals_C10_Turn_Indicator_Left_10(buf); \
	INITSIG_Objects_Signals_C10_Light_indicator_validity_10(buf); \
	INITSIG_Objects_Signals_C10_OBJ_Angle_Mid_10(buf); \
	INITSIG_Objects_Signals_C10_OBJ_Angle_Rate_10(buf); \
	INITSIG_Objects_Signals_C10_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A11 Message Objects_Signals_A11 (0x51e)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A11_Obj_ID_11
 * - \ref SIG_Objects_Signals_A11_Object_Class_11
 * - \ref SIG_Objects_Signals_A11_OBJ_Width_11
 * - \ref SIG_Objects_Signals_A11_OBJ_Length_11
 * - \ref SIG_Objects_Signals_A11_Relative_Long_Velocity_11
 * - \ref SIG_Objects_Signals_A11_OBJ_Lane_Assignment_11
 * - \ref SIG_Objects_Signals_A11_Relative_Lat_Velocity_11
 * - \ref SIG_Objects_Signals_A11_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A11 configuration tuple.
 */
#define MSG_Objects_Signals_A11                     0x51e, 0, 7

/**
 * Message Objects_Signals_A11 id.
 */
#define ID_Objects_Signals_A11                      0x51e

/**
 * Message Objects_Signals_A11 extended id bit.
 */
#define EXT_Objects_Signals_A11                     0

/**
 * Message Objects_Signals_A11 Data Length Count.
 */
#define DLC_Objects_Signals_A11                     7

/**
 * Message Objects_Signals_A11 cycle time.
 */
#define CYCLE_Objects_Signals_A11                   0

/**
 * Message Objects_Signals_A11 fast cycle time.
 */
#define FAST_Objects_Signals_A11                    0

/**
 * Initialise message Objects_Signals_A11 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A11(buf) { \
	INITSIG_Objects_Signals_A11_Obj_ID_11(buf); \
	INITSIG_Objects_Signals_A11_Object_Class_11(buf); \
	INITSIG_Objects_Signals_A11_OBJ_Width_11(buf); \
	INITSIG_Objects_Signals_A11_OBJ_Length_11(buf); \
	INITSIG_Objects_Signals_A11_Relative_Long_Velocity_11(buf); \
	INITSIG_Objects_Signals_A11_OBJ_Lane_Assignment_11(buf); \
	INITSIG_Objects_Signals_A11_Relative_Lat_Velocity_11(buf); \
	INITSIG_Objects_Signals_A11_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B11 Message Objects_Signals_B11 (0x51f)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B11_Absolute_Long_Acc_11
 * - \ref SIG_Objects_Signals_B11_Long_Distance_11
 * - \ref SIG_Objects_Signals_B11_Lateral_Distance_11
 * - \ref SIG_Objects_Signals_B11_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B11 configuration tuple.
 */
#define MSG_Objects_Signals_B11                     0x51f, 0, 5

/**
 * Message Objects_Signals_B11 id.
 */
#define ID_Objects_Signals_B11                      0x51f

/**
 * Message Objects_Signals_B11 extended id bit.
 */
#define EXT_Objects_Signals_B11                     0

/**
 * Message Objects_Signals_B11 Data Length Count.
 */
#define DLC_Objects_Signals_B11                     5

/**
 * Message Objects_Signals_B11 cycle time.
 */
#define CYCLE_Objects_Signals_B11                   0

/**
 * Message Objects_Signals_B11 fast cycle time.
 */
#define FAST_Objects_Signals_B11                    0

/**
 * Initialise message Objects_Signals_B11 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B11(buf) { \
	INITSIG_Objects_Signals_B11_Absolute_Long_Acc_11(buf); \
	INITSIG_Objects_Signals_B11_Long_Distance_11(buf); \
	INITSIG_Objects_Signals_B11_Lateral_Distance_11(buf); \
	INITSIG_Objects_Signals_B11_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C11 Message Objects_Signals_C11 (0x520)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C11_Absolute_Speed_11
 * - \ref SIG_Objects_Signals_C11_OBJ_Motion_Status_11
 * - \ref SIG_Objects_Signals_C11_OBJ_Motion_Category_11
 * - \ref SIG_Objects_Signals_C11_Brake_Light_11
 * - \ref SIG_Objects_Signals_C11_Turn_Indicator_Right_11
 * - \ref SIG_Objects_Signals_C11_Turn_Indicator_Left_11
 * - \ref SIG_Objects_Signals_C11_Light_indicator_validity_11
 * - \ref SIG_Objects_Signals_C11_OBJ_Angle_Mid_11
 * - \ref SIG_Objects_Signals_C11_OBJ_Angle_Rate_11
 * - \ref SIG_Objects_Signals_C11_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C11 configuration tuple.
 */
#define MSG_Objects_Signals_C11                     0x520, 0, 7

/**
 * Message Objects_Signals_C11 id.
 */
#define ID_Objects_Signals_C11                      0x520

/**
 * Message Objects_Signals_C11 extended id bit.
 */
#define EXT_Objects_Signals_C11                     0

/**
 * Message Objects_Signals_C11 Data Length Count.
 */
#define DLC_Objects_Signals_C11                     7

/**
 * Message Objects_Signals_C11 cycle time.
 */
#define CYCLE_Objects_Signals_C11                   0

/**
 * Message Objects_Signals_C11 fast cycle time.
 */
#define FAST_Objects_Signals_C11                    0

/**
 * Initialise message Objects_Signals_C11 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C11(buf) { \
	INITSIG_Objects_Signals_C11_Absolute_Speed_11(buf); \
	INITSIG_Objects_Signals_C11_OBJ_Motion_Status_11(buf); \
	INITSIG_Objects_Signals_C11_OBJ_Motion_Category_11(buf); \
	INITSIG_Objects_Signals_C11_Brake_Light_11(buf); \
	INITSIG_Objects_Signals_C11_Turn_Indicator_Right_11(buf); \
	INITSIG_Objects_Signals_C11_Turn_Indicator_Left_11(buf); \
	INITSIG_Objects_Signals_C11_Light_indicator_validity_11(buf); \
	INITSIG_Objects_Signals_C11_OBJ_Angle_Mid_11(buf); \
	INITSIG_Objects_Signals_C11_OBJ_Angle_Rate_11(buf); \
	INITSIG_Objects_Signals_C11_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_A12 Message Objects_Signals_A12 (0x521)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_A12_Obj_ID_12
 * - \ref SIG_Objects_Signals_A12_Object_Class_12
 * - \ref SIG_Objects_Signals_A12_OBJ_Width_12
 * - \ref SIG_Objects_Signals_A12_OBJ_Length_12
 * - \ref SIG_Objects_Signals_A12_Relative_Long_Velocity_12
 * - \ref SIG_Objects_Signals_A12_OBJ_Lane_Assignment_12
 * - \ref SIG_Objects_Signals_A12_Relative_Lat_Velocity_12
 * - \ref SIG_Objects_Signals_A12_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_A12 configuration tuple.
 */
#define MSG_Objects_Signals_A12                     0x521, 0, 7

/**
 * Message Objects_Signals_A12 id.
 */
#define ID_Objects_Signals_A12                      0x521

/**
 * Message Objects_Signals_A12 extended id bit.
 */
#define EXT_Objects_Signals_A12                     0

/**
 * Message Objects_Signals_A12 Data Length Count.
 */
#define DLC_Objects_Signals_A12                     7

/**
 * Message Objects_Signals_A12 cycle time.
 */
#define CYCLE_Objects_Signals_A12                   0

/**
 * Message Objects_Signals_A12 fast cycle time.
 */
#define FAST_Objects_Signals_A12                    0

/**
 * Initialise message Objects_Signals_A12 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_A12(buf) { \
	INITSIG_Objects_Signals_A12_Obj_ID_12(buf); \
	INITSIG_Objects_Signals_A12_Object_Class_12(buf); \
	INITSIG_Objects_Signals_A12_OBJ_Width_12(buf); \
	INITSIG_Objects_Signals_A12_OBJ_Length_12(buf); \
	INITSIG_Objects_Signals_A12_Relative_Long_Velocity_12(buf); \
	INITSIG_Objects_Signals_A12_OBJ_Lane_Assignment_12(buf); \
	INITSIG_Objects_Signals_A12_Relative_Lat_Velocity_12(buf); \
	INITSIG_Objects_Signals_A12_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_B12 Message Objects_Signals_B12 (0x522)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_B12_Absolute_Long_Acc_12
 * - \ref SIG_Objects_Signals_B12_Long_Distance_12
 * - \ref SIG_Objects_Signals_B12_Lateral_Distance_12
 * - \ref SIG_Objects_Signals_B12_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_B12 configuration tuple.
 */
#define MSG_Objects_Signals_B12                     0x522, 0, 5

/**
 * Message Objects_Signals_B12 id.
 */
#define ID_Objects_Signals_B12                      0x522

/**
 * Message Objects_Signals_B12 extended id bit.
 */
#define EXT_Objects_Signals_B12                     0

/**
 * Message Objects_Signals_B12 Data Length Count.
 */
#define DLC_Objects_Signals_B12                     5

/**
 * Message Objects_Signals_B12 cycle time.
 */
#define CYCLE_Objects_Signals_B12                   0

/**
 * Message Objects_Signals_B12 fast cycle time.
 */
#define FAST_Objects_Signals_B12                    0

/**
 * Initialise message Objects_Signals_B12 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_B12(buf) { \
	INITSIG_Objects_Signals_B12_Absolute_Long_Acc_12(buf); \
	INITSIG_Objects_Signals_B12_Long_Distance_12(buf); \
	INITSIG_Objects_Signals_B12_Lateral_Distance_12(buf); \
	INITSIG_Objects_Signals_B12_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Objects_Signals_C12 Message Objects_Signals_C12 (0x523)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Objects_Signals_C12_Absolute_Speed_12
 * - \ref SIG_Objects_Signals_C12_OBJ_Motion_Status_12
 * - \ref SIG_Objects_Signals_C12_OBJ_Motion_Category_12
 * - \ref SIG_Objects_Signals_C12_Brake_Light_12
 * - \ref SIG_Objects_Signals_C12_Turn_Indicator_Right_12
 * - \ref SIG_Objects_Signals_C12_Turn_Indicator_Left_12
 * - \ref SIG_Objects_Signals_C12_Light_indicator_validity_12
 * - \ref SIG_Objects_Signals_C12_OBJ_Angle_Mid_12
 * - \ref SIG_Objects_Signals_C12_OBJ_Angle_Rate_12
 * - \ref SIG_Objects_Signals_C12_Reserved
 *
 * @{
 */

/**
 * Message Objects_Signals_C12 configuration tuple.
 */
#define MSG_Objects_Signals_C12                     0x523, 0, 7

/**
 * Message Objects_Signals_C12 id.
 */
#define ID_Objects_Signals_C12                      0x523

/**
 * Message Objects_Signals_C12 extended id bit.
 */
#define EXT_Objects_Signals_C12                     0

/**
 * Message Objects_Signals_C12 Data Length Count.
 */
#define DLC_Objects_Signals_C12                     7

/**
 * Message Objects_Signals_C12 cycle time.
 */
#define CYCLE_Objects_Signals_C12                   0

/**
 * Message Objects_Signals_C12 fast cycle time.
 */
#define FAST_Objects_Signals_C12                    0

/**
 * Initialise message Objects_Signals_C12 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Objects_Signals_C12(buf) { \
	INITSIG_Objects_Signals_C12_Absolute_Speed_12(buf); \
	INITSIG_Objects_Signals_C12_OBJ_Motion_Status_12(buf); \
	INITSIG_Objects_Signals_C12_OBJ_Motion_Category_12(buf); \
	INITSIG_Objects_Signals_C12_Brake_Light_12(buf); \
	INITSIG_Objects_Signals_C12_Turn_Indicator_Right_12(buf); \
	INITSIG_Objects_Signals_C12_Turn_Indicator_Left_12(buf); \
	INITSIG_Objects_Signals_C12_Light_indicator_validity_12(buf); \
	INITSIG_Objects_Signals_C12_OBJ_Angle_Mid_12(buf); \
	INITSIG_Objects_Signals_C12_OBJ_Angle_Rate_12(buf); \
	INITSIG_Objects_Signals_C12_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Header_Sync_Frame_Index Signal Sync_Frame_Index of Message Objects_Header (0x541)
 *
 * synchronizes between the messages in the same frame
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Header
 * @{
 */

/**
 * Signal Sync_Frame_Index configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Header_Sync_Frame_Index and \ref GET_Objects_Header_Sync_Frame_Index instead.
 */
#define SIG_Objects_Header_Sync_Frame_Index         0, 0, 0, 8

/**
 * Signal Sync_Frame_Index setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Header_Sync_Frame_Index or \ref INIT_Objects_Header instead.
 */
#define SETUP_Objects_Header_Sync_Frame_Index       0, 0, 0, 8, 0

/**
 * Get signal Sync_Frame_Index from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Header_Sync_Frame_Index(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Sync_Frame_Index in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Header_Sync_Frame_Index(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Sync_Frame_Index in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Header_Sync_Frame_Index(buf) \
	SET_Objects_Header_Sync_Frame_Index(buf, 0)

/**
 * Signal Sync_Frame_Index value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Header_Sync_Frame_Index(x, fmt) \
	((x) * fmt)

/**
 * Signal Sync_Frame_Index raw initial value.
 */
#define START_Objects_Header_Sync_Frame_Index       0

/**
 * Signal Sync_Frame_Index raw minimum value.
 */
#define MIN_Objects_Header_Sync_Frame_Index         0

/**
 * Signal Sync_Frame_Index raw maximum value.
 */
#define MAX_Objects_Header_Sync_Frame_Index         255

/**
 * Signal Sync_Frame_Index raw offset value.
 */
#define OFF_Objects_Header_Sync_Frame_Index         0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Header_Num_Of_Video_Objs Signal Num_Of_Video_Objs of Message Objects_Header (0x541)
 *
 * Number of recognized video objects in the scene (Veds, Peds, Animals, General Objects)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Header
 * @{
 */

/**
 * Signal Num_Of_Video_Objs configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Header_Num_Of_Video_Objs and \ref GET_Objects_Header_Num_Of_Video_Objs instead.
 */
#define SIG_Objects_Header_Num_Of_Video_Objs        0, 0, 8, 4

/**
 * Signal Num_Of_Video_Objs setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Header_Num_Of_Video_Objs or \ref INIT_Objects_Header instead.
 */
#define SETUP_Objects_Header_Num_Of_Video_Objs      0, 0, 8, 4, 0

/**
 * Get signal Num_Of_Video_Objs from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Header_Num_Of_Video_Objs(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Num_Of_Video_Objs in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Header_Num_Of_Video_Objs(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Num_Of_Video_Objs in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Header_Num_Of_Video_Objs(buf) \
	SET_Objects_Header_Num_Of_Video_Objs(buf, 0)

/**
 * Signal Num_Of_Video_Objs value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Header_Num_Of_Video_Objs(x, fmt) \
	((x) * fmt)

/**
 * Signal Num_Of_Video_Objs raw initial value.
 */
#define START_Objects_Header_Num_Of_Video_Objs      0

/**
 * Signal Num_Of_Video_Objs raw minimum value.
 */
#define MIN_Objects_Header_Num_Of_Video_Objs        0

/**
 * Signal Num_Of_Video_Objs raw maximum value.
 */
#define MAX_Objects_Header_Num_Of_Video_Objs        12

/**
 * Signal Num_Of_Video_Objs raw offset value.
 */
#define OFF_Objects_Header_Num_Of_Video_Objs        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Header_VD_CIPV_ID Signal VD_CIPV_ID of Message Objects_Header (0x541)
 *
 * Represents the ID of the CIPV
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Header
 * @{
 */

/**
 * Signal VD_CIPV_ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Header_VD_CIPV_ID and \ref GET_Objects_Header_VD_CIPV_ID instead.
 */
#define SIG_Objects_Header_VD_CIPV_ID               0, 0, 12, 7

/**
 * Signal VD_CIPV_ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Header_VD_CIPV_ID or \ref INIT_Objects_Header instead.
 */
#define SETUP_Objects_Header_VD_CIPV_ID             0, 0, 12, 7, 0

/**
 * Get signal VD_CIPV_ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Header_VD_CIPV_ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x0f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 4) \
)

/**
 * Set signal VD_CIPV_ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Header_VD_CIPV_ID(buf, val) { \
	buf[1] &= ~(0x0f << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 4) & 0x07) << 0; \
}

/**
 * Set signal VD_CIPV_ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Header_VD_CIPV_ID(buf) \
	SET_Objects_Header_VD_CIPV_ID(buf, 0)

/**
 * Signal VD_CIPV_ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Header_VD_CIPV_ID(x, fmt) \
	((x) * fmt)

/**
 * Signal VD_CIPV_ID raw initial value.
 */
#define START_Objects_Header_VD_CIPV_ID             0

/**
 * Signal VD_CIPV_ID raw minimum value.
 */
#define MIN_Objects_Header_VD_CIPV_ID               0

/**
 * Signal VD_CIPV_ID raw maximum value.
 */
#define MAX_Objects_Header_VD_CIPV_ID               127

/**
 * Signal VD_CIPV_ID raw offset value.
 */
#define OFF_Objects_Header_VD_CIPV_ID               0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Header_VD_CIPV_Lost Signal VD_CIPV_Lost of Message Objects_Header (0x541)
 *
 * State of the CIPV in terms of its loss
 *
 * Contains the value table \ref ENUM_Objects_Header_VD_CIPV_Lost.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Header
 * @{
 */

/**
 * Signal VD_CIPV_Lost configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Header_VD_CIPV_Lost and \ref GET_Objects_Header_VD_CIPV_Lost instead.
 */
#define SIG_Objects_Header_VD_CIPV_Lost             0, 0, 19, 2

/**
 * Signal VD_CIPV_Lost setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Header_VD_CIPV_Lost or \ref INIT_Objects_Header instead.
 */
#define SETUP_Objects_Header_VD_CIPV_Lost           0, 0, 19, 2, 0

/**
 * Get signal VD_CIPV_Lost from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Header_VD_CIPV_Lost(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x03) << 0) \
)

/**
 * Set signal VD_CIPV_Lost in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Header_VD_CIPV_Lost(buf, val) { \
	buf[2] &= ~(0x03 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal VD_CIPV_Lost in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Header_VD_CIPV_Lost(buf) \
	SET_Objects_Header_VD_CIPV_Lost(buf, 0)

/**
 * Signal VD_CIPV_Lost value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Header_VD_CIPV_Lost(x, fmt) \
	((x) * fmt)

/**
 * Signal VD_CIPV_Lost raw initial value.
 */
#define START_Objects_Header_VD_CIPV_Lost           0

/**
 * Signal VD_CIPV_Lost raw minimum value.
 */
#define MIN_Objects_Header_VD_CIPV_Lost             0

/**
 * Signal VD_CIPV_Lost raw maximum value.
 */
#define MAX_Objects_Header_VD_CIPV_Lost             2

/**
 * Signal VD_CIPV_Lost raw offset value.
 */
#define OFF_Objects_Header_VD_CIPV_Lost             0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Header_VD_CIPV_Lost Value Table for Signal VD_CIPV_Lost in Message Objects_Header (0x541)
 *
 * Enum values defined for \ref SIG_Objects_Header_VD_CIPV_Lost.
 *
 * @ingroup SIG_Objects_Header_VD_CIPV_Lost
 */

/**
 * Value table Objects_Header_VD_CIPV_Lost entry LOST_TARGET_FOV_IN.
 *
 * @ingroup ENUM_Objects_Header_VD_CIPV_Lost
 */
#define Objects_Header_VD_CIPV_Lost_LOST_TARGET_FOV_IN    2

/**
 * Value table Objects_Header_VD_CIPV_Lost entry LOST_TARGET_FOV_OUT.
 *
 * @ingroup ENUM_Objects_Header_VD_CIPV_Lost
 */
#define Objects_Header_VD_CIPV_Lost_LOST_TARGET_FOV_OUT    1

/**
 * Value table Objects_Header_VD_CIPV_Lost entry NO_LOSS.
 *
 * @ingroup ENUM_Objects_Header_VD_CIPV_Lost
 */
#define Objects_Header_VD_CIPV_Lost_NO_LOSS             0

/**
 * @defgroup SIG_Objects_Header_OBJ_VD_Allow_Acc Signal OBJ_VD_Allow_Acc of Message Objects_Header (0x541)
 *
 * This signal is intended to suppress acceleration in stop and go ACC scenarios when we suspect something is in our way.  
 *
 * Contains the value table \ref ENUM_Objects_Header_OBJ_VD_Allow_Acc.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Header
 * @{
 */

/**
 * Signal OBJ_VD_Allow_Acc configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Header_OBJ_VD_Allow_Acc and \ref GET_Objects_Header_OBJ_VD_Allow_Acc instead.
 */
#define SIG_Objects_Header_OBJ_VD_Allow_Acc         0, 0, 21, 2

/**
 * Signal OBJ_VD_Allow_Acc setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Header_OBJ_VD_Allow_Acc or \ref INIT_Objects_Header instead.
 */
#define SETUP_Objects_Header_OBJ_VD_Allow_Acc       0, 0, 21, 2, 0

/**
 * Get signal OBJ_VD_Allow_Acc from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Header_OBJ_VD_Allow_Acc(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x03) << 0) \
)

/**
 * Set signal OBJ_VD_Allow_Acc in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Header_OBJ_VD_Allow_Acc(buf, val) { \
	buf[2] &= ~(0x03 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 5; \
}

/**
 * Set signal OBJ_VD_Allow_Acc in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Header_OBJ_VD_Allow_Acc(buf) \
	SET_Objects_Header_OBJ_VD_Allow_Acc(buf, 0)

/**
 * Signal OBJ_VD_Allow_Acc value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Header_OBJ_VD_Allow_Acc(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_VD_Allow_Acc raw initial value.
 */
#define START_Objects_Header_OBJ_VD_Allow_Acc       0

/**
 * Signal OBJ_VD_Allow_Acc raw minimum value.
 */
#define MIN_Objects_Header_OBJ_VD_Allow_Acc         0

/**
 * Signal OBJ_VD_Allow_Acc raw maximum value.
 */
#define MAX_Objects_Header_OBJ_VD_Allow_Acc         2

/**
 * Signal OBJ_VD_Allow_Acc raw offset value.
 */
#define OFF_Objects_Header_OBJ_VD_Allow_Acc         0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Header_OBJ_VD_Allow_Acc Value Table for Signal OBJ_VD_Allow_Acc in Message Objects_Header (0x541)
 *
 * Enum values defined for \ref SIG_Objects_Header_OBJ_VD_Allow_Acc.
 *
 * @ingroup SIG_Objects_Header_OBJ_VD_Allow_Acc
 */

/**
 * Value table Objects_Header_OBJ_VD_Allow_Acc entry FREE_SPACE_UNKNOWN.
 *
 * @ingroup ENUM_Objects_Header_OBJ_VD_Allow_Acc
 */
#define Objects_Header_OBJ_VD_Allow_Acc_FREE_SPACE_UNKNOWN    2

/**
 * Value table Objects_Header_OBJ_VD_Allow_Acc entry SPACE_NOT_FREE.
 *
 * @ingroup ENUM_Objects_Header_OBJ_VD_Allow_Acc
 */
#define Objects_Header_OBJ_VD_Allow_Acc_SPACE_NOT_FREE      1

/**
 * Value table Objects_Header_OBJ_VD_Allow_Acc entry FREE_SPACE.
 *
 * @ingroup ENUM_Objects_Header_OBJ_VD_Allow_Acc
 */
#define Objects_Header_OBJ_VD_Allow_Acc_FREE_SPACE          0

/**
 * @defgroup SIG_Objects_Header_Reserved Signal Reserved of Message Objects_Header (0x541)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Header
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Header_Reserved and \ref GET_Objects_Header_Reserved instead.
 */
#define SIG_Objects_Header_Reserved                 0, 0, 23, 1

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Header_Reserved or \ref INIT_Objects_Header instead.
 */
#define SETUP_Objects_Header_Reserved               0, 0, 23, 1, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Header_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Header_Reserved(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Header_Reserved(buf) \
	SET_Objects_Header_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Header_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Header_Reserved               0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Header_Reserved                 0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Header_Reserved                 0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Header_Reserved                 0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A1_Obj_ID_1 Signal Obj_ID_1 of Message Objects_Signals_A1 (0x500)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A1
 * @{
 */

/**
 * Signal Obj_ID_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A1_Obj_ID_1 and \ref GET_Objects_Signals_A1_Obj_ID_1 instead.
 */
#define SIG_Objects_Signals_A1_Obj_ID_1             0, 0, 0, 7

/**
 * Signal Obj_ID_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A1_Obj_ID_1 or \ref INIT_Objects_Signals_A1 instead.
 */
#define SETUP_Objects_Signals_A1_Obj_ID_1           0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A1_Obj_ID_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A1_Obj_ID_1(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A1_Obj_ID_1(buf) \
	SET_Objects_Signals_A1_Obj_ID_1(buf, 0)

/**
 * Signal Obj_ID_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A1_Obj_ID_1(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_1 raw initial value.
 */
#define START_Objects_Signals_A1_Obj_ID_1           0

/**
 * Signal Obj_ID_1 raw minimum value.
 */
#define MIN_Objects_Signals_A1_Obj_ID_1             0

/**
 * Signal Obj_ID_1 raw maximum value.
 */
#define MAX_Objects_Signals_A1_Obj_ID_1             127

/**
 * Signal Obj_ID_1 raw offset value.
 */
#define OFF_Objects_Signals_A1_Obj_ID_1             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A1_Object_Class_1 Signal Object_Class_1 of Message Objects_Signals_A1 (0x500)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A1_Object_Class_1.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A1
 * @{
 */

/**
 * Signal Object_Class_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A1_Object_Class_1 and \ref GET_Objects_Signals_A1_Object_Class_1 instead.
 */
#define SIG_Objects_Signals_A1_Object_Class_1        0, 0, 7, 3

/**
 * Signal Object_Class_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A1_Object_Class_1 or \ref INIT_Objects_Signals_A1 instead.
 */
#define SETUP_Objects_Signals_A1_Object_Class_1      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A1_Object_Class_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A1_Object_Class_1(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A1_Object_Class_1(buf) \
	SET_Objects_Signals_A1_Object_Class_1(buf, 0)

/**
 * Signal Object_Class_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A1_Object_Class_1(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_1 raw initial value.
 */
#define START_Objects_Signals_A1_Object_Class_1      0

/**
 * Signal Object_Class_1 raw minimum value.
 */
#define MIN_Objects_Signals_A1_Object_Class_1        0

/**
 * Signal Object_Class_1 raw maximum value.
 */
#define MAX_Objects_Signals_A1_Object_Class_1        7

/**
 * Signal Object_Class_1 raw offset value.
 */
#define OFF_Objects_Signals_A1_Object_Class_1        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A1_Object_Class_1 Value Table for Signal Object_Class_1 in Message Objects_Signals_A1 (0x500)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A1_Object_Class_1.
 *
 * @ingroup SIG_Objects_Signals_A1_Object_Class_1
 */

/**
 * Value table Objects_Signals_A1_Object_Class_1 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A1_Object_Class_1
 */
#define Objects_Signals_A1_Object_Class_1_uncertain_vcl       7

/**
 * Value table Objects_Signals_A1_Object_Class_1 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A1_Object_Class_1
 */
#define Objects_Signals_A1_Object_Class_1_animal              6

/**
 * Value table Objects_Signals_A1_Object_Class_1 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A1_Object_Class_1
 */
#define Objects_Signals_A1_Object_Class_1_general_object      5

/**
 * Value table Objects_Signals_A1_Object_Class_1 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A1_Object_Class_1
 */
#define Objects_Signals_A1_Object_Class_1_pedestrian          4

/**
 * Value table Objects_Signals_A1_Object_Class_1 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A1_Object_Class_1
 */
#define Objects_Signals_A1_Object_Class_1_bicycle             3

/**
 * Value table Objects_Signals_A1_Object_Class_1 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A1_Object_Class_1
 */
#define Objects_Signals_A1_Object_Class_1_bike                2

/**
 * Value table Objects_Signals_A1_Object_Class_1 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A1_Object_Class_1
 */
#define Objects_Signals_A1_Object_Class_1_truck               1

/**
 * Value table Objects_Signals_A1_Object_Class_1 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A1_Object_Class_1
 */
#define Objects_Signals_A1_Object_Class_1_car                 0

/**
 * @defgroup SIG_Objects_Signals_A1_OBJ_Width_1 Signal OBJ_Width_1 of Message Objects_Signals_A1 (0x500)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A1
 * @{
 */

/**
 * Signal OBJ_Width_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A1_OBJ_Width_1 and \ref GET_Objects_Signals_A1_OBJ_Width_1 instead.
 */
#define SIG_Objects_Signals_A1_OBJ_Width_1          0, 0, 10, 7

/**
 * Signal OBJ_Width_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A1_OBJ_Width_1 or \ref INIT_Objects_Signals_A1 instead.
 */
#define SETUP_Objects_Signals_A1_OBJ_Width_1        0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A1_OBJ_Width_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A1_OBJ_Width_1(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A1_OBJ_Width_1(buf) \
	SET_Objects_Signals_A1_OBJ_Width_1(buf, 0)

/**
 * Signal OBJ_Width_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A1_OBJ_Width_1(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_1 raw initial value.
 */
#define START_Objects_Signals_A1_OBJ_Width_1        0

/**
 * Signal OBJ_Width_1 raw minimum value.
 */
#define MIN_Objects_Signals_A1_OBJ_Width_1          0

/**
 * Signal OBJ_Width_1 raw maximum value.
 */
#define MAX_Objects_Signals_A1_OBJ_Width_1          127

/**
 * Signal OBJ_Width_1 raw offset value.
 */
#define OFF_Objects_Signals_A1_OBJ_Width_1          0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A1_OBJ_Length_1 Signal OBJ_Length_1 of Message Objects_Signals_A1 (0x500)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A1
 * @{
 */

/**
 * Signal OBJ_Length_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A1_OBJ_Length_1 and \ref GET_Objects_Signals_A1_OBJ_Length_1 instead.
 */
#define SIG_Objects_Signals_A1_OBJ_Length_1         0, 0, 17, 9

/**
 * Signal OBJ_Length_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A1_OBJ_Length_1 or \ref INIT_Objects_Signals_A1 instead.
 */
#define SETUP_Objects_Signals_A1_OBJ_Length_1       0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A1_OBJ_Length_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A1_OBJ_Length_1(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A1_OBJ_Length_1(buf) \
	SET_Objects_Signals_A1_OBJ_Length_1(buf, 0)

/**
 * Signal OBJ_Length_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A1_OBJ_Length_1(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_1 raw initial value.
 */
#define START_Objects_Signals_A1_OBJ_Length_1       0

/**
 * Signal OBJ_Length_1 raw minimum value.
 */
#define MIN_Objects_Signals_A1_OBJ_Length_1         0

/**
 * Signal OBJ_Length_1 raw maximum value.
 */
#define MAX_Objects_Signals_A1_OBJ_Length_1         510

/**
 * Signal OBJ_Length_1 raw offset value.
 */
#define OFF_Objects_Signals_A1_OBJ_Length_1         0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A1_Relative_Long_Velocity_1 Signal Relative_Long_Velocity_1 of Message Objects_Signals_A1 (0x500)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A1
 * @{
 */

/**
 * Signal Relative_Long_Velocity_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A1_Relative_Long_Velocity_1 and \ref GET_Objects_Signals_A1_Relative_Long_Velocity_1 instead.
 */
#define SIG_Objects_Signals_A1_Relative_Long_Velocity_1        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A1_Relative_Long_Velocity_1 or \ref INIT_Objects_Signals_A1 instead.
 */
#define SETUP_Objects_Signals_A1_Relative_Long_Velocity_1      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A1_Relative_Long_Velocity_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A1_Relative_Long_Velocity_1(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A1_Relative_Long_Velocity_1(buf) \
	SET_Objects_Signals_A1_Relative_Long_Velocity_1(buf, 0)

/**
 * Signal Relative_Long_Velocity_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A1_Relative_Long_Velocity_1(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_1 raw initial value.
 */
#define START_Objects_Signals_A1_Relative_Long_Velocity_1      0

/**
 * Signal Relative_Long_Velocity_1 raw minimum value.
 */
#define MIN_Objects_Signals_A1_Relative_Long_Velocity_1        0

/**
 * Signal Relative_Long_Velocity_1 raw maximum value.
 */
#define MAX_Objects_Signals_A1_Relative_Long_Velocity_1        5000

/**
 * Signal Relative_Long_Velocity_1 raw offset value.
 */
#define OFF_Objects_Signals_A1_Relative_Long_Velocity_1        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A1_OBJ_Lane_Assignment_1 Signal OBJ_Lane_Assignment_1 of Message Objects_Signals_A1 (0x500)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A1_OBJ_Lane_Assignment_1.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A1
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A1_OBJ_Lane_Assignment_1 and \ref GET_Objects_Signals_A1_OBJ_Lane_Assignment_1 instead.
 */
#define SIG_Objects_Signals_A1_OBJ_Lane_Assignment_1        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A1_OBJ_Lane_Assignment_1 or \ref INIT_Objects_Signals_A1 instead.
 */
#define SETUP_Objects_Signals_A1_OBJ_Lane_Assignment_1      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A1_OBJ_Lane_Assignment_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A1_OBJ_Lane_Assignment_1(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A1_OBJ_Lane_Assignment_1(buf) \
	SET_Objects_Signals_A1_OBJ_Lane_Assignment_1(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A1_OBJ_Lane_Assignment_1(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_1 raw initial value.
 */
#define START_Objects_Signals_A1_OBJ_Lane_Assignment_1      0

/**
 * Signal OBJ_Lane_Assignment_1 raw minimum value.
 */
#define MIN_Objects_Signals_A1_OBJ_Lane_Assignment_1        0

/**
 * Signal OBJ_Lane_Assignment_1 raw maximum value.
 */
#define MAX_Objects_Signals_A1_OBJ_Lane_Assignment_1        5

/**
 * Signal OBJ_Lane_Assignment_1 raw offset value.
 */
#define OFF_Objects_Signals_A1_OBJ_Lane_Assignment_1        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A1_OBJ_Lane_Assignment_1 Value Table for Signal OBJ_Lane_Assignment_1 in Message Objects_Signals_A1 (0x500)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A1_OBJ_Lane_Assignment_1.
 *
 * @ingroup SIG_Objects_Signals_A1_OBJ_Lane_Assignment_1
 */

/**
 * Value table Objects_Signals_A1_OBJ_Lane_Assignment_1 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A1_OBJ_Lane_Assignment_1
 */
#define Objects_Signals_A1_OBJ_Lane_Assignment_1_Not                 5

/**
 * Value table Objects_Signals_A1_OBJ_Lane_Assignment_1 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A1_OBJ_Lane_Assignment_1
 */
#define Objects_Signals_A1_OBJ_Lane_Assignment_1_Next                4

/**
 * Value table Objects_Signals_A1_OBJ_Lane_Assignment_1 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A1_OBJ_Lane_Assignment_1
 */
#define Objects_Signals_A1_OBJ_Lane_Assignment_1_Right               3

/**
 * Value table Objects_Signals_A1_OBJ_Lane_Assignment_1 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A1_OBJ_Lane_Assignment_1
 */
#define Objects_Signals_A1_OBJ_Lane_Assignment_1_Ego                 2

/**
 * Value table Objects_Signals_A1_OBJ_Lane_Assignment_1 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A1_OBJ_Lane_Assignment_1
 */
#define Objects_Signals_A1_OBJ_Lane_Assignment_1_Left                1

/**
 * Value table Objects_Signals_A1_OBJ_Lane_Assignment_1 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A1_OBJ_Lane_Assignment_1
 */
#define Objects_Signals_A1_OBJ_Lane_Assignment_1_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A1_Relative_Lat_Velocity_1 Signal Relative_Lat_Velocity_1 of Message Objects_Signals_A1 (0x500)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A1
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A1_Relative_Lat_Velocity_1 and \ref GET_Objects_Signals_A1_Relative_Lat_Velocity_1 instead.
 */
#define SIG_Objects_Signals_A1_Relative_Lat_Velocity_1        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A1_Relative_Lat_Velocity_1 or \ref INIT_Objects_Signals_A1 instead.
 */
#define SETUP_Objects_Signals_A1_Relative_Lat_Velocity_1      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A1_Relative_Lat_Velocity_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A1_Relative_Lat_Velocity_1(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A1_Relative_Lat_Velocity_1(buf) \
	SET_Objects_Signals_A1_Relative_Lat_Velocity_1(buf, 0)

/**
 * Signal Relative_Lat_Velocity_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A1_Relative_Lat_Velocity_1(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_1 raw initial value.
 */
#define START_Objects_Signals_A1_Relative_Lat_Velocity_1      0

/**
 * Signal Relative_Lat_Velocity_1 raw minimum value.
 */
#define MIN_Objects_Signals_A1_Relative_Lat_Velocity_1        0

/**
 * Signal Relative_Lat_Velocity_1 raw maximum value.
 */
#define MAX_Objects_Signals_A1_Relative_Lat_Velocity_1        2000

/**
 * Signal Relative_Lat_Velocity_1 raw offset value.
 */
#define OFF_Objects_Signals_A1_Relative_Lat_Velocity_1        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A1_Reserved Signal Reserved of Message Objects_Signals_A1 (0x500)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A1
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A1_Reserved and \ref GET_Objects_Signals_A1_Reserved instead.
 */
#define SIG_Objects_Signals_A1_Reserved             0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A1_Reserved or \ref INIT_Objects_Signals_A1 instead.
 */
#define SETUP_Objects_Signals_A1_Reserved           0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A1_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A1_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A1_Reserved(buf) \
	SET_Objects_Signals_A1_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A1_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A1_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A1_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A1_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A1_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B1_Absolute_Long_Acc_1 Signal Absolute_Long_Acc_1 of Message Objects_Signals_B1 (0x501)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B1
 * @{
 */

/**
 * Signal Absolute_Long_Acc_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B1_Absolute_Long_Acc_1 and \ref GET_Objects_Signals_B1_Absolute_Long_Acc_1 instead.
 */
#define SIG_Objects_Signals_B1_Absolute_Long_Acc_1        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B1_Absolute_Long_Acc_1 or \ref INIT_Objects_Signals_B1 instead.
 */
#define SETUP_Objects_Signals_B1_Absolute_Long_Acc_1      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B1_Absolute_Long_Acc_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B1_Absolute_Long_Acc_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B1_Absolute_Long_Acc_1(buf) \
	SET_Objects_Signals_B1_Absolute_Long_Acc_1(buf, 0)

/**
 * Signal Absolute_Long_Acc_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B1_Absolute_Long_Acc_1(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_1 raw initial value.
 */
#define START_Objects_Signals_B1_Absolute_Long_Acc_1      0

/**
 * Signal Absolute_Long_Acc_1 raw minimum value.
 */
#define MIN_Objects_Signals_B1_Absolute_Long_Acc_1        0

/**
 * Signal Absolute_Long_Acc_1 raw maximum value.
 */
#define MAX_Objects_Signals_B1_Absolute_Long_Acc_1        511

/**
 * Signal Absolute_Long_Acc_1 raw offset value.
 */
#define OFF_Objects_Signals_B1_Absolute_Long_Acc_1        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B1_Long_Distance_1 Signal Long_Distance_1 of Message Objects_Signals_B1 (0x501)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B1
 * @{
 */

/**
 * Signal Long_Distance_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B1_Long_Distance_1 and \ref GET_Objects_Signals_B1_Long_Distance_1 instead.
 */
#define SIG_Objects_Signals_B1_Long_Distance_1        0, 0, 9, 13

/**
 * Signal Long_Distance_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B1_Long_Distance_1 or \ref INIT_Objects_Signals_B1 instead.
 */
#define SETUP_Objects_Signals_B1_Long_Distance_1      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B1_Long_Distance_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B1_Long_Distance_1(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B1_Long_Distance_1(buf) \
	SET_Objects_Signals_B1_Long_Distance_1(buf, 0)

/**
 * Signal Long_Distance_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B1_Long_Distance_1(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_1 raw initial value.
 */
#define START_Objects_Signals_B1_Long_Distance_1      0

/**
 * Signal Long_Distance_1 raw minimum value.
 */
#define MIN_Objects_Signals_B1_Long_Distance_1        0

/**
 * Signal Long_Distance_1 raw maximum value.
 */
#define MAX_Objects_Signals_B1_Long_Distance_1        7000

/**
 * Signal Long_Distance_1 raw offset value.
 */
#define OFF_Objects_Signals_B1_Long_Distance_1        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B1_Lateral_Distance_1 Signal Lateral_Distance_1 of Message Objects_Signals_B1 (0x501)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B1
 * @{
 */

/**
 * Signal Lateral_Distance_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B1_Lateral_Distance_1 and \ref GET_Objects_Signals_B1_Lateral_Distance_1 instead.
 */
#define SIG_Objects_Signals_B1_Lateral_Distance_1        0, 0, 22, 12

/**
 * Signal Lateral_Distance_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B1_Lateral_Distance_1 or \ref INIT_Objects_Signals_B1 instead.
 */
#define SETUP_Objects_Signals_B1_Lateral_Distance_1      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B1_Lateral_Distance_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B1_Lateral_Distance_1(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B1_Lateral_Distance_1(buf) \
	SET_Objects_Signals_B1_Lateral_Distance_1(buf, 0)

/**
 * Signal Lateral_Distance_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B1_Lateral_Distance_1(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_1 raw initial value.
 */
#define START_Objects_Signals_B1_Lateral_Distance_1      0

/**
 * Signal Lateral_Distance_1 raw minimum value.
 */
#define MIN_Objects_Signals_B1_Lateral_Distance_1        0

/**
 * Signal Lateral_Distance_1 raw maximum value.
 */
#define MAX_Objects_Signals_B1_Lateral_Distance_1        4094

/**
 * Signal Lateral_Distance_1 raw offset value.
 */
#define OFF_Objects_Signals_B1_Lateral_Distance_1        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B1_Reserved Signal Reserved of Message Objects_Signals_B1 (0x501)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B1
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B1_Reserved and \ref GET_Objects_Signals_B1_Reserved instead.
 */
#define SIG_Objects_Signals_B1_Reserved             0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B1_Reserved or \ref INIT_Objects_Signals_B1 instead.
 */
#define SETUP_Objects_Signals_B1_Reserved           0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B1_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B1_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B1_Reserved(buf) \
	SET_Objects_Signals_B1_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B1_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B1_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B1_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B1_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B1_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C1_Absolute_Speed_1 Signal Absolute_Speed_1 of Message Objects_Signals_C1 (0x502)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C1
 * @{
 */

/**
 * Signal Absolute_Speed_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C1_Absolute_Speed_1 and \ref GET_Objects_Signals_C1_Absolute_Speed_1 instead.
 */
#define SIG_Objects_Signals_C1_Absolute_Speed_1        0, 0, 0, 12

/**
 * Signal Absolute_Speed_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C1_Absolute_Speed_1 or \ref INIT_Objects_Signals_C1 instead.
 */
#define SETUP_Objects_Signals_C1_Absolute_Speed_1      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C1_Absolute_Speed_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C1_Absolute_Speed_1(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C1_Absolute_Speed_1(buf) \
	SET_Objects_Signals_C1_Absolute_Speed_1(buf, 0)

/**
 * Signal Absolute_Speed_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C1_Absolute_Speed_1(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_1 raw initial value.
 */
#define START_Objects_Signals_C1_Absolute_Speed_1      0

/**
 * Signal Absolute_Speed_1 raw minimum value.
 */
#define MIN_Objects_Signals_C1_Absolute_Speed_1        0

/**
 * Signal Absolute_Speed_1 raw maximum value.
 */
#define MAX_Objects_Signals_C1_Absolute_Speed_1        4000

/**
 * Signal Absolute_Speed_1 raw offset value.
 */
#define OFF_Objects_Signals_C1_Absolute_Speed_1        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C1_OBJ_Motion_Status_1 Signal OBJ_Motion_Status_1 of Message Objects_Signals_C1 (0x502)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C1_OBJ_Motion_Status_1.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C1
 * @{
 */

/**
 * Signal OBJ_Motion_Status_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C1_OBJ_Motion_Status_1 and \ref GET_Objects_Signals_C1_OBJ_Motion_Status_1 instead.
 */
#define SIG_Objects_Signals_C1_OBJ_Motion_Status_1        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C1_OBJ_Motion_Status_1 or \ref INIT_Objects_Signals_C1 instead.
 */
#define SETUP_Objects_Signals_C1_OBJ_Motion_Status_1      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C1_OBJ_Motion_Status_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C1_OBJ_Motion_Status_1(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C1_OBJ_Motion_Status_1(buf) \
	SET_Objects_Signals_C1_OBJ_Motion_Status_1(buf, 0)

/**
 * Signal OBJ_Motion_Status_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C1_OBJ_Motion_Status_1(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_1 raw initial value.
 */
#define START_Objects_Signals_C1_OBJ_Motion_Status_1      0

/**
 * Signal OBJ_Motion_Status_1 raw minimum value.
 */
#define MIN_Objects_Signals_C1_OBJ_Motion_Status_1        0

/**
 * Signal OBJ_Motion_Status_1 raw maximum value.
 */
#define MAX_Objects_Signals_C1_OBJ_Motion_Status_1        4

/**
 * Signal OBJ_Motion_Status_1 raw offset value.
 */
#define OFF_Objects_Signals_C1_OBJ_Motion_Status_1        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C1_OBJ_Motion_Status_1 Value Table for Signal OBJ_Motion_Status_1 in Message Objects_Signals_C1 (0x502)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C1_OBJ_Motion_Status_1.
 *
 * @ingroup SIG_Objects_Signals_C1_OBJ_Motion_Status_1
 */

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Status_1 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Status_1
 */
#define Objects_Signals_C1_OBJ_Motion_Status_1_Moving              4

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Status_1 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Status_1
 */
#define Objects_Signals_C1_OBJ_Motion_Status_1_Stopped             3

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Status_1 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Status_1
 */
#define Objects_Signals_C1_OBJ_Motion_Status_1_Stationary          2

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Status_1 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Status_1
 */
#define Objects_Signals_C1_OBJ_Motion_Status_1_Moving_1            1

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Status_1 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Status_1
 */
#define Objects_Signals_C1_OBJ_Motion_Status_1_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C1_OBJ_Motion_Category_1 Signal OBJ_Motion_Category_1 of Message Objects_Signals_C1 (0x502)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C1_OBJ_Motion_Category_1.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C1
 * @{
 */

/**
 * Signal OBJ_Motion_Category_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C1_OBJ_Motion_Category_1 and \ref GET_Objects_Signals_C1_OBJ_Motion_Category_1 instead.
 */
#define SIG_Objects_Signals_C1_OBJ_Motion_Category_1        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C1_OBJ_Motion_Category_1 or \ref INIT_Objects_Signals_C1 instead.
 */
#define SETUP_Objects_Signals_C1_OBJ_Motion_Category_1      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C1_OBJ_Motion_Category_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C1_OBJ_Motion_Category_1(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C1_OBJ_Motion_Category_1(buf) \
	SET_Objects_Signals_C1_OBJ_Motion_Category_1(buf, 0)

/**
 * Signal OBJ_Motion_Category_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C1_OBJ_Motion_Category_1(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_1 raw initial value.
 */
#define START_Objects_Signals_C1_OBJ_Motion_Category_1      0

/**
 * Signal OBJ_Motion_Category_1 raw minimum value.
 */
#define MIN_Objects_Signals_C1_OBJ_Motion_Category_1        0

/**
 * Signal OBJ_Motion_Category_1 raw maximum value.
 */
#define MAX_Objects_Signals_C1_OBJ_Motion_Category_1        12

/**
 * Signal OBJ_Motion_Category_1 raw offset value.
 */
#define OFF_Objects_Signals_C1_OBJ_Motion_Category_1        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1 Value Table for Signal OBJ_Motion_Category_1 in Message Objects_Signals_C1 (0x502)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C1_OBJ_Motion_Category_1.
 *
 * @ingroup SIG_Objects_Signals_C1_OBJ_Motion_Category_1
 */

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_MOVING           10

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_RTAP             9

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_LTAP             8

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_CROSSING         7

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_PASSING          1

/**
 * Value table Objects_Signals_C1_OBJ_Motion_Category_1 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C1_OBJ_Motion_Category_1
 */
#define Objects_Signals_C1_OBJ_Motion_Category_1_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C1_Brake_Light_1 Signal Brake_Light_1 of Message Objects_Signals_C1 (0x502)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C1_Brake_Light_1.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C1
 * @{
 */

/**
 * Signal Brake_Light_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C1_Brake_Light_1 and \ref GET_Objects_Signals_C1_Brake_Light_1 instead.
 */
#define SIG_Objects_Signals_C1_Brake_Light_1        0, 0, 19, 1

/**
 * Signal Brake_Light_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C1_Brake_Light_1 or \ref INIT_Objects_Signals_C1 instead.
 */
#define SETUP_Objects_Signals_C1_Brake_Light_1      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C1_Brake_Light_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C1_Brake_Light_1(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C1_Brake_Light_1(buf) \
	SET_Objects_Signals_C1_Brake_Light_1(buf, 0)

/**
 * Signal Brake_Light_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C1_Brake_Light_1(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_1 raw initial value.
 */
#define START_Objects_Signals_C1_Brake_Light_1      0

/**
 * Signal Brake_Light_1 raw minimum value.
 */
#define MIN_Objects_Signals_C1_Brake_Light_1        0

/**
 * Signal Brake_Light_1 raw maximum value.
 */
#define MAX_Objects_Signals_C1_Brake_Light_1        1

/**
 * Signal Brake_Light_1 raw offset value.
 */
#define OFF_Objects_Signals_C1_Brake_Light_1        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C1_Brake_Light_1 Value Table for Signal Brake_Light_1 in Message Objects_Signals_C1 (0x502)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C1_Brake_Light_1.
 *
 * @ingroup SIG_Objects_Signals_C1_Brake_Light_1
 */

/**
 * Value table Objects_Signals_C1_Brake_Light_1 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C1_Brake_Light_1
 */
#define Objects_Signals_C1_Brake_Light_1_On                  1

/**
 * Value table Objects_Signals_C1_Brake_Light_1 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C1_Brake_Light_1
 */
#define Objects_Signals_C1_Brake_Light_1_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C1_Turn_Indicator_Right_1 Signal Turn_Indicator_Right_1 of Message Objects_Signals_C1 (0x502)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C1_Turn_Indicator_Right_1.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C1
 * @{
 */

/**
 * Signal Turn_Indicator_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C1_Turn_Indicator_Right_1 and \ref GET_Objects_Signals_C1_Turn_Indicator_Right_1 instead.
 */
#define SIG_Objects_Signals_C1_Turn_Indicator_Right_1        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C1_Turn_Indicator_Right_1 or \ref INIT_Objects_Signals_C1 instead.
 */
#define SETUP_Objects_Signals_C1_Turn_Indicator_Right_1      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C1_Turn_Indicator_Right_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C1_Turn_Indicator_Right_1(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C1_Turn_Indicator_Right_1(buf) \
	SET_Objects_Signals_C1_Turn_Indicator_Right_1(buf, 0)

/**
 * Signal Turn_Indicator_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C1_Turn_Indicator_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_1 raw initial value.
 */
#define START_Objects_Signals_C1_Turn_Indicator_Right_1      0

/**
 * Signal Turn_Indicator_Right_1 raw minimum value.
 */
#define MIN_Objects_Signals_C1_Turn_Indicator_Right_1        0

/**
 * Signal Turn_Indicator_Right_1 raw maximum value.
 */
#define MAX_Objects_Signals_C1_Turn_Indicator_Right_1        1

/**
 * Signal Turn_Indicator_Right_1 raw offset value.
 */
#define OFF_Objects_Signals_C1_Turn_Indicator_Right_1        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C1_Turn_Indicator_Right_1 Value Table for Signal Turn_Indicator_Right_1 in Message Objects_Signals_C1 (0x502)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C1_Turn_Indicator_Right_1.
 *
 * @ingroup SIG_Objects_Signals_C1_Turn_Indicator_Right_1
 */

/**
 * Value table Objects_Signals_C1_Turn_Indicator_Right_1 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C1_Turn_Indicator_Right_1
 */
#define Objects_Signals_C1_Turn_Indicator_Right_1_On                  1

/**
 * Value table Objects_Signals_C1_Turn_Indicator_Right_1 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C1_Turn_Indicator_Right_1
 */
#define Objects_Signals_C1_Turn_Indicator_Right_1_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C1_Turn_Indicator_Left_1 Signal Turn_Indicator_Left_1 of Message Objects_Signals_C1 (0x502)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C1_Turn_Indicator_Left_1.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C1
 * @{
 */

/**
 * Signal Turn_Indicator_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C1_Turn_Indicator_Left_1 and \ref GET_Objects_Signals_C1_Turn_Indicator_Left_1 instead.
 */
#define SIG_Objects_Signals_C1_Turn_Indicator_Left_1        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C1_Turn_Indicator_Left_1 or \ref INIT_Objects_Signals_C1 instead.
 */
#define SETUP_Objects_Signals_C1_Turn_Indicator_Left_1      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C1_Turn_Indicator_Left_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C1_Turn_Indicator_Left_1(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C1_Turn_Indicator_Left_1(buf) \
	SET_Objects_Signals_C1_Turn_Indicator_Left_1(buf, 0)

/**
 * Signal Turn_Indicator_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C1_Turn_Indicator_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_1 raw initial value.
 */
#define START_Objects_Signals_C1_Turn_Indicator_Left_1      0

/**
 * Signal Turn_Indicator_Left_1 raw minimum value.
 */
#define MIN_Objects_Signals_C1_Turn_Indicator_Left_1        0

/**
 * Signal Turn_Indicator_Left_1 raw maximum value.
 */
#define MAX_Objects_Signals_C1_Turn_Indicator_Left_1        1

/**
 * Signal Turn_Indicator_Left_1 raw offset value.
 */
#define OFF_Objects_Signals_C1_Turn_Indicator_Left_1        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C1_Turn_Indicator_Left_1 Value Table for Signal Turn_Indicator_Left_1 in Message Objects_Signals_C1 (0x502)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C1_Turn_Indicator_Left_1.
 *
 * @ingroup SIG_Objects_Signals_C1_Turn_Indicator_Left_1
 */

/**
 * Value table Objects_Signals_C1_Turn_Indicator_Left_1 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C1_Turn_Indicator_Left_1
 */
#define Objects_Signals_C1_Turn_Indicator_Left_1_On                  1

/**
 * Value table Objects_Signals_C1_Turn_Indicator_Left_1 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C1_Turn_Indicator_Left_1
 */
#define Objects_Signals_C1_Turn_Indicator_Left_1_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C1_Light_indicator_validity_1 Signal Light_indicator_validity_1 of Message Objects_Signals_C1 (0x502)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C1_Light_indicator_validity_1.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C1
 * @{
 */

/**
 * Signal Light_indicator_validity_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C1_Light_indicator_validity_1 and \ref GET_Objects_Signals_C1_Light_indicator_validity_1 instead.
 */
#define SIG_Objects_Signals_C1_Light_indicator_validity_1        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C1_Light_indicator_validity_1 or \ref INIT_Objects_Signals_C1 instead.
 */
#define SETUP_Objects_Signals_C1_Light_indicator_validity_1      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C1_Light_indicator_validity_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C1_Light_indicator_validity_1(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C1_Light_indicator_validity_1(buf) \
	SET_Objects_Signals_C1_Light_indicator_validity_1(buf, 0)

/**
 * Signal Light_indicator_validity_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C1_Light_indicator_validity_1(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_1 raw initial value.
 */
#define START_Objects_Signals_C1_Light_indicator_validity_1      0

/**
 * Signal Light_indicator_validity_1 raw minimum value.
 */
#define MIN_Objects_Signals_C1_Light_indicator_validity_1        0

/**
 * Signal Light_indicator_validity_1 raw maximum value.
 */
#define MAX_Objects_Signals_C1_Light_indicator_validity_1        1

/**
 * Signal Light_indicator_validity_1 raw offset value.
 */
#define OFF_Objects_Signals_C1_Light_indicator_validity_1        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C1_Light_indicator_validity_1 Value Table for Signal Light_indicator_validity_1 in Message Objects_Signals_C1 (0x502)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C1_Light_indicator_validity_1.
 *
 * @ingroup SIG_Objects_Signals_C1_Light_indicator_validity_1
 */

/**
 * Value table Objects_Signals_C1_Light_indicator_validity_1 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C1_Light_indicator_validity_1
 */
#define Objects_Signals_C1_Light_indicator_validity_1_True                1

/**
 * Value table Objects_Signals_C1_Light_indicator_validity_1 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C1_Light_indicator_validity_1
 */
#define Objects_Signals_C1_Light_indicator_validity_1_False               0

/**
 * @defgroup SIG_Objects_Signals_C1_OBJ_Angle_Mid_1 Signal OBJ_Angle_Mid_1 of Message Objects_Signals_C1 (0x502)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C1
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C1_OBJ_Angle_Mid_1 and \ref GET_Objects_Signals_C1_OBJ_Angle_Mid_1 instead.
 */
#define SIG_Objects_Signals_C1_OBJ_Angle_Mid_1        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C1_OBJ_Angle_Mid_1 or \ref INIT_Objects_Signals_C1 instead.
 */
#define SETUP_Objects_Signals_C1_OBJ_Angle_Mid_1      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C1_OBJ_Angle_Mid_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C1_OBJ_Angle_Mid_1(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C1_OBJ_Angle_Mid_1(buf) \
	SET_Objects_Signals_C1_OBJ_Angle_Mid_1(buf, 0)

/**
 * Signal OBJ_Angle_Mid_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C1_OBJ_Angle_Mid_1(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_1 raw initial value.
 */
#define START_Objects_Signals_C1_OBJ_Angle_Mid_1      0

/**
 * Signal OBJ_Angle_Mid_1 raw minimum value.
 */
#define MIN_Objects_Signals_C1_OBJ_Angle_Mid_1        0

/**
 * Signal OBJ_Angle_Mid_1 raw maximum value.
 */
#define MAX_Objects_Signals_C1_OBJ_Angle_Mid_1        15710

/**
 * Signal OBJ_Angle_Mid_1 raw offset value.
 */
#define OFF_Objects_Signals_C1_OBJ_Angle_Mid_1        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C1_OBJ_Angle_Rate_1 Signal OBJ_Angle_Rate_1 of Message Objects_Signals_C1 (0x502)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C1
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C1_OBJ_Angle_Rate_1 and \ref GET_Objects_Signals_C1_OBJ_Angle_Rate_1 instead.
 */
#define SIG_Objects_Signals_C1_OBJ_Angle_Rate_1        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C1_OBJ_Angle_Rate_1 or \ref INIT_Objects_Signals_C1 instead.
 */
#define SETUP_Objects_Signals_C1_OBJ_Angle_Rate_1      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C1_OBJ_Angle_Rate_1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C1_OBJ_Angle_Rate_1(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C1_OBJ_Angle_Rate_1(buf) \
	SET_Objects_Signals_C1_OBJ_Angle_Rate_1(buf, 0)

/**
 * Signal OBJ_Angle_Rate_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C1_OBJ_Angle_Rate_1(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_1 raw initial value.
 */
#define START_Objects_Signals_C1_OBJ_Angle_Rate_1      0

/**
 * Signal OBJ_Angle_Rate_1 raw minimum value.
 */
#define MIN_Objects_Signals_C1_OBJ_Angle_Rate_1        0

/**
 * Signal OBJ_Angle_Rate_1 raw maximum value.
 */
#define MAX_Objects_Signals_C1_OBJ_Angle_Rate_1        2233

/**
 * Signal OBJ_Angle_Rate_1 raw offset value.
 */
#define OFF_Objects_Signals_C1_OBJ_Angle_Rate_1        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C1_Reserved Signal Reserved of Message Objects_Signals_C1 (0x502)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C1
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C1_Reserved and \ref GET_Objects_Signals_C1_Reserved instead.
 */
#define SIG_Objects_Signals_C1_Reserved             0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C1_Reserved or \ref INIT_Objects_Signals_C1 instead.
 */
#define SETUP_Objects_Signals_C1_Reserved           0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C1_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C1_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C1_Reserved(buf) \
	SET_Objects_Signals_C1_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C1_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C1_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C1_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C1_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C1_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A2_Obj_ID_2 Signal Obj_ID_2 of Message Objects_Signals_A2 (0x503)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A2
 * @{
 */

/**
 * Signal Obj_ID_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A2_Obj_ID_2 and \ref GET_Objects_Signals_A2_Obj_ID_2 instead.
 */
#define SIG_Objects_Signals_A2_Obj_ID_2             0, 0, 0, 7

/**
 * Signal Obj_ID_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A2_Obj_ID_2 or \ref INIT_Objects_Signals_A2 instead.
 */
#define SETUP_Objects_Signals_A2_Obj_ID_2           0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A2_Obj_ID_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A2_Obj_ID_2(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A2_Obj_ID_2(buf) \
	SET_Objects_Signals_A2_Obj_ID_2(buf, 0)

/**
 * Signal Obj_ID_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A2_Obj_ID_2(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_2 raw initial value.
 */
#define START_Objects_Signals_A2_Obj_ID_2           0

/**
 * Signal Obj_ID_2 raw minimum value.
 */
#define MIN_Objects_Signals_A2_Obj_ID_2             0

/**
 * Signal Obj_ID_2 raw maximum value.
 */
#define MAX_Objects_Signals_A2_Obj_ID_2             127

/**
 * Signal Obj_ID_2 raw offset value.
 */
#define OFF_Objects_Signals_A2_Obj_ID_2             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A2_Object_Class_2 Signal Object_Class_2 of Message Objects_Signals_A2 (0x503)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A2_Object_Class_2.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A2
 * @{
 */

/**
 * Signal Object_Class_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A2_Object_Class_2 and \ref GET_Objects_Signals_A2_Object_Class_2 instead.
 */
#define SIG_Objects_Signals_A2_Object_Class_2        0, 0, 7, 3

/**
 * Signal Object_Class_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A2_Object_Class_2 or \ref INIT_Objects_Signals_A2 instead.
 */
#define SETUP_Objects_Signals_A2_Object_Class_2      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A2_Object_Class_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A2_Object_Class_2(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A2_Object_Class_2(buf) \
	SET_Objects_Signals_A2_Object_Class_2(buf, 0)

/**
 * Signal Object_Class_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A2_Object_Class_2(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_2 raw initial value.
 */
#define START_Objects_Signals_A2_Object_Class_2      0

/**
 * Signal Object_Class_2 raw minimum value.
 */
#define MIN_Objects_Signals_A2_Object_Class_2        0

/**
 * Signal Object_Class_2 raw maximum value.
 */
#define MAX_Objects_Signals_A2_Object_Class_2        7

/**
 * Signal Object_Class_2 raw offset value.
 */
#define OFF_Objects_Signals_A2_Object_Class_2        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A2_Object_Class_2 Value Table for Signal Object_Class_2 in Message Objects_Signals_A2 (0x503)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A2_Object_Class_2.
 *
 * @ingroup SIG_Objects_Signals_A2_Object_Class_2
 */

/**
 * Value table Objects_Signals_A2_Object_Class_2 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A2_Object_Class_2
 */
#define Objects_Signals_A2_Object_Class_2_uncertain_vcl       7

/**
 * Value table Objects_Signals_A2_Object_Class_2 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A2_Object_Class_2
 */
#define Objects_Signals_A2_Object_Class_2_animal              6

/**
 * Value table Objects_Signals_A2_Object_Class_2 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A2_Object_Class_2
 */
#define Objects_Signals_A2_Object_Class_2_general_object      5

/**
 * Value table Objects_Signals_A2_Object_Class_2 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A2_Object_Class_2
 */
#define Objects_Signals_A2_Object_Class_2_pedestrian          4

/**
 * Value table Objects_Signals_A2_Object_Class_2 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A2_Object_Class_2
 */
#define Objects_Signals_A2_Object_Class_2_bicycle             3

/**
 * Value table Objects_Signals_A2_Object_Class_2 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A2_Object_Class_2
 */
#define Objects_Signals_A2_Object_Class_2_bike                2

/**
 * Value table Objects_Signals_A2_Object_Class_2 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A2_Object_Class_2
 */
#define Objects_Signals_A2_Object_Class_2_truck               1

/**
 * Value table Objects_Signals_A2_Object_Class_2 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A2_Object_Class_2
 */
#define Objects_Signals_A2_Object_Class_2_car                 0

/**
 * @defgroup SIG_Objects_Signals_A2_OBJ_Width_2 Signal OBJ_Width_2 of Message Objects_Signals_A2 (0x503)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A2
 * @{
 */

/**
 * Signal OBJ_Width_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A2_OBJ_Width_2 and \ref GET_Objects_Signals_A2_OBJ_Width_2 instead.
 */
#define SIG_Objects_Signals_A2_OBJ_Width_2          0, 0, 10, 7

/**
 * Signal OBJ_Width_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A2_OBJ_Width_2 or \ref INIT_Objects_Signals_A2 instead.
 */
#define SETUP_Objects_Signals_A2_OBJ_Width_2        0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A2_OBJ_Width_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A2_OBJ_Width_2(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A2_OBJ_Width_2(buf) \
	SET_Objects_Signals_A2_OBJ_Width_2(buf, 0)

/**
 * Signal OBJ_Width_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A2_OBJ_Width_2(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_2 raw initial value.
 */
#define START_Objects_Signals_A2_OBJ_Width_2        0

/**
 * Signal OBJ_Width_2 raw minimum value.
 */
#define MIN_Objects_Signals_A2_OBJ_Width_2          0

/**
 * Signal OBJ_Width_2 raw maximum value.
 */
#define MAX_Objects_Signals_A2_OBJ_Width_2          127

/**
 * Signal OBJ_Width_2 raw offset value.
 */
#define OFF_Objects_Signals_A2_OBJ_Width_2          0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A2_OBJ_Length_2 Signal OBJ_Length_2 of Message Objects_Signals_A2 (0x503)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A2
 * @{
 */

/**
 * Signal OBJ_Length_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A2_OBJ_Length_2 and \ref GET_Objects_Signals_A2_OBJ_Length_2 instead.
 */
#define SIG_Objects_Signals_A2_OBJ_Length_2         0, 0, 17, 9

/**
 * Signal OBJ_Length_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A2_OBJ_Length_2 or \ref INIT_Objects_Signals_A2 instead.
 */
#define SETUP_Objects_Signals_A2_OBJ_Length_2       0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A2_OBJ_Length_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A2_OBJ_Length_2(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A2_OBJ_Length_2(buf) \
	SET_Objects_Signals_A2_OBJ_Length_2(buf, 0)

/**
 * Signal OBJ_Length_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A2_OBJ_Length_2(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_2 raw initial value.
 */
#define START_Objects_Signals_A2_OBJ_Length_2       0

/**
 * Signal OBJ_Length_2 raw minimum value.
 */
#define MIN_Objects_Signals_A2_OBJ_Length_2         0

/**
 * Signal OBJ_Length_2 raw maximum value.
 */
#define MAX_Objects_Signals_A2_OBJ_Length_2         510

/**
 * Signal OBJ_Length_2 raw offset value.
 */
#define OFF_Objects_Signals_A2_OBJ_Length_2         0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A2_Relative_Long_Velocity_2 Signal Relative_Long_Velocity_2 of Message Objects_Signals_A2 (0x503)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A2
 * @{
 */

/**
 * Signal Relative_Long_Velocity_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A2_Relative_Long_Velocity_2 and \ref GET_Objects_Signals_A2_Relative_Long_Velocity_2 instead.
 */
#define SIG_Objects_Signals_A2_Relative_Long_Velocity_2        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A2_Relative_Long_Velocity_2 or \ref INIT_Objects_Signals_A2 instead.
 */
#define SETUP_Objects_Signals_A2_Relative_Long_Velocity_2      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A2_Relative_Long_Velocity_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A2_Relative_Long_Velocity_2(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A2_Relative_Long_Velocity_2(buf) \
	SET_Objects_Signals_A2_Relative_Long_Velocity_2(buf, 0)

/**
 * Signal Relative_Long_Velocity_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A2_Relative_Long_Velocity_2(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_2 raw initial value.
 */
#define START_Objects_Signals_A2_Relative_Long_Velocity_2      0

/**
 * Signal Relative_Long_Velocity_2 raw minimum value.
 */
#define MIN_Objects_Signals_A2_Relative_Long_Velocity_2        0

/**
 * Signal Relative_Long_Velocity_2 raw maximum value.
 */
#define MAX_Objects_Signals_A2_Relative_Long_Velocity_2        5000

/**
 * Signal Relative_Long_Velocity_2 raw offset value.
 */
#define OFF_Objects_Signals_A2_Relative_Long_Velocity_2        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A2_OBJ_Lane_Assignment_2 Signal OBJ_Lane_Assignment_2 of Message Objects_Signals_A2 (0x503)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A2_OBJ_Lane_Assignment_2.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A2
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A2_OBJ_Lane_Assignment_2 and \ref GET_Objects_Signals_A2_OBJ_Lane_Assignment_2 instead.
 */
#define SIG_Objects_Signals_A2_OBJ_Lane_Assignment_2        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A2_OBJ_Lane_Assignment_2 or \ref INIT_Objects_Signals_A2 instead.
 */
#define SETUP_Objects_Signals_A2_OBJ_Lane_Assignment_2      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A2_OBJ_Lane_Assignment_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A2_OBJ_Lane_Assignment_2(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A2_OBJ_Lane_Assignment_2(buf) \
	SET_Objects_Signals_A2_OBJ_Lane_Assignment_2(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A2_OBJ_Lane_Assignment_2(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_2 raw initial value.
 */
#define START_Objects_Signals_A2_OBJ_Lane_Assignment_2      0

/**
 * Signal OBJ_Lane_Assignment_2 raw minimum value.
 */
#define MIN_Objects_Signals_A2_OBJ_Lane_Assignment_2        0

/**
 * Signal OBJ_Lane_Assignment_2 raw maximum value.
 */
#define MAX_Objects_Signals_A2_OBJ_Lane_Assignment_2        5

/**
 * Signal OBJ_Lane_Assignment_2 raw offset value.
 */
#define OFF_Objects_Signals_A2_OBJ_Lane_Assignment_2        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A2_OBJ_Lane_Assignment_2 Value Table for Signal OBJ_Lane_Assignment_2 in Message Objects_Signals_A2 (0x503)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A2_OBJ_Lane_Assignment_2.
 *
 * @ingroup SIG_Objects_Signals_A2_OBJ_Lane_Assignment_2
 */

/**
 * Value table Objects_Signals_A2_OBJ_Lane_Assignment_2 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A2_OBJ_Lane_Assignment_2
 */
#define Objects_Signals_A2_OBJ_Lane_Assignment_2_Not                 5

/**
 * Value table Objects_Signals_A2_OBJ_Lane_Assignment_2 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A2_OBJ_Lane_Assignment_2
 */
#define Objects_Signals_A2_OBJ_Lane_Assignment_2_Next                4

/**
 * Value table Objects_Signals_A2_OBJ_Lane_Assignment_2 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A2_OBJ_Lane_Assignment_2
 */
#define Objects_Signals_A2_OBJ_Lane_Assignment_2_Right               3

/**
 * Value table Objects_Signals_A2_OBJ_Lane_Assignment_2 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A2_OBJ_Lane_Assignment_2
 */
#define Objects_Signals_A2_OBJ_Lane_Assignment_2_Ego                 2

/**
 * Value table Objects_Signals_A2_OBJ_Lane_Assignment_2 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A2_OBJ_Lane_Assignment_2
 */
#define Objects_Signals_A2_OBJ_Lane_Assignment_2_Left                1

/**
 * Value table Objects_Signals_A2_OBJ_Lane_Assignment_2 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A2_OBJ_Lane_Assignment_2
 */
#define Objects_Signals_A2_OBJ_Lane_Assignment_2_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A2_Relative_Lat_Velocity_2 Signal Relative_Lat_Velocity_2 of Message Objects_Signals_A2 (0x503)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A2
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A2_Relative_Lat_Velocity_2 and \ref GET_Objects_Signals_A2_Relative_Lat_Velocity_2 instead.
 */
#define SIG_Objects_Signals_A2_Relative_Lat_Velocity_2        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A2_Relative_Lat_Velocity_2 or \ref INIT_Objects_Signals_A2 instead.
 */
#define SETUP_Objects_Signals_A2_Relative_Lat_Velocity_2      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A2_Relative_Lat_Velocity_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A2_Relative_Lat_Velocity_2(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A2_Relative_Lat_Velocity_2(buf) \
	SET_Objects_Signals_A2_Relative_Lat_Velocity_2(buf, 0)

/**
 * Signal Relative_Lat_Velocity_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A2_Relative_Lat_Velocity_2(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_2 raw initial value.
 */
#define START_Objects_Signals_A2_Relative_Lat_Velocity_2      0

/**
 * Signal Relative_Lat_Velocity_2 raw minimum value.
 */
#define MIN_Objects_Signals_A2_Relative_Lat_Velocity_2        0

/**
 * Signal Relative_Lat_Velocity_2 raw maximum value.
 */
#define MAX_Objects_Signals_A2_Relative_Lat_Velocity_2        2000

/**
 * Signal Relative_Lat_Velocity_2 raw offset value.
 */
#define OFF_Objects_Signals_A2_Relative_Lat_Velocity_2        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A2_Reserved Signal Reserved of Message Objects_Signals_A2 (0x503)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A2
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A2_Reserved and \ref GET_Objects_Signals_A2_Reserved instead.
 */
#define SIG_Objects_Signals_A2_Reserved             0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A2_Reserved or \ref INIT_Objects_Signals_A2 instead.
 */
#define SETUP_Objects_Signals_A2_Reserved           0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A2_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A2_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A2_Reserved(buf) \
	SET_Objects_Signals_A2_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A2_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A2_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A2_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A2_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A2_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B2_Absolute_Long_Acc_2 Signal Absolute_Long_Acc_2 of Message Objects_Signals_B2 (0x504)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B2
 * @{
 */

/**
 * Signal Absolute_Long_Acc_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B2_Absolute_Long_Acc_2 and \ref GET_Objects_Signals_B2_Absolute_Long_Acc_2 instead.
 */
#define SIG_Objects_Signals_B2_Absolute_Long_Acc_2        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B2_Absolute_Long_Acc_2 or \ref INIT_Objects_Signals_B2 instead.
 */
#define SETUP_Objects_Signals_B2_Absolute_Long_Acc_2      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B2_Absolute_Long_Acc_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B2_Absolute_Long_Acc_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B2_Absolute_Long_Acc_2(buf) \
	SET_Objects_Signals_B2_Absolute_Long_Acc_2(buf, 0)

/**
 * Signal Absolute_Long_Acc_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B2_Absolute_Long_Acc_2(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_2 raw initial value.
 */
#define START_Objects_Signals_B2_Absolute_Long_Acc_2      0

/**
 * Signal Absolute_Long_Acc_2 raw minimum value.
 */
#define MIN_Objects_Signals_B2_Absolute_Long_Acc_2        0

/**
 * Signal Absolute_Long_Acc_2 raw maximum value.
 */
#define MAX_Objects_Signals_B2_Absolute_Long_Acc_2        511

/**
 * Signal Absolute_Long_Acc_2 raw offset value.
 */
#define OFF_Objects_Signals_B2_Absolute_Long_Acc_2        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B2_Long_Distance_2 Signal Long_Distance_2 of Message Objects_Signals_B2 (0x504)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B2
 * @{
 */

/**
 * Signal Long_Distance_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B2_Long_Distance_2 and \ref GET_Objects_Signals_B2_Long_Distance_2 instead.
 */
#define SIG_Objects_Signals_B2_Long_Distance_2        0, 0, 9, 13

/**
 * Signal Long_Distance_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B2_Long_Distance_2 or \ref INIT_Objects_Signals_B2 instead.
 */
#define SETUP_Objects_Signals_B2_Long_Distance_2      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B2_Long_Distance_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B2_Long_Distance_2(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B2_Long_Distance_2(buf) \
	SET_Objects_Signals_B2_Long_Distance_2(buf, 0)

/**
 * Signal Long_Distance_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B2_Long_Distance_2(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_2 raw initial value.
 */
#define START_Objects_Signals_B2_Long_Distance_2      0

/**
 * Signal Long_Distance_2 raw minimum value.
 */
#define MIN_Objects_Signals_B2_Long_Distance_2        0

/**
 * Signal Long_Distance_2 raw maximum value.
 */
#define MAX_Objects_Signals_B2_Long_Distance_2        7000

/**
 * Signal Long_Distance_2 raw offset value.
 */
#define OFF_Objects_Signals_B2_Long_Distance_2        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B2_Lateral_Distance_2 Signal Lateral_Distance_2 of Message Objects_Signals_B2 (0x504)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B2
 * @{
 */

/**
 * Signal Lateral_Distance_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B2_Lateral_Distance_2 and \ref GET_Objects_Signals_B2_Lateral_Distance_2 instead.
 */
#define SIG_Objects_Signals_B2_Lateral_Distance_2        0, 0, 22, 12

/**
 * Signal Lateral_Distance_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B2_Lateral_Distance_2 or \ref INIT_Objects_Signals_B2 instead.
 */
#define SETUP_Objects_Signals_B2_Lateral_Distance_2      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B2_Lateral_Distance_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B2_Lateral_Distance_2(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B2_Lateral_Distance_2(buf) \
	SET_Objects_Signals_B2_Lateral_Distance_2(buf, 0)

/**
 * Signal Lateral_Distance_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B2_Lateral_Distance_2(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_2 raw initial value.
 */
#define START_Objects_Signals_B2_Lateral_Distance_2      0

/**
 * Signal Lateral_Distance_2 raw minimum value.
 */
#define MIN_Objects_Signals_B2_Lateral_Distance_2        0

/**
 * Signal Lateral_Distance_2 raw maximum value.
 */
#define MAX_Objects_Signals_B2_Lateral_Distance_2        4094

/**
 * Signal Lateral_Distance_2 raw offset value.
 */
#define OFF_Objects_Signals_B2_Lateral_Distance_2        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B2_Reserved Signal Reserved of Message Objects_Signals_B2 (0x504)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B2
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B2_Reserved and \ref GET_Objects_Signals_B2_Reserved instead.
 */
#define SIG_Objects_Signals_B2_Reserved             0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B2_Reserved or \ref INIT_Objects_Signals_B2 instead.
 */
#define SETUP_Objects_Signals_B2_Reserved           0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B2_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B2_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B2_Reserved(buf) \
	SET_Objects_Signals_B2_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B2_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B2_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B2_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B2_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B2_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C2_Absolute_Speed_2 Signal Absolute_Speed_2 of Message Objects_Signals_C2 (0x505)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C2
 * @{
 */

/**
 * Signal Absolute_Speed_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C2_Absolute_Speed_2 and \ref GET_Objects_Signals_C2_Absolute_Speed_2 instead.
 */
#define SIG_Objects_Signals_C2_Absolute_Speed_2        0, 0, 0, 12

/**
 * Signal Absolute_Speed_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C2_Absolute_Speed_2 or \ref INIT_Objects_Signals_C2 instead.
 */
#define SETUP_Objects_Signals_C2_Absolute_Speed_2      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C2_Absolute_Speed_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C2_Absolute_Speed_2(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C2_Absolute_Speed_2(buf) \
	SET_Objects_Signals_C2_Absolute_Speed_2(buf, 0)

/**
 * Signal Absolute_Speed_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C2_Absolute_Speed_2(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_2 raw initial value.
 */
#define START_Objects_Signals_C2_Absolute_Speed_2      0

/**
 * Signal Absolute_Speed_2 raw minimum value.
 */
#define MIN_Objects_Signals_C2_Absolute_Speed_2        0

/**
 * Signal Absolute_Speed_2 raw maximum value.
 */
#define MAX_Objects_Signals_C2_Absolute_Speed_2        4000

/**
 * Signal Absolute_Speed_2 raw offset value.
 */
#define OFF_Objects_Signals_C2_Absolute_Speed_2        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C2_OBJ_Motion_Status_2 Signal OBJ_Motion_Status_2 of Message Objects_Signals_C2 (0x505)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C2_OBJ_Motion_Status_2.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C2
 * @{
 */

/**
 * Signal OBJ_Motion_Status_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C2_OBJ_Motion_Status_2 and \ref GET_Objects_Signals_C2_OBJ_Motion_Status_2 instead.
 */
#define SIG_Objects_Signals_C2_OBJ_Motion_Status_2        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C2_OBJ_Motion_Status_2 or \ref INIT_Objects_Signals_C2 instead.
 */
#define SETUP_Objects_Signals_C2_OBJ_Motion_Status_2      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C2_OBJ_Motion_Status_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C2_OBJ_Motion_Status_2(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C2_OBJ_Motion_Status_2(buf) \
	SET_Objects_Signals_C2_OBJ_Motion_Status_2(buf, 0)

/**
 * Signal OBJ_Motion_Status_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C2_OBJ_Motion_Status_2(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_2 raw initial value.
 */
#define START_Objects_Signals_C2_OBJ_Motion_Status_2      0

/**
 * Signal OBJ_Motion_Status_2 raw minimum value.
 */
#define MIN_Objects_Signals_C2_OBJ_Motion_Status_2        0

/**
 * Signal OBJ_Motion_Status_2 raw maximum value.
 */
#define MAX_Objects_Signals_C2_OBJ_Motion_Status_2        4

/**
 * Signal OBJ_Motion_Status_2 raw offset value.
 */
#define OFF_Objects_Signals_C2_OBJ_Motion_Status_2        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C2_OBJ_Motion_Status_2 Value Table for Signal OBJ_Motion_Status_2 in Message Objects_Signals_C2 (0x505)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C2_OBJ_Motion_Status_2.
 *
 * @ingroup SIG_Objects_Signals_C2_OBJ_Motion_Status_2
 */

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Status_2 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Status_2
 */
#define Objects_Signals_C2_OBJ_Motion_Status_2_Moving              4

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Status_2 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Status_2
 */
#define Objects_Signals_C2_OBJ_Motion_Status_2_Stopped             3

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Status_2 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Status_2
 */
#define Objects_Signals_C2_OBJ_Motion_Status_2_Stationary          2

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Status_2 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Status_2
 */
#define Objects_Signals_C2_OBJ_Motion_Status_2_Moving_1            1

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Status_2 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Status_2
 */
#define Objects_Signals_C2_OBJ_Motion_Status_2_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C2_OBJ_Motion_Category_2 Signal OBJ_Motion_Category_2 of Message Objects_Signals_C2 (0x505)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C2_OBJ_Motion_Category_2.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C2
 * @{
 */

/**
 * Signal OBJ_Motion_Category_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C2_OBJ_Motion_Category_2 and \ref GET_Objects_Signals_C2_OBJ_Motion_Category_2 instead.
 */
#define SIG_Objects_Signals_C2_OBJ_Motion_Category_2        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C2_OBJ_Motion_Category_2 or \ref INIT_Objects_Signals_C2 instead.
 */
#define SETUP_Objects_Signals_C2_OBJ_Motion_Category_2      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C2_OBJ_Motion_Category_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C2_OBJ_Motion_Category_2(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C2_OBJ_Motion_Category_2(buf) \
	SET_Objects_Signals_C2_OBJ_Motion_Category_2(buf, 0)

/**
 * Signal OBJ_Motion_Category_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C2_OBJ_Motion_Category_2(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_2 raw initial value.
 */
#define START_Objects_Signals_C2_OBJ_Motion_Category_2      0

/**
 * Signal OBJ_Motion_Category_2 raw minimum value.
 */
#define MIN_Objects_Signals_C2_OBJ_Motion_Category_2        0

/**
 * Signal OBJ_Motion_Category_2 raw maximum value.
 */
#define MAX_Objects_Signals_C2_OBJ_Motion_Category_2        12

/**
 * Signal OBJ_Motion_Category_2 raw offset value.
 */
#define OFF_Objects_Signals_C2_OBJ_Motion_Category_2        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2 Value Table for Signal OBJ_Motion_Category_2 in Message Objects_Signals_C2 (0x505)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C2_OBJ_Motion_Category_2.
 *
 * @ingroup SIG_Objects_Signals_C2_OBJ_Motion_Category_2
 */

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_MOVING           10

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_RTAP             9

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_LTAP             8

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_CROSSING         7

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_PASSING          1

/**
 * Value table Objects_Signals_C2_OBJ_Motion_Category_2 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C2_OBJ_Motion_Category_2
 */
#define Objects_Signals_C2_OBJ_Motion_Category_2_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C2_Brake_Light_2 Signal Brake_Light_2 of Message Objects_Signals_C2 (0x505)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C2_Brake_Light_2.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C2
 * @{
 */

/**
 * Signal Brake_Light_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C2_Brake_Light_2 and \ref GET_Objects_Signals_C2_Brake_Light_2 instead.
 */
#define SIG_Objects_Signals_C2_Brake_Light_2        0, 0, 19, 1

/**
 * Signal Brake_Light_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C2_Brake_Light_2 or \ref INIT_Objects_Signals_C2 instead.
 */
#define SETUP_Objects_Signals_C2_Brake_Light_2      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C2_Brake_Light_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C2_Brake_Light_2(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C2_Brake_Light_2(buf) \
	SET_Objects_Signals_C2_Brake_Light_2(buf, 0)

/**
 * Signal Brake_Light_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C2_Brake_Light_2(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_2 raw initial value.
 */
#define START_Objects_Signals_C2_Brake_Light_2      0

/**
 * Signal Brake_Light_2 raw minimum value.
 */
#define MIN_Objects_Signals_C2_Brake_Light_2        0

/**
 * Signal Brake_Light_2 raw maximum value.
 */
#define MAX_Objects_Signals_C2_Brake_Light_2        1

/**
 * Signal Brake_Light_2 raw offset value.
 */
#define OFF_Objects_Signals_C2_Brake_Light_2        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C2_Brake_Light_2 Value Table for Signal Brake_Light_2 in Message Objects_Signals_C2 (0x505)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C2_Brake_Light_2.
 *
 * @ingroup SIG_Objects_Signals_C2_Brake_Light_2
 */

/**
 * Value table Objects_Signals_C2_Brake_Light_2 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C2_Brake_Light_2
 */
#define Objects_Signals_C2_Brake_Light_2_On                  1

/**
 * Value table Objects_Signals_C2_Brake_Light_2 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C2_Brake_Light_2
 */
#define Objects_Signals_C2_Brake_Light_2_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C2_Turn_Indicator_Right_2 Signal Turn_Indicator_Right_2 of Message Objects_Signals_C2 (0x505)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C2_Turn_Indicator_Right_2.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C2
 * @{
 */

/**
 * Signal Turn_Indicator_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C2_Turn_Indicator_Right_2 and \ref GET_Objects_Signals_C2_Turn_Indicator_Right_2 instead.
 */
#define SIG_Objects_Signals_C2_Turn_Indicator_Right_2        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C2_Turn_Indicator_Right_2 or \ref INIT_Objects_Signals_C2 instead.
 */
#define SETUP_Objects_Signals_C2_Turn_Indicator_Right_2      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C2_Turn_Indicator_Right_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C2_Turn_Indicator_Right_2(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C2_Turn_Indicator_Right_2(buf) \
	SET_Objects_Signals_C2_Turn_Indicator_Right_2(buf, 0)

/**
 * Signal Turn_Indicator_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C2_Turn_Indicator_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_2 raw initial value.
 */
#define START_Objects_Signals_C2_Turn_Indicator_Right_2      0

/**
 * Signal Turn_Indicator_Right_2 raw minimum value.
 */
#define MIN_Objects_Signals_C2_Turn_Indicator_Right_2        0

/**
 * Signal Turn_Indicator_Right_2 raw maximum value.
 */
#define MAX_Objects_Signals_C2_Turn_Indicator_Right_2        1

/**
 * Signal Turn_Indicator_Right_2 raw offset value.
 */
#define OFF_Objects_Signals_C2_Turn_Indicator_Right_2        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C2_Turn_Indicator_Right_2 Value Table for Signal Turn_Indicator_Right_2 in Message Objects_Signals_C2 (0x505)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C2_Turn_Indicator_Right_2.
 *
 * @ingroup SIG_Objects_Signals_C2_Turn_Indicator_Right_2
 */

/**
 * Value table Objects_Signals_C2_Turn_Indicator_Right_2 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C2_Turn_Indicator_Right_2
 */
#define Objects_Signals_C2_Turn_Indicator_Right_2_On                  1

/**
 * Value table Objects_Signals_C2_Turn_Indicator_Right_2 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C2_Turn_Indicator_Right_2
 */
#define Objects_Signals_C2_Turn_Indicator_Right_2_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C2_Turn_Indicator_Left_2 Signal Turn_Indicator_Left_2 of Message Objects_Signals_C2 (0x505)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C2_Turn_Indicator_Left_2.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C2
 * @{
 */

/**
 * Signal Turn_Indicator_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C2_Turn_Indicator_Left_2 and \ref GET_Objects_Signals_C2_Turn_Indicator_Left_2 instead.
 */
#define SIG_Objects_Signals_C2_Turn_Indicator_Left_2        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C2_Turn_Indicator_Left_2 or \ref INIT_Objects_Signals_C2 instead.
 */
#define SETUP_Objects_Signals_C2_Turn_Indicator_Left_2      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C2_Turn_Indicator_Left_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C2_Turn_Indicator_Left_2(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C2_Turn_Indicator_Left_2(buf) \
	SET_Objects_Signals_C2_Turn_Indicator_Left_2(buf, 0)

/**
 * Signal Turn_Indicator_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C2_Turn_Indicator_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_2 raw initial value.
 */
#define START_Objects_Signals_C2_Turn_Indicator_Left_2      0

/**
 * Signal Turn_Indicator_Left_2 raw minimum value.
 */
#define MIN_Objects_Signals_C2_Turn_Indicator_Left_2        0

/**
 * Signal Turn_Indicator_Left_2 raw maximum value.
 */
#define MAX_Objects_Signals_C2_Turn_Indicator_Left_2        1

/**
 * Signal Turn_Indicator_Left_2 raw offset value.
 */
#define OFF_Objects_Signals_C2_Turn_Indicator_Left_2        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C2_Turn_Indicator_Left_2 Value Table for Signal Turn_Indicator_Left_2 in Message Objects_Signals_C2 (0x505)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C2_Turn_Indicator_Left_2.
 *
 * @ingroup SIG_Objects_Signals_C2_Turn_Indicator_Left_2
 */

/**
 * Value table Objects_Signals_C2_Turn_Indicator_Left_2 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C2_Turn_Indicator_Left_2
 */
#define Objects_Signals_C2_Turn_Indicator_Left_2_On                  1

/**
 * Value table Objects_Signals_C2_Turn_Indicator_Left_2 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C2_Turn_Indicator_Left_2
 */
#define Objects_Signals_C2_Turn_Indicator_Left_2_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C2_Light_indicator_validity_2 Signal Light_indicator_validity_2 of Message Objects_Signals_C2 (0x505)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C2_Light_indicator_validity_2.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C2
 * @{
 */

/**
 * Signal Light_indicator_validity_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C2_Light_indicator_validity_2 and \ref GET_Objects_Signals_C2_Light_indicator_validity_2 instead.
 */
#define SIG_Objects_Signals_C2_Light_indicator_validity_2        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C2_Light_indicator_validity_2 or \ref INIT_Objects_Signals_C2 instead.
 */
#define SETUP_Objects_Signals_C2_Light_indicator_validity_2      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C2_Light_indicator_validity_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C2_Light_indicator_validity_2(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C2_Light_indicator_validity_2(buf) \
	SET_Objects_Signals_C2_Light_indicator_validity_2(buf, 0)

/**
 * Signal Light_indicator_validity_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C2_Light_indicator_validity_2(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_2 raw initial value.
 */
#define START_Objects_Signals_C2_Light_indicator_validity_2      0

/**
 * Signal Light_indicator_validity_2 raw minimum value.
 */
#define MIN_Objects_Signals_C2_Light_indicator_validity_2        0

/**
 * Signal Light_indicator_validity_2 raw maximum value.
 */
#define MAX_Objects_Signals_C2_Light_indicator_validity_2        1

/**
 * Signal Light_indicator_validity_2 raw offset value.
 */
#define OFF_Objects_Signals_C2_Light_indicator_validity_2        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C2_Light_indicator_validity_2 Value Table for Signal Light_indicator_validity_2 in Message Objects_Signals_C2 (0x505)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C2_Light_indicator_validity_2.
 *
 * @ingroup SIG_Objects_Signals_C2_Light_indicator_validity_2
 */

/**
 * Value table Objects_Signals_C2_Light_indicator_validity_2 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C2_Light_indicator_validity_2
 */
#define Objects_Signals_C2_Light_indicator_validity_2_True                1

/**
 * Value table Objects_Signals_C2_Light_indicator_validity_2 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C2_Light_indicator_validity_2
 */
#define Objects_Signals_C2_Light_indicator_validity_2_False               0

/**
 * @defgroup SIG_Objects_Signals_C2_OBJ_Angle_Mid_2 Signal OBJ_Angle_Mid_2 of Message Objects_Signals_C2 (0x505)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C2
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C2_OBJ_Angle_Mid_2 and \ref GET_Objects_Signals_C2_OBJ_Angle_Mid_2 instead.
 */
#define SIG_Objects_Signals_C2_OBJ_Angle_Mid_2        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C2_OBJ_Angle_Mid_2 or \ref INIT_Objects_Signals_C2 instead.
 */
#define SETUP_Objects_Signals_C2_OBJ_Angle_Mid_2      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C2_OBJ_Angle_Mid_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C2_OBJ_Angle_Mid_2(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C2_OBJ_Angle_Mid_2(buf) \
	SET_Objects_Signals_C2_OBJ_Angle_Mid_2(buf, 0)

/**
 * Signal OBJ_Angle_Mid_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C2_OBJ_Angle_Mid_2(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_2 raw initial value.
 */
#define START_Objects_Signals_C2_OBJ_Angle_Mid_2      0

/**
 * Signal OBJ_Angle_Mid_2 raw minimum value.
 */
#define MIN_Objects_Signals_C2_OBJ_Angle_Mid_2        0

/**
 * Signal OBJ_Angle_Mid_2 raw maximum value.
 */
#define MAX_Objects_Signals_C2_OBJ_Angle_Mid_2        15710

/**
 * Signal OBJ_Angle_Mid_2 raw offset value.
 */
#define OFF_Objects_Signals_C2_OBJ_Angle_Mid_2        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C2_OBJ_Angle_Rate_2 Signal OBJ_Angle_Rate_2 of Message Objects_Signals_C2 (0x505)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C2
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C2_OBJ_Angle_Rate_2 and \ref GET_Objects_Signals_C2_OBJ_Angle_Rate_2 instead.
 */
#define SIG_Objects_Signals_C2_OBJ_Angle_Rate_2        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C2_OBJ_Angle_Rate_2 or \ref INIT_Objects_Signals_C2 instead.
 */
#define SETUP_Objects_Signals_C2_OBJ_Angle_Rate_2      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C2_OBJ_Angle_Rate_2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C2_OBJ_Angle_Rate_2(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C2_OBJ_Angle_Rate_2(buf) \
	SET_Objects_Signals_C2_OBJ_Angle_Rate_2(buf, 0)

/**
 * Signal OBJ_Angle_Rate_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C2_OBJ_Angle_Rate_2(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_2 raw initial value.
 */
#define START_Objects_Signals_C2_OBJ_Angle_Rate_2      0

/**
 * Signal OBJ_Angle_Rate_2 raw minimum value.
 */
#define MIN_Objects_Signals_C2_OBJ_Angle_Rate_2        0

/**
 * Signal OBJ_Angle_Rate_2 raw maximum value.
 */
#define MAX_Objects_Signals_C2_OBJ_Angle_Rate_2        2233

/**
 * Signal OBJ_Angle_Rate_2 raw offset value.
 */
#define OFF_Objects_Signals_C2_OBJ_Angle_Rate_2        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C2_Reserved Signal Reserved of Message Objects_Signals_C2 (0x505)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C2
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C2_Reserved and \ref GET_Objects_Signals_C2_Reserved instead.
 */
#define SIG_Objects_Signals_C2_Reserved             0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C2_Reserved or \ref INIT_Objects_Signals_C2 instead.
 */
#define SETUP_Objects_Signals_C2_Reserved           0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C2_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C2_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C2_Reserved(buf) \
	SET_Objects_Signals_C2_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C2_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C2_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C2_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C2_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C2_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A3_Obj_ID_3 Signal Obj_ID_3 of Message Objects_Signals_A3 (0x506)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A3
 * @{
 */

/**
 * Signal Obj_ID_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A3_Obj_ID_3 and \ref GET_Objects_Signals_A3_Obj_ID_3 instead.
 */
#define SIG_Objects_Signals_A3_Obj_ID_3             0, 0, 0, 7

/**
 * Signal Obj_ID_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A3_Obj_ID_3 or \ref INIT_Objects_Signals_A3 instead.
 */
#define SETUP_Objects_Signals_A3_Obj_ID_3           0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A3_Obj_ID_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A3_Obj_ID_3(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A3_Obj_ID_3(buf) \
	SET_Objects_Signals_A3_Obj_ID_3(buf, 0)

/**
 * Signal Obj_ID_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A3_Obj_ID_3(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_3 raw initial value.
 */
#define START_Objects_Signals_A3_Obj_ID_3           0

/**
 * Signal Obj_ID_3 raw minimum value.
 */
#define MIN_Objects_Signals_A3_Obj_ID_3             0

/**
 * Signal Obj_ID_3 raw maximum value.
 */
#define MAX_Objects_Signals_A3_Obj_ID_3             127

/**
 * Signal Obj_ID_3 raw offset value.
 */
#define OFF_Objects_Signals_A3_Obj_ID_3             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A3_Object_Class_3 Signal Object_Class_3 of Message Objects_Signals_A3 (0x506)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A3_Object_Class_3.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A3
 * @{
 */

/**
 * Signal Object_Class_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A3_Object_Class_3 and \ref GET_Objects_Signals_A3_Object_Class_3 instead.
 */
#define SIG_Objects_Signals_A3_Object_Class_3        0, 0, 7, 3

/**
 * Signal Object_Class_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A3_Object_Class_3 or \ref INIT_Objects_Signals_A3 instead.
 */
#define SETUP_Objects_Signals_A3_Object_Class_3      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A3_Object_Class_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A3_Object_Class_3(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A3_Object_Class_3(buf) \
	SET_Objects_Signals_A3_Object_Class_3(buf, 0)

/**
 * Signal Object_Class_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A3_Object_Class_3(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_3 raw initial value.
 */
#define START_Objects_Signals_A3_Object_Class_3      0

/**
 * Signal Object_Class_3 raw minimum value.
 */
#define MIN_Objects_Signals_A3_Object_Class_3        0

/**
 * Signal Object_Class_3 raw maximum value.
 */
#define MAX_Objects_Signals_A3_Object_Class_3        7

/**
 * Signal Object_Class_3 raw offset value.
 */
#define OFF_Objects_Signals_A3_Object_Class_3        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A3_Object_Class_3 Value Table for Signal Object_Class_3 in Message Objects_Signals_A3 (0x506)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A3_Object_Class_3.
 *
 * @ingroup SIG_Objects_Signals_A3_Object_Class_3
 */

/**
 * Value table Objects_Signals_A3_Object_Class_3 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A3_Object_Class_3
 */
#define Objects_Signals_A3_Object_Class_3_uncertain_vcl       7

/**
 * Value table Objects_Signals_A3_Object_Class_3 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A3_Object_Class_3
 */
#define Objects_Signals_A3_Object_Class_3_animal              6

/**
 * Value table Objects_Signals_A3_Object_Class_3 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A3_Object_Class_3
 */
#define Objects_Signals_A3_Object_Class_3_general_object      5

/**
 * Value table Objects_Signals_A3_Object_Class_3 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A3_Object_Class_3
 */
#define Objects_Signals_A3_Object_Class_3_pedestrian          4

/**
 * Value table Objects_Signals_A3_Object_Class_3 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A3_Object_Class_3
 */
#define Objects_Signals_A3_Object_Class_3_bicycle             3

/**
 * Value table Objects_Signals_A3_Object_Class_3 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A3_Object_Class_3
 */
#define Objects_Signals_A3_Object_Class_3_bike                2

/**
 * Value table Objects_Signals_A3_Object_Class_3 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A3_Object_Class_3
 */
#define Objects_Signals_A3_Object_Class_3_truck               1

/**
 * Value table Objects_Signals_A3_Object_Class_3 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A3_Object_Class_3
 */
#define Objects_Signals_A3_Object_Class_3_car                 0

/**
 * @defgroup SIG_Objects_Signals_A3_OBJ_Width_3 Signal OBJ_Width_3 of Message Objects_Signals_A3 (0x506)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A3
 * @{
 */

/**
 * Signal OBJ_Width_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A3_OBJ_Width_3 and \ref GET_Objects_Signals_A3_OBJ_Width_3 instead.
 */
#define SIG_Objects_Signals_A3_OBJ_Width_3          0, 0, 10, 7

/**
 * Signal OBJ_Width_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A3_OBJ_Width_3 or \ref INIT_Objects_Signals_A3 instead.
 */
#define SETUP_Objects_Signals_A3_OBJ_Width_3        0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A3_OBJ_Width_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A3_OBJ_Width_3(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A3_OBJ_Width_3(buf) \
	SET_Objects_Signals_A3_OBJ_Width_3(buf, 0)

/**
 * Signal OBJ_Width_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A3_OBJ_Width_3(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_3 raw initial value.
 */
#define START_Objects_Signals_A3_OBJ_Width_3        0

/**
 * Signal OBJ_Width_3 raw minimum value.
 */
#define MIN_Objects_Signals_A3_OBJ_Width_3          0

/**
 * Signal OBJ_Width_3 raw maximum value.
 */
#define MAX_Objects_Signals_A3_OBJ_Width_3          127

/**
 * Signal OBJ_Width_3 raw offset value.
 */
#define OFF_Objects_Signals_A3_OBJ_Width_3          0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A3_OBJ_Length_3 Signal OBJ_Length_3 of Message Objects_Signals_A3 (0x506)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A3
 * @{
 */

/**
 * Signal OBJ_Length_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A3_OBJ_Length_3 and \ref GET_Objects_Signals_A3_OBJ_Length_3 instead.
 */
#define SIG_Objects_Signals_A3_OBJ_Length_3         0, 0, 17, 9

/**
 * Signal OBJ_Length_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A3_OBJ_Length_3 or \ref INIT_Objects_Signals_A3 instead.
 */
#define SETUP_Objects_Signals_A3_OBJ_Length_3       0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A3_OBJ_Length_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A3_OBJ_Length_3(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A3_OBJ_Length_3(buf) \
	SET_Objects_Signals_A3_OBJ_Length_3(buf, 0)

/**
 * Signal OBJ_Length_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A3_OBJ_Length_3(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_3 raw initial value.
 */
#define START_Objects_Signals_A3_OBJ_Length_3       0

/**
 * Signal OBJ_Length_3 raw minimum value.
 */
#define MIN_Objects_Signals_A3_OBJ_Length_3         0

/**
 * Signal OBJ_Length_3 raw maximum value.
 */
#define MAX_Objects_Signals_A3_OBJ_Length_3         510

/**
 * Signal OBJ_Length_3 raw offset value.
 */
#define OFF_Objects_Signals_A3_OBJ_Length_3         0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A3_Relative_Long_Velocity_3 Signal Relative_Long_Velocity_3 of Message Objects_Signals_A3 (0x506)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A3
 * @{
 */

/**
 * Signal Relative_Long_Velocity_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A3_Relative_Long_Velocity_3 and \ref GET_Objects_Signals_A3_Relative_Long_Velocity_3 instead.
 */
#define SIG_Objects_Signals_A3_Relative_Long_Velocity_3        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A3_Relative_Long_Velocity_3 or \ref INIT_Objects_Signals_A3 instead.
 */
#define SETUP_Objects_Signals_A3_Relative_Long_Velocity_3      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A3_Relative_Long_Velocity_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A3_Relative_Long_Velocity_3(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A3_Relative_Long_Velocity_3(buf) \
	SET_Objects_Signals_A3_Relative_Long_Velocity_3(buf, 0)

/**
 * Signal Relative_Long_Velocity_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A3_Relative_Long_Velocity_3(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_3 raw initial value.
 */
#define START_Objects_Signals_A3_Relative_Long_Velocity_3      0

/**
 * Signal Relative_Long_Velocity_3 raw minimum value.
 */
#define MIN_Objects_Signals_A3_Relative_Long_Velocity_3        0

/**
 * Signal Relative_Long_Velocity_3 raw maximum value.
 */
#define MAX_Objects_Signals_A3_Relative_Long_Velocity_3        5000

/**
 * Signal Relative_Long_Velocity_3 raw offset value.
 */
#define OFF_Objects_Signals_A3_Relative_Long_Velocity_3        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A3_OBJ_Lane_Assignment_3 Signal OBJ_Lane_Assignment_3 of Message Objects_Signals_A3 (0x506)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A3_OBJ_Lane_Assignment_3.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A3
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A3_OBJ_Lane_Assignment_3 and \ref GET_Objects_Signals_A3_OBJ_Lane_Assignment_3 instead.
 */
#define SIG_Objects_Signals_A3_OBJ_Lane_Assignment_3        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A3_OBJ_Lane_Assignment_3 or \ref INIT_Objects_Signals_A3 instead.
 */
#define SETUP_Objects_Signals_A3_OBJ_Lane_Assignment_3      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A3_OBJ_Lane_Assignment_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A3_OBJ_Lane_Assignment_3(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A3_OBJ_Lane_Assignment_3(buf) \
	SET_Objects_Signals_A3_OBJ_Lane_Assignment_3(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A3_OBJ_Lane_Assignment_3(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_3 raw initial value.
 */
#define START_Objects_Signals_A3_OBJ_Lane_Assignment_3      0

/**
 * Signal OBJ_Lane_Assignment_3 raw minimum value.
 */
#define MIN_Objects_Signals_A3_OBJ_Lane_Assignment_3        0

/**
 * Signal OBJ_Lane_Assignment_3 raw maximum value.
 */
#define MAX_Objects_Signals_A3_OBJ_Lane_Assignment_3        5

/**
 * Signal OBJ_Lane_Assignment_3 raw offset value.
 */
#define OFF_Objects_Signals_A3_OBJ_Lane_Assignment_3        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A3_OBJ_Lane_Assignment_3 Value Table for Signal OBJ_Lane_Assignment_3 in Message Objects_Signals_A3 (0x506)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A3_OBJ_Lane_Assignment_3.
 *
 * @ingroup SIG_Objects_Signals_A3_OBJ_Lane_Assignment_3
 */

/**
 * Value table Objects_Signals_A3_OBJ_Lane_Assignment_3 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A3_OBJ_Lane_Assignment_3
 */
#define Objects_Signals_A3_OBJ_Lane_Assignment_3_Not                 5

/**
 * Value table Objects_Signals_A3_OBJ_Lane_Assignment_3 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A3_OBJ_Lane_Assignment_3
 */
#define Objects_Signals_A3_OBJ_Lane_Assignment_3_Next                4

/**
 * Value table Objects_Signals_A3_OBJ_Lane_Assignment_3 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A3_OBJ_Lane_Assignment_3
 */
#define Objects_Signals_A3_OBJ_Lane_Assignment_3_Right               3

/**
 * Value table Objects_Signals_A3_OBJ_Lane_Assignment_3 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A3_OBJ_Lane_Assignment_3
 */
#define Objects_Signals_A3_OBJ_Lane_Assignment_3_Ego                 2

/**
 * Value table Objects_Signals_A3_OBJ_Lane_Assignment_3 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A3_OBJ_Lane_Assignment_3
 */
#define Objects_Signals_A3_OBJ_Lane_Assignment_3_Left                1

/**
 * Value table Objects_Signals_A3_OBJ_Lane_Assignment_3 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A3_OBJ_Lane_Assignment_3
 */
#define Objects_Signals_A3_OBJ_Lane_Assignment_3_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A3_Relative_Lat_Velocity_3 Signal Relative_Lat_Velocity_3 of Message Objects_Signals_A3 (0x506)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A3
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A3_Relative_Lat_Velocity_3 and \ref GET_Objects_Signals_A3_Relative_Lat_Velocity_3 instead.
 */
#define SIG_Objects_Signals_A3_Relative_Lat_Velocity_3        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A3_Relative_Lat_Velocity_3 or \ref INIT_Objects_Signals_A3 instead.
 */
#define SETUP_Objects_Signals_A3_Relative_Lat_Velocity_3      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A3_Relative_Lat_Velocity_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A3_Relative_Lat_Velocity_3(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A3_Relative_Lat_Velocity_3(buf) \
	SET_Objects_Signals_A3_Relative_Lat_Velocity_3(buf, 0)

/**
 * Signal Relative_Lat_Velocity_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A3_Relative_Lat_Velocity_3(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_3 raw initial value.
 */
#define START_Objects_Signals_A3_Relative_Lat_Velocity_3      0

/**
 * Signal Relative_Lat_Velocity_3 raw minimum value.
 */
#define MIN_Objects_Signals_A3_Relative_Lat_Velocity_3        0

/**
 * Signal Relative_Lat_Velocity_3 raw maximum value.
 */
#define MAX_Objects_Signals_A3_Relative_Lat_Velocity_3        2000

/**
 * Signal Relative_Lat_Velocity_3 raw offset value.
 */
#define OFF_Objects_Signals_A3_Relative_Lat_Velocity_3        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A3_Reserved Signal Reserved of Message Objects_Signals_A3 (0x506)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A3
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A3_Reserved and \ref GET_Objects_Signals_A3_Reserved instead.
 */
#define SIG_Objects_Signals_A3_Reserved             0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A3_Reserved or \ref INIT_Objects_Signals_A3 instead.
 */
#define SETUP_Objects_Signals_A3_Reserved           0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A3_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A3_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A3_Reserved(buf) \
	SET_Objects_Signals_A3_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A3_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A3_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A3_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A3_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A3_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B3_Absolute_Long_Acc_3 Signal Absolute_Long_Acc_3 of Message Objects_Signals_B3 (0x507)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B3
 * @{
 */

/**
 * Signal Absolute_Long_Acc_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B3_Absolute_Long_Acc_3 and \ref GET_Objects_Signals_B3_Absolute_Long_Acc_3 instead.
 */
#define SIG_Objects_Signals_B3_Absolute_Long_Acc_3        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B3_Absolute_Long_Acc_3 or \ref INIT_Objects_Signals_B3 instead.
 */
#define SETUP_Objects_Signals_B3_Absolute_Long_Acc_3      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B3_Absolute_Long_Acc_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B3_Absolute_Long_Acc_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B3_Absolute_Long_Acc_3(buf) \
	SET_Objects_Signals_B3_Absolute_Long_Acc_3(buf, 0)

/**
 * Signal Absolute_Long_Acc_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B3_Absolute_Long_Acc_3(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_3 raw initial value.
 */
#define START_Objects_Signals_B3_Absolute_Long_Acc_3      0

/**
 * Signal Absolute_Long_Acc_3 raw minimum value.
 */
#define MIN_Objects_Signals_B3_Absolute_Long_Acc_3        0

/**
 * Signal Absolute_Long_Acc_3 raw maximum value.
 */
#define MAX_Objects_Signals_B3_Absolute_Long_Acc_3        511

/**
 * Signal Absolute_Long_Acc_3 raw offset value.
 */
#define OFF_Objects_Signals_B3_Absolute_Long_Acc_3        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B3_Long_Distance_3 Signal Long_Distance_3 of Message Objects_Signals_B3 (0x507)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B3
 * @{
 */

/**
 * Signal Long_Distance_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B3_Long_Distance_3 and \ref GET_Objects_Signals_B3_Long_Distance_3 instead.
 */
#define SIG_Objects_Signals_B3_Long_Distance_3        0, 0, 9, 13

/**
 * Signal Long_Distance_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B3_Long_Distance_3 or \ref INIT_Objects_Signals_B3 instead.
 */
#define SETUP_Objects_Signals_B3_Long_Distance_3      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B3_Long_Distance_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B3_Long_Distance_3(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B3_Long_Distance_3(buf) \
	SET_Objects_Signals_B3_Long_Distance_3(buf, 0)

/**
 * Signal Long_Distance_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B3_Long_Distance_3(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_3 raw initial value.
 */
#define START_Objects_Signals_B3_Long_Distance_3      0

/**
 * Signal Long_Distance_3 raw minimum value.
 */
#define MIN_Objects_Signals_B3_Long_Distance_3        0

/**
 * Signal Long_Distance_3 raw maximum value.
 */
#define MAX_Objects_Signals_B3_Long_Distance_3        7000

/**
 * Signal Long_Distance_3 raw offset value.
 */
#define OFF_Objects_Signals_B3_Long_Distance_3        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B3_Lateral_Distance_3 Signal Lateral_Distance_3 of Message Objects_Signals_B3 (0x507)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B3
 * @{
 */

/**
 * Signal Lateral_Distance_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B3_Lateral_Distance_3 and \ref GET_Objects_Signals_B3_Lateral_Distance_3 instead.
 */
#define SIG_Objects_Signals_B3_Lateral_Distance_3        0, 0, 22, 12

/**
 * Signal Lateral_Distance_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B3_Lateral_Distance_3 or \ref INIT_Objects_Signals_B3 instead.
 */
#define SETUP_Objects_Signals_B3_Lateral_Distance_3      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B3_Lateral_Distance_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B3_Lateral_Distance_3(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B3_Lateral_Distance_3(buf) \
	SET_Objects_Signals_B3_Lateral_Distance_3(buf, 0)

/**
 * Signal Lateral_Distance_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B3_Lateral_Distance_3(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_3 raw initial value.
 */
#define START_Objects_Signals_B3_Lateral_Distance_3      0

/**
 * Signal Lateral_Distance_3 raw minimum value.
 */
#define MIN_Objects_Signals_B3_Lateral_Distance_3        0

/**
 * Signal Lateral_Distance_3 raw maximum value.
 */
#define MAX_Objects_Signals_B3_Lateral_Distance_3        4094

/**
 * Signal Lateral_Distance_3 raw offset value.
 */
#define OFF_Objects_Signals_B3_Lateral_Distance_3        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B3_Reserved Signal Reserved of Message Objects_Signals_B3 (0x507)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B3
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B3_Reserved and \ref GET_Objects_Signals_B3_Reserved instead.
 */
#define SIG_Objects_Signals_B3_Reserved             0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B3_Reserved or \ref INIT_Objects_Signals_B3 instead.
 */
#define SETUP_Objects_Signals_B3_Reserved           0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B3_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B3_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B3_Reserved(buf) \
	SET_Objects_Signals_B3_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B3_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B3_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B3_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B3_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B3_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C3_Absolute_Speed_3 Signal Absolute_Speed_3 of Message Objects_Signals_C3 (0x508)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C3
 * @{
 */

/**
 * Signal Absolute_Speed_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C3_Absolute_Speed_3 and \ref GET_Objects_Signals_C3_Absolute_Speed_3 instead.
 */
#define SIG_Objects_Signals_C3_Absolute_Speed_3        0, 0, 0, 12

/**
 * Signal Absolute_Speed_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C3_Absolute_Speed_3 or \ref INIT_Objects_Signals_C3 instead.
 */
#define SETUP_Objects_Signals_C3_Absolute_Speed_3      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C3_Absolute_Speed_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C3_Absolute_Speed_3(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C3_Absolute_Speed_3(buf) \
	SET_Objects_Signals_C3_Absolute_Speed_3(buf, 0)

/**
 * Signal Absolute_Speed_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C3_Absolute_Speed_3(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_3 raw initial value.
 */
#define START_Objects_Signals_C3_Absolute_Speed_3      0

/**
 * Signal Absolute_Speed_3 raw minimum value.
 */
#define MIN_Objects_Signals_C3_Absolute_Speed_3        0

/**
 * Signal Absolute_Speed_3 raw maximum value.
 */
#define MAX_Objects_Signals_C3_Absolute_Speed_3        4000

/**
 * Signal Absolute_Speed_3 raw offset value.
 */
#define OFF_Objects_Signals_C3_Absolute_Speed_3        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C3_OBJ_Motion_Status_3 Signal OBJ_Motion_Status_3 of Message Objects_Signals_C3 (0x508)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C3_OBJ_Motion_Status_3.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C3
 * @{
 */

/**
 * Signal OBJ_Motion_Status_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C3_OBJ_Motion_Status_3 and \ref GET_Objects_Signals_C3_OBJ_Motion_Status_3 instead.
 */
#define SIG_Objects_Signals_C3_OBJ_Motion_Status_3        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C3_OBJ_Motion_Status_3 or \ref INIT_Objects_Signals_C3 instead.
 */
#define SETUP_Objects_Signals_C3_OBJ_Motion_Status_3      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C3_OBJ_Motion_Status_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C3_OBJ_Motion_Status_3(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C3_OBJ_Motion_Status_3(buf) \
	SET_Objects_Signals_C3_OBJ_Motion_Status_3(buf, 0)

/**
 * Signal OBJ_Motion_Status_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C3_OBJ_Motion_Status_3(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_3 raw initial value.
 */
#define START_Objects_Signals_C3_OBJ_Motion_Status_3      0

/**
 * Signal OBJ_Motion_Status_3 raw minimum value.
 */
#define MIN_Objects_Signals_C3_OBJ_Motion_Status_3        0

/**
 * Signal OBJ_Motion_Status_3 raw maximum value.
 */
#define MAX_Objects_Signals_C3_OBJ_Motion_Status_3        4

/**
 * Signal OBJ_Motion_Status_3 raw offset value.
 */
#define OFF_Objects_Signals_C3_OBJ_Motion_Status_3        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C3_OBJ_Motion_Status_3 Value Table for Signal OBJ_Motion_Status_3 in Message Objects_Signals_C3 (0x508)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C3_OBJ_Motion_Status_3.
 *
 * @ingroup SIG_Objects_Signals_C3_OBJ_Motion_Status_3
 */

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Status_3 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Status_3
 */
#define Objects_Signals_C3_OBJ_Motion_Status_3_Moving              4

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Status_3 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Status_3
 */
#define Objects_Signals_C3_OBJ_Motion_Status_3_Stopped             3

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Status_3 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Status_3
 */
#define Objects_Signals_C3_OBJ_Motion_Status_3_Stationary          2

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Status_3 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Status_3
 */
#define Objects_Signals_C3_OBJ_Motion_Status_3_Moving_1            1

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Status_3 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Status_3
 */
#define Objects_Signals_C3_OBJ_Motion_Status_3_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C3_OBJ_Motion_Category_3 Signal OBJ_Motion_Category_3 of Message Objects_Signals_C3 (0x508)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C3_OBJ_Motion_Category_3.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C3
 * @{
 */

/**
 * Signal OBJ_Motion_Category_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C3_OBJ_Motion_Category_3 and \ref GET_Objects_Signals_C3_OBJ_Motion_Category_3 instead.
 */
#define SIG_Objects_Signals_C3_OBJ_Motion_Category_3        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C3_OBJ_Motion_Category_3 or \ref INIT_Objects_Signals_C3 instead.
 */
#define SETUP_Objects_Signals_C3_OBJ_Motion_Category_3      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C3_OBJ_Motion_Category_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C3_OBJ_Motion_Category_3(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C3_OBJ_Motion_Category_3(buf) \
	SET_Objects_Signals_C3_OBJ_Motion_Category_3(buf, 0)

/**
 * Signal OBJ_Motion_Category_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C3_OBJ_Motion_Category_3(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_3 raw initial value.
 */
#define START_Objects_Signals_C3_OBJ_Motion_Category_3      0

/**
 * Signal OBJ_Motion_Category_3 raw minimum value.
 */
#define MIN_Objects_Signals_C3_OBJ_Motion_Category_3        0

/**
 * Signal OBJ_Motion_Category_3 raw maximum value.
 */
#define MAX_Objects_Signals_C3_OBJ_Motion_Category_3        12

/**
 * Signal OBJ_Motion_Category_3 raw offset value.
 */
#define OFF_Objects_Signals_C3_OBJ_Motion_Category_3        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3 Value Table for Signal OBJ_Motion_Category_3 in Message Objects_Signals_C3 (0x508)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C3_OBJ_Motion_Category_3.
 *
 * @ingroup SIG_Objects_Signals_C3_OBJ_Motion_Category_3
 */

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_MOVING           10

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_RTAP             9

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_LTAP             8

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_CROSSING         7

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_PASSING          1

/**
 * Value table Objects_Signals_C3_OBJ_Motion_Category_3 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C3_OBJ_Motion_Category_3
 */
#define Objects_Signals_C3_OBJ_Motion_Category_3_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C3_Brake_Light_3 Signal Brake_Light_3 of Message Objects_Signals_C3 (0x508)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C3_Brake_Light_3.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C3
 * @{
 */

/**
 * Signal Brake_Light_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C3_Brake_Light_3 and \ref GET_Objects_Signals_C3_Brake_Light_3 instead.
 */
#define SIG_Objects_Signals_C3_Brake_Light_3        0, 0, 19, 1

/**
 * Signal Brake_Light_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C3_Brake_Light_3 or \ref INIT_Objects_Signals_C3 instead.
 */
#define SETUP_Objects_Signals_C3_Brake_Light_3      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C3_Brake_Light_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C3_Brake_Light_3(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C3_Brake_Light_3(buf) \
	SET_Objects_Signals_C3_Brake_Light_3(buf, 0)

/**
 * Signal Brake_Light_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C3_Brake_Light_3(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_3 raw initial value.
 */
#define START_Objects_Signals_C3_Brake_Light_3      0

/**
 * Signal Brake_Light_3 raw minimum value.
 */
#define MIN_Objects_Signals_C3_Brake_Light_3        0

/**
 * Signal Brake_Light_3 raw maximum value.
 */
#define MAX_Objects_Signals_C3_Brake_Light_3        1

/**
 * Signal Brake_Light_3 raw offset value.
 */
#define OFF_Objects_Signals_C3_Brake_Light_3        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C3_Brake_Light_3 Value Table for Signal Brake_Light_3 in Message Objects_Signals_C3 (0x508)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C3_Brake_Light_3.
 *
 * @ingroup SIG_Objects_Signals_C3_Brake_Light_3
 */

/**
 * Value table Objects_Signals_C3_Brake_Light_3 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C3_Brake_Light_3
 */
#define Objects_Signals_C3_Brake_Light_3_On                  1

/**
 * Value table Objects_Signals_C3_Brake_Light_3 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C3_Brake_Light_3
 */
#define Objects_Signals_C3_Brake_Light_3_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C3_Turn_Indicator_Right_3 Signal Turn_Indicator_Right_3 of Message Objects_Signals_C3 (0x508)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C3_Turn_Indicator_Right_3.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C3
 * @{
 */

/**
 * Signal Turn_Indicator_Right_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C3_Turn_Indicator_Right_3 and \ref GET_Objects_Signals_C3_Turn_Indicator_Right_3 instead.
 */
#define SIG_Objects_Signals_C3_Turn_Indicator_Right_3        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C3_Turn_Indicator_Right_3 or \ref INIT_Objects_Signals_C3 instead.
 */
#define SETUP_Objects_Signals_C3_Turn_Indicator_Right_3      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C3_Turn_Indicator_Right_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C3_Turn_Indicator_Right_3(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C3_Turn_Indicator_Right_3(buf) \
	SET_Objects_Signals_C3_Turn_Indicator_Right_3(buf, 0)

/**
 * Signal Turn_Indicator_Right_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C3_Turn_Indicator_Right_3(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_3 raw initial value.
 */
#define START_Objects_Signals_C3_Turn_Indicator_Right_3      0

/**
 * Signal Turn_Indicator_Right_3 raw minimum value.
 */
#define MIN_Objects_Signals_C3_Turn_Indicator_Right_3        0

/**
 * Signal Turn_Indicator_Right_3 raw maximum value.
 */
#define MAX_Objects_Signals_C3_Turn_Indicator_Right_3        1

/**
 * Signal Turn_Indicator_Right_3 raw offset value.
 */
#define OFF_Objects_Signals_C3_Turn_Indicator_Right_3        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C3_Turn_Indicator_Right_3 Value Table for Signal Turn_Indicator_Right_3 in Message Objects_Signals_C3 (0x508)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C3_Turn_Indicator_Right_3.
 *
 * @ingroup SIG_Objects_Signals_C3_Turn_Indicator_Right_3
 */

/**
 * Value table Objects_Signals_C3_Turn_Indicator_Right_3 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C3_Turn_Indicator_Right_3
 */
#define Objects_Signals_C3_Turn_Indicator_Right_3_On                  1

/**
 * Value table Objects_Signals_C3_Turn_Indicator_Right_3 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C3_Turn_Indicator_Right_3
 */
#define Objects_Signals_C3_Turn_Indicator_Right_3_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C3_Turn_Indicator_Left_3 Signal Turn_Indicator_Left_3 of Message Objects_Signals_C3 (0x508)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C3_Turn_Indicator_Left_3.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C3
 * @{
 */

/**
 * Signal Turn_Indicator_Left_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C3_Turn_Indicator_Left_3 and \ref GET_Objects_Signals_C3_Turn_Indicator_Left_3 instead.
 */
#define SIG_Objects_Signals_C3_Turn_Indicator_Left_3        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C3_Turn_Indicator_Left_3 or \ref INIT_Objects_Signals_C3 instead.
 */
#define SETUP_Objects_Signals_C3_Turn_Indicator_Left_3      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C3_Turn_Indicator_Left_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C3_Turn_Indicator_Left_3(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C3_Turn_Indicator_Left_3(buf) \
	SET_Objects_Signals_C3_Turn_Indicator_Left_3(buf, 0)

/**
 * Signal Turn_Indicator_Left_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C3_Turn_Indicator_Left_3(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_3 raw initial value.
 */
#define START_Objects_Signals_C3_Turn_Indicator_Left_3      0

/**
 * Signal Turn_Indicator_Left_3 raw minimum value.
 */
#define MIN_Objects_Signals_C3_Turn_Indicator_Left_3        0

/**
 * Signal Turn_Indicator_Left_3 raw maximum value.
 */
#define MAX_Objects_Signals_C3_Turn_Indicator_Left_3        1

/**
 * Signal Turn_Indicator_Left_3 raw offset value.
 */
#define OFF_Objects_Signals_C3_Turn_Indicator_Left_3        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C3_Turn_Indicator_Left_3 Value Table for Signal Turn_Indicator_Left_3 in Message Objects_Signals_C3 (0x508)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C3_Turn_Indicator_Left_3.
 *
 * @ingroup SIG_Objects_Signals_C3_Turn_Indicator_Left_3
 */

/**
 * Value table Objects_Signals_C3_Turn_Indicator_Left_3 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C3_Turn_Indicator_Left_3
 */
#define Objects_Signals_C3_Turn_Indicator_Left_3_On                  1

/**
 * Value table Objects_Signals_C3_Turn_Indicator_Left_3 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C3_Turn_Indicator_Left_3
 */
#define Objects_Signals_C3_Turn_Indicator_Left_3_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C3_Light_indicator_validity_3 Signal Light_indicator_validity_3 of Message Objects_Signals_C3 (0x508)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C3_Light_indicator_validity_3.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C3
 * @{
 */

/**
 * Signal Light_indicator_validity_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C3_Light_indicator_validity_3 and \ref GET_Objects_Signals_C3_Light_indicator_validity_3 instead.
 */
#define SIG_Objects_Signals_C3_Light_indicator_validity_3        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C3_Light_indicator_validity_3 or \ref INIT_Objects_Signals_C3 instead.
 */
#define SETUP_Objects_Signals_C3_Light_indicator_validity_3      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C3_Light_indicator_validity_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C3_Light_indicator_validity_3(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C3_Light_indicator_validity_3(buf) \
	SET_Objects_Signals_C3_Light_indicator_validity_3(buf, 0)

/**
 * Signal Light_indicator_validity_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C3_Light_indicator_validity_3(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_3 raw initial value.
 */
#define START_Objects_Signals_C3_Light_indicator_validity_3      0

/**
 * Signal Light_indicator_validity_3 raw minimum value.
 */
#define MIN_Objects_Signals_C3_Light_indicator_validity_3        0

/**
 * Signal Light_indicator_validity_3 raw maximum value.
 */
#define MAX_Objects_Signals_C3_Light_indicator_validity_3        1

/**
 * Signal Light_indicator_validity_3 raw offset value.
 */
#define OFF_Objects_Signals_C3_Light_indicator_validity_3        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C3_Light_indicator_validity_3 Value Table for Signal Light_indicator_validity_3 in Message Objects_Signals_C3 (0x508)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C3_Light_indicator_validity_3.
 *
 * @ingroup SIG_Objects_Signals_C3_Light_indicator_validity_3
 */

/**
 * Value table Objects_Signals_C3_Light_indicator_validity_3 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C3_Light_indicator_validity_3
 */
#define Objects_Signals_C3_Light_indicator_validity_3_True                1

/**
 * Value table Objects_Signals_C3_Light_indicator_validity_3 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C3_Light_indicator_validity_3
 */
#define Objects_Signals_C3_Light_indicator_validity_3_False               0

/**
 * @defgroup SIG_Objects_Signals_C3_OBJ_Angle_Mid_3 Signal OBJ_Angle_Mid_3 of Message Objects_Signals_C3 (0x508)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C3
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C3_OBJ_Angle_Mid_3 and \ref GET_Objects_Signals_C3_OBJ_Angle_Mid_3 instead.
 */
#define SIG_Objects_Signals_C3_OBJ_Angle_Mid_3        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C3_OBJ_Angle_Mid_3 or \ref INIT_Objects_Signals_C3 instead.
 */
#define SETUP_Objects_Signals_C3_OBJ_Angle_Mid_3      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C3_OBJ_Angle_Mid_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C3_OBJ_Angle_Mid_3(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C3_OBJ_Angle_Mid_3(buf) \
	SET_Objects_Signals_C3_OBJ_Angle_Mid_3(buf, 0)

/**
 * Signal OBJ_Angle_Mid_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C3_OBJ_Angle_Mid_3(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_3 raw initial value.
 */
#define START_Objects_Signals_C3_OBJ_Angle_Mid_3      0

/**
 * Signal OBJ_Angle_Mid_3 raw minimum value.
 */
#define MIN_Objects_Signals_C3_OBJ_Angle_Mid_3        0

/**
 * Signal OBJ_Angle_Mid_3 raw maximum value.
 */
#define MAX_Objects_Signals_C3_OBJ_Angle_Mid_3        15710

/**
 * Signal OBJ_Angle_Mid_3 raw offset value.
 */
#define OFF_Objects_Signals_C3_OBJ_Angle_Mid_3        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C3_OBJ_Angle_Rate_3 Signal OBJ_Angle_Rate_3 of Message Objects_Signals_C3 (0x508)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C3
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C3_OBJ_Angle_Rate_3 and \ref GET_Objects_Signals_C3_OBJ_Angle_Rate_3 instead.
 */
#define SIG_Objects_Signals_C3_OBJ_Angle_Rate_3        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C3_OBJ_Angle_Rate_3 or \ref INIT_Objects_Signals_C3 instead.
 */
#define SETUP_Objects_Signals_C3_OBJ_Angle_Rate_3      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C3_OBJ_Angle_Rate_3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C3_OBJ_Angle_Rate_3(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C3_OBJ_Angle_Rate_3(buf) \
	SET_Objects_Signals_C3_OBJ_Angle_Rate_3(buf, 0)

/**
 * Signal OBJ_Angle_Rate_3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C3_OBJ_Angle_Rate_3(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_3 raw initial value.
 */
#define START_Objects_Signals_C3_OBJ_Angle_Rate_3      0

/**
 * Signal OBJ_Angle_Rate_3 raw minimum value.
 */
#define MIN_Objects_Signals_C3_OBJ_Angle_Rate_3        0

/**
 * Signal OBJ_Angle_Rate_3 raw maximum value.
 */
#define MAX_Objects_Signals_C3_OBJ_Angle_Rate_3        2233

/**
 * Signal OBJ_Angle_Rate_3 raw offset value.
 */
#define OFF_Objects_Signals_C3_OBJ_Angle_Rate_3        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C3_Reserved Signal Reserved of Message Objects_Signals_C3 (0x508)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C3
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C3_Reserved and \ref GET_Objects_Signals_C3_Reserved instead.
 */
#define SIG_Objects_Signals_C3_Reserved             0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C3_Reserved or \ref INIT_Objects_Signals_C3 instead.
 */
#define SETUP_Objects_Signals_C3_Reserved           0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C3_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C3_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C3_Reserved(buf) \
	SET_Objects_Signals_C3_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C3_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C3_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C3_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C3_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C3_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A4_Obj_ID_4 Signal Obj_ID_4 of Message Objects_Signals_A4 (0x509)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A4
 * @{
 */

/**
 * Signal Obj_ID_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A4_Obj_ID_4 and \ref GET_Objects_Signals_A4_Obj_ID_4 instead.
 */
#define SIG_Objects_Signals_A4_Obj_ID_4             0, 0, 0, 7

/**
 * Signal Obj_ID_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A4_Obj_ID_4 or \ref INIT_Objects_Signals_A4 instead.
 */
#define SETUP_Objects_Signals_A4_Obj_ID_4           0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A4_Obj_ID_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A4_Obj_ID_4(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A4_Obj_ID_4(buf) \
	SET_Objects_Signals_A4_Obj_ID_4(buf, 0)

/**
 * Signal Obj_ID_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A4_Obj_ID_4(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_4 raw initial value.
 */
#define START_Objects_Signals_A4_Obj_ID_4           0

/**
 * Signal Obj_ID_4 raw minimum value.
 */
#define MIN_Objects_Signals_A4_Obj_ID_4             0

/**
 * Signal Obj_ID_4 raw maximum value.
 */
#define MAX_Objects_Signals_A4_Obj_ID_4             127

/**
 * Signal Obj_ID_4 raw offset value.
 */
#define OFF_Objects_Signals_A4_Obj_ID_4             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A4_Object_Class_4 Signal Object_Class_4 of Message Objects_Signals_A4 (0x509)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A4_Object_Class_4.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A4
 * @{
 */

/**
 * Signal Object_Class_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A4_Object_Class_4 and \ref GET_Objects_Signals_A4_Object_Class_4 instead.
 */
#define SIG_Objects_Signals_A4_Object_Class_4        0, 0, 7, 3

/**
 * Signal Object_Class_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A4_Object_Class_4 or \ref INIT_Objects_Signals_A4 instead.
 */
#define SETUP_Objects_Signals_A4_Object_Class_4      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A4_Object_Class_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A4_Object_Class_4(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A4_Object_Class_4(buf) \
	SET_Objects_Signals_A4_Object_Class_4(buf, 0)

/**
 * Signal Object_Class_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A4_Object_Class_4(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_4 raw initial value.
 */
#define START_Objects_Signals_A4_Object_Class_4      0

/**
 * Signal Object_Class_4 raw minimum value.
 */
#define MIN_Objects_Signals_A4_Object_Class_4        0

/**
 * Signal Object_Class_4 raw maximum value.
 */
#define MAX_Objects_Signals_A4_Object_Class_4        7

/**
 * Signal Object_Class_4 raw offset value.
 */
#define OFF_Objects_Signals_A4_Object_Class_4        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A4_Object_Class_4 Value Table for Signal Object_Class_4 in Message Objects_Signals_A4 (0x509)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A4_Object_Class_4.
 *
 * @ingroup SIG_Objects_Signals_A4_Object_Class_4
 */

/**
 * Value table Objects_Signals_A4_Object_Class_4 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A4_Object_Class_4
 */
#define Objects_Signals_A4_Object_Class_4_uncertain_vcl       7

/**
 * Value table Objects_Signals_A4_Object_Class_4 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A4_Object_Class_4
 */
#define Objects_Signals_A4_Object_Class_4_animal              6

/**
 * Value table Objects_Signals_A4_Object_Class_4 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A4_Object_Class_4
 */
#define Objects_Signals_A4_Object_Class_4_general_object      5

/**
 * Value table Objects_Signals_A4_Object_Class_4 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A4_Object_Class_4
 */
#define Objects_Signals_A4_Object_Class_4_pedestrian          4

/**
 * Value table Objects_Signals_A4_Object_Class_4 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A4_Object_Class_4
 */
#define Objects_Signals_A4_Object_Class_4_bicycle             3

/**
 * Value table Objects_Signals_A4_Object_Class_4 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A4_Object_Class_4
 */
#define Objects_Signals_A4_Object_Class_4_bike                2

/**
 * Value table Objects_Signals_A4_Object_Class_4 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A4_Object_Class_4
 */
#define Objects_Signals_A4_Object_Class_4_truck               1

/**
 * Value table Objects_Signals_A4_Object_Class_4 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A4_Object_Class_4
 */
#define Objects_Signals_A4_Object_Class_4_car                 0

/**
 * @defgroup SIG_Objects_Signals_A4_OBJ_Width_4 Signal OBJ_Width_4 of Message Objects_Signals_A4 (0x509)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A4
 * @{
 */

/**
 * Signal OBJ_Width_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A4_OBJ_Width_4 and \ref GET_Objects_Signals_A4_OBJ_Width_4 instead.
 */
#define SIG_Objects_Signals_A4_OBJ_Width_4          0, 0, 10, 7

/**
 * Signal OBJ_Width_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A4_OBJ_Width_4 or \ref INIT_Objects_Signals_A4 instead.
 */
#define SETUP_Objects_Signals_A4_OBJ_Width_4        0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A4_OBJ_Width_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A4_OBJ_Width_4(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A4_OBJ_Width_4(buf) \
	SET_Objects_Signals_A4_OBJ_Width_4(buf, 0)

/**
 * Signal OBJ_Width_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A4_OBJ_Width_4(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_4 raw initial value.
 */
#define START_Objects_Signals_A4_OBJ_Width_4        0

/**
 * Signal OBJ_Width_4 raw minimum value.
 */
#define MIN_Objects_Signals_A4_OBJ_Width_4          0

/**
 * Signal OBJ_Width_4 raw maximum value.
 */
#define MAX_Objects_Signals_A4_OBJ_Width_4          127

/**
 * Signal OBJ_Width_4 raw offset value.
 */
#define OFF_Objects_Signals_A4_OBJ_Width_4          0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A4_OBJ_Length_4 Signal OBJ_Length_4 of Message Objects_Signals_A4 (0x509)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A4
 * @{
 */

/**
 * Signal OBJ_Length_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A4_OBJ_Length_4 and \ref GET_Objects_Signals_A4_OBJ_Length_4 instead.
 */
#define SIG_Objects_Signals_A4_OBJ_Length_4         0, 0, 17, 9

/**
 * Signal OBJ_Length_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A4_OBJ_Length_4 or \ref INIT_Objects_Signals_A4 instead.
 */
#define SETUP_Objects_Signals_A4_OBJ_Length_4       0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A4_OBJ_Length_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A4_OBJ_Length_4(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A4_OBJ_Length_4(buf) \
	SET_Objects_Signals_A4_OBJ_Length_4(buf, 0)

/**
 * Signal OBJ_Length_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A4_OBJ_Length_4(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_4 raw initial value.
 */
#define START_Objects_Signals_A4_OBJ_Length_4       0

/**
 * Signal OBJ_Length_4 raw minimum value.
 */
#define MIN_Objects_Signals_A4_OBJ_Length_4         0

/**
 * Signal OBJ_Length_4 raw maximum value.
 */
#define MAX_Objects_Signals_A4_OBJ_Length_4         510

/**
 * Signal OBJ_Length_4 raw offset value.
 */
#define OFF_Objects_Signals_A4_OBJ_Length_4         0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A4_Relative_Long_Velocity_4 Signal Relative_Long_Velocity_4 of Message Objects_Signals_A4 (0x509)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A4
 * @{
 */

/**
 * Signal Relative_Long_Velocity_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A4_Relative_Long_Velocity_4 and \ref GET_Objects_Signals_A4_Relative_Long_Velocity_4 instead.
 */
#define SIG_Objects_Signals_A4_Relative_Long_Velocity_4        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A4_Relative_Long_Velocity_4 or \ref INIT_Objects_Signals_A4 instead.
 */
#define SETUP_Objects_Signals_A4_Relative_Long_Velocity_4      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A4_Relative_Long_Velocity_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A4_Relative_Long_Velocity_4(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A4_Relative_Long_Velocity_4(buf) \
	SET_Objects_Signals_A4_Relative_Long_Velocity_4(buf, 0)

/**
 * Signal Relative_Long_Velocity_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A4_Relative_Long_Velocity_4(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_4 raw initial value.
 */
#define START_Objects_Signals_A4_Relative_Long_Velocity_4      0

/**
 * Signal Relative_Long_Velocity_4 raw minimum value.
 */
#define MIN_Objects_Signals_A4_Relative_Long_Velocity_4        0

/**
 * Signal Relative_Long_Velocity_4 raw maximum value.
 */
#define MAX_Objects_Signals_A4_Relative_Long_Velocity_4        5000

/**
 * Signal Relative_Long_Velocity_4 raw offset value.
 */
#define OFF_Objects_Signals_A4_Relative_Long_Velocity_4        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A4_OBJ_Lane_Assignment_4 Signal OBJ_Lane_Assignment_4 of Message Objects_Signals_A4 (0x509)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A4_OBJ_Lane_Assignment_4.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A4
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A4_OBJ_Lane_Assignment_4 and \ref GET_Objects_Signals_A4_OBJ_Lane_Assignment_4 instead.
 */
#define SIG_Objects_Signals_A4_OBJ_Lane_Assignment_4        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A4_OBJ_Lane_Assignment_4 or \ref INIT_Objects_Signals_A4 instead.
 */
#define SETUP_Objects_Signals_A4_OBJ_Lane_Assignment_4      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A4_OBJ_Lane_Assignment_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A4_OBJ_Lane_Assignment_4(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A4_OBJ_Lane_Assignment_4(buf) \
	SET_Objects_Signals_A4_OBJ_Lane_Assignment_4(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A4_OBJ_Lane_Assignment_4(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_4 raw initial value.
 */
#define START_Objects_Signals_A4_OBJ_Lane_Assignment_4      0

/**
 * Signal OBJ_Lane_Assignment_4 raw minimum value.
 */
#define MIN_Objects_Signals_A4_OBJ_Lane_Assignment_4        0

/**
 * Signal OBJ_Lane_Assignment_4 raw maximum value.
 */
#define MAX_Objects_Signals_A4_OBJ_Lane_Assignment_4        5

/**
 * Signal OBJ_Lane_Assignment_4 raw offset value.
 */
#define OFF_Objects_Signals_A4_OBJ_Lane_Assignment_4        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A4_OBJ_Lane_Assignment_4 Value Table for Signal OBJ_Lane_Assignment_4 in Message Objects_Signals_A4 (0x509)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A4_OBJ_Lane_Assignment_4.
 *
 * @ingroup SIG_Objects_Signals_A4_OBJ_Lane_Assignment_4
 */

/**
 * Value table Objects_Signals_A4_OBJ_Lane_Assignment_4 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A4_OBJ_Lane_Assignment_4
 */
#define Objects_Signals_A4_OBJ_Lane_Assignment_4_Not                 5

/**
 * Value table Objects_Signals_A4_OBJ_Lane_Assignment_4 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A4_OBJ_Lane_Assignment_4
 */
#define Objects_Signals_A4_OBJ_Lane_Assignment_4_Next                4

/**
 * Value table Objects_Signals_A4_OBJ_Lane_Assignment_4 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A4_OBJ_Lane_Assignment_4
 */
#define Objects_Signals_A4_OBJ_Lane_Assignment_4_Right               3

/**
 * Value table Objects_Signals_A4_OBJ_Lane_Assignment_4 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A4_OBJ_Lane_Assignment_4
 */
#define Objects_Signals_A4_OBJ_Lane_Assignment_4_Ego                 2

/**
 * Value table Objects_Signals_A4_OBJ_Lane_Assignment_4 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A4_OBJ_Lane_Assignment_4
 */
#define Objects_Signals_A4_OBJ_Lane_Assignment_4_Left                1

/**
 * Value table Objects_Signals_A4_OBJ_Lane_Assignment_4 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A4_OBJ_Lane_Assignment_4
 */
#define Objects_Signals_A4_OBJ_Lane_Assignment_4_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A4_Relative_Lat_Velocity_4 Signal Relative_Lat_Velocity_4 of Message Objects_Signals_A4 (0x509)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A4
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A4_Relative_Lat_Velocity_4 and \ref GET_Objects_Signals_A4_Relative_Lat_Velocity_4 instead.
 */
#define SIG_Objects_Signals_A4_Relative_Lat_Velocity_4        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A4_Relative_Lat_Velocity_4 or \ref INIT_Objects_Signals_A4 instead.
 */
#define SETUP_Objects_Signals_A4_Relative_Lat_Velocity_4      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A4_Relative_Lat_Velocity_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A4_Relative_Lat_Velocity_4(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A4_Relative_Lat_Velocity_4(buf) \
	SET_Objects_Signals_A4_Relative_Lat_Velocity_4(buf, 0)

/**
 * Signal Relative_Lat_Velocity_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A4_Relative_Lat_Velocity_4(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_4 raw initial value.
 */
#define START_Objects_Signals_A4_Relative_Lat_Velocity_4      0

/**
 * Signal Relative_Lat_Velocity_4 raw minimum value.
 */
#define MIN_Objects_Signals_A4_Relative_Lat_Velocity_4        0

/**
 * Signal Relative_Lat_Velocity_4 raw maximum value.
 */
#define MAX_Objects_Signals_A4_Relative_Lat_Velocity_4        2000

/**
 * Signal Relative_Lat_Velocity_4 raw offset value.
 */
#define OFF_Objects_Signals_A4_Relative_Lat_Velocity_4        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A4_Reserved Signal Reserved of Message Objects_Signals_A4 (0x509)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A4
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A4_Reserved and \ref GET_Objects_Signals_A4_Reserved instead.
 */
#define SIG_Objects_Signals_A4_Reserved             0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A4_Reserved or \ref INIT_Objects_Signals_A4 instead.
 */
#define SETUP_Objects_Signals_A4_Reserved           0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A4_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A4_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A4_Reserved(buf) \
	SET_Objects_Signals_A4_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A4_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A4_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A4_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A4_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A4_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B4_Absolute_Long_Acc_4 Signal Absolute_Long_Acc_4 of Message Objects_Signals_B4 (0x50a)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B4
 * @{
 */

/**
 * Signal Absolute_Long_Acc_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B4_Absolute_Long_Acc_4 and \ref GET_Objects_Signals_B4_Absolute_Long_Acc_4 instead.
 */
#define SIG_Objects_Signals_B4_Absolute_Long_Acc_4        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B4_Absolute_Long_Acc_4 or \ref INIT_Objects_Signals_B4 instead.
 */
#define SETUP_Objects_Signals_B4_Absolute_Long_Acc_4      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B4_Absolute_Long_Acc_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B4_Absolute_Long_Acc_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B4_Absolute_Long_Acc_4(buf) \
	SET_Objects_Signals_B4_Absolute_Long_Acc_4(buf, 0)

/**
 * Signal Absolute_Long_Acc_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B4_Absolute_Long_Acc_4(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_4 raw initial value.
 */
#define START_Objects_Signals_B4_Absolute_Long_Acc_4      0

/**
 * Signal Absolute_Long_Acc_4 raw minimum value.
 */
#define MIN_Objects_Signals_B4_Absolute_Long_Acc_4        0

/**
 * Signal Absolute_Long_Acc_4 raw maximum value.
 */
#define MAX_Objects_Signals_B4_Absolute_Long_Acc_4        511

/**
 * Signal Absolute_Long_Acc_4 raw offset value.
 */
#define OFF_Objects_Signals_B4_Absolute_Long_Acc_4        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B4_Long_Distance_4 Signal Long_Distance_4 of Message Objects_Signals_B4 (0x50a)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B4
 * @{
 */

/**
 * Signal Long_Distance_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B4_Long_Distance_4 and \ref GET_Objects_Signals_B4_Long_Distance_4 instead.
 */
#define SIG_Objects_Signals_B4_Long_Distance_4        0, 0, 9, 13

/**
 * Signal Long_Distance_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B4_Long_Distance_4 or \ref INIT_Objects_Signals_B4 instead.
 */
#define SETUP_Objects_Signals_B4_Long_Distance_4      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B4_Long_Distance_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B4_Long_Distance_4(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B4_Long_Distance_4(buf) \
	SET_Objects_Signals_B4_Long_Distance_4(buf, 0)

/**
 * Signal Long_Distance_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B4_Long_Distance_4(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_4 raw initial value.
 */
#define START_Objects_Signals_B4_Long_Distance_4      0

/**
 * Signal Long_Distance_4 raw minimum value.
 */
#define MIN_Objects_Signals_B4_Long_Distance_4        0

/**
 * Signal Long_Distance_4 raw maximum value.
 */
#define MAX_Objects_Signals_B4_Long_Distance_4        7000

/**
 * Signal Long_Distance_4 raw offset value.
 */
#define OFF_Objects_Signals_B4_Long_Distance_4        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B4_Lateral_Distance_4 Signal Lateral_Distance_4 of Message Objects_Signals_B4 (0x50a)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B4
 * @{
 */

/**
 * Signal Lateral_Distance_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B4_Lateral_Distance_4 and \ref GET_Objects_Signals_B4_Lateral_Distance_4 instead.
 */
#define SIG_Objects_Signals_B4_Lateral_Distance_4        0, 0, 22, 12

/**
 * Signal Lateral_Distance_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B4_Lateral_Distance_4 or \ref INIT_Objects_Signals_B4 instead.
 */
#define SETUP_Objects_Signals_B4_Lateral_Distance_4      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B4_Lateral_Distance_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B4_Lateral_Distance_4(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B4_Lateral_Distance_4(buf) \
	SET_Objects_Signals_B4_Lateral_Distance_4(buf, 0)

/**
 * Signal Lateral_Distance_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B4_Lateral_Distance_4(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_4 raw initial value.
 */
#define START_Objects_Signals_B4_Lateral_Distance_4      0

/**
 * Signal Lateral_Distance_4 raw minimum value.
 */
#define MIN_Objects_Signals_B4_Lateral_Distance_4        0

/**
 * Signal Lateral_Distance_4 raw maximum value.
 */
#define MAX_Objects_Signals_B4_Lateral_Distance_4        4094

/**
 * Signal Lateral_Distance_4 raw offset value.
 */
#define OFF_Objects_Signals_B4_Lateral_Distance_4        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B4_Reserved Signal Reserved of Message Objects_Signals_B4 (0x50a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B4
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B4_Reserved and \ref GET_Objects_Signals_B4_Reserved instead.
 */
#define SIG_Objects_Signals_B4_Reserved             0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B4_Reserved or \ref INIT_Objects_Signals_B4 instead.
 */
#define SETUP_Objects_Signals_B4_Reserved           0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B4_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B4_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B4_Reserved(buf) \
	SET_Objects_Signals_B4_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B4_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B4_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B4_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B4_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B4_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C4_Absolute_Speed_4 Signal Absolute_Speed_4 of Message Objects_Signals_C4 (0x50b)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C4
 * @{
 */

/**
 * Signal Absolute_Speed_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C4_Absolute_Speed_4 and \ref GET_Objects_Signals_C4_Absolute_Speed_4 instead.
 */
#define SIG_Objects_Signals_C4_Absolute_Speed_4        0, 0, 0, 12

/**
 * Signal Absolute_Speed_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C4_Absolute_Speed_4 or \ref INIT_Objects_Signals_C4 instead.
 */
#define SETUP_Objects_Signals_C4_Absolute_Speed_4      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C4_Absolute_Speed_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C4_Absolute_Speed_4(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C4_Absolute_Speed_4(buf) \
	SET_Objects_Signals_C4_Absolute_Speed_4(buf, 0)

/**
 * Signal Absolute_Speed_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C4_Absolute_Speed_4(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_4 raw initial value.
 */
#define START_Objects_Signals_C4_Absolute_Speed_4      0

/**
 * Signal Absolute_Speed_4 raw minimum value.
 */
#define MIN_Objects_Signals_C4_Absolute_Speed_4        0

/**
 * Signal Absolute_Speed_4 raw maximum value.
 */
#define MAX_Objects_Signals_C4_Absolute_Speed_4        4000

/**
 * Signal Absolute_Speed_4 raw offset value.
 */
#define OFF_Objects_Signals_C4_Absolute_Speed_4        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C4_OBJ_Motion_Status_4 Signal OBJ_Motion_Status_4 of Message Objects_Signals_C4 (0x50b)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C4_OBJ_Motion_Status_4.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C4
 * @{
 */

/**
 * Signal OBJ_Motion_Status_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C4_OBJ_Motion_Status_4 and \ref GET_Objects_Signals_C4_OBJ_Motion_Status_4 instead.
 */
#define SIG_Objects_Signals_C4_OBJ_Motion_Status_4        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C4_OBJ_Motion_Status_4 or \ref INIT_Objects_Signals_C4 instead.
 */
#define SETUP_Objects_Signals_C4_OBJ_Motion_Status_4      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C4_OBJ_Motion_Status_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C4_OBJ_Motion_Status_4(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C4_OBJ_Motion_Status_4(buf) \
	SET_Objects_Signals_C4_OBJ_Motion_Status_4(buf, 0)

/**
 * Signal OBJ_Motion_Status_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C4_OBJ_Motion_Status_4(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_4 raw initial value.
 */
#define START_Objects_Signals_C4_OBJ_Motion_Status_4      0

/**
 * Signal OBJ_Motion_Status_4 raw minimum value.
 */
#define MIN_Objects_Signals_C4_OBJ_Motion_Status_4        0

/**
 * Signal OBJ_Motion_Status_4 raw maximum value.
 */
#define MAX_Objects_Signals_C4_OBJ_Motion_Status_4        4

/**
 * Signal OBJ_Motion_Status_4 raw offset value.
 */
#define OFF_Objects_Signals_C4_OBJ_Motion_Status_4        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C4_OBJ_Motion_Status_4 Value Table for Signal OBJ_Motion_Status_4 in Message Objects_Signals_C4 (0x50b)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C4_OBJ_Motion_Status_4.
 *
 * @ingroup SIG_Objects_Signals_C4_OBJ_Motion_Status_4
 */

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Status_4 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Status_4
 */
#define Objects_Signals_C4_OBJ_Motion_Status_4_Moving              4

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Status_4 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Status_4
 */
#define Objects_Signals_C4_OBJ_Motion_Status_4_Stopped             3

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Status_4 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Status_4
 */
#define Objects_Signals_C4_OBJ_Motion_Status_4_Stationary          2

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Status_4 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Status_4
 */
#define Objects_Signals_C4_OBJ_Motion_Status_4_Moving_1            1

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Status_4 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Status_4
 */
#define Objects_Signals_C4_OBJ_Motion_Status_4_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C4_OBJ_Motion_Category_4 Signal OBJ_Motion_Category_4 of Message Objects_Signals_C4 (0x50b)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C4_OBJ_Motion_Category_4.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C4
 * @{
 */

/**
 * Signal OBJ_Motion_Category_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C4_OBJ_Motion_Category_4 and \ref GET_Objects_Signals_C4_OBJ_Motion_Category_4 instead.
 */
#define SIG_Objects_Signals_C4_OBJ_Motion_Category_4        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C4_OBJ_Motion_Category_4 or \ref INIT_Objects_Signals_C4 instead.
 */
#define SETUP_Objects_Signals_C4_OBJ_Motion_Category_4      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C4_OBJ_Motion_Category_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C4_OBJ_Motion_Category_4(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C4_OBJ_Motion_Category_4(buf) \
	SET_Objects_Signals_C4_OBJ_Motion_Category_4(buf, 0)

/**
 * Signal OBJ_Motion_Category_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C4_OBJ_Motion_Category_4(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_4 raw initial value.
 */
#define START_Objects_Signals_C4_OBJ_Motion_Category_4      0

/**
 * Signal OBJ_Motion_Category_4 raw minimum value.
 */
#define MIN_Objects_Signals_C4_OBJ_Motion_Category_4        0

/**
 * Signal OBJ_Motion_Category_4 raw maximum value.
 */
#define MAX_Objects_Signals_C4_OBJ_Motion_Category_4        12

/**
 * Signal OBJ_Motion_Category_4 raw offset value.
 */
#define OFF_Objects_Signals_C4_OBJ_Motion_Category_4        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4 Value Table for Signal OBJ_Motion_Category_4 in Message Objects_Signals_C4 (0x50b)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C4_OBJ_Motion_Category_4.
 *
 * @ingroup SIG_Objects_Signals_C4_OBJ_Motion_Category_4
 */

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_MOVING           10

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_RTAP             9

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_LTAP             8

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_CROSSING         7

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_PASSING          1

/**
 * Value table Objects_Signals_C4_OBJ_Motion_Category_4 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C4_OBJ_Motion_Category_4
 */
#define Objects_Signals_C4_OBJ_Motion_Category_4_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C4_Brake_Light_4 Signal Brake_Light_4 of Message Objects_Signals_C4 (0x50b)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C4_Brake_Light_4.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C4
 * @{
 */

/**
 * Signal Brake_Light_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C4_Brake_Light_4 and \ref GET_Objects_Signals_C4_Brake_Light_4 instead.
 */
#define SIG_Objects_Signals_C4_Brake_Light_4        0, 0, 19, 1

/**
 * Signal Brake_Light_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C4_Brake_Light_4 or \ref INIT_Objects_Signals_C4 instead.
 */
#define SETUP_Objects_Signals_C4_Brake_Light_4      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C4_Brake_Light_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C4_Brake_Light_4(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C4_Brake_Light_4(buf) \
	SET_Objects_Signals_C4_Brake_Light_4(buf, 0)

/**
 * Signal Brake_Light_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C4_Brake_Light_4(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_4 raw initial value.
 */
#define START_Objects_Signals_C4_Brake_Light_4      0

/**
 * Signal Brake_Light_4 raw minimum value.
 */
#define MIN_Objects_Signals_C4_Brake_Light_4        0

/**
 * Signal Brake_Light_4 raw maximum value.
 */
#define MAX_Objects_Signals_C4_Brake_Light_4        1

/**
 * Signal Brake_Light_4 raw offset value.
 */
#define OFF_Objects_Signals_C4_Brake_Light_4        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C4_Brake_Light_4 Value Table for Signal Brake_Light_4 in Message Objects_Signals_C4 (0x50b)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C4_Brake_Light_4.
 *
 * @ingroup SIG_Objects_Signals_C4_Brake_Light_4
 */

/**
 * Value table Objects_Signals_C4_Brake_Light_4 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C4_Brake_Light_4
 */
#define Objects_Signals_C4_Brake_Light_4_On                  1

/**
 * Value table Objects_Signals_C4_Brake_Light_4 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C4_Brake_Light_4
 */
#define Objects_Signals_C4_Brake_Light_4_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C4_Turn_Indicator_Right_4 Signal Turn_Indicator_Right_4 of Message Objects_Signals_C4 (0x50b)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C4_Turn_Indicator_Right_4.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C4
 * @{
 */

/**
 * Signal Turn_Indicator_Right_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C4_Turn_Indicator_Right_4 and \ref GET_Objects_Signals_C4_Turn_Indicator_Right_4 instead.
 */
#define SIG_Objects_Signals_C4_Turn_Indicator_Right_4        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C4_Turn_Indicator_Right_4 or \ref INIT_Objects_Signals_C4 instead.
 */
#define SETUP_Objects_Signals_C4_Turn_Indicator_Right_4      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C4_Turn_Indicator_Right_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C4_Turn_Indicator_Right_4(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C4_Turn_Indicator_Right_4(buf) \
	SET_Objects_Signals_C4_Turn_Indicator_Right_4(buf, 0)

/**
 * Signal Turn_Indicator_Right_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C4_Turn_Indicator_Right_4(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_4 raw initial value.
 */
#define START_Objects_Signals_C4_Turn_Indicator_Right_4      0

/**
 * Signal Turn_Indicator_Right_4 raw minimum value.
 */
#define MIN_Objects_Signals_C4_Turn_Indicator_Right_4        0

/**
 * Signal Turn_Indicator_Right_4 raw maximum value.
 */
#define MAX_Objects_Signals_C4_Turn_Indicator_Right_4        1

/**
 * Signal Turn_Indicator_Right_4 raw offset value.
 */
#define OFF_Objects_Signals_C4_Turn_Indicator_Right_4        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C4_Turn_Indicator_Right_4 Value Table for Signal Turn_Indicator_Right_4 in Message Objects_Signals_C4 (0x50b)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C4_Turn_Indicator_Right_4.
 *
 * @ingroup SIG_Objects_Signals_C4_Turn_Indicator_Right_4
 */

/**
 * Value table Objects_Signals_C4_Turn_Indicator_Right_4 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C4_Turn_Indicator_Right_4
 */
#define Objects_Signals_C4_Turn_Indicator_Right_4_On                  1

/**
 * Value table Objects_Signals_C4_Turn_Indicator_Right_4 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C4_Turn_Indicator_Right_4
 */
#define Objects_Signals_C4_Turn_Indicator_Right_4_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C4_Turn_Indicator_Left_4 Signal Turn_Indicator_Left_4 of Message Objects_Signals_C4 (0x50b)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C4_Turn_Indicator_Left_4.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C4
 * @{
 */

/**
 * Signal Turn_Indicator_Left_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C4_Turn_Indicator_Left_4 and \ref GET_Objects_Signals_C4_Turn_Indicator_Left_4 instead.
 */
#define SIG_Objects_Signals_C4_Turn_Indicator_Left_4        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C4_Turn_Indicator_Left_4 or \ref INIT_Objects_Signals_C4 instead.
 */
#define SETUP_Objects_Signals_C4_Turn_Indicator_Left_4      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C4_Turn_Indicator_Left_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C4_Turn_Indicator_Left_4(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C4_Turn_Indicator_Left_4(buf) \
	SET_Objects_Signals_C4_Turn_Indicator_Left_4(buf, 0)

/**
 * Signal Turn_Indicator_Left_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C4_Turn_Indicator_Left_4(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_4 raw initial value.
 */
#define START_Objects_Signals_C4_Turn_Indicator_Left_4      0

/**
 * Signal Turn_Indicator_Left_4 raw minimum value.
 */
#define MIN_Objects_Signals_C4_Turn_Indicator_Left_4        0

/**
 * Signal Turn_Indicator_Left_4 raw maximum value.
 */
#define MAX_Objects_Signals_C4_Turn_Indicator_Left_4        1

/**
 * Signal Turn_Indicator_Left_4 raw offset value.
 */
#define OFF_Objects_Signals_C4_Turn_Indicator_Left_4        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C4_Turn_Indicator_Left_4 Value Table for Signal Turn_Indicator_Left_4 in Message Objects_Signals_C4 (0x50b)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C4_Turn_Indicator_Left_4.
 *
 * @ingroup SIG_Objects_Signals_C4_Turn_Indicator_Left_4
 */

/**
 * Value table Objects_Signals_C4_Turn_Indicator_Left_4 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C4_Turn_Indicator_Left_4
 */
#define Objects_Signals_C4_Turn_Indicator_Left_4_On                  1

/**
 * Value table Objects_Signals_C4_Turn_Indicator_Left_4 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C4_Turn_Indicator_Left_4
 */
#define Objects_Signals_C4_Turn_Indicator_Left_4_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C4_Light_indicator_validity_4 Signal Light_indicator_validity_4 of Message Objects_Signals_C4 (0x50b)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C4_Light_indicator_validity_4.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C4
 * @{
 */

/**
 * Signal Light_indicator_validity_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C4_Light_indicator_validity_4 and \ref GET_Objects_Signals_C4_Light_indicator_validity_4 instead.
 */
#define SIG_Objects_Signals_C4_Light_indicator_validity_4        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C4_Light_indicator_validity_4 or \ref INIT_Objects_Signals_C4 instead.
 */
#define SETUP_Objects_Signals_C4_Light_indicator_validity_4      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C4_Light_indicator_validity_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C4_Light_indicator_validity_4(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C4_Light_indicator_validity_4(buf) \
	SET_Objects_Signals_C4_Light_indicator_validity_4(buf, 0)

/**
 * Signal Light_indicator_validity_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C4_Light_indicator_validity_4(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_4 raw initial value.
 */
#define START_Objects_Signals_C4_Light_indicator_validity_4      0

/**
 * Signal Light_indicator_validity_4 raw minimum value.
 */
#define MIN_Objects_Signals_C4_Light_indicator_validity_4        0

/**
 * Signal Light_indicator_validity_4 raw maximum value.
 */
#define MAX_Objects_Signals_C4_Light_indicator_validity_4        1

/**
 * Signal Light_indicator_validity_4 raw offset value.
 */
#define OFF_Objects_Signals_C4_Light_indicator_validity_4        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C4_Light_indicator_validity_4 Value Table for Signal Light_indicator_validity_4 in Message Objects_Signals_C4 (0x50b)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C4_Light_indicator_validity_4.
 *
 * @ingroup SIG_Objects_Signals_C4_Light_indicator_validity_4
 */

/**
 * Value table Objects_Signals_C4_Light_indicator_validity_4 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C4_Light_indicator_validity_4
 */
#define Objects_Signals_C4_Light_indicator_validity_4_True                1

/**
 * Value table Objects_Signals_C4_Light_indicator_validity_4 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C4_Light_indicator_validity_4
 */
#define Objects_Signals_C4_Light_indicator_validity_4_False               0

/**
 * @defgroup SIG_Objects_Signals_C4_OBJ_Angle_Mid_4 Signal OBJ_Angle_Mid_4 of Message Objects_Signals_C4 (0x50b)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C4
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C4_OBJ_Angle_Mid_4 and \ref GET_Objects_Signals_C4_OBJ_Angle_Mid_4 instead.
 */
#define SIG_Objects_Signals_C4_OBJ_Angle_Mid_4        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C4_OBJ_Angle_Mid_4 or \ref INIT_Objects_Signals_C4 instead.
 */
#define SETUP_Objects_Signals_C4_OBJ_Angle_Mid_4      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C4_OBJ_Angle_Mid_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C4_OBJ_Angle_Mid_4(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C4_OBJ_Angle_Mid_4(buf) \
	SET_Objects_Signals_C4_OBJ_Angle_Mid_4(buf, 0)

/**
 * Signal OBJ_Angle_Mid_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C4_OBJ_Angle_Mid_4(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_4 raw initial value.
 */
#define START_Objects_Signals_C4_OBJ_Angle_Mid_4      0

/**
 * Signal OBJ_Angle_Mid_4 raw minimum value.
 */
#define MIN_Objects_Signals_C4_OBJ_Angle_Mid_4        0

/**
 * Signal OBJ_Angle_Mid_4 raw maximum value.
 */
#define MAX_Objects_Signals_C4_OBJ_Angle_Mid_4        15710

/**
 * Signal OBJ_Angle_Mid_4 raw offset value.
 */
#define OFF_Objects_Signals_C4_OBJ_Angle_Mid_4        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C4_OBJ_Angle_Rate_4 Signal OBJ_Angle_Rate_4 of Message Objects_Signals_C4 (0x50b)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C4
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C4_OBJ_Angle_Rate_4 and \ref GET_Objects_Signals_C4_OBJ_Angle_Rate_4 instead.
 */
#define SIG_Objects_Signals_C4_OBJ_Angle_Rate_4        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C4_OBJ_Angle_Rate_4 or \ref INIT_Objects_Signals_C4 instead.
 */
#define SETUP_Objects_Signals_C4_OBJ_Angle_Rate_4      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C4_OBJ_Angle_Rate_4(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C4_OBJ_Angle_Rate_4(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C4_OBJ_Angle_Rate_4(buf) \
	SET_Objects_Signals_C4_OBJ_Angle_Rate_4(buf, 0)

/**
 * Signal OBJ_Angle_Rate_4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C4_OBJ_Angle_Rate_4(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_4 raw initial value.
 */
#define START_Objects_Signals_C4_OBJ_Angle_Rate_4      0

/**
 * Signal OBJ_Angle_Rate_4 raw minimum value.
 */
#define MIN_Objects_Signals_C4_OBJ_Angle_Rate_4        0

/**
 * Signal OBJ_Angle_Rate_4 raw maximum value.
 */
#define MAX_Objects_Signals_C4_OBJ_Angle_Rate_4        2233

/**
 * Signal OBJ_Angle_Rate_4 raw offset value.
 */
#define OFF_Objects_Signals_C4_OBJ_Angle_Rate_4        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C4_Reserved Signal Reserved of Message Objects_Signals_C4 (0x50b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C4
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C4_Reserved and \ref GET_Objects_Signals_C4_Reserved instead.
 */
#define SIG_Objects_Signals_C4_Reserved             0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C4_Reserved or \ref INIT_Objects_Signals_C4 instead.
 */
#define SETUP_Objects_Signals_C4_Reserved           0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C4_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C4_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C4_Reserved(buf) \
	SET_Objects_Signals_C4_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C4_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C4_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C4_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C4_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C4_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A5_Obj_ID_5 Signal Obj_ID_5 of Message Objects_Signals_A5 (0x50c)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A5
 * @{
 */

/**
 * Signal Obj_ID_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A5_Obj_ID_5 and \ref GET_Objects_Signals_A5_Obj_ID_5 instead.
 */
#define SIG_Objects_Signals_A5_Obj_ID_5             0, 0, 0, 7

/**
 * Signal Obj_ID_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A5_Obj_ID_5 or \ref INIT_Objects_Signals_A5 instead.
 */
#define SETUP_Objects_Signals_A5_Obj_ID_5           0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A5_Obj_ID_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A5_Obj_ID_5(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A5_Obj_ID_5(buf) \
	SET_Objects_Signals_A5_Obj_ID_5(buf, 0)

/**
 * Signal Obj_ID_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A5_Obj_ID_5(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_5 raw initial value.
 */
#define START_Objects_Signals_A5_Obj_ID_5           0

/**
 * Signal Obj_ID_5 raw minimum value.
 */
#define MIN_Objects_Signals_A5_Obj_ID_5             0

/**
 * Signal Obj_ID_5 raw maximum value.
 */
#define MAX_Objects_Signals_A5_Obj_ID_5             127

/**
 * Signal Obj_ID_5 raw offset value.
 */
#define OFF_Objects_Signals_A5_Obj_ID_5             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A5_Object_Class_5 Signal Object_Class_5 of Message Objects_Signals_A5 (0x50c)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A5_Object_Class_5.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A5
 * @{
 */

/**
 * Signal Object_Class_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A5_Object_Class_5 and \ref GET_Objects_Signals_A5_Object_Class_5 instead.
 */
#define SIG_Objects_Signals_A5_Object_Class_5        0, 0, 7, 3

/**
 * Signal Object_Class_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A5_Object_Class_5 or \ref INIT_Objects_Signals_A5 instead.
 */
#define SETUP_Objects_Signals_A5_Object_Class_5      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A5_Object_Class_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A5_Object_Class_5(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A5_Object_Class_5(buf) \
	SET_Objects_Signals_A5_Object_Class_5(buf, 0)

/**
 * Signal Object_Class_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A5_Object_Class_5(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_5 raw initial value.
 */
#define START_Objects_Signals_A5_Object_Class_5      0

/**
 * Signal Object_Class_5 raw minimum value.
 */
#define MIN_Objects_Signals_A5_Object_Class_5        0

/**
 * Signal Object_Class_5 raw maximum value.
 */
#define MAX_Objects_Signals_A5_Object_Class_5        7

/**
 * Signal Object_Class_5 raw offset value.
 */
#define OFF_Objects_Signals_A5_Object_Class_5        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A5_Object_Class_5 Value Table for Signal Object_Class_5 in Message Objects_Signals_A5 (0x50c)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A5_Object_Class_5.
 *
 * @ingroup SIG_Objects_Signals_A5_Object_Class_5
 */

/**
 * Value table Objects_Signals_A5_Object_Class_5 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A5_Object_Class_5
 */
#define Objects_Signals_A5_Object_Class_5_uncertain_vcl       7

/**
 * Value table Objects_Signals_A5_Object_Class_5 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A5_Object_Class_5
 */
#define Objects_Signals_A5_Object_Class_5_animal              6

/**
 * Value table Objects_Signals_A5_Object_Class_5 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A5_Object_Class_5
 */
#define Objects_Signals_A5_Object_Class_5_general_object      5

/**
 * Value table Objects_Signals_A5_Object_Class_5 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A5_Object_Class_5
 */
#define Objects_Signals_A5_Object_Class_5_pedestrian          4

/**
 * Value table Objects_Signals_A5_Object_Class_5 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A5_Object_Class_5
 */
#define Objects_Signals_A5_Object_Class_5_bicycle             3

/**
 * Value table Objects_Signals_A5_Object_Class_5 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A5_Object_Class_5
 */
#define Objects_Signals_A5_Object_Class_5_bike                2

/**
 * Value table Objects_Signals_A5_Object_Class_5 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A5_Object_Class_5
 */
#define Objects_Signals_A5_Object_Class_5_truck               1

/**
 * Value table Objects_Signals_A5_Object_Class_5 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A5_Object_Class_5
 */
#define Objects_Signals_A5_Object_Class_5_car                 0

/**
 * @defgroup SIG_Objects_Signals_A5_OBJ_Width_5 Signal OBJ_Width_5 of Message Objects_Signals_A5 (0x50c)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A5
 * @{
 */

/**
 * Signal OBJ_Width_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A5_OBJ_Width_5 and \ref GET_Objects_Signals_A5_OBJ_Width_5 instead.
 */
#define SIG_Objects_Signals_A5_OBJ_Width_5          0, 0, 10, 7

/**
 * Signal OBJ_Width_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A5_OBJ_Width_5 or \ref INIT_Objects_Signals_A5 instead.
 */
#define SETUP_Objects_Signals_A5_OBJ_Width_5        0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A5_OBJ_Width_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A5_OBJ_Width_5(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A5_OBJ_Width_5(buf) \
	SET_Objects_Signals_A5_OBJ_Width_5(buf, 0)

/**
 * Signal OBJ_Width_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A5_OBJ_Width_5(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_5 raw initial value.
 */
#define START_Objects_Signals_A5_OBJ_Width_5        0

/**
 * Signal OBJ_Width_5 raw minimum value.
 */
#define MIN_Objects_Signals_A5_OBJ_Width_5          0

/**
 * Signal OBJ_Width_5 raw maximum value.
 */
#define MAX_Objects_Signals_A5_OBJ_Width_5          127

/**
 * Signal OBJ_Width_5 raw offset value.
 */
#define OFF_Objects_Signals_A5_OBJ_Width_5          0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A5_OBJ_Length_5 Signal OBJ_Length_5 of Message Objects_Signals_A5 (0x50c)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A5
 * @{
 */

/**
 * Signal OBJ_Length_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A5_OBJ_Length_5 and \ref GET_Objects_Signals_A5_OBJ_Length_5 instead.
 */
#define SIG_Objects_Signals_A5_OBJ_Length_5         0, 0, 17, 9

/**
 * Signal OBJ_Length_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A5_OBJ_Length_5 or \ref INIT_Objects_Signals_A5 instead.
 */
#define SETUP_Objects_Signals_A5_OBJ_Length_5       0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A5_OBJ_Length_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A5_OBJ_Length_5(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A5_OBJ_Length_5(buf) \
	SET_Objects_Signals_A5_OBJ_Length_5(buf, 0)

/**
 * Signal OBJ_Length_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A5_OBJ_Length_5(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_5 raw initial value.
 */
#define START_Objects_Signals_A5_OBJ_Length_5       0

/**
 * Signal OBJ_Length_5 raw minimum value.
 */
#define MIN_Objects_Signals_A5_OBJ_Length_5         0

/**
 * Signal OBJ_Length_5 raw maximum value.
 */
#define MAX_Objects_Signals_A5_OBJ_Length_5         510

/**
 * Signal OBJ_Length_5 raw offset value.
 */
#define OFF_Objects_Signals_A5_OBJ_Length_5         0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A5_Relative_Long_Velocity_5 Signal Relative_Long_Velocity_5 of Message Objects_Signals_A5 (0x50c)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A5
 * @{
 */

/**
 * Signal Relative_Long_Velocity_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A5_Relative_Long_Velocity_5 and \ref GET_Objects_Signals_A5_Relative_Long_Velocity_5 instead.
 */
#define SIG_Objects_Signals_A5_Relative_Long_Velocity_5        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A5_Relative_Long_Velocity_5 or \ref INIT_Objects_Signals_A5 instead.
 */
#define SETUP_Objects_Signals_A5_Relative_Long_Velocity_5      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A5_Relative_Long_Velocity_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A5_Relative_Long_Velocity_5(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A5_Relative_Long_Velocity_5(buf) \
	SET_Objects_Signals_A5_Relative_Long_Velocity_5(buf, 0)

/**
 * Signal Relative_Long_Velocity_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A5_Relative_Long_Velocity_5(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_5 raw initial value.
 */
#define START_Objects_Signals_A5_Relative_Long_Velocity_5      0

/**
 * Signal Relative_Long_Velocity_5 raw minimum value.
 */
#define MIN_Objects_Signals_A5_Relative_Long_Velocity_5        0

/**
 * Signal Relative_Long_Velocity_5 raw maximum value.
 */
#define MAX_Objects_Signals_A5_Relative_Long_Velocity_5        5000

/**
 * Signal Relative_Long_Velocity_5 raw offset value.
 */
#define OFF_Objects_Signals_A5_Relative_Long_Velocity_5        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A5_OBJ_Lane_Assignment_5 Signal OBJ_Lane_Assignment_5 of Message Objects_Signals_A5 (0x50c)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A5_OBJ_Lane_Assignment_5.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A5
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A5_OBJ_Lane_Assignment_5 and \ref GET_Objects_Signals_A5_OBJ_Lane_Assignment_5 instead.
 */
#define SIG_Objects_Signals_A5_OBJ_Lane_Assignment_5        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A5_OBJ_Lane_Assignment_5 or \ref INIT_Objects_Signals_A5 instead.
 */
#define SETUP_Objects_Signals_A5_OBJ_Lane_Assignment_5      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A5_OBJ_Lane_Assignment_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A5_OBJ_Lane_Assignment_5(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A5_OBJ_Lane_Assignment_5(buf) \
	SET_Objects_Signals_A5_OBJ_Lane_Assignment_5(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A5_OBJ_Lane_Assignment_5(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_5 raw initial value.
 */
#define START_Objects_Signals_A5_OBJ_Lane_Assignment_5      0

/**
 * Signal OBJ_Lane_Assignment_5 raw minimum value.
 */
#define MIN_Objects_Signals_A5_OBJ_Lane_Assignment_5        0

/**
 * Signal OBJ_Lane_Assignment_5 raw maximum value.
 */
#define MAX_Objects_Signals_A5_OBJ_Lane_Assignment_5        5

/**
 * Signal OBJ_Lane_Assignment_5 raw offset value.
 */
#define OFF_Objects_Signals_A5_OBJ_Lane_Assignment_5        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A5_OBJ_Lane_Assignment_5 Value Table for Signal OBJ_Lane_Assignment_5 in Message Objects_Signals_A5 (0x50c)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A5_OBJ_Lane_Assignment_5.
 *
 * @ingroup SIG_Objects_Signals_A5_OBJ_Lane_Assignment_5
 */

/**
 * Value table Objects_Signals_A5_OBJ_Lane_Assignment_5 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A5_OBJ_Lane_Assignment_5
 */
#define Objects_Signals_A5_OBJ_Lane_Assignment_5_Not                 5

/**
 * Value table Objects_Signals_A5_OBJ_Lane_Assignment_5 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A5_OBJ_Lane_Assignment_5
 */
#define Objects_Signals_A5_OBJ_Lane_Assignment_5_Next                4

/**
 * Value table Objects_Signals_A5_OBJ_Lane_Assignment_5 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A5_OBJ_Lane_Assignment_5
 */
#define Objects_Signals_A5_OBJ_Lane_Assignment_5_Right               3

/**
 * Value table Objects_Signals_A5_OBJ_Lane_Assignment_5 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A5_OBJ_Lane_Assignment_5
 */
#define Objects_Signals_A5_OBJ_Lane_Assignment_5_Ego                 2

/**
 * Value table Objects_Signals_A5_OBJ_Lane_Assignment_5 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A5_OBJ_Lane_Assignment_5
 */
#define Objects_Signals_A5_OBJ_Lane_Assignment_5_Left                1

/**
 * Value table Objects_Signals_A5_OBJ_Lane_Assignment_5 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A5_OBJ_Lane_Assignment_5
 */
#define Objects_Signals_A5_OBJ_Lane_Assignment_5_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A5_Relative_Lat_Velocity_5 Signal Relative_Lat_Velocity_5 of Message Objects_Signals_A5 (0x50c)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A5
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A5_Relative_Lat_Velocity_5 and \ref GET_Objects_Signals_A5_Relative_Lat_Velocity_5 instead.
 */
#define SIG_Objects_Signals_A5_Relative_Lat_Velocity_5        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A5_Relative_Lat_Velocity_5 or \ref INIT_Objects_Signals_A5 instead.
 */
#define SETUP_Objects_Signals_A5_Relative_Lat_Velocity_5      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A5_Relative_Lat_Velocity_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A5_Relative_Lat_Velocity_5(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A5_Relative_Lat_Velocity_5(buf) \
	SET_Objects_Signals_A5_Relative_Lat_Velocity_5(buf, 0)

/**
 * Signal Relative_Lat_Velocity_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A5_Relative_Lat_Velocity_5(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_5 raw initial value.
 */
#define START_Objects_Signals_A5_Relative_Lat_Velocity_5      0

/**
 * Signal Relative_Lat_Velocity_5 raw minimum value.
 */
#define MIN_Objects_Signals_A5_Relative_Lat_Velocity_5        0

/**
 * Signal Relative_Lat_Velocity_5 raw maximum value.
 */
#define MAX_Objects_Signals_A5_Relative_Lat_Velocity_5        2000

/**
 * Signal Relative_Lat_Velocity_5 raw offset value.
 */
#define OFF_Objects_Signals_A5_Relative_Lat_Velocity_5        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A5_Reserved Signal Reserved of Message Objects_Signals_A5 (0x50c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A5
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A5_Reserved and \ref GET_Objects_Signals_A5_Reserved instead.
 */
#define SIG_Objects_Signals_A5_Reserved             0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A5_Reserved or \ref INIT_Objects_Signals_A5 instead.
 */
#define SETUP_Objects_Signals_A5_Reserved           0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A5_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A5_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A5_Reserved(buf) \
	SET_Objects_Signals_A5_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A5_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A5_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A5_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A5_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A5_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B5_Absolute_Long_Acc_5 Signal Absolute_Long_Acc_5 of Message Objects_Signals_B5 (0x50d)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B5
 * @{
 */

/**
 * Signal Absolute_Long_Acc_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B5_Absolute_Long_Acc_5 and \ref GET_Objects_Signals_B5_Absolute_Long_Acc_5 instead.
 */
#define SIG_Objects_Signals_B5_Absolute_Long_Acc_5        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B5_Absolute_Long_Acc_5 or \ref INIT_Objects_Signals_B5 instead.
 */
#define SETUP_Objects_Signals_B5_Absolute_Long_Acc_5      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B5_Absolute_Long_Acc_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B5_Absolute_Long_Acc_5(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B5_Absolute_Long_Acc_5(buf) \
	SET_Objects_Signals_B5_Absolute_Long_Acc_5(buf, 0)

/**
 * Signal Absolute_Long_Acc_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B5_Absolute_Long_Acc_5(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_5 raw initial value.
 */
#define START_Objects_Signals_B5_Absolute_Long_Acc_5      0

/**
 * Signal Absolute_Long_Acc_5 raw minimum value.
 */
#define MIN_Objects_Signals_B5_Absolute_Long_Acc_5        0

/**
 * Signal Absolute_Long_Acc_5 raw maximum value.
 */
#define MAX_Objects_Signals_B5_Absolute_Long_Acc_5        511

/**
 * Signal Absolute_Long_Acc_5 raw offset value.
 */
#define OFF_Objects_Signals_B5_Absolute_Long_Acc_5        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B5_Long_Distance_5 Signal Long_Distance_5 of Message Objects_Signals_B5 (0x50d)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B5
 * @{
 */

/**
 * Signal Long_Distance_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B5_Long_Distance_5 and \ref GET_Objects_Signals_B5_Long_Distance_5 instead.
 */
#define SIG_Objects_Signals_B5_Long_Distance_5        0, 0, 9, 13

/**
 * Signal Long_Distance_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B5_Long_Distance_5 or \ref INIT_Objects_Signals_B5 instead.
 */
#define SETUP_Objects_Signals_B5_Long_Distance_5      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B5_Long_Distance_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B5_Long_Distance_5(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B5_Long_Distance_5(buf) \
	SET_Objects_Signals_B5_Long_Distance_5(buf, 0)

/**
 * Signal Long_Distance_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B5_Long_Distance_5(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_5 raw initial value.
 */
#define START_Objects_Signals_B5_Long_Distance_5      0

/**
 * Signal Long_Distance_5 raw minimum value.
 */
#define MIN_Objects_Signals_B5_Long_Distance_5        0

/**
 * Signal Long_Distance_5 raw maximum value.
 */
#define MAX_Objects_Signals_B5_Long_Distance_5        7000

/**
 * Signal Long_Distance_5 raw offset value.
 */
#define OFF_Objects_Signals_B5_Long_Distance_5        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B5_Lateral_Distance_5 Signal Lateral_Distance_5 of Message Objects_Signals_B5 (0x50d)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B5
 * @{
 */

/**
 * Signal Lateral_Distance_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B5_Lateral_Distance_5 and \ref GET_Objects_Signals_B5_Lateral_Distance_5 instead.
 */
#define SIG_Objects_Signals_B5_Lateral_Distance_5        0, 0, 22, 12

/**
 * Signal Lateral_Distance_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B5_Lateral_Distance_5 or \ref INIT_Objects_Signals_B5 instead.
 */
#define SETUP_Objects_Signals_B5_Lateral_Distance_5      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B5_Lateral_Distance_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B5_Lateral_Distance_5(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B5_Lateral_Distance_5(buf) \
	SET_Objects_Signals_B5_Lateral_Distance_5(buf, 0)

/**
 * Signal Lateral_Distance_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B5_Lateral_Distance_5(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_5 raw initial value.
 */
#define START_Objects_Signals_B5_Lateral_Distance_5      0

/**
 * Signal Lateral_Distance_5 raw minimum value.
 */
#define MIN_Objects_Signals_B5_Lateral_Distance_5        0

/**
 * Signal Lateral_Distance_5 raw maximum value.
 */
#define MAX_Objects_Signals_B5_Lateral_Distance_5        4094

/**
 * Signal Lateral_Distance_5 raw offset value.
 */
#define OFF_Objects_Signals_B5_Lateral_Distance_5        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B5_Reserved Signal Reserved of Message Objects_Signals_B5 (0x50d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B5
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B5_Reserved and \ref GET_Objects_Signals_B5_Reserved instead.
 */
#define SIG_Objects_Signals_B5_Reserved             0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B5_Reserved or \ref INIT_Objects_Signals_B5 instead.
 */
#define SETUP_Objects_Signals_B5_Reserved           0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B5_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B5_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B5_Reserved(buf) \
	SET_Objects_Signals_B5_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B5_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B5_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B5_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B5_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B5_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C5_Absolute_Speed_5 Signal Absolute_Speed_5 of Message Objects_Signals_C5 (0x50e)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C5
 * @{
 */

/**
 * Signal Absolute_Speed_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C5_Absolute_Speed_5 and \ref GET_Objects_Signals_C5_Absolute_Speed_5 instead.
 */
#define SIG_Objects_Signals_C5_Absolute_Speed_5        0, 0, 0, 12

/**
 * Signal Absolute_Speed_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C5_Absolute_Speed_5 or \ref INIT_Objects_Signals_C5 instead.
 */
#define SETUP_Objects_Signals_C5_Absolute_Speed_5      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C5_Absolute_Speed_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C5_Absolute_Speed_5(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C5_Absolute_Speed_5(buf) \
	SET_Objects_Signals_C5_Absolute_Speed_5(buf, 0)

/**
 * Signal Absolute_Speed_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C5_Absolute_Speed_5(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_5 raw initial value.
 */
#define START_Objects_Signals_C5_Absolute_Speed_5      0

/**
 * Signal Absolute_Speed_5 raw minimum value.
 */
#define MIN_Objects_Signals_C5_Absolute_Speed_5        0

/**
 * Signal Absolute_Speed_5 raw maximum value.
 */
#define MAX_Objects_Signals_C5_Absolute_Speed_5        4000

/**
 * Signal Absolute_Speed_5 raw offset value.
 */
#define OFF_Objects_Signals_C5_Absolute_Speed_5        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C5_OBJ_Motion_Status_5 Signal OBJ_Motion_Status_5 of Message Objects_Signals_C5 (0x50e)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C5_OBJ_Motion_Status_5.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C5
 * @{
 */

/**
 * Signal OBJ_Motion_Status_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C5_OBJ_Motion_Status_5 and \ref GET_Objects_Signals_C5_OBJ_Motion_Status_5 instead.
 */
#define SIG_Objects_Signals_C5_OBJ_Motion_Status_5        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C5_OBJ_Motion_Status_5 or \ref INIT_Objects_Signals_C5 instead.
 */
#define SETUP_Objects_Signals_C5_OBJ_Motion_Status_5      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C5_OBJ_Motion_Status_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C5_OBJ_Motion_Status_5(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C5_OBJ_Motion_Status_5(buf) \
	SET_Objects_Signals_C5_OBJ_Motion_Status_5(buf, 0)

/**
 * Signal OBJ_Motion_Status_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C5_OBJ_Motion_Status_5(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_5 raw initial value.
 */
#define START_Objects_Signals_C5_OBJ_Motion_Status_5      0

/**
 * Signal OBJ_Motion_Status_5 raw minimum value.
 */
#define MIN_Objects_Signals_C5_OBJ_Motion_Status_5        0

/**
 * Signal OBJ_Motion_Status_5 raw maximum value.
 */
#define MAX_Objects_Signals_C5_OBJ_Motion_Status_5        4

/**
 * Signal OBJ_Motion_Status_5 raw offset value.
 */
#define OFF_Objects_Signals_C5_OBJ_Motion_Status_5        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C5_OBJ_Motion_Status_5 Value Table for Signal OBJ_Motion_Status_5 in Message Objects_Signals_C5 (0x50e)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C5_OBJ_Motion_Status_5.
 *
 * @ingroup SIG_Objects_Signals_C5_OBJ_Motion_Status_5
 */

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Status_5 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Status_5
 */
#define Objects_Signals_C5_OBJ_Motion_Status_5_Moving              4

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Status_5 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Status_5
 */
#define Objects_Signals_C5_OBJ_Motion_Status_5_Stopped             3

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Status_5 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Status_5
 */
#define Objects_Signals_C5_OBJ_Motion_Status_5_Stationary          2

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Status_5 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Status_5
 */
#define Objects_Signals_C5_OBJ_Motion_Status_5_Moving_1            1

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Status_5 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Status_5
 */
#define Objects_Signals_C5_OBJ_Motion_Status_5_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C5_OBJ_Motion_Category_5 Signal OBJ_Motion_Category_5 of Message Objects_Signals_C5 (0x50e)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C5_OBJ_Motion_Category_5.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C5
 * @{
 */

/**
 * Signal OBJ_Motion_Category_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C5_OBJ_Motion_Category_5 and \ref GET_Objects_Signals_C5_OBJ_Motion_Category_5 instead.
 */
#define SIG_Objects_Signals_C5_OBJ_Motion_Category_5        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C5_OBJ_Motion_Category_5 or \ref INIT_Objects_Signals_C5 instead.
 */
#define SETUP_Objects_Signals_C5_OBJ_Motion_Category_5      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C5_OBJ_Motion_Category_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C5_OBJ_Motion_Category_5(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C5_OBJ_Motion_Category_5(buf) \
	SET_Objects_Signals_C5_OBJ_Motion_Category_5(buf, 0)

/**
 * Signal OBJ_Motion_Category_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C5_OBJ_Motion_Category_5(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_5 raw initial value.
 */
#define START_Objects_Signals_C5_OBJ_Motion_Category_5      0

/**
 * Signal OBJ_Motion_Category_5 raw minimum value.
 */
#define MIN_Objects_Signals_C5_OBJ_Motion_Category_5        0

/**
 * Signal OBJ_Motion_Category_5 raw maximum value.
 */
#define MAX_Objects_Signals_C5_OBJ_Motion_Category_5        12

/**
 * Signal OBJ_Motion_Category_5 raw offset value.
 */
#define OFF_Objects_Signals_C5_OBJ_Motion_Category_5        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5 Value Table for Signal OBJ_Motion_Category_5 in Message Objects_Signals_C5 (0x50e)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C5_OBJ_Motion_Category_5.
 *
 * @ingroup SIG_Objects_Signals_C5_OBJ_Motion_Category_5
 */

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_MOVING           10

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_RTAP             9

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_LTAP             8

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_CROSSING         7

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_PASSING          1

/**
 * Value table Objects_Signals_C5_OBJ_Motion_Category_5 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C5_OBJ_Motion_Category_5
 */
#define Objects_Signals_C5_OBJ_Motion_Category_5_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C5_Brake_Light_5 Signal Brake_Light_5 of Message Objects_Signals_C5 (0x50e)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C5_Brake_Light_5.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C5
 * @{
 */

/**
 * Signal Brake_Light_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C5_Brake_Light_5 and \ref GET_Objects_Signals_C5_Brake_Light_5 instead.
 */
#define SIG_Objects_Signals_C5_Brake_Light_5        0, 0, 19, 1

/**
 * Signal Brake_Light_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C5_Brake_Light_5 or \ref INIT_Objects_Signals_C5 instead.
 */
#define SETUP_Objects_Signals_C5_Brake_Light_5      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C5_Brake_Light_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C5_Brake_Light_5(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C5_Brake_Light_5(buf) \
	SET_Objects_Signals_C5_Brake_Light_5(buf, 0)

/**
 * Signal Brake_Light_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C5_Brake_Light_5(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_5 raw initial value.
 */
#define START_Objects_Signals_C5_Brake_Light_5      0

/**
 * Signal Brake_Light_5 raw minimum value.
 */
#define MIN_Objects_Signals_C5_Brake_Light_5        0

/**
 * Signal Brake_Light_5 raw maximum value.
 */
#define MAX_Objects_Signals_C5_Brake_Light_5        1

/**
 * Signal Brake_Light_5 raw offset value.
 */
#define OFF_Objects_Signals_C5_Brake_Light_5        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C5_Brake_Light_5 Value Table for Signal Brake_Light_5 in Message Objects_Signals_C5 (0x50e)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C5_Brake_Light_5.
 *
 * @ingroup SIG_Objects_Signals_C5_Brake_Light_5
 */

/**
 * Value table Objects_Signals_C5_Brake_Light_5 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C5_Brake_Light_5
 */
#define Objects_Signals_C5_Brake_Light_5_On                  1

/**
 * Value table Objects_Signals_C5_Brake_Light_5 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C5_Brake_Light_5
 */
#define Objects_Signals_C5_Brake_Light_5_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C5_Turn_Indicator_Right_5 Signal Turn_Indicator_Right_5 of Message Objects_Signals_C5 (0x50e)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C5_Turn_Indicator_Right_5.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C5
 * @{
 */

/**
 * Signal Turn_Indicator_Right_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C5_Turn_Indicator_Right_5 and \ref GET_Objects_Signals_C5_Turn_Indicator_Right_5 instead.
 */
#define SIG_Objects_Signals_C5_Turn_Indicator_Right_5        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C5_Turn_Indicator_Right_5 or \ref INIT_Objects_Signals_C5 instead.
 */
#define SETUP_Objects_Signals_C5_Turn_Indicator_Right_5      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C5_Turn_Indicator_Right_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C5_Turn_Indicator_Right_5(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C5_Turn_Indicator_Right_5(buf) \
	SET_Objects_Signals_C5_Turn_Indicator_Right_5(buf, 0)

/**
 * Signal Turn_Indicator_Right_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C5_Turn_Indicator_Right_5(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_5 raw initial value.
 */
#define START_Objects_Signals_C5_Turn_Indicator_Right_5      0

/**
 * Signal Turn_Indicator_Right_5 raw minimum value.
 */
#define MIN_Objects_Signals_C5_Turn_Indicator_Right_5        0

/**
 * Signal Turn_Indicator_Right_5 raw maximum value.
 */
#define MAX_Objects_Signals_C5_Turn_Indicator_Right_5        1

/**
 * Signal Turn_Indicator_Right_5 raw offset value.
 */
#define OFF_Objects_Signals_C5_Turn_Indicator_Right_5        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C5_Turn_Indicator_Right_5 Value Table for Signal Turn_Indicator_Right_5 in Message Objects_Signals_C5 (0x50e)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C5_Turn_Indicator_Right_5.
 *
 * @ingroup SIG_Objects_Signals_C5_Turn_Indicator_Right_5
 */

/**
 * Value table Objects_Signals_C5_Turn_Indicator_Right_5 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C5_Turn_Indicator_Right_5
 */
#define Objects_Signals_C5_Turn_Indicator_Right_5_On                  1

/**
 * Value table Objects_Signals_C5_Turn_Indicator_Right_5 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C5_Turn_Indicator_Right_5
 */
#define Objects_Signals_C5_Turn_Indicator_Right_5_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C5_Turn_Indicator_Left_5 Signal Turn_Indicator_Left_5 of Message Objects_Signals_C5 (0x50e)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C5_Turn_Indicator_Left_5.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C5
 * @{
 */

/**
 * Signal Turn_Indicator_Left_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C5_Turn_Indicator_Left_5 and \ref GET_Objects_Signals_C5_Turn_Indicator_Left_5 instead.
 */
#define SIG_Objects_Signals_C5_Turn_Indicator_Left_5        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C5_Turn_Indicator_Left_5 or \ref INIT_Objects_Signals_C5 instead.
 */
#define SETUP_Objects_Signals_C5_Turn_Indicator_Left_5      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C5_Turn_Indicator_Left_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C5_Turn_Indicator_Left_5(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C5_Turn_Indicator_Left_5(buf) \
	SET_Objects_Signals_C5_Turn_Indicator_Left_5(buf, 0)

/**
 * Signal Turn_Indicator_Left_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C5_Turn_Indicator_Left_5(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_5 raw initial value.
 */
#define START_Objects_Signals_C5_Turn_Indicator_Left_5      0

/**
 * Signal Turn_Indicator_Left_5 raw minimum value.
 */
#define MIN_Objects_Signals_C5_Turn_Indicator_Left_5        0

/**
 * Signal Turn_Indicator_Left_5 raw maximum value.
 */
#define MAX_Objects_Signals_C5_Turn_Indicator_Left_5        1

/**
 * Signal Turn_Indicator_Left_5 raw offset value.
 */
#define OFF_Objects_Signals_C5_Turn_Indicator_Left_5        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C5_Turn_Indicator_Left_5 Value Table for Signal Turn_Indicator_Left_5 in Message Objects_Signals_C5 (0x50e)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C5_Turn_Indicator_Left_5.
 *
 * @ingroup SIG_Objects_Signals_C5_Turn_Indicator_Left_5
 */

/**
 * Value table Objects_Signals_C5_Turn_Indicator_Left_5 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C5_Turn_Indicator_Left_5
 */
#define Objects_Signals_C5_Turn_Indicator_Left_5_On                  1

/**
 * Value table Objects_Signals_C5_Turn_Indicator_Left_5 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C5_Turn_Indicator_Left_5
 */
#define Objects_Signals_C5_Turn_Indicator_Left_5_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C5_Light_indicator_validity_5 Signal Light_indicator_validity_5 of Message Objects_Signals_C5 (0x50e)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C5_Light_indicator_validity_5.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C5
 * @{
 */

/**
 * Signal Light_indicator_validity_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C5_Light_indicator_validity_5 and \ref GET_Objects_Signals_C5_Light_indicator_validity_5 instead.
 */
#define SIG_Objects_Signals_C5_Light_indicator_validity_5        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C5_Light_indicator_validity_5 or \ref INIT_Objects_Signals_C5 instead.
 */
#define SETUP_Objects_Signals_C5_Light_indicator_validity_5      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C5_Light_indicator_validity_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C5_Light_indicator_validity_5(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C5_Light_indicator_validity_5(buf) \
	SET_Objects_Signals_C5_Light_indicator_validity_5(buf, 0)

/**
 * Signal Light_indicator_validity_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C5_Light_indicator_validity_5(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_5 raw initial value.
 */
#define START_Objects_Signals_C5_Light_indicator_validity_5      0

/**
 * Signal Light_indicator_validity_5 raw minimum value.
 */
#define MIN_Objects_Signals_C5_Light_indicator_validity_5        0

/**
 * Signal Light_indicator_validity_5 raw maximum value.
 */
#define MAX_Objects_Signals_C5_Light_indicator_validity_5        1

/**
 * Signal Light_indicator_validity_5 raw offset value.
 */
#define OFF_Objects_Signals_C5_Light_indicator_validity_5        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C5_Light_indicator_validity_5 Value Table for Signal Light_indicator_validity_5 in Message Objects_Signals_C5 (0x50e)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C5_Light_indicator_validity_5.
 *
 * @ingroup SIG_Objects_Signals_C5_Light_indicator_validity_5
 */

/**
 * Value table Objects_Signals_C5_Light_indicator_validity_5 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C5_Light_indicator_validity_5
 */
#define Objects_Signals_C5_Light_indicator_validity_5_True                1

/**
 * Value table Objects_Signals_C5_Light_indicator_validity_5 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C5_Light_indicator_validity_5
 */
#define Objects_Signals_C5_Light_indicator_validity_5_False               0

/**
 * @defgroup SIG_Objects_Signals_C5_OBJ_Angle_Mid_5 Signal OBJ_Angle_Mid_5 of Message Objects_Signals_C5 (0x50e)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C5
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C5_OBJ_Angle_Mid_5 and \ref GET_Objects_Signals_C5_OBJ_Angle_Mid_5 instead.
 */
#define SIG_Objects_Signals_C5_OBJ_Angle_Mid_5        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C5_OBJ_Angle_Mid_5 or \ref INIT_Objects_Signals_C5 instead.
 */
#define SETUP_Objects_Signals_C5_OBJ_Angle_Mid_5      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C5_OBJ_Angle_Mid_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C5_OBJ_Angle_Mid_5(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C5_OBJ_Angle_Mid_5(buf) \
	SET_Objects_Signals_C5_OBJ_Angle_Mid_5(buf, 0)

/**
 * Signal OBJ_Angle_Mid_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C5_OBJ_Angle_Mid_5(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_5 raw initial value.
 */
#define START_Objects_Signals_C5_OBJ_Angle_Mid_5      0

/**
 * Signal OBJ_Angle_Mid_5 raw minimum value.
 */
#define MIN_Objects_Signals_C5_OBJ_Angle_Mid_5        0

/**
 * Signal OBJ_Angle_Mid_5 raw maximum value.
 */
#define MAX_Objects_Signals_C5_OBJ_Angle_Mid_5        15710

/**
 * Signal OBJ_Angle_Mid_5 raw offset value.
 */
#define OFF_Objects_Signals_C5_OBJ_Angle_Mid_5        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C5_OBJ_Angle_Rate_5 Signal OBJ_Angle_Rate_5 of Message Objects_Signals_C5 (0x50e)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C5
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C5_OBJ_Angle_Rate_5 and \ref GET_Objects_Signals_C5_OBJ_Angle_Rate_5 instead.
 */
#define SIG_Objects_Signals_C5_OBJ_Angle_Rate_5        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C5_OBJ_Angle_Rate_5 or \ref INIT_Objects_Signals_C5 instead.
 */
#define SETUP_Objects_Signals_C5_OBJ_Angle_Rate_5      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C5_OBJ_Angle_Rate_5(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C5_OBJ_Angle_Rate_5(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C5_OBJ_Angle_Rate_5(buf) \
	SET_Objects_Signals_C5_OBJ_Angle_Rate_5(buf, 0)

/**
 * Signal OBJ_Angle_Rate_5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C5_OBJ_Angle_Rate_5(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_5 raw initial value.
 */
#define START_Objects_Signals_C5_OBJ_Angle_Rate_5      0

/**
 * Signal OBJ_Angle_Rate_5 raw minimum value.
 */
#define MIN_Objects_Signals_C5_OBJ_Angle_Rate_5        0

/**
 * Signal OBJ_Angle_Rate_5 raw maximum value.
 */
#define MAX_Objects_Signals_C5_OBJ_Angle_Rate_5        2233

/**
 * Signal OBJ_Angle_Rate_5 raw offset value.
 */
#define OFF_Objects_Signals_C5_OBJ_Angle_Rate_5        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C5_Reserved Signal Reserved of Message Objects_Signals_C5 (0x50e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C5
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C5_Reserved and \ref GET_Objects_Signals_C5_Reserved instead.
 */
#define SIG_Objects_Signals_C5_Reserved             0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C5_Reserved or \ref INIT_Objects_Signals_C5 instead.
 */
#define SETUP_Objects_Signals_C5_Reserved           0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C5_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C5_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C5_Reserved(buf) \
	SET_Objects_Signals_C5_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C5_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C5_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C5_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C5_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C5_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A6_Obj_ID_6 Signal Obj_ID_6 of Message Objects_Signals_A6 (0x50f)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A6
 * @{
 */

/**
 * Signal Obj_ID_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A6_Obj_ID_6 and \ref GET_Objects_Signals_A6_Obj_ID_6 instead.
 */
#define SIG_Objects_Signals_A6_Obj_ID_6             0, 0, 0, 7

/**
 * Signal Obj_ID_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A6_Obj_ID_6 or \ref INIT_Objects_Signals_A6 instead.
 */
#define SETUP_Objects_Signals_A6_Obj_ID_6           0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A6_Obj_ID_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A6_Obj_ID_6(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A6_Obj_ID_6(buf) \
	SET_Objects_Signals_A6_Obj_ID_6(buf, 0)

/**
 * Signal Obj_ID_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A6_Obj_ID_6(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_6 raw initial value.
 */
#define START_Objects_Signals_A6_Obj_ID_6           0

/**
 * Signal Obj_ID_6 raw minimum value.
 */
#define MIN_Objects_Signals_A6_Obj_ID_6             0

/**
 * Signal Obj_ID_6 raw maximum value.
 */
#define MAX_Objects_Signals_A6_Obj_ID_6             127

/**
 * Signal Obj_ID_6 raw offset value.
 */
#define OFF_Objects_Signals_A6_Obj_ID_6             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A6_Object_Class_6 Signal Object_Class_6 of Message Objects_Signals_A6 (0x50f)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A6_Object_Class_6.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A6
 * @{
 */

/**
 * Signal Object_Class_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A6_Object_Class_6 and \ref GET_Objects_Signals_A6_Object_Class_6 instead.
 */
#define SIG_Objects_Signals_A6_Object_Class_6        0, 0, 7, 3

/**
 * Signal Object_Class_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A6_Object_Class_6 or \ref INIT_Objects_Signals_A6 instead.
 */
#define SETUP_Objects_Signals_A6_Object_Class_6      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A6_Object_Class_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A6_Object_Class_6(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A6_Object_Class_6(buf) \
	SET_Objects_Signals_A6_Object_Class_6(buf, 0)

/**
 * Signal Object_Class_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A6_Object_Class_6(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_6 raw initial value.
 */
#define START_Objects_Signals_A6_Object_Class_6      0

/**
 * Signal Object_Class_6 raw minimum value.
 */
#define MIN_Objects_Signals_A6_Object_Class_6        0

/**
 * Signal Object_Class_6 raw maximum value.
 */
#define MAX_Objects_Signals_A6_Object_Class_6        7

/**
 * Signal Object_Class_6 raw offset value.
 */
#define OFF_Objects_Signals_A6_Object_Class_6        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A6_Object_Class_6 Value Table for Signal Object_Class_6 in Message Objects_Signals_A6 (0x50f)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A6_Object_Class_6.
 *
 * @ingroup SIG_Objects_Signals_A6_Object_Class_6
 */

/**
 * Value table Objects_Signals_A6_Object_Class_6 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A6_Object_Class_6
 */
#define Objects_Signals_A6_Object_Class_6_uncertain_vcl       7

/**
 * Value table Objects_Signals_A6_Object_Class_6 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A6_Object_Class_6
 */
#define Objects_Signals_A6_Object_Class_6_animal              6

/**
 * Value table Objects_Signals_A6_Object_Class_6 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A6_Object_Class_6
 */
#define Objects_Signals_A6_Object_Class_6_general_object      5

/**
 * Value table Objects_Signals_A6_Object_Class_6 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A6_Object_Class_6
 */
#define Objects_Signals_A6_Object_Class_6_pedestrian          4

/**
 * Value table Objects_Signals_A6_Object_Class_6 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A6_Object_Class_6
 */
#define Objects_Signals_A6_Object_Class_6_bicycle             3

/**
 * Value table Objects_Signals_A6_Object_Class_6 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A6_Object_Class_6
 */
#define Objects_Signals_A6_Object_Class_6_bike                2

/**
 * Value table Objects_Signals_A6_Object_Class_6 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A6_Object_Class_6
 */
#define Objects_Signals_A6_Object_Class_6_truck               1

/**
 * Value table Objects_Signals_A6_Object_Class_6 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A6_Object_Class_6
 */
#define Objects_Signals_A6_Object_Class_6_car                 0

/**
 * @defgroup SIG_Objects_Signals_A6_OBJ_Width_6 Signal OBJ_Width_6 of Message Objects_Signals_A6 (0x50f)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A6
 * @{
 */

/**
 * Signal OBJ_Width_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A6_OBJ_Width_6 and \ref GET_Objects_Signals_A6_OBJ_Width_6 instead.
 */
#define SIG_Objects_Signals_A6_OBJ_Width_6          0, 0, 10, 7

/**
 * Signal OBJ_Width_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A6_OBJ_Width_6 or \ref INIT_Objects_Signals_A6 instead.
 */
#define SETUP_Objects_Signals_A6_OBJ_Width_6        0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A6_OBJ_Width_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A6_OBJ_Width_6(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A6_OBJ_Width_6(buf) \
	SET_Objects_Signals_A6_OBJ_Width_6(buf, 0)

/**
 * Signal OBJ_Width_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A6_OBJ_Width_6(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_6 raw initial value.
 */
#define START_Objects_Signals_A6_OBJ_Width_6        0

/**
 * Signal OBJ_Width_6 raw minimum value.
 */
#define MIN_Objects_Signals_A6_OBJ_Width_6          0

/**
 * Signal OBJ_Width_6 raw maximum value.
 */
#define MAX_Objects_Signals_A6_OBJ_Width_6          127

/**
 * Signal OBJ_Width_6 raw offset value.
 */
#define OFF_Objects_Signals_A6_OBJ_Width_6          0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A6_OBJ_Length_6 Signal OBJ_Length_6 of Message Objects_Signals_A6 (0x50f)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A6
 * @{
 */

/**
 * Signal OBJ_Length_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A6_OBJ_Length_6 and \ref GET_Objects_Signals_A6_OBJ_Length_6 instead.
 */
#define SIG_Objects_Signals_A6_OBJ_Length_6         0, 0, 17, 9

/**
 * Signal OBJ_Length_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A6_OBJ_Length_6 or \ref INIT_Objects_Signals_A6 instead.
 */
#define SETUP_Objects_Signals_A6_OBJ_Length_6       0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A6_OBJ_Length_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A6_OBJ_Length_6(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A6_OBJ_Length_6(buf) \
	SET_Objects_Signals_A6_OBJ_Length_6(buf, 0)

/**
 * Signal OBJ_Length_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A6_OBJ_Length_6(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_6 raw initial value.
 */
#define START_Objects_Signals_A6_OBJ_Length_6       0

/**
 * Signal OBJ_Length_6 raw minimum value.
 */
#define MIN_Objects_Signals_A6_OBJ_Length_6         0

/**
 * Signal OBJ_Length_6 raw maximum value.
 */
#define MAX_Objects_Signals_A6_OBJ_Length_6         510

/**
 * Signal OBJ_Length_6 raw offset value.
 */
#define OFF_Objects_Signals_A6_OBJ_Length_6         0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A6_Relative_Long_Velocity_6 Signal Relative_Long_Velocity_6 of Message Objects_Signals_A6 (0x50f)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A6
 * @{
 */

/**
 * Signal Relative_Long_Velocity_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A6_Relative_Long_Velocity_6 and \ref GET_Objects_Signals_A6_Relative_Long_Velocity_6 instead.
 */
#define SIG_Objects_Signals_A6_Relative_Long_Velocity_6        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A6_Relative_Long_Velocity_6 or \ref INIT_Objects_Signals_A6 instead.
 */
#define SETUP_Objects_Signals_A6_Relative_Long_Velocity_6      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A6_Relative_Long_Velocity_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A6_Relative_Long_Velocity_6(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A6_Relative_Long_Velocity_6(buf) \
	SET_Objects_Signals_A6_Relative_Long_Velocity_6(buf, 0)

/**
 * Signal Relative_Long_Velocity_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A6_Relative_Long_Velocity_6(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_6 raw initial value.
 */
#define START_Objects_Signals_A6_Relative_Long_Velocity_6      0

/**
 * Signal Relative_Long_Velocity_6 raw minimum value.
 */
#define MIN_Objects_Signals_A6_Relative_Long_Velocity_6        0

/**
 * Signal Relative_Long_Velocity_6 raw maximum value.
 */
#define MAX_Objects_Signals_A6_Relative_Long_Velocity_6        5000

/**
 * Signal Relative_Long_Velocity_6 raw offset value.
 */
#define OFF_Objects_Signals_A6_Relative_Long_Velocity_6        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A6_OBJ_Lane_Assignment_6 Signal OBJ_Lane_Assignment_6 of Message Objects_Signals_A6 (0x50f)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A6_OBJ_Lane_Assignment_6.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A6
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A6_OBJ_Lane_Assignment_6 and \ref GET_Objects_Signals_A6_OBJ_Lane_Assignment_6 instead.
 */
#define SIG_Objects_Signals_A6_OBJ_Lane_Assignment_6        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A6_OBJ_Lane_Assignment_6 or \ref INIT_Objects_Signals_A6 instead.
 */
#define SETUP_Objects_Signals_A6_OBJ_Lane_Assignment_6      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A6_OBJ_Lane_Assignment_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A6_OBJ_Lane_Assignment_6(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A6_OBJ_Lane_Assignment_6(buf) \
	SET_Objects_Signals_A6_OBJ_Lane_Assignment_6(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A6_OBJ_Lane_Assignment_6(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_6 raw initial value.
 */
#define START_Objects_Signals_A6_OBJ_Lane_Assignment_6      0

/**
 * Signal OBJ_Lane_Assignment_6 raw minimum value.
 */
#define MIN_Objects_Signals_A6_OBJ_Lane_Assignment_6        0

/**
 * Signal OBJ_Lane_Assignment_6 raw maximum value.
 */
#define MAX_Objects_Signals_A6_OBJ_Lane_Assignment_6        5

/**
 * Signal OBJ_Lane_Assignment_6 raw offset value.
 */
#define OFF_Objects_Signals_A6_OBJ_Lane_Assignment_6        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A6_OBJ_Lane_Assignment_6 Value Table for Signal OBJ_Lane_Assignment_6 in Message Objects_Signals_A6 (0x50f)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A6_OBJ_Lane_Assignment_6.
 *
 * @ingroup SIG_Objects_Signals_A6_OBJ_Lane_Assignment_6
 */

/**
 * Value table Objects_Signals_A6_OBJ_Lane_Assignment_6 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A6_OBJ_Lane_Assignment_6
 */
#define Objects_Signals_A6_OBJ_Lane_Assignment_6_Not                 5

/**
 * Value table Objects_Signals_A6_OBJ_Lane_Assignment_6 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A6_OBJ_Lane_Assignment_6
 */
#define Objects_Signals_A6_OBJ_Lane_Assignment_6_Next                4

/**
 * Value table Objects_Signals_A6_OBJ_Lane_Assignment_6 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A6_OBJ_Lane_Assignment_6
 */
#define Objects_Signals_A6_OBJ_Lane_Assignment_6_Right               3

/**
 * Value table Objects_Signals_A6_OBJ_Lane_Assignment_6 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A6_OBJ_Lane_Assignment_6
 */
#define Objects_Signals_A6_OBJ_Lane_Assignment_6_Ego                 2

/**
 * Value table Objects_Signals_A6_OBJ_Lane_Assignment_6 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A6_OBJ_Lane_Assignment_6
 */
#define Objects_Signals_A6_OBJ_Lane_Assignment_6_Left                1

/**
 * Value table Objects_Signals_A6_OBJ_Lane_Assignment_6 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A6_OBJ_Lane_Assignment_6
 */
#define Objects_Signals_A6_OBJ_Lane_Assignment_6_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A6_Relative_Lat_Velocity_6 Signal Relative_Lat_Velocity_6 of Message Objects_Signals_A6 (0x50f)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A6
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A6_Relative_Lat_Velocity_6 and \ref GET_Objects_Signals_A6_Relative_Lat_Velocity_6 instead.
 */
#define SIG_Objects_Signals_A6_Relative_Lat_Velocity_6        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A6_Relative_Lat_Velocity_6 or \ref INIT_Objects_Signals_A6 instead.
 */
#define SETUP_Objects_Signals_A6_Relative_Lat_Velocity_6      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A6_Relative_Lat_Velocity_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A6_Relative_Lat_Velocity_6(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A6_Relative_Lat_Velocity_6(buf) \
	SET_Objects_Signals_A6_Relative_Lat_Velocity_6(buf, 0)

/**
 * Signal Relative_Lat_Velocity_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A6_Relative_Lat_Velocity_6(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_6 raw initial value.
 */
#define START_Objects_Signals_A6_Relative_Lat_Velocity_6      0

/**
 * Signal Relative_Lat_Velocity_6 raw minimum value.
 */
#define MIN_Objects_Signals_A6_Relative_Lat_Velocity_6        0

/**
 * Signal Relative_Lat_Velocity_6 raw maximum value.
 */
#define MAX_Objects_Signals_A6_Relative_Lat_Velocity_6        2000

/**
 * Signal Relative_Lat_Velocity_6 raw offset value.
 */
#define OFF_Objects_Signals_A6_Relative_Lat_Velocity_6        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A6_Reserved Signal Reserved of Message Objects_Signals_A6 (0x50f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A6
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A6_Reserved and \ref GET_Objects_Signals_A6_Reserved instead.
 */
#define SIG_Objects_Signals_A6_Reserved             0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A6_Reserved or \ref INIT_Objects_Signals_A6 instead.
 */
#define SETUP_Objects_Signals_A6_Reserved           0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A6_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A6_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A6_Reserved(buf) \
	SET_Objects_Signals_A6_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A6_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A6_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A6_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A6_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A6_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B6_Absolute_Long_Acc_6 Signal Absolute_Long_Acc_6 of Message Objects_Signals_B6 (0x510)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B6
 * @{
 */

/**
 * Signal Absolute_Long_Acc_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B6_Absolute_Long_Acc_6 and \ref GET_Objects_Signals_B6_Absolute_Long_Acc_6 instead.
 */
#define SIG_Objects_Signals_B6_Absolute_Long_Acc_6        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B6_Absolute_Long_Acc_6 or \ref INIT_Objects_Signals_B6 instead.
 */
#define SETUP_Objects_Signals_B6_Absolute_Long_Acc_6      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B6_Absolute_Long_Acc_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B6_Absolute_Long_Acc_6(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B6_Absolute_Long_Acc_6(buf) \
	SET_Objects_Signals_B6_Absolute_Long_Acc_6(buf, 0)

/**
 * Signal Absolute_Long_Acc_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B6_Absolute_Long_Acc_6(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_6 raw initial value.
 */
#define START_Objects_Signals_B6_Absolute_Long_Acc_6      0

/**
 * Signal Absolute_Long_Acc_6 raw minimum value.
 */
#define MIN_Objects_Signals_B6_Absolute_Long_Acc_6        0

/**
 * Signal Absolute_Long_Acc_6 raw maximum value.
 */
#define MAX_Objects_Signals_B6_Absolute_Long_Acc_6        511

/**
 * Signal Absolute_Long_Acc_6 raw offset value.
 */
#define OFF_Objects_Signals_B6_Absolute_Long_Acc_6        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B6_Long_Distance_6 Signal Long_Distance_6 of Message Objects_Signals_B6 (0x510)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B6
 * @{
 */

/**
 * Signal Long_Distance_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B6_Long_Distance_6 and \ref GET_Objects_Signals_B6_Long_Distance_6 instead.
 */
#define SIG_Objects_Signals_B6_Long_Distance_6        0, 0, 9, 13

/**
 * Signal Long_Distance_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B6_Long_Distance_6 or \ref INIT_Objects_Signals_B6 instead.
 */
#define SETUP_Objects_Signals_B6_Long_Distance_6      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B6_Long_Distance_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B6_Long_Distance_6(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B6_Long_Distance_6(buf) \
	SET_Objects_Signals_B6_Long_Distance_6(buf, 0)

/**
 * Signal Long_Distance_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B6_Long_Distance_6(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_6 raw initial value.
 */
#define START_Objects_Signals_B6_Long_Distance_6      0

/**
 * Signal Long_Distance_6 raw minimum value.
 */
#define MIN_Objects_Signals_B6_Long_Distance_6        0

/**
 * Signal Long_Distance_6 raw maximum value.
 */
#define MAX_Objects_Signals_B6_Long_Distance_6        7000

/**
 * Signal Long_Distance_6 raw offset value.
 */
#define OFF_Objects_Signals_B6_Long_Distance_6        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B6_Lateral_Distance_6 Signal Lateral_Distance_6 of Message Objects_Signals_B6 (0x510)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B6
 * @{
 */

/**
 * Signal Lateral_Distance_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B6_Lateral_Distance_6 and \ref GET_Objects_Signals_B6_Lateral_Distance_6 instead.
 */
#define SIG_Objects_Signals_B6_Lateral_Distance_6        0, 0, 22, 12

/**
 * Signal Lateral_Distance_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B6_Lateral_Distance_6 or \ref INIT_Objects_Signals_B6 instead.
 */
#define SETUP_Objects_Signals_B6_Lateral_Distance_6      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B6_Lateral_Distance_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B6_Lateral_Distance_6(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B6_Lateral_Distance_6(buf) \
	SET_Objects_Signals_B6_Lateral_Distance_6(buf, 0)

/**
 * Signal Lateral_Distance_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B6_Lateral_Distance_6(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_6 raw initial value.
 */
#define START_Objects_Signals_B6_Lateral_Distance_6      0

/**
 * Signal Lateral_Distance_6 raw minimum value.
 */
#define MIN_Objects_Signals_B6_Lateral_Distance_6        0

/**
 * Signal Lateral_Distance_6 raw maximum value.
 */
#define MAX_Objects_Signals_B6_Lateral_Distance_6        4094

/**
 * Signal Lateral_Distance_6 raw offset value.
 */
#define OFF_Objects_Signals_B6_Lateral_Distance_6        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B6_Reserved Signal Reserved of Message Objects_Signals_B6 (0x510)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B6
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B6_Reserved and \ref GET_Objects_Signals_B6_Reserved instead.
 */
#define SIG_Objects_Signals_B6_Reserved             0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B6_Reserved or \ref INIT_Objects_Signals_B6 instead.
 */
#define SETUP_Objects_Signals_B6_Reserved           0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B6_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B6_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B6_Reserved(buf) \
	SET_Objects_Signals_B6_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B6_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B6_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B6_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B6_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B6_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C6_Absolute_Speed_6 Signal Absolute_Speed_6 of Message Objects_Signals_C6 (0x511)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C6
 * @{
 */

/**
 * Signal Absolute_Speed_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C6_Absolute_Speed_6 and \ref GET_Objects_Signals_C6_Absolute_Speed_6 instead.
 */
#define SIG_Objects_Signals_C6_Absolute_Speed_6        0, 0, 0, 12

/**
 * Signal Absolute_Speed_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C6_Absolute_Speed_6 or \ref INIT_Objects_Signals_C6 instead.
 */
#define SETUP_Objects_Signals_C6_Absolute_Speed_6      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C6_Absolute_Speed_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C6_Absolute_Speed_6(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C6_Absolute_Speed_6(buf) \
	SET_Objects_Signals_C6_Absolute_Speed_6(buf, 0)

/**
 * Signal Absolute_Speed_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C6_Absolute_Speed_6(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_6 raw initial value.
 */
#define START_Objects_Signals_C6_Absolute_Speed_6      0

/**
 * Signal Absolute_Speed_6 raw minimum value.
 */
#define MIN_Objects_Signals_C6_Absolute_Speed_6        0

/**
 * Signal Absolute_Speed_6 raw maximum value.
 */
#define MAX_Objects_Signals_C6_Absolute_Speed_6        4000

/**
 * Signal Absolute_Speed_6 raw offset value.
 */
#define OFF_Objects_Signals_C6_Absolute_Speed_6        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C6_OBJ_Motion_Status_6 Signal OBJ_Motion_Status_6 of Message Objects_Signals_C6 (0x511)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C6_OBJ_Motion_Status_6.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C6
 * @{
 */

/**
 * Signal OBJ_Motion_Status_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C6_OBJ_Motion_Status_6 and \ref GET_Objects_Signals_C6_OBJ_Motion_Status_6 instead.
 */
#define SIG_Objects_Signals_C6_OBJ_Motion_Status_6        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C6_OBJ_Motion_Status_6 or \ref INIT_Objects_Signals_C6 instead.
 */
#define SETUP_Objects_Signals_C6_OBJ_Motion_Status_6      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C6_OBJ_Motion_Status_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C6_OBJ_Motion_Status_6(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C6_OBJ_Motion_Status_6(buf) \
	SET_Objects_Signals_C6_OBJ_Motion_Status_6(buf, 0)

/**
 * Signal OBJ_Motion_Status_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C6_OBJ_Motion_Status_6(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_6 raw initial value.
 */
#define START_Objects_Signals_C6_OBJ_Motion_Status_6      0

/**
 * Signal OBJ_Motion_Status_6 raw minimum value.
 */
#define MIN_Objects_Signals_C6_OBJ_Motion_Status_6        0

/**
 * Signal OBJ_Motion_Status_6 raw maximum value.
 */
#define MAX_Objects_Signals_C6_OBJ_Motion_Status_6        4

/**
 * Signal OBJ_Motion_Status_6 raw offset value.
 */
#define OFF_Objects_Signals_C6_OBJ_Motion_Status_6        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C6_OBJ_Motion_Status_6 Value Table for Signal OBJ_Motion_Status_6 in Message Objects_Signals_C6 (0x511)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C6_OBJ_Motion_Status_6.
 *
 * @ingroup SIG_Objects_Signals_C6_OBJ_Motion_Status_6
 */

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Status_6 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Status_6
 */
#define Objects_Signals_C6_OBJ_Motion_Status_6_Moving              4

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Status_6 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Status_6
 */
#define Objects_Signals_C6_OBJ_Motion_Status_6_Stopped             3

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Status_6 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Status_6
 */
#define Objects_Signals_C6_OBJ_Motion_Status_6_Stationary          2

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Status_6 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Status_6
 */
#define Objects_Signals_C6_OBJ_Motion_Status_6_Moving_1            1

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Status_6 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Status_6
 */
#define Objects_Signals_C6_OBJ_Motion_Status_6_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C6_OBJ_Motion_Category_6 Signal OBJ_Motion_Category_6 of Message Objects_Signals_C6 (0x511)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C6_OBJ_Motion_Category_6.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C6
 * @{
 */

/**
 * Signal OBJ_Motion_Category_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C6_OBJ_Motion_Category_6 and \ref GET_Objects_Signals_C6_OBJ_Motion_Category_6 instead.
 */
#define SIG_Objects_Signals_C6_OBJ_Motion_Category_6        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C6_OBJ_Motion_Category_6 or \ref INIT_Objects_Signals_C6 instead.
 */
#define SETUP_Objects_Signals_C6_OBJ_Motion_Category_6      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C6_OBJ_Motion_Category_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C6_OBJ_Motion_Category_6(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C6_OBJ_Motion_Category_6(buf) \
	SET_Objects_Signals_C6_OBJ_Motion_Category_6(buf, 0)

/**
 * Signal OBJ_Motion_Category_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C6_OBJ_Motion_Category_6(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_6 raw initial value.
 */
#define START_Objects_Signals_C6_OBJ_Motion_Category_6      0

/**
 * Signal OBJ_Motion_Category_6 raw minimum value.
 */
#define MIN_Objects_Signals_C6_OBJ_Motion_Category_6        0

/**
 * Signal OBJ_Motion_Category_6 raw maximum value.
 */
#define MAX_Objects_Signals_C6_OBJ_Motion_Category_6        12

/**
 * Signal OBJ_Motion_Category_6 raw offset value.
 */
#define OFF_Objects_Signals_C6_OBJ_Motion_Category_6        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6 Value Table for Signal OBJ_Motion_Category_6 in Message Objects_Signals_C6 (0x511)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C6_OBJ_Motion_Category_6.
 *
 * @ingroup SIG_Objects_Signals_C6_OBJ_Motion_Category_6
 */

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_MOVING           10

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_RTAP             9

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_LTAP             8

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_CROSSING         7

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_PASSING          1

/**
 * Value table Objects_Signals_C6_OBJ_Motion_Category_6 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C6_OBJ_Motion_Category_6
 */
#define Objects_Signals_C6_OBJ_Motion_Category_6_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C6_Brake_Light_6 Signal Brake_Light_6 of Message Objects_Signals_C6 (0x511)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C6_Brake_Light_6.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C6
 * @{
 */

/**
 * Signal Brake_Light_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C6_Brake_Light_6 and \ref GET_Objects_Signals_C6_Brake_Light_6 instead.
 */
#define SIG_Objects_Signals_C6_Brake_Light_6        0, 0, 19, 1

/**
 * Signal Brake_Light_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C6_Brake_Light_6 or \ref INIT_Objects_Signals_C6 instead.
 */
#define SETUP_Objects_Signals_C6_Brake_Light_6      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C6_Brake_Light_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C6_Brake_Light_6(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C6_Brake_Light_6(buf) \
	SET_Objects_Signals_C6_Brake_Light_6(buf, 0)

/**
 * Signal Brake_Light_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C6_Brake_Light_6(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_6 raw initial value.
 */
#define START_Objects_Signals_C6_Brake_Light_6      0

/**
 * Signal Brake_Light_6 raw minimum value.
 */
#define MIN_Objects_Signals_C6_Brake_Light_6        0

/**
 * Signal Brake_Light_6 raw maximum value.
 */
#define MAX_Objects_Signals_C6_Brake_Light_6        1

/**
 * Signal Brake_Light_6 raw offset value.
 */
#define OFF_Objects_Signals_C6_Brake_Light_6        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C6_Brake_Light_6 Value Table for Signal Brake_Light_6 in Message Objects_Signals_C6 (0x511)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C6_Brake_Light_6.
 *
 * @ingroup SIG_Objects_Signals_C6_Brake_Light_6
 */

/**
 * Value table Objects_Signals_C6_Brake_Light_6 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C6_Brake_Light_6
 */
#define Objects_Signals_C6_Brake_Light_6_On                  1

/**
 * Value table Objects_Signals_C6_Brake_Light_6 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C6_Brake_Light_6
 */
#define Objects_Signals_C6_Brake_Light_6_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C6_Turn_Indicator_Right_6 Signal Turn_Indicator_Right_6 of Message Objects_Signals_C6 (0x511)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C6_Turn_Indicator_Right_6.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C6
 * @{
 */

/**
 * Signal Turn_Indicator_Right_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C6_Turn_Indicator_Right_6 and \ref GET_Objects_Signals_C6_Turn_Indicator_Right_6 instead.
 */
#define SIG_Objects_Signals_C6_Turn_Indicator_Right_6        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C6_Turn_Indicator_Right_6 or \ref INIT_Objects_Signals_C6 instead.
 */
#define SETUP_Objects_Signals_C6_Turn_Indicator_Right_6      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C6_Turn_Indicator_Right_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C6_Turn_Indicator_Right_6(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C6_Turn_Indicator_Right_6(buf) \
	SET_Objects_Signals_C6_Turn_Indicator_Right_6(buf, 0)

/**
 * Signal Turn_Indicator_Right_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C6_Turn_Indicator_Right_6(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_6 raw initial value.
 */
#define START_Objects_Signals_C6_Turn_Indicator_Right_6      0

/**
 * Signal Turn_Indicator_Right_6 raw minimum value.
 */
#define MIN_Objects_Signals_C6_Turn_Indicator_Right_6        0

/**
 * Signal Turn_Indicator_Right_6 raw maximum value.
 */
#define MAX_Objects_Signals_C6_Turn_Indicator_Right_6        1

/**
 * Signal Turn_Indicator_Right_6 raw offset value.
 */
#define OFF_Objects_Signals_C6_Turn_Indicator_Right_6        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C6_Turn_Indicator_Right_6 Value Table for Signal Turn_Indicator_Right_6 in Message Objects_Signals_C6 (0x511)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C6_Turn_Indicator_Right_6.
 *
 * @ingroup SIG_Objects_Signals_C6_Turn_Indicator_Right_6
 */

/**
 * Value table Objects_Signals_C6_Turn_Indicator_Right_6 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C6_Turn_Indicator_Right_6
 */
#define Objects_Signals_C6_Turn_Indicator_Right_6_On                  1

/**
 * Value table Objects_Signals_C6_Turn_Indicator_Right_6 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C6_Turn_Indicator_Right_6
 */
#define Objects_Signals_C6_Turn_Indicator_Right_6_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C6_Turn_Indicator_Left_6 Signal Turn_Indicator_Left_6 of Message Objects_Signals_C6 (0x511)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C6_Turn_Indicator_Left_6.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C6
 * @{
 */

/**
 * Signal Turn_Indicator_Left_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C6_Turn_Indicator_Left_6 and \ref GET_Objects_Signals_C6_Turn_Indicator_Left_6 instead.
 */
#define SIG_Objects_Signals_C6_Turn_Indicator_Left_6        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C6_Turn_Indicator_Left_6 or \ref INIT_Objects_Signals_C6 instead.
 */
#define SETUP_Objects_Signals_C6_Turn_Indicator_Left_6      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C6_Turn_Indicator_Left_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C6_Turn_Indicator_Left_6(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C6_Turn_Indicator_Left_6(buf) \
	SET_Objects_Signals_C6_Turn_Indicator_Left_6(buf, 0)

/**
 * Signal Turn_Indicator_Left_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C6_Turn_Indicator_Left_6(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_6 raw initial value.
 */
#define START_Objects_Signals_C6_Turn_Indicator_Left_6      0

/**
 * Signal Turn_Indicator_Left_6 raw minimum value.
 */
#define MIN_Objects_Signals_C6_Turn_Indicator_Left_6        0

/**
 * Signal Turn_Indicator_Left_6 raw maximum value.
 */
#define MAX_Objects_Signals_C6_Turn_Indicator_Left_6        1

/**
 * Signal Turn_Indicator_Left_6 raw offset value.
 */
#define OFF_Objects_Signals_C6_Turn_Indicator_Left_6        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C6_Turn_Indicator_Left_6 Value Table for Signal Turn_Indicator_Left_6 in Message Objects_Signals_C6 (0x511)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C6_Turn_Indicator_Left_6.
 *
 * @ingroup SIG_Objects_Signals_C6_Turn_Indicator_Left_6
 */

/**
 * Value table Objects_Signals_C6_Turn_Indicator_Left_6 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C6_Turn_Indicator_Left_6
 */
#define Objects_Signals_C6_Turn_Indicator_Left_6_On                  1

/**
 * Value table Objects_Signals_C6_Turn_Indicator_Left_6 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C6_Turn_Indicator_Left_6
 */
#define Objects_Signals_C6_Turn_Indicator_Left_6_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C6_Light_indicator_validity_6 Signal Light_indicator_validity_6 of Message Objects_Signals_C6 (0x511)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C6_Light_indicator_validity_6.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C6
 * @{
 */

/**
 * Signal Light_indicator_validity_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C6_Light_indicator_validity_6 and \ref GET_Objects_Signals_C6_Light_indicator_validity_6 instead.
 */
#define SIG_Objects_Signals_C6_Light_indicator_validity_6        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C6_Light_indicator_validity_6 or \ref INIT_Objects_Signals_C6 instead.
 */
#define SETUP_Objects_Signals_C6_Light_indicator_validity_6      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C6_Light_indicator_validity_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C6_Light_indicator_validity_6(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C6_Light_indicator_validity_6(buf) \
	SET_Objects_Signals_C6_Light_indicator_validity_6(buf, 0)

/**
 * Signal Light_indicator_validity_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C6_Light_indicator_validity_6(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_6 raw initial value.
 */
#define START_Objects_Signals_C6_Light_indicator_validity_6      0

/**
 * Signal Light_indicator_validity_6 raw minimum value.
 */
#define MIN_Objects_Signals_C6_Light_indicator_validity_6        0

/**
 * Signal Light_indicator_validity_6 raw maximum value.
 */
#define MAX_Objects_Signals_C6_Light_indicator_validity_6        1

/**
 * Signal Light_indicator_validity_6 raw offset value.
 */
#define OFF_Objects_Signals_C6_Light_indicator_validity_6        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C6_Light_indicator_validity_6 Value Table for Signal Light_indicator_validity_6 in Message Objects_Signals_C6 (0x511)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C6_Light_indicator_validity_6.
 *
 * @ingroup SIG_Objects_Signals_C6_Light_indicator_validity_6
 */

/**
 * Value table Objects_Signals_C6_Light_indicator_validity_6 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C6_Light_indicator_validity_6
 */
#define Objects_Signals_C6_Light_indicator_validity_6_True                1

/**
 * Value table Objects_Signals_C6_Light_indicator_validity_6 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C6_Light_indicator_validity_6
 */
#define Objects_Signals_C6_Light_indicator_validity_6_False               0

/**
 * @defgroup SIG_Objects_Signals_C6_OBJ_Angle_Mid_6 Signal OBJ_Angle_Mid_6 of Message Objects_Signals_C6 (0x511)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C6
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C6_OBJ_Angle_Mid_6 and \ref GET_Objects_Signals_C6_OBJ_Angle_Mid_6 instead.
 */
#define SIG_Objects_Signals_C6_OBJ_Angle_Mid_6        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C6_OBJ_Angle_Mid_6 or \ref INIT_Objects_Signals_C6 instead.
 */
#define SETUP_Objects_Signals_C6_OBJ_Angle_Mid_6      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C6_OBJ_Angle_Mid_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C6_OBJ_Angle_Mid_6(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C6_OBJ_Angle_Mid_6(buf) \
	SET_Objects_Signals_C6_OBJ_Angle_Mid_6(buf, 0)

/**
 * Signal OBJ_Angle_Mid_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C6_OBJ_Angle_Mid_6(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_6 raw initial value.
 */
#define START_Objects_Signals_C6_OBJ_Angle_Mid_6      0

/**
 * Signal OBJ_Angle_Mid_6 raw minimum value.
 */
#define MIN_Objects_Signals_C6_OBJ_Angle_Mid_6        0

/**
 * Signal OBJ_Angle_Mid_6 raw maximum value.
 */
#define MAX_Objects_Signals_C6_OBJ_Angle_Mid_6        15710

/**
 * Signal OBJ_Angle_Mid_6 raw offset value.
 */
#define OFF_Objects_Signals_C6_OBJ_Angle_Mid_6        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C6_OBJ_Angle_Rate_6 Signal OBJ_Angle_Rate_6 of Message Objects_Signals_C6 (0x511)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C6
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C6_OBJ_Angle_Rate_6 and \ref GET_Objects_Signals_C6_OBJ_Angle_Rate_6 instead.
 */
#define SIG_Objects_Signals_C6_OBJ_Angle_Rate_6        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C6_OBJ_Angle_Rate_6 or \ref INIT_Objects_Signals_C6 instead.
 */
#define SETUP_Objects_Signals_C6_OBJ_Angle_Rate_6      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C6_OBJ_Angle_Rate_6(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C6_OBJ_Angle_Rate_6(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C6_OBJ_Angle_Rate_6(buf) \
	SET_Objects_Signals_C6_OBJ_Angle_Rate_6(buf, 0)

/**
 * Signal OBJ_Angle_Rate_6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C6_OBJ_Angle_Rate_6(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_6 raw initial value.
 */
#define START_Objects_Signals_C6_OBJ_Angle_Rate_6      0

/**
 * Signal OBJ_Angle_Rate_6 raw minimum value.
 */
#define MIN_Objects_Signals_C6_OBJ_Angle_Rate_6        0

/**
 * Signal OBJ_Angle_Rate_6 raw maximum value.
 */
#define MAX_Objects_Signals_C6_OBJ_Angle_Rate_6        2233

/**
 * Signal OBJ_Angle_Rate_6 raw offset value.
 */
#define OFF_Objects_Signals_C6_OBJ_Angle_Rate_6        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C6_Reserved Signal Reserved of Message Objects_Signals_C6 (0x511)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C6
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C6_Reserved and \ref GET_Objects_Signals_C6_Reserved instead.
 */
#define SIG_Objects_Signals_C6_Reserved             0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C6_Reserved or \ref INIT_Objects_Signals_C6 instead.
 */
#define SETUP_Objects_Signals_C6_Reserved           0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C6_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C6_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C6_Reserved(buf) \
	SET_Objects_Signals_C6_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C6_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C6_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C6_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C6_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C6_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A7_Obj_ID_7 Signal Obj_ID_7 of Message Objects_Signals_A7 (0x512)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A7
 * @{
 */

/**
 * Signal Obj_ID_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A7_Obj_ID_7 and \ref GET_Objects_Signals_A7_Obj_ID_7 instead.
 */
#define SIG_Objects_Signals_A7_Obj_ID_7             0, 0, 0, 7

/**
 * Signal Obj_ID_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A7_Obj_ID_7 or \ref INIT_Objects_Signals_A7 instead.
 */
#define SETUP_Objects_Signals_A7_Obj_ID_7           0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A7_Obj_ID_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A7_Obj_ID_7(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A7_Obj_ID_7(buf) \
	SET_Objects_Signals_A7_Obj_ID_7(buf, 0)

/**
 * Signal Obj_ID_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A7_Obj_ID_7(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_7 raw initial value.
 */
#define START_Objects_Signals_A7_Obj_ID_7           0

/**
 * Signal Obj_ID_7 raw minimum value.
 */
#define MIN_Objects_Signals_A7_Obj_ID_7             0

/**
 * Signal Obj_ID_7 raw maximum value.
 */
#define MAX_Objects_Signals_A7_Obj_ID_7             127

/**
 * Signal Obj_ID_7 raw offset value.
 */
#define OFF_Objects_Signals_A7_Obj_ID_7             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A7_Object_Class_7 Signal Object_Class_7 of Message Objects_Signals_A7 (0x512)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A7_Object_Class_7.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A7
 * @{
 */

/**
 * Signal Object_Class_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A7_Object_Class_7 and \ref GET_Objects_Signals_A7_Object_Class_7 instead.
 */
#define SIG_Objects_Signals_A7_Object_Class_7        0, 0, 7, 3

/**
 * Signal Object_Class_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A7_Object_Class_7 or \ref INIT_Objects_Signals_A7 instead.
 */
#define SETUP_Objects_Signals_A7_Object_Class_7      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A7_Object_Class_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A7_Object_Class_7(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A7_Object_Class_7(buf) \
	SET_Objects_Signals_A7_Object_Class_7(buf, 0)

/**
 * Signal Object_Class_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A7_Object_Class_7(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_7 raw initial value.
 */
#define START_Objects_Signals_A7_Object_Class_7      0

/**
 * Signal Object_Class_7 raw minimum value.
 */
#define MIN_Objects_Signals_A7_Object_Class_7        0

/**
 * Signal Object_Class_7 raw maximum value.
 */
#define MAX_Objects_Signals_A7_Object_Class_7        7

/**
 * Signal Object_Class_7 raw offset value.
 */
#define OFF_Objects_Signals_A7_Object_Class_7        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A7_Object_Class_7 Value Table for Signal Object_Class_7 in Message Objects_Signals_A7 (0x512)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A7_Object_Class_7.
 *
 * @ingroup SIG_Objects_Signals_A7_Object_Class_7
 */

/**
 * Value table Objects_Signals_A7_Object_Class_7 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A7_Object_Class_7
 */
#define Objects_Signals_A7_Object_Class_7_uncertain_vcl       7

/**
 * Value table Objects_Signals_A7_Object_Class_7 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A7_Object_Class_7
 */
#define Objects_Signals_A7_Object_Class_7_animal              6

/**
 * Value table Objects_Signals_A7_Object_Class_7 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A7_Object_Class_7
 */
#define Objects_Signals_A7_Object_Class_7_general_object      5

/**
 * Value table Objects_Signals_A7_Object_Class_7 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A7_Object_Class_7
 */
#define Objects_Signals_A7_Object_Class_7_pedestrian          4

/**
 * Value table Objects_Signals_A7_Object_Class_7 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A7_Object_Class_7
 */
#define Objects_Signals_A7_Object_Class_7_bicycle             3

/**
 * Value table Objects_Signals_A7_Object_Class_7 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A7_Object_Class_7
 */
#define Objects_Signals_A7_Object_Class_7_bike                2

/**
 * Value table Objects_Signals_A7_Object_Class_7 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A7_Object_Class_7
 */
#define Objects_Signals_A7_Object_Class_7_truck               1

/**
 * Value table Objects_Signals_A7_Object_Class_7 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A7_Object_Class_7
 */
#define Objects_Signals_A7_Object_Class_7_car                 0

/**
 * @defgroup SIG_Objects_Signals_A7_OBJ_Width_7 Signal OBJ_Width_7 of Message Objects_Signals_A7 (0x512)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A7
 * @{
 */

/**
 * Signal OBJ_Width_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A7_OBJ_Width_7 and \ref GET_Objects_Signals_A7_OBJ_Width_7 instead.
 */
#define SIG_Objects_Signals_A7_OBJ_Width_7          0, 0, 10, 7

/**
 * Signal OBJ_Width_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A7_OBJ_Width_7 or \ref INIT_Objects_Signals_A7 instead.
 */
#define SETUP_Objects_Signals_A7_OBJ_Width_7        0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A7_OBJ_Width_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A7_OBJ_Width_7(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A7_OBJ_Width_7(buf) \
	SET_Objects_Signals_A7_OBJ_Width_7(buf, 0)

/**
 * Signal OBJ_Width_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A7_OBJ_Width_7(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_7 raw initial value.
 */
#define START_Objects_Signals_A7_OBJ_Width_7        0

/**
 * Signal OBJ_Width_7 raw minimum value.
 */
#define MIN_Objects_Signals_A7_OBJ_Width_7          0

/**
 * Signal OBJ_Width_7 raw maximum value.
 */
#define MAX_Objects_Signals_A7_OBJ_Width_7          127

/**
 * Signal OBJ_Width_7 raw offset value.
 */
#define OFF_Objects_Signals_A7_OBJ_Width_7          0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A7_OBJ_Length_7 Signal OBJ_Length_7 of Message Objects_Signals_A7 (0x512)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A7
 * @{
 */

/**
 * Signal OBJ_Length_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A7_OBJ_Length_7 and \ref GET_Objects_Signals_A7_OBJ_Length_7 instead.
 */
#define SIG_Objects_Signals_A7_OBJ_Length_7         0, 0, 17, 9

/**
 * Signal OBJ_Length_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A7_OBJ_Length_7 or \ref INIT_Objects_Signals_A7 instead.
 */
#define SETUP_Objects_Signals_A7_OBJ_Length_7       0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A7_OBJ_Length_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A7_OBJ_Length_7(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A7_OBJ_Length_7(buf) \
	SET_Objects_Signals_A7_OBJ_Length_7(buf, 0)

/**
 * Signal OBJ_Length_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A7_OBJ_Length_7(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_7 raw initial value.
 */
#define START_Objects_Signals_A7_OBJ_Length_7       0

/**
 * Signal OBJ_Length_7 raw minimum value.
 */
#define MIN_Objects_Signals_A7_OBJ_Length_7         0

/**
 * Signal OBJ_Length_7 raw maximum value.
 */
#define MAX_Objects_Signals_A7_OBJ_Length_7         510

/**
 * Signal OBJ_Length_7 raw offset value.
 */
#define OFF_Objects_Signals_A7_OBJ_Length_7         0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A7_Relative_Long_Velocity_7 Signal Relative_Long_Velocity_7 of Message Objects_Signals_A7 (0x512)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A7
 * @{
 */

/**
 * Signal Relative_Long_Velocity_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A7_Relative_Long_Velocity_7 and \ref GET_Objects_Signals_A7_Relative_Long_Velocity_7 instead.
 */
#define SIG_Objects_Signals_A7_Relative_Long_Velocity_7        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A7_Relative_Long_Velocity_7 or \ref INIT_Objects_Signals_A7 instead.
 */
#define SETUP_Objects_Signals_A7_Relative_Long_Velocity_7      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A7_Relative_Long_Velocity_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A7_Relative_Long_Velocity_7(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A7_Relative_Long_Velocity_7(buf) \
	SET_Objects_Signals_A7_Relative_Long_Velocity_7(buf, 0)

/**
 * Signal Relative_Long_Velocity_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A7_Relative_Long_Velocity_7(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_7 raw initial value.
 */
#define START_Objects_Signals_A7_Relative_Long_Velocity_7      0

/**
 * Signal Relative_Long_Velocity_7 raw minimum value.
 */
#define MIN_Objects_Signals_A7_Relative_Long_Velocity_7        0

/**
 * Signal Relative_Long_Velocity_7 raw maximum value.
 */
#define MAX_Objects_Signals_A7_Relative_Long_Velocity_7        5000

/**
 * Signal Relative_Long_Velocity_7 raw offset value.
 */
#define OFF_Objects_Signals_A7_Relative_Long_Velocity_7        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A7_OBJ_Lane_Assignment_7 Signal OBJ_Lane_Assignment_7 of Message Objects_Signals_A7 (0x512)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A7_OBJ_Lane_Assignment_7.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A7
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A7_OBJ_Lane_Assignment_7 and \ref GET_Objects_Signals_A7_OBJ_Lane_Assignment_7 instead.
 */
#define SIG_Objects_Signals_A7_OBJ_Lane_Assignment_7        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A7_OBJ_Lane_Assignment_7 or \ref INIT_Objects_Signals_A7 instead.
 */
#define SETUP_Objects_Signals_A7_OBJ_Lane_Assignment_7      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A7_OBJ_Lane_Assignment_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A7_OBJ_Lane_Assignment_7(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A7_OBJ_Lane_Assignment_7(buf) \
	SET_Objects_Signals_A7_OBJ_Lane_Assignment_7(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A7_OBJ_Lane_Assignment_7(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_7 raw initial value.
 */
#define START_Objects_Signals_A7_OBJ_Lane_Assignment_7      0

/**
 * Signal OBJ_Lane_Assignment_7 raw minimum value.
 */
#define MIN_Objects_Signals_A7_OBJ_Lane_Assignment_7        0

/**
 * Signal OBJ_Lane_Assignment_7 raw maximum value.
 */
#define MAX_Objects_Signals_A7_OBJ_Lane_Assignment_7        5

/**
 * Signal OBJ_Lane_Assignment_7 raw offset value.
 */
#define OFF_Objects_Signals_A7_OBJ_Lane_Assignment_7        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A7_OBJ_Lane_Assignment_7 Value Table for Signal OBJ_Lane_Assignment_7 in Message Objects_Signals_A7 (0x512)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A7_OBJ_Lane_Assignment_7.
 *
 * @ingroup SIG_Objects_Signals_A7_OBJ_Lane_Assignment_7
 */

/**
 * Value table Objects_Signals_A7_OBJ_Lane_Assignment_7 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A7_OBJ_Lane_Assignment_7
 */
#define Objects_Signals_A7_OBJ_Lane_Assignment_7_Not                 5

/**
 * Value table Objects_Signals_A7_OBJ_Lane_Assignment_7 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A7_OBJ_Lane_Assignment_7
 */
#define Objects_Signals_A7_OBJ_Lane_Assignment_7_Next                4

/**
 * Value table Objects_Signals_A7_OBJ_Lane_Assignment_7 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A7_OBJ_Lane_Assignment_7
 */
#define Objects_Signals_A7_OBJ_Lane_Assignment_7_Right               3

/**
 * Value table Objects_Signals_A7_OBJ_Lane_Assignment_7 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A7_OBJ_Lane_Assignment_7
 */
#define Objects_Signals_A7_OBJ_Lane_Assignment_7_Ego                 2

/**
 * Value table Objects_Signals_A7_OBJ_Lane_Assignment_7 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A7_OBJ_Lane_Assignment_7
 */
#define Objects_Signals_A7_OBJ_Lane_Assignment_7_Left                1

/**
 * Value table Objects_Signals_A7_OBJ_Lane_Assignment_7 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A7_OBJ_Lane_Assignment_7
 */
#define Objects_Signals_A7_OBJ_Lane_Assignment_7_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A7_Relative_Lat_Velocity_7 Signal Relative_Lat_Velocity_7 of Message Objects_Signals_A7 (0x512)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A7
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A7_Relative_Lat_Velocity_7 and \ref GET_Objects_Signals_A7_Relative_Lat_Velocity_7 instead.
 */
#define SIG_Objects_Signals_A7_Relative_Lat_Velocity_7        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A7_Relative_Lat_Velocity_7 or \ref INIT_Objects_Signals_A7 instead.
 */
#define SETUP_Objects_Signals_A7_Relative_Lat_Velocity_7      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A7_Relative_Lat_Velocity_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A7_Relative_Lat_Velocity_7(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A7_Relative_Lat_Velocity_7(buf) \
	SET_Objects_Signals_A7_Relative_Lat_Velocity_7(buf, 0)

/**
 * Signal Relative_Lat_Velocity_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A7_Relative_Lat_Velocity_7(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_7 raw initial value.
 */
#define START_Objects_Signals_A7_Relative_Lat_Velocity_7      0

/**
 * Signal Relative_Lat_Velocity_7 raw minimum value.
 */
#define MIN_Objects_Signals_A7_Relative_Lat_Velocity_7        0

/**
 * Signal Relative_Lat_Velocity_7 raw maximum value.
 */
#define MAX_Objects_Signals_A7_Relative_Lat_Velocity_7        2000

/**
 * Signal Relative_Lat_Velocity_7 raw offset value.
 */
#define OFF_Objects_Signals_A7_Relative_Lat_Velocity_7        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A7_Reserved Signal Reserved of Message Objects_Signals_A7 (0x512)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A7
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A7_Reserved and \ref GET_Objects_Signals_A7_Reserved instead.
 */
#define SIG_Objects_Signals_A7_Reserved             0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A7_Reserved or \ref INIT_Objects_Signals_A7 instead.
 */
#define SETUP_Objects_Signals_A7_Reserved           0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A7_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A7_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A7_Reserved(buf) \
	SET_Objects_Signals_A7_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A7_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A7_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A7_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A7_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A7_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B7_Absolute_Long_Acc_7 Signal Absolute_Long_Acc_7 of Message Objects_Signals_B7 (0x513)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B7
 * @{
 */

/**
 * Signal Absolute_Long_Acc_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B7_Absolute_Long_Acc_7 and \ref GET_Objects_Signals_B7_Absolute_Long_Acc_7 instead.
 */
#define SIG_Objects_Signals_B7_Absolute_Long_Acc_7        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B7_Absolute_Long_Acc_7 or \ref INIT_Objects_Signals_B7 instead.
 */
#define SETUP_Objects_Signals_B7_Absolute_Long_Acc_7      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B7_Absolute_Long_Acc_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B7_Absolute_Long_Acc_7(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B7_Absolute_Long_Acc_7(buf) \
	SET_Objects_Signals_B7_Absolute_Long_Acc_7(buf, 0)

/**
 * Signal Absolute_Long_Acc_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B7_Absolute_Long_Acc_7(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_7 raw initial value.
 */
#define START_Objects_Signals_B7_Absolute_Long_Acc_7      0

/**
 * Signal Absolute_Long_Acc_7 raw minimum value.
 */
#define MIN_Objects_Signals_B7_Absolute_Long_Acc_7        0

/**
 * Signal Absolute_Long_Acc_7 raw maximum value.
 */
#define MAX_Objects_Signals_B7_Absolute_Long_Acc_7        511

/**
 * Signal Absolute_Long_Acc_7 raw offset value.
 */
#define OFF_Objects_Signals_B7_Absolute_Long_Acc_7        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B7_Long_Distance_7 Signal Long_Distance_7 of Message Objects_Signals_B7 (0x513)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B7
 * @{
 */

/**
 * Signal Long_Distance_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B7_Long_Distance_7 and \ref GET_Objects_Signals_B7_Long_Distance_7 instead.
 */
#define SIG_Objects_Signals_B7_Long_Distance_7        0, 0, 9, 13

/**
 * Signal Long_Distance_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B7_Long_Distance_7 or \ref INIT_Objects_Signals_B7 instead.
 */
#define SETUP_Objects_Signals_B7_Long_Distance_7      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B7_Long_Distance_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B7_Long_Distance_7(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B7_Long_Distance_7(buf) \
	SET_Objects_Signals_B7_Long_Distance_7(buf, 0)

/**
 * Signal Long_Distance_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B7_Long_Distance_7(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_7 raw initial value.
 */
#define START_Objects_Signals_B7_Long_Distance_7      0

/**
 * Signal Long_Distance_7 raw minimum value.
 */
#define MIN_Objects_Signals_B7_Long_Distance_7        0

/**
 * Signal Long_Distance_7 raw maximum value.
 */
#define MAX_Objects_Signals_B7_Long_Distance_7        7000

/**
 * Signal Long_Distance_7 raw offset value.
 */
#define OFF_Objects_Signals_B7_Long_Distance_7        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B7_Lateral_Distance_7 Signal Lateral_Distance_7 of Message Objects_Signals_B7 (0x513)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B7
 * @{
 */

/**
 * Signal Lateral_Distance_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B7_Lateral_Distance_7 and \ref GET_Objects_Signals_B7_Lateral_Distance_7 instead.
 */
#define SIG_Objects_Signals_B7_Lateral_Distance_7        0, 0, 22, 12

/**
 * Signal Lateral_Distance_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B7_Lateral_Distance_7 or \ref INIT_Objects_Signals_B7 instead.
 */
#define SETUP_Objects_Signals_B7_Lateral_Distance_7      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B7_Lateral_Distance_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B7_Lateral_Distance_7(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B7_Lateral_Distance_7(buf) \
	SET_Objects_Signals_B7_Lateral_Distance_7(buf, 0)

/**
 * Signal Lateral_Distance_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B7_Lateral_Distance_7(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_7 raw initial value.
 */
#define START_Objects_Signals_B7_Lateral_Distance_7      0

/**
 * Signal Lateral_Distance_7 raw minimum value.
 */
#define MIN_Objects_Signals_B7_Lateral_Distance_7        0

/**
 * Signal Lateral_Distance_7 raw maximum value.
 */
#define MAX_Objects_Signals_B7_Lateral_Distance_7        4094

/**
 * Signal Lateral_Distance_7 raw offset value.
 */
#define OFF_Objects_Signals_B7_Lateral_Distance_7        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B7_Reserved Signal Reserved of Message Objects_Signals_B7 (0x513)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B7
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B7_Reserved and \ref GET_Objects_Signals_B7_Reserved instead.
 */
#define SIG_Objects_Signals_B7_Reserved             0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B7_Reserved or \ref INIT_Objects_Signals_B7 instead.
 */
#define SETUP_Objects_Signals_B7_Reserved           0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B7_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B7_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B7_Reserved(buf) \
	SET_Objects_Signals_B7_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B7_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B7_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B7_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B7_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B7_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C7_Absolute_Speed_7 Signal Absolute_Speed_7 of Message Objects_Signals_C7 (0x514)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C7
 * @{
 */

/**
 * Signal Absolute_Speed_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C7_Absolute_Speed_7 and \ref GET_Objects_Signals_C7_Absolute_Speed_7 instead.
 */
#define SIG_Objects_Signals_C7_Absolute_Speed_7        0, 0, 0, 12

/**
 * Signal Absolute_Speed_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C7_Absolute_Speed_7 or \ref INIT_Objects_Signals_C7 instead.
 */
#define SETUP_Objects_Signals_C7_Absolute_Speed_7      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C7_Absolute_Speed_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C7_Absolute_Speed_7(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C7_Absolute_Speed_7(buf) \
	SET_Objects_Signals_C7_Absolute_Speed_7(buf, 0)

/**
 * Signal Absolute_Speed_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C7_Absolute_Speed_7(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_7 raw initial value.
 */
#define START_Objects_Signals_C7_Absolute_Speed_7      0

/**
 * Signal Absolute_Speed_7 raw minimum value.
 */
#define MIN_Objects_Signals_C7_Absolute_Speed_7        0

/**
 * Signal Absolute_Speed_7 raw maximum value.
 */
#define MAX_Objects_Signals_C7_Absolute_Speed_7        4000

/**
 * Signal Absolute_Speed_7 raw offset value.
 */
#define OFF_Objects_Signals_C7_Absolute_Speed_7        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C7_OBJ_Motion_Status_7 Signal OBJ_Motion_Status_7 of Message Objects_Signals_C7 (0x514)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C7_OBJ_Motion_Status_7.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C7
 * @{
 */

/**
 * Signal OBJ_Motion_Status_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C7_OBJ_Motion_Status_7 and \ref GET_Objects_Signals_C7_OBJ_Motion_Status_7 instead.
 */
#define SIG_Objects_Signals_C7_OBJ_Motion_Status_7        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C7_OBJ_Motion_Status_7 or \ref INIT_Objects_Signals_C7 instead.
 */
#define SETUP_Objects_Signals_C7_OBJ_Motion_Status_7      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C7_OBJ_Motion_Status_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C7_OBJ_Motion_Status_7(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C7_OBJ_Motion_Status_7(buf) \
	SET_Objects_Signals_C7_OBJ_Motion_Status_7(buf, 0)

/**
 * Signal OBJ_Motion_Status_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C7_OBJ_Motion_Status_7(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_7 raw initial value.
 */
#define START_Objects_Signals_C7_OBJ_Motion_Status_7      0

/**
 * Signal OBJ_Motion_Status_7 raw minimum value.
 */
#define MIN_Objects_Signals_C7_OBJ_Motion_Status_7        0

/**
 * Signal OBJ_Motion_Status_7 raw maximum value.
 */
#define MAX_Objects_Signals_C7_OBJ_Motion_Status_7        4

/**
 * Signal OBJ_Motion_Status_7 raw offset value.
 */
#define OFF_Objects_Signals_C7_OBJ_Motion_Status_7        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C7_OBJ_Motion_Status_7 Value Table for Signal OBJ_Motion_Status_7 in Message Objects_Signals_C7 (0x514)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C7_OBJ_Motion_Status_7.
 *
 * @ingroup SIG_Objects_Signals_C7_OBJ_Motion_Status_7
 */

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Status_7 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Status_7
 */
#define Objects_Signals_C7_OBJ_Motion_Status_7_Moving              4

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Status_7 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Status_7
 */
#define Objects_Signals_C7_OBJ_Motion_Status_7_Stopped             3

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Status_7 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Status_7
 */
#define Objects_Signals_C7_OBJ_Motion_Status_7_Stationary          2

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Status_7 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Status_7
 */
#define Objects_Signals_C7_OBJ_Motion_Status_7_Moving_1            1

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Status_7 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Status_7
 */
#define Objects_Signals_C7_OBJ_Motion_Status_7_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C7_OBJ_Motion_Category_7 Signal OBJ_Motion_Category_7 of Message Objects_Signals_C7 (0x514)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C7_OBJ_Motion_Category_7.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C7
 * @{
 */

/**
 * Signal OBJ_Motion_Category_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C7_OBJ_Motion_Category_7 and \ref GET_Objects_Signals_C7_OBJ_Motion_Category_7 instead.
 */
#define SIG_Objects_Signals_C7_OBJ_Motion_Category_7        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C7_OBJ_Motion_Category_7 or \ref INIT_Objects_Signals_C7 instead.
 */
#define SETUP_Objects_Signals_C7_OBJ_Motion_Category_7      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C7_OBJ_Motion_Category_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C7_OBJ_Motion_Category_7(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C7_OBJ_Motion_Category_7(buf) \
	SET_Objects_Signals_C7_OBJ_Motion_Category_7(buf, 0)

/**
 * Signal OBJ_Motion_Category_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C7_OBJ_Motion_Category_7(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_7 raw initial value.
 */
#define START_Objects_Signals_C7_OBJ_Motion_Category_7      0

/**
 * Signal OBJ_Motion_Category_7 raw minimum value.
 */
#define MIN_Objects_Signals_C7_OBJ_Motion_Category_7        0

/**
 * Signal OBJ_Motion_Category_7 raw maximum value.
 */
#define MAX_Objects_Signals_C7_OBJ_Motion_Category_7        12

/**
 * Signal OBJ_Motion_Category_7 raw offset value.
 */
#define OFF_Objects_Signals_C7_OBJ_Motion_Category_7        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7 Value Table for Signal OBJ_Motion_Category_7 in Message Objects_Signals_C7 (0x514)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C7_OBJ_Motion_Category_7.
 *
 * @ingroup SIG_Objects_Signals_C7_OBJ_Motion_Category_7
 */

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_MOVING           10

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_RTAP             9

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_LTAP             8

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_CROSSING         7

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_PASSING          1

/**
 * Value table Objects_Signals_C7_OBJ_Motion_Category_7 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C7_OBJ_Motion_Category_7
 */
#define Objects_Signals_C7_OBJ_Motion_Category_7_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C7_Brake_Light_7 Signal Brake_Light_7 of Message Objects_Signals_C7 (0x514)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C7_Brake_Light_7.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C7
 * @{
 */

/**
 * Signal Brake_Light_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C7_Brake_Light_7 and \ref GET_Objects_Signals_C7_Brake_Light_7 instead.
 */
#define SIG_Objects_Signals_C7_Brake_Light_7        0, 0, 19, 1

/**
 * Signal Brake_Light_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C7_Brake_Light_7 or \ref INIT_Objects_Signals_C7 instead.
 */
#define SETUP_Objects_Signals_C7_Brake_Light_7      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C7_Brake_Light_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C7_Brake_Light_7(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C7_Brake_Light_7(buf) \
	SET_Objects_Signals_C7_Brake_Light_7(buf, 0)

/**
 * Signal Brake_Light_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C7_Brake_Light_7(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_7 raw initial value.
 */
#define START_Objects_Signals_C7_Brake_Light_7      0

/**
 * Signal Brake_Light_7 raw minimum value.
 */
#define MIN_Objects_Signals_C7_Brake_Light_7        0

/**
 * Signal Brake_Light_7 raw maximum value.
 */
#define MAX_Objects_Signals_C7_Brake_Light_7        1

/**
 * Signal Brake_Light_7 raw offset value.
 */
#define OFF_Objects_Signals_C7_Brake_Light_7        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C7_Brake_Light_7 Value Table for Signal Brake_Light_7 in Message Objects_Signals_C7 (0x514)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C7_Brake_Light_7.
 *
 * @ingroup SIG_Objects_Signals_C7_Brake_Light_7
 */

/**
 * Value table Objects_Signals_C7_Brake_Light_7 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C7_Brake_Light_7
 */
#define Objects_Signals_C7_Brake_Light_7_On                  1

/**
 * Value table Objects_Signals_C7_Brake_Light_7 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C7_Brake_Light_7
 */
#define Objects_Signals_C7_Brake_Light_7_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C7_Turn_Indicator_Right_7 Signal Turn_Indicator_Right_7 of Message Objects_Signals_C7 (0x514)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C7_Turn_Indicator_Right_7.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C7
 * @{
 */

/**
 * Signal Turn_Indicator_Right_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C7_Turn_Indicator_Right_7 and \ref GET_Objects_Signals_C7_Turn_Indicator_Right_7 instead.
 */
#define SIG_Objects_Signals_C7_Turn_Indicator_Right_7        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C7_Turn_Indicator_Right_7 or \ref INIT_Objects_Signals_C7 instead.
 */
#define SETUP_Objects_Signals_C7_Turn_Indicator_Right_7      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C7_Turn_Indicator_Right_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C7_Turn_Indicator_Right_7(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C7_Turn_Indicator_Right_7(buf) \
	SET_Objects_Signals_C7_Turn_Indicator_Right_7(buf, 0)

/**
 * Signal Turn_Indicator_Right_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C7_Turn_Indicator_Right_7(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_7 raw initial value.
 */
#define START_Objects_Signals_C7_Turn_Indicator_Right_7      0

/**
 * Signal Turn_Indicator_Right_7 raw minimum value.
 */
#define MIN_Objects_Signals_C7_Turn_Indicator_Right_7        0

/**
 * Signal Turn_Indicator_Right_7 raw maximum value.
 */
#define MAX_Objects_Signals_C7_Turn_Indicator_Right_7        1

/**
 * Signal Turn_Indicator_Right_7 raw offset value.
 */
#define OFF_Objects_Signals_C7_Turn_Indicator_Right_7        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C7_Turn_Indicator_Right_7 Value Table for Signal Turn_Indicator_Right_7 in Message Objects_Signals_C7 (0x514)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C7_Turn_Indicator_Right_7.
 *
 * @ingroup SIG_Objects_Signals_C7_Turn_Indicator_Right_7
 */

/**
 * Value table Objects_Signals_C7_Turn_Indicator_Right_7 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C7_Turn_Indicator_Right_7
 */
#define Objects_Signals_C7_Turn_Indicator_Right_7_On                  1

/**
 * Value table Objects_Signals_C7_Turn_Indicator_Right_7 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C7_Turn_Indicator_Right_7
 */
#define Objects_Signals_C7_Turn_Indicator_Right_7_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C7_Turn_Indicator_Left_7 Signal Turn_Indicator_Left_7 of Message Objects_Signals_C7 (0x514)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C7_Turn_Indicator_Left_7.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C7
 * @{
 */

/**
 * Signal Turn_Indicator_Left_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C7_Turn_Indicator_Left_7 and \ref GET_Objects_Signals_C7_Turn_Indicator_Left_7 instead.
 */
#define SIG_Objects_Signals_C7_Turn_Indicator_Left_7        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C7_Turn_Indicator_Left_7 or \ref INIT_Objects_Signals_C7 instead.
 */
#define SETUP_Objects_Signals_C7_Turn_Indicator_Left_7      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C7_Turn_Indicator_Left_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C7_Turn_Indicator_Left_7(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C7_Turn_Indicator_Left_7(buf) \
	SET_Objects_Signals_C7_Turn_Indicator_Left_7(buf, 0)

/**
 * Signal Turn_Indicator_Left_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C7_Turn_Indicator_Left_7(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_7 raw initial value.
 */
#define START_Objects_Signals_C7_Turn_Indicator_Left_7      0

/**
 * Signal Turn_Indicator_Left_7 raw minimum value.
 */
#define MIN_Objects_Signals_C7_Turn_Indicator_Left_7        0

/**
 * Signal Turn_Indicator_Left_7 raw maximum value.
 */
#define MAX_Objects_Signals_C7_Turn_Indicator_Left_7        1

/**
 * Signal Turn_Indicator_Left_7 raw offset value.
 */
#define OFF_Objects_Signals_C7_Turn_Indicator_Left_7        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C7_Turn_Indicator_Left_7 Value Table for Signal Turn_Indicator_Left_7 in Message Objects_Signals_C7 (0x514)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C7_Turn_Indicator_Left_7.
 *
 * @ingroup SIG_Objects_Signals_C7_Turn_Indicator_Left_7
 */

/**
 * Value table Objects_Signals_C7_Turn_Indicator_Left_7 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C7_Turn_Indicator_Left_7
 */
#define Objects_Signals_C7_Turn_Indicator_Left_7_On                  1

/**
 * Value table Objects_Signals_C7_Turn_Indicator_Left_7 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C7_Turn_Indicator_Left_7
 */
#define Objects_Signals_C7_Turn_Indicator_Left_7_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C7_Light_indicator_validity_7 Signal Light_indicator_validity_7 of Message Objects_Signals_C7 (0x514)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C7_Light_indicator_validity_7.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C7
 * @{
 */

/**
 * Signal Light_indicator_validity_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C7_Light_indicator_validity_7 and \ref GET_Objects_Signals_C7_Light_indicator_validity_7 instead.
 */
#define SIG_Objects_Signals_C7_Light_indicator_validity_7        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C7_Light_indicator_validity_7 or \ref INIT_Objects_Signals_C7 instead.
 */
#define SETUP_Objects_Signals_C7_Light_indicator_validity_7      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C7_Light_indicator_validity_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C7_Light_indicator_validity_7(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C7_Light_indicator_validity_7(buf) \
	SET_Objects_Signals_C7_Light_indicator_validity_7(buf, 0)

/**
 * Signal Light_indicator_validity_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C7_Light_indicator_validity_7(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_7 raw initial value.
 */
#define START_Objects_Signals_C7_Light_indicator_validity_7      0

/**
 * Signal Light_indicator_validity_7 raw minimum value.
 */
#define MIN_Objects_Signals_C7_Light_indicator_validity_7        0

/**
 * Signal Light_indicator_validity_7 raw maximum value.
 */
#define MAX_Objects_Signals_C7_Light_indicator_validity_7        1

/**
 * Signal Light_indicator_validity_7 raw offset value.
 */
#define OFF_Objects_Signals_C7_Light_indicator_validity_7        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C7_Light_indicator_validity_7 Value Table for Signal Light_indicator_validity_7 in Message Objects_Signals_C7 (0x514)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C7_Light_indicator_validity_7.
 *
 * @ingroup SIG_Objects_Signals_C7_Light_indicator_validity_7
 */

/**
 * Value table Objects_Signals_C7_Light_indicator_validity_7 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C7_Light_indicator_validity_7
 */
#define Objects_Signals_C7_Light_indicator_validity_7_True                1

/**
 * Value table Objects_Signals_C7_Light_indicator_validity_7 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C7_Light_indicator_validity_7
 */
#define Objects_Signals_C7_Light_indicator_validity_7_False               0

/**
 * @defgroup SIG_Objects_Signals_C7_OBJ_Angle_Mid_7 Signal OBJ_Angle_Mid_7 of Message Objects_Signals_C7 (0x514)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C7
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C7_OBJ_Angle_Mid_7 and \ref GET_Objects_Signals_C7_OBJ_Angle_Mid_7 instead.
 */
#define SIG_Objects_Signals_C7_OBJ_Angle_Mid_7        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C7_OBJ_Angle_Mid_7 or \ref INIT_Objects_Signals_C7 instead.
 */
#define SETUP_Objects_Signals_C7_OBJ_Angle_Mid_7      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C7_OBJ_Angle_Mid_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C7_OBJ_Angle_Mid_7(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C7_OBJ_Angle_Mid_7(buf) \
	SET_Objects_Signals_C7_OBJ_Angle_Mid_7(buf, 0)

/**
 * Signal OBJ_Angle_Mid_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C7_OBJ_Angle_Mid_7(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_7 raw initial value.
 */
#define START_Objects_Signals_C7_OBJ_Angle_Mid_7      0

/**
 * Signal OBJ_Angle_Mid_7 raw minimum value.
 */
#define MIN_Objects_Signals_C7_OBJ_Angle_Mid_7        0

/**
 * Signal OBJ_Angle_Mid_7 raw maximum value.
 */
#define MAX_Objects_Signals_C7_OBJ_Angle_Mid_7        15710

/**
 * Signal OBJ_Angle_Mid_7 raw offset value.
 */
#define OFF_Objects_Signals_C7_OBJ_Angle_Mid_7        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C7_OBJ_Angle_Rate_7 Signal OBJ_Angle_Rate_7 of Message Objects_Signals_C7 (0x514)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C7
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C7_OBJ_Angle_Rate_7 and \ref GET_Objects_Signals_C7_OBJ_Angle_Rate_7 instead.
 */
#define SIG_Objects_Signals_C7_OBJ_Angle_Rate_7        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C7_OBJ_Angle_Rate_7 or \ref INIT_Objects_Signals_C7 instead.
 */
#define SETUP_Objects_Signals_C7_OBJ_Angle_Rate_7      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C7_OBJ_Angle_Rate_7(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C7_OBJ_Angle_Rate_7(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C7_OBJ_Angle_Rate_7(buf) \
	SET_Objects_Signals_C7_OBJ_Angle_Rate_7(buf, 0)

/**
 * Signal OBJ_Angle_Rate_7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C7_OBJ_Angle_Rate_7(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_7 raw initial value.
 */
#define START_Objects_Signals_C7_OBJ_Angle_Rate_7      0

/**
 * Signal OBJ_Angle_Rate_7 raw minimum value.
 */
#define MIN_Objects_Signals_C7_OBJ_Angle_Rate_7        0

/**
 * Signal OBJ_Angle_Rate_7 raw maximum value.
 */
#define MAX_Objects_Signals_C7_OBJ_Angle_Rate_7        2233

/**
 * Signal OBJ_Angle_Rate_7 raw offset value.
 */
#define OFF_Objects_Signals_C7_OBJ_Angle_Rate_7        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C7_Reserved Signal Reserved of Message Objects_Signals_C7 (0x514)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C7
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C7_Reserved and \ref GET_Objects_Signals_C7_Reserved instead.
 */
#define SIG_Objects_Signals_C7_Reserved             0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C7_Reserved or \ref INIT_Objects_Signals_C7 instead.
 */
#define SETUP_Objects_Signals_C7_Reserved           0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C7_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C7_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C7_Reserved(buf) \
	SET_Objects_Signals_C7_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C7_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C7_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C7_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C7_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C7_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A8_Obj_ID_8 Signal Obj_ID_8 of Message Objects_Signals_A8 (0x515)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A8
 * @{
 */

/**
 * Signal Obj_ID_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A8_Obj_ID_8 and \ref GET_Objects_Signals_A8_Obj_ID_8 instead.
 */
#define SIG_Objects_Signals_A8_Obj_ID_8             0, 0, 0, 7

/**
 * Signal Obj_ID_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A8_Obj_ID_8 or \ref INIT_Objects_Signals_A8 instead.
 */
#define SETUP_Objects_Signals_A8_Obj_ID_8           0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A8_Obj_ID_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A8_Obj_ID_8(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A8_Obj_ID_8(buf) \
	SET_Objects_Signals_A8_Obj_ID_8(buf, 0)

/**
 * Signal Obj_ID_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A8_Obj_ID_8(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_8 raw initial value.
 */
#define START_Objects_Signals_A8_Obj_ID_8           0

/**
 * Signal Obj_ID_8 raw minimum value.
 */
#define MIN_Objects_Signals_A8_Obj_ID_8             0

/**
 * Signal Obj_ID_8 raw maximum value.
 */
#define MAX_Objects_Signals_A8_Obj_ID_8             127

/**
 * Signal Obj_ID_8 raw offset value.
 */
#define OFF_Objects_Signals_A8_Obj_ID_8             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A8_Object_Class_8 Signal Object_Class_8 of Message Objects_Signals_A8 (0x515)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A8_Object_Class_8.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A8
 * @{
 */

/**
 * Signal Object_Class_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A8_Object_Class_8 and \ref GET_Objects_Signals_A8_Object_Class_8 instead.
 */
#define SIG_Objects_Signals_A8_Object_Class_8        0, 0, 7, 3

/**
 * Signal Object_Class_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A8_Object_Class_8 or \ref INIT_Objects_Signals_A8 instead.
 */
#define SETUP_Objects_Signals_A8_Object_Class_8      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A8_Object_Class_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A8_Object_Class_8(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A8_Object_Class_8(buf) \
	SET_Objects_Signals_A8_Object_Class_8(buf, 0)

/**
 * Signal Object_Class_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A8_Object_Class_8(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_8 raw initial value.
 */
#define START_Objects_Signals_A8_Object_Class_8      0

/**
 * Signal Object_Class_8 raw minimum value.
 */
#define MIN_Objects_Signals_A8_Object_Class_8        0

/**
 * Signal Object_Class_8 raw maximum value.
 */
#define MAX_Objects_Signals_A8_Object_Class_8        7

/**
 * Signal Object_Class_8 raw offset value.
 */
#define OFF_Objects_Signals_A8_Object_Class_8        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A8_Object_Class_8 Value Table for Signal Object_Class_8 in Message Objects_Signals_A8 (0x515)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A8_Object_Class_8.
 *
 * @ingroup SIG_Objects_Signals_A8_Object_Class_8
 */

/**
 * Value table Objects_Signals_A8_Object_Class_8 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A8_Object_Class_8
 */
#define Objects_Signals_A8_Object_Class_8_uncertain_vcl       7

/**
 * Value table Objects_Signals_A8_Object_Class_8 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A8_Object_Class_8
 */
#define Objects_Signals_A8_Object_Class_8_animal              6

/**
 * Value table Objects_Signals_A8_Object_Class_8 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A8_Object_Class_8
 */
#define Objects_Signals_A8_Object_Class_8_general_object      5

/**
 * Value table Objects_Signals_A8_Object_Class_8 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A8_Object_Class_8
 */
#define Objects_Signals_A8_Object_Class_8_pedestrian          4

/**
 * Value table Objects_Signals_A8_Object_Class_8 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A8_Object_Class_8
 */
#define Objects_Signals_A8_Object_Class_8_bicycle             3

/**
 * Value table Objects_Signals_A8_Object_Class_8 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A8_Object_Class_8
 */
#define Objects_Signals_A8_Object_Class_8_bike                2

/**
 * Value table Objects_Signals_A8_Object_Class_8 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A8_Object_Class_8
 */
#define Objects_Signals_A8_Object_Class_8_truck               1

/**
 * Value table Objects_Signals_A8_Object_Class_8 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A8_Object_Class_8
 */
#define Objects_Signals_A8_Object_Class_8_car                 0

/**
 * @defgroup SIG_Objects_Signals_A8_OBJ_Width_8 Signal OBJ_Width_8 of Message Objects_Signals_A8 (0x515)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A8
 * @{
 */

/**
 * Signal OBJ_Width_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A8_OBJ_Width_8 and \ref GET_Objects_Signals_A8_OBJ_Width_8 instead.
 */
#define SIG_Objects_Signals_A8_OBJ_Width_8          0, 0, 10, 7

/**
 * Signal OBJ_Width_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A8_OBJ_Width_8 or \ref INIT_Objects_Signals_A8 instead.
 */
#define SETUP_Objects_Signals_A8_OBJ_Width_8        0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A8_OBJ_Width_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A8_OBJ_Width_8(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A8_OBJ_Width_8(buf) \
	SET_Objects_Signals_A8_OBJ_Width_8(buf, 0)

/**
 * Signal OBJ_Width_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A8_OBJ_Width_8(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_8 raw initial value.
 */
#define START_Objects_Signals_A8_OBJ_Width_8        0

/**
 * Signal OBJ_Width_8 raw minimum value.
 */
#define MIN_Objects_Signals_A8_OBJ_Width_8          0

/**
 * Signal OBJ_Width_8 raw maximum value.
 */
#define MAX_Objects_Signals_A8_OBJ_Width_8          127

/**
 * Signal OBJ_Width_8 raw offset value.
 */
#define OFF_Objects_Signals_A8_OBJ_Width_8          0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A8_OBJ_Length_8 Signal OBJ_Length_8 of Message Objects_Signals_A8 (0x515)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A8
 * @{
 */

/**
 * Signal OBJ_Length_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A8_OBJ_Length_8 and \ref GET_Objects_Signals_A8_OBJ_Length_8 instead.
 */
#define SIG_Objects_Signals_A8_OBJ_Length_8         0, 0, 17, 9

/**
 * Signal OBJ_Length_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A8_OBJ_Length_8 or \ref INIT_Objects_Signals_A8 instead.
 */
#define SETUP_Objects_Signals_A8_OBJ_Length_8       0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A8_OBJ_Length_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A8_OBJ_Length_8(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A8_OBJ_Length_8(buf) \
	SET_Objects_Signals_A8_OBJ_Length_8(buf, 0)

/**
 * Signal OBJ_Length_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A8_OBJ_Length_8(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_8 raw initial value.
 */
#define START_Objects_Signals_A8_OBJ_Length_8       0

/**
 * Signal OBJ_Length_8 raw minimum value.
 */
#define MIN_Objects_Signals_A8_OBJ_Length_8         0

/**
 * Signal OBJ_Length_8 raw maximum value.
 */
#define MAX_Objects_Signals_A8_OBJ_Length_8         510

/**
 * Signal OBJ_Length_8 raw offset value.
 */
#define OFF_Objects_Signals_A8_OBJ_Length_8         0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A8_Relative_Long_Velocity_8 Signal Relative_Long_Velocity_8 of Message Objects_Signals_A8 (0x515)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A8
 * @{
 */

/**
 * Signal Relative_Long_Velocity_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A8_Relative_Long_Velocity_8 and \ref GET_Objects_Signals_A8_Relative_Long_Velocity_8 instead.
 */
#define SIG_Objects_Signals_A8_Relative_Long_Velocity_8        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A8_Relative_Long_Velocity_8 or \ref INIT_Objects_Signals_A8 instead.
 */
#define SETUP_Objects_Signals_A8_Relative_Long_Velocity_8      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A8_Relative_Long_Velocity_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A8_Relative_Long_Velocity_8(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A8_Relative_Long_Velocity_8(buf) \
	SET_Objects_Signals_A8_Relative_Long_Velocity_8(buf, 0)

/**
 * Signal Relative_Long_Velocity_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A8_Relative_Long_Velocity_8(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_8 raw initial value.
 */
#define START_Objects_Signals_A8_Relative_Long_Velocity_8      0

/**
 * Signal Relative_Long_Velocity_8 raw minimum value.
 */
#define MIN_Objects_Signals_A8_Relative_Long_Velocity_8        0

/**
 * Signal Relative_Long_Velocity_8 raw maximum value.
 */
#define MAX_Objects_Signals_A8_Relative_Long_Velocity_8        5000

/**
 * Signal Relative_Long_Velocity_8 raw offset value.
 */
#define OFF_Objects_Signals_A8_Relative_Long_Velocity_8        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A8_OBJ_Lane_Assignment_8 Signal OBJ_Lane_Assignment_8 of Message Objects_Signals_A8 (0x515)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A8_OBJ_Lane_Assignment_8.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A8
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A8_OBJ_Lane_Assignment_8 and \ref GET_Objects_Signals_A8_OBJ_Lane_Assignment_8 instead.
 */
#define SIG_Objects_Signals_A8_OBJ_Lane_Assignment_8        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A8_OBJ_Lane_Assignment_8 or \ref INIT_Objects_Signals_A8 instead.
 */
#define SETUP_Objects_Signals_A8_OBJ_Lane_Assignment_8      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A8_OBJ_Lane_Assignment_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A8_OBJ_Lane_Assignment_8(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A8_OBJ_Lane_Assignment_8(buf) \
	SET_Objects_Signals_A8_OBJ_Lane_Assignment_8(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A8_OBJ_Lane_Assignment_8(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_8 raw initial value.
 */
#define START_Objects_Signals_A8_OBJ_Lane_Assignment_8      0

/**
 * Signal OBJ_Lane_Assignment_8 raw minimum value.
 */
#define MIN_Objects_Signals_A8_OBJ_Lane_Assignment_8        0

/**
 * Signal OBJ_Lane_Assignment_8 raw maximum value.
 */
#define MAX_Objects_Signals_A8_OBJ_Lane_Assignment_8        5

/**
 * Signal OBJ_Lane_Assignment_8 raw offset value.
 */
#define OFF_Objects_Signals_A8_OBJ_Lane_Assignment_8        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A8_OBJ_Lane_Assignment_8 Value Table for Signal OBJ_Lane_Assignment_8 in Message Objects_Signals_A8 (0x515)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A8_OBJ_Lane_Assignment_8.
 *
 * @ingroup SIG_Objects_Signals_A8_OBJ_Lane_Assignment_8
 */

/**
 * Value table Objects_Signals_A8_OBJ_Lane_Assignment_8 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A8_OBJ_Lane_Assignment_8
 */
#define Objects_Signals_A8_OBJ_Lane_Assignment_8_Not                 5

/**
 * Value table Objects_Signals_A8_OBJ_Lane_Assignment_8 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A8_OBJ_Lane_Assignment_8
 */
#define Objects_Signals_A8_OBJ_Lane_Assignment_8_Next                4

/**
 * Value table Objects_Signals_A8_OBJ_Lane_Assignment_8 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A8_OBJ_Lane_Assignment_8
 */
#define Objects_Signals_A8_OBJ_Lane_Assignment_8_Right               3

/**
 * Value table Objects_Signals_A8_OBJ_Lane_Assignment_8 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A8_OBJ_Lane_Assignment_8
 */
#define Objects_Signals_A8_OBJ_Lane_Assignment_8_Ego                 2

/**
 * Value table Objects_Signals_A8_OBJ_Lane_Assignment_8 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A8_OBJ_Lane_Assignment_8
 */
#define Objects_Signals_A8_OBJ_Lane_Assignment_8_Left                1

/**
 * Value table Objects_Signals_A8_OBJ_Lane_Assignment_8 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A8_OBJ_Lane_Assignment_8
 */
#define Objects_Signals_A8_OBJ_Lane_Assignment_8_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A8_Relative_Lat_Velocity_8 Signal Relative_Lat_Velocity_8 of Message Objects_Signals_A8 (0x515)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A8
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A8_Relative_Lat_Velocity_8 and \ref GET_Objects_Signals_A8_Relative_Lat_Velocity_8 instead.
 */
#define SIG_Objects_Signals_A8_Relative_Lat_Velocity_8        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A8_Relative_Lat_Velocity_8 or \ref INIT_Objects_Signals_A8 instead.
 */
#define SETUP_Objects_Signals_A8_Relative_Lat_Velocity_8      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A8_Relative_Lat_Velocity_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A8_Relative_Lat_Velocity_8(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A8_Relative_Lat_Velocity_8(buf) \
	SET_Objects_Signals_A8_Relative_Lat_Velocity_8(buf, 0)

/**
 * Signal Relative_Lat_Velocity_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A8_Relative_Lat_Velocity_8(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_8 raw initial value.
 */
#define START_Objects_Signals_A8_Relative_Lat_Velocity_8      0

/**
 * Signal Relative_Lat_Velocity_8 raw minimum value.
 */
#define MIN_Objects_Signals_A8_Relative_Lat_Velocity_8        0

/**
 * Signal Relative_Lat_Velocity_8 raw maximum value.
 */
#define MAX_Objects_Signals_A8_Relative_Lat_Velocity_8        2000

/**
 * Signal Relative_Lat_Velocity_8 raw offset value.
 */
#define OFF_Objects_Signals_A8_Relative_Lat_Velocity_8        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A8_Reserved Signal Reserved of Message Objects_Signals_A8 (0x515)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A8
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A8_Reserved and \ref GET_Objects_Signals_A8_Reserved instead.
 */
#define SIG_Objects_Signals_A8_Reserved             0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A8_Reserved or \ref INIT_Objects_Signals_A8 instead.
 */
#define SETUP_Objects_Signals_A8_Reserved           0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A8_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A8_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A8_Reserved(buf) \
	SET_Objects_Signals_A8_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A8_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A8_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A8_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A8_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A8_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B8_Absolute_Long_Acc_8 Signal Absolute_Long_Acc_8 of Message Objects_Signals_B8 (0x516)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B8
 * @{
 */

/**
 * Signal Absolute_Long_Acc_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B8_Absolute_Long_Acc_8 and \ref GET_Objects_Signals_B8_Absolute_Long_Acc_8 instead.
 */
#define SIG_Objects_Signals_B8_Absolute_Long_Acc_8        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B8_Absolute_Long_Acc_8 or \ref INIT_Objects_Signals_B8 instead.
 */
#define SETUP_Objects_Signals_B8_Absolute_Long_Acc_8      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B8_Absolute_Long_Acc_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B8_Absolute_Long_Acc_8(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B8_Absolute_Long_Acc_8(buf) \
	SET_Objects_Signals_B8_Absolute_Long_Acc_8(buf, 0)

/**
 * Signal Absolute_Long_Acc_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B8_Absolute_Long_Acc_8(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_8 raw initial value.
 */
#define START_Objects_Signals_B8_Absolute_Long_Acc_8      0

/**
 * Signal Absolute_Long_Acc_8 raw minimum value.
 */
#define MIN_Objects_Signals_B8_Absolute_Long_Acc_8        0

/**
 * Signal Absolute_Long_Acc_8 raw maximum value.
 */
#define MAX_Objects_Signals_B8_Absolute_Long_Acc_8        511

/**
 * Signal Absolute_Long_Acc_8 raw offset value.
 */
#define OFF_Objects_Signals_B8_Absolute_Long_Acc_8        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B8_Long_Distance_8 Signal Long_Distance_8 of Message Objects_Signals_B8 (0x516)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B8
 * @{
 */

/**
 * Signal Long_Distance_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B8_Long_Distance_8 and \ref GET_Objects_Signals_B8_Long_Distance_8 instead.
 */
#define SIG_Objects_Signals_B8_Long_Distance_8        0, 0, 9, 13

/**
 * Signal Long_Distance_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B8_Long_Distance_8 or \ref INIT_Objects_Signals_B8 instead.
 */
#define SETUP_Objects_Signals_B8_Long_Distance_8      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B8_Long_Distance_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B8_Long_Distance_8(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B8_Long_Distance_8(buf) \
	SET_Objects_Signals_B8_Long_Distance_8(buf, 0)

/**
 * Signal Long_Distance_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B8_Long_Distance_8(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_8 raw initial value.
 */
#define START_Objects_Signals_B8_Long_Distance_8      0

/**
 * Signal Long_Distance_8 raw minimum value.
 */
#define MIN_Objects_Signals_B8_Long_Distance_8        0

/**
 * Signal Long_Distance_8 raw maximum value.
 */
#define MAX_Objects_Signals_B8_Long_Distance_8        7000

/**
 * Signal Long_Distance_8 raw offset value.
 */
#define OFF_Objects_Signals_B8_Long_Distance_8        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B8_Lateral_Distance_8 Signal Lateral_Distance_8 of Message Objects_Signals_B8 (0x516)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B8
 * @{
 */

/**
 * Signal Lateral_Distance_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B8_Lateral_Distance_8 and \ref GET_Objects_Signals_B8_Lateral_Distance_8 instead.
 */
#define SIG_Objects_Signals_B8_Lateral_Distance_8        0, 0, 22, 12

/**
 * Signal Lateral_Distance_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B8_Lateral_Distance_8 or \ref INIT_Objects_Signals_B8 instead.
 */
#define SETUP_Objects_Signals_B8_Lateral_Distance_8      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B8_Lateral_Distance_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B8_Lateral_Distance_8(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B8_Lateral_Distance_8(buf) \
	SET_Objects_Signals_B8_Lateral_Distance_8(buf, 0)

/**
 * Signal Lateral_Distance_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B8_Lateral_Distance_8(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_8 raw initial value.
 */
#define START_Objects_Signals_B8_Lateral_Distance_8      0

/**
 * Signal Lateral_Distance_8 raw minimum value.
 */
#define MIN_Objects_Signals_B8_Lateral_Distance_8        0

/**
 * Signal Lateral_Distance_8 raw maximum value.
 */
#define MAX_Objects_Signals_B8_Lateral_Distance_8        4094

/**
 * Signal Lateral_Distance_8 raw offset value.
 */
#define OFF_Objects_Signals_B8_Lateral_Distance_8        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B8_Reserved Signal Reserved of Message Objects_Signals_B8 (0x516)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B8
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B8_Reserved and \ref GET_Objects_Signals_B8_Reserved instead.
 */
#define SIG_Objects_Signals_B8_Reserved             0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B8_Reserved or \ref INIT_Objects_Signals_B8 instead.
 */
#define SETUP_Objects_Signals_B8_Reserved           0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B8_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B8_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B8_Reserved(buf) \
	SET_Objects_Signals_B8_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B8_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B8_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B8_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B8_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B8_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C8_Absolute_Speed_8 Signal Absolute_Speed_8 of Message Objects_Signals_C8 (0x517)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C8
 * @{
 */

/**
 * Signal Absolute_Speed_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C8_Absolute_Speed_8 and \ref GET_Objects_Signals_C8_Absolute_Speed_8 instead.
 */
#define SIG_Objects_Signals_C8_Absolute_Speed_8        0, 0, 0, 12

/**
 * Signal Absolute_Speed_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C8_Absolute_Speed_8 or \ref INIT_Objects_Signals_C8 instead.
 */
#define SETUP_Objects_Signals_C8_Absolute_Speed_8      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C8_Absolute_Speed_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C8_Absolute_Speed_8(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C8_Absolute_Speed_8(buf) \
	SET_Objects_Signals_C8_Absolute_Speed_8(buf, 0)

/**
 * Signal Absolute_Speed_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C8_Absolute_Speed_8(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_8 raw initial value.
 */
#define START_Objects_Signals_C8_Absolute_Speed_8      0

/**
 * Signal Absolute_Speed_8 raw minimum value.
 */
#define MIN_Objects_Signals_C8_Absolute_Speed_8        0

/**
 * Signal Absolute_Speed_8 raw maximum value.
 */
#define MAX_Objects_Signals_C8_Absolute_Speed_8        4000

/**
 * Signal Absolute_Speed_8 raw offset value.
 */
#define OFF_Objects_Signals_C8_Absolute_Speed_8        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C8_OBJ_Motion_Status_8 Signal OBJ_Motion_Status_8 of Message Objects_Signals_C8 (0x517)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C8_OBJ_Motion_Status_8.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C8
 * @{
 */

/**
 * Signal OBJ_Motion_Status_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C8_OBJ_Motion_Status_8 and \ref GET_Objects_Signals_C8_OBJ_Motion_Status_8 instead.
 */
#define SIG_Objects_Signals_C8_OBJ_Motion_Status_8        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C8_OBJ_Motion_Status_8 or \ref INIT_Objects_Signals_C8 instead.
 */
#define SETUP_Objects_Signals_C8_OBJ_Motion_Status_8      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C8_OBJ_Motion_Status_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C8_OBJ_Motion_Status_8(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C8_OBJ_Motion_Status_8(buf) \
	SET_Objects_Signals_C8_OBJ_Motion_Status_8(buf, 0)

/**
 * Signal OBJ_Motion_Status_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C8_OBJ_Motion_Status_8(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_8 raw initial value.
 */
#define START_Objects_Signals_C8_OBJ_Motion_Status_8      0

/**
 * Signal OBJ_Motion_Status_8 raw minimum value.
 */
#define MIN_Objects_Signals_C8_OBJ_Motion_Status_8        0

/**
 * Signal OBJ_Motion_Status_8 raw maximum value.
 */
#define MAX_Objects_Signals_C8_OBJ_Motion_Status_8        4

/**
 * Signal OBJ_Motion_Status_8 raw offset value.
 */
#define OFF_Objects_Signals_C8_OBJ_Motion_Status_8        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C8_OBJ_Motion_Status_8 Value Table for Signal OBJ_Motion_Status_8 in Message Objects_Signals_C8 (0x517)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C8_OBJ_Motion_Status_8.
 *
 * @ingroup SIG_Objects_Signals_C8_OBJ_Motion_Status_8
 */

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Status_8 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Status_8
 */
#define Objects_Signals_C8_OBJ_Motion_Status_8_Moving              4

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Status_8 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Status_8
 */
#define Objects_Signals_C8_OBJ_Motion_Status_8_Stopped             3

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Status_8 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Status_8
 */
#define Objects_Signals_C8_OBJ_Motion_Status_8_Stationary          2

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Status_8 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Status_8
 */
#define Objects_Signals_C8_OBJ_Motion_Status_8_Moving_1            1

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Status_8 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Status_8
 */
#define Objects_Signals_C8_OBJ_Motion_Status_8_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C8_OBJ_Motion_Category_8 Signal OBJ_Motion_Category_8 of Message Objects_Signals_C8 (0x517)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C8_OBJ_Motion_Category_8.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C8
 * @{
 */

/**
 * Signal OBJ_Motion_Category_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C8_OBJ_Motion_Category_8 and \ref GET_Objects_Signals_C8_OBJ_Motion_Category_8 instead.
 */
#define SIG_Objects_Signals_C8_OBJ_Motion_Category_8        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C8_OBJ_Motion_Category_8 or \ref INIT_Objects_Signals_C8 instead.
 */
#define SETUP_Objects_Signals_C8_OBJ_Motion_Category_8      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C8_OBJ_Motion_Category_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C8_OBJ_Motion_Category_8(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C8_OBJ_Motion_Category_8(buf) \
	SET_Objects_Signals_C8_OBJ_Motion_Category_8(buf, 0)

/**
 * Signal OBJ_Motion_Category_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C8_OBJ_Motion_Category_8(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_8 raw initial value.
 */
#define START_Objects_Signals_C8_OBJ_Motion_Category_8      0

/**
 * Signal OBJ_Motion_Category_8 raw minimum value.
 */
#define MIN_Objects_Signals_C8_OBJ_Motion_Category_8        0

/**
 * Signal OBJ_Motion_Category_8 raw maximum value.
 */
#define MAX_Objects_Signals_C8_OBJ_Motion_Category_8        12

/**
 * Signal OBJ_Motion_Category_8 raw offset value.
 */
#define OFF_Objects_Signals_C8_OBJ_Motion_Category_8        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8 Value Table for Signal OBJ_Motion_Category_8 in Message Objects_Signals_C8 (0x517)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C8_OBJ_Motion_Category_8.
 *
 * @ingroup SIG_Objects_Signals_C8_OBJ_Motion_Category_8
 */

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_MOVING           10

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_RTAP             9

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_LTAP             8

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_CROSSING         7

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_PASSING          1

/**
 * Value table Objects_Signals_C8_OBJ_Motion_Category_8 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C8_OBJ_Motion_Category_8
 */
#define Objects_Signals_C8_OBJ_Motion_Category_8_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C8_Brake_Light_8 Signal Brake_Light_8 of Message Objects_Signals_C8 (0x517)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C8_Brake_Light_8.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C8
 * @{
 */

/**
 * Signal Brake_Light_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C8_Brake_Light_8 and \ref GET_Objects_Signals_C8_Brake_Light_8 instead.
 */
#define SIG_Objects_Signals_C8_Brake_Light_8        0, 0, 19, 1

/**
 * Signal Brake_Light_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C8_Brake_Light_8 or \ref INIT_Objects_Signals_C8 instead.
 */
#define SETUP_Objects_Signals_C8_Brake_Light_8      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C8_Brake_Light_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C8_Brake_Light_8(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C8_Brake_Light_8(buf) \
	SET_Objects_Signals_C8_Brake_Light_8(buf, 0)

/**
 * Signal Brake_Light_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C8_Brake_Light_8(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_8 raw initial value.
 */
#define START_Objects_Signals_C8_Brake_Light_8      0

/**
 * Signal Brake_Light_8 raw minimum value.
 */
#define MIN_Objects_Signals_C8_Brake_Light_8        0

/**
 * Signal Brake_Light_8 raw maximum value.
 */
#define MAX_Objects_Signals_C8_Brake_Light_8        1

/**
 * Signal Brake_Light_8 raw offset value.
 */
#define OFF_Objects_Signals_C8_Brake_Light_8        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C8_Brake_Light_8 Value Table for Signal Brake_Light_8 in Message Objects_Signals_C8 (0x517)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C8_Brake_Light_8.
 *
 * @ingroup SIG_Objects_Signals_C8_Brake_Light_8
 */

/**
 * Value table Objects_Signals_C8_Brake_Light_8 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C8_Brake_Light_8
 */
#define Objects_Signals_C8_Brake_Light_8_On                  1

/**
 * Value table Objects_Signals_C8_Brake_Light_8 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C8_Brake_Light_8
 */
#define Objects_Signals_C8_Brake_Light_8_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C8_Turn_Indicator_Right_8 Signal Turn_Indicator_Right_8 of Message Objects_Signals_C8 (0x517)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C8_Turn_Indicator_Right_8.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C8
 * @{
 */

/**
 * Signal Turn_Indicator_Right_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C8_Turn_Indicator_Right_8 and \ref GET_Objects_Signals_C8_Turn_Indicator_Right_8 instead.
 */
#define SIG_Objects_Signals_C8_Turn_Indicator_Right_8        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C8_Turn_Indicator_Right_8 or \ref INIT_Objects_Signals_C8 instead.
 */
#define SETUP_Objects_Signals_C8_Turn_Indicator_Right_8      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C8_Turn_Indicator_Right_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C8_Turn_Indicator_Right_8(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C8_Turn_Indicator_Right_8(buf) \
	SET_Objects_Signals_C8_Turn_Indicator_Right_8(buf, 0)

/**
 * Signal Turn_Indicator_Right_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C8_Turn_Indicator_Right_8(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_8 raw initial value.
 */
#define START_Objects_Signals_C8_Turn_Indicator_Right_8      0

/**
 * Signal Turn_Indicator_Right_8 raw minimum value.
 */
#define MIN_Objects_Signals_C8_Turn_Indicator_Right_8        0

/**
 * Signal Turn_Indicator_Right_8 raw maximum value.
 */
#define MAX_Objects_Signals_C8_Turn_Indicator_Right_8        1

/**
 * Signal Turn_Indicator_Right_8 raw offset value.
 */
#define OFF_Objects_Signals_C8_Turn_Indicator_Right_8        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C8_Turn_Indicator_Right_8 Value Table for Signal Turn_Indicator_Right_8 in Message Objects_Signals_C8 (0x517)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C8_Turn_Indicator_Right_8.
 *
 * @ingroup SIG_Objects_Signals_C8_Turn_Indicator_Right_8
 */

/**
 * Value table Objects_Signals_C8_Turn_Indicator_Right_8 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C8_Turn_Indicator_Right_8
 */
#define Objects_Signals_C8_Turn_Indicator_Right_8_On                  1

/**
 * Value table Objects_Signals_C8_Turn_Indicator_Right_8 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C8_Turn_Indicator_Right_8
 */
#define Objects_Signals_C8_Turn_Indicator_Right_8_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C8_Turn_Indicator_Left_8 Signal Turn_Indicator_Left_8 of Message Objects_Signals_C8 (0x517)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C8_Turn_Indicator_Left_8.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C8
 * @{
 */

/**
 * Signal Turn_Indicator_Left_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C8_Turn_Indicator_Left_8 and \ref GET_Objects_Signals_C8_Turn_Indicator_Left_8 instead.
 */
#define SIG_Objects_Signals_C8_Turn_Indicator_Left_8        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C8_Turn_Indicator_Left_8 or \ref INIT_Objects_Signals_C8 instead.
 */
#define SETUP_Objects_Signals_C8_Turn_Indicator_Left_8      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C8_Turn_Indicator_Left_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C8_Turn_Indicator_Left_8(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C8_Turn_Indicator_Left_8(buf) \
	SET_Objects_Signals_C8_Turn_Indicator_Left_8(buf, 0)

/**
 * Signal Turn_Indicator_Left_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C8_Turn_Indicator_Left_8(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_8 raw initial value.
 */
#define START_Objects_Signals_C8_Turn_Indicator_Left_8      0

/**
 * Signal Turn_Indicator_Left_8 raw minimum value.
 */
#define MIN_Objects_Signals_C8_Turn_Indicator_Left_8        0

/**
 * Signal Turn_Indicator_Left_8 raw maximum value.
 */
#define MAX_Objects_Signals_C8_Turn_Indicator_Left_8        1

/**
 * Signal Turn_Indicator_Left_8 raw offset value.
 */
#define OFF_Objects_Signals_C8_Turn_Indicator_Left_8        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C8_Turn_Indicator_Left_8 Value Table for Signal Turn_Indicator_Left_8 in Message Objects_Signals_C8 (0x517)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C8_Turn_Indicator_Left_8.
 *
 * @ingroup SIG_Objects_Signals_C8_Turn_Indicator_Left_8
 */

/**
 * Value table Objects_Signals_C8_Turn_Indicator_Left_8 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C8_Turn_Indicator_Left_8
 */
#define Objects_Signals_C8_Turn_Indicator_Left_8_On                  1

/**
 * Value table Objects_Signals_C8_Turn_Indicator_Left_8 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C8_Turn_Indicator_Left_8
 */
#define Objects_Signals_C8_Turn_Indicator_Left_8_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C8_Light_indicator_validity_8 Signal Light_indicator_validity_8 of Message Objects_Signals_C8 (0x517)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C8_Light_indicator_validity_8.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C8
 * @{
 */

/**
 * Signal Light_indicator_validity_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C8_Light_indicator_validity_8 and \ref GET_Objects_Signals_C8_Light_indicator_validity_8 instead.
 */
#define SIG_Objects_Signals_C8_Light_indicator_validity_8        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C8_Light_indicator_validity_8 or \ref INIT_Objects_Signals_C8 instead.
 */
#define SETUP_Objects_Signals_C8_Light_indicator_validity_8      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C8_Light_indicator_validity_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C8_Light_indicator_validity_8(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C8_Light_indicator_validity_8(buf) \
	SET_Objects_Signals_C8_Light_indicator_validity_8(buf, 0)

/**
 * Signal Light_indicator_validity_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C8_Light_indicator_validity_8(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_8 raw initial value.
 */
#define START_Objects_Signals_C8_Light_indicator_validity_8      0

/**
 * Signal Light_indicator_validity_8 raw minimum value.
 */
#define MIN_Objects_Signals_C8_Light_indicator_validity_8        0

/**
 * Signal Light_indicator_validity_8 raw maximum value.
 */
#define MAX_Objects_Signals_C8_Light_indicator_validity_8        1

/**
 * Signal Light_indicator_validity_8 raw offset value.
 */
#define OFF_Objects_Signals_C8_Light_indicator_validity_8        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C8_Light_indicator_validity_8 Value Table for Signal Light_indicator_validity_8 in Message Objects_Signals_C8 (0x517)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C8_Light_indicator_validity_8.
 *
 * @ingroup SIG_Objects_Signals_C8_Light_indicator_validity_8
 */

/**
 * Value table Objects_Signals_C8_Light_indicator_validity_8 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C8_Light_indicator_validity_8
 */
#define Objects_Signals_C8_Light_indicator_validity_8_True                1

/**
 * Value table Objects_Signals_C8_Light_indicator_validity_8 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C8_Light_indicator_validity_8
 */
#define Objects_Signals_C8_Light_indicator_validity_8_False               0

/**
 * @defgroup SIG_Objects_Signals_C8_OBJ_Angle_Mid_8 Signal OBJ_Angle_Mid_8 of Message Objects_Signals_C8 (0x517)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C8
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C8_OBJ_Angle_Mid_8 and \ref GET_Objects_Signals_C8_OBJ_Angle_Mid_8 instead.
 */
#define SIG_Objects_Signals_C8_OBJ_Angle_Mid_8        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C8_OBJ_Angle_Mid_8 or \ref INIT_Objects_Signals_C8 instead.
 */
#define SETUP_Objects_Signals_C8_OBJ_Angle_Mid_8      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C8_OBJ_Angle_Mid_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C8_OBJ_Angle_Mid_8(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C8_OBJ_Angle_Mid_8(buf) \
	SET_Objects_Signals_C8_OBJ_Angle_Mid_8(buf, 0)

/**
 * Signal OBJ_Angle_Mid_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C8_OBJ_Angle_Mid_8(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_8 raw initial value.
 */
#define START_Objects_Signals_C8_OBJ_Angle_Mid_8      0

/**
 * Signal OBJ_Angle_Mid_8 raw minimum value.
 */
#define MIN_Objects_Signals_C8_OBJ_Angle_Mid_8        0

/**
 * Signal OBJ_Angle_Mid_8 raw maximum value.
 */
#define MAX_Objects_Signals_C8_OBJ_Angle_Mid_8        15710

/**
 * Signal OBJ_Angle_Mid_8 raw offset value.
 */
#define OFF_Objects_Signals_C8_OBJ_Angle_Mid_8        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C8_OBJ_Angle_Rate_8 Signal OBJ_Angle_Rate_8 of Message Objects_Signals_C8 (0x517)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C8
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C8_OBJ_Angle_Rate_8 and \ref GET_Objects_Signals_C8_OBJ_Angle_Rate_8 instead.
 */
#define SIG_Objects_Signals_C8_OBJ_Angle_Rate_8        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C8_OBJ_Angle_Rate_8 or \ref INIT_Objects_Signals_C8 instead.
 */
#define SETUP_Objects_Signals_C8_OBJ_Angle_Rate_8      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C8_OBJ_Angle_Rate_8(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C8_OBJ_Angle_Rate_8(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C8_OBJ_Angle_Rate_8(buf) \
	SET_Objects_Signals_C8_OBJ_Angle_Rate_8(buf, 0)

/**
 * Signal OBJ_Angle_Rate_8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C8_OBJ_Angle_Rate_8(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_8 raw initial value.
 */
#define START_Objects_Signals_C8_OBJ_Angle_Rate_8      0

/**
 * Signal OBJ_Angle_Rate_8 raw minimum value.
 */
#define MIN_Objects_Signals_C8_OBJ_Angle_Rate_8        0

/**
 * Signal OBJ_Angle_Rate_8 raw maximum value.
 */
#define MAX_Objects_Signals_C8_OBJ_Angle_Rate_8        2233

/**
 * Signal OBJ_Angle_Rate_8 raw offset value.
 */
#define OFF_Objects_Signals_C8_OBJ_Angle_Rate_8        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C8_Reserved Signal Reserved of Message Objects_Signals_C8 (0x517)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C8
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C8_Reserved and \ref GET_Objects_Signals_C8_Reserved instead.
 */
#define SIG_Objects_Signals_C8_Reserved             0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C8_Reserved or \ref INIT_Objects_Signals_C8 instead.
 */
#define SETUP_Objects_Signals_C8_Reserved           0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C8_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C8_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C8_Reserved(buf) \
	SET_Objects_Signals_C8_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C8_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C8_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C8_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C8_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C8_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A9_Obj_ID_9 Signal Obj_ID_9 of Message Objects_Signals_A9 (0x518)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A9
 * @{
 */

/**
 * Signal Obj_ID_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A9_Obj_ID_9 and \ref GET_Objects_Signals_A9_Obj_ID_9 instead.
 */
#define SIG_Objects_Signals_A9_Obj_ID_9             0, 0, 0, 7

/**
 * Signal Obj_ID_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A9_Obj_ID_9 or \ref INIT_Objects_Signals_A9 instead.
 */
#define SETUP_Objects_Signals_A9_Obj_ID_9           0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A9_Obj_ID_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A9_Obj_ID_9(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A9_Obj_ID_9(buf) \
	SET_Objects_Signals_A9_Obj_ID_9(buf, 0)

/**
 * Signal Obj_ID_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A9_Obj_ID_9(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_9 raw initial value.
 */
#define START_Objects_Signals_A9_Obj_ID_9           0

/**
 * Signal Obj_ID_9 raw minimum value.
 */
#define MIN_Objects_Signals_A9_Obj_ID_9             0

/**
 * Signal Obj_ID_9 raw maximum value.
 */
#define MAX_Objects_Signals_A9_Obj_ID_9             127

/**
 * Signal Obj_ID_9 raw offset value.
 */
#define OFF_Objects_Signals_A9_Obj_ID_9             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A9_Object_Class_9 Signal Object_Class_9 of Message Objects_Signals_A9 (0x518)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A9_Object_Class_9.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A9
 * @{
 */

/**
 * Signal Object_Class_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A9_Object_Class_9 and \ref GET_Objects_Signals_A9_Object_Class_9 instead.
 */
#define SIG_Objects_Signals_A9_Object_Class_9        0, 0, 7, 3

/**
 * Signal Object_Class_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A9_Object_Class_9 or \ref INIT_Objects_Signals_A9 instead.
 */
#define SETUP_Objects_Signals_A9_Object_Class_9      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A9_Object_Class_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A9_Object_Class_9(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A9_Object_Class_9(buf) \
	SET_Objects_Signals_A9_Object_Class_9(buf, 0)

/**
 * Signal Object_Class_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A9_Object_Class_9(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_9 raw initial value.
 */
#define START_Objects_Signals_A9_Object_Class_9      0

/**
 * Signal Object_Class_9 raw minimum value.
 */
#define MIN_Objects_Signals_A9_Object_Class_9        0

/**
 * Signal Object_Class_9 raw maximum value.
 */
#define MAX_Objects_Signals_A9_Object_Class_9        7

/**
 * Signal Object_Class_9 raw offset value.
 */
#define OFF_Objects_Signals_A9_Object_Class_9        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A9_Object_Class_9 Value Table for Signal Object_Class_9 in Message Objects_Signals_A9 (0x518)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A9_Object_Class_9.
 *
 * @ingroup SIG_Objects_Signals_A9_Object_Class_9
 */

/**
 * Value table Objects_Signals_A9_Object_Class_9 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A9_Object_Class_9
 */
#define Objects_Signals_A9_Object_Class_9_uncertain_vcl       7

/**
 * Value table Objects_Signals_A9_Object_Class_9 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A9_Object_Class_9
 */
#define Objects_Signals_A9_Object_Class_9_animal              6

/**
 * Value table Objects_Signals_A9_Object_Class_9 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A9_Object_Class_9
 */
#define Objects_Signals_A9_Object_Class_9_general_object      5

/**
 * Value table Objects_Signals_A9_Object_Class_9 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A9_Object_Class_9
 */
#define Objects_Signals_A9_Object_Class_9_pedestrian          4

/**
 * Value table Objects_Signals_A9_Object_Class_9 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A9_Object_Class_9
 */
#define Objects_Signals_A9_Object_Class_9_bicycle             3

/**
 * Value table Objects_Signals_A9_Object_Class_9 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A9_Object_Class_9
 */
#define Objects_Signals_A9_Object_Class_9_bike                2

/**
 * Value table Objects_Signals_A9_Object_Class_9 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A9_Object_Class_9
 */
#define Objects_Signals_A9_Object_Class_9_truck               1

/**
 * Value table Objects_Signals_A9_Object_Class_9 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A9_Object_Class_9
 */
#define Objects_Signals_A9_Object_Class_9_car                 0

/**
 * @defgroup SIG_Objects_Signals_A9_OBJ_Width_9 Signal OBJ_Width_9 of Message Objects_Signals_A9 (0x518)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A9
 * @{
 */

/**
 * Signal OBJ_Width_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A9_OBJ_Width_9 and \ref GET_Objects_Signals_A9_OBJ_Width_9 instead.
 */
#define SIG_Objects_Signals_A9_OBJ_Width_9          0, 0, 10, 7

/**
 * Signal OBJ_Width_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A9_OBJ_Width_9 or \ref INIT_Objects_Signals_A9 instead.
 */
#define SETUP_Objects_Signals_A9_OBJ_Width_9        0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A9_OBJ_Width_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A9_OBJ_Width_9(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A9_OBJ_Width_9(buf) \
	SET_Objects_Signals_A9_OBJ_Width_9(buf, 0)

/**
 * Signal OBJ_Width_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A9_OBJ_Width_9(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_9 raw initial value.
 */
#define START_Objects_Signals_A9_OBJ_Width_9        0

/**
 * Signal OBJ_Width_9 raw minimum value.
 */
#define MIN_Objects_Signals_A9_OBJ_Width_9          0

/**
 * Signal OBJ_Width_9 raw maximum value.
 */
#define MAX_Objects_Signals_A9_OBJ_Width_9          127

/**
 * Signal OBJ_Width_9 raw offset value.
 */
#define OFF_Objects_Signals_A9_OBJ_Width_9          0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A9_OBJ_Length_9 Signal OBJ_Length_9 of Message Objects_Signals_A9 (0x518)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A9
 * @{
 */

/**
 * Signal OBJ_Length_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A9_OBJ_Length_9 and \ref GET_Objects_Signals_A9_OBJ_Length_9 instead.
 */
#define SIG_Objects_Signals_A9_OBJ_Length_9         0, 0, 17, 9

/**
 * Signal OBJ_Length_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A9_OBJ_Length_9 or \ref INIT_Objects_Signals_A9 instead.
 */
#define SETUP_Objects_Signals_A9_OBJ_Length_9       0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A9_OBJ_Length_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A9_OBJ_Length_9(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A9_OBJ_Length_9(buf) \
	SET_Objects_Signals_A9_OBJ_Length_9(buf, 0)

/**
 * Signal OBJ_Length_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A9_OBJ_Length_9(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_9 raw initial value.
 */
#define START_Objects_Signals_A9_OBJ_Length_9       0

/**
 * Signal OBJ_Length_9 raw minimum value.
 */
#define MIN_Objects_Signals_A9_OBJ_Length_9         0

/**
 * Signal OBJ_Length_9 raw maximum value.
 */
#define MAX_Objects_Signals_A9_OBJ_Length_9         510

/**
 * Signal OBJ_Length_9 raw offset value.
 */
#define OFF_Objects_Signals_A9_OBJ_Length_9         0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A9_Relative_Long_Velocity_9 Signal Relative_Long_Velocity_9 of Message Objects_Signals_A9 (0x518)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A9
 * @{
 */

/**
 * Signal Relative_Long_Velocity_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A9_Relative_Long_Velocity_9 and \ref GET_Objects_Signals_A9_Relative_Long_Velocity_9 instead.
 */
#define SIG_Objects_Signals_A9_Relative_Long_Velocity_9        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A9_Relative_Long_Velocity_9 or \ref INIT_Objects_Signals_A9 instead.
 */
#define SETUP_Objects_Signals_A9_Relative_Long_Velocity_9      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A9_Relative_Long_Velocity_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A9_Relative_Long_Velocity_9(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A9_Relative_Long_Velocity_9(buf) \
	SET_Objects_Signals_A9_Relative_Long_Velocity_9(buf, 0)

/**
 * Signal Relative_Long_Velocity_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A9_Relative_Long_Velocity_9(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_9 raw initial value.
 */
#define START_Objects_Signals_A9_Relative_Long_Velocity_9      0

/**
 * Signal Relative_Long_Velocity_9 raw minimum value.
 */
#define MIN_Objects_Signals_A9_Relative_Long_Velocity_9        0

/**
 * Signal Relative_Long_Velocity_9 raw maximum value.
 */
#define MAX_Objects_Signals_A9_Relative_Long_Velocity_9        5000

/**
 * Signal Relative_Long_Velocity_9 raw offset value.
 */
#define OFF_Objects_Signals_A9_Relative_Long_Velocity_9        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A9_OBJ_Lane_Assignment_9 Signal OBJ_Lane_Assignment_9 of Message Objects_Signals_A9 (0x518)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A9_OBJ_Lane_Assignment_9.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A9
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A9_OBJ_Lane_Assignment_9 and \ref GET_Objects_Signals_A9_OBJ_Lane_Assignment_9 instead.
 */
#define SIG_Objects_Signals_A9_OBJ_Lane_Assignment_9        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A9_OBJ_Lane_Assignment_9 or \ref INIT_Objects_Signals_A9 instead.
 */
#define SETUP_Objects_Signals_A9_OBJ_Lane_Assignment_9      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A9_OBJ_Lane_Assignment_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A9_OBJ_Lane_Assignment_9(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A9_OBJ_Lane_Assignment_9(buf) \
	SET_Objects_Signals_A9_OBJ_Lane_Assignment_9(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A9_OBJ_Lane_Assignment_9(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_9 raw initial value.
 */
#define START_Objects_Signals_A9_OBJ_Lane_Assignment_9      0

/**
 * Signal OBJ_Lane_Assignment_9 raw minimum value.
 */
#define MIN_Objects_Signals_A9_OBJ_Lane_Assignment_9        0

/**
 * Signal OBJ_Lane_Assignment_9 raw maximum value.
 */
#define MAX_Objects_Signals_A9_OBJ_Lane_Assignment_9        5

/**
 * Signal OBJ_Lane_Assignment_9 raw offset value.
 */
#define OFF_Objects_Signals_A9_OBJ_Lane_Assignment_9        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A9_OBJ_Lane_Assignment_9 Value Table for Signal OBJ_Lane_Assignment_9 in Message Objects_Signals_A9 (0x518)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A9_OBJ_Lane_Assignment_9.
 *
 * @ingroup SIG_Objects_Signals_A9_OBJ_Lane_Assignment_9
 */

/**
 * Value table Objects_Signals_A9_OBJ_Lane_Assignment_9 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A9_OBJ_Lane_Assignment_9
 */
#define Objects_Signals_A9_OBJ_Lane_Assignment_9_Not                 5

/**
 * Value table Objects_Signals_A9_OBJ_Lane_Assignment_9 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A9_OBJ_Lane_Assignment_9
 */
#define Objects_Signals_A9_OBJ_Lane_Assignment_9_Next                4

/**
 * Value table Objects_Signals_A9_OBJ_Lane_Assignment_9 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A9_OBJ_Lane_Assignment_9
 */
#define Objects_Signals_A9_OBJ_Lane_Assignment_9_Right               3

/**
 * Value table Objects_Signals_A9_OBJ_Lane_Assignment_9 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A9_OBJ_Lane_Assignment_9
 */
#define Objects_Signals_A9_OBJ_Lane_Assignment_9_Ego                 2

/**
 * Value table Objects_Signals_A9_OBJ_Lane_Assignment_9 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A9_OBJ_Lane_Assignment_9
 */
#define Objects_Signals_A9_OBJ_Lane_Assignment_9_Left                1

/**
 * Value table Objects_Signals_A9_OBJ_Lane_Assignment_9 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A9_OBJ_Lane_Assignment_9
 */
#define Objects_Signals_A9_OBJ_Lane_Assignment_9_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A9_Relative_Lat_Velocity_9 Signal Relative_Lat_Velocity_9 of Message Objects_Signals_A9 (0x518)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A9
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A9_Relative_Lat_Velocity_9 and \ref GET_Objects_Signals_A9_Relative_Lat_Velocity_9 instead.
 */
#define SIG_Objects_Signals_A9_Relative_Lat_Velocity_9        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A9_Relative_Lat_Velocity_9 or \ref INIT_Objects_Signals_A9 instead.
 */
#define SETUP_Objects_Signals_A9_Relative_Lat_Velocity_9      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A9_Relative_Lat_Velocity_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A9_Relative_Lat_Velocity_9(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A9_Relative_Lat_Velocity_9(buf) \
	SET_Objects_Signals_A9_Relative_Lat_Velocity_9(buf, 0)

/**
 * Signal Relative_Lat_Velocity_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A9_Relative_Lat_Velocity_9(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_9 raw initial value.
 */
#define START_Objects_Signals_A9_Relative_Lat_Velocity_9      0

/**
 * Signal Relative_Lat_Velocity_9 raw minimum value.
 */
#define MIN_Objects_Signals_A9_Relative_Lat_Velocity_9        0

/**
 * Signal Relative_Lat_Velocity_9 raw maximum value.
 */
#define MAX_Objects_Signals_A9_Relative_Lat_Velocity_9        2000

/**
 * Signal Relative_Lat_Velocity_9 raw offset value.
 */
#define OFF_Objects_Signals_A9_Relative_Lat_Velocity_9        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A9_Reserved Signal Reserved of Message Objects_Signals_A9 (0x518)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A9
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A9_Reserved and \ref GET_Objects_Signals_A9_Reserved instead.
 */
#define SIG_Objects_Signals_A9_Reserved             0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A9_Reserved or \ref INIT_Objects_Signals_A9 instead.
 */
#define SETUP_Objects_Signals_A9_Reserved           0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A9_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A9_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A9_Reserved(buf) \
	SET_Objects_Signals_A9_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A9_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A9_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A9_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A9_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A9_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B9_Absolute_Long_Acc_9 Signal Absolute_Long_Acc_9 of Message Objects_Signals_B9 (0x519)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B9
 * @{
 */

/**
 * Signal Absolute_Long_Acc_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B9_Absolute_Long_Acc_9 and \ref GET_Objects_Signals_B9_Absolute_Long_Acc_9 instead.
 */
#define SIG_Objects_Signals_B9_Absolute_Long_Acc_9        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B9_Absolute_Long_Acc_9 or \ref INIT_Objects_Signals_B9 instead.
 */
#define SETUP_Objects_Signals_B9_Absolute_Long_Acc_9      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B9_Absolute_Long_Acc_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B9_Absolute_Long_Acc_9(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B9_Absolute_Long_Acc_9(buf) \
	SET_Objects_Signals_B9_Absolute_Long_Acc_9(buf, 0)

/**
 * Signal Absolute_Long_Acc_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B9_Absolute_Long_Acc_9(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_9 raw initial value.
 */
#define START_Objects_Signals_B9_Absolute_Long_Acc_9      0

/**
 * Signal Absolute_Long_Acc_9 raw minimum value.
 */
#define MIN_Objects_Signals_B9_Absolute_Long_Acc_9        0

/**
 * Signal Absolute_Long_Acc_9 raw maximum value.
 */
#define MAX_Objects_Signals_B9_Absolute_Long_Acc_9        511

/**
 * Signal Absolute_Long_Acc_9 raw offset value.
 */
#define OFF_Objects_Signals_B9_Absolute_Long_Acc_9        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B9_Long_Distance_9 Signal Long_Distance_9 of Message Objects_Signals_B9 (0x519)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B9
 * @{
 */

/**
 * Signal Long_Distance_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B9_Long_Distance_9 and \ref GET_Objects_Signals_B9_Long_Distance_9 instead.
 */
#define SIG_Objects_Signals_B9_Long_Distance_9        0, 0, 9, 13

/**
 * Signal Long_Distance_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B9_Long_Distance_9 or \ref INIT_Objects_Signals_B9 instead.
 */
#define SETUP_Objects_Signals_B9_Long_Distance_9      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B9_Long_Distance_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B9_Long_Distance_9(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B9_Long_Distance_9(buf) \
	SET_Objects_Signals_B9_Long_Distance_9(buf, 0)

/**
 * Signal Long_Distance_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B9_Long_Distance_9(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_9 raw initial value.
 */
#define START_Objects_Signals_B9_Long_Distance_9      0

/**
 * Signal Long_Distance_9 raw minimum value.
 */
#define MIN_Objects_Signals_B9_Long_Distance_9        0

/**
 * Signal Long_Distance_9 raw maximum value.
 */
#define MAX_Objects_Signals_B9_Long_Distance_9        7000

/**
 * Signal Long_Distance_9 raw offset value.
 */
#define OFF_Objects_Signals_B9_Long_Distance_9        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B9_Lateral_Distance_9 Signal Lateral_Distance_9 of Message Objects_Signals_B9 (0x519)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B9
 * @{
 */

/**
 * Signal Lateral_Distance_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B9_Lateral_Distance_9 and \ref GET_Objects_Signals_B9_Lateral_Distance_9 instead.
 */
#define SIG_Objects_Signals_B9_Lateral_Distance_9        0, 0, 22, 12

/**
 * Signal Lateral_Distance_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B9_Lateral_Distance_9 or \ref INIT_Objects_Signals_B9 instead.
 */
#define SETUP_Objects_Signals_B9_Lateral_Distance_9      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B9_Lateral_Distance_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B9_Lateral_Distance_9(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B9_Lateral_Distance_9(buf) \
	SET_Objects_Signals_B9_Lateral_Distance_9(buf, 0)

/**
 * Signal Lateral_Distance_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B9_Lateral_Distance_9(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_9 raw initial value.
 */
#define START_Objects_Signals_B9_Lateral_Distance_9      0

/**
 * Signal Lateral_Distance_9 raw minimum value.
 */
#define MIN_Objects_Signals_B9_Lateral_Distance_9        0

/**
 * Signal Lateral_Distance_9 raw maximum value.
 */
#define MAX_Objects_Signals_B9_Lateral_Distance_9        4094

/**
 * Signal Lateral_Distance_9 raw offset value.
 */
#define OFF_Objects_Signals_B9_Lateral_Distance_9        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B9_Reserved Signal Reserved of Message Objects_Signals_B9 (0x519)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B9
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B9_Reserved and \ref GET_Objects_Signals_B9_Reserved instead.
 */
#define SIG_Objects_Signals_B9_Reserved             0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B9_Reserved or \ref INIT_Objects_Signals_B9 instead.
 */
#define SETUP_Objects_Signals_B9_Reserved           0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B9_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B9_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B9_Reserved(buf) \
	SET_Objects_Signals_B9_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B9_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B9_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B9_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B9_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B9_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C9_Absolute_Speed_9 Signal Absolute_Speed_9 of Message Objects_Signals_C9 (0x51a)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C9
 * @{
 */

/**
 * Signal Absolute_Speed_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C9_Absolute_Speed_9 and \ref GET_Objects_Signals_C9_Absolute_Speed_9 instead.
 */
#define SIG_Objects_Signals_C9_Absolute_Speed_9        0, 0, 0, 12

/**
 * Signal Absolute_Speed_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C9_Absolute_Speed_9 or \ref INIT_Objects_Signals_C9 instead.
 */
#define SETUP_Objects_Signals_C9_Absolute_Speed_9      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C9_Absolute_Speed_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C9_Absolute_Speed_9(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C9_Absolute_Speed_9(buf) \
	SET_Objects_Signals_C9_Absolute_Speed_9(buf, 0)

/**
 * Signal Absolute_Speed_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C9_Absolute_Speed_9(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_9 raw initial value.
 */
#define START_Objects_Signals_C9_Absolute_Speed_9      0

/**
 * Signal Absolute_Speed_9 raw minimum value.
 */
#define MIN_Objects_Signals_C9_Absolute_Speed_9        0

/**
 * Signal Absolute_Speed_9 raw maximum value.
 */
#define MAX_Objects_Signals_C9_Absolute_Speed_9        4000

/**
 * Signal Absolute_Speed_9 raw offset value.
 */
#define OFF_Objects_Signals_C9_Absolute_Speed_9        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C9_OBJ_Motion_Status_9 Signal OBJ_Motion_Status_9 of Message Objects_Signals_C9 (0x51a)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C9_OBJ_Motion_Status_9.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C9
 * @{
 */

/**
 * Signal OBJ_Motion_Status_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C9_OBJ_Motion_Status_9 and \ref GET_Objects_Signals_C9_OBJ_Motion_Status_9 instead.
 */
#define SIG_Objects_Signals_C9_OBJ_Motion_Status_9        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C9_OBJ_Motion_Status_9 or \ref INIT_Objects_Signals_C9 instead.
 */
#define SETUP_Objects_Signals_C9_OBJ_Motion_Status_9      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C9_OBJ_Motion_Status_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C9_OBJ_Motion_Status_9(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C9_OBJ_Motion_Status_9(buf) \
	SET_Objects_Signals_C9_OBJ_Motion_Status_9(buf, 0)

/**
 * Signal OBJ_Motion_Status_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C9_OBJ_Motion_Status_9(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_9 raw initial value.
 */
#define START_Objects_Signals_C9_OBJ_Motion_Status_9      0

/**
 * Signal OBJ_Motion_Status_9 raw minimum value.
 */
#define MIN_Objects_Signals_C9_OBJ_Motion_Status_9        0

/**
 * Signal OBJ_Motion_Status_9 raw maximum value.
 */
#define MAX_Objects_Signals_C9_OBJ_Motion_Status_9        4

/**
 * Signal OBJ_Motion_Status_9 raw offset value.
 */
#define OFF_Objects_Signals_C9_OBJ_Motion_Status_9        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C9_OBJ_Motion_Status_9 Value Table for Signal OBJ_Motion_Status_9 in Message Objects_Signals_C9 (0x51a)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C9_OBJ_Motion_Status_9.
 *
 * @ingroup SIG_Objects_Signals_C9_OBJ_Motion_Status_9
 */

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Status_9 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Status_9
 */
#define Objects_Signals_C9_OBJ_Motion_Status_9_Moving              4

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Status_9 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Status_9
 */
#define Objects_Signals_C9_OBJ_Motion_Status_9_Stopped             3

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Status_9 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Status_9
 */
#define Objects_Signals_C9_OBJ_Motion_Status_9_Stationary          2

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Status_9 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Status_9
 */
#define Objects_Signals_C9_OBJ_Motion_Status_9_Moving_1            1

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Status_9 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Status_9
 */
#define Objects_Signals_C9_OBJ_Motion_Status_9_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C9_OBJ_Motion_Category_9 Signal OBJ_Motion_Category_9 of Message Objects_Signals_C9 (0x51a)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C9_OBJ_Motion_Category_9.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C9
 * @{
 */

/**
 * Signal OBJ_Motion_Category_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C9_OBJ_Motion_Category_9 and \ref GET_Objects_Signals_C9_OBJ_Motion_Category_9 instead.
 */
#define SIG_Objects_Signals_C9_OBJ_Motion_Category_9        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C9_OBJ_Motion_Category_9 or \ref INIT_Objects_Signals_C9 instead.
 */
#define SETUP_Objects_Signals_C9_OBJ_Motion_Category_9      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C9_OBJ_Motion_Category_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C9_OBJ_Motion_Category_9(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C9_OBJ_Motion_Category_9(buf) \
	SET_Objects_Signals_C9_OBJ_Motion_Category_9(buf, 0)

/**
 * Signal OBJ_Motion_Category_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C9_OBJ_Motion_Category_9(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_9 raw initial value.
 */
#define START_Objects_Signals_C9_OBJ_Motion_Category_9      0

/**
 * Signal OBJ_Motion_Category_9 raw minimum value.
 */
#define MIN_Objects_Signals_C9_OBJ_Motion_Category_9        0

/**
 * Signal OBJ_Motion_Category_9 raw maximum value.
 */
#define MAX_Objects_Signals_C9_OBJ_Motion_Category_9        12

/**
 * Signal OBJ_Motion_Category_9 raw offset value.
 */
#define OFF_Objects_Signals_C9_OBJ_Motion_Category_9        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9 Value Table for Signal OBJ_Motion_Category_9 in Message Objects_Signals_C9 (0x51a)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C9_OBJ_Motion_Category_9.
 *
 * @ingroup SIG_Objects_Signals_C9_OBJ_Motion_Category_9
 */

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_MOVING           10

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_RTAP             9

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_LTAP             8

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_CROSSING         7

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_PASSING          1

/**
 * Value table Objects_Signals_C9_OBJ_Motion_Category_9 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C9_OBJ_Motion_Category_9
 */
#define Objects_Signals_C9_OBJ_Motion_Category_9_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C9_Brake_Light_9 Signal Brake_Light_9 of Message Objects_Signals_C9 (0x51a)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C9_Brake_Light_9.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C9
 * @{
 */

/**
 * Signal Brake_Light_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C9_Brake_Light_9 and \ref GET_Objects_Signals_C9_Brake_Light_9 instead.
 */
#define SIG_Objects_Signals_C9_Brake_Light_9        0, 0, 19, 1

/**
 * Signal Brake_Light_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C9_Brake_Light_9 or \ref INIT_Objects_Signals_C9 instead.
 */
#define SETUP_Objects_Signals_C9_Brake_Light_9      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C9_Brake_Light_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C9_Brake_Light_9(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C9_Brake_Light_9(buf) \
	SET_Objects_Signals_C9_Brake_Light_9(buf, 0)

/**
 * Signal Brake_Light_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C9_Brake_Light_9(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_9 raw initial value.
 */
#define START_Objects_Signals_C9_Brake_Light_9      0

/**
 * Signal Brake_Light_9 raw minimum value.
 */
#define MIN_Objects_Signals_C9_Brake_Light_9        0

/**
 * Signal Brake_Light_9 raw maximum value.
 */
#define MAX_Objects_Signals_C9_Brake_Light_9        1

/**
 * Signal Brake_Light_9 raw offset value.
 */
#define OFF_Objects_Signals_C9_Brake_Light_9        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C9_Brake_Light_9 Value Table for Signal Brake_Light_9 in Message Objects_Signals_C9 (0x51a)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C9_Brake_Light_9.
 *
 * @ingroup SIG_Objects_Signals_C9_Brake_Light_9
 */

/**
 * Value table Objects_Signals_C9_Brake_Light_9 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C9_Brake_Light_9
 */
#define Objects_Signals_C9_Brake_Light_9_On                  1

/**
 * Value table Objects_Signals_C9_Brake_Light_9 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C9_Brake_Light_9
 */
#define Objects_Signals_C9_Brake_Light_9_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C9_Turn_Indicator_Right_9 Signal Turn_Indicator_Right_9 of Message Objects_Signals_C9 (0x51a)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C9_Turn_Indicator_Right_9.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C9
 * @{
 */

/**
 * Signal Turn_Indicator_Right_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C9_Turn_Indicator_Right_9 and \ref GET_Objects_Signals_C9_Turn_Indicator_Right_9 instead.
 */
#define SIG_Objects_Signals_C9_Turn_Indicator_Right_9        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C9_Turn_Indicator_Right_9 or \ref INIT_Objects_Signals_C9 instead.
 */
#define SETUP_Objects_Signals_C9_Turn_Indicator_Right_9      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C9_Turn_Indicator_Right_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C9_Turn_Indicator_Right_9(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C9_Turn_Indicator_Right_9(buf) \
	SET_Objects_Signals_C9_Turn_Indicator_Right_9(buf, 0)

/**
 * Signal Turn_Indicator_Right_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C9_Turn_Indicator_Right_9(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_9 raw initial value.
 */
#define START_Objects_Signals_C9_Turn_Indicator_Right_9      0

/**
 * Signal Turn_Indicator_Right_9 raw minimum value.
 */
#define MIN_Objects_Signals_C9_Turn_Indicator_Right_9        0

/**
 * Signal Turn_Indicator_Right_9 raw maximum value.
 */
#define MAX_Objects_Signals_C9_Turn_Indicator_Right_9        1

/**
 * Signal Turn_Indicator_Right_9 raw offset value.
 */
#define OFF_Objects_Signals_C9_Turn_Indicator_Right_9        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C9_Turn_Indicator_Right_9 Value Table for Signal Turn_Indicator_Right_9 in Message Objects_Signals_C9 (0x51a)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C9_Turn_Indicator_Right_9.
 *
 * @ingroup SIG_Objects_Signals_C9_Turn_Indicator_Right_9
 */

/**
 * Value table Objects_Signals_C9_Turn_Indicator_Right_9 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C9_Turn_Indicator_Right_9
 */
#define Objects_Signals_C9_Turn_Indicator_Right_9_On                  1

/**
 * Value table Objects_Signals_C9_Turn_Indicator_Right_9 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C9_Turn_Indicator_Right_9
 */
#define Objects_Signals_C9_Turn_Indicator_Right_9_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C9_Turn_Indicator_Left_9 Signal Turn_Indicator_Left_9 of Message Objects_Signals_C9 (0x51a)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C9_Turn_Indicator_Left_9.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C9
 * @{
 */

/**
 * Signal Turn_Indicator_Left_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C9_Turn_Indicator_Left_9 and \ref GET_Objects_Signals_C9_Turn_Indicator_Left_9 instead.
 */
#define SIG_Objects_Signals_C9_Turn_Indicator_Left_9        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C9_Turn_Indicator_Left_9 or \ref INIT_Objects_Signals_C9 instead.
 */
#define SETUP_Objects_Signals_C9_Turn_Indicator_Left_9      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C9_Turn_Indicator_Left_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C9_Turn_Indicator_Left_9(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C9_Turn_Indicator_Left_9(buf) \
	SET_Objects_Signals_C9_Turn_Indicator_Left_9(buf, 0)

/**
 * Signal Turn_Indicator_Left_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C9_Turn_Indicator_Left_9(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_9 raw initial value.
 */
#define START_Objects_Signals_C9_Turn_Indicator_Left_9      0

/**
 * Signal Turn_Indicator_Left_9 raw minimum value.
 */
#define MIN_Objects_Signals_C9_Turn_Indicator_Left_9        0

/**
 * Signal Turn_Indicator_Left_9 raw maximum value.
 */
#define MAX_Objects_Signals_C9_Turn_Indicator_Left_9        1

/**
 * Signal Turn_Indicator_Left_9 raw offset value.
 */
#define OFF_Objects_Signals_C9_Turn_Indicator_Left_9        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C9_Turn_Indicator_Left_9 Value Table for Signal Turn_Indicator_Left_9 in Message Objects_Signals_C9 (0x51a)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C9_Turn_Indicator_Left_9.
 *
 * @ingroup SIG_Objects_Signals_C9_Turn_Indicator_Left_9
 */

/**
 * Value table Objects_Signals_C9_Turn_Indicator_Left_9 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C9_Turn_Indicator_Left_9
 */
#define Objects_Signals_C9_Turn_Indicator_Left_9_On                  1

/**
 * Value table Objects_Signals_C9_Turn_Indicator_Left_9 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C9_Turn_Indicator_Left_9
 */
#define Objects_Signals_C9_Turn_Indicator_Left_9_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C9_Light_indicator_validity_9 Signal Light_indicator_validity_9 of Message Objects_Signals_C9 (0x51a)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C9_Light_indicator_validity_9.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C9
 * @{
 */

/**
 * Signal Light_indicator_validity_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C9_Light_indicator_validity_9 and \ref GET_Objects_Signals_C9_Light_indicator_validity_9 instead.
 */
#define SIG_Objects_Signals_C9_Light_indicator_validity_9        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C9_Light_indicator_validity_9 or \ref INIT_Objects_Signals_C9 instead.
 */
#define SETUP_Objects_Signals_C9_Light_indicator_validity_9      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C9_Light_indicator_validity_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C9_Light_indicator_validity_9(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C9_Light_indicator_validity_9(buf) \
	SET_Objects_Signals_C9_Light_indicator_validity_9(buf, 0)

/**
 * Signal Light_indicator_validity_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C9_Light_indicator_validity_9(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_9 raw initial value.
 */
#define START_Objects_Signals_C9_Light_indicator_validity_9      0

/**
 * Signal Light_indicator_validity_9 raw minimum value.
 */
#define MIN_Objects_Signals_C9_Light_indicator_validity_9        0

/**
 * Signal Light_indicator_validity_9 raw maximum value.
 */
#define MAX_Objects_Signals_C9_Light_indicator_validity_9        1

/**
 * Signal Light_indicator_validity_9 raw offset value.
 */
#define OFF_Objects_Signals_C9_Light_indicator_validity_9        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C9_Light_indicator_validity_9 Value Table for Signal Light_indicator_validity_9 in Message Objects_Signals_C9 (0x51a)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C9_Light_indicator_validity_9.
 *
 * @ingroup SIG_Objects_Signals_C9_Light_indicator_validity_9
 */

/**
 * Value table Objects_Signals_C9_Light_indicator_validity_9 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C9_Light_indicator_validity_9
 */
#define Objects_Signals_C9_Light_indicator_validity_9_True                1

/**
 * Value table Objects_Signals_C9_Light_indicator_validity_9 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C9_Light_indicator_validity_9
 */
#define Objects_Signals_C9_Light_indicator_validity_9_False               0

/**
 * @defgroup SIG_Objects_Signals_C9_OBJ_Angle_Mid_9 Signal OBJ_Angle_Mid_9 of Message Objects_Signals_C9 (0x51a)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C9
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C9_OBJ_Angle_Mid_9 and \ref GET_Objects_Signals_C9_OBJ_Angle_Mid_9 instead.
 */
#define SIG_Objects_Signals_C9_OBJ_Angle_Mid_9        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C9_OBJ_Angle_Mid_9 or \ref INIT_Objects_Signals_C9 instead.
 */
#define SETUP_Objects_Signals_C9_OBJ_Angle_Mid_9      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C9_OBJ_Angle_Mid_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C9_OBJ_Angle_Mid_9(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C9_OBJ_Angle_Mid_9(buf) \
	SET_Objects_Signals_C9_OBJ_Angle_Mid_9(buf, 0)

/**
 * Signal OBJ_Angle_Mid_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C9_OBJ_Angle_Mid_9(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_9 raw initial value.
 */
#define START_Objects_Signals_C9_OBJ_Angle_Mid_9      0

/**
 * Signal OBJ_Angle_Mid_9 raw minimum value.
 */
#define MIN_Objects_Signals_C9_OBJ_Angle_Mid_9        0

/**
 * Signal OBJ_Angle_Mid_9 raw maximum value.
 */
#define MAX_Objects_Signals_C9_OBJ_Angle_Mid_9        15710

/**
 * Signal OBJ_Angle_Mid_9 raw offset value.
 */
#define OFF_Objects_Signals_C9_OBJ_Angle_Mid_9        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C9_OBJ_Angle_Rate_9 Signal OBJ_Angle_Rate_9 of Message Objects_Signals_C9 (0x51a)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C9
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C9_OBJ_Angle_Rate_9 and \ref GET_Objects_Signals_C9_OBJ_Angle_Rate_9 instead.
 */
#define SIG_Objects_Signals_C9_OBJ_Angle_Rate_9        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C9_OBJ_Angle_Rate_9 or \ref INIT_Objects_Signals_C9 instead.
 */
#define SETUP_Objects_Signals_C9_OBJ_Angle_Rate_9      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C9_OBJ_Angle_Rate_9(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C9_OBJ_Angle_Rate_9(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C9_OBJ_Angle_Rate_9(buf) \
	SET_Objects_Signals_C9_OBJ_Angle_Rate_9(buf, 0)

/**
 * Signal OBJ_Angle_Rate_9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C9_OBJ_Angle_Rate_9(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_9 raw initial value.
 */
#define START_Objects_Signals_C9_OBJ_Angle_Rate_9      0

/**
 * Signal OBJ_Angle_Rate_9 raw minimum value.
 */
#define MIN_Objects_Signals_C9_OBJ_Angle_Rate_9        0

/**
 * Signal OBJ_Angle_Rate_9 raw maximum value.
 */
#define MAX_Objects_Signals_C9_OBJ_Angle_Rate_9        2233

/**
 * Signal OBJ_Angle_Rate_9 raw offset value.
 */
#define OFF_Objects_Signals_C9_OBJ_Angle_Rate_9        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C9_Reserved Signal Reserved of Message Objects_Signals_C9 (0x51a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C9
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C9_Reserved and \ref GET_Objects_Signals_C9_Reserved instead.
 */
#define SIG_Objects_Signals_C9_Reserved             0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C9_Reserved or \ref INIT_Objects_Signals_C9 instead.
 */
#define SETUP_Objects_Signals_C9_Reserved           0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C9_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C9_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C9_Reserved(buf) \
	SET_Objects_Signals_C9_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C9_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C9_Reserved           0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C9_Reserved             0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C9_Reserved             0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C9_Reserved             0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A10_Obj_ID_10 Signal Obj_ID_10 of Message Objects_Signals_A10 (0x51b)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A10
 * @{
 */

/**
 * Signal Obj_ID_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A10_Obj_ID_10 and \ref GET_Objects_Signals_A10_Obj_ID_10 instead.
 */
#define SIG_Objects_Signals_A10_Obj_ID_10           0, 0, 0, 7

/**
 * Signal Obj_ID_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A10_Obj_ID_10 or \ref INIT_Objects_Signals_A10 instead.
 */
#define SETUP_Objects_Signals_A10_Obj_ID_10         0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A10_Obj_ID_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A10_Obj_ID_10(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A10_Obj_ID_10(buf) \
	SET_Objects_Signals_A10_Obj_ID_10(buf, 0)

/**
 * Signal Obj_ID_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A10_Obj_ID_10(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_10 raw initial value.
 */
#define START_Objects_Signals_A10_Obj_ID_10         0

/**
 * Signal Obj_ID_10 raw minimum value.
 */
#define MIN_Objects_Signals_A10_Obj_ID_10           0

/**
 * Signal Obj_ID_10 raw maximum value.
 */
#define MAX_Objects_Signals_A10_Obj_ID_10           127

/**
 * Signal Obj_ID_10 raw offset value.
 */
#define OFF_Objects_Signals_A10_Obj_ID_10           0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A10_Object_Class_10 Signal Object_Class_10 of Message Objects_Signals_A10 (0x51b)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A10_Object_Class_10.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A10
 * @{
 */

/**
 * Signal Object_Class_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A10_Object_Class_10 and \ref GET_Objects_Signals_A10_Object_Class_10 instead.
 */
#define SIG_Objects_Signals_A10_Object_Class_10        0, 0, 7, 3

/**
 * Signal Object_Class_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A10_Object_Class_10 or \ref INIT_Objects_Signals_A10 instead.
 */
#define SETUP_Objects_Signals_A10_Object_Class_10      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A10_Object_Class_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A10_Object_Class_10(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A10_Object_Class_10(buf) \
	SET_Objects_Signals_A10_Object_Class_10(buf, 0)

/**
 * Signal Object_Class_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A10_Object_Class_10(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_10 raw initial value.
 */
#define START_Objects_Signals_A10_Object_Class_10      0

/**
 * Signal Object_Class_10 raw minimum value.
 */
#define MIN_Objects_Signals_A10_Object_Class_10        0

/**
 * Signal Object_Class_10 raw maximum value.
 */
#define MAX_Objects_Signals_A10_Object_Class_10        7

/**
 * Signal Object_Class_10 raw offset value.
 */
#define OFF_Objects_Signals_A10_Object_Class_10        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A10_Object_Class_10 Value Table for Signal Object_Class_10 in Message Objects_Signals_A10 (0x51b)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A10_Object_Class_10.
 *
 * @ingroup SIG_Objects_Signals_A10_Object_Class_10
 */

/**
 * Value table Objects_Signals_A10_Object_Class_10 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A10_Object_Class_10
 */
#define Objects_Signals_A10_Object_Class_10_uncertain_vcl       7

/**
 * Value table Objects_Signals_A10_Object_Class_10 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A10_Object_Class_10
 */
#define Objects_Signals_A10_Object_Class_10_animal              6

/**
 * Value table Objects_Signals_A10_Object_Class_10 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A10_Object_Class_10
 */
#define Objects_Signals_A10_Object_Class_10_general_object      5

/**
 * Value table Objects_Signals_A10_Object_Class_10 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A10_Object_Class_10
 */
#define Objects_Signals_A10_Object_Class_10_pedestrian          4

/**
 * Value table Objects_Signals_A10_Object_Class_10 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A10_Object_Class_10
 */
#define Objects_Signals_A10_Object_Class_10_bicycle             3

/**
 * Value table Objects_Signals_A10_Object_Class_10 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A10_Object_Class_10
 */
#define Objects_Signals_A10_Object_Class_10_bike                2

/**
 * Value table Objects_Signals_A10_Object_Class_10 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A10_Object_Class_10
 */
#define Objects_Signals_A10_Object_Class_10_truck               1

/**
 * Value table Objects_Signals_A10_Object_Class_10 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A10_Object_Class_10
 */
#define Objects_Signals_A10_Object_Class_10_car                 0

/**
 * @defgroup SIG_Objects_Signals_A10_OBJ_Width_10 Signal OBJ_Width_10 of Message Objects_Signals_A10 (0x51b)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A10
 * @{
 */

/**
 * Signal OBJ_Width_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A10_OBJ_Width_10 and \ref GET_Objects_Signals_A10_OBJ_Width_10 instead.
 */
#define SIG_Objects_Signals_A10_OBJ_Width_10        0, 0, 10, 7

/**
 * Signal OBJ_Width_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A10_OBJ_Width_10 or \ref INIT_Objects_Signals_A10 instead.
 */
#define SETUP_Objects_Signals_A10_OBJ_Width_10      0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A10_OBJ_Width_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A10_OBJ_Width_10(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A10_OBJ_Width_10(buf) \
	SET_Objects_Signals_A10_OBJ_Width_10(buf, 0)

/**
 * Signal OBJ_Width_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A10_OBJ_Width_10(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_10 raw initial value.
 */
#define START_Objects_Signals_A10_OBJ_Width_10      0

/**
 * Signal OBJ_Width_10 raw minimum value.
 */
#define MIN_Objects_Signals_A10_OBJ_Width_10        0

/**
 * Signal OBJ_Width_10 raw maximum value.
 */
#define MAX_Objects_Signals_A10_OBJ_Width_10        127

/**
 * Signal OBJ_Width_10 raw offset value.
 */
#define OFF_Objects_Signals_A10_OBJ_Width_10        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A10_OBJ_Length_10 Signal OBJ_Length_10 of Message Objects_Signals_A10 (0x51b)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A10
 * @{
 */

/**
 * Signal OBJ_Length_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A10_OBJ_Length_10 and \ref GET_Objects_Signals_A10_OBJ_Length_10 instead.
 */
#define SIG_Objects_Signals_A10_OBJ_Length_10        0, 0, 17, 9

/**
 * Signal OBJ_Length_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A10_OBJ_Length_10 or \ref INIT_Objects_Signals_A10 instead.
 */
#define SETUP_Objects_Signals_A10_OBJ_Length_10      0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A10_OBJ_Length_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A10_OBJ_Length_10(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A10_OBJ_Length_10(buf) \
	SET_Objects_Signals_A10_OBJ_Length_10(buf, 0)

/**
 * Signal OBJ_Length_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A10_OBJ_Length_10(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_10 raw initial value.
 */
#define START_Objects_Signals_A10_OBJ_Length_10      0

/**
 * Signal OBJ_Length_10 raw minimum value.
 */
#define MIN_Objects_Signals_A10_OBJ_Length_10        0

/**
 * Signal OBJ_Length_10 raw maximum value.
 */
#define MAX_Objects_Signals_A10_OBJ_Length_10        510

/**
 * Signal OBJ_Length_10 raw offset value.
 */
#define OFF_Objects_Signals_A10_OBJ_Length_10        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A10_Relative_Long_Velocity_10 Signal Relative_Long_Velocity_10 of Message Objects_Signals_A10 (0x51b)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A10
 * @{
 */

/**
 * Signal Relative_Long_Velocity_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A10_Relative_Long_Velocity_10 and \ref GET_Objects_Signals_A10_Relative_Long_Velocity_10 instead.
 */
#define SIG_Objects_Signals_A10_Relative_Long_Velocity_10        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A10_Relative_Long_Velocity_10 or \ref INIT_Objects_Signals_A10 instead.
 */
#define SETUP_Objects_Signals_A10_Relative_Long_Velocity_10      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A10_Relative_Long_Velocity_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A10_Relative_Long_Velocity_10(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A10_Relative_Long_Velocity_10(buf) \
	SET_Objects_Signals_A10_Relative_Long_Velocity_10(buf, 0)

/**
 * Signal Relative_Long_Velocity_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A10_Relative_Long_Velocity_10(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_10 raw initial value.
 */
#define START_Objects_Signals_A10_Relative_Long_Velocity_10      0

/**
 * Signal Relative_Long_Velocity_10 raw minimum value.
 */
#define MIN_Objects_Signals_A10_Relative_Long_Velocity_10        0

/**
 * Signal Relative_Long_Velocity_10 raw maximum value.
 */
#define MAX_Objects_Signals_A10_Relative_Long_Velocity_10        5000

/**
 * Signal Relative_Long_Velocity_10 raw offset value.
 */
#define OFF_Objects_Signals_A10_Relative_Long_Velocity_10        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A10_OBJ_Lane_Assignment_10 Signal OBJ_Lane_Assignment_10 of Message Objects_Signals_A10 (0x51b)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A10_OBJ_Lane_Assignment_10.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A10
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A10_OBJ_Lane_Assignment_10 and \ref GET_Objects_Signals_A10_OBJ_Lane_Assignment_10 instead.
 */
#define SIG_Objects_Signals_A10_OBJ_Lane_Assignment_10        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A10_OBJ_Lane_Assignment_10 or \ref INIT_Objects_Signals_A10 instead.
 */
#define SETUP_Objects_Signals_A10_OBJ_Lane_Assignment_10      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A10_OBJ_Lane_Assignment_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A10_OBJ_Lane_Assignment_10(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A10_OBJ_Lane_Assignment_10(buf) \
	SET_Objects_Signals_A10_OBJ_Lane_Assignment_10(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A10_OBJ_Lane_Assignment_10(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_10 raw initial value.
 */
#define START_Objects_Signals_A10_OBJ_Lane_Assignment_10      0

/**
 * Signal OBJ_Lane_Assignment_10 raw minimum value.
 */
#define MIN_Objects_Signals_A10_OBJ_Lane_Assignment_10        0

/**
 * Signal OBJ_Lane_Assignment_10 raw maximum value.
 */
#define MAX_Objects_Signals_A10_OBJ_Lane_Assignment_10        5

/**
 * Signal OBJ_Lane_Assignment_10 raw offset value.
 */
#define OFF_Objects_Signals_A10_OBJ_Lane_Assignment_10        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A10_OBJ_Lane_Assignment_10 Value Table for Signal OBJ_Lane_Assignment_10 in Message Objects_Signals_A10 (0x51b)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A10_OBJ_Lane_Assignment_10.
 *
 * @ingroup SIG_Objects_Signals_A10_OBJ_Lane_Assignment_10
 */

/**
 * Value table Objects_Signals_A10_OBJ_Lane_Assignment_10 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A10_OBJ_Lane_Assignment_10
 */
#define Objects_Signals_A10_OBJ_Lane_Assignment_10_Not                 5

/**
 * Value table Objects_Signals_A10_OBJ_Lane_Assignment_10 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A10_OBJ_Lane_Assignment_10
 */
#define Objects_Signals_A10_OBJ_Lane_Assignment_10_Next                4

/**
 * Value table Objects_Signals_A10_OBJ_Lane_Assignment_10 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A10_OBJ_Lane_Assignment_10
 */
#define Objects_Signals_A10_OBJ_Lane_Assignment_10_Right               3

/**
 * Value table Objects_Signals_A10_OBJ_Lane_Assignment_10 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A10_OBJ_Lane_Assignment_10
 */
#define Objects_Signals_A10_OBJ_Lane_Assignment_10_Ego                 2

/**
 * Value table Objects_Signals_A10_OBJ_Lane_Assignment_10 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A10_OBJ_Lane_Assignment_10
 */
#define Objects_Signals_A10_OBJ_Lane_Assignment_10_Left                1

/**
 * Value table Objects_Signals_A10_OBJ_Lane_Assignment_10 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A10_OBJ_Lane_Assignment_10
 */
#define Objects_Signals_A10_OBJ_Lane_Assignment_10_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A10_Relative_Lat_Velocity_10 Signal Relative_Lat_Velocity_10 of Message Objects_Signals_A10 (0x51b)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A10
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A10_Relative_Lat_Velocity_10 and \ref GET_Objects_Signals_A10_Relative_Lat_Velocity_10 instead.
 */
#define SIG_Objects_Signals_A10_Relative_Lat_Velocity_10        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A10_Relative_Lat_Velocity_10 or \ref INIT_Objects_Signals_A10 instead.
 */
#define SETUP_Objects_Signals_A10_Relative_Lat_Velocity_10      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A10_Relative_Lat_Velocity_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A10_Relative_Lat_Velocity_10(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A10_Relative_Lat_Velocity_10(buf) \
	SET_Objects_Signals_A10_Relative_Lat_Velocity_10(buf, 0)

/**
 * Signal Relative_Lat_Velocity_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A10_Relative_Lat_Velocity_10(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_10 raw initial value.
 */
#define START_Objects_Signals_A10_Relative_Lat_Velocity_10      0

/**
 * Signal Relative_Lat_Velocity_10 raw minimum value.
 */
#define MIN_Objects_Signals_A10_Relative_Lat_Velocity_10        0

/**
 * Signal Relative_Lat_Velocity_10 raw maximum value.
 */
#define MAX_Objects_Signals_A10_Relative_Lat_Velocity_10        2000

/**
 * Signal Relative_Lat_Velocity_10 raw offset value.
 */
#define OFF_Objects_Signals_A10_Relative_Lat_Velocity_10        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A10_Reserved Signal Reserved of Message Objects_Signals_A10 (0x51b)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A10
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A10_Reserved and \ref GET_Objects_Signals_A10_Reserved instead.
 */
#define SIG_Objects_Signals_A10_Reserved            0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A10_Reserved or \ref INIT_Objects_Signals_A10 instead.
 */
#define SETUP_Objects_Signals_A10_Reserved          0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A10_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A10_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A10_Reserved(buf) \
	SET_Objects_Signals_A10_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A10_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A10_Reserved          0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A10_Reserved            0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A10_Reserved            0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A10_Reserved            0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B10_Absolute_Long_Acc_10 Signal Absolute_Long_Acc_10 of Message Objects_Signals_B10 (0x51c)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B10
 * @{
 */

/**
 * Signal Absolute_Long_Acc_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B10_Absolute_Long_Acc_10 and \ref GET_Objects_Signals_B10_Absolute_Long_Acc_10 instead.
 */
#define SIG_Objects_Signals_B10_Absolute_Long_Acc_10        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B10_Absolute_Long_Acc_10 or \ref INIT_Objects_Signals_B10 instead.
 */
#define SETUP_Objects_Signals_B10_Absolute_Long_Acc_10      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B10_Absolute_Long_Acc_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B10_Absolute_Long_Acc_10(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B10_Absolute_Long_Acc_10(buf) \
	SET_Objects_Signals_B10_Absolute_Long_Acc_10(buf, 0)

/**
 * Signal Absolute_Long_Acc_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B10_Absolute_Long_Acc_10(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_10 raw initial value.
 */
#define START_Objects_Signals_B10_Absolute_Long_Acc_10      0

/**
 * Signal Absolute_Long_Acc_10 raw minimum value.
 */
#define MIN_Objects_Signals_B10_Absolute_Long_Acc_10        0

/**
 * Signal Absolute_Long_Acc_10 raw maximum value.
 */
#define MAX_Objects_Signals_B10_Absolute_Long_Acc_10        511

/**
 * Signal Absolute_Long_Acc_10 raw offset value.
 */
#define OFF_Objects_Signals_B10_Absolute_Long_Acc_10        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B10_Long_Distance_10 Signal Long_Distance_10 of Message Objects_Signals_B10 (0x51c)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B10
 * @{
 */

/**
 * Signal Long_Distance_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B10_Long_Distance_10 and \ref GET_Objects_Signals_B10_Long_Distance_10 instead.
 */
#define SIG_Objects_Signals_B10_Long_Distance_10        0, 0, 9, 13

/**
 * Signal Long_Distance_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B10_Long_Distance_10 or \ref INIT_Objects_Signals_B10 instead.
 */
#define SETUP_Objects_Signals_B10_Long_Distance_10      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B10_Long_Distance_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B10_Long_Distance_10(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B10_Long_Distance_10(buf) \
	SET_Objects_Signals_B10_Long_Distance_10(buf, 0)

/**
 * Signal Long_Distance_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B10_Long_Distance_10(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_10 raw initial value.
 */
#define START_Objects_Signals_B10_Long_Distance_10      0

/**
 * Signal Long_Distance_10 raw minimum value.
 */
#define MIN_Objects_Signals_B10_Long_Distance_10        0

/**
 * Signal Long_Distance_10 raw maximum value.
 */
#define MAX_Objects_Signals_B10_Long_Distance_10        7000

/**
 * Signal Long_Distance_10 raw offset value.
 */
#define OFF_Objects_Signals_B10_Long_Distance_10        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B10_Lateral_Distance_10 Signal Lateral_Distance_10 of Message Objects_Signals_B10 (0x51c)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B10
 * @{
 */

/**
 * Signal Lateral_Distance_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B10_Lateral_Distance_10 and \ref GET_Objects_Signals_B10_Lateral_Distance_10 instead.
 */
#define SIG_Objects_Signals_B10_Lateral_Distance_10        0, 0, 22, 12

/**
 * Signal Lateral_Distance_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B10_Lateral_Distance_10 or \ref INIT_Objects_Signals_B10 instead.
 */
#define SETUP_Objects_Signals_B10_Lateral_Distance_10      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B10_Lateral_Distance_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B10_Lateral_Distance_10(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B10_Lateral_Distance_10(buf) \
	SET_Objects_Signals_B10_Lateral_Distance_10(buf, 0)

/**
 * Signal Lateral_Distance_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B10_Lateral_Distance_10(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_10 raw initial value.
 */
#define START_Objects_Signals_B10_Lateral_Distance_10      0

/**
 * Signal Lateral_Distance_10 raw minimum value.
 */
#define MIN_Objects_Signals_B10_Lateral_Distance_10        0

/**
 * Signal Lateral_Distance_10 raw maximum value.
 */
#define MAX_Objects_Signals_B10_Lateral_Distance_10        4094

/**
 * Signal Lateral_Distance_10 raw offset value.
 */
#define OFF_Objects_Signals_B10_Lateral_Distance_10        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B10_Reserved Signal Reserved of Message Objects_Signals_B10 (0x51c)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B10
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B10_Reserved and \ref GET_Objects_Signals_B10_Reserved instead.
 */
#define SIG_Objects_Signals_B10_Reserved            0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B10_Reserved or \ref INIT_Objects_Signals_B10 instead.
 */
#define SETUP_Objects_Signals_B10_Reserved          0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B10_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B10_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B10_Reserved(buf) \
	SET_Objects_Signals_B10_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B10_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B10_Reserved          0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B10_Reserved            0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B10_Reserved            0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B10_Reserved            0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C10_Absolute_Speed_10 Signal Absolute_Speed_10 of Message Objects_Signals_C10 (0x51d)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C10
 * @{
 */

/**
 * Signal Absolute_Speed_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C10_Absolute_Speed_10 and \ref GET_Objects_Signals_C10_Absolute_Speed_10 instead.
 */
#define SIG_Objects_Signals_C10_Absolute_Speed_10        0, 0, 0, 12

/**
 * Signal Absolute_Speed_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C10_Absolute_Speed_10 or \ref INIT_Objects_Signals_C10 instead.
 */
#define SETUP_Objects_Signals_C10_Absolute_Speed_10      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C10_Absolute_Speed_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C10_Absolute_Speed_10(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C10_Absolute_Speed_10(buf) \
	SET_Objects_Signals_C10_Absolute_Speed_10(buf, 0)

/**
 * Signal Absolute_Speed_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C10_Absolute_Speed_10(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_10 raw initial value.
 */
#define START_Objects_Signals_C10_Absolute_Speed_10      0

/**
 * Signal Absolute_Speed_10 raw minimum value.
 */
#define MIN_Objects_Signals_C10_Absolute_Speed_10        0

/**
 * Signal Absolute_Speed_10 raw maximum value.
 */
#define MAX_Objects_Signals_C10_Absolute_Speed_10        4000

/**
 * Signal Absolute_Speed_10 raw offset value.
 */
#define OFF_Objects_Signals_C10_Absolute_Speed_10        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C10_OBJ_Motion_Status_10 Signal OBJ_Motion_Status_10 of Message Objects_Signals_C10 (0x51d)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C10_OBJ_Motion_Status_10.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C10
 * @{
 */

/**
 * Signal OBJ_Motion_Status_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C10_OBJ_Motion_Status_10 and \ref GET_Objects_Signals_C10_OBJ_Motion_Status_10 instead.
 */
#define SIG_Objects_Signals_C10_OBJ_Motion_Status_10        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C10_OBJ_Motion_Status_10 or \ref INIT_Objects_Signals_C10 instead.
 */
#define SETUP_Objects_Signals_C10_OBJ_Motion_Status_10      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C10_OBJ_Motion_Status_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C10_OBJ_Motion_Status_10(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C10_OBJ_Motion_Status_10(buf) \
	SET_Objects_Signals_C10_OBJ_Motion_Status_10(buf, 0)

/**
 * Signal OBJ_Motion_Status_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C10_OBJ_Motion_Status_10(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_10 raw initial value.
 */
#define START_Objects_Signals_C10_OBJ_Motion_Status_10      0

/**
 * Signal OBJ_Motion_Status_10 raw minimum value.
 */
#define MIN_Objects_Signals_C10_OBJ_Motion_Status_10        0

/**
 * Signal OBJ_Motion_Status_10 raw maximum value.
 */
#define MAX_Objects_Signals_C10_OBJ_Motion_Status_10        4

/**
 * Signal OBJ_Motion_Status_10 raw offset value.
 */
#define OFF_Objects_Signals_C10_OBJ_Motion_Status_10        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C10_OBJ_Motion_Status_10 Value Table for Signal OBJ_Motion_Status_10 in Message Objects_Signals_C10 (0x51d)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C10_OBJ_Motion_Status_10.
 *
 * @ingroup SIG_Objects_Signals_C10_OBJ_Motion_Status_10
 */

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Status_10 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Status_10
 */
#define Objects_Signals_C10_OBJ_Motion_Status_10_Moving              4

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Status_10 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Status_10
 */
#define Objects_Signals_C10_OBJ_Motion_Status_10_Stopped             3

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Status_10 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Status_10
 */
#define Objects_Signals_C10_OBJ_Motion_Status_10_Stationary          2

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Status_10 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Status_10
 */
#define Objects_Signals_C10_OBJ_Motion_Status_10_Moving_1            1

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Status_10 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Status_10
 */
#define Objects_Signals_C10_OBJ_Motion_Status_10_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C10_OBJ_Motion_Category_10 Signal OBJ_Motion_Category_10 of Message Objects_Signals_C10 (0x51d)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C10_OBJ_Motion_Category_10.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C10
 * @{
 */

/**
 * Signal OBJ_Motion_Category_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C10_OBJ_Motion_Category_10 and \ref GET_Objects_Signals_C10_OBJ_Motion_Category_10 instead.
 */
#define SIG_Objects_Signals_C10_OBJ_Motion_Category_10        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C10_OBJ_Motion_Category_10 or \ref INIT_Objects_Signals_C10 instead.
 */
#define SETUP_Objects_Signals_C10_OBJ_Motion_Category_10      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C10_OBJ_Motion_Category_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C10_OBJ_Motion_Category_10(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C10_OBJ_Motion_Category_10(buf) \
	SET_Objects_Signals_C10_OBJ_Motion_Category_10(buf, 0)

/**
 * Signal OBJ_Motion_Category_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C10_OBJ_Motion_Category_10(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_10 raw initial value.
 */
#define START_Objects_Signals_C10_OBJ_Motion_Category_10      0

/**
 * Signal OBJ_Motion_Category_10 raw minimum value.
 */
#define MIN_Objects_Signals_C10_OBJ_Motion_Category_10        0

/**
 * Signal OBJ_Motion_Category_10 raw maximum value.
 */
#define MAX_Objects_Signals_C10_OBJ_Motion_Category_10        12

/**
 * Signal OBJ_Motion_Category_10 raw offset value.
 */
#define OFF_Objects_Signals_C10_OBJ_Motion_Category_10        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10 Value Table for Signal OBJ_Motion_Category_10 in Message Objects_Signals_C10 (0x51d)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C10_OBJ_Motion_Category_10.
 *
 * @ingroup SIG_Objects_Signals_C10_OBJ_Motion_Category_10
 */

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_MOVING           10

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_RTAP             9

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_LTAP             8

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_CROSSING         7

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_PASSING          1

/**
 * Value table Objects_Signals_C10_OBJ_Motion_Category_10 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C10_OBJ_Motion_Category_10
 */
#define Objects_Signals_C10_OBJ_Motion_Category_10_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C10_Brake_Light_10 Signal Brake_Light_10 of Message Objects_Signals_C10 (0x51d)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C10_Brake_Light_10.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C10
 * @{
 */

/**
 * Signal Brake_Light_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C10_Brake_Light_10 and \ref GET_Objects_Signals_C10_Brake_Light_10 instead.
 */
#define SIG_Objects_Signals_C10_Brake_Light_10        0, 0, 19, 1

/**
 * Signal Brake_Light_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C10_Brake_Light_10 or \ref INIT_Objects_Signals_C10 instead.
 */
#define SETUP_Objects_Signals_C10_Brake_Light_10      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C10_Brake_Light_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C10_Brake_Light_10(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C10_Brake_Light_10(buf) \
	SET_Objects_Signals_C10_Brake_Light_10(buf, 0)

/**
 * Signal Brake_Light_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C10_Brake_Light_10(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_10 raw initial value.
 */
#define START_Objects_Signals_C10_Brake_Light_10      0

/**
 * Signal Brake_Light_10 raw minimum value.
 */
#define MIN_Objects_Signals_C10_Brake_Light_10        0

/**
 * Signal Brake_Light_10 raw maximum value.
 */
#define MAX_Objects_Signals_C10_Brake_Light_10        1

/**
 * Signal Brake_Light_10 raw offset value.
 */
#define OFF_Objects_Signals_C10_Brake_Light_10        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C10_Brake_Light_10 Value Table for Signal Brake_Light_10 in Message Objects_Signals_C10 (0x51d)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C10_Brake_Light_10.
 *
 * @ingroup SIG_Objects_Signals_C10_Brake_Light_10
 */

/**
 * Value table Objects_Signals_C10_Brake_Light_10 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C10_Brake_Light_10
 */
#define Objects_Signals_C10_Brake_Light_10_On                  1

/**
 * Value table Objects_Signals_C10_Brake_Light_10 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C10_Brake_Light_10
 */
#define Objects_Signals_C10_Brake_Light_10_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C10_Turn_Indicator_Right_10 Signal Turn_Indicator_Right_10 of Message Objects_Signals_C10 (0x51d)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C10_Turn_Indicator_Right_10.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C10
 * @{
 */

/**
 * Signal Turn_Indicator_Right_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C10_Turn_Indicator_Right_10 and \ref GET_Objects_Signals_C10_Turn_Indicator_Right_10 instead.
 */
#define SIG_Objects_Signals_C10_Turn_Indicator_Right_10        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C10_Turn_Indicator_Right_10 or \ref INIT_Objects_Signals_C10 instead.
 */
#define SETUP_Objects_Signals_C10_Turn_Indicator_Right_10      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C10_Turn_Indicator_Right_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C10_Turn_Indicator_Right_10(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C10_Turn_Indicator_Right_10(buf) \
	SET_Objects_Signals_C10_Turn_Indicator_Right_10(buf, 0)

/**
 * Signal Turn_Indicator_Right_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C10_Turn_Indicator_Right_10(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_10 raw initial value.
 */
#define START_Objects_Signals_C10_Turn_Indicator_Right_10      0

/**
 * Signal Turn_Indicator_Right_10 raw minimum value.
 */
#define MIN_Objects_Signals_C10_Turn_Indicator_Right_10        0

/**
 * Signal Turn_Indicator_Right_10 raw maximum value.
 */
#define MAX_Objects_Signals_C10_Turn_Indicator_Right_10        1

/**
 * Signal Turn_Indicator_Right_10 raw offset value.
 */
#define OFF_Objects_Signals_C10_Turn_Indicator_Right_10        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C10_Turn_Indicator_Right_10 Value Table for Signal Turn_Indicator_Right_10 in Message Objects_Signals_C10 (0x51d)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C10_Turn_Indicator_Right_10.
 *
 * @ingroup SIG_Objects_Signals_C10_Turn_Indicator_Right_10
 */

/**
 * Value table Objects_Signals_C10_Turn_Indicator_Right_10 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C10_Turn_Indicator_Right_10
 */
#define Objects_Signals_C10_Turn_Indicator_Right_10_On                  1

/**
 * Value table Objects_Signals_C10_Turn_Indicator_Right_10 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C10_Turn_Indicator_Right_10
 */
#define Objects_Signals_C10_Turn_Indicator_Right_10_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C10_Turn_Indicator_Left_10 Signal Turn_Indicator_Left_10 of Message Objects_Signals_C10 (0x51d)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C10_Turn_Indicator_Left_10.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C10
 * @{
 */

/**
 * Signal Turn_Indicator_Left_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C10_Turn_Indicator_Left_10 and \ref GET_Objects_Signals_C10_Turn_Indicator_Left_10 instead.
 */
#define SIG_Objects_Signals_C10_Turn_Indicator_Left_10        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C10_Turn_Indicator_Left_10 or \ref INIT_Objects_Signals_C10 instead.
 */
#define SETUP_Objects_Signals_C10_Turn_Indicator_Left_10      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C10_Turn_Indicator_Left_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C10_Turn_Indicator_Left_10(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C10_Turn_Indicator_Left_10(buf) \
	SET_Objects_Signals_C10_Turn_Indicator_Left_10(buf, 0)

/**
 * Signal Turn_Indicator_Left_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C10_Turn_Indicator_Left_10(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_10 raw initial value.
 */
#define START_Objects_Signals_C10_Turn_Indicator_Left_10      0

/**
 * Signal Turn_Indicator_Left_10 raw minimum value.
 */
#define MIN_Objects_Signals_C10_Turn_Indicator_Left_10        0

/**
 * Signal Turn_Indicator_Left_10 raw maximum value.
 */
#define MAX_Objects_Signals_C10_Turn_Indicator_Left_10        1

/**
 * Signal Turn_Indicator_Left_10 raw offset value.
 */
#define OFF_Objects_Signals_C10_Turn_Indicator_Left_10        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C10_Turn_Indicator_Left_10 Value Table for Signal Turn_Indicator_Left_10 in Message Objects_Signals_C10 (0x51d)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C10_Turn_Indicator_Left_10.
 *
 * @ingroup SIG_Objects_Signals_C10_Turn_Indicator_Left_10
 */

/**
 * Value table Objects_Signals_C10_Turn_Indicator_Left_10 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C10_Turn_Indicator_Left_10
 */
#define Objects_Signals_C10_Turn_Indicator_Left_10_On                  1

/**
 * Value table Objects_Signals_C10_Turn_Indicator_Left_10 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C10_Turn_Indicator_Left_10
 */
#define Objects_Signals_C10_Turn_Indicator_Left_10_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C10_Light_indicator_validity_10 Signal Light_indicator_validity_10 of Message Objects_Signals_C10 (0x51d)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C10_Light_indicator_validity_10.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C10
 * @{
 */

/**
 * Signal Light_indicator_validity_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C10_Light_indicator_validity_10 and \ref GET_Objects_Signals_C10_Light_indicator_validity_10 instead.
 */
#define SIG_Objects_Signals_C10_Light_indicator_validity_10        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C10_Light_indicator_validity_10 or \ref INIT_Objects_Signals_C10 instead.
 */
#define SETUP_Objects_Signals_C10_Light_indicator_validity_10      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C10_Light_indicator_validity_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C10_Light_indicator_validity_10(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C10_Light_indicator_validity_10(buf) \
	SET_Objects_Signals_C10_Light_indicator_validity_10(buf, 0)

/**
 * Signal Light_indicator_validity_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C10_Light_indicator_validity_10(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_10 raw initial value.
 */
#define START_Objects_Signals_C10_Light_indicator_validity_10      0

/**
 * Signal Light_indicator_validity_10 raw minimum value.
 */
#define MIN_Objects_Signals_C10_Light_indicator_validity_10        0

/**
 * Signal Light_indicator_validity_10 raw maximum value.
 */
#define MAX_Objects_Signals_C10_Light_indicator_validity_10        1

/**
 * Signal Light_indicator_validity_10 raw offset value.
 */
#define OFF_Objects_Signals_C10_Light_indicator_validity_10        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C10_Light_indicator_validity_10 Value Table for Signal Light_indicator_validity_10 in Message Objects_Signals_C10 (0x51d)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C10_Light_indicator_validity_10.
 *
 * @ingroup SIG_Objects_Signals_C10_Light_indicator_validity_10
 */

/**
 * Value table Objects_Signals_C10_Light_indicator_validity_10 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C10_Light_indicator_validity_10
 */
#define Objects_Signals_C10_Light_indicator_validity_10_True                1

/**
 * Value table Objects_Signals_C10_Light_indicator_validity_10 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C10_Light_indicator_validity_10
 */
#define Objects_Signals_C10_Light_indicator_validity_10_False               0

/**
 * @defgroup SIG_Objects_Signals_C10_OBJ_Angle_Mid_10 Signal OBJ_Angle_Mid_10 of Message Objects_Signals_C10 (0x51d)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C10
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C10_OBJ_Angle_Mid_10 and \ref GET_Objects_Signals_C10_OBJ_Angle_Mid_10 instead.
 */
#define SIG_Objects_Signals_C10_OBJ_Angle_Mid_10        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C10_OBJ_Angle_Mid_10 or \ref INIT_Objects_Signals_C10 instead.
 */
#define SETUP_Objects_Signals_C10_OBJ_Angle_Mid_10      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C10_OBJ_Angle_Mid_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C10_OBJ_Angle_Mid_10(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C10_OBJ_Angle_Mid_10(buf) \
	SET_Objects_Signals_C10_OBJ_Angle_Mid_10(buf, 0)

/**
 * Signal OBJ_Angle_Mid_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C10_OBJ_Angle_Mid_10(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_10 raw initial value.
 */
#define START_Objects_Signals_C10_OBJ_Angle_Mid_10      0

/**
 * Signal OBJ_Angle_Mid_10 raw minimum value.
 */
#define MIN_Objects_Signals_C10_OBJ_Angle_Mid_10        0

/**
 * Signal OBJ_Angle_Mid_10 raw maximum value.
 */
#define MAX_Objects_Signals_C10_OBJ_Angle_Mid_10        15710

/**
 * Signal OBJ_Angle_Mid_10 raw offset value.
 */
#define OFF_Objects_Signals_C10_OBJ_Angle_Mid_10        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C10_OBJ_Angle_Rate_10 Signal OBJ_Angle_Rate_10 of Message Objects_Signals_C10 (0x51d)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C10
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C10_OBJ_Angle_Rate_10 and \ref GET_Objects_Signals_C10_OBJ_Angle_Rate_10 instead.
 */
#define SIG_Objects_Signals_C10_OBJ_Angle_Rate_10        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C10_OBJ_Angle_Rate_10 or \ref INIT_Objects_Signals_C10 instead.
 */
#define SETUP_Objects_Signals_C10_OBJ_Angle_Rate_10      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C10_OBJ_Angle_Rate_10(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C10_OBJ_Angle_Rate_10(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C10_OBJ_Angle_Rate_10(buf) \
	SET_Objects_Signals_C10_OBJ_Angle_Rate_10(buf, 0)

/**
 * Signal OBJ_Angle_Rate_10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C10_OBJ_Angle_Rate_10(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_10 raw initial value.
 */
#define START_Objects_Signals_C10_OBJ_Angle_Rate_10      0

/**
 * Signal OBJ_Angle_Rate_10 raw minimum value.
 */
#define MIN_Objects_Signals_C10_OBJ_Angle_Rate_10        0

/**
 * Signal OBJ_Angle_Rate_10 raw maximum value.
 */
#define MAX_Objects_Signals_C10_OBJ_Angle_Rate_10        2233

/**
 * Signal OBJ_Angle_Rate_10 raw offset value.
 */
#define OFF_Objects_Signals_C10_OBJ_Angle_Rate_10        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C10_Reserved Signal Reserved of Message Objects_Signals_C10 (0x51d)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C10
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C10_Reserved and \ref GET_Objects_Signals_C10_Reserved instead.
 */
#define SIG_Objects_Signals_C10_Reserved            0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C10_Reserved or \ref INIT_Objects_Signals_C10 instead.
 */
#define SETUP_Objects_Signals_C10_Reserved          0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C10_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C10_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C10_Reserved(buf) \
	SET_Objects_Signals_C10_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C10_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C10_Reserved          0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C10_Reserved            0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C10_Reserved            0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C10_Reserved            0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A11_Obj_ID_11 Signal Obj_ID_11 of Message Objects_Signals_A11 (0x51e)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A11
 * @{
 */

/**
 * Signal Obj_ID_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A11_Obj_ID_11 and \ref GET_Objects_Signals_A11_Obj_ID_11 instead.
 */
#define SIG_Objects_Signals_A11_Obj_ID_11           0, 0, 0, 7

/**
 * Signal Obj_ID_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A11_Obj_ID_11 or \ref INIT_Objects_Signals_A11 instead.
 */
#define SETUP_Objects_Signals_A11_Obj_ID_11         0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A11_Obj_ID_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A11_Obj_ID_11(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A11_Obj_ID_11(buf) \
	SET_Objects_Signals_A11_Obj_ID_11(buf, 0)

/**
 * Signal Obj_ID_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A11_Obj_ID_11(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_11 raw initial value.
 */
#define START_Objects_Signals_A11_Obj_ID_11         0

/**
 * Signal Obj_ID_11 raw minimum value.
 */
#define MIN_Objects_Signals_A11_Obj_ID_11           0

/**
 * Signal Obj_ID_11 raw maximum value.
 */
#define MAX_Objects_Signals_A11_Obj_ID_11           127

/**
 * Signal Obj_ID_11 raw offset value.
 */
#define OFF_Objects_Signals_A11_Obj_ID_11           0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A11_Object_Class_11 Signal Object_Class_11 of Message Objects_Signals_A11 (0x51e)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A11_Object_Class_11.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A11
 * @{
 */

/**
 * Signal Object_Class_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A11_Object_Class_11 and \ref GET_Objects_Signals_A11_Object_Class_11 instead.
 */
#define SIG_Objects_Signals_A11_Object_Class_11        0, 0, 7, 3

/**
 * Signal Object_Class_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A11_Object_Class_11 or \ref INIT_Objects_Signals_A11 instead.
 */
#define SETUP_Objects_Signals_A11_Object_Class_11      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A11_Object_Class_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A11_Object_Class_11(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A11_Object_Class_11(buf) \
	SET_Objects_Signals_A11_Object_Class_11(buf, 0)

/**
 * Signal Object_Class_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A11_Object_Class_11(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_11 raw initial value.
 */
#define START_Objects_Signals_A11_Object_Class_11      0

/**
 * Signal Object_Class_11 raw minimum value.
 */
#define MIN_Objects_Signals_A11_Object_Class_11        0

/**
 * Signal Object_Class_11 raw maximum value.
 */
#define MAX_Objects_Signals_A11_Object_Class_11        7

/**
 * Signal Object_Class_11 raw offset value.
 */
#define OFF_Objects_Signals_A11_Object_Class_11        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A11_Object_Class_11 Value Table for Signal Object_Class_11 in Message Objects_Signals_A11 (0x51e)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A11_Object_Class_11.
 *
 * @ingroup SIG_Objects_Signals_A11_Object_Class_11
 */

/**
 * Value table Objects_Signals_A11_Object_Class_11 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A11_Object_Class_11
 */
#define Objects_Signals_A11_Object_Class_11_uncertain_vcl       7

/**
 * Value table Objects_Signals_A11_Object_Class_11 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A11_Object_Class_11
 */
#define Objects_Signals_A11_Object_Class_11_animal              6

/**
 * Value table Objects_Signals_A11_Object_Class_11 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A11_Object_Class_11
 */
#define Objects_Signals_A11_Object_Class_11_general_object      5

/**
 * Value table Objects_Signals_A11_Object_Class_11 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A11_Object_Class_11
 */
#define Objects_Signals_A11_Object_Class_11_pedestrian          4

/**
 * Value table Objects_Signals_A11_Object_Class_11 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A11_Object_Class_11
 */
#define Objects_Signals_A11_Object_Class_11_bicycle             3

/**
 * Value table Objects_Signals_A11_Object_Class_11 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A11_Object_Class_11
 */
#define Objects_Signals_A11_Object_Class_11_bike                2

/**
 * Value table Objects_Signals_A11_Object_Class_11 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A11_Object_Class_11
 */
#define Objects_Signals_A11_Object_Class_11_truck               1

/**
 * Value table Objects_Signals_A11_Object_Class_11 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A11_Object_Class_11
 */
#define Objects_Signals_A11_Object_Class_11_car                 0

/**
 * @defgroup SIG_Objects_Signals_A11_OBJ_Width_11 Signal OBJ_Width_11 of Message Objects_Signals_A11 (0x51e)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A11
 * @{
 */

/**
 * Signal OBJ_Width_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A11_OBJ_Width_11 and \ref GET_Objects_Signals_A11_OBJ_Width_11 instead.
 */
#define SIG_Objects_Signals_A11_OBJ_Width_11        0, 0, 10, 7

/**
 * Signal OBJ_Width_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A11_OBJ_Width_11 or \ref INIT_Objects_Signals_A11 instead.
 */
#define SETUP_Objects_Signals_A11_OBJ_Width_11      0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A11_OBJ_Width_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A11_OBJ_Width_11(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A11_OBJ_Width_11(buf) \
	SET_Objects_Signals_A11_OBJ_Width_11(buf, 0)

/**
 * Signal OBJ_Width_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A11_OBJ_Width_11(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_11 raw initial value.
 */
#define START_Objects_Signals_A11_OBJ_Width_11      0

/**
 * Signal OBJ_Width_11 raw minimum value.
 */
#define MIN_Objects_Signals_A11_OBJ_Width_11        0

/**
 * Signal OBJ_Width_11 raw maximum value.
 */
#define MAX_Objects_Signals_A11_OBJ_Width_11        127

/**
 * Signal OBJ_Width_11 raw offset value.
 */
#define OFF_Objects_Signals_A11_OBJ_Width_11        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A11_OBJ_Length_11 Signal OBJ_Length_11 of Message Objects_Signals_A11 (0x51e)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A11
 * @{
 */

/**
 * Signal OBJ_Length_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A11_OBJ_Length_11 and \ref GET_Objects_Signals_A11_OBJ_Length_11 instead.
 */
#define SIG_Objects_Signals_A11_OBJ_Length_11        0, 0, 17, 9

/**
 * Signal OBJ_Length_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A11_OBJ_Length_11 or \ref INIT_Objects_Signals_A11 instead.
 */
#define SETUP_Objects_Signals_A11_OBJ_Length_11      0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A11_OBJ_Length_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A11_OBJ_Length_11(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A11_OBJ_Length_11(buf) \
	SET_Objects_Signals_A11_OBJ_Length_11(buf, 0)

/**
 * Signal OBJ_Length_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A11_OBJ_Length_11(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_11 raw initial value.
 */
#define START_Objects_Signals_A11_OBJ_Length_11      0

/**
 * Signal OBJ_Length_11 raw minimum value.
 */
#define MIN_Objects_Signals_A11_OBJ_Length_11        0

/**
 * Signal OBJ_Length_11 raw maximum value.
 */
#define MAX_Objects_Signals_A11_OBJ_Length_11        510

/**
 * Signal OBJ_Length_11 raw offset value.
 */
#define OFF_Objects_Signals_A11_OBJ_Length_11        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A11_Relative_Long_Velocity_11 Signal Relative_Long_Velocity_11 of Message Objects_Signals_A11 (0x51e)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A11
 * @{
 */

/**
 * Signal Relative_Long_Velocity_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A11_Relative_Long_Velocity_11 and \ref GET_Objects_Signals_A11_Relative_Long_Velocity_11 instead.
 */
#define SIG_Objects_Signals_A11_Relative_Long_Velocity_11        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A11_Relative_Long_Velocity_11 or \ref INIT_Objects_Signals_A11 instead.
 */
#define SETUP_Objects_Signals_A11_Relative_Long_Velocity_11      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A11_Relative_Long_Velocity_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A11_Relative_Long_Velocity_11(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A11_Relative_Long_Velocity_11(buf) \
	SET_Objects_Signals_A11_Relative_Long_Velocity_11(buf, 0)

/**
 * Signal Relative_Long_Velocity_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A11_Relative_Long_Velocity_11(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_11 raw initial value.
 */
#define START_Objects_Signals_A11_Relative_Long_Velocity_11      0

/**
 * Signal Relative_Long_Velocity_11 raw minimum value.
 */
#define MIN_Objects_Signals_A11_Relative_Long_Velocity_11        0

/**
 * Signal Relative_Long_Velocity_11 raw maximum value.
 */
#define MAX_Objects_Signals_A11_Relative_Long_Velocity_11        5000

/**
 * Signal Relative_Long_Velocity_11 raw offset value.
 */
#define OFF_Objects_Signals_A11_Relative_Long_Velocity_11        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A11_OBJ_Lane_Assignment_11 Signal OBJ_Lane_Assignment_11 of Message Objects_Signals_A11 (0x51e)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A11_OBJ_Lane_Assignment_11.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A11
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A11_OBJ_Lane_Assignment_11 and \ref GET_Objects_Signals_A11_OBJ_Lane_Assignment_11 instead.
 */
#define SIG_Objects_Signals_A11_OBJ_Lane_Assignment_11        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A11_OBJ_Lane_Assignment_11 or \ref INIT_Objects_Signals_A11 instead.
 */
#define SETUP_Objects_Signals_A11_OBJ_Lane_Assignment_11      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A11_OBJ_Lane_Assignment_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A11_OBJ_Lane_Assignment_11(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A11_OBJ_Lane_Assignment_11(buf) \
	SET_Objects_Signals_A11_OBJ_Lane_Assignment_11(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A11_OBJ_Lane_Assignment_11(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_11 raw initial value.
 */
#define START_Objects_Signals_A11_OBJ_Lane_Assignment_11      0

/**
 * Signal OBJ_Lane_Assignment_11 raw minimum value.
 */
#define MIN_Objects_Signals_A11_OBJ_Lane_Assignment_11        0

/**
 * Signal OBJ_Lane_Assignment_11 raw maximum value.
 */
#define MAX_Objects_Signals_A11_OBJ_Lane_Assignment_11        5

/**
 * Signal OBJ_Lane_Assignment_11 raw offset value.
 */
#define OFF_Objects_Signals_A11_OBJ_Lane_Assignment_11        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A11_OBJ_Lane_Assignment_11 Value Table for Signal OBJ_Lane_Assignment_11 in Message Objects_Signals_A11 (0x51e)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A11_OBJ_Lane_Assignment_11.
 *
 * @ingroup SIG_Objects_Signals_A11_OBJ_Lane_Assignment_11
 */

/**
 * Value table Objects_Signals_A11_OBJ_Lane_Assignment_11 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A11_OBJ_Lane_Assignment_11
 */
#define Objects_Signals_A11_OBJ_Lane_Assignment_11_Not                 5

/**
 * Value table Objects_Signals_A11_OBJ_Lane_Assignment_11 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A11_OBJ_Lane_Assignment_11
 */
#define Objects_Signals_A11_OBJ_Lane_Assignment_11_Next                4

/**
 * Value table Objects_Signals_A11_OBJ_Lane_Assignment_11 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A11_OBJ_Lane_Assignment_11
 */
#define Objects_Signals_A11_OBJ_Lane_Assignment_11_Right               3

/**
 * Value table Objects_Signals_A11_OBJ_Lane_Assignment_11 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A11_OBJ_Lane_Assignment_11
 */
#define Objects_Signals_A11_OBJ_Lane_Assignment_11_Ego                 2

/**
 * Value table Objects_Signals_A11_OBJ_Lane_Assignment_11 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A11_OBJ_Lane_Assignment_11
 */
#define Objects_Signals_A11_OBJ_Lane_Assignment_11_Left                1

/**
 * Value table Objects_Signals_A11_OBJ_Lane_Assignment_11 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A11_OBJ_Lane_Assignment_11
 */
#define Objects_Signals_A11_OBJ_Lane_Assignment_11_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A11_Relative_Lat_Velocity_11 Signal Relative_Lat_Velocity_11 of Message Objects_Signals_A11 (0x51e)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A11
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A11_Relative_Lat_Velocity_11 and \ref GET_Objects_Signals_A11_Relative_Lat_Velocity_11 instead.
 */
#define SIG_Objects_Signals_A11_Relative_Lat_Velocity_11        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A11_Relative_Lat_Velocity_11 or \ref INIT_Objects_Signals_A11 instead.
 */
#define SETUP_Objects_Signals_A11_Relative_Lat_Velocity_11      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A11_Relative_Lat_Velocity_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A11_Relative_Lat_Velocity_11(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A11_Relative_Lat_Velocity_11(buf) \
	SET_Objects_Signals_A11_Relative_Lat_Velocity_11(buf, 0)

/**
 * Signal Relative_Lat_Velocity_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A11_Relative_Lat_Velocity_11(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_11 raw initial value.
 */
#define START_Objects_Signals_A11_Relative_Lat_Velocity_11      0

/**
 * Signal Relative_Lat_Velocity_11 raw minimum value.
 */
#define MIN_Objects_Signals_A11_Relative_Lat_Velocity_11        0

/**
 * Signal Relative_Lat_Velocity_11 raw maximum value.
 */
#define MAX_Objects_Signals_A11_Relative_Lat_Velocity_11        2000

/**
 * Signal Relative_Lat_Velocity_11 raw offset value.
 */
#define OFF_Objects_Signals_A11_Relative_Lat_Velocity_11        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A11_Reserved Signal Reserved of Message Objects_Signals_A11 (0x51e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A11
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A11_Reserved and \ref GET_Objects_Signals_A11_Reserved instead.
 */
#define SIG_Objects_Signals_A11_Reserved            0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A11_Reserved or \ref INIT_Objects_Signals_A11 instead.
 */
#define SETUP_Objects_Signals_A11_Reserved          0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A11_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A11_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A11_Reserved(buf) \
	SET_Objects_Signals_A11_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A11_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A11_Reserved          0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A11_Reserved            0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A11_Reserved            0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A11_Reserved            0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B11_Absolute_Long_Acc_11 Signal Absolute_Long_Acc_11 of Message Objects_Signals_B11 (0x51f)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B11
 * @{
 */

/**
 * Signal Absolute_Long_Acc_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B11_Absolute_Long_Acc_11 and \ref GET_Objects_Signals_B11_Absolute_Long_Acc_11 instead.
 */
#define SIG_Objects_Signals_B11_Absolute_Long_Acc_11        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B11_Absolute_Long_Acc_11 or \ref INIT_Objects_Signals_B11 instead.
 */
#define SETUP_Objects_Signals_B11_Absolute_Long_Acc_11      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B11_Absolute_Long_Acc_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B11_Absolute_Long_Acc_11(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B11_Absolute_Long_Acc_11(buf) \
	SET_Objects_Signals_B11_Absolute_Long_Acc_11(buf, 0)

/**
 * Signal Absolute_Long_Acc_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B11_Absolute_Long_Acc_11(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_11 raw initial value.
 */
#define START_Objects_Signals_B11_Absolute_Long_Acc_11      0

/**
 * Signal Absolute_Long_Acc_11 raw minimum value.
 */
#define MIN_Objects_Signals_B11_Absolute_Long_Acc_11        0

/**
 * Signal Absolute_Long_Acc_11 raw maximum value.
 */
#define MAX_Objects_Signals_B11_Absolute_Long_Acc_11        511

/**
 * Signal Absolute_Long_Acc_11 raw offset value.
 */
#define OFF_Objects_Signals_B11_Absolute_Long_Acc_11        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B11_Long_Distance_11 Signal Long_Distance_11 of Message Objects_Signals_B11 (0x51f)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B11
 * @{
 */

/**
 * Signal Long_Distance_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B11_Long_Distance_11 and \ref GET_Objects_Signals_B11_Long_Distance_11 instead.
 */
#define SIG_Objects_Signals_B11_Long_Distance_11        0, 0, 9, 13

/**
 * Signal Long_Distance_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B11_Long_Distance_11 or \ref INIT_Objects_Signals_B11 instead.
 */
#define SETUP_Objects_Signals_B11_Long_Distance_11      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B11_Long_Distance_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B11_Long_Distance_11(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B11_Long_Distance_11(buf) \
	SET_Objects_Signals_B11_Long_Distance_11(buf, 0)

/**
 * Signal Long_Distance_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B11_Long_Distance_11(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_11 raw initial value.
 */
#define START_Objects_Signals_B11_Long_Distance_11      0

/**
 * Signal Long_Distance_11 raw minimum value.
 */
#define MIN_Objects_Signals_B11_Long_Distance_11        0

/**
 * Signal Long_Distance_11 raw maximum value.
 */
#define MAX_Objects_Signals_B11_Long_Distance_11        7000

/**
 * Signal Long_Distance_11 raw offset value.
 */
#define OFF_Objects_Signals_B11_Long_Distance_11        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B11_Lateral_Distance_11 Signal Lateral_Distance_11 of Message Objects_Signals_B11 (0x51f)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B11
 * @{
 */

/**
 * Signal Lateral_Distance_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B11_Lateral_Distance_11 and \ref GET_Objects_Signals_B11_Lateral_Distance_11 instead.
 */
#define SIG_Objects_Signals_B11_Lateral_Distance_11        0, 0, 22, 12

/**
 * Signal Lateral_Distance_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B11_Lateral_Distance_11 or \ref INIT_Objects_Signals_B11 instead.
 */
#define SETUP_Objects_Signals_B11_Lateral_Distance_11      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B11_Lateral_Distance_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B11_Lateral_Distance_11(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B11_Lateral_Distance_11(buf) \
	SET_Objects_Signals_B11_Lateral_Distance_11(buf, 0)

/**
 * Signal Lateral_Distance_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B11_Lateral_Distance_11(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_11 raw initial value.
 */
#define START_Objects_Signals_B11_Lateral_Distance_11      0

/**
 * Signal Lateral_Distance_11 raw minimum value.
 */
#define MIN_Objects_Signals_B11_Lateral_Distance_11        0

/**
 * Signal Lateral_Distance_11 raw maximum value.
 */
#define MAX_Objects_Signals_B11_Lateral_Distance_11        4094

/**
 * Signal Lateral_Distance_11 raw offset value.
 */
#define OFF_Objects_Signals_B11_Lateral_Distance_11        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B11_Reserved Signal Reserved of Message Objects_Signals_B11 (0x51f)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B11
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B11_Reserved and \ref GET_Objects_Signals_B11_Reserved instead.
 */
#define SIG_Objects_Signals_B11_Reserved            0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B11_Reserved or \ref INIT_Objects_Signals_B11 instead.
 */
#define SETUP_Objects_Signals_B11_Reserved          0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B11_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B11_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B11_Reserved(buf) \
	SET_Objects_Signals_B11_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B11_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B11_Reserved          0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B11_Reserved            0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B11_Reserved            0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B11_Reserved            0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C11_Absolute_Speed_11 Signal Absolute_Speed_11 of Message Objects_Signals_C11 (0x520)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C11
 * @{
 */

/**
 * Signal Absolute_Speed_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C11_Absolute_Speed_11 and \ref GET_Objects_Signals_C11_Absolute_Speed_11 instead.
 */
#define SIG_Objects_Signals_C11_Absolute_Speed_11        0, 0, 0, 12

/**
 * Signal Absolute_Speed_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C11_Absolute_Speed_11 or \ref INIT_Objects_Signals_C11 instead.
 */
#define SETUP_Objects_Signals_C11_Absolute_Speed_11      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C11_Absolute_Speed_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C11_Absolute_Speed_11(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C11_Absolute_Speed_11(buf) \
	SET_Objects_Signals_C11_Absolute_Speed_11(buf, 0)

/**
 * Signal Absolute_Speed_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C11_Absolute_Speed_11(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_11 raw initial value.
 */
#define START_Objects_Signals_C11_Absolute_Speed_11      0

/**
 * Signal Absolute_Speed_11 raw minimum value.
 */
#define MIN_Objects_Signals_C11_Absolute_Speed_11        0

/**
 * Signal Absolute_Speed_11 raw maximum value.
 */
#define MAX_Objects_Signals_C11_Absolute_Speed_11        4000

/**
 * Signal Absolute_Speed_11 raw offset value.
 */
#define OFF_Objects_Signals_C11_Absolute_Speed_11        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C11_OBJ_Motion_Status_11 Signal OBJ_Motion_Status_11 of Message Objects_Signals_C11 (0x520)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C11_OBJ_Motion_Status_11.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C11
 * @{
 */

/**
 * Signal OBJ_Motion_Status_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C11_OBJ_Motion_Status_11 and \ref GET_Objects_Signals_C11_OBJ_Motion_Status_11 instead.
 */
#define SIG_Objects_Signals_C11_OBJ_Motion_Status_11        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C11_OBJ_Motion_Status_11 or \ref INIT_Objects_Signals_C11 instead.
 */
#define SETUP_Objects_Signals_C11_OBJ_Motion_Status_11      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C11_OBJ_Motion_Status_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C11_OBJ_Motion_Status_11(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C11_OBJ_Motion_Status_11(buf) \
	SET_Objects_Signals_C11_OBJ_Motion_Status_11(buf, 0)

/**
 * Signal OBJ_Motion_Status_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C11_OBJ_Motion_Status_11(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_11 raw initial value.
 */
#define START_Objects_Signals_C11_OBJ_Motion_Status_11      0

/**
 * Signal OBJ_Motion_Status_11 raw minimum value.
 */
#define MIN_Objects_Signals_C11_OBJ_Motion_Status_11        0

/**
 * Signal OBJ_Motion_Status_11 raw maximum value.
 */
#define MAX_Objects_Signals_C11_OBJ_Motion_Status_11        4

/**
 * Signal OBJ_Motion_Status_11 raw offset value.
 */
#define OFF_Objects_Signals_C11_OBJ_Motion_Status_11        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C11_OBJ_Motion_Status_11 Value Table for Signal OBJ_Motion_Status_11 in Message Objects_Signals_C11 (0x520)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C11_OBJ_Motion_Status_11.
 *
 * @ingroup SIG_Objects_Signals_C11_OBJ_Motion_Status_11
 */

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Status_11 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Status_11
 */
#define Objects_Signals_C11_OBJ_Motion_Status_11_Moving              4

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Status_11 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Status_11
 */
#define Objects_Signals_C11_OBJ_Motion_Status_11_Stopped             3

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Status_11 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Status_11
 */
#define Objects_Signals_C11_OBJ_Motion_Status_11_Stationary          2

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Status_11 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Status_11
 */
#define Objects_Signals_C11_OBJ_Motion_Status_11_Moving_1            1

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Status_11 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Status_11
 */
#define Objects_Signals_C11_OBJ_Motion_Status_11_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C11_OBJ_Motion_Category_11 Signal OBJ_Motion_Category_11 of Message Objects_Signals_C11 (0x520)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C11_OBJ_Motion_Category_11.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C11
 * @{
 */

/**
 * Signal OBJ_Motion_Category_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C11_OBJ_Motion_Category_11 and \ref GET_Objects_Signals_C11_OBJ_Motion_Category_11 instead.
 */
#define SIG_Objects_Signals_C11_OBJ_Motion_Category_11        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C11_OBJ_Motion_Category_11 or \ref INIT_Objects_Signals_C11 instead.
 */
#define SETUP_Objects_Signals_C11_OBJ_Motion_Category_11      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C11_OBJ_Motion_Category_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C11_OBJ_Motion_Category_11(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C11_OBJ_Motion_Category_11(buf) \
	SET_Objects_Signals_C11_OBJ_Motion_Category_11(buf, 0)

/**
 * Signal OBJ_Motion_Category_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C11_OBJ_Motion_Category_11(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_11 raw initial value.
 */
#define START_Objects_Signals_C11_OBJ_Motion_Category_11      0

/**
 * Signal OBJ_Motion_Category_11 raw minimum value.
 */
#define MIN_Objects_Signals_C11_OBJ_Motion_Category_11        0

/**
 * Signal OBJ_Motion_Category_11 raw maximum value.
 */
#define MAX_Objects_Signals_C11_OBJ_Motion_Category_11        12

/**
 * Signal OBJ_Motion_Category_11 raw offset value.
 */
#define OFF_Objects_Signals_C11_OBJ_Motion_Category_11        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11 Value Table for Signal OBJ_Motion_Category_11 in Message Objects_Signals_C11 (0x520)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C11_OBJ_Motion_Category_11.
 *
 * @ingroup SIG_Objects_Signals_C11_OBJ_Motion_Category_11
 */

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_MOVING           10

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_RTAP             9

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_LTAP             8

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_CROSSING         7

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_PASSING          1

/**
 * Value table Objects_Signals_C11_OBJ_Motion_Category_11 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C11_OBJ_Motion_Category_11
 */
#define Objects_Signals_C11_OBJ_Motion_Category_11_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C11_Brake_Light_11 Signal Brake_Light_11 of Message Objects_Signals_C11 (0x520)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C11_Brake_Light_11.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C11
 * @{
 */

/**
 * Signal Brake_Light_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C11_Brake_Light_11 and \ref GET_Objects_Signals_C11_Brake_Light_11 instead.
 */
#define SIG_Objects_Signals_C11_Brake_Light_11        0, 0, 19, 1

/**
 * Signal Brake_Light_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C11_Brake_Light_11 or \ref INIT_Objects_Signals_C11 instead.
 */
#define SETUP_Objects_Signals_C11_Brake_Light_11      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C11_Brake_Light_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C11_Brake_Light_11(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C11_Brake_Light_11(buf) \
	SET_Objects_Signals_C11_Brake_Light_11(buf, 0)

/**
 * Signal Brake_Light_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C11_Brake_Light_11(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_11 raw initial value.
 */
#define START_Objects_Signals_C11_Brake_Light_11      0

/**
 * Signal Brake_Light_11 raw minimum value.
 */
#define MIN_Objects_Signals_C11_Brake_Light_11        0

/**
 * Signal Brake_Light_11 raw maximum value.
 */
#define MAX_Objects_Signals_C11_Brake_Light_11        1

/**
 * Signal Brake_Light_11 raw offset value.
 */
#define OFF_Objects_Signals_C11_Brake_Light_11        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C11_Brake_Light_11 Value Table for Signal Brake_Light_11 in Message Objects_Signals_C11 (0x520)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C11_Brake_Light_11.
 *
 * @ingroup SIG_Objects_Signals_C11_Brake_Light_11
 */

/**
 * Value table Objects_Signals_C11_Brake_Light_11 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C11_Brake_Light_11
 */
#define Objects_Signals_C11_Brake_Light_11_On                  1

/**
 * Value table Objects_Signals_C11_Brake_Light_11 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C11_Brake_Light_11
 */
#define Objects_Signals_C11_Brake_Light_11_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C11_Turn_Indicator_Right_11 Signal Turn_Indicator_Right_11 of Message Objects_Signals_C11 (0x520)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C11_Turn_Indicator_Right_11.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C11
 * @{
 */

/**
 * Signal Turn_Indicator_Right_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C11_Turn_Indicator_Right_11 and \ref GET_Objects_Signals_C11_Turn_Indicator_Right_11 instead.
 */
#define SIG_Objects_Signals_C11_Turn_Indicator_Right_11        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C11_Turn_Indicator_Right_11 or \ref INIT_Objects_Signals_C11 instead.
 */
#define SETUP_Objects_Signals_C11_Turn_Indicator_Right_11      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C11_Turn_Indicator_Right_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C11_Turn_Indicator_Right_11(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C11_Turn_Indicator_Right_11(buf) \
	SET_Objects_Signals_C11_Turn_Indicator_Right_11(buf, 0)

/**
 * Signal Turn_Indicator_Right_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C11_Turn_Indicator_Right_11(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_11 raw initial value.
 */
#define START_Objects_Signals_C11_Turn_Indicator_Right_11      0

/**
 * Signal Turn_Indicator_Right_11 raw minimum value.
 */
#define MIN_Objects_Signals_C11_Turn_Indicator_Right_11        0

/**
 * Signal Turn_Indicator_Right_11 raw maximum value.
 */
#define MAX_Objects_Signals_C11_Turn_Indicator_Right_11        1

/**
 * Signal Turn_Indicator_Right_11 raw offset value.
 */
#define OFF_Objects_Signals_C11_Turn_Indicator_Right_11        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C11_Turn_Indicator_Right_11 Value Table for Signal Turn_Indicator_Right_11 in Message Objects_Signals_C11 (0x520)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C11_Turn_Indicator_Right_11.
 *
 * @ingroup SIG_Objects_Signals_C11_Turn_Indicator_Right_11
 */

/**
 * Value table Objects_Signals_C11_Turn_Indicator_Right_11 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C11_Turn_Indicator_Right_11
 */
#define Objects_Signals_C11_Turn_Indicator_Right_11_On                  1

/**
 * Value table Objects_Signals_C11_Turn_Indicator_Right_11 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C11_Turn_Indicator_Right_11
 */
#define Objects_Signals_C11_Turn_Indicator_Right_11_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C11_Turn_Indicator_Left_11 Signal Turn_Indicator_Left_11 of Message Objects_Signals_C11 (0x520)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C11_Turn_Indicator_Left_11.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C11
 * @{
 */

/**
 * Signal Turn_Indicator_Left_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C11_Turn_Indicator_Left_11 and \ref GET_Objects_Signals_C11_Turn_Indicator_Left_11 instead.
 */
#define SIG_Objects_Signals_C11_Turn_Indicator_Left_11        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C11_Turn_Indicator_Left_11 or \ref INIT_Objects_Signals_C11 instead.
 */
#define SETUP_Objects_Signals_C11_Turn_Indicator_Left_11      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C11_Turn_Indicator_Left_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C11_Turn_Indicator_Left_11(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C11_Turn_Indicator_Left_11(buf) \
	SET_Objects_Signals_C11_Turn_Indicator_Left_11(buf, 0)

/**
 * Signal Turn_Indicator_Left_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C11_Turn_Indicator_Left_11(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_11 raw initial value.
 */
#define START_Objects_Signals_C11_Turn_Indicator_Left_11      0

/**
 * Signal Turn_Indicator_Left_11 raw minimum value.
 */
#define MIN_Objects_Signals_C11_Turn_Indicator_Left_11        0

/**
 * Signal Turn_Indicator_Left_11 raw maximum value.
 */
#define MAX_Objects_Signals_C11_Turn_Indicator_Left_11        1

/**
 * Signal Turn_Indicator_Left_11 raw offset value.
 */
#define OFF_Objects_Signals_C11_Turn_Indicator_Left_11        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C11_Turn_Indicator_Left_11 Value Table for Signal Turn_Indicator_Left_11 in Message Objects_Signals_C11 (0x520)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C11_Turn_Indicator_Left_11.
 *
 * @ingroup SIG_Objects_Signals_C11_Turn_Indicator_Left_11
 */

/**
 * Value table Objects_Signals_C11_Turn_Indicator_Left_11 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C11_Turn_Indicator_Left_11
 */
#define Objects_Signals_C11_Turn_Indicator_Left_11_On                  1

/**
 * Value table Objects_Signals_C11_Turn_Indicator_Left_11 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C11_Turn_Indicator_Left_11
 */
#define Objects_Signals_C11_Turn_Indicator_Left_11_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C11_Light_indicator_validity_11 Signal Light_indicator_validity_11 of Message Objects_Signals_C11 (0x520)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C11_Light_indicator_validity_11.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C11
 * @{
 */

/**
 * Signal Light_indicator_validity_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C11_Light_indicator_validity_11 and \ref GET_Objects_Signals_C11_Light_indicator_validity_11 instead.
 */
#define SIG_Objects_Signals_C11_Light_indicator_validity_11        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C11_Light_indicator_validity_11 or \ref INIT_Objects_Signals_C11 instead.
 */
#define SETUP_Objects_Signals_C11_Light_indicator_validity_11      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C11_Light_indicator_validity_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C11_Light_indicator_validity_11(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C11_Light_indicator_validity_11(buf) \
	SET_Objects_Signals_C11_Light_indicator_validity_11(buf, 0)

/**
 * Signal Light_indicator_validity_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C11_Light_indicator_validity_11(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_11 raw initial value.
 */
#define START_Objects_Signals_C11_Light_indicator_validity_11      0

/**
 * Signal Light_indicator_validity_11 raw minimum value.
 */
#define MIN_Objects_Signals_C11_Light_indicator_validity_11        0

/**
 * Signal Light_indicator_validity_11 raw maximum value.
 */
#define MAX_Objects_Signals_C11_Light_indicator_validity_11        1

/**
 * Signal Light_indicator_validity_11 raw offset value.
 */
#define OFF_Objects_Signals_C11_Light_indicator_validity_11        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C11_Light_indicator_validity_11 Value Table for Signal Light_indicator_validity_11 in Message Objects_Signals_C11 (0x520)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C11_Light_indicator_validity_11.
 *
 * @ingroup SIG_Objects_Signals_C11_Light_indicator_validity_11
 */

/**
 * Value table Objects_Signals_C11_Light_indicator_validity_11 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C11_Light_indicator_validity_11
 */
#define Objects_Signals_C11_Light_indicator_validity_11_True                1

/**
 * Value table Objects_Signals_C11_Light_indicator_validity_11 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C11_Light_indicator_validity_11
 */
#define Objects_Signals_C11_Light_indicator_validity_11_False               0

/**
 * @defgroup SIG_Objects_Signals_C11_OBJ_Angle_Mid_11 Signal OBJ_Angle_Mid_11 of Message Objects_Signals_C11 (0x520)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C11
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C11_OBJ_Angle_Mid_11 and \ref GET_Objects_Signals_C11_OBJ_Angle_Mid_11 instead.
 */
#define SIG_Objects_Signals_C11_OBJ_Angle_Mid_11        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C11_OBJ_Angle_Mid_11 or \ref INIT_Objects_Signals_C11 instead.
 */
#define SETUP_Objects_Signals_C11_OBJ_Angle_Mid_11      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C11_OBJ_Angle_Mid_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C11_OBJ_Angle_Mid_11(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C11_OBJ_Angle_Mid_11(buf) \
	SET_Objects_Signals_C11_OBJ_Angle_Mid_11(buf, 0)

/**
 * Signal OBJ_Angle_Mid_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C11_OBJ_Angle_Mid_11(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_11 raw initial value.
 */
#define START_Objects_Signals_C11_OBJ_Angle_Mid_11      0

/**
 * Signal OBJ_Angle_Mid_11 raw minimum value.
 */
#define MIN_Objects_Signals_C11_OBJ_Angle_Mid_11        0

/**
 * Signal OBJ_Angle_Mid_11 raw maximum value.
 */
#define MAX_Objects_Signals_C11_OBJ_Angle_Mid_11        15710

/**
 * Signal OBJ_Angle_Mid_11 raw offset value.
 */
#define OFF_Objects_Signals_C11_OBJ_Angle_Mid_11        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C11_OBJ_Angle_Rate_11 Signal OBJ_Angle_Rate_11 of Message Objects_Signals_C11 (0x520)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C11
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_11 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C11_OBJ_Angle_Rate_11 and \ref GET_Objects_Signals_C11_OBJ_Angle_Rate_11 instead.
 */
#define SIG_Objects_Signals_C11_OBJ_Angle_Rate_11        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_11 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C11_OBJ_Angle_Rate_11 or \ref INIT_Objects_Signals_C11 instead.
 */
#define SETUP_Objects_Signals_C11_OBJ_Angle_Rate_11      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_11 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C11_OBJ_Angle_Rate_11(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_11 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C11_OBJ_Angle_Rate_11(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_11 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C11_OBJ_Angle_Rate_11(buf) \
	SET_Objects_Signals_C11_OBJ_Angle_Rate_11(buf, 0)

/**
 * Signal OBJ_Angle_Rate_11 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C11_OBJ_Angle_Rate_11(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_11 raw initial value.
 */
#define START_Objects_Signals_C11_OBJ_Angle_Rate_11      0

/**
 * Signal OBJ_Angle_Rate_11 raw minimum value.
 */
#define MIN_Objects_Signals_C11_OBJ_Angle_Rate_11        0

/**
 * Signal OBJ_Angle_Rate_11 raw maximum value.
 */
#define MAX_Objects_Signals_C11_OBJ_Angle_Rate_11        2233

/**
 * Signal OBJ_Angle_Rate_11 raw offset value.
 */
#define OFF_Objects_Signals_C11_OBJ_Angle_Rate_11        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C11_Reserved Signal Reserved of Message Objects_Signals_C11 (0x520)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C11
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C11_Reserved and \ref GET_Objects_Signals_C11_Reserved instead.
 */
#define SIG_Objects_Signals_C11_Reserved            0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C11_Reserved or \ref INIT_Objects_Signals_C11 instead.
 */
#define SETUP_Objects_Signals_C11_Reserved          0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C11_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C11_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C11_Reserved(buf) \
	SET_Objects_Signals_C11_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C11_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C11_Reserved          0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C11_Reserved            0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C11_Reserved            0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C11_Reserved            0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A12_Obj_ID_12 Signal Obj_ID_12 of Message Objects_Signals_A12 (0x521)
 *
 * ID Manager based ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A12
 * @{
 */

/**
 * Signal Obj_ID_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A12_Obj_ID_12 and \ref GET_Objects_Signals_A12_Obj_ID_12 instead.
 */
#define SIG_Objects_Signals_A12_Obj_ID_12           0, 0, 0, 7

/**
 * Signal Obj_ID_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A12_Obj_ID_12 or \ref INIT_Objects_Signals_A12 instead.
 */
#define SETUP_Objects_Signals_A12_Obj_ID_12         0, 0, 0, 7, 0

/**
 * Get signal Obj_ID_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A12_Obj_ID_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Obj_ID_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A12_Obj_ID_12(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Obj_ID_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A12_Obj_ID_12(buf) \
	SET_Objects_Signals_A12_Obj_ID_12(buf, 0)

/**
 * Signal Obj_ID_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A12_Obj_ID_12(x, fmt) \
	((x) * fmt)

/**
 * Signal Obj_ID_12 raw initial value.
 */
#define START_Objects_Signals_A12_Obj_ID_12         0

/**
 * Signal Obj_ID_12 raw minimum value.
 */
#define MIN_Objects_Signals_A12_Obj_ID_12           0

/**
 * Signal Obj_ID_12 raw maximum value.
 */
#define MAX_Objects_Signals_A12_Obj_ID_12           127

/**
 * Signal Obj_ID_12 raw offset value.
 */
#define OFF_Objects_Signals_A12_Obj_ID_12           0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A12_Object_Class_12 Signal Object_Class_12 of Message Objects_Signals_A12 (0x521)
 *
 * ObsIF:ObsType
 *
 * Contains the value table \ref ENUM_Objects_Signals_A12_Object_Class_12.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A12
 * @{
 */

/**
 * Signal Object_Class_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A12_Object_Class_12 and \ref GET_Objects_Signals_A12_Object_Class_12 instead.
 */
#define SIG_Objects_Signals_A12_Object_Class_12        0, 0, 7, 3

/**
 * Signal Object_Class_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A12_Object_Class_12 or \ref INIT_Objects_Signals_A12 instead.
 */
#define SETUP_Objects_Signals_A12_Object_Class_12      0, 0, 7, 3, 0

/**
 * Get signal Object_Class_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A12_Object_Class_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x03) << 1) \
)

/**
 * Set signal Object_Class_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A12_Object_Class_12(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x03 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal Object_Class_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A12_Object_Class_12(buf) \
	SET_Objects_Signals_A12_Object_Class_12(buf, 0)

/**
 * Signal Object_Class_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A12_Object_Class_12(x, fmt) \
	((x) * fmt)

/**
 * Signal Object_Class_12 raw initial value.
 */
#define START_Objects_Signals_A12_Object_Class_12      0

/**
 * Signal Object_Class_12 raw minimum value.
 */
#define MIN_Objects_Signals_A12_Object_Class_12        0

/**
 * Signal Object_Class_12 raw maximum value.
 */
#define MAX_Objects_Signals_A12_Object_Class_12        7

/**
 * Signal Object_Class_12 raw offset value.
 */
#define OFF_Objects_Signals_A12_Object_Class_12        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A12_Object_Class_12 Value Table for Signal Object_Class_12 in Message Objects_Signals_A12 (0x521)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A12_Object_Class_12.
 *
 * @ingroup SIG_Objects_Signals_A12_Object_Class_12
 */

/**
 * Value table Objects_Signals_A12_Object_Class_12 entry uncertain_vcl.
 *
 * @ingroup ENUM_Objects_Signals_A12_Object_Class_12
 */
#define Objects_Signals_A12_Object_Class_12_uncertain_vcl       7

/**
 * Value table Objects_Signals_A12_Object_Class_12 entry animal.
 *
 * @ingroup ENUM_Objects_Signals_A12_Object_Class_12
 */
#define Objects_Signals_A12_Object_Class_12_animal              6

/**
 * Value table Objects_Signals_A12_Object_Class_12 entry general_object.
 *
 * @ingroup ENUM_Objects_Signals_A12_Object_Class_12
 */
#define Objects_Signals_A12_Object_Class_12_general_object      5

/**
 * Value table Objects_Signals_A12_Object_Class_12 entry pedestrian.
 *
 * @ingroup ENUM_Objects_Signals_A12_Object_Class_12
 */
#define Objects_Signals_A12_Object_Class_12_pedestrian          4

/**
 * Value table Objects_Signals_A12_Object_Class_12 entry bicycle.
 *
 * @ingroup ENUM_Objects_Signals_A12_Object_Class_12
 */
#define Objects_Signals_A12_Object_Class_12_bicycle             3

/**
 * Value table Objects_Signals_A12_Object_Class_12 entry bike.
 *
 * @ingroup ENUM_Objects_Signals_A12_Object_Class_12
 */
#define Objects_Signals_A12_Object_Class_12_bike                2

/**
 * Value table Objects_Signals_A12_Object_Class_12 entry truck.
 *
 * @ingroup ENUM_Objects_Signals_A12_Object_Class_12
 */
#define Objects_Signals_A12_Object_Class_12_truck               1

/**
 * Value table Objects_Signals_A12_Object_Class_12 entry car.
 *
 * @ingroup ENUM_Objects_Signals_A12_Object_Class_12
 */
#define Objects_Signals_A12_Object_Class_12_car                 0

/**
 * @defgroup SIG_Objects_Signals_A12_OBJ_Width_12 Signal OBJ_Width_12 of Message Objects_Signals_A12 (0x521)
 *
 * PHYSICAL STATES:PS_width
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A12
 * @{
 */

/**
 * Signal OBJ_Width_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A12_OBJ_Width_12 and \ref GET_Objects_Signals_A12_OBJ_Width_12 instead.
 */
#define SIG_Objects_Signals_A12_OBJ_Width_12        0, 0, 10, 7

/**
 * Signal OBJ_Width_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A12_OBJ_Width_12 or \ref INIT_Objects_Signals_A12 instead.
 */
#define SETUP_Objects_Signals_A12_OBJ_Width_12      0, 0, 10, 7, 0

/**
 * Get signal OBJ_Width_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A12_OBJ_Width_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 6) \
)

/**
 * Set signal OBJ_Width_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A12_OBJ_Width_12(buf, val) { \
	buf[1] &= ~(0x3f << 2); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Width_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A12_OBJ_Width_12(buf) \
	SET_Objects_Signals_A12_OBJ_Width_12(buf, 0)

/**
 * Signal OBJ_Width_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A12_OBJ_Width_12(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Width_12 raw initial value.
 */
#define START_Objects_Signals_A12_OBJ_Width_12      0

/**
 * Signal OBJ_Width_12 raw minimum value.
 */
#define MIN_Objects_Signals_A12_OBJ_Width_12        0

/**
 * Signal OBJ_Width_12 raw maximum value.
 */
#define MAX_Objects_Signals_A12_OBJ_Width_12        127

/**
 * Signal OBJ_Width_12 raw offset value.
 */
#define OFF_Objects_Signals_A12_OBJ_Width_12        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A12_OBJ_Length_12 Signal OBJ_Length_12 of Message Objects_Signals_A12 (0x521)
 *
 * PHYSICAL STATES:PS_length
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A12
 * @{
 */

/**
 * Signal OBJ_Length_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A12_OBJ_Length_12 and \ref GET_Objects_Signals_A12_OBJ_Length_12 instead.
 */
#define SIG_Objects_Signals_A12_OBJ_Length_12        0, 0, 17, 9

/**
 * Signal OBJ_Length_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A12_OBJ_Length_12 or \ref INIT_Objects_Signals_A12 instead.
 */
#define SETUP_Objects_Signals_A12_OBJ_Length_12      0, 0, 17, 9, 0

/**
 * Get signal OBJ_Length_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A12_OBJ_Length_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x03) << 7) \
)

/**
 * Set signal OBJ_Length_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A12_OBJ_Length_12(buf, val) { \
	buf[2] &= ~(0x7f << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Length_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A12_OBJ_Length_12(buf) \
	SET_Objects_Signals_A12_OBJ_Length_12(buf, 0)

/**
 * Signal OBJ_Length_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A12_OBJ_Length_12(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal OBJ_Length_12 raw initial value.
 */
#define START_Objects_Signals_A12_OBJ_Length_12      0

/**
 * Signal OBJ_Length_12 raw minimum value.
 */
#define MIN_Objects_Signals_A12_OBJ_Length_12        0

/**
 * Signal OBJ_Length_12 raw maximum value.
 */
#define MAX_Objects_Signals_A12_OBJ_Length_12        510

/**
 * Signal OBJ_Length_12 raw offset value.
 */
#define OFF_Objects_Signals_A12_OBJ_Length_12        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A12_Relative_Long_Velocity_12 Signal Relative_Long_Velocity_12 of Message Objects_Signals_A12 (0x521)
 *
 * PHYSICAL STATES:PS_longRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A12
 * @{
 */

/**
 * Signal Relative_Long_Velocity_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A12_Relative_Long_Velocity_12 and \ref GET_Objects_Signals_A12_Relative_Long_Velocity_12 instead.
 */
#define SIG_Objects_Signals_A12_Relative_Long_Velocity_12        0, 0, 26, 13

/**
 * Signal Relative_Long_Velocity_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A12_Relative_Long_Velocity_12 or \ref INIT_Objects_Signals_A12 instead.
 */
#define SETUP_Objects_Signals_A12_Relative_Long_Velocity_12      0, 0, 26, 13, 0

/**
 * Get signal Relative_Long_Velocity_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A12_Relative_Long_Velocity_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 6) \
)

/**
 * Set signal Relative_Long_Velocity_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A12_Relative_Long_Velocity_12(buf, val) { \
	buf[3] &= ~(0x3f << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x7f) << 0; \
}

/**
 * Set signal Relative_Long_Velocity_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A12_Relative_Long_Velocity_12(buf) \
	SET_Objects_Signals_A12_Relative_Long_Velocity_12(buf, 0)

/**
 * Signal Relative_Long_Velocity_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A12_Relative_Long_Velocity_12(x, fmt) \
	((x) * fmt / 20 + fmt * (-120))

/**
 * Signal Relative_Long_Velocity_12 raw initial value.
 */
#define START_Objects_Signals_A12_Relative_Long_Velocity_12      0

/**
 * Signal Relative_Long_Velocity_12 raw minimum value.
 */
#define MIN_Objects_Signals_A12_Relative_Long_Velocity_12        0

/**
 * Signal Relative_Long_Velocity_12 raw maximum value.
 */
#define MAX_Objects_Signals_A12_Relative_Long_Velocity_12        5000

/**
 * Signal Relative_Long_Velocity_12 raw offset value.
 */
#define OFF_Objects_Signals_A12_Relative_Long_Velocity_12        -2400

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A12_OBJ_Lane_Assignment_12 Signal OBJ_Lane_Assignment_12 of Message Objects_Signals_A12 (0x521)
 *
 * LANE DATA:laneAssgoinment
 *
 * Contains the value table \ref ENUM_Objects_Signals_A12_OBJ_Lane_Assignment_12.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A12
 * @{
 */

/**
 * Signal OBJ_Lane_Assignment_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A12_OBJ_Lane_Assignment_12 and \ref GET_Objects_Signals_A12_OBJ_Lane_Assignment_12 instead.
 */
#define SIG_Objects_Signals_A12_OBJ_Lane_Assignment_12        0, 0, 39, 3

/**
 * Signal OBJ_Lane_Assignment_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A12_OBJ_Lane_Assignment_12 or \ref INIT_Objects_Signals_A12 instead.
 */
#define SETUP_Objects_Signals_A12_OBJ_Lane_Assignment_12      0, 0, 39, 3, 0

/**
 * Get signal OBJ_Lane_Assignment_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A12_OBJ_Lane_Assignment_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
)

/**
 * Set signal OBJ_Lane_Assignment_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A12_OBJ_Lane_Assignment_12(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal OBJ_Lane_Assignment_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A12_OBJ_Lane_Assignment_12(buf) \
	SET_Objects_Signals_A12_OBJ_Lane_Assignment_12(buf, 0)

/**
 * Signal OBJ_Lane_Assignment_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A12_OBJ_Lane_Assignment_12(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Lane_Assignment_12 raw initial value.
 */
#define START_Objects_Signals_A12_OBJ_Lane_Assignment_12      0

/**
 * Signal OBJ_Lane_Assignment_12 raw minimum value.
 */
#define MIN_Objects_Signals_A12_OBJ_Lane_Assignment_12        0

/**
 * Signal OBJ_Lane_Assignment_12 raw maximum value.
 */
#define MAX_Objects_Signals_A12_OBJ_Lane_Assignment_12        5

/**
 * Signal OBJ_Lane_Assignment_12 raw offset value.
 */
#define OFF_Objects_Signals_A12_OBJ_Lane_Assignment_12        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_A12_OBJ_Lane_Assignment_12 Value Table for Signal OBJ_Lane_Assignment_12 in Message Objects_Signals_A12 (0x521)
 *
 * Enum values defined for \ref SIG_Objects_Signals_A12_OBJ_Lane_Assignment_12.
 *
 * @ingroup SIG_Objects_Signals_A12_OBJ_Lane_Assignment_12
 */

/**
 * Value table Objects_Signals_A12_OBJ_Lane_Assignment_12 entry Not.
 *
 * assigned
 *
 * @ingroup ENUM_Objects_Signals_A12_OBJ_Lane_Assignment_12
 */
#define Objects_Signals_A12_OBJ_Lane_Assignment_12_Not                 5

/**
 * Value table Objects_Signals_A12_OBJ_Lane_Assignment_12 entry Next.
 *
 * Right Lane
 *
 * @ingroup ENUM_Objects_Signals_A12_OBJ_Lane_Assignment_12
 */
#define Objects_Signals_A12_OBJ_Lane_Assignment_12_Next                4

/**
 * Value table Objects_Signals_A12_OBJ_Lane_Assignment_12 entry Right.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A12_OBJ_Lane_Assignment_12
 */
#define Objects_Signals_A12_OBJ_Lane_Assignment_12_Right               3

/**
 * Value table Objects_Signals_A12_OBJ_Lane_Assignment_12 entry Ego.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A12_OBJ_Lane_Assignment_12
 */
#define Objects_Signals_A12_OBJ_Lane_Assignment_12_Ego                 2

/**
 * Value table Objects_Signals_A12_OBJ_Lane_Assignment_12 entry Left.
 *
 * Lane
 *
 * @ingroup ENUM_Objects_Signals_A12_OBJ_Lane_Assignment_12
 */
#define Objects_Signals_A12_OBJ_Lane_Assignment_12_Left                1

/**
 * Value table Objects_Signals_A12_OBJ_Lane_Assignment_12 entry Next_0.
 *
 * Left Lane
 *
 * @ingroup ENUM_Objects_Signals_A12_OBJ_Lane_Assignment_12
 */
#define Objects_Signals_A12_OBJ_Lane_Assignment_12_Next_0              0

/**
 * @defgroup SIG_Objects_Signals_A12_Relative_Lat_Velocity_12 Signal Relative_Lat_Velocity_12 of Message Objects_Signals_A12 (0x521)
 *
 * PHYSICAL STATES:PS_latRelSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A12
 * @{
 */

/**
 * Signal Relative_Lat_Velocity_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A12_Relative_Lat_Velocity_12 and \ref GET_Objects_Signals_A12_Relative_Lat_Velocity_12 instead.
 */
#define SIG_Objects_Signals_A12_Relative_Lat_Velocity_12        0, 0, 42, 11

/**
 * Signal Relative_Lat_Velocity_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A12_Relative_Lat_Velocity_12 or \ref INIT_Objects_Signals_A12 instead.
 */
#define SETUP_Objects_Signals_A12_Relative_Lat_Velocity_12      0, 0, 42, 11, 0

/**
 * Get signal Relative_Lat_Velocity_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A12_Relative_Lat_Velocity_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 6) \
)

/**
 * Set signal Relative_Lat_Velocity_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A12_Relative_Lat_Velocity_12(buf, val) { \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x1f) << 0; \
}

/**
 * Set signal Relative_Lat_Velocity_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A12_Relative_Lat_Velocity_12(buf) \
	SET_Objects_Signals_A12_Relative_Lat_Velocity_12(buf, 0)

/**
 * Signal Relative_Lat_Velocity_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A12_Relative_Lat_Velocity_12(x, fmt) \
	((x) * fmt / 20 + fmt * (-50))

/**
 * Signal Relative_Lat_Velocity_12 raw initial value.
 */
#define START_Objects_Signals_A12_Relative_Lat_Velocity_12      0

/**
 * Signal Relative_Lat_Velocity_12 raw minimum value.
 */
#define MIN_Objects_Signals_A12_Relative_Lat_Velocity_12        0

/**
 * Signal Relative_Lat_Velocity_12 raw maximum value.
 */
#define MAX_Objects_Signals_A12_Relative_Lat_Velocity_12        2000

/**
 * Signal Relative_Lat_Velocity_12 raw offset value.
 */
#define OFF_Objects_Signals_A12_Relative_Lat_Velocity_12        -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_A12_Reserved Signal Reserved of Message Objects_Signals_A12 (0x521)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_A12
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_A12_Reserved and \ref GET_Objects_Signals_A12_Reserved instead.
 */
#define SIG_Objects_Signals_A12_Reserved            0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_A12_Reserved or \ref INIT_Objects_Signals_A12 instead.
 */
#define SETUP_Objects_Signals_A12_Reserved          0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_A12_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_A12_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_A12_Reserved(buf) \
	SET_Objects_Signals_A12_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_A12_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_A12_Reserved          0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_A12_Reserved            0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_A12_Reserved            0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_A12_Reserved            0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B12_Absolute_Long_Acc_12 Signal Absolute_Long_Acc_12 of Message Objects_Signals_B12 (0x522)
 *
 *  absoluteLongAcceleration 6.3.1.9
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B12
 * @{
 */

/**
 * Signal Absolute_Long_Acc_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B12_Absolute_Long_Acc_12 and \ref GET_Objects_Signals_B12_Absolute_Long_Acc_12 instead.
 */
#define SIG_Objects_Signals_B12_Absolute_Long_Acc_12        0, 0, 0, 9

/**
 * Signal Absolute_Long_Acc_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B12_Absolute_Long_Acc_12 or \ref INIT_Objects_Signals_B12 instead.
 */
#define SETUP_Objects_Signals_B12_Absolute_Long_Acc_12      0, 0, 0, 9, 0

/**
 * Get signal Absolute_Long_Acc_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B12_Absolute_Long_Acc_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal Absolute_Long_Acc_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B12_Absolute_Long_Acc_12(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal Absolute_Long_Acc_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B12_Absolute_Long_Acc_12(buf) \
	SET_Objects_Signals_B12_Absolute_Long_Acc_12(buf, 0)

/**
 * Signal Absolute_Long_Acc_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B12_Absolute_Long_Acc_12(x, fmt) \
	((x) * fmt / 20 + fmt * (-64) / 5)

/**
 * Signal Absolute_Long_Acc_12 raw initial value.
 */
#define START_Objects_Signals_B12_Absolute_Long_Acc_12      0

/**
 * Signal Absolute_Long_Acc_12 raw minimum value.
 */
#define MIN_Objects_Signals_B12_Absolute_Long_Acc_12        0

/**
 * Signal Absolute_Long_Acc_12 raw maximum value.
 */
#define MAX_Objects_Signals_B12_Absolute_Long_Acc_12        511

/**
 * Signal Absolute_Long_Acc_12 raw offset value.
 */
#define OFF_Objects_Signals_B12_Absolute_Long_Acc_12        -256

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B12_Long_Distance_12 Signal Long_Distance_12 of Message Objects_Signals_B12 (0x522)
 *
 * PHYSICAL STATES:PS_longDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B12
 * @{
 */

/**
 * Signal Long_Distance_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B12_Long_Distance_12 and \ref GET_Objects_Signals_B12_Long_Distance_12 instead.
 */
#define SIG_Objects_Signals_B12_Long_Distance_12        0, 0, 9, 13

/**
 * Signal Long_Distance_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B12_Long_Distance_12 or \ref INIT_Objects_Signals_B12 instead.
 */
#define SETUP_Objects_Signals_B12_Long_Distance_12      0, 0, 9, 13, 0

/**
 * Get signal Long_Distance_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B12_Long_Distance_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal Long_Distance_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B12_Long_Distance_12(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal Long_Distance_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B12_Long_Distance_12(buf) \
	SET_Objects_Signals_B12_Long_Distance_12(buf, 0)

/**
 * Signal Long_Distance_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B12_Long_Distance_12(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal Long_Distance_12 raw initial value.
 */
#define START_Objects_Signals_B12_Long_Distance_12      0

/**
 * Signal Long_Distance_12 raw minimum value.
 */
#define MIN_Objects_Signals_B12_Long_Distance_12        0

/**
 * Signal Long_Distance_12 raw maximum value.
 */
#define MAX_Objects_Signals_B12_Long_Distance_12        7000

/**
 * Signal Long_Distance_12 raw offset value.
 */
#define OFF_Objects_Signals_B12_Long_Distance_12        0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B12_Lateral_Distance_12 Signal Lateral_Distance_12 of Message Objects_Signals_B12 (0x522)
 *
 * PHYSICAL STATES:PS_latDist
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B12
 * @{
 */

/**
 * Signal Lateral_Distance_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B12_Lateral_Distance_12 and \ref GET_Objects_Signals_B12_Lateral_Distance_12 instead.
 */
#define SIG_Objects_Signals_B12_Lateral_Distance_12        0, 0, 22, 12

/**
 * Signal Lateral_Distance_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B12_Lateral_Distance_12 or \ref INIT_Objects_Signals_B12 instead.
 */
#define SETUP_Objects_Signals_B12_Lateral_Distance_12      0, 0, 22, 12, 0

/**
 * Get signal Lateral_Distance_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B12_Lateral_Distance_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 2) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 10) \
)

/**
 * Set signal Lateral_Distance_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B12_Lateral_Distance_12(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[4] &= ~(0x03 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
}

/**
 * Set signal Lateral_Distance_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B12_Lateral_Distance_12(buf) \
	SET_Objects_Signals_B12_Lateral_Distance_12(buf, 0)

/**
 * Signal Lateral_Distance_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B12_Lateral_Distance_12(x, fmt) \
	((x) * fmt / 20 + fmt * (-512) / 5)

/**
 * Signal Lateral_Distance_12 raw initial value.
 */
#define START_Objects_Signals_B12_Lateral_Distance_12      0

/**
 * Signal Lateral_Distance_12 raw minimum value.
 */
#define MIN_Objects_Signals_B12_Lateral_Distance_12        0

/**
 * Signal Lateral_Distance_12 raw maximum value.
 */
#define MAX_Objects_Signals_B12_Lateral_Distance_12        4094

/**
 * Signal Lateral_Distance_12 raw offset value.
 */
#define OFF_Objects_Signals_B12_Lateral_Distance_12        -2048

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_B12_Reserved Signal Reserved of Message Objects_Signals_B12 (0x522)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_B12
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_B12_Reserved and \ref GET_Objects_Signals_B12_Reserved instead.
 */
#define SIG_Objects_Signals_B12_Reserved            0, 0, 34, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_B12_Reserved or \ref INIT_Objects_Signals_B12 instead.
 */
#define SETUP_Objects_Signals_B12_Reserved          0, 0, 34, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_B12_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_B12_Reserved(buf, val) { \
	buf[4] &= ~(0x3f << 2); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_B12_Reserved(buf) \
	SET_Objects_Signals_B12_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_B12_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_B12_Reserved          0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_B12_Reserved            0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_B12_Reserved            0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_B12_Reserved            0

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C12_Absolute_Speed_12 Signal Absolute_Speed_12 of Message Objects_Signals_C12 (0x523)
 *
 * PHYSICAL STATES:PS_targetSpeed
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C12
 * @{
 */

/**
 * Signal Absolute_Speed_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C12_Absolute_Speed_12 and \ref GET_Objects_Signals_C12_Absolute_Speed_12 instead.
 */
#define SIG_Objects_Signals_C12_Absolute_Speed_12        0, 0, 0, 12

/**
 * Signal Absolute_Speed_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C12_Absolute_Speed_12 or \ref INIT_Objects_Signals_C12 instead.
 */
#define SETUP_Objects_Signals_C12_Absolute_Speed_12      0, 0, 0, 12, 0

/**
 * Get signal Absolute_Speed_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C12_Absolute_Speed_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal Absolute_Speed_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C12_Absolute_Speed_12(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal Absolute_Speed_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C12_Absolute_Speed_12(buf) \
	SET_Objects_Signals_C12_Absolute_Speed_12(buf, 0)

/**
 * Signal Absolute_Speed_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C12_Absolute_Speed_12(x, fmt) \
	((x) * fmt / 20 + fmt * (-100))

/**
 * Signal Absolute_Speed_12 raw initial value.
 */
#define START_Objects_Signals_C12_Absolute_Speed_12      0

/**
 * Signal Absolute_Speed_12 raw minimum value.
 */
#define MIN_Objects_Signals_C12_Absolute_Speed_12        0

/**
 * Signal Absolute_Speed_12 raw maximum value.
 */
#define MAX_Objects_Signals_C12_Absolute_Speed_12        4000

/**
 * Signal Absolute_Speed_12 raw offset value.
 */
#define OFF_Objects_Signals_C12_Absolute_Speed_12        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C12_OBJ_Motion_Status_12 Signal OBJ_Motion_Status_12 of Message Objects_Signals_C12 (0x523)
 *
 * MOBILITY:Motion
 *
 * Contains the value table \ref ENUM_Objects_Signals_C12_OBJ_Motion_Status_12.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C12
 * @{
 */

/**
 * Signal OBJ_Motion_Status_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C12_OBJ_Motion_Status_12 and \ref GET_Objects_Signals_C12_OBJ_Motion_Status_12 instead.
 */
#define SIG_Objects_Signals_C12_OBJ_Motion_Status_12        0, 0, 12, 3

/**
 * Signal OBJ_Motion_Status_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C12_OBJ_Motion_Status_12 or \ref INIT_Objects_Signals_C12 instead.
 */
#define SETUP_Objects_Signals_C12_OBJ_Motion_Status_12      0, 0, 12, 3, 0

/**
 * Get signal OBJ_Motion_Status_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C12_OBJ_Motion_Status_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x07) << 0) \
)

/**
 * Set signal OBJ_Motion_Status_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C12_OBJ_Motion_Status_12(buf, val) { \
	buf[1] &= ~(0x07 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal OBJ_Motion_Status_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C12_OBJ_Motion_Status_12(buf) \
	SET_Objects_Signals_C12_OBJ_Motion_Status_12(buf, 0)

/**
 * Signal OBJ_Motion_Status_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C12_OBJ_Motion_Status_12(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Status_12 raw initial value.
 */
#define START_Objects_Signals_C12_OBJ_Motion_Status_12      0

/**
 * Signal OBJ_Motion_Status_12 raw minimum value.
 */
#define MIN_Objects_Signals_C12_OBJ_Motion_Status_12        0

/**
 * Signal OBJ_Motion_Status_12 raw maximum value.
 */
#define MAX_Objects_Signals_C12_OBJ_Motion_Status_12        4

/**
 * Signal OBJ_Motion_Status_12 raw offset value.
 */
#define OFF_Objects_Signals_C12_OBJ_Motion_Status_12        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C12_OBJ_Motion_Status_12 Value Table for Signal OBJ_Motion_Status_12 in Message Objects_Signals_C12 (0x523)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C12_OBJ_Motion_Status_12.
 *
 * @ingroup SIG_Objects_Signals_C12_OBJ_Motion_Status_12
 */

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Status_12 entry Moving.
 *
 * Slowly
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Status_12
 */
#define Objects_Signals_C12_OBJ_Motion_Status_12_Moving              4

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Status_12 entry Stopped.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Status_12
 */
#define Objects_Signals_C12_OBJ_Motion_Status_12_Stopped             3

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Status_12 entry Stationary.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Status_12
 */
#define Objects_Signals_C12_OBJ_Motion_Status_12_Stationary          2

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Status_12 entry Moving_1.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Status_12
 */
#define Objects_Signals_C12_OBJ_Motion_Status_12_Moving_1            1

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Status_12 entry Unknown.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Status_12
 */
#define Objects_Signals_C12_OBJ_Motion_Status_12_Unknown             0

/**
 * @defgroup SIG_Objects_Signals_C12_OBJ_Motion_Category_12 Signal OBJ_Motion_Category_12 of Message Objects_Signals_C12 (0x523)
 *
 * MOBILITY: movementCategory
 *
 * Contains the value table \ref ENUM_Objects_Signals_C12_OBJ_Motion_Category_12.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C12
 * @{
 */

/**
 * Signal OBJ_Motion_Category_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C12_OBJ_Motion_Category_12 and \ref GET_Objects_Signals_C12_OBJ_Motion_Category_12 instead.
 */
#define SIG_Objects_Signals_C12_OBJ_Motion_Category_12        0, 0, 15, 4

/**
 * Signal OBJ_Motion_Category_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C12_OBJ_Motion_Category_12 or \ref INIT_Objects_Signals_C12 instead.
 */
#define SETUP_Objects_Signals_C12_OBJ_Motion_Category_12      0, 0, 15, 4, 0

/**
 * Get signal OBJ_Motion_Category_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C12_OBJ_Motion_Category_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x07) << 1) \
)

/**
 * Set signal OBJ_Motion_Category_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C12_OBJ_Motion_Category_12(buf, val) { \
	buf[1] &= ~(0x01 << 7); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[2] &= ~(0x07 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal OBJ_Motion_Category_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C12_OBJ_Motion_Category_12(buf) \
	SET_Objects_Signals_C12_OBJ_Motion_Category_12(buf, 0)

/**
 * Signal OBJ_Motion_Category_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C12_OBJ_Motion_Category_12(x, fmt) \
	((x) * fmt)

/**
 * Signal OBJ_Motion_Category_12 raw initial value.
 */
#define START_Objects_Signals_C12_OBJ_Motion_Category_12      0

/**
 * Signal OBJ_Motion_Category_12 raw minimum value.
 */
#define MIN_Objects_Signals_C12_OBJ_Motion_Category_12        0

/**
 * Signal OBJ_Motion_Category_12 raw maximum value.
 */
#define MAX_Objects_Signals_C12_OBJ_Motion_Category_12        12

/**
 * Signal OBJ_Motion_Category_12 raw offset value.
 */
#define OFF_Objects_Signals_C12_OBJ_Motion_Category_12        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12 Value Table for Signal OBJ_Motion_Category_12 in Message Objects_Signals_C12 (0x523)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C12_OBJ_Motion_Category_12.
 *
 * @ingroup SIG_Objects_Signals_C12_OBJ_Motion_Category_12
 */

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_ONCOMING.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_ONCOMING         12

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_PRECEEDING.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_PRECEEDING       11

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_MOVING.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_MOVING           10

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_RTAP.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_RTAP             9

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_LTAP.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_LTAP             8

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_CROSSING.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_CROSSING         7

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_MOVING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_MOVING_OUT       6

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_MOVING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_MOVING_IN        5

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_CLOSE_CUT_IN.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_CLOSE_CUT_IN     4

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_PASSING_OUT.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_PASSING_OUT      3

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_PASSING_IN.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_PASSING_IN       2

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_PASSING.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_PASSING          1

/**
 * Value table Objects_Signals_C12_OBJ_Motion_Category_12 entry MC_UNDEFINED.
 *
 * @ingroup ENUM_Objects_Signals_C12_OBJ_Motion_Category_12
 */
#define Objects_Signals_C12_OBJ_Motion_Category_12_MC_UNDEFINED        0

/**
 * @defgroup SIG_Objects_Signals_C12_Brake_Light_12 Signal Brake_Light_12 of Message Objects_Signals_C12 (0x523)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C12_Brake_Light_12.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C12
 * @{
 */

/**
 * Signal Brake_Light_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C12_Brake_Light_12 and \ref GET_Objects_Signals_C12_Brake_Light_12 instead.
 */
#define SIG_Objects_Signals_C12_Brake_Light_12        0, 0, 19, 1

/**
 * Signal Brake_Light_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C12_Brake_Light_12 or \ref INIT_Objects_Signals_C12 instead.
 */
#define SETUP_Objects_Signals_C12_Brake_Light_12      0, 0, 19, 1, 0

/**
 * Get signal Brake_Light_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C12_Brake_Light_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 3) & 0x01) << 0) \
)

/**
 * Set signal Brake_Light_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C12_Brake_Light_12(buf, val) { \
	buf[2] &= ~(0x01 << 3); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal Brake_Light_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C12_Brake_Light_12(buf) \
	SET_Objects_Signals_C12_Brake_Light_12(buf, 0)

/**
 * Signal Brake_Light_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C12_Brake_Light_12(x, fmt) \
	((x) * fmt)

/**
 * Signal Brake_Light_12 raw initial value.
 */
#define START_Objects_Signals_C12_Brake_Light_12      0

/**
 * Signal Brake_Light_12 raw minimum value.
 */
#define MIN_Objects_Signals_C12_Brake_Light_12        0

/**
 * Signal Brake_Light_12 raw maximum value.
 */
#define MAX_Objects_Signals_C12_Brake_Light_12        1

/**
 * Signal Brake_Light_12 raw offset value.
 */
#define OFF_Objects_Signals_C12_Brake_Light_12        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C12_Brake_Light_12 Value Table for Signal Brake_Light_12 in Message Objects_Signals_C12 (0x523)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C12_Brake_Light_12.
 *
 * @ingroup SIG_Objects_Signals_C12_Brake_Light_12
 */

/**
 * Value table Objects_Signals_C12_Brake_Light_12 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C12_Brake_Light_12
 */
#define Objects_Signals_C12_Brake_Light_12_On                  1

/**
 * Value table Objects_Signals_C12_Brake_Light_12 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C12_Brake_Light_12
 */
#define Objects_Signals_C12_Brake_Light_12_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C12_Turn_Indicator_Right_12 Signal Turn_Indicator_Right_12 of Message Objects_Signals_C12 (0x523)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C12_Turn_Indicator_Right_12.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C12
 * @{
 */

/**
 * Signal Turn_Indicator_Right_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C12_Turn_Indicator_Right_12 and \ref GET_Objects_Signals_C12_Turn_Indicator_Right_12 instead.
 */
#define SIG_Objects_Signals_C12_Turn_Indicator_Right_12        0, 0, 20, 1

/**
 * Signal Turn_Indicator_Right_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C12_Turn_Indicator_Right_12 or \ref INIT_Objects_Signals_C12 instead.
 */
#define SETUP_Objects_Signals_C12_Turn_Indicator_Right_12      0, 0, 20, 1, 0

/**
 * Get signal Turn_Indicator_Right_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C12_Turn_Indicator_Right_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Right_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C12_Turn_Indicator_Right_12(buf, val) { \
	buf[2] &= ~(0x01 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal Turn_Indicator_Right_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C12_Turn_Indicator_Right_12(buf) \
	SET_Objects_Signals_C12_Turn_Indicator_Right_12(buf, 0)

/**
 * Signal Turn_Indicator_Right_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C12_Turn_Indicator_Right_12(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Right_12 raw initial value.
 */
#define START_Objects_Signals_C12_Turn_Indicator_Right_12      0

/**
 * Signal Turn_Indicator_Right_12 raw minimum value.
 */
#define MIN_Objects_Signals_C12_Turn_Indicator_Right_12        0

/**
 * Signal Turn_Indicator_Right_12 raw maximum value.
 */
#define MAX_Objects_Signals_C12_Turn_Indicator_Right_12        1

/**
 * Signal Turn_Indicator_Right_12 raw offset value.
 */
#define OFF_Objects_Signals_C12_Turn_Indicator_Right_12        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C12_Turn_Indicator_Right_12 Value Table for Signal Turn_Indicator_Right_12 in Message Objects_Signals_C12 (0x523)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C12_Turn_Indicator_Right_12.
 *
 * @ingroup SIG_Objects_Signals_C12_Turn_Indicator_Right_12
 */

/**
 * Value table Objects_Signals_C12_Turn_Indicator_Right_12 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C12_Turn_Indicator_Right_12
 */
#define Objects_Signals_C12_Turn_Indicator_Right_12_On                  1

/**
 * Value table Objects_Signals_C12_Turn_Indicator_Right_12 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C12_Turn_Indicator_Right_12
 */
#define Objects_Signals_C12_Turn_Indicator_Right_12_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C12_Turn_Indicator_Left_12 Signal Turn_Indicator_Left_12 of Message Objects_Signals_C12 (0x523)
 *
 * This signal will only be valid when the object is the CIPV
 *
 * Contains the value table \ref ENUM_Objects_Signals_C12_Turn_Indicator_Left_12.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C12
 * @{
 */

/**
 * Signal Turn_Indicator_Left_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C12_Turn_Indicator_Left_12 and \ref GET_Objects_Signals_C12_Turn_Indicator_Left_12 instead.
 */
#define SIG_Objects_Signals_C12_Turn_Indicator_Left_12        0, 0, 21, 1

/**
 * Signal Turn_Indicator_Left_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C12_Turn_Indicator_Left_12 or \ref INIT_Objects_Signals_C12 instead.
 */
#define SETUP_Objects_Signals_C12_Turn_Indicator_Left_12      0, 0, 21, 1, 0

/**
 * Get signal Turn_Indicator_Left_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C12_Turn_Indicator_Left_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x01) << 0) \
)

/**
 * Set signal Turn_Indicator_Left_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C12_Turn_Indicator_Left_12(buf, val) { \
	buf[2] &= ~(0x01 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal Turn_Indicator_Left_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C12_Turn_Indicator_Left_12(buf) \
	SET_Objects_Signals_C12_Turn_Indicator_Left_12(buf, 0)

/**
 * Signal Turn_Indicator_Left_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C12_Turn_Indicator_Left_12(x, fmt) \
	((x) * fmt)

/**
 * Signal Turn_Indicator_Left_12 raw initial value.
 */
#define START_Objects_Signals_C12_Turn_Indicator_Left_12      0

/**
 * Signal Turn_Indicator_Left_12 raw minimum value.
 */
#define MIN_Objects_Signals_C12_Turn_Indicator_Left_12        0

/**
 * Signal Turn_Indicator_Left_12 raw maximum value.
 */
#define MAX_Objects_Signals_C12_Turn_Indicator_Left_12        1

/**
 * Signal Turn_Indicator_Left_12 raw offset value.
 */
#define OFF_Objects_Signals_C12_Turn_Indicator_Left_12        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C12_Turn_Indicator_Left_12 Value Table for Signal Turn_Indicator_Left_12 in Message Objects_Signals_C12 (0x523)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C12_Turn_Indicator_Left_12.
 *
 * @ingroup SIG_Objects_Signals_C12_Turn_Indicator_Left_12
 */

/**
 * Value table Objects_Signals_C12_Turn_Indicator_Left_12 entry On.
 *
 * @ingroup ENUM_Objects_Signals_C12_Turn_Indicator_Left_12
 */
#define Objects_Signals_C12_Turn_Indicator_Left_12_On                  1

/**
 * Value table Objects_Signals_C12_Turn_Indicator_Left_12 entry Off.
 *
 * @ingroup ENUM_Objects_Signals_C12_Turn_Indicator_Left_12
 */
#define Objects_Signals_C12_Turn_Indicator_Left_12_Off                 0

/**
 * @defgroup SIG_Objects_Signals_C12_Light_indicator_validity_12 Signal Light_indicator_validity_12 of Message Objects_Signals_C12 (0x523)
 *
 * VLI_INFO:Valid
 *
 * Contains the value table \ref ENUM_Objects_Signals_C12_Light_indicator_validity_12.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C12
 * @{
 */

/**
 * Signal Light_indicator_validity_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C12_Light_indicator_validity_12 and \ref GET_Objects_Signals_C12_Light_indicator_validity_12 instead.
 */
#define SIG_Objects_Signals_C12_Light_indicator_validity_12        0, 0, 22, 1

/**
 * Signal Light_indicator_validity_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C12_Light_indicator_validity_12 or \ref INIT_Objects_Signals_C12 instead.
 */
#define SETUP_Objects_Signals_C12_Light_indicator_validity_12      0, 0, 22, 1, 0

/**
 * Get signal Light_indicator_validity_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C12_Light_indicator_validity_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal Light_indicator_validity_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C12_Light_indicator_validity_12(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal Light_indicator_validity_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C12_Light_indicator_validity_12(buf) \
	SET_Objects_Signals_C12_Light_indicator_validity_12(buf, 0)

/**
 * Signal Light_indicator_validity_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C12_Light_indicator_validity_12(x, fmt) \
	((x) * fmt)

/**
 * Signal Light_indicator_validity_12 raw initial value.
 */
#define START_Objects_Signals_C12_Light_indicator_validity_12      0

/**
 * Signal Light_indicator_validity_12 raw minimum value.
 */
#define MIN_Objects_Signals_C12_Light_indicator_validity_12        0

/**
 * Signal Light_indicator_validity_12 raw maximum value.
 */
#define MAX_Objects_Signals_C12_Light_indicator_validity_12        1

/**
 * Signal Light_indicator_validity_12 raw offset value.
 */
#define OFF_Objects_Signals_C12_Light_indicator_validity_12        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Objects_Signals_C12_Light_indicator_validity_12 Value Table for Signal Light_indicator_validity_12 in Message Objects_Signals_C12 (0x523)
 *
 * Enum values defined for \ref SIG_Objects_Signals_C12_Light_indicator_validity_12.
 *
 * @ingroup SIG_Objects_Signals_C12_Light_indicator_validity_12
 */

/**
 * Value table Objects_Signals_C12_Light_indicator_validity_12 entry True.
 *
 * @ingroup ENUM_Objects_Signals_C12_Light_indicator_validity_12
 */
#define Objects_Signals_C12_Light_indicator_validity_12_True                1

/**
 * Value table Objects_Signals_C12_Light_indicator_validity_12 entry False.
 *
 * @ingroup ENUM_Objects_Signals_C12_Light_indicator_validity_12
 */
#define Objects_Signals_C12_Light_indicator_validity_12_False               0

/**
 * @defgroup SIG_Objects_Signals_C12_OBJ_Angle_Mid_12 Signal OBJ_Angle_Mid_12 of Message Objects_Signals_C12 (0x523)
 *
 * ANGULAR STATES: angleMid
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C12
 * @{
 */

/**
 * Signal OBJ_Angle_Mid_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C12_OBJ_Angle_Mid_12 and \ref GET_Objects_Signals_C12_OBJ_Angle_Mid_12 instead.
 */
#define SIG_Objects_Signals_C12_OBJ_Angle_Mid_12        0, 0, 23, 14

/**
 * Signal OBJ_Angle_Mid_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C12_OBJ_Angle_Mid_12 or \ref INIT_Objects_Signals_C12 instead.
 */
#define SETUP_Objects_Signals_C12_OBJ_Angle_Mid_12      0, 0, 23, 14, 0

/**
 * Get signal OBJ_Angle_Mid_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C12_OBJ_Angle_Mid_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 9) \
)

/**
 * Set signal OBJ_Angle_Mid_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C12_OBJ_Angle_Mid_12(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x1f) << 0; \
}

/**
 * Set signal OBJ_Angle_Mid_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C12_OBJ_Angle_Mid_12(buf) \
	SET_Objects_Signals_C12_OBJ_Angle_Mid_12(buf, 0)

/**
 * Signal OBJ_Angle_Mid_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C12_OBJ_Angle_Mid_12(x, fmt) \
	((x) * fmt / 5000 + fmt * 1571 / (-1000))

/**
 * Signal OBJ_Angle_Mid_12 raw initial value.
 */
#define START_Objects_Signals_C12_OBJ_Angle_Mid_12      0

/**
 * Signal OBJ_Angle_Mid_12 raw minimum value.
 */
#define MIN_Objects_Signals_C12_OBJ_Angle_Mid_12        0

/**
 * Signal OBJ_Angle_Mid_12 raw maximum value.
 */
#define MAX_Objects_Signals_C12_OBJ_Angle_Mid_12        15710

/**
 * Signal OBJ_Angle_Mid_12 raw offset value.
 */
#define OFF_Objects_Signals_C12_OBJ_Angle_Mid_12        -7855

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C12_OBJ_Angle_Rate_12 Signal OBJ_Angle_Rate_12 of Message Objects_Signals_C12 (0x523)
 *
 * 6.3.6.3
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C12
 * @{
 */

/**
 * Signal OBJ_Angle_Rate_12 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C12_OBJ_Angle_Rate_12 and \ref GET_Objects_Signals_C12_OBJ_Angle_Rate_12 instead.
 */
#define SIG_Objects_Signals_C12_OBJ_Angle_Rate_12        0, 0, 37, 12

/**
 * Signal OBJ_Angle_Rate_12 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C12_OBJ_Angle_Rate_12 or \ref INIT_Objects_Signals_C12 instead.
 */
#define SETUP_Objects_Signals_C12_OBJ_Angle_Rate_12      0, 0, 37, 12, 0

/**
 * Get signal OBJ_Angle_Rate_12 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C12_OBJ_Angle_Rate_12(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x01) << 11) \
)

/**
 * Set signal OBJ_Angle_Rate_12 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C12_OBJ_Angle_Rate_12(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
}

/**
 * Set signal OBJ_Angle_Rate_12 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C12_OBJ_Angle_Rate_12(buf) \
	SET_Objects_Signals_C12_OBJ_Angle_Rate_12(buf, 0)

/**
 * Signal OBJ_Angle_Rate_12 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C12_OBJ_Angle_Rate_12(x, fmt) \
	((x) * fmt / 500 + fmt * (-1117) / 500)

/**
 * Signal OBJ_Angle_Rate_12 raw initial value.
 */
#define START_Objects_Signals_C12_OBJ_Angle_Rate_12      0

/**
 * Signal OBJ_Angle_Rate_12 raw minimum value.
 */
#define MIN_Objects_Signals_C12_OBJ_Angle_Rate_12        0

/**
 * Signal OBJ_Angle_Rate_12 raw maximum value.
 */
#define MAX_Objects_Signals_C12_OBJ_Angle_Rate_12        2233

/**
 * Signal OBJ_Angle_Rate_12 raw offset value.
 */
#define OFF_Objects_Signals_C12_OBJ_Angle_Rate_12        -1117

/**
 * @}
 */

/**
 * @defgroup SIG_Objects_Signals_C12_Reserved Signal Reserved of Message Objects_Signals_C12 (0x523)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Objects_Signals_C12
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Objects_Signals_C12_Reserved and \ref GET_Objects_Signals_C12_Reserved instead.
 */
#define SIG_Objects_Signals_C12_Reserved            0, 0, 49, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Objects_Signals_C12_Reserved or \ref INIT_Objects_Signals_C12 instead.
 */
#define SETUP_Objects_Signals_C12_Reserved          0, 0, 49, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Objects_Signals_C12_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Objects_Signals_C12_Reserved(buf, val) { \
	buf[6] &= ~(0x7f << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Objects_Signals_C12_Reserved(buf) \
	SET_Objects_Signals_C12_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Objects_Signals_C12_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Objects_Signals_C12_Reserved          0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Objects_Signals_C12_Reserved            0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Objects_Signals_C12_Reserved            0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Objects_Signals_C12_Reserved            0

/**
 * @}
 */
#endif
