
#ifndef HOLO_SENSORS_ACEINNA_IMU_DBC_H_
#define HOLO_SENSORS_ACEINNA_IMU_DBC_H_

typedef unsigned char ubyte;
typedef unsigned int uword;

/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2018年 08月 16日 星期四 15:09:40 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_mtlt305d
 */

/**
 * @defgroup DB_mtlt305d CAN Database mtlt305d
 *
 * Path to file: output/mtlt305d.dbc
 *
 * Provides the following ECUs:
 * - \ref ECU_Aceinna
 */

/**
 * @defgroup ECU_Aceinna Electronics Control Unit Aceinna
 *
 * 3 Dimension Gyro Module
 *
 * This ECU was defined in \ref DB_mtlt305d.
 *
 * TX messages:
 * - \ref MSG_Aceinna_AngleRate
 * - \ref MSG_Aceinna_Accel
 * - \ref MSG_Aceinna_Angles
 *
 * RX signals:
 *
 * @ingroup DB_mtlt305d
 */

/**
 * @defgroup MSG_Aceinna_AngleRate Message Aceinna_AngleRate (0xcf02a80)
 *
 * Sent by \ref ECU_Aceinna.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Aceinna_AngleRate_Aceinna_GyroZ
 * - \ref SIG_Aceinna_AngleRate_Aceinna_GyroY
 * - \ref SIG_Aceinna_AngleRate_Aceinna_GyroX
 *
 * @ingroup ECU_Aceinna
 * @{
 */

/**
 * Message Aceinna_AngleRate configuration tuple.
 */
#define MSG_Aceinna_AngleRate                       0xcf02a80, 1, 8

/**
 * Message Aceinna_AngleRate id.
 */
#define ID_Aceinna_AngleRate                        0xcf02a80

/**
 * Message Aceinna_AngleRate extended id bit.
 */
#define EXT_Aceinna_AngleRate                       1

/**
 * Message Aceinna_AngleRate Data Length Count.
 */
#define DLC_Aceinna_AngleRate                       8

/**
 * Message Aceinna_AngleRate cycle time.
 */
#define CYCLE_Aceinna_AngleRate                     0

/**
 * Message Aceinna_AngleRate fast cycle time.
 */
#define FAST_Aceinna_AngleRate                      0

/**
 * Initialise message Aceinna_AngleRate buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Aceinna_AngleRate(buf) { \
	INITSIG_Aceinna_AngleRate_Aceinna_GyroZ(buf); \
	INITSIG_Aceinna_AngleRate_Aceinna_GyroY(buf); \
	INITSIG_Aceinna_AngleRate_Aceinna_GyroX(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Aceinna_Accel Message Aceinna_Accel (0x8f02d80)
 *
 * Sent by \ref ECU_Aceinna.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Aceinna_Accel_Aceinna_AccZ
 * - \ref SIG_Aceinna_Accel_Aceinna_AccY
 * - \ref SIG_Aceinna_Accel_Aceinna_AccX
 *
 * @ingroup ECU_Aceinna
 * @{
 */

/**
 * Message Aceinna_Accel configuration tuple.
 */
#define MSG_Aceinna_Accel                           0x8f02d80, 1, 8

/**
 * Message Aceinna_Accel id.
 */
#define ID_Aceinna_Accel                            0x8f02d80

/**
 * Message Aceinna_Accel extended id bit.
 */
#define EXT_Aceinna_Accel                           1

/**
 * Message Aceinna_Accel Data Length Count.
 */
#define DLC_Aceinna_Accel                           8

/**
 * Message Aceinna_Accel cycle time.
 */
#define CYCLE_Aceinna_Accel                         0

/**
 * Message Aceinna_Accel fast cycle time.
 */
#define FAST_Aceinna_Accel                          0

/**
 * Initialise message Aceinna_Accel buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Aceinna_Accel(buf) { \
	INITSIG_Aceinna_Accel_Aceinna_AccZ(buf); \
	INITSIG_Aceinna_Accel_Aceinna_AccY(buf); \
	INITSIG_Aceinna_Accel_Aceinna_AccX(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Aceinna_Angles Message Aceinna_Angles (0xcf02980)
 *
 * Sent by \ref ECU_Aceinna.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Aceinna_Angles_Aceinna_Roll
 * - \ref SIG_Aceinna_Angles_Aceinna_Pitch
 *
 * @ingroup ECU_Aceinna
 * @{
 */

/**
 * Message Aceinna_Angles configuration tuple.
 */
#define MSG_Aceinna_Angles                          0xcf02980, 1, 8

/**
 * Message Aceinna_Angles id.
 */
#define ID_Aceinna_Angles                           0xcf02980

/**
 * Message Aceinna_Angles extended id bit.
 */
#define EXT_Aceinna_Angles                          1

/**
 * Message Aceinna_Angles Data Length Count.
 */
#define DLC_Aceinna_Angles                          8

/**
 * Message Aceinna_Angles cycle time.
 */
#define CYCLE_Aceinna_Angles                        0

/**
 * Message Aceinna_Angles fast cycle time.
 */
#define FAST_Aceinna_Angles                         0

/**
 * Initialise message Aceinna_Angles buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Aceinna_Angles(buf) { \
	INITSIG_Aceinna_Angles_Aceinna_Roll(buf); \
	INITSIG_Aceinna_Angles_Aceinna_Pitch(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_Aceinna_AngleRate_Aceinna_GyroZ Signal Aceinna_GyroZ of Message Aceinna_AngleRate (0xcf02a80)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Aceinna_AngleRate
 * @{
 */

/**
 * Signal Aceinna_GyroZ configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Aceinna_AngleRate_Aceinna_GyroZ and \ref GET_Aceinna_AngleRate_Aceinna_GyroZ instead.
 */
#define SIG_Aceinna_AngleRate_Aceinna_GyroZ         0, 0, 32, 16

/**
 * Signal Aceinna_GyroZ setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Aceinna_AngleRate_Aceinna_GyroZ or \ref INIT_Aceinna_AngleRate instead.
 */
#define SETUP_Aceinna_AngleRate_Aceinna_GyroZ       0, 0, 32, 16, 32000

/**
 * Get signal Aceinna_GyroZ from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Aceinna_AngleRate_Aceinna_GyroZ(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 0) & 0xff) << 0) \
	| (uword)(+(uword)((buf[5] >> 0) & 0xff) << 8) \
)

/**
 * Set signal Aceinna_GyroZ in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Aceinna_AngleRate_Aceinna_GyroZ(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal Aceinna_GyroZ in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Aceinna_AngleRate_Aceinna_GyroZ(buf) \
	SET_Aceinna_AngleRate_Aceinna_GyroZ(buf, 32000)

/**
 * Signal Aceinna_GyroZ value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Aceinna_AngleRate_Aceinna_GyroZ(x, fmt) \
	((x) * fmt / 128 + fmt * (-250))

/**
 * Signal Aceinna_GyroZ raw initial value.
 */
#define START_Aceinna_AngleRate_Aceinna_GyroZ       32000

/**
 * Signal Aceinna_GyroZ raw minimum value.
 */
#define MIN_Aceinna_AngleRate_Aceinna_GyroZ         0

/**
 * Signal Aceinna_GyroZ raw maximum value.
 */
#define MAX_Aceinna_AngleRate_Aceinna_GyroZ         65535

/**
 * Signal Aceinna_GyroZ raw offset value.
 */
#define OFF_Aceinna_AngleRate_Aceinna_GyroZ         -32000

/**
 * @}
 */

/**
 * @defgroup SIG_Aceinna_AngleRate_Aceinna_GyroY Signal Aceinna_GyroY of Message Aceinna_AngleRate (0xcf02a80)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Aceinna_AngleRate
 * @{
 */

/**
 * Signal Aceinna_GyroY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Aceinna_AngleRate_Aceinna_GyroY and \ref GET_Aceinna_AngleRate_Aceinna_GyroY instead.
 */
#define SIG_Aceinna_AngleRate_Aceinna_GyroY         0, 0, 16, 16

/**
 * Signal Aceinna_GyroY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Aceinna_AngleRate_Aceinna_GyroY or \ref INIT_Aceinna_AngleRate instead.
 */
#define SETUP_Aceinna_AngleRate_Aceinna_GyroY       0, 0, 16, 16, 32000

/**
 * Get signal Aceinna_GyroY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Aceinna_AngleRate_Aceinna_GyroY(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0xff) << 0) \
	| (uword)(+(uword)((buf[3] >> 0) & 0xff) << 8) \
)

/**
 * Set signal Aceinna_GyroY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Aceinna_AngleRate_Aceinna_GyroY(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal Aceinna_GyroY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Aceinna_AngleRate_Aceinna_GyroY(buf) \
	SET_Aceinna_AngleRate_Aceinna_GyroY(buf, 32000)

/**
 * Signal Aceinna_GyroY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Aceinna_AngleRate_Aceinna_GyroY(x, fmt) \
	((x) * fmt / 128 + fmt * (-250))

/**
 * Signal Aceinna_GyroY raw initial value.
 */
#define START_Aceinna_AngleRate_Aceinna_GyroY       32000

/**
 * Signal Aceinna_GyroY raw minimum value.
 */
#define MIN_Aceinna_AngleRate_Aceinna_GyroY         0

/**
 * Signal Aceinna_GyroY raw maximum value.
 */
#define MAX_Aceinna_AngleRate_Aceinna_GyroY         65535

/**
 * Signal Aceinna_GyroY raw offset value.
 */
#define OFF_Aceinna_AngleRate_Aceinna_GyroY         -32000

/**
 * @}
 */

/**
 * @defgroup SIG_Aceinna_AngleRate_Aceinna_GyroX Signal Aceinna_GyroX of Message Aceinna_AngleRate (0xcf02a80)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Aceinna_AngleRate
 * @{
 */

/**
 * Signal Aceinna_GyroX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Aceinna_AngleRate_Aceinna_GyroX and \ref GET_Aceinna_AngleRate_Aceinna_GyroX instead.
 */
#define SIG_Aceinna_AngleRate_Aceinna_GyroX         0, 0, 0, 16

/**
 * Signal Aceinna_GyroX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Aceinna_AngleRate_Aceinna_GyroX or \ref INIT_Aceinna_AngleRate instead.
 */
#define SETUP_Aceinna_AngleRate_Aceinna_GyroX       0, 0, 0, 16, 32000

/**
 * Get signal Aceinna_GyroX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Aceinna_AngleRate_Aceinna_GyroX(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
	| (uword)(+(uword)((buf[1] >> 0) & 0xff) << 8) \
)

/**
 * Set signal Aceinna_GyroX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Aceinna_AngleRate_Aceinna_GyroX(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal Aceinna_GyroX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Aceinna_AngleRate_Aceinna_GyroX(buf) \
	SET_Aceinna_AngleRate_Aceinna_GyroX(buf, 32000)

/**
 * Signal Aceinna_GyroX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Aceinna_AngleRate_Aceinna_GyroX(x, fmt) \
	((x) * fmt / 128 + fmt * (-250))

/**
 * Signal Aceinna_GyroX raw initial value.
 */
#define START_Aceinna_AngleRate_Aceinna_GyroX       32000

/**
 * Signal Aceinna_GyroX raw minimum value.
 */
#define MIN_Aceinna_AngleRate_Aceinna_GyroX         0

/**
 * Signal Aceinna_GyroX raw maximum value.
 */
#define MAX_Aceinna_AngleRate_Aceinna_GyroX         65535

/**
 * Signal Aceinna_GyroX raw offset value.
 */
#define OFF_Aceinna_AngleRate_Aceinna_GyroX         -32000

/**
 * @}
 */

/**
 * @defgroup SIG_Aceinna_Accel_Aceinna_AccZ Signal Aceinna_AccZ of Message Aceinna_Accel (0x8f02d80)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Aceinna_Accel
 * @{
 */

/**
 * Signal Aceinna_AccZ configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Aceinna_Accel_Aceinna_AccZ and \ref GET_Aceinna_Accel_Aceinna_AccZ instead.
 */
#define SIG_Aceinna_Accel_Aceinna_AccZ              0, 0, 32, 16

/**
 * Signal Aceinna_AccZ setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Aceinna_Accel_Aceinna_AccZ or \ref INIT_Aceinna_Accel instead.
 */
#define SETUP_Aceinna_Accel_Aceinna_AccZ            0, 0, 32, 16, 32000

/**
 * Get signal Aceinna_AccZ from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Aceinna_Accel_Aceinna_AccZ(buf) (0 \
	| (ubyte)(+(ubyte)((buf[4] >> 0) & 0xff) << 0) \
	| (uword)(+(uword)((buf[5] >> 0) & 0xff) << 8) \
)

/**
 * Set signal Aceinna_AccZ in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Aceinna_Accel_Aceinna_AccZ(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal Aceinna_AccZ in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Aceinna_Accel_Aceinna_AccZ(buf) \
	SET_Aceinna_Accel_Aceinna_AccZ(buf, 32000)

/**
 * Signal Aceinna_AccZ value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Aceinna_Accel_Aceinna_AccZ(x, fmt) \
	((x) * fmt / 100 + fmt * (-320))

/**
 * Signal Aceinna_AccZ raw initial value.
 */
#define START_Aceinna_Accel_Aceinna_AccZ            32000

/**
 * Signal Aceinna_AccZ raw minimum value.
 */
#define MIN_Aceinna_Accel_Aceinna_AccZ              0

/**
 * Signal Aceinna_AccZ raw maximum value.
 */
#define MAX_Aceinna_Accel_Aceinna_AccZ              65535

/**
 * Signal Aceinna_AccZ raw offset value.
 */
#define OFF_Aceinna_Accel_Aceinna_AccZ              -32000

/**
 * @}
 */

/**
 * @defgroup SIG_Aceinna_Accel_Aceinna_AccY Signal Aceinna_AccY of Message Aceinna_Accel (0x8f02d80)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Aceinna_Accel
 * @{
 */

/**
 * Signal Aceinna_AccY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Aceinna_Accel_Aceinna_AccY and \ref GET_Aceinna_Accel_Aceinna_AccY instead.
 */
#define SIG_Aceinna_Accel_Aceinna_AccY              0, 0, 16, 16

/**
 * Signal Aceinna_AccY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Aceinna_Accel_Aceinna_AccY or \ref INIT_Aceinna_Accel instead.
 */
#define SETUP_Aceinna_Accel_Aceinna_AccY            0, 0, 16, 16, 32000

/**
 * Get signal Aceinna_AccY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Aceinna_Accel_Aceinna_AccY(buf) (0 \
	| (ubyte)(+(ubyte)((buf[2] >> 0) & 0xff) << 0) \
	| (uword)(+(uword)((buf[3] >> 0) & 0xff) << 8) \
)

/**
 * Set signal Aceinna_AccY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Aceinna_Accel_Aceinna_AccY(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal Aceinna_AccY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Aceinna_Accel_Aceinna_AccY(buf) \
	SET_Aceinna_Accel_Aceinna_AccY(buf, 32000)

/**
 * Signal Aceinna_AccY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Aceinna_Accel_Aceinna_AccY(x, fmt) \
	((x) * fmt / 100 + fmt * (-320))

/**
 * Signal Aceinna_AccY raw initial value.
 */
#define START_Aceinna_Accel_Aceinna_AccY            32000

/**
 * Signal Aceinna_AccY raw minimum value.
 */
#define MIN_Aceinna_Accel_Aceinna_AccY              0

/**
 * Signal Aceinna_AccY raw maximum value.
 */
#define MAX_Aceinna_Accel_Aceinna_AccY              65535

/**
 * Signal Aceinna_AccY raw offset value.
 */
#define OFF_Aceinna_Accel_Aceinna_AccY              -32000

/**
 * @}
 */

/**
 * @defgroup SIG_Aceinna_Accel_Aceinna_AccX Signal Aceinna_AccX of Message Aceinna_Accel (0x8f02d80)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Aceinna_Accel
 * @{
 */

/**
 * Signal Aceinna_AccX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Aceinna_Accel_Aceinna_AccX and \ref GET_Aceinna_Accel_Aceinna_AccX instead.
 */
#define SIG_Aceinna_Accel_Aceinna_AccX              0, 0, 0, 16

/**
 * Signal Aceinna_AccX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Aceinna_Accel_Aceinna_AccX or \ref INIT_Aceinna_Accel instead.
 */
#define SETUP_Aceinna_Accel_Aceinna_AccX            0, 0, 0, 16, 32000

/**
 * Get signal Aceinna_AccX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Aceinna_Accel_Aceinna_AccX(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
	| (uword)(+(uword)((buf[1] >> 0) & 0xff) << 8) \
)

/**
 * Set signal Aceinna_AccX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Aceinna_Accel_Aceinna_AccX(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
}

/**
 * Set signal Aceinna_AccX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Aceinna_Accel_Aceinna_AccX(buf) \
	SET_Aceinna_Accel_Aceinna_AccX(buf, 32000)

/**
 * Signal Aceinna_AccX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Aceinna_Accel_Aceinna_AccX(x, fmt) \
	((x) * fmt / 100 + fmt * (-320))

/**
 * Signal Aceinna_AccX raw initial value.
 */
#define START_Aceinna_Accel_Aceinna_AccX            32000

/**
 * Signal Aceinna_AccX raw minimum value.
 */
#define MIN_Aceinna_Accel_Aceinna_AccX              0

/**
 * Signal Aceinna_AccX raw maximum value.
 */
#define MAX_Aceinna_Accel_Aceinna_AccX              65535

/**
 * Signal Aceinna_AccX raw offset value.
 */
#define OFF_Aceinna_Accel_Aceinna_AccX              -32000

/**
 * @}
 */

/**
 * @defgroup SIG_Aceinna_Angles_Aceinna_Roll Signal Aceinna_Roll of Message Aceinna_Angles (0xcf02980)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Aceinna_Angles
 * @{
 */

/**
 * Signal Aceinna_Roll configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Aceinna_Angles_Aceinna_Roll and \ref GET_Aceinna_Angles_Aceinna_Roll instead.
 */
#define SIG_Aceinna_Angles_Aceinna_Roll             0, 0, 24, 24

/**
 * Signal Aceinna_Roll setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Aceinna_Angles_Aceinna_Roll or \ref INIT_Aceinna_Angles instead.
 */
#define SETUP_Aceinna_Angles_Aceinna_Roll           0, 0, 24, 24, 8.19189e+06

/**
 * Get signal Aceinna_Roll from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Aceinna_Angles_Aceinna_Roll(buf) (0 \
	| (ubyte)(+(ubyte)((buf[3] >> 0) & 0xff) << 0) \
	| (uword)(+(uword)((buf[4] >> 0) & 0xff) << 8) \
	| (ulong)(+(ulong)((buf[5] >> 0) & 0xff) << 16) \
)

/**
 * Set signal Aceinna_Roll in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Aceinna_Angles_Aceinna_Roll(buf, val) { \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
}

/**
 * Set signal Aceinna_Roll in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Aceinna_Angles_Aceinna_Roll(buf) \
	SET_Aceinna_Angles_Aceinna_Roll(buf, 8.19189e+06)

/**
 * Signal Aceinna_Roll value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Aceinna_Angles_Aceinna_Roll(x, fmt) \
	((x) * fmt * 15259 / 500000000 + fmt * (-250))

/**
 * Signal Aceinna_Roll raw initial value.
 */
#define START_Aceinna_Angles_Aceinna_Roll           8.19189e+06

/**
 * Signal Aceinna_Roll raw minimum value.
 */
#define MIN_Aceinna_Angles_Aceinna_Roll             0

/**
 * Signal Aceinna_Roll raw maximum value.
 */
#define MAX_Aceinna_Angles_Aceinna_Roll             16777215

/**
 * Signal Aceinna_Roll raw offset value.
 */
#define OFF_Aceinna_Angles_Aceinna_Roll             -8191887

/**
 * @}
 */

/**
 * @defgroup SIG_Aceinna_Angles_Aceinna_Pitch Signal Aceinna_Pitch of Message Aceinna_Angles (0xcf02980)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Aceinna_Angles
 * @{
 */

/**
 * Signal Aceinna_Pitch configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Aceinna_Angles_Aceinna_Pitch and \ref GET_Aceinna_Angles_Aceinna_Pitch instead.
 */
#define SIG_Aceinna_Angles_Aceinna_Pitch            0, 0, 0, 24

/**
 * Signal Aceinna_Pitch setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Aceinna_Angles_Aceinna_Pitch or \ref INIT_Aceinna_Angles instead.
 */
#define SETUP_Aceinna_Angles_Aceinna_Pitch          0, 0, 0, 24, 8191887

/**
 * Get signal Aceinna_Pitch from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Aceinna_Angles_Aceinna_Pitch(buf) (0 \
	| (ubyte)(+(ubyte)((buf[0] >> 0) & 0xff) << 0) \
	| (uword)(+(uword)((buf[1] >> 0) & 0xff) << 8) \
	| (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 16) \
)

/**
 * Set signal Aceinna_Pitch in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Aceinna_Angles_Aceinna_Pitch(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((ubyte)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((ubyte)((uword)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((ubyte)((ulong)(val) >> 16) & 0xff) << 0; \
}

/**
 * Set signal Aceinna_Pitch in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Aceinna_Angles_Aceinna_Pitch(buf) \
	SET_Aceinna_Angles_Aceinna_Pitch(buf, 8191887)

/**
 * Signal Aceinna_Pitch value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Aceinna_Angles_Aceinna_Pitch(x, fmt) \
	((x) * fmt * 15259 / 500000000 + fmt * (-250))

/**
 * Signal Aceinna_Pitch raw initial value.
 */
#define START_Aceinna_Angles_Aceinna_Pitch          8191887

/**
 * Signal Aceinna_Pitch raw minimum value.
 */
#define MIN_Aceinna_Angles_Aceinna_Pitch            0

/**
 * Signal Aceinna_Pitch raw maximum value.
 */
#define MAX_Aceinna_Angles_Aceinna_Pitch            16777215

/**
 * Signal Aceinna_Pitch raw offset value.
 */
#define OFF_Aceinna_Angles_Aceinna_Pitch            -8191887

/**
 * @}
 */
#endif
