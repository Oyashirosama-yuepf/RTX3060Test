/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2021年 06月 10日 星期四 14:51:26 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_asensing_dbc
 */

/**
 * @defgroup DB_asensing_dbc CAN Database asensing_dbc
 *
 * Path to file: output/asensing_dbc.dbc
 *
 * Provides the following ECUs:
 * - \ref ECU_GWBoard
 * - \ref ECU_INS570
 */

/**
 * @defgroup ECU_GWBoard Electronics Control Unit GWBoard
 *
 * This ECU was defined in \ref DB_asensing_dbc.
 *
 * TX messages:
 * - \ref MSG_VehSpdR
 * - \ref MSG_VehSpdF
 * - \ref MSG_General_Status
 *
 * RX signals:
 *
 * @ingroup DB_asensing_dbc
 */

/**
 * @defgroup ECU_INS570 Electronics Control Unit INS570
 *
 * This ECU was defined in \ref DB_asensing_dbc.
 *
 * TX messages:
 * - \ref MSG_INS_Std
 * - \ref MSG_INS_DataInfo
 * - \ref MSG_INS_Speed
 * - \ref MSG_INS_LatitudeLongitude
 * - \ref MSG_INS_HeightTime
 * - \ref MSG_INS_HeadingPitchRoll
 * - \ref MSG_INS_GYRO
 * - \ref MSG_INS_Acc
 *
 * RX signals:
 *
 * @ingroup DB_asensing_dbc
 */

/**
 * @defgroup MSG_GPS_HeightAndWeek Message GPS_HeightAndWeek (0x50a)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_GPS_HeightAndWeek_GPS_Week
 *
 * @{
 */

/**
 * Message GPS_HeightAndWeek configuration tuple.
 */
#define MSG_GPS_HeightAndWeek                       0x50a, 0, 8

/**
 * Message GPS_HeightAndWeek id.
 */
#define ID_GPS_HeightAndWeek                        0x50a

/**
 * Message GPS_HeightAndWeek extended id bit.
 */
#define EXT_GPS_HeightAndWeek                       0

/**
 * Message GPS_HeightAndWeek Data Length Count.
 */
#define DLC_GPS_HeightAndWeek                       8

/**
 * Message GPS_HeightAndWeek cycle time.
 */
#define CYCLE_GPS_HeightAndWeek                     0

/**
 * Message GPS_HeightAndWeek fast cycle time.
 */
#define FAST_GPS_HeightAndWeek                      0

/**
 * Initialise message GPS_HeightAndWeek buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_GPS_HeightAndWeek(buf) { \
	INITSIG_GPS_HeightAndWeek_GPS_Week(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_VehSpdR Message VehSpdR (0x34a)
 *
 * Sent by \ref ECU_GWBoard.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_VehSpdR_VehSpdRR
 * - \ref SIG_VehSpdR_VehSpdRL
 *
 * @ingroup ECU_GWBoard
 * @{
 */

/**
 * Message VehSpdR configuration tuple.
 */
#define MSG_VehSpdR                                 0x34a, 0, 8

/**
 * Message VehSpdR id.
 */
#define ID_VehSpdR                                  0x34a

/**
 * Message VehSpdR extended id bit.
 */
#define EXT_VehSpdR                                 0

/**
 * Message VehSpdR Data Length Count.
 */
#define DLC_VehSpdR                                 8

/**
 * Message VehSpdR cycle time.
 */
#define CYCLE_VehSpdR                               0

/**
 * Message VehSpdR fast cycle time.
 */
#define FAST_VehSpdR                                0

/**
 * Initialise message VehSpdR buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_VehSpdR(buf) { \
	INITSIG_VehSpdR_VehSpdRR(buf); \
	INITSIG_VehSpdR_VehSpdRL(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_VehSpdF Message VehSpdF (0x348)
 *
 * Sent by \ref ECU_GWBoard.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_VehSpdF_VehSpdFR
 * - \ref SIG_VehSpdF_VehSpdFL
 *
 * @ingroup ECU_GWBoard
 * @{
 */

/**
 * Message VehSpdF configuration tuple.
 */
#define MSG_VehSpdF                                 0x348, 0, 8

/**
 * Message VehSpdF id.
 */
#define ID_VehSpdF                                  0x348

/**
 * Message VehSpdF extended id bit.
 */
#define EXT_VehSpdF                                 0

/**
 * Message VehSpdF Data Length Count.
 */
#define DLC_VehSpdF                                 8

/**
 * Message VehSpdF cycle time.
 */
#define CYCLE_VehSpdF                               0

/**
 * Message VehSpdF fast cycle time.
 */
#define FAST_VehSpdF                                0

/**
 * Initialise message VehSpdF buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_VehSpdF(buf) { \
	INITSIG_VehSpdF_VehSpdFR(buf); \
	INITSIG_VehSpdF_VehSpdFL(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_General_Status Message General_Status (0x1f5)
 *
 * Sent by \ref ECU_GWBoard.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_General_Status_Shftpos
 *
 * @ingroup ECU_GWBoard
 * @{
 */

/**
 * Message General_Status configuration tuple.
 */
#define MSG_General_Status                          0x1f5, 0, 8

/**
 * Message General_Status id.
 */
#define ID_General_Status                           0x1f5

/**
 * Message General_Status extended id bit.
 */
#define EXT_General_Status                          0

/**
 * Message General_Status Data Length Count.
 */
#define DLC_General_Status                          8

/**
 * Message General_Status cycle time.
 */
#define CYCLE_General_Status                        0

/**
 * Message General_Status fast cycle time.
 */
#define FAST_General_Status                         0

/**
 * Initialise message General_Status buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_General_Status(buf) { \
	INITSIG_General_Status_Shftpos(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_INS_Std Message INS_Std (0x507)
 *
 * Sent by \ref ECU_INS570.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_INS_Std_INS_Std_Heading
 * - \ref SIG_INS_Std_INS_Std_LocatHeight
 * - \ref SIG_INS_Std_INS_Std_Lon
 * - \ref SIG_INS_Std_INS_Std_Lat
 *
 * @ingroup ECU_INS570
 * @{
 */

/**
 * Message INS_Std configuration tuple.
 */
#define MSG_INS_Std                                 0x507, 0, 8

/**
 * Message INS_Std id.
 */
#define ID_INS_Std                                  0x507

/**
 * Message INS_Std extended id bit.
 */
#define EXT_INS_Std                                 0

/**
 * Message INS_Std Data Length Count.
 */
#define DLC_INS_Std                                 8

/**
 * Message INS_Std cycle time.
 */
#define CYCLE_INS_Std                               0

/**
 * Message INS_Std fast cycle time.
 */
#define FAST_INS_Std                                0

/**
 * Initialise message INS_Std buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_INS_Std(buf) { \
	INITSIG_INS_Std_INS_Std_Heading(buf); \
	INITSIG_INS_Std_INS_Std_LocatHeight(buf); \
	INITSIG_INS_Std_INS_Std_Lon(buf); \
	INITSIG_INS_Std_INS_Std_Lat(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_INS_DataInfo Message INS_DataInfo (0x506)
 *
 * Sent by \ref ECU_INS570.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_INS_DataInfo_INS_Status
 * - \ref SIG_INS_DataInfo_INS_Car_Status
 * - \ref SIG_INS_DataInfo_INS_Gps_Age
 * - \ref SIG_INS_DataInfo_INS_GpsFlag_Heading
 * - \ref SIG_INS_DataInfo_INS_NumSV
 * - \ref SIG_INS_DataInfo_INS_GpsFlag_Pos
 *
 * @ingroup ECU_INS570
 * @{
 */

/**
 * Message INS_DataInfo configuration tuple.
 */
#define MSG_INS_DataInfo                            0x506, 0, 8

/**
 * Message INS_DataInfo id.
 */
#define ID_INS_DataInfo                             0x506

/**
 * Message INS_DataInfo extended id bit.
 */
#define EXT_INS_DataInfo                            0

/**
 * Message INS_DataInfo Data Length Count.
 */
#define DLC_INS_DataInfo                            8

/**
 * Message INS_DataInfo cycle time.
 */
#define CYCLE_INS_DataInfo                          0

/**
 * Message INS_DataInfo fast cycle time.
 */
#define FAST_INS_DataInfo                           0

/**
 * Initialise message INS_DataInfo buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_INS_DataInfo(buf) { \
	INITSIG_INS_DataInfo_INS_Status(buf); \
	INITSIG_INS_DataInfo_INS_Car_Status(buf); \
	INITSIG_INS_DataInfo_INS_Gps_Age(buf); \
	INITSIG_INS_DataInfo_INS_GpsFlag_Heading(buf); \
	INITSIG_INS_DataInfo_INS_NumSV(buf); \
	INITSIG_INS_DataInfo_INS_GpsFlag_Pos(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_INS_Speed Message INS_Speed (0x505)
 *
 * Sent by \ref ECU_INS570.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_INS_Speed_INS_ToGroundSpd
 * - \ref SIG_INS_Speed_INS_EastSpd
 * - \ref SIG_INS_Speed_INS_NorthSpd
 *
 * @ingroup ECU_INS570
 * @{
 */

/**
 * Message INS_Speed configuration tuple.
 */
#define MSG_INS_Speed                               0x505, 0, 8

/**
 * Message INS_Speed id.
 */
#define ID_INS_Speed                                0x505

/**
 * Message INS_Speed extended id bit.
 */
#define EXT_INS_Speed                               0

/**
 * Message INS_Speed Data Length Count.
 */
#define DLC_INS_Speed                               8

/**
 * Message INS_Speed cycle time.
 */
#define CYCLE_INS_Speed                             0

/**
 * Message INS_Speed fast cycle time.
 */
#define FAST_INS_Speed                              0

/**
 * Initialise message INS_Speed buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_INS_Speed(buf) { \
	INITSIG_INS_Speed_INS_ToGroundSpd(buf); \
	INITSIG_INS_Speed_INS_EastSpd(buf); \
	INITSIG_INS_Speed_INS_NorthSpd(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_INS_LatitudeLongitude Message INS_LatitudeLongitude (0x504)
 *
 * Sent by \ref ECU_INS570.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_INS_LatitudeLongitude_INS_Longitude
 * - \ref SIG_INS_LatitudeLongitude_INS_Latitude
 *
 * @ingroup ECU_INS570
 * @{
 */

/**
 * Message INS_LatitudeLongitude configuration tuple.
 */
#define MSG_INS_LatitudeLongitude                   0x504, 0, 8

/**
 * Message INS_LatitudeLongitude id.
 */
#define ID_INS_LatitudeLongitude                    0x504

/**
 * Message INS_LatitudeLongitude extended id bit.
 */
#define EXT_INS_LatitudeLongitude                   0

/**
 * Message INS_LatitudeLongitude Data Length Count.
 */
#define DLC_INS_LatitudeLongitude                   8

/**
 * Message INS_LatitudeLongitude cycle time.
 */
#define CYCLE_INS_LatitudeLongitude                 0

/**
 * Message INS_LatitudeLongitude fast cycle time.
 */
#define FAST_INS_LatitudeLongitude                  0

/**
 * Initialise message INS_LatitudeLongitude buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_INS_LatitudeLongitude(buf) { \
	INITSIG_INS_LatitudeLongitude_INS_Longitude(buf); \
	INITSIG_INS_LatitudeLongitude_INS_Latitude(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_INS_HeightTime Message INS_HeightTime (0x503)
 *
 * Sent by \ref ECU_INS570.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_INS_HeightTime_INS_LocatHeight
 * - \ref SIG_INS_HeightTime_INS_Time
 *
 * @ingroup ECU_INS570
 * @{
 */

/**
 * Message INS_HeightTime configuration tuple.
 */
#define MSG_INS_HeightTime                          0x503, 0, 8

/**
 * Message INS_HeightTime id.
 */
#define ID_INS_HeightTime                           0x503

/**
 * Message INS_HeightTime extended id bit.
 */
#define EXT_INS_HeightTime                          0

/**
 * Message INS_HeightTime Data Length Count.
 */
#define DLC_INS_HeightTime                          8

/**
 * Message INS_HeightTime cycle time.
 */
#define CYCLE_INS_HeightTime                        0

/**
 * Message INS_HeightTime fast cycle time.
 */
#define FAST_INS_HeightTime                         0

/**
 * Initialise message INS_HeightTime buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_INS_HeightTime(buf) { \
	INITSIG_INS_HeightTime_INS_LocatHeight(buf); \
	INITSIG_INS_HeightTime_INS_Time(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_INS_HeadingPitchRoll Message INS_HeadingPitchRoll (0x502)
 *
 * Sent by \ref ECU_INS570.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_INS_HeadingPitchRoll_INS_HeadingAngle
 * - \ref SIG_INS_HeadingPitchRoll_INS_RollAngle
 * - \ref SIG_INS_HeadingPitchRoll_INS_PitchAngle
 *
 * @ingroup ECU_INS570
 * @{
 */

/**
 * Message INS_HeadingPitchRoll configuration tuple.
 */
#define MSG_INS_HeadingPitchRoll                    0x502, 0, 8

/**
 * Message INS_HeadingPitchRoll id.
 */
#define ID_INS_HeadingPitchRoll                     0x502

/**
 * Message INS_HeadingPitchRoll extended id bit.
 */
#define EXT_INS_HeadingPitchRoll                    0

/**
 * Message INS_HeadingPitchRoll Data Length Count.
 */
#define DLC_INS_HeadingPitchRoll                    8

/**
 * Message INS_HeadingPitchRoll cycle time.
 */
#define CYCLE_INS_HeadingPitchRoll                  0

/**
 * Message INS_HeadingPitchRoll fast cycle time.
 */
#define FAST_INS_HeadingPitchRoll                   0

/**
 * Initialise message INS_HeadingPitchRoll buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_INS_HeadingPitchRoll(buf) { \
	INITSIG_INS_HeadingPitchRoll_INS_HeadingAngle(buf); \
	INITSIG_INS_HeadingPitchRoll_INS_RollAngle(buf); \
	INITSIG_INS_HeadingPitchRoll_INS_PitchAngle(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_INS_GYRO Message INS_GYRO (0x501)
 *
 * Sent by \ref ECU_INS570.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_INS_GYRO_GYRO_Z
 * - \ref SIG_INS_GYRO_GYRO_Y
 * - \ref SIG_INS_GYRO_GYRO_X
 *
 * @ingroup ECU_INS570
 * @{
 */

/**
 * Message INS_GYRO configuration tuple.
 */
#define MSG_INS_GYRO                                0x501, 0, 8

/**
 * Message INS_GYRO id.
 */
#define ID_INS_GYRO                                 0x501

/**
 * Message INS_GYRO extended id bit.
 */
#define EXT_INS_GYRO                                0

/**
 * Message INS_GYRO Data Length Count.
 */
#define DLC_INS_GYRO                                8

/**
 * Message INS_GYRO cycle time.
 */
#define CYCLE_INS_GYRO                              0

/**
 * Message INS_GYRO fast cycle time.
 */
#define FAST_INS_GYRO                               0

/**
 * Initialise message INS_GYRO buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_INS_GYRO(buf) { \
	INITSIG_INS_GYRO_GYRO_Z(buf); \
	INITSIG_INS_GYRO_GYRO_Y(buf); \
	INITSIG_INS_GYRO_GYRO_X(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_INS_Acc Message INS_Acc (0x500)
 *
 * Sent by \ref ECU_INS570.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_INS_Acc_ACC_Z
 * - \ref SIG_INS_Acc_ACC_Y
 * - \ref SIG_INS_Acc_ACC_X
 *
 * @ingroup ECU_INS570
 * @{
 */

/**
 * Message INS_Acc configuration tuple.
 */
#define MSG_INS_Acc                                 0x500, 0, 8

/**
 * Message INS_Acc id.
 */
#define ID_INS_Acc                                  0x500

/**
 * Message INS_Acc extended id bit.
 */
#define EXT_INS_Acc                                 0

/**
 * Message INS_Acc Data Length Count.
 */
#define DLC_INS_Acc                                 8

/**
 * Message INS_Acc cycle time.
 */
#define CYCLE_INS_Acc                               0

/**
 * Message INS_Acc fast cycle time.
 */
#define FAST_INS_Acc                                0

/**
 * Initialise message INS_Acc buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_INS_Acc(buf) { \
	INITSIG_INS_Acc_ACC_Z(buf); \
	INITSIG_INS_Acc_ACC_Y(buf); \
	INITSIG_INS_Acc_ACC_X(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_GPS_HeightAndWeek_GPS_Week Signal GPS_Week of Message GPS_HeightAndWeek (0x50a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_GPS_HeightAndWeek
 * @{
 */

/**
 * Signal GPS_Week configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_GPS_HeightAndWeek_GPS_Week and \ref GET_GPS_HeightAndWeek_GPS_Week instead.
 */
#define SIG_GPS_HeightAndWeek_GPS_Week              1, 0, 39, 32

/**
 * Signal GPS_Week setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_GPS_HeightAndWeek_GPS_Week or \ref INIT_GPS_HeightAndWeek instead.
 */
#define SETUP_GPS_HeightAndWeek_GPS_Week            1, 0, 39, 32, 0

/**
 * Get signal GPS_Week from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_GPS_HeightAndWeek_GPS_Week(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GPS_Week in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_GPS_HeightAndWeek_GPS_Week(buf, val) { \
	buf[4] &= (uint8_t)~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= (uint8_t)~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= (uint8_t)~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= (uint8_t)~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GPS_Week in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_GPS_HeightAndWeek_GPS_Week(buf) \
	SET_GPS_HeightAndWeek_GPS_Week(buf, 0)

/**
 * Signal GPS_Week value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_GPS_HeightAndWeek_GPS_Week(x, fmt) \
	((x) * fmt)

/**
 * Signal GPS_Week raw initial value.
 */
#define START_GPS_HeightAndWeek_GPS_Week            0

/**
 * Signal GPS_Week raw minimum value.
 */
#define MIN_GPS_HeightAndWeek_GPS_Week              0

/**
 * Signal GPS_Week raw maximum value.
 */
#define MAX_GPS_HeightAndWeek_GPS_Week              0

/**
 * Signal GPS_Week raw offset value.
 */
#define OFF_GPS_HeightAndWeek_GPS_Week              0

/**
 * @}
 */

/**
 * @defgroup SIG_VehSpdR_VehSpdRR Signal VehSpdRR of Message VehSpdR (0x34a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehSpdR
 * @{
 */

/**
 * Signal VehSpdRR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehSpdR_VehSpdRR and \ref GET_VehSpdR_VehSpdRR instead.
 */
#define SIG_VehSpdR_VehSpdRR                        1, 0, 21, 14

/**
 * Signal VehSpdRR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehSpdR_VehSpdRR or \ref INIT_VehSpdR instead.
 */
#define SETUP_VehSpdR_VehSpdRR                      1, 0, 21, 14, 0

/**
 * Get signal VehSpdRR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehSpdR_VehSpdRR(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VehSpdRR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehSpdR_VehSpdRR(buf, val) { \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x3f) << 0; \
	buf[3] &= (uint8_t)~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VehSpdRR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehSpdR_VehSpdRR(buf) \
	SET_VehSpdR_VehSpdRR(buf, 0)

/**
 * Signal VehSpdRR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehSpdR_VehSpdRR(x, fmt) \
	((x) * fmt * 217 / 25000)

/**
 * Signal VehSpdRR raw initial value.
 */
#define START_VehSpdR_VehSpdRR                      0

/**
 * Signal VehSpdRR raw minimum value.
 */
#define MIN_VehSpdR_VehSpdRR                        0

/**
 * Signal VehSpdRR raw maximum value.
 */
#define MAX_VehSpdR_VehSpdRR                        0

/**
 * Signal VehSpdRR raw offset value.
 */
#define OFF_VehSpdR_VehSpdRR                        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehSpdR_VehSpdRL Signal VehSpdRL of Message VehSpdR (0x34a)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehSpdR
 * @{
 */

/**
 * Signal VehSpdRL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehSpdR_VehSpdRL and \ref GET_VehSpdR_VehSpdRL instead.
 */
#define SIG_VehSpdR_VehSpdRL                        1, 0, 5, 14

/**
 * Signal VehSpdRL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehSpdR_VehSpdRL or \ref INIT_VehSpdR instead.
 */
#define SETUP_VehSpdR_VehSpdRL                      1, 0, 5, 14, 0

/**
 * Get signal VehSpdRL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehSpdR_VehSpdRL(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0x3f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VehSpdRL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehSpdR_VehSpdRL(buf, val) { \
	buf[0] &= ~(0x3f << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x3f) << 0; \
	buf[1] &= (uint8_t)~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VehSpdRL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehSpdR_VehSpdRL(buf) \
	SET_VehSpdR_VehSpdRL(buf, 0)

/**
 * Signal VehSpdRL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehSpdR_VehSpdRL(x, fmt) \
	((x) * fmt * 217 / 25000)

/**
 * Signal VehSpdRL raw initial value.
 */
#define START_VehSpdR_VehSpdRL                      0

/**
 * Signal VehSpdRL raw minimum value.
 */
#define MIN_VehSpdR_VehSpdRL                        0

/**
 * Signal VehSpdRL raw maximum value.
 */
#define MAX_VehSpdR_VehSpdRL                        0

/**
 * Signal VehSpdRL raw offset value.
 */
#define OFF_VehSpdR_VehSpdRL                        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehSpdF_VehSpdFR Signal VehSpdFR of Message VehSpdF (0x348)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehSpdF
 * @{
 */

/**
 * Signal VehSpdFR configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehSpdF_VehSpdFR and \ref GET_VehSpdF_VehSpdFR instead.
 */
#define SIG_VehSpdF_VehSpdFR                        1, 0, 21, 14

/**
 * Signal VehSpdFR setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehSpdF_VehSpdFR or \ref INIT_VehSpdF instead.
 */
#define SETUP_VehSpdF_VehSpdFR                      1, 0, 21, 14, 0

/**
 * Get signal VehSpdFR from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehSpdF_VehSpdFR(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VehSpdFR in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehSpdF_VehSpdFR(buf, val) { \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x3f) << 0; \
	buf[3] &= (uint8_t)~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VehSpdFR in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehSpdF_VehSpdFR(buf) \
	SET_VehSpdF_VehSpdFR(buf, 0)

/**
 * Signal VehSpdFR value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehSpdF_VehSpdFR(x, fmt) \
	((x) * fmt * 217 / 25000)

/**
 * Signal VehSpdFR raw initial value.
 */
#define START_VehSpdF_VehSpdFR                      0

/**
 * Signal VehSpdFR raw minimum value.
 */
#define MIN_VehSpdF_VehSpdFR                        0

/**
 * Signal VehSpdFR raw maximum value.
 */
#define MAX_VehSpdF_VehSpdFR                        0

/**
 * Signal VehSpdFR raw offset value.
 */
#define OFF_VehSpdF_VehSpdFR                        0

/**
 * @}
 */

/**
 * @defgroup SIG_VehSpdF_VehSpdFL Signal VehSpdFL of Message VehSpdF (0x348)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_VehSpdF
 * @{
 */

/**
 * Signal VehSpdFL configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VehSpdF_VehSpdFL and \ref GET_VehSpdF_VehSpdFL instead.
 */
#define SIG_VehSpdF_VehSpdFL                        1, 0, 5, 14

/**
 * Signal VehSpdFL setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VehSpdF_VehSpdFL or \ref INIT_VehSpdF instead.
 */
#define SETUP_VehSpdF_VehSpdFL                      1, 0, 5, 14, 0

/**
 * Get signal VehSpdFL from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VehSpdF_VehSpdFL(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0x3f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VehSpdFL in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VehSpdF_VehSpdFL(buf, val) { \
	buf[0] &= ~(0x3f << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x3f) << 0; \
	buf[1] &= (uint8_t)~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VehSpdFL in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VehSpdF_VehSpdFL(buf) \
	SET_VehSpdF_VehSpdFL(buf, 0)

/**
 * Signal VehSpdFL value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VehSpdF_VehSpdFL(x, fmt) \
	((x) * fmt * 217 / 25000)

/**
 * Signal VehSpdFL raw initial value.
 */
#define START_VehSpdF_VehSpdFL                      0

/**
 * Signal VehSpdFL raw minimum value.
 */
#define MIN_VehSpdF_VehSpdFL                        0

/**
 * Signal VehSpdFL raw maximum value.
 */
#define MAX_VehSpdF_VehSpdFL                        0

/**
 * Signal VehSpdFL raw offset value.
 */
#define OFF_VehSpdF_VehSpdFL                        0

/**
 * @}
 */

/**
 * @defgroup SIG_General_Status_Shftpos Signal Shftpos of Message General_Status (0x1f5)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_General_Status
 * @{
 */

/**
 * Signal Shftpos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_General_Status_Shftpos and \ref GET_General_Status_Shftpos instead.
 */
#define SIG_General_Status_Shftpos                  1, 0, 27, 4

/**
 * Signal Shftpos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_General_Status_Shftpos or \ref INIT_General_Status instead.
 */
#define SETUP_General_Status_Shftpos                1, 0, 27, 4, 0

/**
 * Get signal Shftpos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_General_Status_Shftpos(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Shftpos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_General_Status_Shftpos(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Shftpos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_General_Status_Shftpos(buf) \
	SET_General_Status_Shftpos(buf, 0)

/**
 * Signal Shftpos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_General_Status_Shftpos(x, fmt) \
	((x) * fmt)

/**
 * Signal Shftpos raw initial value.
 */
#define START_General_Status_Shftpos                0

/**
 * Signal Shftpos raw minimum value.
 */
#define MIN_General_Status_Shftpos                  0

/**
 * Signal Shftpos raw maximum value.
 */
#define MAX_General_Status_Shftpos                  0

/**
 * Signal Shftpos raw offset value.
 */
#define OFF_General_Status_Shftpos                  0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_Std_INS_Std_Heading Signal INS_Std_Heading of Message INS_Std (0x507)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_Std
 * @{
 */

/**
 * Signal INS_Std_Heading configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_Std_INS_Std_Heading and \ref GET_INS_Std_INS_Std_Heading instead.
 */
#define SIG_INS_Std_INS_Std_Heading                 1, 0, 55, 16

/**
 * Signal INS_Std_Heading setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_Std_INS_Std_Heading or \ref INIT_INS_Std instead.
 */
#define SETUP_INS_Std_INS_Std_Heading               1, 0, 55, 16, 0

/**
 * Get signal INS_Std_Heading from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_Std_INS_Std_Heading(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_Std_Heading in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_Std_INS_Std_Heading(buf, val) { \
	buf[6] &= (uint8_t)~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= (uint8_t)~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_Std_Heading in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_Std_INS_Std_Heading(buf) \
	SET_INS_Std_INS_Std_Heading(buf, 0)

/**
 * Signal INS_Std_Heading value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_Std_INS_Std_Heading(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal INS_Std_Heading raw initial value.
 */
#define START_INS_Std_INS_Std_Heading               0

/**
 * Signal INS_Std_Heading raw minimum value.
 */
#define MIN_INS_Std_INS_Std_Heading                 0

/**
 * Signal INS_Std_Heading raw maximum value.
 */
#define MAX_INS_Std_INS_Std_Heading                 6553

/**
 * Signal INS_Std_Heading raw offset value.
 */
#define OFF_INS_Std_INS_Std_Heading                 0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_Std_INS_Std_LocatHeight Signal INS_Std_LocatHeight of Message INS_Std (0x507)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_Std
 * @{
 */

/**
 * Signal INS_Std_LocatHeight configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_Std_INS_Std_LocatHeight and \ref GET_INS_Std_INS_Std_LocatHeight instead.
 */
#define SIG_INS_Std_INS_Std_LocatHeight             1, 0, 39, 16

/**
 * Signal INS_Std_LocatHeight setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_Std_INS_Std_LocatHeight or \ref INIT_INS_Std instead.
 */
#define SETUP_INS_Std_INS_Std_LocatHeight           1, 0, 39, 16, 0

/**
 * Get signal INS_Std_LocatHeight from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_Std_INS_Std_LocatHeight(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_Std_LocatHeight in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_Std_INS_Std_LocatHeight(buf, val) { \
	buf[4] &= (uint8_t)~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= (uint8_t)~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_Std_LocatHeight in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_Std_INS_Std_LocatHeight(buf) \
	SET_INS_Std_INS_Std_LocatHeight(buf, 0)

/**
 * Signal INS_Std_LocatHeight value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_Std_INS_Std_LocatHeight(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal INS_Std_LocatHeight raw initial value.
 */
#define START_INS_Std_INS_Std_LocatHeight           0

/**
 * Signal INS_Std_LocatHeight raw minimum value.
 */
#define MIN_INS_Std_INS_Std_LocatHeight             0

/**
 * Signal INS_Std_LocatHeight raw maximum value.
 */
#define MAX_INS_Std_INS_Std_LocatHeight             65535

/**
 * Signal INS_Std_LocatHeight raw offset value.
 */
#define OFF_INS_Std_INS_Std_LocatHeight             0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_Std_INS_Std_Lon Signal INS_Std_Lon of Message INS_Std (0x507)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_Std
 * @{
 */

/**
 * Signal INS_Std_Lon configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_Std_INS_Std_Lon and \ref GET_INS_Std_INS_Std_Lon instead.
 */
#define SIG_INS_Std_INS_Std_Lon                     1, 0, 23, 16

/**
 * Signal INS_Std_Lon setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_Std_INS_Std_Lon or \ref INIT_INS_Std instead.
 */
#define SETUP_INS_Std_INS_Std_Lon                   1, 0, 23, 16, 0

/**
 * Get signal INS_Std_Lon from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_Std_INS_Std_Lon(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_Std_Lon in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_Std_INS_Std_Lon(buf, val) { \
	buf[2] &= (uint8_t)~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= (uint8_t)~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_Std_Lon in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_Std_INS_Std_Lon(buf) \
	SET_INS_Std_INS_Std_Lon(buf, 0)

/**
 * Signal INS_Std_Lon value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_Std_INS_Std_Lon(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal INS_Std_Lon raw initial value.
 */
#define START_INS_Std_INS_Std_Lon                   0

/**
 * Signal INS_Std_Lon raw minimum value.
 */
#define MIN_INS_Std_INS_Std_Lon                     0

/**
 * Signal INS_Std_Lon raw maximum value.
 */
#define MAX_INS_Std_INS_Std_Lon                     65535

/**
 * Signal INS_Std_Lon raw offset value.
 */
#define OFF_INS_Std_INS_Std_Lon                     0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_Std_INS_Std_Lat Signal INS_Std_Lat of Message INS_Std (0x507)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_Std
 * @{
 */

/**
 * Signal INS_Std_Lat configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_Std_INS_Std_Lat and \ref GET_INS_Std_INS_Std_Lat instead.
 */
#define SIG_INS_Std_INS_Std_Lat                     1, 0, 7, 16

/**
 * Signal INS_Std_Lat setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_Std_INS_Std_Lat or \ref INIT_INS_Std instead.
 */
#define SETUP_INS_Std_INS_Std_Lat                   1, 0, 7, 16, 0

/**
 * Get signal INS_Std_Lat from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_Std_INS_Std_Lat(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_Std_Lat in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_Std_INS_Std_Lat(buf, val) { \
	buf[0] &= (uint8_t)~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= (uint8_t)~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_Std_Lat in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_Std_INS_Std_Lat(buf) \
	SET_INS_Std_INS_Std_Lat(buf, 0)

/**
 * Signal INS_Std_Lat value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_Std_INS_Std_Lat(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal INS_Std_Lat raw initial value.
 */
#define START_INS_Std_INS_Std_Lat                   0

/**
 * Signal INS_Std_Lat raw minimum value.
 */
#define MIN_INS_Std_INS_Std_Lat                     0

/**
 * Signal INS_Std_Lat raw maximum value.
 */
#define MAX_INS_Std_INS_Std_Lat                     65535

/**
 * Signal INS_Std_Lat raw offset value.
 */
#define OFF_INS_Std_INS_Std_Lat                     0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_DataInfo_INS_Status Signal INS_Status of Message INS_DataInfo (0x506)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_DataInfo
 * @{
 */

/**
 * Signal INS_Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_DataInfo_INS_Status and \ref GET_INS_DataInfo_INS_Status instead.
 */
#define SIG_INS_DataInfo_INS_Status                 1, 0, 63, 8

/**
 * Signal INS_Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_DataInfo_INS_Status or \ref INIT_INS_DataInfo instead.
 */
#define SETUP_INS_DataInfo_INS_Status               1, 0, 63, 8, 0

/**
 * Get signal INS_Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_DataInfo_INS_Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_DataInfo_INS_Status(buf, val) { \
	buf[7] &= (uint8_t)~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_DataInfo_INS_Status(buf) \
	SET_INS_DataInfo_INS_Status(buf, 0)

/**
 * Signal INS_Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_DataInfo_INS_Status(x, fmt) \
	((x) * fmt)

/**
 * Signal INS_Status raw initial value.
 */
#define START_INS_DataInfo_INS_Status               0

/**
 * Signal INS_Status raw minimum value.
 */
#define MIN_INS_DataInfo_INS_Status                 0

/**
 * Signal INS_Status raw maximum value.
 */
#define MAX_INS_DataInfo_INS_Status                 255

/**
 * Signal INS_Status raw offset value.
 */
#define OFF_INS_DataInfo_INS_Status                 0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_DataInfo_INS_Car_Status Signal INS_Car_Status of Message INS_DataInfo (0x506)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_DataInfo
 * @{
 */

/**
 * Signal INS_Car_Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_DataInfo_INS_Car_Status and \ref GET_INS_DataInfo_INS_Car_Status instead.
 */
#define SIG_INS_DataInfo_INS_Car_Status             1, 0, 39, 8

/**
 * Signal INS_Car_Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_DataInfo_INS_Car_Status or \ref INIT_INS_DataInfo instead.
 */
#define SETUP_INS_DataInfo_INS_Car_Status           1, 0, 39, 8, 0

/**
 * Get signal INS_Car_Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_DataInfo_INS_Car_Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_Car_Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_DataInfo_INS_Car_Status(buf, val) { \
	buf[4] &= (uint8_t)~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_Car_Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_DataInfo_INS_Car_Status(buf) \
	SET_INS_DataInfo_INS_Car_Status(buf, 0)

/**
 * Signal INS_Car_Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_DataInfo_INS_Car_Status(x, fmt) \
	((x) * fmt)

/**
 * Signal INS_Car_Status raw initial value.
 */
#define START_INS_DataInfo_INS_Car_Status           0

/**
 * Signal INS_Car_Status raw minimum value.
 */
#define MIN_INS_DataInfo_INS_Car_Status             0

/**
 * Signal INS_Car_Status raw maximum value.
 */
#define MAX_INS_DataInfo_INS_Car_Status             255

/**
 * Signal INS_Car_Status raw offset value.
 */
#define OFF_INS_DataInfo_INS_Car_Status             0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_DataInfo_INS_Gps_Age Signal INS_Gps_Age of Message INS_DataInfo (0x506)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_DataInfo
 * @{
 */

/**
 * Signal INS_Gps_Age configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_DataInfo_INS_Gps_Age and \ref GET_INS_DataInfo_INS_Gps_Age instead.
 */
#define SIG_INS_DataInfo_INS_Gps_Age                1, 0, 31, 8

/**
 * Signal INS_Gps_Age setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_DataInfo_INS_Gps_Age or \ref INIT_INS_DataInfo instead.
 */
#define SETUP_INS_DataInfo_INS_Gps_Age              1, 0, 31, 8, 0

/**
 * Get signal INS_Gps_Age from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_DataInfo_INS_Gps_Age(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_Gps_Age in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_DataInfo_INS_Gps_Age(buf, val) { \
	buf[3] &= (uint8_t)~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_Gps_Age in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_DataInfo_INS_Gps_Age(buf) \
	SET_INS_DataInfo_INS_Gps_Age(buf, 0)

/**
 * Signal INS_Gps_Age value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_DataInfo_INS_Gps_Age(x, fmt) \
	((x) * fmt)

/**
 * Signal INS_Gps_Age raw initial value.
 */
#define START_INS_DataInfo_INS_Gps_Age              0

/**
 * Signal INS_Gps_Age raw minimum value.
 */
#define MIN_INS_DataInfo_INS_Gps_Age                0

/**
 * Signal INS_Gps_Age raw maximum value.
 */
#define MAX_INS_DataInfo_INS_Gps_Age                255

/**
 * Signal INS_Gps_Age raw offset value.
 */
#define OFF_INS_DataInfo_INS_Gps_Age                0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_DataInfo_INS_GpsFlag_Heading Signal INS_GpsFlag_Heading of Message INS_DataInfo (0x506)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_DataInfo
 * @{
 */

/**
 * Signal INS_GpsFlag_Heading configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_DataInfo_INS_GpsFlag_Heading and \ref GET_INS_DataInfo_INS_GpsFlag_Heading instead.
 */
#define SIG_INS_DataInfo_INS_GpsFlag_Heading        1, 0, 23, 8

/**
 * Signal INS_GpsFlag_Heading setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_DataInfo_INS_GpsFlag_Heading or \ref INIT_INS_DataInfo instead.
 */
#define SETUP_INS_DataInfo_INS_GpsFlag_Heading      1, 0, 23, 8, 0

/**
 * Get signal INS_GpsFlag_Heading from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_DataInfo_INS_GpsFlag_Heading(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_GpsFlag_Heading in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_DataInfo_INS_GpsFlag_Heading(buf, val) { \
	buf[2] &= (uint8_t)~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_GpsFlag_Heading in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_DataInfo_INS_GpsFlag_Heading(buf) \
	SET_INS_DataInfo_INS_GpsFlag_Heading(buf, 0)

/**
 * Signal INS_GpsFlag_Heading value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_DataInfo_INS_GpsFlag_Heading(x, fmt) \
	((x) * fmt)

/**
 * Signal INS_GpsFlag_Heading raw initial value.
 */
#define START_INS_DataInfo_INS_GpsFlag_Heading      0

/**
 * Signal INS_GpsFlag_Heading raw minimum value.
 */
#define MIN_INS_DataInfo_INS_GpsFlag_Heading        0

/**
 * Signal INS_GpsFlag_Heading raw maximum value.
 */
#define MAX_INS_DataInfo_INS_GpsFlag_Heading        255

/**
 * Signal INS_GpsFlag_Heading raw offset value.
 */
#define OFF_INS_DataInfo_INS_GpsFlag_Heading        0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_DataInfo_INS_NumSV Signal INS_NumSV of Message INS_DataInfo (0x506)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_DataInfo
 * @{
 */

/**
 * Signal INS_NumSV configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_DataInfo_INS_NumSV and \ref GET_INS_DataInfo_INS_NumSV instead.
 */
#define SIG_INS_DataInfo_INS_NumSV                  1, 0, 15, 8

/**
 * Signal INS_NumSV setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_DataInfo_INS_NumSV or \ref INIT_INS_DataInfo instead.
 */
#define SETUP_INS_DataInfo_INS_NumSV                1, 0, 15, 8, 0

/**
 * Get signal INS_NumSV from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_DataInfo_INS_NumSV(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_NumSV in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_DataInfo_INS_NumSV(buf, val) { \
	buf[1] &= (uint8_t)~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_NumSV in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_DataInfo_INS_NumSV(buf) \
	SET_INS_DataInfo_INS_NumSV(buf, 0)

/**
 * Signal INS_NumSV value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_DataInfo_INS_NumSV(x, fmt) \
	((x) * fmt)

/**
 * Signal INS_NumSV raw initial value.
 */
#define START_INS_DataInfo_INS_NumSV                0

/**
 * Signal INS_NumSV raw minimum value.
 */
#define MIN_INS_DataInfo_INS_NumSV                  0

/**
 * Signal INS_NumSV raw maximum value.
 */
#define MAX_INS_DataInfo_INS_NumSV                  255

/**
 * Signal INS_NumSV raw offset value.
 */
#define OFF_INS_DataInfo_INS_NumSV                  0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_DataInfo_INS_GpsFlag_Pos Signal INS_GpsFlag_Pos of Message INS_DataInfo (0x506)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_DataInfo
 * @{
 */

/**
 * Signal INS_GpsFlag_Pos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_DataInfo_INS_GpsFlag_Pos and \ref GET_INS_DataInfo_INS_GpsFlag_Pos instead.
 */
#define SIG_INS_DataInfo_INS_GpsFlag_Pos            1, 0, 7, 8

/**
 * Signal INS_GpsFlag_Pos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_DataInfo_INS_GpsFlag_Pos or \ref INIT_INS_DataInfo instead.
 */
#define SETUP_INS_DataInfo_INS_GpsFlag_Pos          1, 0, 7, 8, 0

/**
 * Get signal INS_GpsFlag_Pos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_DataInfo_INS_GpsFlag_Pos(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_GpsFlag_Pos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_DataInfo_INS_GpsFlag_Pos(buf, val) { \
	buf[0] &= (uint8_t)~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_GpsFlag_Pos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_DataInfo_INS_GpsFlag_Pos(buf) \
	SET_INS_DataInfo_INS_GpsFlag_Pos(buf, 0)

/**
 * Signal INS_GpsFlag_Pos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_DataInfo_INS_GpsFlag_Pos(x, fmt) \
	((x) * fmt)

/**
 * Signal INS_GpsFlag_Pos raw initial value.
 */
#define START_INS_DataInfo_INS_GpsFlag_Pos          0

/**
 * Signal INS_GpsFlag_Pos raw minimum value.
 */
#define MIN_INS_DataInfo_INS_GpsFlag_Pos            0

/**
 * Signal INS_GpsFlag_Pos raw maximum value.
 */
#define MAX_INS_DataInfo_INS_GpsFlag_Pos            255

/**
 * Signal INS_GpsFlag_Pos raw offset value.
 */
#define OFF_INS_DataInfo_INS_GpsFlag_Pos            0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_Speed_INS_ToGroundSpd Signal INS_ToGroundSpd of Message INS_Speed (0x505)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_Speed
 * @{
 */

/**
 * Signal INS_ToGroundSpd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_Speed_INS_ToGroundSpd and \ref GET_INS_Speed_INS_ToGroundSpd instead.
 */
#define SIG_INS_Speed_INS_ToGroundSpd               1, 0, 39, 16

/**
 * Signal INS_ToGroundSpd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_Speed_INS_ToGroundSpd or \ref INIT_INS_Speed instead.
 */
#define SETUP_INS_Speed_INS_ToGroundSpd             1, 0, 39, 16, 0

/**
 * Get signal INS_ToGroundSpd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_Speed_INS_ToGroundSpd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_ToGroundSpd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_Speed_INS_ToGroundSpd(buf, val) { \
	buf[4] &= (uint8_t)~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= (uint8_t)~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_ToGroundSpd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_Speed_INS_ToGroundSpd(buf) \
	SET_INS_Speed_INS_ToGroundSpd(buf, 0)

/**
 * Signal INS_ToGroundSpd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_Speed_INS_ToGroundSpd(x, fmt) \
	((x) * fmt * 30517 / 10000000 + fmt * (-100))

/**
 * Signal INS_ToGroundSpd raw initial value.
 */
#define START_INS_Speed_INS_ToGroundSpd             0

/**
 * Signal INS_ToGroundSpd raw minimum value.
 */
#define MIN_INS_Speed_INS_ToGroundSpd               0

/**
 * Signal INS_ToGroundSpd raw maximum value.
 */
#define MAX_INS_Speed_INS_ToGroundSpd               65537

/**
 * Signal INS_ToGroundSpd raw offset value.
 */
#define OFF_INS_Speed_INS_ToGroundSpd               -32769

/**
 * @}
 */

/**
 * @defgroup SIG_INS_Speed_INS_EastSpd Signal INS_EastSpd of Message INS_Speed (0x505)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_Speed
 * @{
 */

/**
 * Signal INS_EastSpd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_Speed_INS_EastSpd and \ref GET_INS_Speed_INS_EastSpd instead.
 */
#define SIG_INS_Speed_INS_EastSpd                   1, 0, 23, 16

/**
 * Signal INS_EastSpd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_Speed_INS_EastSpd or \ref INIT_INS_Speed instead.
 */
#define SETUP_INS_Speed_INS_EastSpd                 1, 0, 23, 16, 0

/**
 * Get signal INS_EastSpd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_Speed_INS_EastSpd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_EastSpd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_Speed_INS_EastSpd(buf, val) { \
	buf[2] &= (uint8_t)~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= (uint8_t)~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_EastSpd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_Speed_INS_EastSpd(buf) \
	SET_INS_Speed_INS_EastSpd(buf, 0)

/**
 * Signal INS_EastSpd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_Speed_INS_EastSpd(x, fmt) \
	((x) * fmt * 30517 / 10000000 + fmt * (-100))

/**
 * Signal INS_EastSpd raw initial value.
 */
#define START_INS_Speed_INS_EastSpd                 0

/**
 * Signal INS_EastSpd raw minimum value.
 */
#define MIN_INS_Speed_INS_EastSpd                   0

/**
 * Signal INS_EastSpd raw maximum value.
 */
#define MAX_INS_Speed_INS_EastSpd                   65537

/**
 * Signal INS_EastSpd raw offset value.
 */
#define OFF_INS_Speed_INS_EastSpd                   -32769

/**
 * @}
 */

/**
 * @defgroup SIG_INS_Speed_INS_NorthSpd Signal INS_NorthSpd of Message INS_Speed (0x505)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_Speed
 * @{
 */

/**
 * Signal INS_NorthSpd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_Speed_INS_NorthSpd and \ref GET_INS_Speed_INS_NorthSpd instead.
 */
#define SIG_INS_Speed_INS_NorthSpd                  1, 0, 7, 16

/**
 * Signal INS_NorthSpd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_Speed_INS_NorthSpd or \ref INIT_INS_Speed instead.
 */
#define SETUP_INS_Speed_INS_NorthSpd                1, 0, 7, 16, 0

/**
 * Get signal INS_NorthSpd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_Speed_INS_NorthSpd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_NorthSpd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_Speed_INS_NorthSpd(buf, val) { \
	buf[0] &= (uint8_t)~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= (uint8_t)~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_NorthSpd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_Speed_INS_NorthSpd(buf) \
	SET_INS_Speed_INS_NorthSpd(buf, 0)

/**
 * Signal INS_NorthSpd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_Speed_INS_NorthSpd(x, fmt) \
	((x) * fmt * 30517 / 10000000 + fmt * (-100))

/**
 * Signal INS_NorthSpd raw initial value.
 */
#define START_INS_Speed_INS_NorthSpd                0

/**
 * Signal INS_NorthSpd raw minimum value.
 */
#define MIN_INS_Speed_INS_NorthSpd                  0

/**
 * Signal INS_NorthSpd raw maximum value.
 */
#define MAX_INS_Speed_INS_NorthSpd                  65537

/**
 * Signal INS_NorthSpd raw offset value.
 */
#define OFF_INS_Speed_INS_NorthSpd                  -32769

/**
 * @}
 */

/**
 * @defgroup SIG_INS_LatitudeLongitude_INS_Longitude Signal INS_Longitude of Message INS_LatitudeLongitude (0x504)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_LatitudeLongitude
 * @{
 */

/**
 * Signal INS_Longitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_LatitudeLongitude_INS_Longitude and \ref GET_INS_LatitudeLongitude_INS_Longitude instead.
 */
#define SIG_INS_LatitudeLongitude_INS_Longitude        1, 0, 39, 32

/**
 * Signal INS_Longitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_LatitudeLongitude_INS_Longitude or \ref INIT_INS_LatitudeLongitude instead.
 */
#define SETUP_INS_LatitudeLongitude_INS_Longitude      1, 0, 39, 32, 0

/**
 * Get signal INS_Longitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_LatitudeLongitude_INS_Longitude(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_Longitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_LatitudeLongitude_INS_Longitude(buf, val) { \
	buf[4] &= (uint8_t)~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= (uint8_t)~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= (uint8_t)~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= (uint8_t)~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_Longitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_LatitudeLongitude_INS_Longitude(buf) \
	SET_INS_LatitudeLongitude_INS_Longitude(buf, 0)

/**
 * Signal INS_Longitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_LatitudeLongitude_INS_Longitude(x, fmt) \
	((x) * fmt / 10000000 + fmt * (-180))

/**
 * Signal INS_Longitude raw initial value.
 */
#define START_INS_LatitudeLongitude_INS_Longitude      0

/**
 * Signal INS_Longitude raw minimum value.
 */
#define MIN_INS_LatitudeLongitude_INS_Longitude        0

/**
 * Signal INS_Longitude raw maximum value.
 */
#define MAX_INS_LatitudeLongitude_INS_Longitude        3600000000

/**
 * Signal INS_Longitude raw offset value.
 */
#define OFF_INS_LatitudeLongitude_INS_Longitude        -1800000000

/**
 * @}
 */

/**
 * @defgroup SIG_INS_LatitudeLongitude_INS_Latitude Signal INS_Latitude of Message INS_LatitudeLongitude (0x504)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_LatitudeLongitude
 * @{
 */

/**
 * Signal INS_Latitude configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_LatitudeLongitude_INS_Latitude and \ref GET_INS_LatitudeLongitude_INS_Latitude instead.
 */
#define SIG_INS_LatitudeLongitude_INS_Latitude        1, 0, 7, 32

/**
 * Signal INS_Latitude setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_LatitudeLongitude_INS_Latitude or \ref INIT_INS_LatitudeLongitude instead.
 */
#define SETUP_INS_LatitudeLongitude_INS_Latitude      1, 0, 7, 32, 0

/**
 * Get signal INS_Latitude from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_LatitudeLongitude_INS_Latitude(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[1] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_Latitude in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_LatitudeLongitude_INS_Latitude(buf, val) { \
	buf[0] &= (uint8_t)~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[1] &= (uint8_t)~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[2] &= (uint8_t)~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= (uint8_t)~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_Latitude in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_LatitudeLongitude_INS_Latitude(buf) \
	SET_INS_LatitudeLongitude_INS_Latitude(buf, 0)

/**
 * Signal INS_Latitude value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_LatitudeLongitude_INS_Latitude(x, fmt) \
	((x) * fmt / 10000000 + fmt * (-180))

/**
 * Signal INS_Latitude raw initial value.
 */
#define START_INS_LatitudeLongitude_INS_Latitude      0

/**
 * Signal INS_Latitude raw minimum value.
 */
#define MIN_INS_LatitudeLongitude_INS_Latitude        0

/**
 * Signal INS_Latitude raw maximum value.
 */
#define MAX_INS_LatitudeLongitude_INS_Latitude        3600000000

/**
 * Signal INS_Latitude raw offset value.
 */
#define OFF_INS_LatitudeLongitude_INS_Latitude        -1800000000

/**
 * @}
 */

/**
 * @defgroup SIG_INS_HeightTime_INS_LocatHeight Signal INS_LocatHeight of Message INS_HeightTime (0x503)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_HeightTime
 * @{
 */

/**
 * Signal INS_LocatHeight configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_HeightTime_INS_LocatHeight and \ref GET_INS_HeightTime_INS_LocatHeight instead.
 */
#define SIG_INS_HeightTime_INS_LocatHeight          1, 0, 7, 32

/**
 * Signal INS_LocatHeight setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_HeightTime_INS_LocatHeight or \ref INIT_INS_HeightTime instead.
 */
#define SETUP_INS_HeightTime_INS_LocatHeight        1, 0, 7, 32, 0

/**
 * Get signal INS_LocatHeight from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_HeightTime_INS_LocatHeight(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[0] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[1] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_LocatHeight in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_HeightTime_INS_LocatHeight(buf, val) { \
	buf[0] &= (uint8_t)~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[1] &= (uint8_t)~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[2] &= (uint8_t)~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= (uint8_t)~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_LocatHeight in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_HeightTime_INS_LocatHeight(buf) \
	SET_INS_HeightTime_INS_LocatHeight(buf, 0)

/**
 * Signal INS_LocatHeight value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_HeightTime_INS_LocatHeight(x, fmt) \
	((x) * fmt / 1000 + fmt * (-10000))

/**
 * Signal INS_LocatHeight raw initial value.
 */
#define START_INS_HeightTime_INS_LocatHeight        0

/**
 * Signal INS_LocatHeight raw minimum value.
 */
#define MIN_INS_HeightTime_INS_LocatHeight          0

/**
 * Signal INS_LocatHeight raw maximum value.
 */
#define MAX_INS_HeightTime_INS_LocatHeight          20000000

/**
 * Signal INS_LocatHeight raw offset value.
 */
#define OFF_INS_HeightTime_INS_LocatHeight          -10000000

/**
 * @}
 */

/**
 * @defgroup SIG_INS_HeightTime_INS_Time Signal INS_Time of Message INS_HeightTime (0x503)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_HeightTime
 * @{
 */

/**
 * Signal INS_Time configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_HeightTime_INS_Time and \ref GET_INS_HeightTime_INS_Time instead.
 */
#define SIG_INS_HeightTime_INS_Time                 1, 0, 39, 32

/**
 * Signal INS_Time setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_HeightTime_INS_Time or \ref INIT_INS_HeightTime instead.
 */
#define SETUP_INS_HeightTime_INS_Time               1, 0, 39, 32, 0

/**
 * Get signal INS_Time from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_HeightTime_INS_Time(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_Time in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_HeightTime_INS_Time(buf, val) { \
	buf[4] &= (uint8_t)~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= (uint8_t)~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= (uint8_t)~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= (uint8_t)~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_Time in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_HeightTime_INS_Time(buf) \
	SET_INS_HeightTime_INS_Time(buf, 0)

/**
 * Signal INS_Time value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_HeightTime_INS_Time(x, fmt) \
	((x) * fmt)

/**
 * Signal INS_Time raw initial value.
 */
#define START_INS_HeightTime_INS_Time               0

/**
 * Signal INS_Time raw minimum value.
 */
#define MIN_INS_HeightTime_INS_Time                 0

/**
 * Signal INS_Time raw maximum value.
 */
#define MAX_INS_HeightTime_INS_Time                 4294967295

/**
 * Signal INS_Time raw offset value.
 */
#define OFF_INS_HeightTime_INS_Time                 0

/**
 * @}
 */

/**
 * @defgroup SIG_INS_HeadingPitchRoll_INS_HeadingAngle Signal INS_HeadingAngle of Message INS_HeadingPitchRoll (0x502)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_HeadingPitchRoll
 * @{
 */

/**
 * Signal INS_HeadingAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_HeadingPitchRoll_INS_HeadingAngle and \ref GET_INS_HeadingPitchRoll_INS_HeadingAngle instead.
 */
#define SIG_INS_HeadingPitchRoll_INS_HeadingAngle        1, 0, 39, 16

/**
 * Signal INS_HeadingAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_HeadingPitchRoll_INS_HeadingAngle or \ref INIT_INS_HeadingPitchRoll instead.
 */
#define SETUP_INS_HeadingPitchRoll_INS_HeadingAngle      1, 0, 39, 16, 0

/**
 * Get signal INS_HeadingAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_HeadingPitchRoll_INS_HeadingAngle(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_HeadingAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_HeadingPitchRoll_INS_HeadingAngle(buf, val) { \
	buf[4] &= (uint8_t)~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= (uint8_t)~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_HeadingAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_HeadingPitchRoll_INS_HeadingAngle(buf) \
	SET_INS_HeadingPitchRoll_INS_HeadingAngle(buf, 0)

/**
 * Signal INS_HeadingAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_HeadingPitchRoll_INS_HeadingAngle(x, fmt) \
	((x) * fmt * 10000000 / 910249408 + fmt * (-360))

/**
 * Signal INS_HeadingAngle raw initial value.
 */
#define START_INS_HeadingPitchRoll_INS_HeadingAngle      0

/**
 * Signal INS_HeadingAngle raw minimum value.
 */
#define MIN_INS_HeadingPitchRoll_INS_HeadingAngle        0

/**
 * Signal INS_HeadingAngle raw maximum value.
 */
#define MAX_INS_HeadingPitchRoll_INS_HeadingAngle        65538

/**
 * Signal INS_HeadingAngle raw offset value.
 */
#define OFF_INS_HeadingPitchRoll_INS_HeadingAngle        -32769

/**
 * @}
 */

/**
 * @defgroup SIG_INS_HeadingPitchRoll_INS_RollAngle Signal INS_RollAngle of Message INS_HeadingPitchRoll (0x502)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_HeadingPitchRoll
 * @{
 */

/**
 * Signal INS_RollAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_HeadingPitchRoll_INS_RollAngle and \ref GET_INS_HeadingPitchRoll_INS_RollAngle instead.
 */
#define SIG_INS_HeadingPitchRoll_INS_RollAngle        1, 0, 23, 16

/**
 * Signal INS_RollAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_HeadingPitchRoll_INS_RollAngle or \ref INIT_INS_HeadingPitchRoll instead.
 */
#define SETUP_INS_HeadingPitchRoll_INS_RollAngle      1, 0, 23, 16, 0

/**
 * Get signal INS_RollAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_HeadingPitchRoll_INS_RollAngle(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_RollAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_HeadingPitchRoll_INS_RollAngle(buf, val) { \
	buf[2] &= (uint8_t)~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= (uint8_t)~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_RollAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_HeadingPitchRoll_INS_RollAngle(buf) \
	SET_INS_HeadingPitchRoll_INS_RollAngle(buf, 0)

/**
 * Signal INS_RollAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_HeadingPitchRoll_INS_RollAngle(x, fmt) \
	((x) * fmt * 10000000 / 910249408 + fmt * (-360))

/**
 * Signal INS_RollAngle raw initial value.
 */
#define START_INS_HeadingPitchRoll_INS_RollAngle      0

/**
 * Signal INS_RollAngle raw minimum value.
 */
#define MIN_INS_HeadingPitchRoll_INS_RollAngle        0

/**
 * Signal INS_RollAngle raw maximum value.
 */
#define MAX_INS_HeadingPitchRoll_INS_RollAngle        65538

/**
 * Signal INS_RollAngle raw offset value.
 */
#define OFF_INS_HeadingPitchRoll_INS_RollAngle        -32769

/**
 * @}
 */

/**
 * @defgroup SIG_INS_HeadingPitchRoll_INS_PitchAngle Signal INS_PitchAngle of Message INS_HeadingPitchRoll (0x502)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_HeadingPitchRoll
 * @{
 */

/**
 * Signal INS_PitchAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_HeadingPitchRoll_INS_PitchAngle and \ref GET_INS_HeadingPitchRoll_INS_PitchAngle instead.
 */
#define SIG_INS_HeadingPitchRoll_INS_PitchAngle        1, 0, 7, 16

/**
 * Signal INS_PitchAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_HeadingPitchRoll_INS_PitchAngle or \ref INIT_INS_HeadingPitchRoll instead.
 */
#define SETUP_INS_HeadingPitchRoll_INS_PitchAngle      1, 0, 7, 16, 0

/**
 * Get signal INS_PitchAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_HeadingPitchRoll_INS_PitchAngle(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal INS_PitchAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_HeadingPitchRoll_INS_PitchAngle(buf, val) { \
	buf[0] &= (uint8_t)~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= (uint8_t)~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal INS_PitchAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_HeadingPitchRoll_INS_PitchAngle(buf) \
	SET_INS_HeadingPitchRoll_INS_PitchAngle(buf, 0)

/**
 * Signal INS_PitchAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_HeadingPitchRoll_INS_PitchAngle(x, fmt) \
	((x) * fmt * 10000000 / 910249408 + fmt * (-360))

/**
 * Signal INS_PitchAngle raw initial value.
 */
#define START_INS_HeadingPitchRoll_INS_PitchAngle      0

/**
 * Signal INS_PitchAngle raw minimum value.
 */
#define MIN_INS_HeadingPitchRoll_INS_PitchAngle        0

/**
 * Signal INS_PitchAngle raw maximum value.
 */
#define MAX_INS_HeadingPitchRoll_INS_PitchAngle        65538

/**
 * Signal INS_PitchAngle raw offset value.
 */
#define OFF_INS_HeadingPitchRoll_INS_PitchAngle        -32769

/**
 * @}
 */

/**
 * @defgroup SIG_INS_GYRO_GYRO_Z Signal GYRO_Z of Message INS_GYRO (0x501)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_GYRO
 * @{
 */

/**
 * Signal GYRO_Z configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_GYRO_GYRO_Z and \ref GET_INS_GYRO_GYRO_Z instead.
 */
#define SIG_INS_GYRO_GYRO_Z                         1, 0, 39, 16

/**
 * Signal GYRO_Z setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_GYRO_GYRO_Z or \ref INIT_INS_GYRO instead.
 */
#define SETUP_INS_GYRO_GYRO_Z                       1, 0, 39, 16, 0

/**
 * Get signal GYRO_Z from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_GYRO_GYRO_Z(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GYRO_Z in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_GYRO_GYRO_Z(buf, val) { \
	buf[4] &= (uint8_t)~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= (uint8_t)~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GYRO_Z in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_GYRO_GYRO_Z(buf) \
	SET_INS_GYRO_GYRO_Z(buf, 0)

/**
 * Signal GYRO_Z value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_GYRO_GYRO_Z(x, fmt) \
	((x) * fmt * 76293 / 10000000 + fmt * (-250))

/**
 * Signal GYRO_Z raw initial value.
 */
#define START_INS_GYRO_GYRO_Z                       0

/**
 * Signal GYRO_Z raw minimum value.
 */
#define MIN_INS_GYRO_GYRO_Z                         0

/**
 * Signal GYRO_Z raw maximum value.
 */
#define MAX_INS_GYRO_GYRO_Z                         65537

/**
 * Signal GYRO_Z raw offset value.
 */
#define OFF_INS_GYRO_GYRO_Z                         -32768

/**
 * @}
 */

/**
 * @defgroup SIG_INS_GYRO_GYRO_Y Signal GYRO_Y of Message INS_GYRO (0x501)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_GYRO
 * @{
 */

/**
 * Signal GYRO_Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_GYRO_GYRO_Y and \ref GET_INS_GYRO_GYRO_Y instead.
 */
#define SIG_INS_GYRO_GYRO_Y                         1, 0, 23, 16

/**
 * Signal GYRO_Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_GYRO_GYRO_Y or \ref INIT_INS_GYRO instead.
 */
#define SETUP_INS_GYRO_GYRO_Y                       1, 0, 23, 16, 0

/**
 * Get signal GYRO_Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_GYRO_GYRO_Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GYRO_Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_GYRO_GYRO_Y(buf, val) { \
	buf[2] &= (uint8_t)~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= (uint8_t)~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GYRO_Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_GYRO_GYRO_Y(buf) \
	SET_INS_GYRO_GYRO_Y(buf, 0)

/**
 * Signal GYRO_Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_GYRO_GYRO_Y(x, fmt) \
	((x) * fmt * 76293 / 10000000 + fmt * (-250))

/**
 * Signal GYRO_Y raw initial value.
 */
#define START_INS_GYRO_GYRO_Y                       0

/**
 * Signal GYRO_Y raw minimum value.
 */
#define MIN_INS_GYRO_GYRO_Y                         0

/**
 * Signal GYRO_Y raw maximum value.
 */
#define MAX_INS_GYRO_GYRO_Y                         65537

/**
 * Signal GYRO_Y raw offset value.
 */
#define OFF_INS_GYRO_GYRO_Y                         -32768

/**
 * @}
 */

/**
 * @defgroup SIG_INS_GYRO_GYRO_X Signal GYRO_X of Message INS_GYRO (0x501)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_GYRO
 * @{
 */

/**
 * Signal GYRO_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_GYRO_GYRO_X and \ref GET_INS_GYRO_GYRO_X instead.
 */
#define SIG_INS_GYRO_GYRO_X                         1, 0, 7, 16

/**
 * Signal GYRO_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_GYRO_GYRO_X or \ref INIT_INS_GYRO instead.
 */
#define SETUP_INS_GYRO_GYRO_X                       1, 0, 7, 16, 0

/**
 * Get signal GYRO_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_GYRO_GYRO_X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal GYRO_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_GYRO_GYRO_X(buf, val) { \
	buf[0] &= (uint8_t)~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= (uint8_t)~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal GYRO_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_GYRO_GYRO_X(buf) \
	SET_INS_GYRO_GYRO_X(buf, 0)

/**
 * Signal GYRO_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_GYRO_GYRO_X(x, fmt) \
	((x) * fmt * 76293 / 10000000 + fmt * (-250))

/**
 * Signal GYRO_X raw initial value.
 */
#define START_INS_GYRO_GYRO_X                       0

/**
 * Signal GYRO_X raw minimum value.
 */
#define MIN_INS_GYRO_GYRO_X                         0

/**
 * Signal GYRO_X raw maximum value.
 */
#define MAX_INS_GYRO_GYRO_X                         65537

/**
 * Signal GYRO_X raw offset value.
 */
#define OFF_INS_GYRO_GYRO_X                         -32768

/**
 * @}
 */

/**
 * @defgroup SIG_INS_Acc_ACC_Z Signal ACC_Z of Message INS_Acc (0x500)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_Acc
 * @{
 */

/**
 * Signal ACC_Z configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_Acc_ACC_Z and \ref GET_INS_Acc_ACC_Z instead.
 */
#define SIG_INS_Acc_ACC_Z                           1, 0, 39, 16

/**
 * Signal ACC_Z setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_Acc_ACC_Z or \ref INIT_INS_Acc instead.
 */
#define SETUP_INS_Acc_ACC_Z                         1, 0, 39, 16, 0

/**
 * Get signal ACC_Z from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_Acc_ACC_Z(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ACC_Z in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_Acc_ACC_Z(buf, val) { \
	buf[4] &= (uint8_t)~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= (uint8_t)~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ACC_Z in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_Acc_ACC_Z(buf) \
	SET_INS_Acc_ACC_Z(buf, 0)

/**
 * Signal ACC_Z value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_Acc_ACC_Z(x, fmt) \
	((x) * fmt / 8192 + fmt * (-4))

/**
 * Signal ACC_Z raw initial value.
 */
#define START_INS_Acc_ACC_Z                         0

/**
 * Signal ACC_Z raw minimum value.
 */
#define MIN_INS_Acc_ACC_Z                           0

/**
 * Signal ACC_Z raw maximum value.
 */
#define MAX_INS_Acc_ACC_Z                           65536

/**
 * Signal ACC_Z raw offset value.
 */
#define OFF_INS_Acc_ACC_Z                           -32768

/**
 * @}
 */

/**
 * @defgroup SIG_INS_Acc_ACC_Y Signal ACC_Y of Message INS_Acc (0x500)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_Acc
 * @{
 */

/**
 * Signal ACC_Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_Acc_ACC_Y and \ref GET_INS_Acc_ACC_Y instead.
 */
#define SIG_INS_Acc_ACC_Y                           1, 0, 23, 16

/**
 * Signal ACC_Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_Acc_ACC_Y or \ref INIT_INS_Acc instead.
 */
#define SETUP_INS_Acc_ACC_Y                         1, 0, 23, 16, 0

/**
 * Get signal ACC_Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_Acc_ACC_Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ACC_Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_Acc_ACC_Y(buf, val) { \
	buf[2] &= (uint8_t)~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= (uint8_t)~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ACC_Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_Acc_ACC_Y(buf) \
	SET_INS_Acc_ACC_Y(buf, 0)

/**
 * Signal ACC_Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_Acc_ACC_Y(x, fmt) \
	((x) * fmt / 8192 + fmt * (-4))

/**
 * Signal ACC_Y raw initial value.
 */
#define START_INS_Acc_ACC_Y                         0

/**
 * Signal ACC_Y raw minimum value.
 */
#define MIN_INS_Acc_ACC_Y                           0

/**
 * Signal ACC_Y raw maximum value.
 */
#define MAX_INS_Acc_ACC_Y                           65536

/**
 * Signal ACC_Y raw offset value.
 */
#define OFF_INS_Acc_ACC_Y                           -32768

/**
 * @}
 */

/**
 * @defgroup SIG_INS_Acc_ACC_X Signal ACC_X of Message INS_Acc (0x500)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_INS_Acc
 * @{
 */

/**
 * Signal ACC_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_INS_Acc_ACC_X and \ref GET_INS_Acc_ACC_X instead.
 */
#define SIG_INS_Acc_ACC_X                           1, 0, 7, 16

/**
 * Signal ACC_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_INS_Acc_ACC_X or \ref INIT_INS_Acc instead.
 */
#define SETUP_INS_Acc_ACC_X                         1, 0, 7, 16, 0

/**
 * Get signal ACC_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_INS_Acc_ACC_X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[0] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ACC_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_INS_Acc_ACC_X(buf, val) { \
	buf[0] &= (uint8_t)~(0xff << 0); \
	buf[0] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[1] &= (uint8_t)~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ACC_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_INS_Acc_ACC_X(buf) \
	SET_INS_Acc_ACC_X(buf, 0)

/**
 * Signal ACC_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_INS_Acc_ACC_X(x, fmt) \
	((x) * fmt / 8192 + fmt * (-4))

/**
 * Signal ACC_X raw initial value.
 */
#define START_INS_Acc_ACC_X                         0

/**
 * Signal ACC_X raw minimum value.
 */
#define MIN_INS_Acc_ACC_X                           0

/**
 * Signal ACC_X raw maximum value.
 */
#define MAX_INS_Acc_ACC_X                           65536

/**
 * Signal ACC_X raw offset value.
 */
#define OFF_INS_Acc_ACC_X                           -32768

/**
 * @}
 */

