#ifndef HOLO_SENSORS_HORIZON_MATRIX2_HORIZON_MATRIX2_OBSTACLE_DBC_H
#define HOLO_SENSORS_HORIZON_MATRIX2_HORIZON_MATRIX2_OBSTACLE_DBC_H

/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2020年 06月 02日 星期二 17:10:55 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_hb_Obstacle
 */

/**
 * @defgroup DB_hb_Obstacle CAN Database hb_Obstacle
 *
 * Path to file: output/hb_Obstacle.dbc
 *
 * Provides the following ECUs:
 * - \ref ECU_Matrix
 */

/**
 * @defgroup ECU_Matrix Electronics Control Unit Matrix
 *
 * This ECU was defined in \ref DB_hb_Obstacle.
 *
 * TX messages:
 * - \ref MSG_ObstacleStatusA
 * - \ref MSG_ObstacleDataC3
 * - \ref MSG_ObstacleDataC10
 * - \ref MSG_ObstacleDataC9
 * - \ref MSG_ObstacleDataC8
 * - \ref MSG_ObstacleDataC7
 * - \ref MSG_ObstacleDataC6
 * - \ref MSG_ObstacleDataC5
 * - \ref MSG_ObstacleDataC4
 * - \ref MSG_ObstacleDataC2
 * - \ref MSG_ObstacleDataB5
 * - \ref MSG_ObstacleDataB6
 * - \ref MSG_ObstacleDataB7
 * - \ref MSG_ObstacleDataB8
 * - \ref MSG_ObstacleDataB9
 * - \ref MSG_ObstacleDataB10
 * - \ref MSG_ObstacleDataB4
 * - \ref MSG_ObstacleDataB3
 * - \ref MSG_ObstacleDataB2
 * - \ref MSG_ObstacleDataA7
 * - \ref MSG_ObstacleDataA8
 * - \ref MSG_ObstacleDataA9
 * - \ref MSG_ObstacleDataA10
 * - \ref MSG_ObstacleDataA6
 * - \ref MSG_ObstacleDataA5
 * - \ref MSG_ObstacleDataA4
 * - \ref MSG_ObstacleDataA3
 * - \ref MSG_ObstacleDataA2
 * - \ref MSG_ObstacleDataC1
 * - \ref MSG_ObstacleDataB1
 * - \ref MSG_ObstacleDataA1
 * - \ref MSG_ObstacleInternalID0
 * - \ref MSG_ObstacleInternalID1
 * - \ref MSG_ObstacleInternalID2
 * - \ref MSG_ObstacleInternalID3
 * - \ref MSG_ObstacleInternalID4
 *
 * RX signals:
 * - \ref SIG_ObstacleStatusA_NumObstacles
 * - \ref SIG_ObstacleStatusA_Timestamp
 * - \ref SIG_ObstacleStatusA_ProtocolVersion
 * - \ref SIG_ObstacleStatusA_Go
 * - \ref SIG_ObstacleStatusA_Close_Car
 * - \ref SIG_ObstacleStatusA_RightCloseRangeCutIn
 * - \ref SIG_ObstacleStatusA_LeftCloseRangeCutIn
 * - \ref SIG_ObstacleStatusA_Failsafe
 * - \ref SIG_ObstacleStatusA_ID_CIPV
 * - \ref SIG_ObstacleStatusA_ID_MCP
 * - \ref SIG_ObstacleStatusA_reserved_stA
 * - \ref SIG_ObstacleDataC3_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC3_ObstacleVelY
 * - \ref SIG_ObstacleDataC3_Object_Accel_X
 * - \ref SIG_ObstacleDataC3_ObstacleReplaced
 * - \ref SIG_ObstacleDataC3_PedestrainOrientations
 * - \ref SIG_ObstacleDataC3_VehicleAngle
 * - \ref SIG_ObstacleDataC3_reserved_C
 * - \ref SIG_ObstacleDataC10_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC10_ObstacleVelY
 * - \ref SIG_ObstacleDataC10_Object_Accel_X
 * - \ref SIG_ObstacleDataC10_ObstacleReplaced
 * - \ref SIG_ObstacleDataC10_PedestrainOrientations
 * - \ref SIG_ObstacleDataC10_VehicleAngle
 * - \ref SIG_ObstacleDataC10_reserved_C
 * - \ref SIG_ObstacleDataC9_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC9_ObstacleVelY
 * - \ref SIG_ObstacleDataC9_Object_Accel_X
 * - \ref SIG_ObstacleDataC9_ObstacleReplaced
 * - \ref SIG_ObstacleDataC9_PedestrainOrientations
 * - \ref SIG_ObstacleDataC9_VehicleAngle
 * - \ref SIG_ObstacleDataC9_reserved_C
 * - \ref SIG_ObstacleDataC8_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC8_ObstacleVelY
 * - \ref SIG_ObstacleDataC8_Object_Accel_X
 * - \ref SIG_ObstacleDataC8_ObstacleReplaced
 * - \ref SIG_ObstacleDataC8_PedestrainOrientations
 * - \ref SIG_ObstacleDataC8_VehicleAngle
 * - \ref SIG_ObstacleDataC8_reserved_C
 * - \ref SIG_ObstacleDataC7_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC7_ObstacleVelY
 * - \ref SIG_ObstacleDataC7_Object_Accel_X
 * - \ref SIG_ObstacleDataC7_ObstacleReplaced
 * - \ref SIG_ObstacleDataC7_PedestrainOrientations
 * - \ref SIG_ObstacleDataC7_VehicleAngle
 * - \ref SIG_ObstacleDataC7_reserved_C
 * - \ref SIG_ObstacleDataC6_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC6_ObstacleVelY
 * - \ref SIG_ObstacleDataC6_Object_Accel_X
 * - \ref SIG_ObstacleDataC6_ObstacleReplaced
 * - \ref SIG_ObstacleDataC6_PedestrainOrientations
 * - \ref SIG_ObstacleDataC6_VehicleAngle
 * - \ref SIG_ObstacleDataC6_reserved_C
 * - \ref SIG_ObstacleDataC5_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC5_ObstacleVelY
 * - \ref SIG_ObstacleDataC5_Object_Accel_X
 * - \ref SIG_ObstacleDataC5_ObstacleReplaced
 * - \ref SIG_ObstacleDataC5_PedestrainOrientations
 * - \ref SIG_ObstacleDataC5_VehicleAngle
 * - \ref SIG_ObstacleDataC5_reserved_C
 * - \ref SIG_ObstacleDataC4_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC4_ObstacleVelY
 * - \ref SIG_ObstacleDataC4_Object_Accel_X
 * - \ref SIG_ObstacleDataC4_ObstacleReplaced
 * - \ref SIG_ObstacleDataC4_PedestrainOrientations
 * - \ref SIG_ObstacleDataC4_VehicleAngle
 * - \ref SIG_ObstacleDataC4_reserved_C
 * - \ref SIG_ObstacleDataC2_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC2_ObstacleVelY
 * - \ref SIG_ObstacleDataC2_Object_Accel_X
 * - \ref SIG_ObstacleDataC2_ObstacleReplaced
 * - \ref SIG_ObstacleDataC2_PedestrainOrientations
 * - \ref SIG_ObstacleDataC2_VehicleAngle
 * - \ref SIG_ObstacleDataC2_reserved_C
 * - \ref SIG_ObstacleDataB5_ObstacleLength
 * - \ref SIG_ObstacleDataB5_ObstacleWidth
 * - \ref SIG_ObstacleDataB5_ObstacleAge
 * - \ref SIG_ObstacleDataB5_ObstacleLane
 * - \ref SIG_ObstacleDataB5_CIPVFlag
 * - \ref SIG_ObstacleDataB5_MCPFlag
 * - \ref SIG_ObstacleDataB5_PedSubType
 * - \ref SIG_ObstacleDataB5_PedPos
 * - \ref SIG_ObstacleDataB5_reserved_b1
 * - \ref SIG_ObstacleDataB6_ObstacleLength
 * - \ref SIG_ObstacleDataB6_ObstacleWidth
 * - \ref SIG_ObstacleDataB6_ObstacleAge
 * - \ref SIG_ObstacleDataB6_ObstacleLane
 * - \ref SIG_ObstacleDataB6_CIPVFlag
 * - \ref SIG_ObstacleDataB6_MCPFlag
 * - \ref SIG_ObstacleDataB6_PedSubType
 * - \ref SIG_ObstacleDataB6_PedPos
 * - \ref SIG_ObstacleDataB6_reserved_b1
 * - \ref SIG_ObstacleDataB7_ObstacleLength
 * - \ref SIG_ObstacleDataB7_ObstacleWidth
 * - \ref SIG_ObstacleDataB7_ObstacleAge
 * - \ref SIG_ObstacleDataB7_ObstacleLane
 * - \ref SIG_ObstacleDataB7_CIPVFlag
 * - \ref SIG_ObstacleDataB7_MCPFlag
 * - \ref SIG_ObstacleDataB7_PedSubType
 * - \ref SIG_ObstacleDataB7_PedPos
 * - \ref SIG_ObstacleDataB7_reserved_b1
 * - \ref SIG_ObstacleDataB8_ObstacleLength
 * - \ref SIG_ObstacleDataB8_ObstacleWidth
 * - \ref SIG_ObstacleDataB8_ObstacleAge
 * - \ref SIG_ObstacleDataB8_ObstacleLane
 * - \ref SIG_ObstacleDataB8_CIPVFlag
 * - \ref SIG_ObstacleDataB8_MCPFlag
 * - \ref SIG_ObstacleDataB8_PedSubType
 * - \ref SIG_ObstacleDataB8_PedPos
 * - \ref SIG_ObstacleDataB8_reserved_b1
 * - \ref SIG_ObstacleDataB9_ObstacleLength
 * - \ref SIG_ObstacleDataB9_ObstacleWidth
 * - \ref SIG_ObstacleDataB9_ObstacleAge
 * - \ref SIG_ObstacleDataB9_ObstacleLane
 * - \ref SIG_ObstacleDataB9_CIPVFlag
 * - \ref SIG_ObstacleDataB9_MCPFlag
 * - \ref SIG_ObstacleDataB9_PedSubType
 * - \ref SIG_ObstacleDataB9_PedPos
 * - \ref SIG_ObstacleDataB9_reserved_b1
 * - \ref SIG_ObstacleDataB10_ObstacleLength
 * - \ref SIG_ObstacleDataB10_ObstacleWidth
 * - \ref SIG_ObstacleDataB10_ObstacleAge
 * - \ref SIG_ObstacleDataB10_ObstacleLane
 * - \ref SIG_ObstacleDataB10_CIPVFlag
 * - \ref SIG_ObstacleDataB10_MCPFlag
 * - \ref SIG_ObstacleDataB10_PedSubType
 * - \ref SIG_ObstacleDataB10_PedPos
 * - \ref SIG_ObstacleDataB10_reserved_b1
 * - \ref SIG_ObstacleDataB4_ObstacleLength
 * - \ref SIG_ObstacleDataB4_ObstacleWidth
 * - \ref SIG_ObstacleDataB4_ObstacleAge
 * - \ref SIG_ObstacleDataB4_ObstacleLane
 * - \ref SIG_ObstacleDataB4_CIPVFlag
 * - \ref SIG_ObstacleDataB4_MCPFlag
 * - \ref SIG_ObstacleDataB4_PedSubType
 * - \ref SIG_ObstacleDataB4_PedPos
 * - \ref SIG_ObstacleDataB4_reserved_b1
 * - \ref SIG_ObstacleDataB3_ObstacleLength
 * - \ref SIG_ObstacleDataB3_ObstacleWidth
 * - \ref SIG_ObstacleDataB3_ObstacleAge
 * - \ref SIG_ObstacleDataB3_ObstacleLane
 * - \ref SIG_ObstacleDataB3_CIPVFlag
 * - \ref SIG_ObstacleDataB3_MCPFlag
 * - \ref SIG_ObstacleDataB3_PedSubType
 * - \ref SIG_ObstacleDataB3_PedPos
 * - \ref SIG_ObstacleDataB3_reserved_b1
 * - \ref SIG_ObstacleDataB2_ObstacleLength
 * - \ref SIG_ObstacleDataB2_ObstacleWidth
 * - \ref SIG_ObstacleDataB2_ObstacleAge
 * - \ref SIG_ObstacleDataB2_ObstacleLane
 * - \ref SIG_ObstacleDataB2_CIPVFlag
 * - \ref SIG_ObstacleDataB2_MCPFlag
 * - \ref SIG_ObstacleDataB2_PedSubType
 * - \ref SIG_ObstacleDataB2_PedPos
 * - \ref SIG_ObstacleDataB2_reserved_b1
 * - \ref SIG_ObstacleDataA7_ObstacleID
 * - \ref SIG_ObstacleDataA7_ObstaclePosX
 * - \ref SIG_ObstacleDataA7_ObstaclePosY
 * - \ref SIG_ObstacleDataA7_BlinkerInfo
 * - \ref SIG_ObstacleDataA7_Move_in_and_Out
 * - \ref SIG_ObstacleDataA7_ObstacleVelX
 * - \ref SIG_ObstacleDataA7_ObstacleType
 * - \ref SIG_ObstacleDataA7_VehicleSubType
 * - \ref SIG_ObstacleDataA7_ObstacleStatus
 * - \ref SIG_ObstacleDataA7_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA7_ObstacleValid
 * - \ref SIG_ObstacleDataA8_ObstacleID
 * - \ref SIG_ObstacleDataA8_ObstaclePosX
 * - \ref SIG_ObstacleDataA8_ObstaclePosY
 * - \ref SIG_ObstacleDataA8_BlinkerInfo
 * - \ref SIG_ObstacleDataA8_Move_in_and_Out
 * - \ref SIG_ObstacleDataA8_ObstacleVelX
 * - \ref SIG_ObstacleDataA8_ObstacleType
 * - \ref SIG_ObstacleDataA8_VehicleSubType
 * - \ref SIG_ObstacleDataA8_ObstacleStatus
 * - \ref SIG_ObstacleDataA8_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA8_ObstacleValid
 * - \ref SIG_ObstacleDataA9_ObstacleID
 * - \ref SIG_ObstacleDataA9_ObstaclePosX
 * - \ref SIG_ObstacleDataA9_ObstaclePosY
 * - \ref SIG_ObstacleDataA9_BlinkerInfo
 * - \ref SIG_ObstacleDataA9_Move_in_and_Out
 * - \ref SIG_ObstacleDataA9_ObstacleVelX
 * - \ref SIG_ObstacleDataA9_ObstacleType
 * - \ref SIG_ObstacleDataA9_VehicleSubType
 * - \ref SIG_ObstacleDataA9_ObstacleStatus
 * - \ref SIG_ObstacleDataA9_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA9_ObstacleValid
 * - \ref SIG_ObstacleDataA10_ObstacleID
 * - \ref SIG_ObstacleDataA10_ObstaclePosX
 * - \ref SIG_ObstacleDataA10_ObstaclePosY
 * - \ref SIG_ObstacleDataA10_BlinkerInfo
 * - \ref SIG_ObstacleDataA10_Move_in_and_Out
 * - \ref SIG_ObstacleDataA10_ObstacleVelX
 * - \ref SIG_ObstacleDataA10_ObstacleType
 * - \ref SIG_ObstacleDataA10_VehicleSubType
 * - \ref SIG_ObstacleDataA10_ObstacleStatus
 * - \ref SIG_ObstacleDataA10_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA10_ObstacleValid
 * - \ref SIG_ObstacleDataA6_ObstacleID
 * - \ref SIG_ObstacleDataA6_ObstaclePosX
 * - \ref SIG_ObstacleDataA6_ObstaclePosY
 * - \ref SIG_ObstacleDataA6_BlinkerInfo
 * - \ref SIG_ObstacleDataA6_Move_in_and_Out
 * - \ref SIG_ObstacleDataA6_ObstacleVelX
 * - \ref SIG_ObstacleDataA6_ObstacleType
 * - \ref SIG_ObstacleDataA6_VehicleSubType
 * - \ref SIG_ObstacleDataA6_ObstacleStatus
 * - \ref SIG_ObstacleDataA6_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA6_ObstacleValid
 * - \ref SIG_ObstacleDataA5_ObstacleID
 * - \ref SIG_ObstacleDataA5_ObstaclePosX
 * - \ref SIG_ObstacleDataA5_ObstaclePosY
 * - \ref SIG_ObstacleDataA5_BlinkerInfo
 * - \ref SIG_ObstacleDataA5_Move_in_and_Out
 * - \ref SIG_ObstacleDataA5_ObstacleVelX
 * - \ref SIG_ObstacleDataA5_ObstacleType
 * - \ref SIG_ObstacleDataA5_VehicleSubType
 * - \ref SIG_ObstacleDataA5_ObstacleStatus
 * - \ref SIG_ObstacleDataA5_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA5_ObstacleValid
 * - \ref SIG_ObstacleDataA4_ObstacleID
 * - \ref SIG_ObstacleDataA4_ObstaclePosX
 * - \ref SIG_ObstacleDataA4_ObstaclePosY
 * - \ref SIG_ObstacleDataA4_BlinkerInfo
 * - \ref SIG_ObstacleDataA4_Move_in_and_Out
 * - \ref SIG_ObstacleDataA4_ObstacleVelX
 * - \ref SIG_ObstacleDataA4_ObstacleType
 * - \ref SIG_ObstacleDataA4_VehicleSubType
 * - \ref SIG_ObstacleDataA4_ObstacleStatus
 * - \ref SIG_ObstacleDataA4_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA4_ObstacleValid
 * - \ref SIG_ObstacleDataA3_ObstacleID
 * - \ref SIG_ObstacleDataA3_ObstaclePosX
 * - \ref SIG_ObstacleDataA3_ObstaclePosY
 * - \ref SIG_ObstacleDataA3_BlinkerInfo
 * - \ref SIG_ObstacleDataA3_Move_in_and_Out
 * - \ref SIG_ObstacleDataA3_ObstacleVelX
 * - \ref SIG_ObstacleDataA3_ObstacleType
 * - \ref SIG_ObstacleDataA3_VehicleSubType
 * - \ref SIG_ObstacleDataA3_ObstacleStatus
 * - \ref SIG_ObstacleDataA3_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA3_ObstacleValid
 * - \ref SIG_ObstacleDataA2_ObstacleID
 * - \ref SIG_ObstacleDataA2_ObstaclePosX
 * - \ref SIG_ObstacleDataA2_ObstaclePosY
 * - \ref SIG_ObstacleDataA2_BlinkerInfo
 * - \ref SIG_ObstacleDataA2_Move_in_and_Out
 * - \ref SIG_ObstacleDataA2_ObstacleVelX
 * - \ref SIG_ObstacleDataA2_ObstacleType
 * - \ref SIG_ObstacleDataA2_VehicleSubType
 * - \ref SIG_ObstacleDataA2_ObstacleStatus
 * - \ref SIG_ObstacleDataA2_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA2_ObstacleValid
 * - \ref SIG_ObstacleDataC1_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC1_ObstacleVelY
 * - \ref SIG_ObstacleDataC1_Object_Accel_X
 * - \ref SIG_ObstacleDataC1_ObstacleReplaced
 * - \ref SIG_ObstacleDataC1_PedestrainOrientations
 * - \ref SIG_ObstacleDataC1_VehicleAngle
 * - \ref SIG_ObstacleDataC1_reserved_C
 * - \ref SIG_ObstacleDataB1_ObstacleLength
 * - \ref SIG_ObstacleDataB1_ObstacleWidth
 * - \ref SIG_ObstacleDataB1_ObstacleAge
 * - \ref SIG_ObstacleDataB1_ObstacleLane
 * - \ref SIG_ObstacleDataB1_CIPVFlag
 * - \ref SIG_ObstacleDataB1_MCPFlag
 * - \ref SIG_ObstacleDataB1_PedSubType
 * - \ref SIG_ObstacleDataB1_PedPos
 * - \ref SIG_ObstacleDataB1_reserved_b1
 * - \ref SIG_ObstacleDataA1_ObstacleID
 * - \ref SIG_ObstacleDataA1_ObstaclePosX
 * - \ref SIG_ObstacleDataA1_ObstaclePosY
 * - \ref SIG_ObstacleDataA1_BlinkerInfo
 * - \ref SIG_ObstacleDataA1_Move_in_and_Out
 * - \ref SIG_ObstacleDataA1_ObstacleVelX
 * - \ref SIG_ObstacleDataA1_ObstacleType
 * - \ref SIG_ObstacleDataA1_VehicleSubType
 * - \ref SIG_ObstacleDataA1_ObstacleStatus
 * - \ref SIG_ObstacleDataA1_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA1_ObstacleValid
 * - \ref SIG_ObstacleInternalID0_Obstacle_Internal_ID1
 * - \ref SIG_ObstacleInternalID0_Obstacle_Internal_ID2
 * - \ref SIG_ObstacleInternalID1_Obstacle_Internal_ID3
 * - \ref SIG_ObstacleInternalID1_Obstacle_Internal_ID4
 * - \ref SIG_ObstacleInternalID2_Obstacle_Internal_ID5
 * - \ref SIG_ObstacleInternalID2_Obstacle_Internal_ID6
 * - \ref SIG_ObstacleInternalID3_Obstacle_Internal_ID7
 * - \ref SIG_ObstacleInternalID3_Obstacle_Internal_ID8
 * - \ref SIG_ObstacleInternalID4_Obstacle_Internal_ID9
 * - \ref SIG_ObstacleInternalID4_Obstacle_Internal_ID10
 *
 * @ingroup DB_hb_Obstacle
 */

/**
 * @defgroup MSG_ObstacleStatusA Message ObstacleStatusA (0x410)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleStatusA_NumObstacles
 * - \ref SIG_ObstacleStatusA_Timestamp
 * - \ref SIG_ObstacleStatusA_ProtocolVersion
 * - \ref SIG_ObstacleStatusA_Go
 * - \ref SIG_ObstacleStatusA_Close_Car
 * - \ref SIG_ObstacleStatusA_RightCloseRangeCutIn
 * - \ref SIG_ObstacleStatusA_LeftCloseRangeCutIn
 * - \ref SIG_ObstacleStatusA_Failsafe
 * - \ref SIG_ObstacleStatusA_ID_CIPV
 * - \ref SIG_ObstacleStatusA_ID_MCP
 * - \ref SIG_ObstacleStatusA_reserved_stA
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleStatusA configuration tuple.
 */
#define MSG_ObstacleStatusA 0x410, 0, 8

/**
 * Message ObstacleStatusA id.
 */
#define ID_ObstacleStatusA 0x410

/**
 * Message ObstacleStatusA extended id bit.
 */
#define EXT_ObstacleStatusA 0

/**
 * Message ObstacleStatusA Data Length Count.
 */
#define DLC_ObstacleStatusA 8

/**
 * Message ObstacleStatusA cycle time.
 */
#define CYCLE_ObstacleStatusA 0

/**
 * Message ObstacleStatusA fast cycle time.
 */
#define FAST_ObstacleStatusA 0

/**
 * Initialise message ObstacleStatusA buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleStatusA(buf)                                                                                      \
    {                                                                                                                  \
        INITSIG_ObstacleStatusA_NumObstacles(buf);                                                                     \
        INITSIG_ObstacleStatusA_Timestamp(buf);                                                                        \
        INITSIG_ObstacleStatusA_ProtocolVersion(buf);                                                                  \
        INITSIG_ObstacleStatusA_Go(buf);                                                                               \
        INITSIG_ObstacleStatusA_Close_Car(buf);                                                                        \
        INITSIG_ObstacleStatusA_RightCloseRangeCutIn(buf);                                                             \
        INITSIG_ObstacleStatusA_LeftCloseRangeCutIn(buf);                                                              \
        INITSIG_ObstacleStatusA_Failsafe(buf);                                                                         \
        INITSIG_ObstacleStatusA_ID_CIPV(buf);                                                                          \
        INITSIG_ObstacleStatusA_ID_MCP(buf);                                                                           \
        INITSIG_ObstacleStatusA_reserved_stA(buf);                                                                     \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataC3 Message ObstacleDataC3 (0x428)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataC3_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC3_ObstacleVelY
 * - \ref SIG_ObstacleDataC3_Object_Accel_X
 * - \ref SIG_ObstacleDataC3_ObstacleReplaced
 * - \ref SIG_ObstacleDataC3_PedestrainOrientations
 * - \ref SIG_ObstacleDataC3_VehicleAngle
 * - \ref SIG_ObstacleDataC3_reserved_C
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataC3 configuration tuple.
 */
#define MSG_ObstacleDataC3 0x428, 0, 8

/**
 * Message ObstacleDataC3 id.
 */
#define ID_ObstacleDataC3 0x428

/**
 * Message ObstacleDataC3 extended id bit.
 */
#define EXT_ObstacleDataC3 0

/**
 * Message ObstacleDataC3 Data Length Count.
 */
#define DLC_ObstacleDataC3 8

/**
 * Message ObstacleDataC3 cycle time.
 */
#define CYCLE_ObstacleDataC3 0

/**
 * Message ObstacleDataC3 fast cycle time.
 */
#define FAST_ObstacleDataC3 0

/**
 * Initialise message ObstacleDataC3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataC3(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataC3_ObstacleAngleRate(buf);                                                                 \
        INITSIG_ObstacleDataC3_ObstacleVelY(buf);                                                                      \
        INITSIG_ObstacleDataC3_Object_Accel_X(buf);                                                                    \
        INITSIG_ObstacleDataC3_ObstacleReplaced(buf);                                                                  \
        INITSIG_ObstacleDataC3_PedestrainOrientations(buf);                                                            \
        INITSIG_ObstacleDataC3_VehicleAngle(buf);                                                                      \
        INITSIG_ObstacleDataC3_reserved_C(buf);                                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataC10 Message ObstacleDataC10 (0x43d)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataC10_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC10_ObstacleVelY
 * - \ref SIG_ObstacleDataC10_Object_Accel_X
 * - \ref SIG_ObstacleDataC10_ObstacleReplaced
 * - \ref SIG_ObstacleDataC10_PedestrainOrientations
 * - \ref SIG_ObstacleDataC10_VehicleAngle
 * - \ref SIG_ObstacleDataC10_reserved_C
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataC10 configuration tuple.
 */
#define MSG_ObstacleDataC10 0x43d, 0, 8

/**
 * Message ObstacleDataC10 id.
 */
#define ID_ObstacleDataC10 0x43d

/**
 * Message ObstacleDataC10 extended id bit.
 */
#define EXT_ObstacleDataC10 0

/**
 * Message ObstacleDataC10 Data Length Count.
 */
#define DLC_ObstacleDataC10 8

/**
 * Message ObstacleDataC10 cycle time.
 */
#define CYCLE_ObstacleDataC10 0

/**
 * Message ObstacleDataC10 fast cycle time.
 */
#define FAST_ObstacleDataC10 0

/**
 * Initialise message ObstacleDataC10 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataC10(buf)                                                                                      \
    {                                                                                                                  \
        INITSIG_ObstacleDataC10_ObstacleAngleRate(buf);                                                                \
        INITSIG_ObstacleDataC10_ObstacleVelY(buf);                                                                     \
        INITSIG_ObstacleDataC10_Object_Accel_X(buf);                                                                   \
        INITSIG_ObstacleDataC10_ObstacleReplaced(buf);                                                                 \
        INITSIG_ObstacleDataC10_PedestrainOrientations(buf);                                                           \
        INITSIG_ObstacleDataC10_VehicleAngle(buf);                                                                     \
        INITSIG_ObstacleDataC10_reserved_C(buf);                                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataC9 Message ObstacleDataC9 (0x43a)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataC9_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC9_ObstacleVelY
 * - \ref SIG_ObstacleDataC9_Object_Accel_X
 * - \ref SIG_ObstacleDataC9_ObstacleReplaced
 * - \ref SIG_ObstacleDataC9_PedestrainOrientations
 * - \ref SIG_ObstacleDataC9_VehicleAngle
 * - \ref SIG_ObstacleDataC9_reserved_C
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataC9 configuration tuple.
 */
#define MSG_ObstacleDataC9 0x43a, 0, 8

/**
 * Message ObstacleDataC9 id.
 */
#define ID_ObstacleDataC9 0x43a

/**
 * Message ObstacleDataC9 extended id bit.
 */
#define EXT_ObstacleDataC9 0

/**
 * Message ObstacleDataC9 Data Length Count.
 */
#define DLC_ObstacleDataC9 8

/**
 * Message ObstacleDataC9 cycle time.
 */
#define CYCLE_ObstacleDataC9 0

/**
 * Message ObstacleDataC9 fast cycle time.
 */
#define FAST_ObstacleDataC9 0

/**
 * Initialise message ObstacleDataC9 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataC9(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataC9_ObstacleAngleRate(buf);                                                                 \
        INITSIG_ObstacleDataC9_ObstacleVelY(buf);                                                                      \
        INITSIG_ObstacleDataC9_Object_Accel_X(buf);                                                                    \
        INITSIG_ObstacleDataC9_ObstacleReplaced(buf);                                                                  \
        INITSIG_ObstacleDataC9_PedestrainOrientations(buf);                                                            \
        INITSIG_ObstacleDataC9_VehicleAngle(buf);                                                                      \
        INITSIG_ObstacleDataC9_reserved_C(buf);                                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataC8 Message ObstacleDataC8 (0x437)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataC8_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC8_ObstacleVelY
 * - \ref SIG_ObstacleDataC8_Object_Accel_X
 * - \ref SIG_ObstacleDataC8_ObstacleReplaced
 * - \ref SIG_ObstacleDataC8_PedestrainOrientations
 * - \ref SIG_ObstacleDataC8_VehicleAngle
 * - \ref SIG_ObstacleDataC8_reserved_C
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataC8 configuration tuple.
 */
#define MSG_ObstacleDataC8 0x437, 0, 8

/**
 * Message ObstacleDataC8 id.
 */
#define ID_ObstacleDataC8 0x437

/**
 * Message ObstacleDataC8 extended id bit.
 */
#define EXT_ObstacleDataC8 0

/**
 * Message ObstacleDataC8 Data Length Count.
 */
#define DLC_ObstacleDataC8 8

/**
 * Message ObstacleDataC8 cycle time.
 */
#define CYCLE_ObstacleDataC8 0

/**
 * Message ObstacleDataC8 fast cycle time.
 */
#define FAST_ObstacleDataC8 0

/**
 * Initialise message ObstacleDataC8 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataC8(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataC8_ObstacleAngleRate(buf);                                                                 \
        INITSIG_ObstacleDataC8_ObstacleVelY(buf);                                                                      \
        INITSIG_ObstacleDataC8_Object_Accel_X(buf);                                                                    \
        INITSIG_ObstacleDataC8_ObstacleReplaced(buf);                                                                  \
        INITSIG_ObstacleDataC8_PedestrainOrientations(buf);                                                            \
        INITSIG_ObstacleDataC8_VehicleAngle(buf);                                                                      \
        INITSIG_ObstacleDataC8_reserved_C(buf);                                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataC7 Message ObstacleDataC7 (0x434)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataC7_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC7_ObstacleVelY
 * - \ref SIG_ObstacleDataC7_Object_Accel_X
 * - \ref SIG_ObstacleDataC7_ObstacleReplaced
 * - \ref SIG_ObstacleDataC7_PedestrainOrientations
 * - \ref SIG_ObstacleDataC7_VehicleAngle
 * - \ref SIG_ObstacleDataC7_reserved_C
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataC7 configuration tuple.
 */
#define MSG_ObstacleDataC7 0x434, 0, 8

/**
 * Message ObstacleDataC7 id.
 */
#define ID_ObstacleDataC7 0x434

/**
 * Message ObstacleDataC7 extended id bit.
 */
#define EXT_ObstacleDataC7 0

/**
 * Message ObstacleDataC7 Data Length Count.
 */
#define DLC_ObstacleDataC7 8

/**
 * Message ObstacleDataC7 cycle time.
 */
#define CYCLE_ObstacleDataC7 0

/**
 * Message ObstacleDataC7 fast cycle time.
 */
#define FAST_ObstacleDataC7 0

/**
 * Initialise message ObstacleDataC7 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataC7(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataC7_ObstacleAngleRate(buf);                                                                 \
        INITSIG_ObstacleDataC7_ObstacleVelY(buf);                                                                      \
        INITSIG_ObstacleDataC7_Object_Accel_X(buf);                                                                    \
        INITSIG_ObstacleDataC7_ObstacleReplaced(buf);                                                                  \
        INITSIG_ObstacleDataC7_PedestrainOrientations(buf);                                                            \
        INITSIG_ObstacleDataC7_VehicleAngle(buf);                                                                      \
        INITSIG_ObstacleDataC7_reserved_C(buf);                                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataC6 Message ObstacleDataC6 (0x431)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataC6_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC6_ObstacleVelY
 * - \ref SIG_ObstacleDataC6_Object_Accel_X
 * - \ref SIG_ObstacleDataC6_ObstacleReplaced
 * - \ref SIG_ObstacleDataC6_PedestrainOrientations
 * - \ref SIG_ObstacleDataC6_VehicleAngle
 * - \ref SIG_ObstacleDataC6_reserved_C
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataC6 configuration tuple.
 */
#define MSG_ObstacleDataC6 0x431, 0, 8

/**
 * Message ObstacleDataC6 id.
 */
#define ID_ObstacleDataC6 0x431

/**
 * Message ObstacleDataC6 extended id bit.
 */
#define EXT_ObstacleDataC6 0

/**
 * Message ObstacleDataC6 Data Length Count.
 */
#define DLC_ObstacleDataC6 8

/**
 * Message ObstacleDataC6 cycle time.
 */
#define CYCLE_ObstacleDataC6 0

/**
 * Message ObstacleDataC6 fast cycle time.
 */
#define FAST_ObstacleDataC6 0

/**
 * Initialise message ObstacleDataC6 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataC6(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataC6_ObstacleAngleRate(buf);                                                                 \
        INITSIG_ObstacleDataC6_ObstacleVelY(buf);                                                                      \
        INITSIG_ObstacleDataC6_Object_Accel_X(buf);                                                                    \
        INITSIG_ObstacleDataC6_ObstacleReplaced(buf);                                                                  \
        INITSIG_ObstacleDataC6_PedestrainOrientations(buf);                                                            \
        INITSIG_ObstacleDataC6_VehicleAngle(buf);                                                                      \
        INITSIG_ObstacleDataC6_reserved_C(buf);                                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataC5 Message ObstacleDataC5 (0x42e)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataC5_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC5_ObstacleVelY
 * - \ref SIG_ObstacleDataC5_Object_Accel_X
 * - \ref SIG_ObstacleDataC5_ObstacleReplaced
 * - \ref SIG_ObstacleDataC5_PedestrainOrientations
 * - \ref SIG_ObstacleDataC5_VehicleAngle
 * - \ref SIG_ObstacleDataC5_reserved_C
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataC5 configuration tuple.
 */
#define MSG_ObstacleDataC5 0x42e, 0, 8

/**
 * Message ObstacleDataC5 id.
 */
#define ID_ObstacleDataC5 0x42e

/**
 * Message ObstacleDataC5 extended id bit.
 */
#define EXT_ObstacleDataC5 0

/**
 * Message ObstacleDataC5 Data Length Count.
 */
#define DLC_ObstacleDataC5 8

/**
 * Message ObstacleDataC5 cycle time.
 */
#define CYCLE_ObstacleDataC5 0

/**
 * Message ObstacleDataC5 fast cycle time.
 */
#define FAST_ObstacleDataC5 0

/**
 * Initialise message ObstacleDataC5 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataC5(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataC5_ObstacleAngleRate(buf);                                                                 \
        INITSIG_ObstacleDataC5_ObstacleVelY(buf);                                                                      \
        INITSIG_ObstacleDataC5_Object_Accel_X(buf);                                                                    \
        INITSIG_ObstacleDataC5_ObstacleReplaced(buf);                                                                  \
        INITSIG_ObstacleDataC5_PedestrainOrientations(buf);                                                            \
        INITSIG_ObstacleDataC5_VehicleAngle(buf);                                                                      \
        INITSIG_ObstacleDataC5_reserved_C(buf);                                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataC4 Message ObstacleDataC4 (0x42b)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataC4_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC4_ObstacleVelY
 * - \ref SIG_ObstacleDataC4_Object_Accel_X
 * - \ref SIG_ObstacleDataC4_ObstacleReplaced
 * - \ref SIG_ObstacleDataC4_PedestrainOrientations
 * - \ref SIG_ObstacleDataC4_VehicleAngle
 * - \ref SIG_ObstacleDataC4_reserved_C
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataC4 configuration tuple.
 */
#define MSG_ObstacleDataC4 0x42b, 0, 8

/**
 * Message ObstacleDataC4 id.
 */
#define ID_ObstacleDataC4 0x42b

/**
 * Message ObstacleDataC4 extended id bit.
 */
#define EXT_ObstacleDataC4 0

/**
 * Message ObstacleDataC4 Data Length Count.
 */
#define DLC_ObstacleDataC4 8

/**
 * Message ObstacleDataC4 cycle time.
 */
#define CYCLE_ObstacleDataC4 0

/**
 * Message ObstacleDataC4 fast cycle time.
 */
#define FAST_ObstacleDataC4 0

/**
 * Initialise message ObstacleDataC4 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataC4(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataC4_ObstacleAngleRate(buf);                                                                 \
        INITSIG_ObstacleDataC4_ObstacleVelY(buf);                                                                      \
        INITSIG_ObstacleDataC4_Object_Accel_X(buf);                                                                    \
        INITSIG_ObstacleDataC4_ObstacleReplaced(buf);                                                                  \
        INITSIG_ObstacleDataC4_PedestrainOrientations(buf);                                                            \
        INITSIG_ObstacleDataC4_VehicleAngle(buf);                                                                      \
        INITSIG_ObstacleDataC4_reserved_C(buf);                                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataC2 Message ObstacleDataC2 (0x425)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataC2_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC2_ObstacleVelY
 * - \ref SIG_ObstacleDataC2_Object_Accel_X
 * - \ref SIG_ObstacleDataC2_ObstacleReplaced
 * - \ref SIG_ObstacleDataC2_PedestrainOrientations
 * - \ref SIG_ObstacleDataC2_VehicleAngle
 * - \ref SIG_ObstacleDataC2_reserved_C
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataC2 configuration tuple.
 */
#define MSG_ObstacleDataC2 0x425, 0, 8

/**
 * Message ObstacleDataC2 id.
 */
#define ID_ObstacleDataC2 0x425

/**
 * Message ObstacleDataC2 extended id bit.
 */
#define EXT_ObstacleDataC2 0

/**
 * Message ObstacleDataC2 Data Length Count.
 */
#define DLC_ObstacleDataC2 8

/**
 * Message ObstacleDataC2 cycle time.
 */
#define CYCLE_ObstacleDataC2 0

/**
 * Message ObstacleDataC2 fast cycle time.
 */
#define FAST_ObstacleDataC2 0

/**
 * Initialise message ObstacleDataC2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataC2(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataC2_ObstacleAngleRate(buf);                                                                 \
        INITSIG_ObstacleDataC2_ObstacleVelY(buf);                                                                      \
        INITSIG_ObstacleDataC2_Object_Accel_X(buf);                                                                    \
        INITSIG_ObstacleDataC2_ObstacleReplaced(buf);                                                                  \
        INITSIG_ObstacleDataC2_PedestrainOrientations(buf);                                                            \
        INITSIG_ObstacleDataC2_VehicleAngle(buf);                                                                      \
        INITSIG_ObstacleDataC2_reserved_C(buf);                                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataB5 Message ObstacleDataB5 (0x42d)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataB5_ObstacleLength
 * - \ref SIG_ObstacleDataB5_ObstacleWidth
 * - \ref SIG_ObstacleDataB5_ObstacleAge
 * - \ref SIG_ObstacleDataB5_ObstacleLane
 * - \ref SIG_ObstacleDataB5_CIPVFlag
 * - \ref SIG_ObstacleDataB5_MCPFlag
 * - \ref SIG_ObstacleDataB5_PedSubType
 * - \ref SIG_ObstacleDataB5_PedPos
 * - \ref SIG_ObstacleDataB5_reserved_b1
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataB5 configuration tuple.
 */
#define MSG_ObstacleDataB5 0x42d, 0, 8

/**
 * Message ObstacleDataB5 id.
 */
#define ID_ObstacleDataB5 0x42d

/**
 * Message ObstacleDataB5 extended id bit.
 */
#define EXT_ObstacleDataB5 0

/**
 * Message ObstacleDataB5 Data Length Count.
 */
#define DLC_ObstacleDataB5 8

/**
 * Message ObstacleDataB5 cycle time.
 */
#define CYCLE_ObstacleDataB5 0

/**
 * Message ObstacleDataB5 fast cycle time.
 */
#define FAST_ObstacleDataB5 0

/**
 * Initialise message ObstacleDataB5 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataB5(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataB5_ObstacleLength(buf);                                                                    \
        INITSIG_ObstacleDataB5_ObstacleWidth(buf);                                                                     \
        INITSIG_ObstacleDataB5_ObstacleAge(buf);                                                                       \
        INITSIG_ObstacleDataB5_ObstacleLane(buf);                                                                      \
        INITSIG_ObstacleDataB5_CIPVFlag(buf);                                                                          \
        INITSIG_ObstacleDataB5_MCPFlag(buf);                                                                           \
        INITSIG_ObstacleDataB5_PedSubType(buf);                                                                        \
        INITSIG_ObstacleDataB5_PedPos(buf);                                                                            \
        INITSIG_ObstacleDataB5_reserved_b1(buf);                                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataB6 Message ObstacleDataB6 (0x430)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataB6_ObstacleLength
 * - \ref SIG_ObstacleDataB6_ObstacleWidth
 * - \ref SIG_ObstacleDataB6_ObstacleAge
 * - \ref SIG_ObstacleDataB6_ObstacleLane
 * - \ref SIG_ObstacleDataB6_CIPVFlag
 * - \ref SIG_ObstacleDataB6_MCPFlag
 * - \ref SIG_ObstacleDataB6_PedSubType
 * - \ref SIG_ObstacleDataB6_PedPos
 * - \ref SIG_ObstacleDataB6_reserved_b1
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataB6 configuration tuple.
 */
#define MSG_ObstacleDataB6 0x430, 0, 8

/**
 * Message ObstacleDataB6 id.
 */
#define ID_ObstacleDataB6 0x430

/**
 * Message ObstacleDataB6 extended id bit.
 */
#define EXT_ObstacleDataB6 0

/**
 * Message ObstacleDataB6 Data Length Count.
 */
#define DLC_ObstacleDataB6 8

/**
 * Message ObstacleDataB6 cycle time.
 */
#define CYCLE_ObstacleDataB6 0

/**
 * Message ObstacleDataB6 fast cycle time.
 */
#define FAST_ObstacleDataB6 0

/**
 * Initialise message ObstacleDataB6 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataB6(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataB6_ObstacleLength(buf);                                                                    \
        INITSIG_ObstacleDataB6_ObstacleWidth(buf);                                                                     \
        INITSIG_ObstacleDataB6_ObstacleAge(buf);                                                                       \
        INITSIG_ObstacleDataB6_ObstacleLane(buf);                                                                      \
        INITSIG_ObstacleDataB6_CIPVFlag(buf);                                                                          \
        INITSIG_ObstacleDataB6_MCPFlag(buf);                                                                           \
        INITSIG_ObstacleDataB6_PedSubType(buf);                                                                        \
        INITSIG_ObstacleDataB6_PedPos(buf);                                                                            \
        INITSIG_ObstacleDataB6_reserved_b1(buf);                                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataB7 Message ObstacleDataB7 (0x433)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataB7_ObstacleLength
 * - \ref SIG_ObstacleDataB7_ObstacleWidth
 * - \ref SIG_ObstacleDataB7_ObstacleAge
 * - \ref SIG_ObstacleDataB7_ObstacleLane
 * - \ref SIG_ObstacleDataB7_CIPVFlag
 * - \ref SIG_ObstacleDataB7_MCPFlag
 * - \ref SIG_ObstacleDataB7_PedSubType
 * - \ref SIG_ObstacleDataB7_PedPos
 * - \ref SIG_ObstacleDataB7_reserved_b1
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataB7 configuration tuple.
 */
#define MSG_ObstacleDataB7 0x433, 0, 8

/**
 * Message ObstacleDataB7 id.
 */
#define ID_ObstacleDataB7 0x433

/**
 * Message ObstacleDataB7 extended id bit.
 */
#define EXT_ObstacleDataB7 0

/**
 * Message ObstacleDataB7 Data Length Count.
 */
#define DLC_ObstacleDataB7 8

/**
 * Message ObstacleDataB7 cycle time.
 */
#define CYCLE_ObstacleDataB7 0

/**
 * Message ObstacleDataB7 fast cycle time.
 */
#define FAST_ObstacleDataB7 0

/**
 * Initialise message ObstacleDataB7 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataB7(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataB7_ObstacleLength(buf);                                                                    \
        INITSIG_ObstacleDataB7_ObstacleWidth(buf);                                                                     \
        INITSIG_ObstacleDataB7_ObstacleAge(buf);                                                                       \
        INITSIG_ObstacleDataB7_ObstacleLane(buf);                                                                      \
        INITSIG_ObstacleDataB7_CIPVFlag(buf);                                                                          \
        INITSIG_ObstacleDataB7_MCPFlag(buf);                                                                           \
        INITSIG_ObstacleDataB7_PedSubType(buf);                                                                        \
        INITSIG_ObstacleDataB7_PedPos(buf);                                                                            \
        INITSIG_ObstacleDataB7_reserved_b1(buf);                                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataB8 Message ObstacleDataB8 (0x436)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataB8_ObstacleLength
 * - \ref SIG_ObstacleDataB8_ObstacleWidth
 * - \ref SIG_ObstacleDataB8_ObstacleAge
 * - \ref SIG_ObstacleDataB8_ObstacleLane
 * - \ref SIG_ObstacleDataB8_CIPVFlag
 * - \ref SIG_ObstacleDataB8_MCPFlag
 * - \ref SIG_ObstacleDataB8_PedSubType
 * - \ref SIG_ObstacleDataB8_PedPos
 * - \ref SIG_ObstacleDataB8_reserved_b1
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataB8 configuration tuple.
 */
#define MSG_ObstacleDataB8 0x436, 0, 8

/**
 * Message ObstacleDataB8 id.
 */
#define ID_ObstacleDataB8 0x436

/**
 * Message ObstacleDataB8 extended id bit.
 */
#define EXT_ObstacleDataB8 0

/**
 * Message ObstacleDataB8 Data Length Count.
 */
#define DLC_ObstacleDataB8 8

/**
 * Message ObstacleDataB8 cycle time.
 */
#define CYCLE_ObstacleDataB8 0

/**
 * Message ObstacleDataB8 fast cycle time.
 */
#define FAST_ObstacleDataB8 0

/**
 * Initialise message ObstacleDataB8 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataB8(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataB8_ObstacleLength(buf);                                                                    \
        INITSIG_ObstacleDataB8_ObstacleWidth(buf);                                                                     \
        INITSIG_ObstacleDataB8_ObstacleAge(buf);                                                                       \
        INITSIG_ObstacleDataB8_ObstacleLane(buf);                                                                      \
        INITSIG_ObstacleDataB8_CIPVFlag(buf);                                                                          \
        INITSIG_ObstacleDataB8_MCPFlag(buf);                                                                           \
        INITSIG_ObstacleDataB8_PedSubType(buf);                                                                        \
        INITSIG_ObstacleDataB8_PedPos(buf);                                                                            \
        INITSIG_ObstacleDataB8_reserved_b1(buf);                                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataB9 Message ObstacleDataB9 (0x439)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataB9_ObstacleLength
 * - \ref SIG_ObstacleDataB9_ObstacleWidth
 * - \ref SIG_ObstacleDataB9_ObstacleAge
 * - \ref SIG_ObstacleDataB9_ObstacleLane
 * - \ref SIG_ObstacleDataB9_CIPVFlag
 * - \ref SIG_ObstacleDataB9_MCPFlag
 * - \ref SIG_ObstacleDataB9_PedSubType
 * - \ref SIG_ObstacleDataB9_PedPos
 * - \ref SIG_ObstacleDataB9_reserved_b1
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataB9 configuration tuple.
 */
#define MSG_ObstacleDataB9 0x439, 0, 8

/**
 * Message ObstacleDataB9 id.
 */
#define ID_ObstacleDataB9 0x439

/**
 * Message ObstacleDataB9 extended id bit.
 */
#define EXT_ObstacleDataB9 0

/**
 * Message ObstacleDataB9 Data Length Count.
 */
#define DLC_ObstacleDataB9 8

/**
 * Message ObstacleDataB9 cycle time.
 */
#define CYCLE_ObstacleDataB9 0

/**
 * Message ObstacleDataB9 fast cycle time.
 */
#define FAST_ObstacleDataB9 0

/**
 * Initialise message ObstacleDataB9 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataB9(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataB9_ObstacleLength(buf);                                                                    \
        INITSIG_ObstacleDataB9_ObstacleWidth(buf);                                                                     \
        INITSIG_ObstacleDataB9_ObstacleAge(buf);                                                                       \
        INITSIG_ObstacleDataB9_ObstacleLane(buf);                                                                      \
        INITSIG_ObstacleDataB9_CIPVFlag(buf);                                                                          \
        INITSIG_ObstacleDataB9_MCPFlag(buf);                                                                           \
        INITSIG_ObstacleDataB9_PedSubType(buf);                                                                        \
        INITSIG_ObstacleDataB9_PedPos(buf);                                                                            \
        INITSIG_ObstacleDataB9_reserved_b1(buf);                                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataB10 Message ObstacleDataB10 (0x43c)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataB10_ObstacleLength
 * - \ref SIG_ObstacleDataB10_ObstacleWidth
 * - \ref SIG_ObstacleDataB10_ObstacleAge
 * - \ref SIG_ObstacleDataB10_ObstacleLane
 * - \ref SIG_ObstacleDataB10_CIPVFlag
 * - \ref SIG_ObstacleDataB10_MCPFlag
 * - \ref SIG_ObstacleDataB10_PedSubType
 * - \ref SIG_ObstacleDataB10_PedPos
 * - \ref SIG_ObstacleDataB10_reserved_b1
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataB10 configuration tuple.
 */
#define MSG_ObstacleDataB10 0x43c, 0, 8

/**
 * Message ObstacleDataB10 id.
 */
#define ID_ObstacleDataB10 0x43c

/**
 * Message ObstacleDataB10 extended id bit.
 */
#define EXT_ObstacleDataB10 0

/**
 * Message ObstacleDataB10 Data Length Count.
 */
#define DLC_ObstacleDataB10 8

/**
 * Message ObstacleDataB10 cycle time.
 */
#define CYCLE_ObstacleDataB10 0

/**
 * Message ObstacleDataB10 fast cycle time.
 */
#define FAST_ObstacleDataB10 0

/**
 * Initialise message ObstacleDataB10 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataB10(buf)                                                                                      \
    {                                                                                                                  \
        INITSIG_ObstacleDataB10_ObstacleLength(buf);                                                                   \
        INITSIG_ObstacleDataB10_ObstacleWidth(buf);                                                                    \
        INITSIG_ObstacleDataB10_ObstacleAge(buf);                                                                      \
        INITSIG_ObstacleDataB10_ObstacleLane(buf);                                                                     \
        INITSIG_ObstacleDataB10_CIPVFlag(buf);                                                                         \
        INITSIG_ObstacleDataB10_MCPFlag(buf);                                                                          \
        INITSIG_ObstacleDataB10_PedSubType(buf);                                                                       \
        INITSIG_ObstacleDataB10_PedPos(buf);                                                                           \
        INITSIG_ObstacleDataB10_reserved_b1(buf);                                                                      \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataB4 Message ObstacleDataB4 (0x42a)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataB4_ObstacleLength
 * - \ref SIG_ObstacleDataB4_ObstacleWidth
 * - \ref SIG_ObstacleDataB4_ObstacleAge
 * - \ref SIG_ObstacleDataB4_ObstacleLane
 * - \ref SIG_ObstacleDataB4_CIPVFlag
 * - \ref SIG_ObstacleDataB4_MCPFlag
 * - \ref SIG_ObstacleDataB4_PedSubType
 * - \ref SIG_ObstacleDataB4_PedPos
 * - \ref SIG_ObstacleDataB4_reserved_b1
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataB4 configuration tuple.
 */
#define MSG_ObstacleDataB4 0x42a, 0, 8

/**
 * Message ObstacleDataB4 id.
 */
#define ID_ObstacleDataB4 0x42a

/**
 * Message ObstacleDataB4 extended id bit.
 */
#define EXT_ObstacleDataB4 0

/**
 * Message ObstacleDataB4 Data Length Count.
 */
#define DLC_ObstacleDataB4 8

/**
 * Message ObstacleDataB4 cycle time.
 */
#define CYCLE_ObstacleDataB4 0

/**
 * Message ObstacleDataB4 fast cycle time.
 */
#define FAST_ObstacleDataB4 0

/**
 * Initialise message ObstacleDataB4 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataB4(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataB4_ObstacleLength(buf);                                                                    \
        INITSIG_ObstacleDataB4_ObstacleWidth(buf);                                                                     \
        INITSIG_ObstacleDataB4_ObstacleAge(buf);                                                                       \
        INITSIG_ObstacleDataB4_ObstacleLane(buf);                                                                      \
        INITSIG_ObstacleDataB4_CIPVFlag(buf);                                                                          \
        INITSIG_ObstacleDataB4_MCPFlag(buf);                                                                           \
        INITSIG_ObstacleDataB4_PedSubType(buf);                                                                        \
        INITSIG_ObstacleDataB4_PedPos(buf);                                                                            \
        INITSIG_ObstacleDataB4_reserved_b1(buf);                                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataB3 Message ObstacleDataB3 (0x427)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataB3_ObstacleLength
 * - \ref SIG_ObstacleDataB3_ObstacleWidth
 * - \ref SIG_ObstacleDataB3_ObstacleAge
 * - \ref SIG_ObstacleDataB3_ObstacleLane
 * - \ref SIG_ObstacleDataB3_CIPVFlag
 * - \ref SIG_ObstacleDataB3_MCPFlag
 * - \ref SIG_ObstacleDataB3_PedSubType
 * - \ref SIG_ObstacleDataB3_PedPos
 * - \ref SIG_ObstacleDataB3_reserved_b1
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataB3 configuration tuple.
 */
#define MSG_ObstacleDataB3 0x427, 0, 8

/**
 * Message ObstacleDataB3 id.
 */
#define ID_ObstacleDataB3 0x427

/**
 * Message ObstacleDataB3 extended id bit.
 */
#define EXT_ObstacleDataB3 0

/**
 * Message ObstacleDataB3 Data Length Count.
 */
#define DLC_ObstacleDataB3 8

/**
 * Message ObstacleDataB3 cycle time.
 */
#define CYCLE_ObstacleDataB3 0

/**
 * Message ObstacleDataB3 fast cycle time.
 */
#define FAST_ObstacleDataB3 0

/**
 * Initialise message ObstacleDataB3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataB3(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataB3_ObstacleLength(buf);                                                                    \
        INITSIG_ObstacleDataB3_ObstacleWidth(buf);                                                                     \
        INITSIG_ObstacleDataB3_ObstacleAge(buf);                                                                       \
        INITSIG_ObstacleDataB3_ObstacleLane(buf);                                                                      \
        INITSIG_ObstacleDataB3_CIPVFlag(buf);                                                                          \
        INITSIG_ObstacleDataB3_MCPFlag(buf);                                                                           \
        INITSIG_ObstacleDataB3_PedSubType(buf);                                                                        \
        INITSIG_ObstacleDataB3_PedPos(buf);                                                                            \
        INITSIG_ObstacleDataB3_reserved_b1(buf);                                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataB2 Message ObstacleDataB2 (0x424)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataB2_ObstacleLength
 * - \ref SIG_ObstacleDataB2_ObstacleWidth
 * - \ref SIG_ObstacleDataB2_ObstacleAge
 * - \ref SIG_ObstacleDataB2_ObstacleLane
 * - \ref SIG_ObstacleDataB2_CIPVFlag
 * - \ref SIG_ObstacleDataB2_MCPFlag
 * - \ref SIG_ObstacleDataB2_PedSubType
 * - \ref SIG_ObstacleDataB2_PedPos
 * - \ref SIG_ObstacleDataB2_reserved_b1
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataB2 configuration tuple.
 */
#define MSG_ObstacleDataB2 0x424, 0, 8

/**
 * Message ObstacleDataB2 id.
 */
#define ID_ObstacleDataB2 0x424

/**
 * Message ObstacleDataB2 extended id bit.
 */
#define EXT_ObstacleDataB2 0

/**
 * Message ObstacleDataB2 Data Length Count.
 */
#define DLC_ObstacleDataB2 8

/**
 * Message ObstacleDataB2 cycle time.
 */
#define CYCLE_ObstacleDataB2 0

/**
 * Message ObstacleDataB2 fast cycle time.
 */
#define FAST_ObstacleDataB2 0

/**
 * Initialise message ObstacleDataB2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataB2(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataB2_ObstacleLength(buf);                                                                    \
        INITSIG_ObstacleDataB2_ObstacleWidth(buf);                                                                     \
        INITSIG_ObstacleDataB2_ObstacleAge(buf);                                                                       \
        INITSIG_ObstacleDataB2_ObstacleLane(buf);                                                                      \
        INITSIG_ObstacleDataB2_CIPVFlag(buf);                                                                          \
        INITSIG_ObstacleDataB2_MCPFlag(buf);                                                                           \
        INITSIG_ObstacleDataB2_PedSubType(buf);                                                                        \
        INITSIG_ObstacleDataB2_PedPos(buf);                                                                            \
        INITSIG_ObstacleDataB2_reserved_b1(buf);                                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataA7 Message ObstacleDataA7 (0x432)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataA7_ObstacleID
 * - \ref SIG_ObstacleDataA7_ObstaclePosX
 * - \ref SIG_ObstacleDataA7_ObstaclePosY
 * - \ref SIG_ObstacleDataA7_BlinkerInfo
 * - \ref SIG_ObstacleDataA7_Move_in_and_Out
 * - \ref SIG_ObstacleDataA7_ObstacleVelX
 * - \ref SIG_ObstacleDataA7_ObstacleType
 * - \ref SIG_ObstacleDataA7_VehicleSubType
 * - \ref SIG_ObstacleDataA7_ObstacleStatus
 * - \ref SIG_ObstacleDataA7_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA7_ObstacleValid
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataA7 configuration tuple.
 */
#define MSG_ObstacleDataA7 0x432, 0, 8

/**
 * Message ObstacleDataA7 id.
 */
#define ID_ObstacleDataA7 0x432

/**
 * Message ObstacleDataA7 extended id bit.
 */
#define EXT_ObstacleDataA7 0

/**
 * Message ObstacleDataA7 Data Length Count.
 */
#define DLC_ObstacleDataA7 8

/**
 * Message ObstacleDataA7 cycle time.
 */
#define CYCLE_ObstacleDataA7 0

/**
 * Message ObstacleDataA7 fast cycle time.
 */
#define FAST_ObstacleDataA7 0

/**
 * Initialise message ObstacleDataA7 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataA7(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataA7_ObstacleID(buf);                                                                        \
        INITSIG_ObstacleDataA7_ObstaclePosX(buf);                                                                      \
        INITSIG_ObstacleDataA7_ObstaclePosY(buf);                                                                      \
        INITSIG_ObstacleDataA7_BlinkerInfo(buf);                                                                       \
        INITSIG_ObstacleDataA7_Move_in_and_Out(buf);                                                                   \
        INITSIG_ObstacleDataA7_ObstacleVelX(buf);                                                                      \
        INITSIG_ObstacleDataA7_ObstacleType(buf);                                                                      \
        INITSIG_ObstacleDataA7_VehicleSubType(buf);                                                                    \
        INITSIG_ObstacleDataA7_ObstacleStatus(buf);                                                                    \
        INITSIG_ObstacleDataA7_ObstacleBrakeLights(buf);                                                               \
        INITSIG_ObstacleDataA7_ObstacleValid(buf);                                                                     \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataA8 Message ObstacleDataA8 (0x435)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataA8_ObstacleID
 * - \ref SIG_ObstacleDataA8_ObstaclePosX
 * - \ref SIG_ObstacleDataA8_ObstaclePosY
 * - \ref SIG_ObstacleDataA8_BlinkerInfo
 * - \ref SIG_ObstacleDataA8_Move_in_and_Out
 * - \ref SIG_ObstacleDataA8_ObstacleVelX
 * - \ref SIG_ObstacleDataA8_ObstacleType
 * - \ref SIG_ObstacleDataA8_VehicleSubType
 * - \ref SIG_ObstacleDataA8_ObstacleStatus
 * - \ref SIG_ObstacleDataA8_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA8_ObstacleValid
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataA8 configuration tuple.
 */
#define MSG_ObstacleDataA8 0x435, 0, 8

/**
 * Message ObstacleDataA8 id.
 */
#define ID_ObstacleDataA8 0x435

/**
 * Message ObstacleDataA8 extended id bit.
 */
#define EXT_ObstacleDataA8 0

/**
 * Message ObstacleDataA8 Data Length Count.
 */
#define DLC_ObstacleDataA8 8

/**
 * Message ObstacleDataA8 cycle time.
 */
#define CYCLE_ObstacleDataA8 0

/**
 * Message ObstacleDataA8 fast cycle time.
 */
#define FAST_ObstacleDataA8 0

/**
 * Initialise message ObstacleDataA8 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataA8(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataA8_ObstacleID(buf);                                                                        \
        INITSIG_ObstacleDataA8_ObstaclePosX(buf);                                                                      \
        INITSIG_ObstacleDataA8_ObstaclePosY(buf);                                                                      \
        INITSIG_ObstacleDataA8_BlinkerInfo(buf);                                                                       \
        INITSIG_ObstacleDataA8_Move_in_and_Out(buf);                                                                   \
        INITSIG_ObstacleDataA8_ObstacleVelX(buf);                                                                      \
        INITSIG_ObstacleDataA8_ObstacleType(buf);                                                                      \
        INITSIG_ObstacleDataA8_VehicleSubType(buf);                                                                    \
        INITSIG_ObstacleDataA8_ObstacleStatus(buf);                                                                    \
        INITSIG_ObstacleDataA8_ObstacleBrakeLights(buf);                                                               \
        INITSIG_ObstacleDataA8_ObstacleValid(buf);                                                                     \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataA9 Message ObstacleDataA9 (0x438)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataA9_ObstacleID
 * - \ref SIG_ObstacleDataA9_ObstaclePosX
 * - \ref SIG_ObstacleDataA9_ObstaclePosY
 * - \ref SIG_ObstacleDataA9_BlinkerInfo
 * - \ref SIG_ObstacleDataA9_Move_in_and_Out
 * - \ref SIG_ObstacleDataA9_ObstacleVelX
 * - \ref SIG_ObstacleDataA9_ObstacleType
 * - \ref SIG_ObstacleDataA9_VehicleSubType
 * - \ref SIG_ObstacleDataA9_ObstacleStatus
 * - \ref SIG_ObstacleDataA9_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA9_ObstacleValid
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataA9 configuration tuple.
 */
#define MSG_ObstacleDataA9 0x438, 0, 8

/**
 * Message ObstacleDataA9 id.
 */
#define ID_ObstacleDataA9 0x438

/**
 * Message ObstacleDataA9 extended id bit.
 */
#define EXT_ObstacleDataA9 0

/**
 * Message ObstacleDataA9 Data Length Count.
 */
#define DLC_ObstacleDataA9 8

/**
 * Message ObstacleDataA9 cycle time.
 */
#define CYCLE_ObstacleDataA9 0

/**
 * Message ObstacleDataA9 fast cycle time.
 */
#define FAST_ObstacleDataA9 0

/**
 * Initialise message ObstacleDataA9 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataA9(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataA9_ObstacleID(buf);                                                                        \
        INITSIG_ObstacleDataA9_ObstaclePosX(buf);                                                                      \
        INITSIG_ObstacleDataA9_ObstaclePosY(buf);                                                                      \
        INITSIG_ObstacleDataA9_BlinkerInfo(buf);                                                                       \
        INITSIG_ObstacleDataA9_Move_in_and_Out(buf);                                                                   \
        INITSIG_ObstacleDataA9_ObstacleVelX(buf);                                                                      \
        INITSIG_ObstacleDataA9_ObstacleType(buf);                                                                      \
        INITSIG_ObstacleDataA9_VehicleSubType(buf);                                                                    \
        INITSIG_ObstacleDataA9_ObstacleStatus(buf);                                                                    \
        INITSIG_ObstacleDataA9_ObstacleBrakeLights(buf);                                                               \
        INITSIG_ObstacleDataA9_ObstacleValid(buf);                                                                     \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataA10 Message ObstacleDataA10 (0x43b)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataA10_ObstacleID
 * - \ref SIG_ObstacleDataA10_ObstaclePosX
 * - \ref SIG_ObstacleDataA10_ObstaclePosY
 * - \ref SIG_ObstacleDataA10_BlinkerInfo
 * - \ref SIG_ObstacleDataA10_Move_in_and_Out
 * - \ref SIG_ObstacleDataA10_ObstacleVelX
 * - \ref SIG_ObstacleDataA10_ObstacleType
 * - \ref SIG_ObstacleDataA10_VehicleSubType
 * - \ref SIG_ObstacleDataA10_ObstacleStatus
 * - \ref SIG_ObstacleDataA10_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA10_ObstacleValid
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataA10 configuration tuple.
 */
#define MSG_ObstacleDataA10 0x43b, 0, 8

/**
 * Message ObstacleDataA10 id.
 */
#define ID_ObstacleDataA10 0x43b

/**
 * Message ObstacleDataA10 extended id bit.
 */
#define EXT_ObstacleDataA10 0

/**
 * Message ObstacleDataA10 Data Length Count.
 */
#define DLC_ObstacleDataA10 8

/**
 * Message ObstacleDataA10 cycle time.
 */
#define CYCLE_ObstacleDataA10 0

/**
 * Message ObstacleDataA10 fast cycle time.
 */
#define FAST_ObstacleDataA10 0

/**
 * Initialise message ObstacleDataA10 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataA10(buf)                                                                                      \
    {                                                                                                                  \
        INITSIG_ObstacleDataA10_ObstacleID(buf);                                                                       \
        INITSIG_ObstacleDataA10_ObstaclePosX(buf);                                                                     \
        INITSIG_ObstacleDataA10_ObstaclePosY(buf);                                                                     \
        INITSIG_ObstacleDataA10_BlinkerInfo(buf);                                                                      \
        INITSIG_ObstacleDataA10_Move_in_and_Out(buf);                                                                  \
        INITSIG_ObstacleDataA10_ObstacleVelX(buf);                                                                     \
        INITSIG_ObstacleDataA10_ObstacleType(buf);                                                                     \
        INITSIG_ObstacleDataA10_VehicleSubType(buf);                                                                   \
        INITSIG_ObstacleDataA10_ObstacleStatus(buf);                                                                   \
        INITSIG_ObstacleDataA10_ObstacleBrakeLights(buf);                                                              \
        INITSIG_ObstacleDataA10_ObstacleValid(buf);                                                                    \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataA6 Message ObstacleDataA6 (0x42f)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataA6_ObstacleID
 * - \ref SIG_ObstacleDataA6_ObstaclePosX
 * - \ref SIG_ObstacleDataA6_ObstaclePosY
 * - \ref SIG_ObstacleDataA6_BlinkerInfo
 * - \ref SIG_ObstacleDataA6_Move_in_and_Out
 * - \ref SIG_ObstacleDataA6_ObstacleVelX
 * - \ref SIG_ObstacleDataA6_ObstacleType
 * - \ref SIG_ObstacleDataA6_VehicleSubType
 * - \ref SIG_ObstacleDataA6_ObstacleStatus
 * - \ref SIG_ObstacleDataA6_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA6_ObstacleValid
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataA6 configuration tuple.
 */
#define MSG_ObstacleDataA6 0x42f, 0, 8

/**
 * Message ObstacleDataA6 id.
 */
#define ID_ObstacleDataA6 0x42f

/**
 * Message ObstacleDataA6 extended id bit.
 */
#define EXT_ObstacleDataA6 0

/**
 * Message ObstacleDataA6 Data Length Count.
 */
#define DLC_ObstacleDataA6 8

/**
 * Message ObstacleDataA6 cycle time.
 */
#define CYCLE_ObstacleDataA6 0

/**
 * Message ObstacleDataA6 fast cycle time.
 */
#define FAST_ObstacleDataA6 0

/**
 * Initialise message ObstacleDataA6 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataA6(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataA6_ObstacleID(buf);                                                                        \
        INITSIG_ObstacleDataA6_ObstaclePosX(buf);                                                                      \
        INITSIG_ObstacleDataA6_ObstaclePosY(buf);                                                                      \
        INITSIG_ObstacleDataA6_BlinkerInfo(buf);                                                                       \
        INITSIG_ObstacleDataA6_Move_in_and_Out(buf);                                                                   \
        INITSIG_ObstacleDataA6_ObstacleVelX(buf);                                                                      \
        INITSIG_ObstacleDataA6_ObstacleType(buf);                                                                      \
        INITSIG_ObstacleDataA6_VehicleSubType(buf);                                                                    \
        INITSIG_ObstacleDataA6_ObstacleStatus(buf);                                                                    \
        INITSIG_ObstacleDataA6_ObstacleBrakeLights(buf);                                                               \
        INITSIG_ObstacleDataA6_ObstacleValid(buf);                                                                     \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataA5 Message ObstacleDataA5 (0x42c)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataA5_ObstacleID
 * - \ref SIG_ObstacleDataA5_ObstaclePosX
 * - \ref SIG_ObstacleDataA5_ObstaclePosY
 * - \ref SIG_ObstacleDataA5_BlinkerInfo
 * - \ref SIG_ObstacleDataA5_Move_in_and_Out
 * - \ref SIG_ObstacleDataA5_ObstacleVelX
 * - \ref SIG_ObstacleDataA5_ObstacleType
 * - \ref SIG_ObstacleDataA5_VehicleSubType
 * - \ref SIG_ObstacleDataA5_ObstacleStatus
 * - \ref SIG_ObstacleDataA5_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA5_ObstacleValid
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataA5 configuration tuple.
 */
#define MSG_ObstacleDataA5 0x42c, 0, 8

/**
 * Message ObstacleDataA5 id.
 */
#define ID_ObstacleDataA5 0x42c

/**
 * Message ObstacleDataA5 extended id bit.
 */
#define EXT_ObstacleDataA5 0

/**
 * Message ObstacleDataA5 Data Length Count.
 */
#define DLC_ObstacleDataA5 8

/**
 * Message ObstacleDataA5 cycle time.
 */
#define CYCLE_ObstacleDataA5 0

/**
 * Message ObstacleDataA5 fast cycle time.
 */
#define FAST_ObstacleDataA5 0

/**
 * Initialise message ObstacleDataA5 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataA5(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataA5_ObstacleID(buf);                                                                        \
        INITSIG_ObstacleDataA5_ObstaclePosX(buf);                                                                      \
        INITSIG_ObstacleDataA5_ObstaclePosY(buf);                                                                      \
        INITSIG_ObstacleDataA5_BlinkerInfo(buf);                                                                       \
        INITSIG_ObstacleDataA5_Move_in_and_Out(buf);                                                                   \
        INITSIG_ObstacleDataA5_ObstacleVelX(buf);                                                                      \
        INITSIG_ObstacleDataA5_ObstacleType(buf);                                                                      \
        INITSIG_ObstacleDataA5_VehicleSubType(buf);                                                                    \
        INITSIG_ObstacleDataA5_ObstacleStatus(buf);                                                                    \
        INITSIG_ObstacleDataA5_ObstacleBrakeLights(buf);                                                               \
        INITSIG_ObstacleDataA5_ObstacleValid(buf);                                                                     \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataA4 Message ObstacleDataA4 (0x429)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataA4_ObstacleID
 * - \ref SIG_ObstacleDataA4_ObstaclePosX
 * - \ref SIG_ObstacleDataA4_ObstaclePosY
 * - \ref SIG_ObstacleDataA4_BlinkerInfo
 * - \ref SIG_ObstacleDataA4_Move_in_and_Out
 * - \ref SIG_ObstacleDataA4_ObstacleVelX
 * - \ref SIG_ObstacleDataA4_ObstacleType
 * - \ref SIG_ObstacleDataA4_VehicleSubType
 * - \ref SIG_ObstacleDataA4_ObstacleStatus
 * - \ref SIG_ObstacleDataA4_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA4_ObstacleValid
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataA4 configuration tuple.
 */
#define MSG_ObstacleDataA4 0x429, 0, 8

/**
 * Message ObstacleDataA4 id.
 */
#define ID_ObstacleDataA4 0x429

/**
 * Message ObstacleDataA4 extended id bit.
 */
#define EXT_ObstacleDataA4 0

/**
 * Message ObstacleDataA4 Data Length Count.
 */
#define DLC_ObstacleDataA4 8

/**
 * Message ObstacleDataA4 cycle time.
 */
#define CYCLE_ObstacleDataA4 0

/**
 * Message ObstacleDataA4 fast cycle time.
 */
#define FAST_ObstacleDataA4 0

/**
 * Initialise message ObstacleDataA4 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataA4(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataA4_ObstacleID(buf);                                                                        \
        INITSIG_ObstacleDataA4_ObstaclePosX(buf);                                                                      \
        INITSIG_ObstacleDataA4_ObstaclePosY(buf);                                                                      \
        INITSIG_ObstacleDataA4_BlinkerInfo(buf);                                                                       \
        INITSIG_ObstacleDataA4_Move_in_and_Out(buf);                                                                   \
        INITSIG_ObstacleDataA4_ObstacleVelX(buf);                                                                      \
        INITSIG_ObstacleDataA4_ObstacleType(buf);                                                                      \
        INITSIG_ObstacleDataA4_VehicleSubType(buf);                                                                    \
        INITSIG_ObstacleDataA4_ObstacleStatus(buf);                                                                    \
        INITSIG_ObstacleDataA4_ObstacleBrakeLights(buf);                                                               \
        INITSIG_ObstacleDataA4_ObstacleValid(buf);                                                                     \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataA3 Message ObstacleDataA3 (0x426)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataA3_ObstacleID
 * - \ref SIG_ObstacleDataA3_ObstaclePosX
 * - \ref SIG_ObstacleDataA3_ObstaclePosY
 * - \ref SIG_ObstacleDataA3_BlinkerInfo
 * - \ref SIG_ObstacleDataA3_Move_in_and_Out
 * - \ref SIG_ObstacleDataA3_ObstacleVelX
 * - \ref SIG_ObstacleDataA3_ObstacleType
 * - \ref SIG_ObstacleDataA3_VehicleSubType
 * - \ref SIG_ObstacleDataA3_ObstacleStatus
 * - \ref SIG_ObstacleDataA3_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA3_ObstacleValid
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataA3 configuration tuple.
 */
#define MSG_ObstacleDataA3 0x426, 0, 8

/**
 * Message ObstacleDataA3 id.
 */
#define ID_ObstacleDataA3 0x426

/**
 * Message ObstacleDataA3 extended id bit.
 */
#define EXT_ObstacleDataA3 0

/**
 * Message ObstacleDataA3 Data Length Count.
 */
#define DLC_ObstacleDataA3 8

/**
 * Message ObstacleDataA3 cycle time.
 */
#define CYCLE_ObstacleDataA3 0

/**
 * Message ObstacleDataA3 fast cycle time.
 */
#define FAST_ObstacleDataA3 0

/**
 * Initialise message ObstacleDataA3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataA3(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataA3_ObstacleID(buf);                                                                        \
        INITSIG_ObstacleDataA3_ObstaclePosX(buf);                                                                      \
        INITSIG_ObstacleDataA3_ObstaclePosY(buf);                                                                      \
        INITSIG_ObstacleDataA3_BlinkerInfo(buf);                                                                       \
        INITSIG_ObstacleDataA3_Move_in_and_Out(buf);                                                                   \
        INITSIG_ObstacleDataA3_ObstacleVelX(buf);                                                                      \
        INITSIG_ObstacleDataA3_ObstacleType(buf);                                                                      \
        INITSIG_ObstacleDataA3_VehicleSubType(buf);                                                                    \
        INITSIG_ObstacleDataA3_ObstacleStatus(buf);                                                                    \
        INITSIG_ObstacleDataA3_ObstacleBrakeLights(buf);                                                               \
        INITSIG_ObstacleDataA3_ObstacleValid(buf);                                                                     \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataA2 Message ObstacleDataA2 (0x423)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataA2_ObstacleID
 * - \ref SIG_ObstacleDataA2_ObstaclePosX
 * - \ref SIG_ObstacleDataA2_ObstaclePosY
 * - \ref SIG_ObstacleDataA2_BlinkerInfo
 * - \ref SIG_ObstacleDataA2_Move_in_and_Out
 * - \ref SIG_ObstacleDataA2_ObstacleVelX
 * - \ref SIG_ObstacleDataA2_ObstacleType
 * - \ref SIG_ObstacleDataA2_VehicleSubType
 * - \ref SIG_ObstacleDataA2_ObstacleStatus
 * - \ref SIG_ObstacleDataA2_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA2_ObstacleValid
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataA2 configuration tuple.
 */
#define MSG_ObstacleDataA2 0x423, 0, 8

/**
 * Message ObstacleDataA2 id.
 */
#define ID_ObstacleDataA2 0x423

/**
 * Message ObstacleDataA2 extended id bit.
 */
#define EXT_ObstacleDataA2 0

/**
 * Message ObstacleDataA2 Data Length Count.
 */
#define DLC_ObstacleDataA2 8

/**
 * Message ObstacleDataA2 cycle time.
 */
#define CYCLE_ObstacleDataA2 0

/**
 * Message ObstacleDataA2 fast cycle time.
 */
#define FAST_ObstacleDataA2 0

/**
 * Initialise message ObstacleDataA2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataA2(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataA2_ObstacleID(buf);                                                                        \
        INITSIG_ObstacleDataA2_ObstaclePosX(buf);                                                                      \
        INITSIG_ObstacleDataA2_ObstaclePosY(buf);                                                                      \
        INITSIG_ObstacleDataA2_BlinkerInfo(buf);                                                                       \
        INITSIG_ObstacleDataA2_Move_in_and_Out(buf);                                                                   \
        INITSIG_ObstacleDataA2_ObstacleVelX(buf);                                                                      \
        INITSIG_ObstacleDataA2_ObstacleType(buf);                                                                      \
        INITSIG_ObstacleDataA2_VehicleSubType(buf);                                                                    \
        INITSIG_ObstacleDataA2_ObstacleStatus(buf);                                                                    \
        INITSIG_ObstacleDataA2_ObstacleBrakeLights(buf);                                                               \
        INITSIG_ObstacleDataA2_ObstacleValid(buf);                                                                     \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataC1 Message ObstacleDataC1 (0x422)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataC1_ObstacleAngleRate
 * - \ref SIG_ObstacleDataC1_ObstacleVelY
 * - \ref SIG_ObstacleDataC1_Object_Accel_X
 * - \ref SIG_ObstacleDataC1_ObstacleReplaced
 * - \ref SIG_ObstacleDataC1_PedestrainOrientations
 * - \ref SIG_ObstacleDataC1_VehicleAngle
 * - \ref SIG_ObstacleDataC1_reserved_C
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataC1 configuration tuple.
 */
#define MSG_ObstacleDataC1 0x422, 0, 8

/**
 * Message ObstacleDataC1 id.
 */
#define ID_ObstacleDataC1 0x422

/**
 * Message ObstacleDataC1 extended id bit.
 */
#define EXT_ObstacleDataC1 0

/**
 * Message ObstacleDataC1 Data Length Count.
 */
#define DLC_ObstacleDataC1 8

/**
 * Message ObstacleDataC1 cycle time.
 */
#define CYCLE_ObstacleDataC1 0

/**
 * Message ObstacleDataC1 fast cycle time.
 */
#define FAST_ObstacleDataC1 0

/**
 * Initialise message ObstacleDataC1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataC1(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataC1_ObstacleAngleRate(buf);                                                                 \
        INITSIG_ObstacleDataC1_ObstacleVelY(buf);                                                                      \
        INITSIG_ObstacleDataC1_Object_Accel_X(buf);                                                                    \
        INITSIG_ObstacleDataC1_ObstacleReplaced(buf);                                                                  \
        INITSIG_ObstacleDataC1_PedestrainOrientations(buf);                                                            \
        INITSIG_ObstacleDataC1_VehicleAngle(buf);                                                                      \
        INITSIG_ObstacleDataC1_reserved_C(buf);                                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataB1 Message ObstacleDataB1 (0x421)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataB1_ObstacleLength
 * - \ref SIG_ObstacleDataB1_ObstacleWidth
 * - \ref SIG_ObstacleDataB1_ObstacleAge
 * - \ref SIG_ObstacleDataB1_ObstacleLane
 * - \ref SIG_ObstacleDataB1_CIPVFlag
 * - \ref SIG_ObstacleDataB1_MCPFlag
 * - \ref SIG_ObstacleDataB1_PedSubType
 * - \ref SIG_ObstacleDataB1_PedPos
 * - \ref SIG_ObstacleDataB1_reserved_b1
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataB1 configuration tuple.
 */
#define MSG_ObstacleDataB1 0x421, 0, 8

/**
 * Message ObstacleDataB1 id.
 */
#define ID_ObstacleDataB1 0x421

/**
 * Message ObstacleDataB1 extended id bit.
 */
#define EXT_ObstacleDataB1 0

/**
 * Message ObstacleDataB1 Data Length Count.
 */
#define DLC_ObstacleDataB1 8

/**
 * Message ObstacleDataB1 cycle time.
 */
#define CYCLE_ObstacleDataB1 0

/**
 * Message ObstacleDataB1 fast cycle time.
 */
#define FAST_ObstacleDataB1 0

/**
 * Initialise message ObstacleDataB1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataB1(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataB1_ObstacleLength(buf);                                                                    \
        INITSIG_ObstacleDataB1_ObstacleWidth(buf);                                                                     \
        INITSIG_ObstacleDataB1_ObstacleAge(buf);                                                                       \
        INITSIG_ObstacleDataB1_ObstacleLane(buf);                                                                      \
        INITSIG_ObstacleDataB1_CIPVFlag(buf);                                                                          \
        INITSIG_ObstacleDataB1_MCPFlag(buf);                                                                           \
        INITSIG_ObstacleDataB1_PedSubType(buf);                                                                        \
        INITSIG_ObstacleDataB1_PedPos(buf);                                                                            \
        INITSIG_ObstacleDataB1_reserved_b1(buf);                                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleDataA1 Message ObstacleDataA1 (0x420)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleDataA1_ObstacleID
 * - \ref SIG_ObstacleDataA1_ObstaclePosX
 * - \ref SIG_ObstacleDataA1_ObstaclePosY
 * - \ref SIG_ObstacleDataA1_BlinkerInfo
 * - \ref SIG_ObstacleDataA1_Move_in_and_Out
 * - \ref SIG_ObstacleDataA1_ObstacleVelX
 * - \ref SIG_ObstacleDataA1_ObstacleType
 * - \ref SIG_ObstacleDataA1_VehicleSubType
 * - \ref SIG_ObstacleDataA1_ObstacleStatus
 * - \ref SIG_ObstacleDataA1_ObstacleBrakeLights
 * - \ref SIG_ObstacleDataA1_ObstacleValid
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleDataA1 configuration tuple.
 */
#define MSG_ObstacleDataA1 0x420, 0, 8

/**
 * Message ObstacleDataA1 id.
 */
#define ID_ObstacleDataA1 0x420

/**
 * Message ObstacleDataA1 extended id bit.
 */
#define EXT_ObstacleDataA1 0

/**
 * Message ObstacleDataA1 Data Length Count.
 */
#define DLC_ObstacleDataA1 8

/**
 * Message ObstacleDataA1 cycle time.
 */
#define CYCLE_ObstacleDataA1 0

/**
 * Message ObstacleDataA1 fast cycle time.
 */
#define FAST_ObstacleDataA1 0

/**
 * Initialise message ObstacleDataA1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleDataA1(buf)                                                                                       \
    {                                                                                                                  \
        INITSIG_ObstacleDataA1_ObstacleID(buf);                                                                        \
        INITSIG_ObstacleDataA1_ObstaclePosX(buf);                                                                      \
        INITSIG_ObstacleDataA1_ObstaclePosY(buf);                                                                      \
        INITSIG_ObstacleDataA1_BlinkerInfo(buf);                                                                       \
        INITSIG_ObstacleDataA1_Move_in_and_Out(buf);                                                                   \
        INITSIG_ObstacleDataA1_ObstacleVelX(buf);                                                                      \
        INITSIG_ObstacleDataA1_ObstacleType(buf);                                                                      \
        INITSIG_ObstacleDataA1_VehicleSubType(buf);                                                                    \
        INITSIG_ObstacleDataA1_ObstacleStatus(buf);                                                                    \
        INITSIG_ObstacleDataA1_ObstacleBrakeLights(buf);                                                               \
        INITSIG_ObstacleDataA1_ObstacleValid(buf);                                                                     \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleInternalID0 Message ObstacleInternalID0 (0x413)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleInternalID0_Obstacle_Internal_ID1
 * - \ref SIG_ObstacleInternalID0_Obstacle_Internal_ID2
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleInternalID0 configuration tuple.
 */
#define MSG_ObstacleInternalID0 0x413, 0, 8

/**
 * Message ObstacleInternalID0 id.
 */
#define ID_ObstacleInternalID0 0x413

/**
 * Message ObstacleInternalID0 extended id bit.
 */
#define EXT_ObstacleInternalID0 0

/**
 * Message ObstacleInternalID0 Data Length Count.
 */
#define DLC_ObstacleInternalID0 8

/**
 * Message ObstacleInternalID0 cycle time.
 */
#define CYCLE_ObstacleInternalID0 0

/**
 * Message ObstacleInternalID0 fast cycle time.
 */
#define FAST_ObstacleInternalID0 0

/**
 * Initialise message ObstacleInternalID0 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleInternalID0(buf)                                                                                  \
    {                                                                                                                  \
        INITSIG_ObstacleInternalID0_Obstacle_Internal_ID1(buf);                                                        \
        INITSIG_ObstacleInternalID0_Obstacle_Internal_ID2(buf);                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleInternalID1 Message ObstacleInternalID1 (0x414)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleInternalID1_Obstacle_Internal_ID3
 * - \ref SIG_ObstacleInternalID1_Obstacle_Internal_ID4
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleInternalID1 configuration tuple.
 */
#define MSG_ObstacleInternalID1 0x414, 0, 8

/**
 * Message ObstacleInternalID1 id.
 */
#define ID_ObstacleInternalID1 0x414

/**
 * Message ObstacleInternalID1 extended id bit.
 */
#define EXT_ObstacleInternalID1 0

/**
 * Message ObstacleInternalID1 Data Length Count.
 */
#define DLC_ObstacleInternalID1 8

/**
 * Message ObstacleInternalID1 cycle time.
 */
#define CYCLE_ObstacleInternalID1 0

/**
 * Message ObstacleInternalID1 fast cycle time.
 */
#define FAST_ObstacleInternalID1 0

/**
 * Initialise message ObstacleInternalID1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleInternalID1(buf)                                                                                  \
    {                                                                                                                  \
        INITSIG_ObstacleInternalID1_Obstacle_Internal_ID3(buf);                                                        \
        INITSIG_ObstacleInternalID1_Obstacle_Internal_ID4(buf);                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleInternalID2 Message ObstacleInternalID2 (0x415)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleInternalID2_Obstacle_Internal_ID5
 * - \ref SIG_ObstacleInternalID2_Obstacle_Internal_ID6
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleInternalID2 configuration tuple.
 */
#define MSG_ObstacleInternalID2 0x415, 0, 8

/**
 * Message ObstacleInternalID2 id.
 */
#define ID_ObstacleInternalID2 0x415

/**
 * Message ObstacleInternalID2 extended id bit.
 */
#define EXT_ObstacleInternalID2 0

/**
 * Message ObstacleInternalID2 Data Length Count.
 */
#define DLC_ObstacleInternalID2 8

/**
 * Message ObstacleInternalID2 cycle time.
 */
#define CYCLE_ObstacleInternalID2 0

/**
 * Message ObstacleInternalID2 fast cycle time.
 */
#define FAST_ObstacleInternalID2 0

/**
 * Initialise message ObstacleInternalID2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleInternalID2(buf)                                                                                  \
    {                                                                                                                  \
        INITSIG_ObstacleInternalID2_Obstacle_Internal_ID5(buf);                                                        \
        INITSIG_ObstacleInternalID2_Obstacle_Internal_ID6(buf);                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleInternalID3 Message ObstacleInternalID3 (0x416)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleInternalID3_Obstacle_Internal_ID7
 * - \ref SIG_ObstacleInternalID3_Obstacle_Internal_ID8
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleInternalID3 configuration tuple.
 */
#define MSG_ObstacleInternalID3 0x416, 0, 8

/**
 * Message ObstacleInternalID3 id.
 */
#define ID_ObstacleInternalID3 0x416

/**
 * Message ObstacleInternalID3 extended id bit.
 */
#define EXT_ObstacleInternalID3 0

/**
 * Message ObstacleInternalID3 Data Length Count.
 */
#define DLC_ObstacleInternalID3 8

/**
 * Message ObstacleInternalID3 cycle time.
 */
#define CYCLE_ObstacleInternalID3 0

/**
 * Message ObstacleInternalID3 fast cycle time.
 */
#define FAST_ObstacleInternalID3 0

/**
 * Initialise message ObstacleInternalID3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleInternalID3(buf)                                                                                  \
    {                                                                                                                  \
        INITSIG_ObstacleInternalID3_Obstacle_Internal_ID7(buf);                                                        \
        INITSIG_ObstacleInternalID3_Obstacle_Internal_ID8(buf);                                                        \
    }

/**
 * @}
 */

/**
 * @defgroup MSG_ObstacleInternalID4 Message ObstacleInternalID4 (0x417)
 *
 * Sent by \ref ECU_Matrix.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ObstacleInternalID4_Obstacle_Internal_ID9
 * - \ref SIG_ObstacleInternalID4_Obstacle_Internal_ID10
 *
 * @ingroup ECU_Matrix
 * @{
 */

/**
 * Message ObstacleInternalID4 configuration tuple.
 */
#define MSG_ObstacleInternalID4 0x417, 0, 8

/**
 * Message ObstacleInternalID4 id.
 */
#define ID_ObstacleInternalID4 0x417

/**
 * Message ObstacleInternalID4 extended id bit.
 */
#define EXT_ObstacleInternalID4 0

/**
 * Message ObstacleInternalID4 Data Length Count.
 */
#define DLC_ObstacleInternalID4 8

/**
 * Message ObstacleInternalID4 cycle time.
 */
#define CYCLE_ObstacleInternalID4 0

/**
 * Message ObstacleInternalID4 fast cycle time.
 */
#define FAST_ObstacleInternalID4 0

/**
 * Initialise message ObstacleInternalID4 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ObstacleInternalID4(buf)                                                                                  \
    {                                                                                                                  \
        INITSIG_ObstacleInternalID4_Obstacle_Internal_ID9(buf);                                                        \
        INITSIG_ObstacleInternalID4_Obstacle_Internal_ID10(buf);                                                       \
    }

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleStatusA_NumObstacles Signal NumObstacles of Message ObstacleStatusA (0x410)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal NumObstacles configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_NumObstacles and \ref GET_ObstacleStatusA_NumObstacles instead.
 */
#define SIG_ObstacleStatusA_NumObstacles 0, 0, 0, 8

/**
 * Signal NumObstacles setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_NumObstacles or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_NumObstacles 0, 0, 0, 8, 0

/**
 * Get signal NumObstacles from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_NumObstacles(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal NumObstacles in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_NumObstacles(buf, val)                                                                     \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal NumObstacles in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_NumObstacles(buf) SET_ObstacleStatusA_NumObstacles(buf, 0)

/**
 * Signal NumObstacles value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_NumObstacles(x, fmt) ((x)*fmt)

/**
 * Signal NumObstacles raw initial value.
 */
#define START_ObstacleStatusA_NumObstacles 0

/**
 * Signal NumObstacles raw minimum value.
 */
#define MIN_ObstacleStatusA_NumObstacles 0

/**
 * Signal NumObstacles raw maximum value.
 */
#define MAX_ObstacleStatusA_NumObstacles 10

/**
 * Signal NumObstacles raw offset value.
 */
#define OFF_ObstacleStatusA_NumObstacles 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleStatusA_Timestamp Signal Timestamp of Message ObstacleStatusA (0x410)
 *
 * Reserved. Not Implemented Default: 0
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal Timestamp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_Timestamp and \ref GET_ObstacleStatusA_Timestamp instead.
 */
#define SIG_ObstacleStatusA_Timestamp 0, 0, 8, 8

/**
 * Signal Timestamp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_Timestamp or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_Timestamp 0, 0, 8, 8, 0

/**
 * Get signal Timestamp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_Timestamp(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal Timestamp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_Timestamp(buf, val)                                                                        \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal Timestamp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_Timestamp(buf) SET_ObstacleStatusA_Timestamp(buf, 0)

/**
 * Signal Timestamp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_Timestamp(x, fmt) ((x)*fmt)

/**
 * Signal Timestamp raw initial value.
 */
#define START_ObstacleStatusA_Timestamp 0

/**
 * Signal Timestamp raw minimum value.
 */
#define MIN_ObstacleStatusA_Timestamp 0

/**
 * Signal Timestamp raw maximum value.
 */
#define MAX_ObstacleStatusA_Timestamp 255

/**
 * Signal Timestamp raw offset value.
 */
#define OFF_ObstacleStatusA_Timestamp 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleStatusA_ProtocolVersion Signal ProtocolVersion of Message ObstacleStatusA (0x410)
 *
 * Default: 3
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal ProtocolVersion configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_ProtocolVersion and \ref GET_ObstacleStatusA_ProtocolVersion instead.
 */
#define SIG_ObstacleStatusA_ProtocolVersion 0, 0, 16, 7

/**
 * Signal ProtocolVersion setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_ProtocolVersion or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_ProtocolVersion 0, 0, 16, 7, 0

/**
 * Get signal ProtocolVersion from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_ProtocolVersion(buf) (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x7f) << 0))

/**
 * Set signal ProtocolVersion in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_ProtocolVersion(buf, val)                                                                  \
    {                                                                                                                  \
        buf[2] &= ~(0x7f << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x7f) << 0;                                                                 \
    }

/**
 * Set signal ProtocolVersion in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_ProtocolVersion(buf) SET_ObstacleStatusA_ProtocolVersion(buf, 0)

/**
 * Signal ProtocolVersion value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_ProtocolVersion(x, fmt) ((x)*fmt)

/**
 * Signal ProtocolVersion raw initial value.
 */
#define START_ObstacleStatusA_ProtocolVersion 0

/**
 * Signal ProtocolVersion raw minimum value.
 */
#define MIN_ObstacleStatusA_ProtocolVersion 7

/**
 * Signal ProtocolVersion raw maximum value.
 */
#define MAX_ObstacleStatusA_ProtocolVersion 7

/**
 * Signal ProtocolVersion raw offset value.
 */
#define OFF_ObstacleStatusA_ProtocolVersion 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleStatusA_Go Signal Go of Message ObstacleStatusA (0x410)
 *
 * Reserved. Not Implemented Default: 2=Undecided
 *
 * Contains the value table \ref ENUM_ObstacleStatusA_Go.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal Go configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_Go and \ref GET_ObstacleStatusA_Go instead.
 */
#define SIG_ObstacleStatusA_Go 0, 0, 23, 4

/**
 * Signal Go setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_Go or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_Go 0, 0, 23, 4, 0

/**
 * Get signal Go from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_Go(buf)                                                                                    \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x07) << 1))

/**
 * Set signal Go in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_Go(buf, val)                                                                               \
    {                                                                                                                  \
        buf[2] &= ~(0x01 << 7);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[3] &= ~(0x07 << 0);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal Go in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_Go(buf) SET_ObstacleStatusA_Go(buf, 0)

/**
 * Signal Go value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_Go(x, fmt) ((x)*fmt)

/**
 * Signal Go raw initial value.
 */
#define START_ObstacleStatusA_Go 0

/**
 * Signal Go raw minimum value.
 */
#define MIN_ObstacleStatusA_Go 0

/**
 * Signal Go raw maximum value.
 */
#define MAX_ObstacleStatusA_Go 15

/**
 * Signal Go raw offset value.
 */
#define OFF_ObstacleStatusA_Go 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleStatusA_Go Value Table for Signal Go in Message ObstacleStatusA (0x410)
 *
 * Enum values defined for \ref SIG_ObstacleStatusA_Go.
 *
 * @ingroup SIG_ObstacleStatusA_Go
 */

/**
 * Value table ObstacleStatusA_Go entry Not.
 *
 * Calculated
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_Not 15

/**
 * Value table ObstacleStatusA_Go entry currently.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently 14

/**
 * Value table ObstacleStatusA_Go entry currently_D.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently_D 13

/**
 * Value table ObstacleStatusA_Go entry currently_C.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently_C 12

/**
 * Value table ObstacleStatusA_Go entry currently_B.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently_B 11

/**
 * Value table ObstacleStatusA_Go entry currently_A.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently_A 10

/**
 * Value table ObstacleStatusA_Go entry currently_9.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently_9 9

/**
 * Value table ObstacleStatusA_Go entry currently_8.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently_8 8

/**
 * Value table ObstacleStatusA_Go entry currently_7.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently_7 7

/**
 * Value table ObstacleStatusA_Go entry currently_6.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently_6 6

/**
 * Value table ObstacleStatusA_Go entry currently_5.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently_5 5

/**
 * Value table ObstacleStatusA_Go entry currently_4.
 *
 * unused
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_currently_4 4

/**
 * Value table ObstacleStatusA_Go entry Driver.
 *
 * decision is required
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_Driver 3

/**
 * Value table ObstacleStatusA_Go entry Undecided.
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_Undecided 2

/**
 * Value table ObstacleStatusA_Go entry Go_.
 *
 * Go!
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_Go_ 1

/**
 * Value table ObstacleStatusA_Go entry Stop.
 *
 * @ingroup ENUM_ObstacleStatusA_Go
 */
#define ObstacleStatusA_Go_Stop 0

/**
 * @defgroup SIG_ObstacleStatusA_Close_Car Signal Close_Car of Message ObstacleStatusA (0x410)
 *
 * Reserved. Not Implemented Default: 0=No close car Indication whether we detect a close car in front of the host
 * vehicle or not.
 *
 * Contains the value table \ref ENUM_ObstacleStatusA_Close_Car.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal Close_Car configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_Close_Car and \ref GET_ObstacleStatusA_Close_Car instead.
 */
#define SIG_ObstacleStatusA_Close_Car 0, 0, 27, 1

/**
 * Signal Close_Car setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_Close_Car or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_Close_Car 0, 0, 27, 1, 0

/**
 * Get signal Close_Car from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_Close_Car(buf) (0 | (uint8_t)(+(uint8_t)((buf[3] >> 3) & 0x01) << 0))

/**
 * Set signal Close_Car in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_Close_Car(buf, val)                                                                        \
    {                                                                                                                  \
        buf[3] &= ~(0x01 << 3);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal Close_Car in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_Close_Car(buf) SET_ObstacleStatusA_Close_Car(buf, 0)

/**
 * Signal Close_Car value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_Close_Car(x, fmt) ((x)*fmt)

/**
 * Signal Close_Car raw initial value.
 */
#define START_ObstacleStatusA_Close_Car 0

/**
 * Signal Close_Car raw minimum value.
 */
#define MIN_ObstacleStatusA_Close_Car 0

/**
 * Signal Close_Car raw maximum value.
 */
#define MAX_ObstacleStatusA_Close_Car 1

/**
 * Signal Close_Car raw offset value.
 */
#define OFF_ObstacleStatusA_Close_Car 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleStatusA_Close_Car Value Table for Signal Close_Car in Message ObstacleStatusA (0x410)
 *
 * Enum values defined for \ref SIG_ObstacleStatusA_Close_Car.
 *
 * @ingroup SIG_ObstacleStatusA_Close_Car
 */

/**
 * Value table ObstacleStatusA_Close_Car entry Close.
 *
 * car exists
 *
 * @ingroup ENUM_ObstacleStatusA_Close_Car
 */
#define ObstacleStatusA_Close_Car_Close 1

/**
 * Value table ObstacleStatusA_Close_Car entry No.
 *
 * close car
 *
 * @ingroup ENUM_ObstacleStatusA_Close_Car
 */
#define ObstacleStatusA_Close_Car_No 0

/**
 * @defgroup SIG_ObstacleStatusA_RightCloseRangeCutIn Signal RightCloseRangeCutIn of Message ObstacleStatusA (0x410)
 *
 * Reserved. Not Implemented Default: 0=no right cut in
 *
 * Contains the value table \ref ENUM_ObstacleStatusA_RightCloseRangeCutIn.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal RightCloseRangeCutIn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_RightCloseRangeCutIn and \ref GET_ObstacleStatusA_RightCloseRangeCutIn instead.
 */
#define SIG_ObstacleStatusA_RightCloseRangeCutIn 0, 0, 28, 1

/**
 * Signal RightCloseRangeCutIn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_RightCloseRangeCutIn or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_RightCloseRangeCutIn 0, 0, 28, 1, 0

/**
 * Get signal RightCloseRangeCutIn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_RightCloseRangeCutIn(buf) (0 | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x01) << 0))

/**
 * Set signal RightCloseRangeCutIn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_RightCloseRangeCutIn(buf, val)                                                             \
    {                                                                                                                  \
        buf[3] &= ~(0x01 << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal RightCloseRangeCutIn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_RightCloseRangeCutIn(buf) SET_ObstacleStatusA_RightCloseRangeCutIn(buf, 0)

/**
 * Signal RightCloseRangeCutIn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_RightCloseRangeCutIn(x, fmt) ((x)*fmt)

/**
 * Signal RightCloseRangeCutIn raw initial value.
 */
#define START_ObstacleStatusA_RightCloseRangeCutIn 0

/**
 * Signal RightCloseRangeCutIn raw minimum value.
 */
#define MIN_ObstacleStatusA_RightCloseRangeCutIn 0

/**
 * Signal RightCloseRangeCutIn raw maximum value.
 */
#define MAX_ObstacleStatusA_RightCloseRangeCutIn 1

/**
 * Signal RightCloseRangeCutIn raw offset value.
 */
#define OFF_ObstacleStatusA_RightCloseRangeCutIn 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleStatusA_RightCloseRangeCutIn Value Table for Signal RightCloseRangeCutIn in Message
 * ObstacleStatusA (0x410)
 *
 * Enum values defined for \ref SIG_ObstacleStatusA_RightCloseRangeCutIn.
 *
 * @ingroup SIG_ObstacleStatusA_RightCloseRangeCutIn
 */

/**
 * Value table ObstacleStatusA_RightCloseRangeCutIn entry right.
 *
 * cut in
 *
 * @ingroup ENUM_ObstacleStatusA_RightCloseRangeCutIn
 */
#define ObstacleStatusA_RightCloseRangeCutIn_right 1

/**
 * Value table ObstacleStatusA_RightCloseRangeCutIn entry no.
 *
 * right cut in
 *
 * @ingroup ENUM_ObstacleStatusA_RightCloseRangeCutIn
 */
#define ObstacleStatusA_RightCloseRangeCutIn_no 0

/**
 * @defgroup SIG_ObstacleStatusA_LeftCloseRangeCutIn Signal LeftCloseRangeCutIn of Message ObstacleStatusA (0x410)
 *
 * Reserved. Not Implemented Default: 0=no left cut in
 *
 * Contains the value table \ref ENUM_ObstacleStatusA_LeftCloseRangeCutIn.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal LeftCloseRangeCutIn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_LeftCloseRangeCutIn and \ref GET_ObstacleStatusA_LeftCloseRangeCutIn instead.
 */
#define SIG_ObstacleStatusA_LeftCloseRangeCutIn 0, 0, 29, 1

/**
 * Signal LeftCloseRangeCutIn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_LeftCloseRangeCutIn or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_LeftCloseRangeCutIn 0, 0, 29, 1, 0

/**
 * Get signal LeftCloseRangeCutIn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_LeftCloseRangeCutIn(buf) (0 | (uint8_t)(+(uint8_t)((buf[3] >> 5) & 0x01) << 0))

/**
 * Set signal LeftCloseRangeCutIn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_LeftCloseRangeCutIn(buf, val)                                                              \
    {                                                                                                                  \
        buf[3] &= ~(0x01 << 5);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal LeftCloseRangeCutIn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_LeftCloseRangeCutIn(buf) SET_ObstacleStatusA_LeftCloseRangeCutIn(buf, 0)

/**
 * Signal LeftCloseRangeCutIn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_LeftCloseRangeCutIn(x, fmt) ((x)*fmt)

/**
 * Signal LeftCloseRangeCutIn raw initial value.
 */
#define START_ObstacleStatusA_LeftCloseRangeCutIn 0

/**
 * Signal LeftCloseRangeCutIn raw minimum value.
 */
#define MIN_ObstacleStatusA_LeftCloseRangeCutIn 0

/**
 * Signal LeftCloseRangeCutIn raw maximum value.
 */
#define MAX_ObstacleStatusA_LeftCloseRangeCutIn 1

/**
 * Signal LeftCloseRangeCutIn raw offset value.
 */
#define OFF_ObstacleStatusA_LeftCloseRangeCutIn 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleStatusA_LeftCloseRangeCutIn Value Table for Signal LeftCloseRangeCutIn in Message
 * ObstacleStatusA (0x410)
 *
 * Enum values defined for \ref SIG_ObstacleStatusA_LeftCloseRangeCutIn.
 *
 * @ingroup SIG_ObstacleStatusA_LeftCloseRangeCutIn
 */

/**
 * Value table ObstacleStatusA_LeftCloseRangeCutIn entry left.
 *
 * cut in
 *
 * @ingroup ENUM_ObstacleStatusA_LeftCloseRangeCutIn
 */
#define ObstacleStatusA_LeftCloseRangeCutIn_left 1

/**
 * Value table ObstacleStatusA_LeftCloseRangeCutIn entry no.
 *
 * left cut in
 *
 * @ingroup ENUM_ObstacleStatusA_LeftCloseRangeCutIn
 */
#define ObstacleStatusA_LeftCloseRangeCutIn_no 0

/**
 * @defgroup SIG_ObstacleStatusA_Failsafe Signal Failsafe of Message ObstacleStatusA (0x410)
 *
 * Reserved. Not Implemented Default: 0=No Failsafe
 *
 * Contains the value table \ref ENUM_ObstacleStatusA_Failsafe.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal Failsafe configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_Failsafe and \ref GET_ObstacleStatusA_Failsafe instead.
 */
#define SIG_ObstacleStatusA_Failsafe 0, 0, 30, 13

/**
 * Signal Failsafe setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_Failsafe or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_Failsafe 0, 0, 30, 13, 0

/**
 * Get signal Failsafe from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_Failsafe(buf)                                                                              \
    (0 | (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) | (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 2) |       \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x07) << 10))

/**
 * Set signal Failsafe in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_Failsafe(buf, val)                                                                         \
    {                                                                                                                  \
        buf[3] &= ~(0x03 << 6);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[4] &= ~(0xff << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0;                                                       \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x07) << 0;                                                      \
    }

/**
 * Set signal Failsafe in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_Failsafe(buf) SET_ObstacleStatusA_Failsafe(buf, 0)

/**
 * Signal Failsafe value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_Failsafe(x, fmt) ((x)*fmt)

/**
 * Signal Failsafe raw initial value.
 */
#define START_ObstacleStatusA_Failsafe 0

/**
 * Signal Failsafe raw minimum value.
 */
#define MIN_ObstacleStatusA_Failsafe 0

/**
 * Signal Failsafe raw maximum value.
 */
#define MAX_ObstacleStatusA_Failsafe 8191

/**
 * Signal Failsafe raw offset value.
 */
#define OFF_ObstacleStatusA_Failsafe 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleStatusA_Failsafe Value Table for Signal Failsafe in Message ObstacleStatusA (0x410)
 *
 * Enum values defined for \ref SIG_ObstacleStatusA_Failsafe.
 *
 * @ingroup SIG_ObstacleStatusA_Failsafe
 */

/**
 * Value table ObstacleStatusA_Failsafe entry Sun.
 *
 * Ray
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Sun 4096

/**
 * Value table ObstacleStatusA_Failsafe entry Foggy.
 *
 * Spots
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Foggy 2048

/**
 * Value table ObstacleStatusA_Failsafe entry Spot.
 *
 * Halos/ Frozen windshield
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Spot 1024

/**
 * Value table ObstacleStatusA_Failsafe entry Smeared.
 *
 * spots
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Smeared 512

/**
 * Value table ObstacleStatusA_Failsafe entry Calibration.
 *
 * Misalignment
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Calibration 256

/**
 * Value table ObstacleStatusA_Failsafe entry Out.
 *
 * of Calibration (Autofix)
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Out 128

/**
 * Value table ObstacleStatusA_Failsafe entry Partial.
 *
 * Transparent Blockage
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Partial 16

/**
 * Value table ObstacleStatusA_Failsafe entry Splashes.
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Splashes 64

/**
 * Value table ObstacleStatusA_Failsafe entry Full.
 *
 * Blockage
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Full 32

/**
 * Value table ObstacleStatusA_Failsafe entry Smear.
 *
 * Image
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Smear 8

/**
 * Value table ObstacleStatusA_Failsafe entry Blur.
 *
 * Image
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Blur 4

/**
 * Value table ObstacleStatusA_Failsafe entry Low.
 *
 * Sun
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Low 2

/**
 * Value table ObstacleStatusA_Failsafe entry Impaired.
 *
 * VD
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_Impaired 1

/**
 * Value table ObstacleStatusA_Failsafe entry No.
 *
 * Failsafe
 *
 * @ingroup ENUM_ObstacleStatusA_Failsafe
 */
#define ObstacleStatusA_Failsafe_No 0

/**
 * @defgroup SIG_ObstacleStatusA_ID_CIPV Signal ID_CIPV of Message ObstacleStatusA (0x410)
 *
 * CIPV ID
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal ID_CIPV configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_ID_CIPV and \ref GET_ObstacleStatusA_ID_CIPV instead.
 */
#define SIG_ObstacleStatusA_ID_CIPV 0, 0, 43, 7

/**
 * Signal ID_CIPV setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_ID_CIPV or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_ID_CIPV 0, 0, 43, 7, 0

/**
 * Get signal ID_CIPV from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_ID_CIPV(buf)                                                                               \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0x03) << 5))

/**
 * Set signal ID_CIPV in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_ID_CIPV(buf, val)                                                                          \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0x03 << 0);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 5) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal ID_CIPV in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_ID_CIPV(buf) SET_ObstacleStatusA_ID_CIPV(buf, 0)

/**
 * Signal ID_CIPV value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_ID_CIPV(x, fmt) ((x)*fmt)

/**
 * Signal ID_CIPV raw initial value.
 */
#define START_ObstacleStatusA_ID_CIPV 0

/**
 * Signal ID_CIPV raw minimum value.
 */
#define MIN_ObstacleStatusA_ID_CIPV 0

/**
 * Signal ID_CIPV raw maximum value.
 */
#define MAX_ObstacleStatusA_ID_CIPV 63

/**
 * Signal ID_CIPV raw offset value.
 */
#define OFF_ObstacleStatusA_ID_CIPV 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleStatusA_ID_MCP Signal ID_MCP of Message ObstacleStatusA (0x410)
 *
 * Most Critical Pedestrian ID (Alerts are given only for the MCP)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal ID_MCP configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_ID_MCP and \ref GET_ObstacleStatusA_ID_MCP instead.
 */
#define SIG_ObstacleStatusA_ID_MCP 0, 0, 50, 7

/**
 * Signal ID_MCP setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_ID_MCP or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_ID_MCP 0, 0, 50, 7, 0

/**
 * Get signal ID_MCP from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_ID_MCP(buf)                                                                                \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 2) & 0x3f) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x01) << 6))

/**
 * Set signal ID_MCP in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_ID_MCP(buf, val)                                                                           \
    {                                                                                                                  \
        buf[6] &= ~(0x3f << 2);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x3f) << 2;                                                                 \
        buf[7] &= ~(0x01 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 6) & 0x01) << 0;                                                                 \
    }

/**
 * Set signal ID_MCP in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_ID_MCP(buf) SET_ObstacleStatusA_ID_MCP(buf, 0)

/**
 * Signal ID_MCP value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_ID_MCP(x, fmt) ((x)*fmt)

/**
 * Signal ID_MCP raw initial value.
 */
#define START_ObstacleStatusA_ID_MCP 0

/**
 * Signal ID_MCP raw minimum value.
 */
#define MIN_ObstacleStatusA_ID_MCP 0

/**
 * Signal ID_MCP raw maximum value.
 */
#define MAX_ObstacleStatusA_ID_MCP 63

/**
 * Signal ID_MCP raw offset value.
 */
#define OFF_ObstacleStatusA_ID_MCP 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleStatusA_reserved_stA Signal reserved_stA of Message ObstacleStatusA (0x410)
 *
 * NA
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleStatusA
 * @{
 */

/**
 * Signal reserved_stA configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleStatusA_reserved_stA and \ref GET_ObstacleStatusA_reserved_stA instead.
 */
#define SIG_ObstacleStatusA_reserved_stA 0, 0, 57, 7

/**
 * Signal reserved_stA setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleStatusA_reserved_stA or \ref INIT_ObstacleStatusA instead.
 */
#define SETUP_ObstacleStatusA_reserved_stA 0, 0, 57, 7, 0

/**
 * Get signal reserved_stA from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleStatusA_reserved_stA(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 1) & 0x7f) << 0))

/**
 * Set signal reserved_stA in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleStatusA_reserved_stA(buf, val)                                                                     \
    {                                                                                                                  \
        buf[7] &= ~(0x7f << 1);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x7f) << 1;                                                                 \
    }

/**
 * Set signal reserved_stA in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleStatusA_reserved_stA(buf) SET_ObstacleStatusA_reserved_stA(buf, 0)

/**
 * Signal reserved_stA value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleStatusA_reserved_stA(x, fmt) ((x)*fmt)

/**
 * Signal reserved_stA raw initial value.
 */
#define START_ObstacleStatusA_reserved_stA 0

/**
 * Signal reserved_stA raw minimum value.
 */
#define MIN_ObstacleStatusA_reserved_stA 0

/**
 * Signal reserved_stA raw maximum value.
 */
#define MAX_ObstacleStatusA_reserved_stA 0

/**
 * Signal reserved_stA raw offset value.
 */
#define OFF_ObstacleStatusA_reserved_stA 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC3_ObstacleAngleRate Signal ObstacleAngleRate of Message ObstacleDataC3 (0x428)
 *
 * Reserved
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC3
 * @{
 */

/**
 * Signal ObstacleAngleRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC3_ObstacleAngleRate and \ref GET_ObstacleDataC3_ObstacleAngleRate instead.
 */
#define SIG_ObstacleDataC3_ObstacleAngleRate 0, 1, 0, 16

/**
 * Signal ObstacleAngleRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC3_ObstacleAngleRate or \ref INIT_ObstacleDataC3 instead.
 */
#define SETUP_ObstacleDataC3_ObstacleAngleRate 0, 1, 0, 16, 0

/**
 * Get signal ObstacleAngleRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC3_ObstacleAngleRate(buf)                                                                      \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAngleRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC3_ObstacleAngleRate(buf, val)                                                                 \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAngleRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC3_ObstacleAngleRate(buf) SET_ObstacleDataC3_ObstacleAngleRate(buf, 0)

/**
 * Signal ObstacleAngleRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC3_ObstacleAngleRate(x, fmt) ((x)*fmt / 100)

/**
 * Signal ObstacleAngleRate raw initial value.
 */
#define START_ObstacleDataC3_ObstacleAngleRate 0

/**
 * Signal ObstacleAngleRate raw minimum value.
 */
#define MIN_ObstacleDataC3_ObstacleAngleRate -32768

/**
 * Signal ObstacleAngleRate raw maximum value.
 */
#define MAX_ObstacleDataC3_ObstacleAngleRate 32767

/**
 * Signal ObstacleAngleRate raw offset value.
 */
#define OFF_ObstacleDataC3_ObstacleAngleRate 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC3_ObstacleVelY Signal ObstacleVelY of Message ObstacleDataC3 (0x428)
 *
 * Relative lateral velocity of the object.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC3
 * @{
 */

/**
 * Signal ObstacleVelY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC3_ObstacleVelY and \ref GET_ObstacleDataC3_ObstacleVelY instead.
 */
#define SIG_ObstacleDataC3_ObstacleVelY 0, 1, 16, 12

/**
 * Signal ObstacleVelY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC3_ObstacleVelY or \ref INIT_ObstacleDataC3 instead.
 */
#define SETUP_ObstacleDataC3_ObstacleVelY 0, 1, 16, 12, 0

/**
 * Get signal ObstacleVelY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC3_ObstacleVelY(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[3] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC3_ObstacleVelY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0x0f << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC3_ObstacleVelY(buf) SET_ObstacleDataC3_ObstacleVelY(buf, 0)

/**
 * Signal ObstacleVelY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC3_ObstacleVelY(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelY raw initial value.
 */
#define START_ObstacleDataC3_ObstacleVelY 0

/**
 * Signal ObstacleVelY raw minimum value.
 */
#define MIN_ObstacleDataC3_ObstacleVelY -2047

/**
 * Signal ObstacleVelY raw maximum value.
 */
#define MAX_ObstacleDataC3_ObstacleVelY 2047

/**
 * Signal ObstacleVelY raw offset value.
 */
#define OFF_ObstacleDataC3_ObstacleVelY 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC3_Object_Accel_X Signal Object_Accel_X of Message ObstacleDataC3 (0x428)
 *
 * The longitude acceleration of the object. Type: 10 bit, signed integer  Range: -14.97 : 14.97 [m/s2] Conversion:
 * (HEX)* 0.03 Invalid value: 200h
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC3
 * @{
 */

/**
 * Signal Object_Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC3_Object_Accel_X and \ref GET_ObstacleDataC3_Object_Accel_X instead.
 */
#define SIG_ObstacleDataC3_Object_Accel_X 0, 1, 28, 10

/**
 * Signal Object_Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC3_Object_Accel_X or \ref INIT_ObstacleDataC3 instead.
 */
#define SETUP_ObstacleDataC3_Object_Accel_X 0, 1, 28, 10, 0

/**
 * Get signal Object_Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC3_Object_Accel_X(buf)                                                                         \
    (0 | (uint16_t)(-(uint16_t)((buf[4] >> 5) & 0x01) << 10) | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x3f) << 4))

/**
 * Set signal Object_Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC3_Object_Accel_X(buf, val)                                                                    \
    {                                                                                                                  \
        buf[3] &= ~(0x0f << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4;                                                                 \
        buf[4] &= ~(0x3f << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0;                                                       \
    }

/**
 * Set signal Object_Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC3_Object_Accel_X(buf) SET_ObstacleDataC3_Object_Accel_X(buf, 0)

/**
 * Signal Object_Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC3_Object_Accel_X(x, fmt) ((x)*fmt * 3 / 100)

/**
 * Signal Object_Accel_X raw initial value.
 */
#define START_ObstacleDataC3_Object_Accel_X 0

/**
 * Signal Object_Accel_X raw minimum value.
 */
#define MIN_ObstacleDataC3_Object_Accel_X -499

/**
 * Signal Object_Accel_X raw maximum value.
 */
#define MAX_ObstacleDataC3_Object_Accel_X 499

/**
 * Signal Object_Accel_X raw offset value.
 */
#define OFF_ObstacleDataC3_Object_Accel_X 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC3_ObstacleReplaced Signal ObstacleReplaced of Message ObstacleDataC3 (0x428)
 *
 * Reserved
 *
 * Contains the value table \ref ENUM_ObstacleDataC3_ObstacleReplaced.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC3
 * @{
 */

/**
 * Signal ObstacleReplaced configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC3_ObstacleReplaced and \ref GET_ObstacleDataC3_ObstacleReplaced instead.
 */
#define SIG_ObstacleDataC3_ObstacleReplaced 0, 0, 38, 1

/**
 * Signal ObstacleReplaced setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC3_ObstacleReplaced or \ref INIT_ObstacleDataC3 instead.
 */
#define SETUP_ObstacleDataC3_ObstacleReplaced 0, 0, 38, 1, 0

/**
 * Get signal ObstacleReplaced from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC3_ObstacleReplaced(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x01) << 0))

/**
 * Set signal ObstacleReplaced in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC3_ObstacleReplaced(buf, val)                                                                  \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 6);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 6;                                                                 \
    }

/**
 * Set signal ObstacleReplaced in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC3_ObstacleReplaced(buf) SET_ObstacleDataC3_ObstacleReplaced(buf, 0)

/**
 * Signal ObstacleReplaced value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC3_ObstacleReplaced(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleReplaced raw initial value.
 */
#define START_ObstacleDataC3_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw minimum value.
 */
#define MIN_ObstacleDataC3_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw maximum value.
 */
#define MAX_ObstacleDataC3_ObstacleReplaced 1

/**
 * Signal ObstacleReplaced raw offset value.
 */
#define OFF_ObstacleDataC3_ObstacleReplaced 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC3_ObstacleReplaced Value Table for Signal ObstacleReplaced in Message ObstacleDataC3
 * (0x428)
 *
 * Enum values defined for \ref SIG_ObstacleDataC3_ObstacleReplaced.
 *
 * @ingroup SIG_ObstacleDataC3_ObstacleReplaced
 */

/**
 * Value table ObstacleDataC3_ObstacleReplaced entry replaced.
 *
 * in this frame
 *
 * @ingroup ENUM_ObstacleDataC3_ObstacleReplaced
 */
#define ObstacleDataC3_ObstacleReplaced_replaced 1

/**
 * Value table ObstacleDataC3_ObstacleReplaced entry not.
 *
 * replaced in this frame
 *
 * @ingroup ENUM_ObstacleDataC3_ObstacleReplaced
 */
#define ObstacleDataC3_ObstacleReplaced_not 0

/**
 * @defgroup SIG_ObstacleDataC3_PedestrainOrientations Signal PedestrainOrientations of Message ObstacleDataC3 (0x428)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataC3_PedestrainOrientations.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC3
 * @{
 */

/**
 * Signal PedestrainOrientations configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC3_PedestrainOrientations and \ref GET_ObstacleDataC3_PedestrainOrientations instead.
 */
#define SIG_ObstacleDataC3_PedestrainOrientations 0, 0, 39, 4

/**
 * Signal PedestrainOrientations setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC3_PedestrainOrientations or \ref INIT_ObstacleDataC3 instead.
 */
#define SETUP_ObstacleDataC3_PedestrainOrientations 0, 0, 39, 4, 0

/**
 * Get signal PedestrainOrientations from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC3_PedestrainOrientations(buf)                                                                 \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x07) << 1))

/**
 * Set signal PedestrainOrientations in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC3_PedestrainOrientations(buf, val)                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal PedestrainOrientations in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC3_PedestrainOrientations(buf) SET_ObstacleDataC3_PedestrainOrientations(buf, 0)

/**
 * Signal PedestrainOrientations value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC3_PedestrainOrientations(x, fmt) ((x)*fmt)

/**
 * Signal PedestrainOrientations raw initial value.
 */
#define START_ObstacleDataC3_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw minimum value.
 */
#define MIN_ObstacleDataC3_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw maximum value.
 */
#define MAX_ObstacleDataC3_PedestrainOrientations 9

/**
 * Signal PedestrainOrientations raw offset value.
 */
#define OFF_ObstacleDataC3_PedestrainOrientations 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC3_PedestrainOrientations Value Table for Signal PedestrainOrientations in Message
 * ObstacleDataC3 (0x428)
 *
 * Enum values defined for \ref SIG_ObstacleDataC3_PedestrainOrientations.
 *
 * @ingroup SIG_ObstacleDataC3_PedestrainOrientations
 */

/**
 * Value table ObstacleDataC3_PedestrainOrientations entry unkown.
 *
 * @ingroup ENUM_ObstacleDataC3_PedestrainOrientations
 */
#define ObstacleDataC3_PedestrainOrientations_unkown 9

/**
 * Value table ObstacleDataC3_PedestrainOrientations entry right_back.
 *
 * @ingroup ENUM_ObstacleDataC3_PedestrainOrientations
 */
#define ObstacleDataC3_PedestrainOrientations_right_back 8

/**
 * Value table ObstacleDataC3_PedestrainOrientations entry right_front.
 *
 * @ingroup ENUM_ObstacleDataC3_PedestrainOrientations
 */
#define ObstacleDataC3_PedestrainOrientations_right_front 7

/**
 * Value table ObstacleDataC3_PedestrainOrientations entry right.
 *
 * @ingroup ENUM_ObstacleDataC3_PedestrainOrientations
 */
#define ObstacleDataC3_PedestrainOrientations_right 6

/**
 * Value table ObstacleDataC3_PedestrainOrientations entry left_back.
 *
 * @ingroup ENUM_ObstacleDataC3_PedestrainOrientations
 */
#define ObstacleDataC3_PedestrainOrientations_left_back 5

/**
 * Value table ObstacleDataC3_PedestrainOrientations entry left_anterior.
 *
 * @ingroup ENUM_ObstacleDataC3_PedestrainOrientations
 */
#define ObstacleDataC3_PedestrainOrientations_left_anterior 4

/**
 * Value table ObstacleDataC3_PedestrainOrientations entry left.
 *
 * @ingroup ENUM_ObstacleDataC3_PedestrainOrientations
 */
#define ObstacleDataC3_PedestrainOrientations_left 3

/**
 * Value table ObstacleDataC3_PedestrainOrientations entry front.
 *
 * @ingroup ENUM_ObstacleDataC3_PedestrainOrientations
 */
#define ObstacleDataC3_PedestrainOrientations_front 2

/**
 * Value table ObstacleDataC3_PedestrainOrientations entry back.
 *
 * @ingroup ENUM_ObstacleDataC3_PedestrainOrientations
 */
#define ObstacleDataC3_PedestrainOrientations_back 1

/**
 * Value table ObstacleDataC3_PedestrainOrientations entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataC3_PedestrainOrientations
 */
#define ObstacleDataC3_PedestrainOrientations_unavailable 0

/**
 * @defgroup SIG_ObstacleDataC3_VehicleAngle Signal VehicleAngle of Message ObstacleDataC3 (0x428)
 *
 * Vehicle yaw angle information
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC3
 * @{
 */

/**
 * Signal VehicleAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC3_VehicleAngle and \ref GET_ObstacleDataC3_VehicleAngle instead.
 */
#define SIG_ObstacleDataC3_VehicleAngle 0, 1, 43, 16

/**
 * Signal VehicleAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC3_VehicleAngle or \ref INIT_ObstacleDataC3 instead.
 */
#define SETUP_ObstacleDataC3_VehicleAngle 0, 1, 43, 16, 0

/**
 * Get signal VehicleAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC3_VehicleAngle(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) |       \
     (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x07) << 13))

/**
 * Set signal VehicleAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC3_VehicleAngle(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
        buf[7] &= ~(0x07 << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x07) << 0;                                                      \
    }

/**
 * Set signal VehicleAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC3_VehicleAngle(buf) SET_ObstacleDataC3_VehicleAngle(buf, 0)

/**
 * Signal VehicleAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC3_VehicleAngle(x, fmt) ((x)*fmt / 100)

/**
 * Signal VehicleAngle raw initial value.
 */
#define START_ObstacleDataC3_VehicleAngle 0

/**
 * Signal VehicleAngle raw minimum value.
 */
#define MIN_ObstacleDataC3_VehicleAngle -32768

/**
 * Signal VehicleAngle raw maximum value.
 */
#define MAX_ObstacleDataC3_VehicleAngle 32767

/**
 * Signal VehicleAngle raw offset value.
 */
#define OFF_ObstacleDataC3_VehicleAngle 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC3_reserved_C Signal reserved_C of Message ObstacleDataC3 (0x428)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC3
 * @{
 */

/**
 * Signal reserved_C configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC3_reserved_C and \ref GET_ObstacleDataC3_reserved_C instead.
 */
#define SIG_ObstacleDataC3_reserved_C 0, 0, 59, 5

/**
 * Signal reserved_C setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC3_reserved_C or \ref INIT_ObstacleDataC3 instead.
 */
#define SETUP_ObstacleDataC3_reserved_C 0, 0, 59, 5, 0

/**
 * Get signal reserved_C from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC3_reserved_C(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0))

/**
 * Set signal reserved_C in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC3_reserved_C(buf, val)                                                                        \
    {                                                                                                                  \
        buf[7] &= ~(0x1f << 3);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
    }

/**
 * Set signal reserved_C in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC3_reserved_C(buf) SET_ObstacleDataC3_reserved_C(buf, 0)

/**
 * Signal reserved_C value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC3_reserved_C(x, fmt) ((x)*fmt)

/**
 * Signal reserved_C raw initial value.
 */
#define START_ObstacleDataC3_reserved_C 0

/**
 * Signal reserved_C raw minimum value.
 */
#define MIN_ObstacleDataC3_reserved_C 0

/**
 * Signal reserved_C raw maximum value.
 */
#define MAX_ObstacleDataC3_reserved_C 0

/**
 * Signal reserved_C raw offset value.
 */
#define OFF_ObstacleDataC3_reserved_C 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC10_ObstacleAngleRate Signal ObstacleAngleRate of Message ObstacleDataC10 (0x43d)
 *
 * Reserved
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC10
 * @{
 */

/**
 * Signal ObstacleAngleRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC10_ObstacleAngleRate and \ref GET_ObstacleDataC10_ObstacleAngleRate instead.
 */
#define SIG_ObstacleDataC10_ObstacleAngleRate 0, 1, 0, 16

/**
 * Signal ObstacleAngleRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC10_ObstacleAngleRate or \ref INIT_ObstacleDataC10 instead.
 */
#define SETUP_ObstacleDataC10_ObstacleAngleRate 0, 1, 0, 16, 0

/**
 * Get signal ObstacleAngleRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC10_ObstacleAngleRate(buf)                                                                     \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAngleRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC10_ObstacleAngleRate(buf, val)                                                                \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAngleRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC10_ObstacleAngleRate(buf) SET_ObstacleDataC10_ObstacleAngleRate(buf, 0)

/**
 * Signal ObstacleAngleRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC10_ObstacleAngleRate(x, fmt) ((x)*fmt / 100)

/**
 * Signal ObstacleAngleRate raw initial value.
 */
#define START_ObstacleDataC10_ObstacleAngleRate 0

/**
 * Signal ObstacleAngleRate raw minimum value.
 */
#define MIN_ObstacleDataC10_ObstacleAngleRate -32768

/**
 * Signal ObstacleAngleRate raw maximum value.
 */
#define MAX_ObstacleDataC10_ObstacleAngleRate 32767

/**
 * Signal ObstacleAngleRate raw offset value.
 */
#define OFF_ObstacleDataC10_ObstacleAngleRate 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC10_ObstacleVelY Signal ObstacleVelY of Message ObstacleDataC10 (0x43d)
 *
 * Relative lateral velocity of the object.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC10
 * @{
 */

/**
 * Signal ObstacleVelY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC10_ObstacleVelY and \ref GET_ObstacleDataC10_ObstacleVelY instead.
 */
#define SIG_ObstacleDataC10_ObstacleVelY 0, 1, 16, 12

/**
 * Signal ObstacleVelY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC10_ObstacleVelY or \ref INIT_ObstacleDataC10 instead.
 */
#define SETUP_ObstacleDataC10_ObstacleVelY 0, 1, 16, 12, 0

/**
 * Get signal ObstacleVelY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC10_ObstacleVelY(buf)                                                                          \
    (0 | (uint16_t)(-(uint16_t)((buf[3] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC10_ObstacleVelY(buf, val)                                                                     \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0x0f << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC10_ObstacleVelY(buf) SET_ObstacleDataC10_ObstacleVelY(buf, 0)

/**
 * Signal ObstacleVelY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC10_ObstacleVelY(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelY raw initial value.
 */
#define START_ObstacleDataC10_ObstacleVelY 0

/**
 * Signal ObstacleVelY raw minimum value.
 */
#define MIN_ObstacleDataC10_ObstacleVelY -2047

/**
 * Signal ObstacleVelY raw maximum value.
 */
#define MAX_ObstacleDataC10_ObstacleVelY 2047

/**
 * Signal ObstacleVelY raw offset value.
 */
#define OFF_ObstacleDataC10_ObstacleVelY 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC10_Object_Accel_X Signal Object_Accel_X of Message ObstacleDataC10 (0x43d)
 *
 * The longitude acceleration of the object. Type: 10 bit, signed integer  Range: -14.97 : 14.97 [m/s2] Conversion:
 * (HEX)* 0.03 Invalid value: 200h
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC10
 * @{
 */

/**
 * Signal Object_Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC10_Object_Accel_X and \ref GET_ObstacleDataC10_Object_Accel_X instead.
 */
#define SIG_ObstacleDataC10_Object_Accel_X 0, 1, 28, 10

/**
 * Signal Object_Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC10_Object_Accel_X or \ref INIT_ObstacleDataC10 instead.
 */
#define SETUP_ObstacleDataC10_Object_Accel_X 0, 1, 28, 10, 0

/**
 * Get signal Object_Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC10_Object_Accel_X(buf)                                                                        \
    (0 | (uint16_t)(-(uint16_t)((buf[4] >> 5) & 0x01) << 10) | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x3f) << 4))

/**
 * Set signal Object_Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC10_Object_Accel_X(buf, val)                                                                   \
    {                                                                                                                  \
        buf[3] &= ~(0x0f << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4;                                                                 \
        buf[4] &= ~(0x3f << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0;                                                       \
    }

/**
 * Set signal Object_Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC10_Object_Accel_X(buf) SET_ObstacleDataC10_Object_Accel_X(buf, 0)

/**
 * Signal Object_Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC10_Object_Accel_X(x, fmt) ((x)*fmt * 3 / 100)

/**
 * Signal Object_Accel_X raw initial value.
 */
#define START_ObstacleDataC10_Object_Accel_X 0

/**
 * Signal Object_Accel_X raw minimum value.
 */
#define MIN_ObstacleDataC10_Object_Accel_X -499

/**
 * Signal Object_Accel_X raw maximum value.
 */
#define MAX_ObstacleDataC10_Object_Accel_X 499

/**
 * Signal Object_Accel_X raw offset value.
 */
#define OFF_ObstacleDataC10_Object_Accel_X 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC10_ObstacleReplaced Signal ObstacleReplaced of Message ObstacleDataC10 (0x43d)
 *
 * Reserved
 *
 * Contains the value table \ref ENUM_ObstacleDataC10_ObstacleReplaced.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC10
 * @{
 */

/**
 * Signal ObstacleReplaced configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC10_ObstacleReplaced and \ref GET_ObstacleDataC10_ObstacleReplaced instead.
 */
#define SIG_ObstacleDataC10_ObstacleReplaced 0, 0, 38, 1

/**
 * Signal ObstacleReplaced setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC10_ObstacleReplaced or \ref INIT_ObstacleDataC10 instead.
 */
#define SETUP_ObstacleDataC10_ObstacleReplaced 0, 0, 38, 1, 0

/**
 * Get signal ObstacleReplaced from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC10_ObstacleReplaced(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x01) << 0))

/**
 * Set signal ObstacleReplaced in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC10_ObstacleReplaced(buf, val)                                                                 \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 6);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 6;                                                                 \
    }

/**
 * Set signal ObstacleReplaced in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC10_ObstacleReplaced(buf) SET_ObstacleDataC10_ObstacleReplaced(buf, 0)

/**
 * Signal ObstacleReplaced value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC10_ObstacleReplaced(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleReplaced raw initial value.
 */
#define START_ObstacleDataC10_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw minimum value.
 */
#define MIN_ObstacleDataC10_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw maximum value.
 */
#define MAX_ObstacleDataC10_ObstacleReplaced 1

/**
 * Signal ObstacleReplaced raw offset value.
 */
#define OFF_ObstacleDataC10_ObstacleReplaced 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC10_ObstacleReplaced Value Table for Signal ObstacleReplaced in Message ObstacleDataC10
 * (0x43d)
 *
 * Enum values defined for \ref SIG_ObstacleDataC10_ObstacleReplaced.
 *
 * @ingroup SIG_ObstacleDataC10_ObstacleReplaced
 */

/**
 * Value table ObstacleDataC10_ObstacleReplaced entry replaced.
 *
 * in this frame
 *
 * @ingroup ENUM_ObstacleDataC10_ObstacleReplaced
 */
#define ObstacleDataC10_ObstacleReplaced_replaced 1

/**
 * Value table ObstacleDataC10_ObstacleReplaced entry not.
 *
 * replaced in this frame
 *
 * @ingroup ENUM_ObstacleDataC10_ObstacleReplaced
 */
#define ObstacleDataC10_ObstacleReplaced_not 0

/**
 * @defgroup SIG_ObstacleDataC10_PedestrainOrientations Signal PedestrainOrientations of Message ObstacleDataC10 (0x43d)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataC10_PedestrainOrientations.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC10
 * @{
 */

/**
 * Signal PedestrainOrientations configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC10_PedestrainOrientations and \ref GET_ObstacleDataC10_PedestrainOrientations instead.
 */
#define SIG_ObstacleDataC10_PedestrainOrientations 0, 0, 39, 4

/**
 * Signal PedestrainOrientations setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC10_PedestrainOrientations or \ref INIT_ObstacleDataC10 instead.
 */
#define SETUP_ObstacleDataC10_PedestrainOrientations 0, 0, 39, 4, 0

/**
 * Get signal PedestrainOrientations from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC10_PedestrainOrientations(buf)                                                                \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x07) << 1))

/**
 * Set signal PedestrainOrientations in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC10_PedestrainOrientations(buf, val)                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal PedestrainOrientations in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC10_PedestrainOrientations(buf) SET_ObstacleDataC10_PedestrainOrientations(buf, 0)

/**
 * Signal PedestrainOrientations value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC10_PedestrainOrientations(x, fmt) ((x)*fmt)

/**
 * Signal PedestrainOrientations raw initial value.
 */
#define START_ObstacleDataC10_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw minimum value.
 */
#define MIN_ObstacleDataC10_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw maximum value.
 */
#define MAX_ObstacleDataC10_PedestrainOrientations 9

/**
 * Signal PedestrainOrientations raw offset value.
 */
#define OFF_ObstacleDataC10_PedestrainOrientations 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC10_PedestrainOrientations Value Table for Signal PedestrainOrientations in Message
 * ObstacleDataC10 (0x43d)
 *
 * Enum values defined for \ref SIG_ObstacleDataC10_PedestrainOrientations.
 *
 * @ingroup SIG_ObstacleDataC10_PedestrainOrientations
 */

/**
 * Value table ObstacleDataC10_PedestrainOrientations entry unkown.
 *
 * @ingroup ENUM_ObstacleDataC10_PedestrainOrientations
 */
#define ObstacleDataC10_PedestrainOrientations_unkown 9

/**
 * Value table ObstacleDataC10_PedestrainOrientations entry right_back.
 *
 * @ingroup ENUM_ObstacleDataC10_PedestrainOrientations
 */
#define ObstacleDataC10_PedestrainOrientations_right_back 8

/**
 * Value table ObstacleDataC10_PedestrainOrientations entry right_front.
 *
 * @ingroup ENUM_ObstacleDataC10_PedestrainOrientations
 */
#define ObstacleDataC10_PedestrainOrientations_right_front 7

/**
 * Value table ObstacleDataC10_PedestrainOrientations entry right.
 *
 * @ingroup ENUM_ObstacleDataC10_PedestrainOrientations
 */
#define ObstacleDataC10_PedestrainOrientations_right 6

/**
 * Value table ObstacleDataC10_PedestrainOrientations entry left_back.
 *
 * @ingroup ENUM_ObstacleDataC10_PedestrainOrientations
 */
#define ObstacleDataC10_PedestrainOrientations_left_back 5

/**
 * Value table ObstacleDataC10_PedestrainOrientations entry left_anterior.
 *
 * @ingroup ENUM_ObstacleDataC10_PedestrainOrientations
 */
#define ObstacleDataC10_PedestrainOrientations_left_anterior 4

/**
 * Value table ObstacleDataC10_PedestrainOrientations entry left.
 *
 * @ingroup ENUM_ObstacleDataC10_PedestrainOrientations
 */
#define ObstacleDataC10_PedestrainOrientations_left 3

/**
 * Value table ObstacleDataC10_PedestrainOrientations entry front.
 *
 * @ingroup ENUM_ObstacleDataC10_PedestrainOrientations
 */
#define ObstacleDataC10_PedestrainOrientations_front 2

/**
 * Value table ObstacleDataC10_PedestrainOrientations entry back.
 *
 * @ingroup ENUM_ObstacleDataC10_PedestrainOrientations
 */
#define ObstacleDataC10_PedestrainOrientations_back 1

/**
 * Value table ObstacleDataC10_PedestrainOrientations entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataC10_PedestrainOrientations
 */
#define ObstacleDataC10_PedestrainOrientations_unavailable 0

/**
 * @defgroup SIG_ObstacleDataC10_VehicleAngle Signal VehicleAngle of Message ObstacleDataC10 (0x43d)
 *
 * Vehicle yaw angle information
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC10
 * @{
 */

/**
 * Signal VehicleAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC10_VehicleAngle and \ref GET_ObstacleDataC10_VehicleAngle instead.
 */
#define SIG_ObstacleDataC10_VehicleAngle 0, 1, 43, 16

/**
 * Signal VehicleAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC10_VehicleAngle or \ref INIT_ObstacleDataC10 instead.
 */
#define SETUP_ObstacleDataC10_VehicleAngle 0, 1, 43, 16, 0

/**
 * Get signal VehicleAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC10_VehicleAngle(buf)                                                                          \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) |       \
     (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x07) << 13))

/**
 * Set signal VehicleAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC10_VehicleAngle(buf, val)                                                                     \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
        buf[7] &= ~(0x07 << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x07) << 0;                                                      \
    }

/**
 * Set signal VehicleAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC10_VehicleAngle(buf) SET_ObstacleDataC10_VehicleAngle(buf, 0)

/**
 * Signal VehicleAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC10_VehicleAngle(x, fmt) ((x)*fmt / 100)

/**
 * Signal VehicleAngle raw initial value.
 */
#define START_ObstacleDataC10_VehicleAngle 0

/**
 * Signal VehicleAngle raw minimum value.
 */
#define MIN_ObstacleDataC10_VehicleAngle -32768

/**
 * Signal VehicleAngle raw maximum value.
 */
#define MAX_ObstacleDataC10_VehicleAngle 32767

/**
 * Signal VehicleAngle raw offset value.
 */
#define OFF_ObstacleDataC10_VehicleAngle 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC10_reserved_C Signal reserved_C of Message ObstacleDataC10 (0x43d)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC10
 * @{
 */

/**
 * Signal reserved_C configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC10_reserved_C and \ref GET_ObstacleDataC10_reserved_C instead.
 */
#define SIG_ObstacleDataC10_reserved_C 0, 0, 59, 5

/**
 * Signal reserved_C setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC10_reserved_C or \ref INIT_ObstacleDataC10 instead.
 */
#define SETUP_ObstacleDataC10_reserved_C 0, 0, 59, 5, 0

/**
 * Get signal reserved_C from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC10_reserved_C(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0))

/**
 * Set signal reserved_C in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC10_reserved_C(buf, val)                                                                       \
    {                                                                                                                  \
        buf[7] &= ~(0x1f << 3);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
    }

/**
 * Set signal reserved_C in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC10_reserved_C(buf) SET_ObstacleDataC10_reserved_C(buf, 0)

/**
 * Signal reserved_C value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC10_reserved_C(x, fmt) ((x)*fmt)

/**
 * Signal reserved_C raw initial value.
 */
#define START_ObstacleDataC10_reserved_C 0

/**
 * Signal reserved_C raw minimum value.
 */
#define MIN_ObstacleDataC10_reserved_C 0

/**
 * Signal reserved_C raw maximum value.
 */
#define MAX_ObstacleDataC10_reserved_C 0

/**
 * Signal reserved_C raw offset value.
 */
#define OFF_ObstacleDataC10_reserved_C 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC9_ObstacleAngleRate Signal ObstacleAngleRate of Message ObstacleDataC9 (0x43a)
 *
 * Reserved
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC9
 * @{
 */

/**
 * Signal ObstacleAngleRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC9_ObstacleAngleRate and \ref GET_ObstacleDataC9_ObstacleAngleRate instead.
 */
#define SIG_ObstacleDataC9_ObstacleAngleRate 0, 1, 0, 16

/**
 * Signal ObstacleAngleRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC9_ObstacleAngleRate or \ref INIT_ObstacleDataC9 instead.
 */
#define SETUP_ObstacleDataC9_ObstacleAngleRate 0, 1, 0, 16, 0

/**
 * Get signal ObstacleAngleRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC9_ObstacleAngleRate(buf)                                                                      \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAngleRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC9_ObstacleAngleRate(buf, val)                                                                 \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAngleRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC9_ObstacleAngleRate(buf) SET_ObstacleDataC9_ObstacleAngleRate(buf, 0)

/**
 * Signal ObstacleAngleRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC9_ObstacleAngleRate(x, fmt) ((x)*fmt / 100)

/**
 * Signal ObstacleAngleRate raw initial value.
 */
#define START_ObstacleDataC9_ObstacleAngleRate 0

/**
 * Signal ObstacleAngleRate raw minimum value.
 */
#define MIN_ObstacleDataC9_ObstacleAngleRate -32768

/**
 * Signal ObstacleAngleRate raw maximum value.
 */
#define MAX_ObstacleDataC9_ObstacleAngleRate 32767

/**
 * Signal ObstacleAngleRate raw offset value.
 */
#define OFF_ObstacleDataC9_ObstacleAngleRate 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC9_ObstacleVelY Signal ObstacleVelY of Message ObstacleDataC9 (0x43a)
 *
 * Relative lateral velocity of the object.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC9
 * @{
 */

/**
 * Signal ObstacleVelY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC9_ObstacleVelY and \ref GET_ObstacleDataC9_ObstacleVelY instead.
 */
#define SIG_ObstacleDataC9_ObstacleVelY 0, 1, 16, 12

/**
 * Signal ObstacleVelY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC9_ObstacleVelY or \ref INIT_ObstacleDataC9 instead.
 */
#define SETUP_ObstacleDataC9_ObstacleVelY 0, 1, 16, 12, 0

/**
 * Get signal ObstacleVelY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC9_ObstacleVelY(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[3] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC9_ObstacleVelY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0x0f << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC9_ObstacleVelY(buf) SET_ObstacleDataC9_ObstacleVelY(buf, 0)

/**
 * Signal ObstacleVelY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC9_ObstacleVelY(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelY raw initial value.
 */
#define START_ObstacleDataC9_ObstacleVelY 0

/**
 * Signal ObstacleVelY raw minimum value.
 */
#define MIN_ObstacleDataC9_ObstacleVelY -2047

/**
 * Signal ObstacleVelY raw maximum value.
 */
#define MAX_ObstacleDataC9_ObstacleVelY 2047

/**
 * Signal ObstacleVelY raw offset value.
 */
#define OFF_ObstacleDataC9_ObstacleVelY 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC9_Object_Accel_X Signal Object_Accel_X of Message ObstacleDataC9 (0x43a)
 *
 * The longitude acceleration of the object. Type: 10 bit, signed integer  Range: -14.97 : 14.97 [m/s2] Conversion:
 * (HEX)* 0.03 Invalid value: 200h
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC9
 * @{
 */

/**
 * Signal Object_Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC9_Object_Accel_X and \ref GET_ObstacleDataC9_Object_Accel_X instead.
 */
#define SIG_ObstacleDataC9_Object_Accel_X 0, 1, 28, 10

/**
 * Signal Object_Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC9_Object_Accel_X or \ref INIT_ObstacleDataC9 instead.
 */
#define SETUP_ObstacleDataC9_Object_Accel_X 0, 1, 28, 10, 0

/**
 * Get signal Object_Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC9_Object_Accel_X(buf)                                                                         \
    (0 | (uint16_t)(-(uint16_t)((buf[4] >> 5) & 0x01) << 10) | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x3f) << 4))

/**
 * Set signal Object_Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC9_Object_Accel_X(buf, val)                                                                    \
    {                                                                                                                  \
        buf[3] &= ~(0x0f << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4;                                                                 \
        buf[4] &= ~(0x3f << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0;                                                       \
    }

/**
 * Set signal Object_Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC9_Object_Accel_X(buf) SET_ObstacleDataC9_Object_Accel_X(buf, 0)

/**
 * Signal Object_Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC9_Object_Accel_X(x, fmt) ((x)*fmt * 3 / 100)

/**
 * Signal Object_Accel_X raw initial value.
 */
#define START_ObstacleDataC9_Object_Accel_X 0

/**
 * Signal Object_Accel_X raw minimum value.
 */
#define MIN_ObstacleDataC9_Object_Accel_X -499

/**
 * Signal Object_Accel_X raw maximum value.
 */
#define MAX_ObstacleDataC9_Object_Accel_X 499

/**
 * Signal Object_Accel_X raw offset value.
 */
#define OFF_ObstacleDataC9_Object_Accel_X 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC9_ObstacleReplaced Signal ObstacleReplaced of Message ObstacleDataC9 (0x43a)
 *
 * Reserved
 *
 * Contains the value table \ref ENUM_ObstacleDataC9_ObstacleReplaced.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC9
 * @{
 */

/**
 * Signal ObstacleReplaced configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC9_ObstacleReplaced and \ref GET_ObstacleDataC9_ObstacleReplaced instead.
 */
#define SIG_ObstacleDataC9_ObstacleReplaced 0, 0, 38, 1

/**
 * Signal ObstacleReplaced setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC9_ObstacleReplaced or \ref INIT_ObstacleDataC9 instead.
 */
#define SETUP_ObstacleDataC9_ObstacleReplaced 0, 0, 38, 1, 0

/**
 * Get signal ObstacleReplaced from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC9_ObstacleReplaced(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x01) << 0))

/**
 * Set signal ObstacleReplaced in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC9_ObstacleReplaced(buf, val)                                                                  \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 6);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 6;                                                                 \
    }

/**
 * Set signal ObstacleReplaced in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC9_ObstacleReplaced(buf) SET_ObstacleDataC9_ObstacleReplaced(buf, 0)

/**
 * Signal ObstacleReplaced value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC9_ObstacleReplaced(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleReplaced raw initial value.
 */
#define START_ObstacleDataC9_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw minimum value.
 */
#define MIN_ObstacleDataC9_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw maximum value.
 */
#define MAX_ObstacleDataC9_ObstacleReplaced 1

/**
 * Signal ObstacleReplaced raw offset value.
 */
#define OFF_ObstacleDataC9_ObstacleReplaced 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC9_ObstacleReplaced Value Table for Signal ObstacleReplaced in Message ObstacleDataC9
 * (0x43a)
 *
 * Enum values defined for \ref SIG_ObstacleDataC9_ObstacleReplaced.
 *
 * @ingroup SIG_ObstacleDataC9_ObstacleReplaced
 */

/**
 * Value table ObstacleDataC9_ObstacleReplaced entry replaced.
 *
 * in this frame
 *
 * @ingroup ENUM_ObstacleDataC9_ObstacleReplaced
 */
#define ObstacleDataC9_ObstacleReplaced_replaced 1

/**
 * Value table ObstacleDataC9_ObstacleReplaced entry not.
 *
 * replaced in this frame
 *
 * @ingroup ENUM_ObstacleDataC9_ObstacleReplaced
 */
#define ObstacleDataC9_ObstacleReplaced_not 0

/**
 * @defgroup SIG_ObstacleDataC9_PedestrainOrientations Signal PedestrainOrientations of Message ObstacleDataC9 (0x43a)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataC9_PedestrainOrientations.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC9
 * @{
 */

/**
 * Signal PedestrainOrientations configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC9_PedestrainOrientations and \ref GET_ObstacleDataC9_PedestrainOrientations instead.
 */
#define SIG_ObstacleDataC9_PedestrainOrientations 0, 0, 39, 4

/**
 * Signal PedestrainOrientations setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC9_PedestrainOrientations or \ref INIT_ObstacleDataC9 instead.
 */
#define SETUP_ObstacleDataC9_PedestrainOrientations 0, 0, 39, 4, 0

/**
 * Get signal PedestrainOrientations from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC9_PedestrainOrientations(buf)                                                                 \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x07) << 1))

/**
 * Set signal PedestrainOrientations in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC9_PedestrainOrientations(buf, val)                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal PedestrainOrientations in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC9_PedestrainOrientations(buf) SET_ObstacleDataC9_PedestrainOrientations(buf, 0)

/**
 * Signal PedestrainOrientations value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC9_PedestrainOrientations(x, fmt) ((x)*fmt)

/**
 * Signal PedestrainOrientations raw initial value.
 */
#define START_ObstacleDataC9_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw minimum value.
 */
#define MIN_ObstacleDataC9_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw maximum value.
 */
#define MAX_ObstacleDataC9_PedestrainOrientations 9

/**
 * Signal PedestrainOrientations raw offset value.
 */
#define OFF_ObstacleDataC9_PedestrainOrientations 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC9_PedestrainOrientations Value Table for Signal PedestrainOrientations in Message
 * ObstacleDataC9 (0x43a)
 *
 * Enum values defined for \ref SIG_ObstacleDataC9_PedestrainOrientations.
 *
 * @ingroup SIG_ObstacleDataC9_PedestrainOrientations
 */

/**
 * Value table ObstacleDataC9_PedestrainOrientations entry unkown.
 *
 * @ingroup ENUM_ObstacleDataC9_PedestrainOrientations
 */
#define ObstacleDataC9_PedestrainOrientations_unkown 9

/**
 * Value table ObstacleDataC9_PedestrainOrientations entry right_back.
 *
 * @ingroup ENUM_ObstacleDataC9_PedestrainOrientations
 */
#define ObstacleDataC9_PedestrainOrientations_right_back 8

/**
 * Value table ObstacleDataC9_PedestrainOrientations entry right_front.
 *
 * @ingroup ENUM_ObstacleDataC9_PedestrainOrientations
 */
#define ObstacleDataC9_PedestrainOrientations_right_front 7

/**
 * Value table ObstacleDataC9_PedestrainOrientations entry right.
 *
 * @ingroup ENUM_ObstacleDataC9_PedestrainOrientations
 */
#define ObstacleDataC9_PedestrainOrientations_right 6

/**
 * Value table ObstacleDataC9_PedestrainOrientations entry left_back.
 *
 * @ingroup ENUM_ObstacleDataC9_PedestrainOrientations
 */
#define ObstacleDataC9_PedestrainOrientations_left_back 5

/**
 * Value table ObstacleDataC9_PedestrainOrientations entry left_anterior.
 *
 * @ingroup ENUM_ObstacleDataC9_PedestrainOrientations
 */
#define ObstacleDataC9_PedestrainOrientations_left_anterior 4

/**
 * Value table ObstacleDataC9_PedestrainOrientations entry left.
 *
 * @ingroup ENUM_ObstacleDataC9_PedestrainOrientations
 */
#define ObstacleDataC9_PedestrainOrientations_left 3

/**
 * Value table ObstacleDataC9_PedestrainOrientations entry front.
 *
 * @ingroup ENUM_ObstacleDataC9_PedestrainOrientations
 */
#define ObstacleDataC9_PedestrainOrientations_front 2

/**
 * Value table ObstacleDataC9_PedestrainOrientations entry back.
 *
 * @ingroup ENUM_ObstacleDataC9_PedestrainOrientations
 */
#define ObstacleDataC9_PedestrainOrientations_back 1

/**
 * Value table ObstacleDataC9_PedestrainOrientations entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataC9_PedestrainOrientations
 */
#define ObstacleDataC9_PedestrainOrientations_unavailable 0

/**
 * @defgroup SIG_ObstacleDataC9_VehicleAngle Signal VehicleAngle of Message ObstacleDataC9 (0x43a)
 *
 * Vehicle yaw angle information
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC9
 * @{
 */

/**
 * Signal VehicleAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC9_VehicleAngle and \ref GET_ObstacleDataC9_VehicleAngle instead.
 */
#define SIG_ObstacleDataC9_VehicleAngle 0, 1, 43, 16

/**
 * Signal VehicleAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC9_VehicleAngle or \ref INIT_ObstacleDataC9 instead.
 */
#define SETUP_ObstacleDataC9_VehicleAngle 0, 1, 43, 16, 0

/**
 * Get signal VehicleAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC9_VehicleAngle(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) |       \
     (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x07) << 13))

/**
 * Set signal VehicleAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC9_VehicleAngle(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
        buf[7] &= ~(0x07 << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x07) << 0;                                                      \
    }

/**
 * Set signal VehicleAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC9_VehicleAngle(buf) SET_ObstacleDataC9_VehicleAngle(buf, 0)

/**
 * Signal VehicleAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC9_VehicleAngle(x, fmt) ((x)*fmt / 100)

/**
 * Signal VehicleAngle raw initial value.
 */
#define START_ObstacleDataC9_VehicleAngle 0

/**
 * Signal VehicleAngle raw minimum value.
 */
#define MIN_ObstacleDataC9_VehicleAngle -32768

/**
 * Signal VehicleAngle raw maximum value.
 */
#define MAX_ObstacleDataC9_VehicleAngle 32767

/**
 * Signal VehicleAngle raw offset value.
 */
#define OFF_ObstacleDataC9_VehicleAngle 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC9_reserved_C Signal reserved_C of Message ObstacleDataC9 (0x43a)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC9
 * @{
 */

/**
 * Signal reserved_C configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC9_reserved_C and \ref GET_ObstacleDataC9_reserved_C instead.
 */
#define SIG_ObstacleDataC9_reserved_C 0, 0, 59, 5

/**
 * Signal reserved_C setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC9_reserved_C or \ref INIT_ObstacleDataC9 instead.
 */
#define SETUP_ObstacleDataC9_reserved_C 0, 0, 59, 5, 0

/**
 * Get signal reserved_C from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC9_reserved_C(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0))

/**
 * Set signal reserved_C in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC9_reserved_C(buf, val)                                                                        \
    {                                                                                                                  \
        buf[7] &= ~(0x1f << 3);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
    }

/**
 * Set signal reserved_C in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC9_reserved_C(buf) SET_ObstacleDataC9_reserved_C(buf, 0)

/**
 * Signal reserved_C value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC9_reserved_C(x, fmt) ((x)*fmt)

/**
 * Signal reserved_C raw initial value.
 */
#define START_ObstacleDataC9_reserved_C 0

/**
 * Signal reserved_C raw minimum value.
 */
#define MIN_ObstacleDataC9_reserved_C 0

/**
 * Signal reserved_C raw maximum value.
 */
#define MAX_ObstacleDataC9_reserved_C 0

/**
 * Signal reserved_C raw offset value.
 */
#define OFF_ObstacleDataC9_reserved_C 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC8_ObstacleAngleRate Signal ObstacleAngleRate of Message ObstacleDataC8 (0x437)
 *
 * Reserved
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC8
 * @{
 */

/**
 * Signal ObstacleAngleRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC8_ObstacleAngleRate and \ref GET_ObstacleDataC8_ObstacleAngleRate instead.
 */
#define SIG_ObstacleDataC8_ObstacleAngleRate 0, 1, 0, 16

/**
 * Signal ObstacleAngleRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC8_ObstacleAngleRate or \ref INIT_ObstacleDataC8 instead.
 */
#define SETUP_ObstacleDataC8_ObstacleAngleRate 0, 1, 0, 16, 0

/**
 * Get signal ObstacleAngleRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC8_ObstacleAngleRate(buf)                                                                      \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAngleRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC8_ObstacleAngleRate(buf, val)                                                                 \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAngleRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC8_ObstacleAngleRate(buf) SET_ObstacleDataC8_ObstacleAngleRate(buf, 0)

/**
 * Signal ObstacleAngleRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC8_ObstacleAngleRate(x, fmt) ((x)*fmt / 100)

/**
 * Signal ObstacleAngleRate raw initial value.
 */
#define START_ObstacleDataC8_ObstacleAngleRate 0

/**
 * Signal ObstacleAngleRate raw minimum value.
 */
#define MIN_ObstacleDataC8_ObstacleAngleRate -32768

/**
 * Signal ObstacleAngleRate raw maximum value.
 */
#define MAX_ObstacleDataC8_ObstacleAngleRate 32767

/**
 * Signal ObstacleAngleRate raw offset value.
 */
#define OFF_ObstacleDataC8_ObstacleAngleRate 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC8_ObstacleVelY Signal ObstacleVelY of Message ObstacleDataC8 (0x437)
 *
 * Relative lateral velocity of the object.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC8
 * @{
 */

/**
 * Signal ObstacleVelY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC8_ObstacleVelY and \ref GET_ObstacleDataC8_ObstacleVelY instead.
 */
#define SIG_ObstacleDataC8_ObstacleVelY 0, 1, 16, 12

/**
 * Signal ObstacleVelY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC8_ObstacleVelY or \ref INIT_ObstacleDataC8 instead.
 */
#define SETUP_ObstacleDataC8_ObstacleVelY 0, 1, 16, 12, 0

/**
 * Get signal ObstacleVelY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC8_ObstacleVelY(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[3] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC8_ObstacleVelY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0x0f << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC8_ObstacleVelY(buf) SET_ObstacleDataC8_ObstacleVelY(buf, 0)

/**
 * Signal ObstacleVelY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC8_ObstacleVelY(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelY raw initial value.
 */
#define START_ObstacleDataC8_ObstacleVelY 0

/**
 * Signal ObstacleVelY raw minimum value.
 */
#define MIN_ObstacleDataC8_ObstacleVelY -2047

/**
 * Signal ObstacleVelY raw maximum value.
 */
#define MAX_ObstacleDataC8_ObstacleVelY 2047

/**
 * Signal ObstacleVelY raw offset value.
 */
#define OFF_ObstacleDataC8_ObstacleVelY 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC8_Object_Accel_X Signal Object_Accel_X of Message ObstacleDataC8 (0x437)
 *
 * The longitude acceleration of the object. Type: 10 bit, signed integer  Range: -14.97 : 14.97 [m/s2] Conversion:
 * (HEX)* 0.03 Invalid value: 200h
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC8
 * @{
 */

/**
 * Signal Object_Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC8_Object_Accel_X and \ref GET_ObstacleDataC8_Object_Accel_X instead.
 */
#define SIG_ObstacleDataC8_Object_Accel_X 0, 1, 28, 10

/**
 * Signal Object_Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC8_Object_Accel_X or \ref INIT_ObstacleDataC8 instead.
 */
#define SETUP_ObstacleDataC8_Object_Accel_X 0, 1, 28, 10, 0

/**
 * Get signal Object_Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC8_Object_Accel_X(buf)                                                                         \
    (0 | (uint16_t)(-(uint16_t)((buf[4] >> 5) & 0x01) << 10) | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x3f) << 4))

/**
 * Set signal Object_Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC8_Object_Accel_X(buf, val)                                                                    \
    {                                                                                                                  \
        buf[3] &= ~(0x0f << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4;                                                                 \
        buf[4] &= ~(0x3f << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0;                                                       \
    }

/**
 * Set signal Object_Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC8_Object_Accel_X(buf) SET_ObstacleDataC8_Object_Accel_X(buf, 0)

/**
 * Signal Object_Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC8_Object_Accel_X(x, fmt) ((x)*fmt * 3 / 100)

/**
 * Signal Object_Accel_X raw initial value.
 */
#define START_ObstacleDataC8_Object_Accel_X 0

/**
 * Signal Object_Accel_X raw minimum value.
 */
#define MIN_ObstacleDataC8_Object_Accel_X -499

/**
 * Signal Object_Accel_X raw maximum value.
 */
#define MAX_ObstacleDataC8_Object_Accel_X 499

/**
 * Signal Object_Accel_X raw offset value.
 */
#define OFF_ObstacleDataC8_Object_Accel_X 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC8_ObstacleReplaced Signal ObstacleReplaced of Message ObstacleDataC8 (0x437)
 *
 * Reserved
 *
 * Contains the value table \ref ENUM_ObstacleDataC8_ObstacleReplaced.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC8
 * @{
 */

/**
 * Signal ObstacleReplaced configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC8_ObstacleReplaced and \ref GET_ObstacleDataC8_ObstacleReplaced instead.
 */
#define SIG_ObstacleDataC8_ObstacleReplaced 0, 0, 38, 1

/**
 * Signal ObstacleReplaced setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC8_ObstacleReplaced or \ref INIT_ObstacleDataC8 instead.
 */
#define SETUP_ObstacleDataC8_ObstacleReplaced 0, 0, 38, 1, 0

/**
 * Get signal ObstacleReplaced from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC8_ObstacleReplaced(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x01) << 0))

/**
 * Set signal ObstacleReplaced in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC8_ObstacleReplaced(buf, val)                                                                  \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 6);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 6;                                                                 \
    }

/**
 * Set signal ObstacleReplaced in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC8_ObstacleReplaced(buf) SET_ObstacleDataC8_ObstacleReplaced(buf, 0)

/**
 * Signal ObstacleReplaced value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC8_ObstacleReplaced(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleReplaced raw initial value.
 */
#define START_ObstacleDataC8_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw minimum value.
 */
#define MIN_ObstacleDataC8_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw maximum value.
 */
#define MAX_ObstacleDataC8_ObstacleReplaced 1

/**
 * Signal ObstacleReplaced raw offset value.
 */
#define OFF_ObstacleDataC8_ObstacleReplaced 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC8_ObstacleReplaced Value Table for Signal ObstacleReplaced in Message ObstacleDataC8
 * (0x437)
 *
 * Enum values defined for \ref SIG_ObstacleDataC8_ObstacleReplaced.
 *
 * @ingroup SIG_ObstacleDataC8_ObstacleReplaced
 */

/**
 * Value table ObstacleDataC8_ObstacleReplaced entry replaced.
 *
 * in this frame
 *
 * @ingroup ENUM_ObstacleDataC8_ObstacleReplaced
 */
#define ObstacleDataC8_ObstacleReplaced_replaced 1

/**
 * Value table ObstacleDataC8_ObstacleReplaced entry not.
 *
 * replaced in this frame
 *
 * @ingroup ENUM_ObstacleDataC8_ObstacleReplaced
 */
#define ObstacleDataC8_ObstacleReplaced_not 0

/**
 * @defgroup SIG_ObstacleDataC8_PedestrainOrientations Signal PedestrainOrientations of Message ObstacleDataC8 (0x437)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataC8_PedestrainOrientations.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC8
 * @{
 */

/**
 * Signal PedestrainOrientations configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC8_PedestrainOrientations and \ref GET_ObstacleDataC8_PedestrainOrientations instead.
 */
#define SIG_ObstacleDataC8_PedestrainOrientations 0, 0, 39, 4

/**
 * Signal PedestrainOrientations setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC8_PedestrainOrientations or \ref INIT_ObstacleDataC8 instead.
 */
#define SETUP_ObstacleDataC8_PedestrainOrientations 0, 0, 39, 4, 0

/**
 * Get signal PedestrainOrientations from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC8_PedestrainOrientations(buf)                                                                 \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x07) << 1))

/**
 * Set signal PedestrainOrientations in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC8_PedestrainOrientations(buf, val)                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal PedestrainOrientations in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC8_PedestrainOrientations(buf) SET_ObstacleDataC8_PedestrainOrientations(buf, 0)

/**
 * Signal PedestrainOrientations value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC8_PedestrainOrientations(x, fmt) ((x)*fmt)

/**
 * Signal PedestrainOrientations raw initial value.
 */
#define START_ObstacleDataC8_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw minimum value.
 */
#define MIN_ObstacleDataC8_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw maximum value.
 */
#define MAX_ObstacleDataC8_PedestrainOrientations 9

/**
 * Signal PedestrainOrientations raw offset value.
 */
#define OFF_ObstacleDataC8_PedestrainOrientations 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC8_PedestrainOrientations Value Table for Signal PedestrainOrientations in Message
 * ObstacleDataC8 (0x437)
 *
 * Enum values defined for \ref SIG_ObstacleDataC8_PedestrainOrientations.
 *
 * @ingroup SIG_ObstacleDataC8_PedestrainOrientations
 */

/**
 * Value table ObstacleDataC8_PedestrainOrientations entry unkown.
 *
 * @ingroup ENUM_ObstacleDataC8_PedestrainOrientations
 */
#define ObstacleDataC8_PedestrainOrientations_unkown 9

/**
 * Value table ObstacleDataC8_PedestrainOrientations entry right_back.
 *
 * @ingroup ENUM_ObstacleDataC8_PedestrainOrientations
 */
#define ObstacleDataC8_PedestrainOrientations_right_back 8

/**
 * Value table ObstacleDataC8_PedestrainOrientations entry right_front.
 *
 * @ingroup ENUM_ObstacleDataC8_PedestrainOrientations
 */
#define ObstacleDataC8_PedestrainOrientations_right_front 7

/**
 * Value table ObstacleDataC8_PedestrainOrientations entry right.
 *
 * @ingroup ENUM_ObstacleDataC8_PedestrainOrientations
 */
#define ObstacleDataC8_PedestrainOrientations_right 6

/**
 * Value table ObstacleDataC8_PedestrainOrientations entry left_back.
 *
 * @ingroup ENUM_ObstacleDataC8_PedestrainOrientations
 */
#define ObstacleDataC8_PedestrainOrientations_left_back 5

/**
 * Value table ObstacleDataC8_PedestrainOrientations entry left_anterior.
 *
 * @ingroup ENUM_ObstacleDataC8_PedestrainOrientations
 */
#define ObstacleDataC8_PedestrainOrientations_left_anterior 4

/**
 * Value table ObstacleDataC8_PedestrainOrientations entry left.
 *
 * @ingroup ENUM_ObstacleDataC8_PedestrainOrientations
 */
#define ObstacleDataC8_PedestrainOrientations_left 3

/**
 * Value table ObstacleDataC8_PedestrainOrientations entry front.
 *
 * @ingroup ENUM_ObstacleDataC8_PedestrainOrientations
 */
#define ObstacleDataC8_PedestrainOrientations_front 2

/**
 * Value table ObstacleDataC8_PedestrainOrientations entry back.
 *
 * @ingroup ENUM_ObstacleDataC8_PedestrainOrientations
 */
#define ObstacleDataC8_PedestrainOrientations_back 1

/**
 * Value table ObstacleDataC8_PedestrainOrientations entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataC8_PedestrainOrientations
 */
#define ObstacleDataC8_PedestrainOrientations_unavailable 0

/**
 * @defgroup SIG_ObstacleDataC8_VehicleAngle Signal VehicleAngle of Message ObstacleDataC8 (0x437)
 *
 * Vehicle yaw angle information
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC8
 * @{
 */

/**
 * Signal VehicleAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC8_VehicleAngle and \ref GET_ObstacleDataC8_VehicleAngle instead.
 */
#define SIG_ObstacleDataC8_VehicleAngle 0, 1, 43, 16

/**
 * Signal VehicleAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC8_VehicleAngle or \ref INIT_ObstacleDataC8 instead.
 */
#define SETUP_ObstacleDataC8_VehicleAngle 0, 1, 43, 16, 0

/**
 * Get signal VehicleAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC8_VehicleAngle(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) |       \
     (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x07) << 13))

/**
 * Set signal VehicleAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC8_VehicleAngle(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
        buf[7] &= ~(0x07 << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x07) << 0;                                                      \
    }

/**
 * Set signal VehicleAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC8_VehicleAngle(buf) SET_ObstacleDataC8_VehicleAngle(buf, 0)

/**
 * Signal VehicleAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC8_VehicleAngle(x, fmt) ((x)*fmt / 100)

/**
 * Signal VehicleAngle raw initial value.
 */
#define START_ObstacleDataC8_VehicleAngle 0

/**
 * Signal VehicleAngle raw minimum value.
 */
#define MIN_ObstacleDataC8_VehicleAngle -32768

/**
 * Signal VehicleAngle raw maximum value.
 */
#define MAX_ObstacleDataC8_VehicleAngle 32767

/**
 * Signal VehicleAngle raw offset value.
 */
#define OFF_ObstacleDataC8_VehicleAngle 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC8_reserved_C Signal reserved_C of Message ObstacleDataC8 (0x437)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC8
 * @{
 */

/**
 * Signal reserved_C configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC8_reserved_C and \ref GET_ObstacleDataC8_reserved_C instead.
 */
#define SIG_ObstacleDataC8_reserved_C 0, 0, 59, 5

/**
 * Signal reserved_C setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC8_reserved_C or \ref INIT_ObstacleDataC8 instead.
 */
#define SETUP_ObstacleDataC8_reserved_C 0, 0, 59, 5, 0

/**
 * Get signal reserved_C from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC8_reserved_C(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0))

/**
 * Set signal reserved_C in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC8_reserved_C(buf, val)                                                                        \
    {                                                                                                                  \
        buf[7] &= ~(0x1f << 3);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
    }

/**
 * Set signal reserved_C in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC8_reserved_C(buf) SET_ObstacleDataC8_reserved_C(buf, 0)

/**
 * Signal reserved_C value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC8_reserved_C(x, fmt) ((x)*fmt)

/**
 * Signal reserved_C raw initial value.
 */
#define START_ObstacleDataC8_reserved_C 0

/**
 * Signal reserved_C raw minimum value.
 */
#define MIN_ObstacleDataC8_reserved_C 0

/**
 * Signal reserved_C raw maximum value.
 */
#define MAX_ObstacleDataC8_reserved_C 0

/**
 * Signal reserved_C raw offset value.
 */
#define OFF_ObstacleDataC8_reserved_C 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC7_ObstacleAngleRate Signal ObstacleAngleRate of Message ObstacleDataC7 (0x434)
 *
 * Reserved
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC7
 * @{
 */

/**
 * Signal ObstacleAngleRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC7_ObstacleAngleRate and \ref GET_ObstacleDataC7_ObstacleAngleRate instead.
 */
#define SIG_ObstacleDataC7_ObstacleAngleRate 0, 1, 0, 16

/**
 * Signal ObstacleAngleRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC7_ObstacleAngleRate or \ref INIT_ObstacleDataC7 instead.
 */
#define SETUP_ObstacleDataC7_ObstacleAngleRate 0, 1, 0, 16, 0

/**
 * Get signal ObstacleAngleRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC7_ObstacleAngleRate(buf)                                                                      \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAngleRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC7_ObstacleAngleRate(buf, val)                                                                 \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAngleRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC7_ObstacleAngleRate(buf) SET_ObstacleDataC7_ObstacleAngleRate(buf, 0)

/**
 * Signal ObstacleAngleRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC7_ObstacleAngleRate(x, fmt) ((x)*fmt / 100)

/**
 * Signal ObstacleAngleRate raw initial value.
 */
#define START_ObstacleDataC7_ObstacleAngleRate 0

/**
 * Signal ObstacleAngleRate raw minimum value.
 */
#define MIN_ObstacleDataC7_ObstacleAngleRate -32768

/**
 * Signal ObstacleAngleRate raw maximum value.
 */
#define MAX_ObstacleDataC7_ObstacleAngleRate 32767

/**
 * Signal ObstacleAngleRate raw offset value.
 */
#define OFF_ObstacleDataC7_ObstacleAngleRate 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC7_ObstacleVelY Signal ObstacleVelY of Message ObstacleDataC7 (0x434)
 *
 * Relative lateral velocity of the object.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC7
 * @{
 */

/**
 * Signal ObstacleVelY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC7_ObstacleVelY and \ref GET_ObstacleDataC7_ObstacleVelY instead.
 */
#define SIG_ObstacleDataC7_ObstacleVelY 0, 1, 16, 12

/**
 * Signal ObstacleVelY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC7_ObstacleVelY or \ref INIT_ObstacleDataC7 instead.
 */
#define SETUP_ObstacleDataC7_ObstacleVelY 0, 1, 16, 12, 0

/**
 * Get signal ObstacleVelY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC7_ObstacleVelY(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[3] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC7_ObstacleVelY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0x0f << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC7_ObstacleVelY(buf) SET_ObstacleDataC7_ObstacleVelY(buf, 0)

/**
 * Signal ObstacleVelY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC7_ObstacleVelY(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelY raw initial value.
 */
#define START_ObstacleDataC7_ObstacleVelY 0

/**
 * Signal ObstacleVelY raw minimum value.
 */
#define MIN_ObstacleDataC7_ObstacleVelY -2047

/**
 * Signal ObstacleVelY raw maximum value.
 */
#define MAX_ObstacleDataC7_ObstacleVelY 2047

/**
 * Signal ObstacleVelY raw offset value.
 */
#define OFF_ObstacleDataC7_ObstacleVelY 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC7_Object_Accel_X Signal Object_Accel_X of Message ObstacleDataC7 (0x434)
 *
 * The longitude acceleration of the object. Type: 10 bit, signed integer  Range: -14.97 : 14.97 [m/s2] Conversion:
 * (HEX)* 0.03 Invalid value: 200h
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC7
 * @{
 */

/**
 * Signal Object_Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC7_Object_Accel_X and \ref GET_ObstacleDataC7_Object_Accel_X instead.
 */
#define SIG_ObstacleDataC7_Object_Accel_X 0, 1, 28, 10

/**
 * Signal Object_Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC7_Object_Accel_X or \ref INIT_ObstacleDataC7 instead.
 */
#define SETUP_ObstacleDataC7_Object_Accel_X 0, 1, 28, 10, 0

/**
 * Get signal Object_Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC7_Object_Accel_X(buf)                                                                         \
    (0 | (uint16_t)(-(uint16_t)((buf[4] >> 5) & 0x01) << 10) | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x3f) << 4))

/**
 * Set signal Object_Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC7_Object_Accel_X(buf, val)                                                                    \
    {                                                                                                                  \
        buf[3] &= ~(0x0f << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4;                                                                 \
        buf[4] &= ~(0x3f << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0;                                                       \
    }

/**
 * Set signal Object_Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC7_Object_Accel_X(buf) SET_ObstacleDataC7_Object_Accel_X(buf, 0)

/**
 * Signal Object_Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC7_Object_Accel_X(x, fmt) ((x)*fmt * 3 / 100)

/**
 * Signal Object_Accel_X raw initial value.
 */
#define START_ObstacleDataC7_Object_Accel_X 0

/**
 * Signal Object_Accel_X raw minimum value.
 */
#define MIN_ObstacleDataC7_Object_Accel_X -499

/**
 * Signal Object_Accel_X raw maximum value.
 */
#define MAX_ObstacleDataC7_Object_Accel_X 499

/**
 * Signal Object_Accel_X raw offset value.
 */
#define OFF_ObstacleDataC7_Object_Accel_X 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC7_ObstacleReplaced Signal ObstacleReplaced of Message ObstacleDataC7 (0x434)
 *
 * Reserved
 *
 * Contains the value table \ref ENUM_ObstacleDataC7_ObstacleReplaced.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC7
 * @{
 */

/**
 * Signal ObstacleReplaced configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC7_ObstacleReplaced and \ref GET_ObstacleDataC7_ObstacleReplaced instead.
 */
#define SIG_ObstacleDataC7_ObstacleReplaced 0, 0, 38, 1

/**
 * Signal ObstacleReplaced setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC7_ObstacleReplaced or \ref INIT_ObstacleDataC7 instead.
 */
#define SETUP_ObstacleDataC7_ObstacleReplaced 0, 0, 38, 1, 0

/**
 * Get signal ObstacleReplaced from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC7_ObstacleReplaced(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x01) << 0))

/**
 * Set signal ObstacleReplaced in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC7_ObstacleReplaced(buf, val)                                                                  \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 6);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 6;                                                                 \
    }

/**
 * Set signal ObstacleReplaced in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC7_ObstacleReplaced(buf) SET_ObstacleDataC7_ObstacleReplaced(buf, 0)

/**
 * Signal ObstacleReplaced value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC7_ObstacleReplaced(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleReplaced raw initial value.
 */
#define START_ObstacleDataC7_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw minimum value.
 */
#define MIN_ObstacleDataC7_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw maximum value.
 */
#define MAX_ObstacleDataC7_ObstacleReplaced 1

/**
 * Signal ObstacleReplaced raw offset value.
 */
#define OFF_ObstacleDataC7_ObstacleReplaced 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC7_ObstacleReplaced Value Table for Signal ObstacleReplaced in Message ObstacleDataC7
 * (0x434)
 *
 * Enum values defined for \ref SIG_ObstacleDataC7_ObstacleReplaced.
 *
 * @ingroup SIG_ObstacleDataC7_ObstacleReplaced
 */

/**
 * Value table ObstacleDataC7_ObstacleReplaced entry replaced.
 *
 * in this frame
 *
 * @ingroup ENUM_ObstacleDataC7_ObstacleReplaced
 */
#define ObstacleDataC7_ObstacleReplaced_replaced 1

/**
 * Value table ObstacleDataC7_ObstacleReplaced entry not.
 *
 * replaced in this frame
 *
 * @ingroup ENUM_ObstacleDataC7_ObstacleReplaced
 */
#define ObstacleDataC7_ObstacleReplaced_not 0

/**
 * @defgroup SIG_ObstacleDataC7_PedestrainOrientations Signal PedestrainOrientations of Message ObstacleDataC7 (0x434)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataC7_PedestrainOrientations.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC7
 * @{
 */

/**
 * Signal PedestrainOrientations configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC7_PedestrainOrientations and \ref GET_ObstacleDataC7_PedestrainOrientations instead.
 */
#define SIG_ObstacleDataC7_PedestrainOrientations 0, 0, 39, 4

/**
 * Signal PedestrainOrientations setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC7_PedestrainOrientations or \ref INIT_ObstacleDataC7 instead.
 */
#define SETUP_ObstacleDataC7_PedestrainOrientations 0, 0, 39, 4, 0

/**
 * Get signal PedestrainOrientations from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC7_PedestrainOrientations(buf)                                                                 \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x07) << 1))

/**
 * Set signal PedestrainOrientations in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC7_PedestrainOrientations(buf, val)                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal PedestrainOrientations in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC7_PedestrainOrientations(buf) SET_ObstacleDataC7_PedestrainOrientations(buf, 0)

/**
 * Signal PedestrainOrientations value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC7_PedestrainOrientations(x, fmt) ((x)*fmt)

/**
 * Signal PedestrainOrientations raw initial value.
 */
#define START_ObstacleDataC7_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw minimum value.
 */
#define MIN_ObstacleDataC7_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw maximum value.
 */
#define MAX_ObstacleDataC7_PedestrainOrientations 9

/**
 * Signal PedestrainOrientations raw offset value.
 */
#define OFF_ObstacleDataC7_PedestrainOrientations 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC7_PedestrainOrientations Value Table for Signal PedestrainOrientations in Message
 * ObstacleDataC7 (0x434)
 *
 * Enum values defined for \ref SIG_ObstacleDataC7_PedestrainOrientations.
 *
 * @ingroup SIG_ObstacleDataC7_PedestrainOrientations
 */

/**
 * Value table ObstacleDataC7_PedestrainOrientations entry unkown.
 *
 * @ingroup ENUM_ObstacleDataC7_PedestrainOrientations
 */
#define ObstacleDataC7_PedestrainOrientations_unkown 9

/**
 * Value table ObstacleDataC7_PedestrainOrientations entry right_back.
 *
 * @ingroup ENUM_ObstacleDataC7_PedestrainOrientations
 */
#define ObstacleDataC7_PedestrainOrientations_right_back 8

/**
 * Value table ObstacleDataC7_PedestrainOrientations entry right_front.
 *
 * @ingroup ENUM_ObstacleDataC7_PedestrainOrientations
 */
#define ObstacleDataC7_PedestrainOrientations_right_front 7

/**
 * Value table ObstacleDataC7_PedestrainOrientations entry right.
 *
 * @ingroup ENUM_ObstacleDataC7_PedestrainOrientations
 */
#define ObstacleDataC7_PedestrainOrientations_right 6

/**
 * Value table ObstacleDataC7_PedestrainOrientations entry left_back.
 *
 * @ingroup ENUM_ObstacleDataC7_PedestrainOrientations
 */
#define ObstacleDataC7_PedestrainOrientations_left_back 5

/**
 * Value table ObstacleDataC7_PedestrainOrientations entry left_anterior.
 *
 * @ingroup ENUM_ObstacleDataC7_PedestrainOrientations
 */
#define ObstacleDataC7_PedestrainOrientations_left_anterior 4

/**
 * Value table ObstacleDataC7_PedestrainOrientations entry left.
 *
 * @ingroup ENUM_ObstacleDataC7_PedestrainOrientations
 */
#define ObstacleDataC7_PedestrainOrientations_left 3

/**
 * Value table ObstacleDataC7_PedestrainOrientations entry front.
 *
 * @ingroup ENUM_ObstacleDataC7_PedestrainOrientations
 */
#define ObstacleDataC7_PedestrainOrientations_front 2

/**
 * Value table ObstacleDataC7_PedestrainOrientations entry back.
 *
 * @ingroup ENUM_ObstacleDataC7_PedestrainOrientations
 */
#define ObstacleDataC7_PedestrainOrientations_back 1

/**
 * Value table ObstacleDataC7_PedestrainOrientations entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataC7_PedestrainOrientations
 */
#define ObstacleDataC7_PedestrainOrientations_unavailable 0

/**
 * @defgroup SIG_ObstacleDataC7_VehicleAngle Signal VehicleAngle of Message ObstacleDataC7 (0x434)
 *
 * Vehicle yaw angle information
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC7
 * @{
 */

/**
 * Signal VehicleAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC7_VehicleAngle and \ref GET_ObstacleDataC7_VehicleAngle instead.
 */
#define SIG_ObstacleDataC7_VehicleAngle 0, 1, 43, 16

/**
 * Signal VehicleAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC7_VehicleAngle or \ref INIT_ObstacleDataC7 instead.
 */
#define SETUP_ObstacleDataC7_VehicleAngle 0, 1, 43, 16, 0

/**
 * Get signal VehicleAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC7_VehicleAngle(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) |       \
     (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x07) << 13))

/**
 * Set signal VehicleAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC7_VehicleAngle(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
        buf[7] &= ~(0x07 << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x07) << 0;                                                      \
    }

/**
 * Set signal VehicleAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC7_VehicleAngle(buf) SET_ObstacleDataC7_VehicleAngle(buf, 0)

/**
 * Signal VehicleAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC7_VehicleAngle(x, fmt) ((x)*fmt / 100)

/**
 * Signal VehicleAngle raw initial value.
 */
#define START_ObstacleDataC7_VehicleAngle 0

/**
 * Signal VehicleAngle raw minimum value.
 */
#define MIN_ObstacleDataC7_VehicleAngle -32768

/**
 * Signal VehicleAngle raw maximum value.
 */
#define MAX_ObstacleDataC7_VehicleAngle 32767

/**
 * Signal VehicleAngle raw offset value.
 */
#define OFF_ObstacleDataC7_VehicleAngle 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC7_reserved_C Signal reserved_C of Message ObstacleDataC7 (0x434)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC7
 * @{
 */

/**
 * Signal reserved_C configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC7_reserved_C and \ref GET_ObstacleDataC7_reserved_C instead.
 */
#define SIG_ObstacleDataC7_reserved_C 0, 0, 59, 5

/**
 * Signal reserved_C setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC7_reserved_C or \ref INIT_ObstacleDataC7 instead.
 */
#define SETUP_ObstacleDataC7_reserved_C 0, 0, 59, 5, 0

/**
 * Get signal reserved_C from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC7_reserved_C(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0))

/**
 * Set signal reserved_C in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC7_reserved_C(buf, val)                                                                        \
    {                                                                                                                  \
        buf[7] &= ~(0x1f << 3);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
    }

/**
 * Set signal reserved_C in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC7_reserved_C(buf) SET_ObstacleDataC7_reserved_C(buf, 0)

/**
 * Signal reserved_C value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC7_reserved_C(x, fmt) ((x)*fmt)

/**
 * Signal reserved_C raw initial value.
 */
#define START_ObstacleDataC7_reserved_C 0

/**
 * Signal reserved_C raw minimum value.
 */
#define MIN_ObstacleDataC7_reserved_C 0

/**
 * Signal reserved_C raw maximum value.
 */
#define MAX_ObstacleDataC7_reserved_C 0

/**
 * Signal reserved_C raw offset value.
 */
#define OFF_ObstacleDataC7_reserved_C 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC6_ObstacleAngleRate Signal ObstacleAngleRate of Message ObstacleDataC6 (0x431)
 *
 * Reserved
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC6
 * @{
 */

/**
 * Signal ObstacleAngleRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC6_ObstacleAngleRate and \ref GET_ObstacleDataC6_ObstacleAngleRate instead.
 */
#define SIG_ObstacleDataC6_ObstacleAngleRate 0, 1, 0, 16

/**
 * Signal ObstacleAngleRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC6_ObstacleAngleRate or \ref INIT_ObstacleDataC6 instead.
 */
#define SETUP_ObstacleDataC6_ObstacleAngleRate 0, 1, 0, 16, 0

/**
 * Get signal ObstacleAngleRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC6_ObstacleAngleRate(buf)                                                                      \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAngleRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC6_ObstacleAngleRate(buf, val)                                                                 \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAngleRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC6_ObstacleAngleRate(buf) SET_ObstacleDataC6_ObstacleAngleRate(buf, 0)

/**
 * Signal ObstacleAngleRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC6_ObstacleAngleRate(x, fmt) ((x)*fmt / 100)

/**
 * Signal ObstacleAngleRate raw initial value.
 */
#define START_ObstacleDataC6_ObstacleAngleRate 0

/**
 * Signal ObstacleAngleRate raw minimum value.
 */
#define MIN_ObstacleDataC6_ObstacleAngleRate -32768

/**
 * Signal ObstacleAngleRate raw maximum value.
 */
#define MAX_ObstacleDataC6_ObstacleAngleRate 32767

/**
 * Signal ObstacleAngleRate raw offset value.
 */
#define OFF_ObstacleDataC6_ObstacleAngleRate 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC6_ObstacleVelY Signal ObstacleVelY of Message ObstacleDataC6 (0x431)
 *
 * Relative lateral velocity of the object.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC6
 * @{
 */

/**
 * Signal ObstacleVelY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC6_ObstacleVelY and \ref GET_ObstacleDataC6_ObstacleVelY instead.
 */
#define SIG_ObstacleDataC6_ObstacleVelY 0, 1, 16, 12

/**
 * Signal ObstacleVelY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC6_ObstacleVelY or \ref INIT_ObstacleDataC6 instead.
 */
#define SETUP_ObstacleDataC6_ObstacleVelY 0, 1, 16, 12, 0

/**
 * Get signal ObstacleVelY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC6_ObstacleVelY(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[3] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC6_ObstacleVelY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0x0f << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC6_ObstacleVelY(buf) SET_ObstacleDataC6_ObstacleVelY(buf, 0)

/**
 * Signal ObstacleVelY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC6_ObstacleVelY(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelY raw initial value.
 */
#define START_ObstacleDataC6_ObstacleVelY 0

/**
 * Signal ObstacleVelY raw minimum value.
 */
#define MIN_ObstacleDataC6_ObstacleVelY -2047

/**
 * Signal ObstacleVelY raw maximum value.
 */
#define MAX_ObstacleDataC6_ObstacleVelY 2047

/**
 * Signal ObstacleVelY raw offset value.
 */
#define OFF_ObstacleDataC6_ObstacleVelY 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC6_Object_Accel_X Signal Object_Accel_X of Message ObstacleDataC6 (0x431)
 *
 * The longitude acceleration of the object. Type: 10 bit, signed integer  Range: -14.97 : 14.97 [m/s2] Conversion:
 * (HEX)* 0.03 Invalid value: 200h
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC6
 * @{
 */

/**
 * Signal Object_Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC6_Object_Accel_X and \ref GET_ObstacleDataC6_Object_Accel_X instead.
 */
#define SIG_ObstacleDataC6_Object_Accel_X 0, 1, 28, 10

/**
 * Signal Object_Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC6_Object_Accel_X or \ref INIT_ObstacleDataC6 instead.
 */
#define SETUP_ObstacleDataC6_Object_Accel_X 0, 1, 28, 10, 0

/**
 * Get signal Object_Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC6_Object_Accel_X(buf)                                                                         \
    (0 | (uint16_t)(-(uint16_t)((buf[4] >> 5) & 0x01) << 10) | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x3f) << 4))

/**
 * Set signal Object_Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC6_Object_Accel_X(buf, val)                                                                    \
    {                                                                                                                  \
        buf[3] &= ~(0x0f << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4;                                                                 \
        buf[4] &= ~(0x3f << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0;                                                       \
    }

/**
 * Set signal Object_Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC6_Object_Accel_X(buf) SET_ObstacleDataC6_Object_Accel_X(buf, 0)

/**
 * Signal Object_Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC6_Object_Accel_X(x, fmt) ((x)*fmt * 3 / 100)

/**
 * Signal Object_Accel_X raw initial value.
 */
#define START_ObstacleDataC6_Object_Accel_X 0

/**
 * Signal Object_Accel_X raw minimum value.
 */
#define MIN_ObstacleDataC6_Object_Accel_X -499

/**
 * Signal Object_Accel_X raw maximum value.
 */
#define MAX_ObstacleDataC6_Object_Accel_X 499

/**
 * Signal Object_Accel_X raw offset value.
 */
#define OFF_ObstacleDataC6_Object_Accel_X 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC6_ObstacleReplaced Signal ObstacleReplaced of Message ObstacleDataC6 (0x431)
 *
 * Reserved
 *
 * Contains the value table \ref ENUM_ObstacleDataC6_ObstacleReplaced.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC6
 * @{
 */

/**
 * Signal ObstacleReplaced configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC6_ObstacleReplaced and \ref GET_ObstacleDataC6_ObstacleReplaced instead.
 */
#define SIG_ObstacleDataC6_ObstacleReplaced 0, 0, 38, 1

/**
 * Signal ObstacleReplaced setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC6_ObstacleReplaced or \ref INIT_ObstacleDataC6 instead.
 */
#define SETUP_ObstacleDataC6_ObstacleReplaced 0, 0, 38, 1, 0

/**
 * Get signal ObstacleReplaced from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC6_ObstacleReplaced(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x01) << 0))

/**
 * Set signal ObstacleReplaced in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC6_ObstacleReplaced(buf, val)                                                                  \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 6);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 6;                                                                 \
    }

/**
 * Set signal ObstacleReplaced in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC6_ObstacleReplaced(buf) SET_ObstacleDataC6_ObstacleReplaced(buf, 0)

/**
 * Signal ObstacleReplaced value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC6_ObstacleReplaced(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleReplaced raw initial value.
 */
#define START_ObstacleDataC6_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw minimum value.
 */
#define MIN_ObstacleDataC6_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw maximum value.
 */
#define MAX_ObstacleDataC6_ObstacleReplaced 1

/**
 * Signal ObstacleReplaced raw offset value.
 */
#define OFF_ObstacleDataC6_ObstacleReplaced 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC6_ObstacleReplaced Value Table for Signal ObstacleReplaced in Message ObstacleDataC6
 * (0x431)
 *
 * Enum values defined for \ref SIG_ObstacleDataC6_ObstacleReplaced.
 *
 * @ingroup SIG_ObstacleDataC6_ObstacleReplaced
 */

/**
 * Value table ObstacleDataC6_ObstacleReplaced entry replaced.
 *
 * in this frame
 *
 * @ingroup ENUM_ObstacleDataC6_ObstacleReplaced
 */
#define ObstacleDataC6_ObstacleReplaced_replaced 1

/**
 * Value table ObstacleDataC6_ObstacleReplaced entry not.
 *
 * replaced in this frame
 *
 * @ingroup ENUM_ObstacleDataC6_ObstacleReplaced
 */
#define ObstacleDataC6_ObstacleReplaced_not 0

/**
 * @defgroup SIG_ObstacleDataC6_PedestrainOrientations Signal PedestrainOrientations of Message ObstacleDataC6 (0x431)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataC6_PedestrainOrientations.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC6
 * @{
 */

/**
 * Signal PedestrainOrientations configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC6_PedestrainOrientations and \ref GET_ObstacleDataC6_PedestrainOrientations instead.
 */
#define SIG_ObstacleDataC6_PedestrainOrientations 0, 0, 39, 4

/**
 * Signal PedestrainOrientations setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC6_PedestrainOrientations or \ref INIT_ObstacleDataC6 instead.
 */
#define SETUP_ObstacleDataC6_PedestrainOrientations 0, 0, 39, 4, 0

/**
 * Get signal PedestrainOrientations from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC6_PedestrainOrientations(buf)                                                                 \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x07) << 1))

/**
 * Set signal PedestrainOrientations in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC6_PedestrainOrientations(buf, val)                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal PedestrainOrientations in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC6_PedestrainOrientations(buf) SET_ObstacleDataC6_PedestrainOrientations(buf, 0)

/**
 * Signal PedestrainOrientations value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC6_PedestrainOrientations(x, fmt) ((x)*fmt)

/**
 * Signal PedestrainOrientations raw initial value.
 */
#define START_ObstacleDataC6_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw minimum value.
 */
#define MIN_ObstacleDataC6_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw maximum value.
 */
#define MAX_ObstacleDataC6_PedestrainOrientations 9

/**
 * Signal PedestrainOrientations raw offset value.
 */
#define OFF_ObstacleDataC6_PedestrainOrientations 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC6_PedestrainOrientations Value Table for Signal PedestrainOrientations in Message
 * ObstacleDataC6 (0x431)
 *
 * Enum values defined for \ref SIG_ObstacleDataC6_PedestrainOrientations.
 *
 * @ingroup SIG_ObstacleDataC6_PedestrainOrientations
 */

/**
 * Value table ObstacleDataC6_PedestrainOrientations entry unkown.
 *
 * @ingroup ENUM_ObstacleDataC6_PedestrainOrientations
 */
#define ObstacleDataC6_PedestrainOrientations_unkown 9

/**
 * Value table ObstacleDataC6_PedestrainOrientations entry right_back.
 *
 * @ingroup ENUM_ObstacleDataC6_PedestrainOrientations
 */
#define ObstacleDataC6_PedestrainOrientations_right_back 8

/**
 * Value table ObstacleDataC6_PedestrainOrientations entry right_front.
 *
 * @ingroup ENUM_ObstacleDataC6_PedestrainOrientations
 */
#define ObstacleDataC6_PedestrainOrientations_right_front 7

/**
 * Value table ObstacleDataC6_PedestrainOrientations entry right.
 *
 * @ingroup ENUM_ObstacleDataC6_PedestrainOrientations
 */
#define ObstacleDataC6_PedestrainOrientations_right 6

/**
 * Value table ObstacleDataC6_PedestrainOrientations entry left_back.
 *
 * @ingroup ENUM_ObstacleDataC6_PedestrainOrientations
 */
#define ObstacleDataC6_PedestrainOrientations_left_back 5

/**
 * Value table ObstacleDataC6_PedestrainOrientations entry left_anterior.
 *
 * @ingroup ENUM_ObstacleDataC6_PedestrainOrientations
 */
#define ObstacleDataC6_PedestrainOrientations_left_anterior 4

/**
 * Value table ObstacleDataC6_PedestrainOrientations entry left.
 *
 * @ingroup ENUM_ObstacleDataC6_PedestrainOrientations
 */
#define ObstacleDataC6_PedestrainOrientations_left 3

/**
 * Value table ObstacleDataC6_PedestrainOrientations entry front.
 *
 * @ingroup ENUM_ObstacleDataC6_PedestrainOrientations
 */
#define ObstacleDataC6_PedestrainOrientations_front 2

/**
 * Value table ObstacleDataC6_PedestrainOrientations entry back.
 *
 * @ingroup ENUM_ObstacleDataC6_PedestrainOrientations
 */
#define ObstacleDataC6_PedestrainOrientations_back 1

/**
 * Value table ObstacleDataC6_PedestrainOrientations entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataC6_PedestrainOrientations
 */
#define ObstacleDataC6_PedestrainOrientations_unavailable 0

/**
 * @defgroup SIG_ObstacleDataC6_VehicleAngle Signal VehicleAngle of Message ObstacleDataC6 (0x431)
 *
 * Vehicle yaw angle information
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC6
 * @{
 */

/**
 * Signal VehicleAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC6_VehicleAngle and \ref GET_ObstacleDataC6_VehicleAngle instead.
 */
#define SIG_ObstacleDataC6_VehicleAngle 0, 1, 43, 16

/**
 * Signal VehicleAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC6_VehicleAngle or \ref INIT_ObstacleDataC6 instead.
 */
#define SETUP_ObstacleDataC6_VehicleAngle 0, 1, 43, 16, 0

/**
 * Get signal VehicleAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC6_VehicleAngle(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) |       \
     (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x07) << 13))

/**
 * Set signal VehicleAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC6_VehicleAngle(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
        buf[7] &= ~(0x07 << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x07) << 0;                                                      \
    }

/**
 * Set signal VehicleAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC6_VehicleAngle(buf) SET_ObstacleDataC6_VehicleAngle(buf, 0)

/**
 * Signal VehicleAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC6_VehicleAngle(x, fmt) ((x)*fmt / 100)

/**
 * Signal VehicleAngle raw initial value.
 */
#define START_ObstacleDataC6_VehicleAngle 0

/**
 * Signal VehicleAngle raw minimum value.
 */
#define MIN_ObstacleDataC6_VehicleAngle -32768

/**
 * Signal VehicleAngle raw maximum value.
 */
#define MAX_ObstacleDataC6_VehicleAngle 32767

/**
 * Signal VehicleAngle raw offset value.
 */
#define OFF_ObstacleDataC6_VehicleAngle 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC6_reserved_C Signal reserved_C of Message ObstacleDataC6 (0x431)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC6
 * @{
 */

/**
 * Signal reserved_C configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC6_reserved_C and \ref GET_ObstacleDataC6_reserved_C instead.
 */
#define SIG_ObstacleDataC6_reserved_C 0, 0, 59, 5

/**
 * Signal reserved_C setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC6_reserved_C or \ref INIT_ObstacleDataC6 instead.
 */
#define SETUP_ObstacleDataC6_reserved_C 0, 0, 59, 5, 0

/**
 * Get signal reserved_C from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC6_reserved_C(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0))

/**
 * Set signal reserved_C in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC6_reserved_C(buf, val)                                                                        \
    {                                                                                                                  \
        buf[7] &= ~(0x1f << 3);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
    }

/**
 * Set signal reserved_C in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC6_reserved_C(buf) SET_ObstacleDataC6_reserved_C(buf, 0)

/**
 * Signal reserved_C value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC6_reserved_C(x, fmt) ((x)*fmt)

/**
 * Signal reserved_C raw initial value.
 */
#define START_ObstacleDataC6_reserved_C 0

/**
 * Signal reserved_C raw minimum value.
 */
#define MIN_ObstacleDataC6_reserved_C 0

/**
 * Signal reserved_C raw maximum value.
 */
#define MAX_ObstacleDataC6_reserved_C 0

/**
 * Signal reserved_C raw offset value.
 */
#define OFF_ObstacleDataC6_reserved_C 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC5_ObstacleAngleRate Signal ObstacleAngleRate of Message ObstacleDataC5 (0x42e)
 *
 * Reserved
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC5
 * @{
 */

/**
 * Signal ObstacleAngleRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC5_ObstacleAngleRate and \ref GET_ObstacleDataC5_ObstacleAngleRate instead.
 */
#define SIG_ObstacleDataC5_ObstacleAngleRate 0, 1, 0, 16

/**
 * Signal ObstacleAngleRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC5_ObstacleAngleRate or \ref INIT_ObstacleDataC5 instead.
 */
#define SETUP_ObstacleDataC5_ObstacleAngleRate 0, 1, 0, 16, 0

/**
 * Get signal ObstacleAngleRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC5_ObstacleAngleRate(buf)                                                                      \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAngleRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC5_ObstacleAngleRate(buf, val)                                                                 \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAngleRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC5_ObstacleAngleRate(buf) SET_ObstacleDataC5_ObstacleAngleRate(buf, 0)

/**
 * Signal ObstacleAngleRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC5_ObstacleAngleRate(x, fmt) ((x)*fmt / 100)

/**
 * Signal ObstacleAngleRate raw initial value.
 */
#define START_ObstacleDataC5_ObstacleAngleRate 0

/**
 * Signal ObstacleAngleRate raw minimum value.
 */
#define MIN_ObstacleDataC5_ObstacleAngleRate -32768

/**
 * Signal ObstacleAngleRate raw maximum value.
 */
#define MAX_ObstacleDataC5_ObstacleAngleRate 32767

/**
 * Signal ObstacleAngleRate raw offset value.
 */
#define OFF_ObstacleDataC5_ObstacleAngleRate 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC5_ObstacleVelY Signal ObstacleVelY of Message ObstacleDataC5 (0x42e)
 *
 * Relative lateral velocity of the object.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC5
 * @{
 */

/**
 * Signal ObstacleVelY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC5_ObstacleVelY and \ref GET_ObstacleDataC5_ObstacleVelY instead.
 */
#define SIG_ObstacleDataC5_ObstacleVelY 0, 1, 16, 12

/**
 * Signal ObstacleVelY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC5_ObstacleVelY or \ref INIT_ObstacleDataC5 instead.
 */
#define SETUP_ObstacleDataC5_ObstacleVelY 0, 1, 16, 12, 0

/**
 * Get signal ObstacleVelY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC5_ObstacleVelY(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[3] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC5_ObstacleVelY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0x0f << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC5_ObstacleVelY(buf) SET_ObstacleDataC5_ObstacleVelY(buf, 0)

/**
 * Signal ObstacleVelY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC5_ObstacleVelY(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelY raw initial value.
 */
#define START_ObstacleDataC5_ObstacleVelY 0

/**
 * Signal ObstacleVelY raw minimum value.
 */
#define MIN_ObstacleDataC5_ObstacleVelY -2047

/**
 * Signal ObstacleVelY raw maximum value.
 */
#define MAX_ObstacleDataC5_ObstacleVelY 2047

/**
 * Signal ObstacleVelY raw offset value.
 */
#define OFF_ObstacleDataC5_ObstacleVelY 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC5_Object_Accel_X Signal Object_Accel_X of Message ObstacleDataC5 (0x42e)
 *
 * The longitude acceleration of the object. Type: 10 bit, signed integer  Range: -14.97 : 14.97 [m/s2] Conversion:
 * (HEX)* 0.03 Invalid value: 200h
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC5
 * @{
 */

/**
 * Signal Object_Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC5_Object_Accel_X and \ref GET_ObstacleDataC5_Object_Accel_X instead.
 */
#define SIG_ObstacleDataC5_Object_Accel_X 0, 1, 28, 10

/**
 * Signal Object_Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC5_Object_Accel_X or \ref INIT_ObstacleDataC5 instead.
 */
#define SETUP_ObstacleDataC5_Object_Accel_X 0, 1, 28, 10, 0

/**
 * Get signal Object_Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC5_Object_Accel_X(buf)                                                                         \
    (0 | (uint16_t)(-(uint16_t)((buf[4] >> 5) & 0x01) << 10) | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x3f) << 4))

/**
 * Set signal Object_Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC5_Object_Accel_X(buf, val)                                                                    \
    {                                                                                                                  \
        buf[3] &= ~(0x0f << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4;                                                                 \
        buf[4] &= ~(0x3f << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0;                                                       \
    }

/**
 * Set signal Object_Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC5_Object_Accel_X(buf) SET_ObstacleDataC5_Object_Accel_X(buf, 0)

/**
 * Signal Object_Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC5_Object_Accel_X(x, fmt) ((x)*fmt * 3 / 100)

/**
 * Signal Object_Accel_X raw initial value.
 */
#define START_ObstacleDataC5_Object_Accel_X 0

/**
 * Signal Object_Accel_X raw minimum value.
 */
#define MIN_ObstacleDataC5_Object_Accel_X -499

/**
 * Signal Object_Accel_X raw maximum value.
 */
#define MAX_ObstacleDataC5_Object_Accel_X 499

/**
 * Signal Object_Accel_X raw offset value.
 */
#define OFF_ObstacleDataC5_Object_Accel_X 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC5_ObstacleReplaced Signal ObstacleReplaced of Message ObstacleDataC5 (0x42e)
 *
 * Reserved
 *
 * Contains the value table \ref ENUM_ObstacleDataC5_ObstacleReplaced.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC5
 * @{
 */

/**
 * Signal ObstacleReplaced configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC5_ObstacleReplaced and \ref GET_ObstacleDataC5_ObstacleReplaced instead.
 */
#define SIG_ObstacleDataC5_ObstacleReplaced 0, 0, 38, 1

/**
 * Signal ObstacleReplaced setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC5_ObstacleReplaced or \ref INIT_ObstacleDataC5 instead.
 */
#define SETUP_ObstacleDataC5_ObstacleReplaced 0, 0, 38, 1, 0

/**
 * Get signal ObstacleReplaced from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC5_ObstacleReplaced(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x01) << 0))

/**
 * Set signal ObstacleReplaced in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC5_ObstacleReplaced(buf, val)                                                                  \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 6);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 6;                                                                 \
    }

/**
 * Set signal ObstacleReplaced in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC5_ObstacleReplaced(buf) SET_ObstacleDataC5_ObstacleReplaced(buf, 0)

/**
 * Signal ObstacleReplaced value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC5_ObstacleReplaced(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleReplaced raw initial value.
 */
#define START_ObstacleDataC5_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw minimum value.
 */
#define MIN_ObstacleDataC5_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw maximum value.
 */
#define MAX_ObstacleDataC5_ObstacleReplaced 1

/**
 * Signal ObstacleReplaced raw offset value.
 */
#define OFF_ObstacleDataC5_ObstacleReplaced 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC5_ObstacleReplaced Value Table for Signal ObstacleReplaced in Message ObstacleDataC5
 * (0x42e)
 *
 * Enum values defined for \ref SIG_ObstacleDataC5_ObstacleReplaced.
 *
 * @ingroup SIG_ObstacleDataC5_ObstacleReplaced
 */

/**
 * Value table ObstacleDataC5_ObstacleReplaced entry replaced.
 *
 * in this frame
 *
 * @ingroup ENUM_ObstacleDataC5_ObstacleReplaced
 */
#define ObstacleDataC5_ObstacleReplaced_replaced 1

/**
 * Value table ObstacleDataC5_ObstacleReplaced entry not.
 *
 * replaced in this frame
 *
 * @ingroup ENUM_ObstacleDataC5_ObstacleReplaced
 */
#define ObstacleDataC5_ObstacleReplaced_not 0

/**
 * @defgroup SIG_ObstacleDataC5_PedestrainOrientations Signal PedestrainOrientations of Message ObstacleDataC5 (0x42e)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataC5_PedestrainOrientations.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC5
 * @{
 */

/**
 * Signal PedestrainOrientations configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC5_PedestrainOrientations and \ref GET_ObstacleDataC5_PedestrainOrientations instead.
 */
#define SIG_ObstacleDataC5_PedestrainOrientations 0, 0, 39, 4

/**
 * Signal PedestrainOrientations setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC5_PedestrainOrientations or \ref INIT_ObstacleDataC5 instead.
 */
#define SETUP_ObstacleDataC5_PedestrainOrientations 0, 0, 39, 4, 0

/**
 * Get signal PedestrainOrientations from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC5_PedestrainOrientations(buf)                                                                 \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x07) << 1))

/**
 * Set signal PedestrainOrientations in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC5_PedestrainOrientations(buf, val)                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal PedestrainOrientations in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC5_PedestrainOrientations(buf) SET_ObstacleDataC5_PedestrainOrientations(buf, 0)

/**
 * Signal PedestrainOrientations value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC5_PedestrainOrientations(x, fmt) ((x)*fmt)

/**
 * Signal PedestrainOrientations raw initial value.
 */
#define START_ObstacleDataC5_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw minimum value.
 */
#define MIN_ObstacleDataC5_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw maximum value.
 */
#define MAX_ObstacleDataC5_PedestrainOrientations 9

/**
 * Signal PedestrainOrientations raw offset value.
 */
#define OFF_ObstacleDataC5_PedestrainOrientations 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC5_PedestrainOrientations Value Table for Signal PedestrainOrientations in Message
 * ObstacleDataC5 (0x42e)
 *
 * Enum values defined for \ref SIG_ObstacleDataC5_PedestrainOrientations.
 *
 * @ingroup SIG_ObstacleDataC5_PedestrainOrientations
 */

/**
 * Value table ObstacleDataC5_PedestrainOrientations entry unkown.
 *
 * @ingroup ENUM_ObstacleDataC5_PedestrainOrientations
 */
#define ObstacleDataC5_PedestrainOrientations_unkown 9

/**
 * Value table ObstacleDataC5_PedestrainOrientations entry right_back.
 *
 * @ingroup ENUM_ObstacleDataC5_PedestrainOrientations
 */
#define ObstacleDataC5_PedestrainOrientations_right_back 8

/**
 * Value table ObstacleDataC5_PedestrainOrientations entry right_front.
 *
 * @ingroup ENUM_ObstacleDataC5_PedestrainOrientations
 */
#define ObstacleDataC5_PedestrainOrientations_right_front 7

/**
 * Value table ObstacleDataC5_PedestrainOrientations entry right.
 *
 * @ingroup ENUM_ObstacleDataC5_PedestrainOrientations
 */
#define ObstacleDataC5_PedestrainOrientations_right 6

/**
 * Value table ObstacleDataC5_PedestrainOrientations entry left_back.
 *
 * @ingroup ENUM_ObstacleDataC5_PedestrainOrientations
 */
#define ObstacleDataC5_PedestrainOrientations_left_back 5

/**
 * Value table ObstacleDataC5_PedestrainOrientations entry left_anterior.
 *
 * @ingroup ENUM_ObstacleDataC5_PedestrainOrientations
 */
#define ObstacleDataC5_PedestrainOrientations_left_anterior 4

/**
 * Value table ObstacleDataC5_PedestrainOrientations entry left.
 *
 * @ingroup ENUM_ObstacleDataC5_PedestrainOrientations
 */
#define ObstacleDataC5_PedestrainOrientations_left 3

/**
 * Value table ObstacleDataC5_PedestrainOrientations entry front.
 *
 * @ingroup ENUM_ObstacleDataC5_PedestrainOrientations
 */
#define ObstacleDataC5_PedestrainOrientations_front 2

/**
 * Value table ObstacleDataC5_PedestrainOrientations entry back.
 *
 * @ingroup ENUM_ObstacleDataC5_PedestrainOrientations
 */
#define ObstacleDataC5_PedestrainOrientations_back 1

/**
 * Value table ObstacleDataC5_PedestrainOrientations entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataC5_PedestrainOrientations
 */
#define ObstacleDataC5_PedestrainOrientations_unavailable 0

/**
 * @defgroup SIG_ObstacleDataC5_VehicleAngle Signal VehicleAngle of Message ObstacleDataC5 (0x42e)
 *
 * Vehicle yaw angle information
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC5
 * @{
 */

/**
 * Signal VehicleAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC5_VehicleAngle and \ref GET_ObstacleDataC5_VehicleAngle instead.
 */
#define SIG_ObstacleDataC5_VehicleAngle 0, 1, 43, 16

/**
 * Signal VehicleAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC5_VehicleAngle or \ref INIT_ObstacleDataC5 instead.
 */
#define SETUP_ObstacleDataC5_VehicleAngle 0, 1, 43, 16, 0

/**
 * Get signal VehicleAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC5_VehicleAngle(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) |       \
     (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x07) << 13))

/**
 * Set signal VehicleAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC5_VehicleAngle(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
        buf[7] &= ~(0x07 << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x07) << 0;                                                      \
    }

/**
 * Set signal VehicleAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC5_VehicleAngle(buf) SET_ObstacleDataC5_VehicleAngle(buf, 0)

/**
 * Signal VehicleAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC5_VehicleAngle(x, fmt) ((x)*fmt / 100)

/**
 * Signal VehicleAngle raw initial value.
 */
#define START_ObstacleDataC5_VehicleAngle 0

/**
 * Signal VehicleAngle raw minimum value.
 */
#define MIN_ObstacleDataC5_VehicleAngle -32768

/**
 * Signal VehicleAngle raw maximum value.
 */
#define MAX_ObstacleDataC5_VehicleAngle 32767

/**
 * Signal VehicleAngle raw offset value.
 */
#define OFF_ObstacleDataC5_VehicleAngle 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC5_reserved_C Signal reserved_C of Message ObstacleDataC5 (0x42e)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC5
 * @{
 */

/**
 * Signal reserved_C configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC5_reserved_C and \ref GET_ObstacleDataC5_reserved_C instead.
 */
#define SIG_ObstacleDataC5_reserved_C 0, 0, 59, 5

/**
 * Signal reserved_C setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC5_reserved_C or \ref INIT_ObstacleDataC5 instead.
 */
#define SETUP_ObstacleDataC5_reserved_C 0, 0, 59, 5, 0

/**
 * Get signal reserved_C from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC5_reserved_C(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0))

/**
 * Set signal reserved_C in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC5_reserved_C(buf, val)                                                                        \
    {                                                                                                                  \
        buf[7] &= ~(0x1f << 3);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
    }

/**
 * Set signal reserved_C in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC5_reserved_C(buf) SET_ObstacleDataC5_reserved_C(buf, 0)

/**
 * Signal reserved_C value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC5_reserved_C(x, fmt) ((x)*fmt)

/**
 * Signal reserved_C raw initial value.
 */
#define START_ObstacleDataC5_reserved_C 0

/**
 * Signal reserved_C raw minimum value.
 */
#define MIN_ObstacleDataC5_reserved_C 0

/**
 * Signal reserved_C raw maximum value.
 */
#define MAX_ObstacleDataC5_reserved_C 0

/**
 * Signal reserved_C raw offset value.
 */
#define OFF_ObstacleDataC5_reserved_C 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC4_ObstacleAngleRate Signal ObstacleAngleRate of Message ObstacleDataC4 (0x42b)
 *
 * Reserved
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC4
 * @{
 */

/**
 * Signal ObstacleAngleRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC4_ObstacleAngleRate and \ref GET_ObstacleDataC4_ObstacleAngleRate instead.
 */
#define SIG_ObstacleDataC4_ObstacleAngleRate 0, 1, 0, 16

/**
 * Signal ObstacleAngleRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC4_ObstacleAngleRate or \ref INIT_ObstacleDataC4 instead.
 */
#define SETUP_ObstacleDataC4_ObstacleAngleRate 0, 1, 0, 16, 0

/**
 * Get signal ObstacleAngleRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC4_ObstacleAngleRate(buf)                                                                      \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAngleRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC4_ObstacleAngleRate(buf, val)                                                                 \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAngleRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC4_ObstacleAngleRate(buf) SET_ObstacleDataC4_ObstacleAngleRate(buf, 0)

/**
 * Signal ObstacleAngleRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC4_ObstacleAngleRate(x, fmt) ((x)*fmt / 100)

/**
 * Signal ObstacleAngleRate raw initial value.
 */
#define START_ObstacleDataC4_ObstacleAngleRate 0

/**
 * Signal ObstacleAngleRate raw minimum value.
 */
#define MIN_ObstacleDataC4_ObstacleAngleRate -32768

/**
 * Signal ObstacleAngleRate raw maximum value.
 */
#define MAX_ObstacleDataC4_ObstacleAngleRate 32767

/**
 * Signal ObstacleAngleRate raw offset value.
 */
#define OFF_ObstacleDataC4_ObstacleAngleRate 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC4_ObstacleVelY Signal ObstacleVelY of Message ObstacleDataC4 (0x42b)
 *
 * Relative lateral velocity of the object.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC4
 * @{
 */

/**
 * Signal ObstacleVelY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC4_ObstacleVelY and \ref GET_ObstacleDataC4_ObstacleVelY instead.
 */
#define SIG_ObstacleDataC4_ObstacleVelY 0, 1, 16, 12

/**
 * Signal ObstacleVelY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC4_ObstacleVelY or \ref INIT_ObstacleDataC4 instead.
 */
#define SETUP_ObstacleDataC4_ObstacleVelY 0, 1, 16, 12, 0

/**
 * Get signal ObstacleVelY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC4_ObstacleVelY(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[3] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC4_ObstacleVelY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0x0f << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC4_ObstacleVelY(buf) SET_ObstacleDataC4_ObstacleVelY(buf, 0)

/**
 * Signal ObstacleVelY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC4_ObstacleVelY(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelY raw initial value.
 */
#define START_ObstacleDataC4_ObstacleVelY 0

/**
 * Signal ObstacleVelY raw minimum value.
 */
#define MIN_ObstacleDataC4_ObstacleVelY -2047

/**
 * Signal ObstacleVelY raw maximum value.
 */
#define MAX_ObstacleDataC4_ObstacleVelY 2047

/**
 * Signal ObstacleVelY raw offset value.
 */
#define OFF_ObstacleDataC4_ObstacleVelY 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC4_Object_Accel_X Signal Object_Accel_X of Message ObstacleDataC4 (0x42b)
 *
 * The longitude acceleration of the object. Type: 10 bit, signed integer  Range: -14.97 : 14.97 [m/s2] Conversion:
 * (HEX)* 0.03 Invalid value: 200h
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC4
 * @{
 */

/**
 * Signal Object_Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC4_Object_Accel_X and \ref GET_ObstacleDataC4_Object_Accel_X instead.
 */
#define SIG_ObstacleDataC4_Object_Accel_X 0, 1, 28, 10

/**
 * Signal Object_Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC4_Object_Accel_X or \ref INIT_ObstacleDataC4 instead.
 */
#define SETUP_ObstacleDataC4_Object_Accel_X 0, 1, 28, 10, 0

/**
 * Get signal Object_Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC4_Object_Accel_X(buf)                                                                         \
    (0 | (uint16_t)(-(uint16_t)((buf[4] >> 5) & 0x01) << 10) | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x3f) << 4))

/**
 * Set signal Object_Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC4_Object_Accel_X(buf, val)                                                                    \
    {                                                                                                                  \
        buf[3] &= ~(0x0f << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4;                                                                 \
        buf[4] &= ~(0x3f << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0;                                                       \
    }

/**
 * Set signal Object_Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC4_Object_Accel_X(buf) SET_ObstacleDataC4_Object_Accel_X(buf, 0)

/**
 * Signal Object_Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC4_Object_Accel_X(x, fmt) ((x)*fmt * 3 / 100)

/**
 * Signal Object_Accel_X raw initial value.
 */
#define START_ObstacleDataC4_Object_Accel_X 0

/**
 * Signal Object_Accel_X raw minimum value.
 */
#define MIN_ObstacleDataC4_Object_Accel_X -499

/**
 * Signal Object_Accel_X raw maximum value.
 */
#define MAX_ObstacleDataC4_Object_Accel_X 499

/**
 * Signal Object_Accel_X raw offset value.
 */
#define OFF_ObstacleDataC4_Object_Accel_X 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC4_ObstacleReplaced Signal ObstacleReplaced of Message ObstacleDataC4 (0x42b)
 *
 * Reserved
 *
 * Contains the value table \ref ENUM_ObstacleDataC4_ObstacleReplaced.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC4
 * @{
 */

/**
 * Signal ObstacleReplaced configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC4_ObstacleReplaced and \ref GET_ObstacleDataC4_ObstacleReplaced instead.
 */
#define SIG_ObstacleDataC4_ObstacleReplaced 0, 0, 38, 1

/**
 * Signal ObstacleReplaced setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC4_ObstacleReplaced or \ref INIT_ObstacleDataC4 instead.
 */
#define SETUP_ObstacleDataC4_ObstacleReplaced 0, 0, 38, 1, 0

/**
 * Get signal ObstacleReplaced from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC4_ObstacleReplaced(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x01) << 0))

/**
 * Set signal ObstacleReplaced in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC4_ObstacleReplaced(buf, val)                                                                  \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 6);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 6;                                                                 \
    }

/**
 * Set signal ObstacleReplaced in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC4_ObstacleReplaced(buf) SET_ObstacleDataC4_ObstacleReplaced(buf, 0)

/**
 * Signal ObstacleReplaced value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC4_ObstacleReplaced(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleReplaced raw initial value.
 */
#define START_ObstacleDataC4_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw minimum value.
 */
#define MIN_ObstacleDataC4_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw maximum value.
 */
#define MAX_ObstacleDataC4_ObstacleReplaced 1

/**
 * Signal ObstacleReplaced raw offset value.
 */
#define OFF_ObstacleDataC4_ObstacleReplaced 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC4_ObstacleReplaced Value Table for Signal ObstacleReplaced in Message ObstacleDataC4
 * (0x42b)
 *
 * Enum values defined for \ref SIG_ObstacleDataC4_ObstacleReplaced.
 *
 * @ingroup SIG_ObstacleDataC4_ObstacleReplaced
 */

/**
 * Value table ObstacleDataC4_ObstacleReplaced entry replaced.
 *
 * in this frame
 *
 * @ingroup ENUM_ObstacleDataC4_ObstacleReplaced
 */
#define ObstacleDataC4_ObstacleReplaced_replaced 1

/**
 * Value table ObstacleDataC4_ObstacleReplaced entry not.
 *
 * replaced in this frame
 *
 * @ingroup ENUM_ObstacleDataC4_ObstacleReplaced
 */
#define ObstacleDataC4_ObstacleReplaced_not 0

/**
 * @defgroup SIG_ObstacleDataC4_PedestrainOrientations Signal PedestrainOrientations of Message ObstacleDataC4 (0x42b)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataC4_PedestrainOrientations.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC4
 * @{
 */

/**
 * Signal PedestrainOrientations configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC4_PedestrainOrientations and \ref GET_ObstacleDataC4_PedestrainOrientations instead.
 */
#define SIG_ObstacleDataC4_PedestrainOrientations 0, 0, 39, 4

/**
 * Signal PedestrainOrientations setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC4_PedestrainOrientations or \ref INIT_ObstacleDataC4 instead.
 */
#define SETUP_ObstacleDataC4_PedestrainOrientations 0, 0, 39, 4, 0

/**
 * Get signal PedestrainOrientations from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC4_PedestrainOrientations(buf)                                                                 \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x07) << 1))

/**
 * Set signal PedestrainOrientations in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC4_PedestrainOrientations(buf, val)                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal PedestrainOrientations in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC4_PedestrainOrientations(buf) SET_ObstacleDataC4_PedestrainOrientations(buf, 0)

/**
 * Signal PedestrainOrientations value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC4_PedestrainOrientations(x, fmt) ((x)*fmt)

/**
 * Signal PedestrainOrientations raw initial value.
 */
#define START_ObstacleDataC4_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw minimum value.
 */
#define MIN_ObstacleDataC4_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw maximum value.
 */
#define MAX_ObstacleDataC4_PedestrainOrientations 9

/**
 * Signal PedestrainOrientations raw offset value.
 */
#define OFF_ObstacleDataC4_PedestrainOrientations 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC4_PedestrainOrientations Value Table for Signal PedestrainOrientations in Message
 * ObstacleDataC4 (0x42b)
 *
 * Enum values defined for \ref SIG_ObstacleDataC4_PedestrainOrientations.
 *
 * @ingroup SIG_ObstacleDataC4_PedestrainOrientations
 */

/**
 * Value table ObstacleDataC4_PedestrainOrientations entry unkown.
 *
 * @ingroup ENUM_ObstacleDataC4_PedestrainOrientations
 */
#define ObstacleDataC4_PedestrainOrientations_unkown 9

/**
 * Value table ObstacleDataC4_PedestrainOrientations entry right_back.
 *
 * @ingroup ENUM_ObstacleDataC4_PedestrainOrientations
 */
#define ObstacleDataC4_PedestrainOrientations_right_back 8

/**
 * Value table ObstacleDataC4_PedestrainOrientations entry right_front.
 *
 * @ingroup ENUM_ObstacleDataC4_PedestrainOrientations
 */
#define ObstacleDataC4_PedestrainOrientations_right_front 7

/**
 * Value table ObstacleDataC4_PedestrainOrientations entry right.
 *
 * @ingroup ENUM_ObstacleDataC4_PedestrainOrientations
 */
#define ObstacleDataC4_PedestrainOrientations_right 6

/**
 * Value table ObstacleDataC4_PedestrainOrientations entry left_back.
 *
 * @ingroup ENUM_ObstacleDataC4_PedestrainOrientations
 */
#define ObstacleDataC4_PedestrainOrientations_left_back 5

/**
 * Value table ObstacleDataC4_PedestrainOrientations entry left_anterior.
 *
 * @ingroup ENUM_ObstacleDataC4_PedestrainOrientations
 */
#define ObstacleDataC4_PedestrainOrientations_left_anterior 4

/**
 * Value table ObstacleDataC4_PedestrainOrientations entry left.
 *
 * @ingroup ENUM_ObstacleDataC4_PedestrainOrientations
 */
#define ObstacleDataC4_PedestrainOrientations_left 3

/**
 * Value table ObstacleDataC4_PedestrainOrientations entry front.
 *
 * @ingroup ENUM_ObstacleDataC4_PedestrainOrientations
 */
#define ObstacleDataC4_PedestrainOrientations_front 2

/**
 * Value table ObstacleDataC4_PedestrainOrientations entry back.
 *
 * @ingroup ENUM_ObstacleDataC4_PedestrainOrientations
 */
#define ObstacleDataC4_PedestrainOrientations_back 1

/**
 * Value table ObstacleDataC4_PedestrainOrientations entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataC4_PedestrainOrientations
 */
#define ObstacleDataC4_PedestrainOrientations_unavailable 0

/**
 * @defgroup SIG_ObstacleDataC4_VehicleAngle Signal VehicleAngle of Message ObstacleDataC4 (0x42b)
 *
 * Vehicle yaw angle information
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC4
 * @{
 */

/**
 * Signal VehicleAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC4_VehicleAngle and \ref GET_ObstacleDataC4_VehicleAngle instead.
 */
#define SIG_ObstacleDataC4_VehicleAngle 0, 1, 43, 16

/**
 * Signal VehicleAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC4_VehicleAngle or \ref INIT_ObstacleDataC4 instead.
 */
#define SETUP_ObstacleDataC4_VehicleAngle 0, 1, 43, 16, 0

/**
 * Get signal VehicleAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC4_VehicleAngle(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) |       \
     (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x07) << 13))

/**
 * Set signal VehicleAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC4_VehicleAngle(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
        buf[7] &= ~(0x07 << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x07) << 0;                                                      \
    }

/**
 * Set signal VehicleAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC4_VehicleAngle(buf) SET_ObstacleDataC4_VehicleAngle(buf, 0)

/**
 * Signal VehicleAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC4_VehicleAngle(x, fmt) ((x)*fmt / 100)

/**
 * Signal VehicleAngle raw initial value.
 */
#define START_ObstacleDataC4_VehicleAngle 0

/**
 * Signal VehicleAngle raw minimum value.
 */
#define MIN_ObstacleDataC4_VehicleAngle -32768

/**
 * Signal VehicleAngle raw maximum value.
 */
#define MAX_ObstacleDataC4_VehicleAngle 32767

/**
 * Signal VehicleAngle raw offset value.
 */
#define OFF_ObstacleDataC4_VehicleAngle 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC4_reserved_C Signal reserved_C of Message ObstacleDataC4 (0x42b)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC4
 * @{
 */

/**
 * Signal reserved_C configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC4_reserved_C and \ref GET_ObstacleDataC4_reserved_C instead.
 */
#define SIG_ObstacleDataC4_reserved_C 0, 0, 59, 5

/**
 * Signal reserved_C setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC4_reserved_C or \ref INIT_ObstacleDataC4 instead.
 */
#define SETUP_ObstacleDataC4_reserved_C 0, 0, 59, 5, 0

/**
 * Get signal reserved_C from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC4_reserved_C(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0))

/**
 * Set signal reserved_C in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC4_reserved_C(buf, val)                                                                        \
    {                                                                                                                  \
        buf[7] &= ~(0x1f << 3);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
    }

/**
 * Set signal reserved_C in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC4_reserved_C(buf) SET_ObstacleDataC4_reserved_C(buf, 0)

/**
 * Signal reserved_C value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC4_reserved_C(x, fmt) ((x)*fmt)

/**
 * Signal reserved_C raw initial value.
 */
#define START_ObstacleDataC4_reserved_C 0

/**
 * Signal reserved_C raw minimum value.
 */
#define MIN_ObstacleDataC4_reserved_C 0

/**
 * Signal reserved_C raw maximum value.
 */
#define MAX_ObstacleDataC4_reserved_C 0

/**
 * Signal reserved_C raw offset value.
 */
#define OFF_ObstacleDataC4_reserved_C 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC2_ObstacleAngleRate Signal ObstacleAngleRate of Message ObstacleDataC2 (0x425)
 *
 * Reserved
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC2
 * @{
 */

/**
 * Signal ObstacleAngleRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC2_ObstacleAngleRate and \ref GET_ObstacleDataC2_ObstacleAngleRate instead.
 */
#define SIG_ObstacleDataC2_ObstacleAngleRate 0, 1, 0, 16

/**
 * Signal ObstacleAngleRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC2_ObstacleAngleRate or \ref INIT_ObstacleDataC2 instead.
 */
#define SETUP_ObstacleDataC2_ObstacleAngleRate 0, 1, 0, 16, 0

/**
 * Get signal ObstacleAngleRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC2_ObstacleAngleRate(buf)                                                                      \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAngleRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC2_ObstacleAngleRate(buf, val)                                                                 \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAngleRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC2_ObstacleAngleRate(buf) SET_ObstacleDataC2_ObstacleAngleRate(buf, 0)

/**
 * Signal ObstacleAngleRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC2_ObstacleAngleRate(x, fmt) ((x)*fmt / 100)

/**
 * Signal ObstacleAngleRate raw initial value.
 */
#define START_ObstacleDataC2_ObstacleAngleRate 0

/**
 * Signal ObstacleAngleRate raw minimum value.
 */
#define MIN_ObstacleDataC2_ObstacleAngleRate -32768

/**
 * Signal ObstacleAngleRate raw maximum value.
 */
#define MAX_ObstacleDataC2_ObstacleAngleRate 32767

/**
 * Signal ObstacleAngleRate raw offset value.
 */
#define OFF_ObstacleDataC2_ObstacleAngleRate 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC2_ObstacleVelY Signal ObstacleVelY of Message ObstacleDataC2 (0x425)
 *
 * Relative lateral velocity of the object.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC2
 * @{
 */

/**
 * Signal ObstacleVelY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC2_ObstacleVelY and \ref GET_ObstacleDataC2_ObstacleVelY instead.
 */
#define SIG_ObstacleDataC2_ObstacleVelY 0, 1, 16, 12

/**
 * Signal ObstacleVelY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC2_ObstacleVelY or \ref INIT_ObstacleDataC2 instead.
 */
#define SETUP_ObstacleDataC2_ObstacleVelY 0, 1, 16, 12, 0

/**
 * Get signal ObstacleVelY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC2_ObstacleVelY(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[3] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC2_ObstacleVelY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0x0f << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC2_ObstacleVelY(buf) SET_ObstacleDataC2_ObstacleVelY(buf, 0)

/**
 * Signal ObstacleVelY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC2_ObstacleVelY(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelY raw initial value.
 */
#define START_ObstacleDataC2_ObstacleVelY 0

/**
 * Signal ObstacleVelY raw minimum value.
 */
#define MIN_ObstacleDataC2_ObstacleVelY -2047

/**
 * Signal ObstacleVelY raw maximum value.
 */
#define MAX_ObstacleDataC2_ObstacleVelY 2047

/**
 * Signal ObstacleVelY raw offset value.
 */
#define OFF_ObstacleDataC2_ObstacleVelY 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC2_Object_Accel_X Signal Object_Accel_X of Message ObstacleDataC2 (0x425)
 *
 * The longitude acceleration of the object. Type: 10 bit, signed integer  Range: -14.97 : 14.97 [m/s2] Conversion:
 * (HEX)* 0.03 Invalid value: 200h
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC2
 * @{
 */

/**
 * Signal Object_Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC2_Object_Accel_X and \ref GET_ObstacleDataC2_Object_Accel_X instead.
 */
#define SIG_ObstacleDataC2_Object_Accel_X 0, 1, 28, 10

/**
 * Signal Object_Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC2_Object_Accel_X or \ref INIT_ObstacleDataC2 instead.
 */
#define SETUP_ObstacleDataC2_Object_Accel_X 0, 1, 28, 10, 0

/**
 * Get signal Object_Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC2_Object_Accel_X(buf)                                                                         \
    (0 | (uint16_t)(-(uint16_t)((buf[4] >> 5) & 0x01) << 10) | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x3f) << 4))

/**
 * Set signal Object_Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC2_Object_Accel_X(buf, val)                                                                    \
    {                                                                                                                  \
        buf[3] &= ~(0x0f << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4;                                                                 \
        buf[4] &= ~(0x3f << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0;                                                       \
    }

/**
 * Set signal Object_Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC2_Object_Accel_X(buf) SET_ObstacleDataC2_Object_Accel_X(buf, 0)

/**
 * Signal Object_Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC2_Object_Accel_X(x, fmt) ((x)*fmt * 3 / 100)

/**
 * Signal Object_Accel_X raw initial value.
 */
#define START_ObstacleDataC2_Object_Accel_X 0

/**
 * Signal Object_Accel_X raw minimum value.
 */
#define MIN_ObstacleDataC2_Object_Accel_X -499

/**
 * Signal Object_Accel_X raw maximum value.
 */
#define MAX_ObstacleDataC2_Object_Accel_X 499

/**
 * Signal Object_Accel_X raw offset value.
 */
#define OFF_ObstacleDataC2_Object_Accel_X 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC2_ObstacleReplaced Signal ObstacleReplaced of Message ObstacleDataC2 (0x425)
 *
 * Reserved
 *
 * Contains the value table \ref ENUM_ObstacleDataC2_ObstacleReplaced.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC2
 * @{
 */

/**
 * Signal ObstacleReplaced configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC2_ObstacleReplaced and \ref GET_ObstacleDataC2_ObstacleReplaced instead.
 */
#define SIG_ObstacleDataC2_ObstacleReplaced 0, 0, 38, 1

/**
 * Signal ObstacleReplaced setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC2_ObstacleReplaced or \ref INIT_ObstacleDataC2 instead.
 */
#define SETUP_ObstacleDataC2_ObstacleReplaced 0, 0, 38, 1, 0

/**
 * Get signal ObstacleReplaced from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC2_ObstacleReplaced(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x01) << 0))

/**
 * Set signal ObstacleReplaced in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC2_ObstacleReplaced(buf, val)                                                                  \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 6);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 6;                                                                 \
    }

/**
 * Set signal ObstacleReplaced in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC2_ObstacleReplaced(buf) SET_ObstacleDataC2_ObstacleReplaced(buf, 0)

/**
 * Signal ObstacleReplaced value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC2_ObstacleReplaced(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleReplaced raw initial value.
 */
#define START_ObstacleDataC2_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw minimum value.
 */
#define MIN_ObstacleDataC2_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw maximum value.
 */
#define MAX_ObstacleDataC2_ObstacleReplaced 1

/**
 * Signal ObstacleReplaced raw offset value.
 */
#define OFF_ObstacleDataC2_ObstacleReplaced 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC2_ObstacleReplaced Value Table for Signal ObstacleReplaced in Message ObstacleDataC2
 * (0x425)
 *
 * Enum values defined for \ref SIG_ObstacleDataC2_ObstacleReplaced.
 *
 * @ingroup SIG_ObstacleDataC2_ObstacleReplaced
 */

/**
 * Value table ObstacleDataC2_ObstacleReplaced entry replaced.
 *
 * in this frame
 *
 * @ingroup ENUM_ObstacleDataC2_ObstacleReplaced
 */
#define ObstacleDataC2_ObstacleReplaced_replaced 1

/**
 * Value table ObstacleDataC2_ObstacleReplaced entry not.
 *
 * replaced in this frame
 *
 * @ingroup ENUM_ObstacleDataC2_ObstacleReplaced
 */
#define ObstacleDataC2_ObstacleReplaced_not 0

/**
 * @defgroup SIG_ObstacleDataC2_PedestrainOrientations Signal PedestrainOrientations of Message ObstacleDataC2 (0x425)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataC2_PedestrainOrientations.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC2
 * @{
 */

/**
 * Signal PedestrainOrientations configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC2_PedestrainOrientations and \ref GET_ObstacleDataC2_PedestrainOrientations instead.
 */
#define SIG_ObstacleDataC2_PedestrainOrientations 0, 0, 39, 4

/**
 * Signal PedestrainOrientations setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC2_PedestrainOrientations or \ref INIT_ObstacleDataC2 instead.
 */
#define SETUP_ObstacleDataC2_PedestrainOrientations 0, 0, 39, 4, 0

/**
 * Get signal PedestrainOrientations from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC2_PedestrainOrientations(buf)                                                                 \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x07) << 1))

/**
 * Set signal PedestrainOrientations in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC2_PedestrainOrientations(buf, val)                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal PedestrainOrientations in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC2_PedestrainOrientations(buf) SET_ObstacleDataC2_PedestrainOrientations(buf, 0)

/**
 * Signal PedestrainOrientations value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC2_PedestrainOrientations(x, fmt) ((x)*fmt)

/**
 * Signal PedestrainOrientations raw initial value.
 */
#define START_ObstacleDataC2_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw minimum value.
 */
#define MIN_ObstacleDataC2_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw maximum value.
 */
#define MAX_ObstacleDataC2_PedestrainOrientations 9

/**
 * Signal PedestrainOrientations raw offset value.
 */
#define OFF_ObstacleDataC2_PedestrainOrientations 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC2_PedestrainOrientations Value Table for Signal PedestrainOrientations in Message
 * ObstacleDataC2 (0x425)
 *
 * Enum values defined for \ref SIG_ObstacleDataC2_PedestrainOrientations.
 *
 * @ingroup SIG_ObstacleDataC2_PedestrainOrientations
 */

/**
 * Value table ObstacleDataC2_PedestrainOrientations entry unkown.
 *
 * @ingroup ENUM_ObstacleDataC2_PedestrainOrientations
 */
#define ObstacleDataC2_PedestrainOrientations_unkown 9

/**
 * Value table ObstacleDataC2_PedestrainOrientations entry right_back.
 *
 * @ingroup ENUM_ObstacleDataC2_PedestrainOrientations
 */
#define ObstacleDataC2_PedestrainOrientations_right_back 8

/**
 * Value table ObstacleDataC2_PedestrainOrientations entry right_front.
 *
 * @ingroup ENUM_ObstacleDataC2_PedestrainOrientations
 */
#define ObstacleDataC2_PedestrainOrientations_right_front 7

/**
 * Value table ObstacleDataC2_PedestrainOrientations entry right.
 *
 * @ingroup ENUM_ObstacleDataC2_PedestrainOrientations
 */
#define ObstacleDataC2_PedestrainOrientations_right 6

/**
 * Value table ObstacleDataC2_PedestrainOrientations entry left_back.
 *
 * @ingroup ENUM_ObstacleDataC2_PedestrainOrientations
 */
#define ObstacleDataC2_PedestrainOrientations_left_back 5

/**
 * Value table ObstacleDataC2_PedestrainOrientations entry left_anterior.
 *
 * @ingroup ENUM_ObstacleDataC2_PedestrainOrientations
 */
#define ObstacleDataC2_PedestrainOrientations_left_anterior 4

/**
 * Value table ObstacleDataC2_PedestrainOrientations entry left.
 *
 * @ingroup ENUM_ObstacleDataC2_PedestrainOrientations
 */
#define ObstacleDataC2_PedestrainOrientations_left 3

/**
 * Value table ObstacleDataC2_PedestrainOrientations entry front.
 *
 * @ingroup ENUM_ObstacleDataC2_PedestrainOrientations
 */
#define ObstacleDataC2_PedestrainOrientations_front 2

/**
 * Value table ObstacleDataC2_PedestrainOrientations entry back.
 *
 * @ingroup ENUM_ObstacleDataC2_PedestrainOrientations
 */
#define ObstacleDataC2_PedestrainOrientations_back 1

/**
 * Value table ObstacleDataC2_PedestrainOrientations entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataC2_PedestrainOrientations
 */
#define ObstacleDataC2_PedestrainOrientations_unavailable 0

/**
 * @defgroup SIG_ObstacleDataC2_VehicleAngle Signal VehicleAngle of Message ObstacleDataC2 (0x425)
 *
 * Vehicle yaw angle information
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC2
 * @{
 */

/**
 * Signal VehicleAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC2_VehicleAngle and \ref GET_ObstacleDataC2_VehicleAngle instead.
 */
#define SIG_ObstacleDataC2_VehicleAngle 0, 1, 43, 16

/**
 * Signal VehicleAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC2_VehicleAngle or \ref INIT_ObstacleDataC2 instead.
 */
#define SETUP_ObstacleDataC2_VehicleAngle 0, 1, 43, 16, 0

/**
 * Get signal VehicleAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC2_VehicleAngle(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) |       \
     (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x07) << 13))

/**
 * Set signal VehicleAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC2_VehicleAngle(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
        buf[7] &= ~(0x07 << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x07) << 0;                                                      \
    }

/**
 * Set signal VehicleAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC2_VehicleAngle(buf) SET_ObstacleDataC2_VehicleAngle(buf, 0)

/**
 * Signal VehicleAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC2_VehicleAngle(x, fmt) ((x)*fmt / 100)

/**
 * Signal VehicleAngle raw initial value.
 */
#define START_ObstacleDataC2_VehicleAngle 0

/**
 * Signal VehicleAngle raw minimum value.
 */
#define MIN_ObstacleDataC2_VehicleAngle -32768

/**
 * Signal VehicleAngle raw maximum value.
 */
#define MAX_ObstacleDataC2_VehicleAngle 32767

/**
 * Signal VehicleAngle raw offset value.
 */
#define OFF_ObstacleDataC2_VehicleAngle 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC2_reserved_C Signal reserved_C of Message ObstacleDataC2 (0x425)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC2
 * @{
 */

/**
 * Signal reserved_C configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC2_reserved_C and \ref GET_ObstacleDataC2_reserved_C instead.
 */
#define SIG_ObstacleDataC2_reserved_C 0, 0, 59, 5

/**
 * Signal reserved_C setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC2_reserved_C or \ref INIT_ObstacleDataC2 instead.
 */
#define SETUP_ObstacleDataC2_reserved_C 0, 0, 59, 5, 0

/**
 * Get signal reserved_C from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC2_reserved_C(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0))

/**
 * Set signal reserved_C in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC2_reserved_C(buf, val)                                                                        \
    {                                                                                                                  \
        buf[7] &= ~(0x1f << 3);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
    }

/**
 * Set signal reserved_C in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC2_reserved_C(buf) SET_ObstacleDataC2_reserved_C(buf, 0)

/**
 * Signal reserved_C value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC2_reserved_C(x, fmt) ((x)*fmt)

/**
 * Signal reserved_C raw initial value.
 */
#define START_ObstacleDataC2_reserved_C 0

/**
 * Signal reserved_C raw minimum value.
 */
#define MIN_ObstacleDataC2_reserved_C 0

/**
 * Signal reserved_C raw maximum value.
 */
#define MAX_ObstacleDataC2_reserved_C 0

/**
 * Signal reserved_C raw offset value.
 */
#define OFF_ObstacleDataC2_reserved_C 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB5_ObstacleLength Signal ObstacleLength of Message ObstacleDataB5 (0x42d)
 *
 * The length of of the target vehicle.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB5
 * @{
 */

/**
 * Signal ObstacleLength configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB5_ObstacleLength and \ref GET_ObstacleDataB5_ObstacleLength instead.
 */
#define SIG_ObstacleDataB5_ObstacleLength 0, 0, 0, 8

/**
 * Signal ObstacleLength setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB5_ObstacleLength or \ref INIT_ObstacleDataB5 instead.
 */
#define SETUP_ObstacleDataB5_ObstacleLength 0, 0, 0, 8, 0

/**
 * Get signal ObstacleLength from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB5_ObstacleLength(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleLength in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB5_ObstacleLength(buf, val)                                                                    \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLength in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB5_ObstacleLength(buf) SET_ObstacleDataB5_ObstacleLength(buf, 0)

/**
 * Signal ObstacleLength value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB5_ObstacleLength(x, fmt) ((x)*fmt / 2)

/**
 * Signal ObstacleLength raw initial value.
 */
#define START_ObstacleDataB5_ObstacleLength 0

/**
 * Signal ObstacleLength raw minimum value.
 */
#define MIN_ObstacleDataB5_ObstacleLength 0

/**
 * Signal ObstacleLength raw maximum value.
 */
#define MAX_ObstacleDataB5_ObstacleLength 63

/**
 * Signal ObstacleLength raw offset value.
 */
#define OFF_ObstacleDataB5_ObstacleLength 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB5_ObstacleWidth Signal ObstacleWidth of Message ObstacleDataB5 (0x42d)
 *
 * The width of the target vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB5
 * @{
 */

/**
 * Signal ObstacleWidth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB5_ObstacleWidth and \ref GET_ObstacleDataB5_ObstacleWidth instead.
 */
#define SIG_ObstacleDataB5_ObstacleWidth 0, 0, 8, 8

/**
 * Signal ObstacleWidth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB5_ObstacleWidth or \ref INIT_ObstacleDataB5 instead.
 */
#define SETUP_ObstacleDataB5_ObstacleWidth 0, 0, 8, 8, 0

/**
 * Get signal ObstacleWidth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB5_ObstacleWidth(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleWidth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB5_ObstacleWidth(buf, val)                                                                     \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleWidth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB5_ObstacleWidth(buf) SET_ObstacleDataB5_ObstacleWidth(buf, 0)

/**
 * Signal ObstacleWidth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB5_ObstacleWidth(x, fmt) ((x)*fmt / 20)

/**
 * Signal ObstacleWidth raw initial value.
 */
#define START_ObstacleDataB5_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw minimum value.
 */
#define MIN_ObstacleDataB5_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw maximum value.
 */
#define MAX_ObstacleDataB5_ObstacleWidth 250

/**
 * Signal ObstacleWidth raw offset value.
 */
#define OFF_ObstacleDataB5_ObstacleWidth 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB5_ObstacleAge Signal ObstacleAge of Message ObstacleDataB5 (0x42d)
 *
 * Frame age of obstacle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB5
 * @{
 */

/**
 * Signal ObstacleAge configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB5_ObstacleAge and \ref GET_ObstacleDataB5_ObstacleAge instead.
 */
#define SIG_ObstacleDataB5_ObstacleAge 0, 0, 16, 16

/**
 * Signal ObstacleAge setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB5_ObstacleAge or \ref INIT_ObstacleDataB5 instead.
 */
#define SETUP_ObstacleDataB5_ObstacleAge 0, 0, 16, 16, 0

/**
 * Get signal ObstacleAge from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB5_ObstacleAge(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAge in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB5_ObstacleAge(buf, val)                                                                       \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAge in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB5_ObstacleAge(buf) SET_ObstacleDataB5_ObstacleAge(buf, 0)

/**
 * Signal ObstacleAge value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB5_ObstacleAge(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleAge raw initial value.
 */
#define START_ObstacleDataB5_ObstacleAge 0

/**
 * Signal ObstacleAge raw minimum value.
 */
#define MIN_ObstacleDataB5_ObstacleAge 0

/**
 * Signal ObstacleAge raw maximum value.
 */
#define MAX_ObstacleDataB5_ObstacleAge 65535

/**
 * Signal ObstacleAge raw offset value.
 */
#define OFF_ObstacleDataB5_ObstacleAge 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB5_ObstacleLane Signal ObstacleLane of Message ObstacleDataB5 (0x42d)
 *
 * Reseved. Not Implemented update next lane(distinguish left or right)
 *
 * Contains the value table \ref ENUM_ObstacleDataB5_ObstacleLane.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB5
 * @{
 */

/**
 * Signal ObstacleLane configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB5_ObstacleLane and \ref GET_ObstacleDataB5_ObstacleLane instead.
 */
#define SIG_ObstacleDataB5_ObstacleLane 0, 0, 32, 3

/**
 * Signal ObstacleLane setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB5_ObstacleLane or \ref INIT_ObstacleDataB5 instead.
 */
#define SETUP_ObstacleDataB5_ObstacleLane 0, 0, 32, 3, 0

/**
 * Get signal ObstacleLane from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB5_ObstacleLane(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0))

/**
 * Set signal ObstacleLane in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB5_ObstacleLane(buf, val)                                                                      \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLane in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB5_ObstacleLane(buf) SET_ObstacleDataB5_ObstacleLane(buf, 0)

/**
 * Signal ObstacleLane value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB5_ObstacleLane(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleLane raw initial value.
 */
#define START_ObstacleDataB5_ObstacleLane 0

/**
 * Signal ObstacleLane raw minimum value.
 */
#define MIN_ObstacleDataB5_ObstacleLane 0

/**
 * Signal ObstacleLane raw maximum value.
 */
#define MAX_ObstacleDataB5_ObstacleLane 7

/**
 * Signal ObstacleLane raw offset value.
 */
#define OFF_ObstacleDataB5_ObstacleLane 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB5_ObstacleLane Value Table for Signal ObstacleLane in Message ObstacleDataB5 (0x42d)
 *
 * Enum values defined for \ref SIG_ObstacleDataB5_ObstacleLane.
 *
 * @ingroup SIG_ObstacleDataB5_ObstacleLane
 */

/**
 * Value table ObstacleDataB5_ObstacleLane entry reserved.
 *
 * @ingroup ENUM_ObstacleDataB5_ObstacleLane
 */
#define ObstacleDataB5_ObstacleLane_reserved 7

/**
 * Value table ObstacleDataB5_ObstacleLane entry reserved_6.
 *
 * @ingroup ENUM_ObstacleDataB5_ObstacleLane
 */
#define ObstacleDataB5_ObstacleLane_reserved_6 6

/**
 * Value table ObstacleDataB5_ObstacleLane entry next.
 *
 * next lane right
 *
 * @ingroup ENUM_ObstacleDataB5_ObstacleLane
 */
#define ObstacleDataB5_ObstacleLane_next 5

/**
 * Value table ObstacleDataB5_ObstacleLane entry next_4.
 *
 * next lane left
 *
 * @ingroup ENUM_ObstacleDataB5_ObstacleLane
 */
#define ObstacleDataB5_ObstacleLane_next_4 4

/**
 * Value table ObstacleDataB5_ObstacleLane entry next_3.
 *
 * lane right
 *
 * @ingroup ENUM_ObstacleDataB5_ObstacleLane
 */
#define ObstacleDataB5_ObstacleLane_next_3 3

/**
 * Value table ObstacleDataB5_ObstacleLane entry next_2.
 *
 * lane left
 *
 * @ingroup ENUM_ObstacleDataB5_ObstacleLane
 */
#define ObstacleDataB5_ObstacleLane_next_2 2

/**
 * Value table ObstacleDataB5_ObstacleLane entry ego.
 *
 * lane
 *
 * @ingroup ENUM_ObstacleDataB5_ObstacleLane
 */
#define ObstacleDataB5_ObstacleLane_ego 1

/**
 * Value table ObstacleDataB5_ObstacleLane entry not.
 *
 * assigned
 *
 * @ingroup ENUM_ObstacleDataB5_ObstacleLane
 */
#define ObstacleDataB5_ObstacleLane_not 0

/**
 * @defgroup SIG_ObstacleDataB5_CIPVFlag Signal CIPVFlag of Message ObstacleDataB5 (0x42d)
 *
 * Critical Vehicle in Path Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB5_CIPVFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB5
 * @{
 */

/**
 * Signal CIPVFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB5_CIPVFlag and \ref GET_ObstacleDataB5_CIPVFlag instead.
 */
#define SIG_ObstacleDataB5_CIPVFlag 0, 0, 35, 1

/**
 * Signal CIPVFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB5_CIPVFlag or \ref INIT_ObstacleDataB5 instead.
 */
#define SETUP_ObstacleDataB5_CIPVFlag 0, 0, 35, 1, 0

/**
 * Get signal CIPVFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB5_CIPVFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0))

/**
 * Set signal CIPVFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB5_CIPVFlag(buf, val)                                                                          \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 3);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal CIPVFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB5_CIPVFlag(buf) SET_ObstacleDataB5_CIPVFlag(buf, 0)

/**
 * Signal CIPVFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB5_CIPVFlag(x, fmt) ((x)*fmt)

/**
 * Signal CIPVFlag raw initial value.
 */
#define START_ObstacleDataB5_CIPVFlag 0

/**
 * Signal CIPVFlag raw minimum value.
 */
#define MIN_ObstacleDataB5_CIPVFlag 0

/**
 * Signal CIPVFlag raw maximum value.
 */
#define MAX_ObstacleDataB5_CIPVFlag 1

/**
 * Signal CIPVFlag raw offset value.
 */
#define OFF_ObstacleDataB5_CIPVFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB5_CIPVFlag Value Table for Signal CIPVFlag in Message ObstacleDataB5 (0x42d)
 *
 * Enum values defined for \ref SIG_ObstacleDataB5_CIPVFlag.
 *
 * @ingroup SIG_ObstacleDataB5_CIPVFlag
 */

/**
 * Value table ObstacleDataB5_CIPVFlag entry CIPV.
 *
 * @ingroup ENUM_ObstacleDataB5_CIPVFlag
 */
#define ObstacleDataB5_CIPVFlag_CIPV 1

/**
 * Value table ObstacleDataB5_CIPVFlag entry not.
 *
 * CIPV
 *
 * @ingroup ENUM_ObstacleDataB5_CIPVFlag
 */
#define ObstacleDataB5_CIPVFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB5_MCPFlag Signal MCPFlag of Message ObstacleDataB5 (0x42d)
 *
 * Most Critical Pedestrain Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB5_MCPFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB5
 * @{
 */

/**
 * Signal MCPFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB5_MCPFlag and \ref GET_ObstacleDataB5_MCPFlag instead.
 */
#define SIG_ObstacleDataB5_MCPFlag 0, 0, 36, 1

/**
 * Signal MCPFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB5_MCPFlag or \ref INIT_ObstacleDataB5 instead.
 */
#define SETUP_ObstacleDataB5_MCPFlag 0, 0, 36, 1, 0

/**
 * Get signal MCPFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB5_MCPFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0))

/**
 * Set signal MCPFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB5_MCPFlag(buf, val)                                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 4);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal MCPFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB5_MCPFlag(buf) SET_ObstacleDataB5_MCPFlag(buf, 0)

/**
 * Signal MCPFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB5_MCPFlag(x, fmt) ((x)*fmt)

/**
 * Signal MCPFlag raw initial value.
 */
#define START_ObstacleDataB5_MCPFlag 0

/**
 * Signal MCPFlag raw minimum value.
 */
#define MIN_ObstacleDataB5_MCPFlag 0

/**
 * Signal MCPFlag raw maximum value.
 */
#define MAX_ObstacleDataB5_MCPFlag 1

/**
 * Signal MCPFlag raw offset value.
 */
#define OFF_ObstacleDataB5_MCPFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB5_MCPFlag Value Table for Signal MCPFlag in Message ObstacleDataB5 (0x42d)
 *
 * Enum values defined for \ref SIG_ObstacleDataB5_MCPFlag.
 *
 * @ingroup SIG_ObstacleDataB5_MCPFlag
 */

/**
 * Value table ObstacleDataB5_MCPFlag entry MCP.
 *
 * @ingroup ENUM_ObstacleDataB5_MCPFlag
 */
#define ObstacleDataB5_MCPFlag_MCP 1

/**
 * Value table ObstacleDataB5_MCPFlag entry not.
 *
 * MCP
 *
 * @ingroup ENUM_ObstacleDataB5_MCPFlag
 */
#define ObstacleDataB5_MCPFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB5_PedSubType Signal PedSubType of Message ObstacleDataB5 (0x42d)
 *
 * Pestrain sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataB5_PedSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB5
 * @{
 */

/**
 * Signal PedSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB5_PedSubType and \ref GET_ObstacleDataB5_PedSubType instead.
 */
#define SIG_ObstacleDataB5_PedSubType 0, 0, 37, 2

/**
 * Signal PedSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB5_PedSubType or \ref INIT_ObstacleDataB5 instead.
 */
#define SETUP_ObstacleDataB5_PedSubType 0, 0, 37, 2, 0

/**
 * Get signal PedSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB5_PedSubType(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x03) << 0))

/**
 * Set signal PedSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB5_PedSubType(buf, val)                                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0x03 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 5;                                                                 \
    }

/**
 * Set signal PedSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB5_PedSubType(buf) SET_ObstacleDataB5_PedSubType(buf, 0)

/**
 * Signal PedSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB5_PedSubType(x, fmt) ((x)*fmt)

/**
 * Signal PedSubType raw initial value.
 */
#define START_ObstacleDataB5_PedSubType 0

/**
 * Signal PedSubType raw minimum value.
 */
#define MIN_ObstacleDataB5_PedSubType 0

/**
 * Signal PedSubType raw maximum value.
 */
#define MAX_ObstacleDataB5_PedSubType 3

/**
 * Signal PedSubType raw offset value.
 */
#define OFF_ObstacleDataB5_PedSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB5_PedSubType Value Table for Signal PedSubType in Message ObstacleDataB5 (0x42d)
 *
 * Enum values defined for \ref SIG_ObstacleDataB5_PedSubType.
 *
 * @ingroup SIG_ObstacleDataB5_PedSubType
 */

/**
 * Value table ObstacleDataB5_PedSubType entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB5_PedSubType
 */
#define ObstacleDataB5_PedSubType_undefined 2

/**
 * Value table ObstacleDataB5_PedSubType entry Child.
 *
 * @ingroup ENUM_ObstacleDataB5_PedSubType
 */
#define ObstacleDataB5_PedSubType_Child 1

/**
 * Value table ObstacleDataB5_PedSubType entry Adult.
 *
 * @ingroup ENUM_ObstacleDataB5_PedSubType
 */
#define ObstacleDataB5_PedSubType_Adult 0

/**
 * @defgroup SIG_ObstacleDataB5_PedPos Signal PedPos of Message ObstacleDataB5 (0x42d)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataB5_PedPos.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB5
 * @{
 */

/**
 * Signal PedPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB5_PedPos and \ref GET_ObstacleDataB5_PedPos instead.
 */
#define SIG_ObstacleDataB5_PedPos 0, 1, 39, 12

/**
 * Signal PedPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB5_PedPos or \ref INIT_ObstacleDataB5 instead.
 */
#define SETUP_ObstacleDataB5_PedPos 0, 1, 39, 12, 0

/**
 * Get signal PedPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB5_PedPos(buf)                                                                                 \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 2) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x07) << 9))

/**
 * Set signal PedPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB5_PedPos(buf, val)                                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0;                                                       \
        buf[6] &= ~(0x07 << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0;                                                       \
    }

/**
 * Set signal PedPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB5_PedPos(buf) SET_ObstacleDataB5_PedPos(buf, 0)

/**
 * Signal PedPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB5_PedPos(x, fmt) ((x)*fmt)

/**
 * Signal PedPos raw initial value.
 */
#define START_ObstacleDataB5_PedPos 0

/**
 * Signal PedPos raw minimum value.
 */
#define MIN_ObstacleDataB5_PedPos 0

/**
 * Signal PedPos raw maximum value.
 */
#define MAX_ObstacleDataB5_PedPos 3

/**
 * Signal PedPos raw offset value.
 */
#define OFF_ObstacleDataB5_PedPos 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB5_PedPos Value Table for Signal PedPos in Message ObstacleDataB5 (0x42d)
 *
 * Enum values defined for \ref SIG_ObstacleDataB5_PedPos.
 *
 * @ingroup SIG_ObstacleDataB5_PedPos
 */

/**
 * Value table ObstacleDataB5_PedPos entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB5_PedPos
 */
#define ObstacleDataB5_PedPos_undefined 5

/**
 * Value table ObstacleDataB5_PedPos entry lying.
 *
 * @ingroup ENUM_ObstacleDataB5_PedPos
 */
#define ObstacleDataB5_PedPos_lying 4

/**
 * Value table ObstacleDataB5_PedPos entry walk.
 *
 * @ingroup ENUM_ObstacleDataB5_PedPos
 */
#define ObstacleDataB5_PedPos_walk 3

/**
 * Value table ObstacleDataB5_PedPos entry sit.
 *
 * @ingroup ENUM_ObstacleDataB5_PedPos
 */
#define ObstacleDataB5_PedPos_sit 2

/**
 * Value table ObstacleDataB5_PedPos entry crouch.
 *
 * @ingroup ENUM_ObstacleDataB5_PedPos
 */
#define ObstacleDataB5_PedPos_crouch 1

/**
 * Value table ObstacleDataB5_PedPos entry stand.
 *
 * @ingroup ENUM_ObstacleDataB5_PedPos
 */
#define ObstacleDataB5_PedPos_stand 0

/**
 * @defgroup SIG_ObstacleDataB5_reserved_b1 Signal reserved_b1 of Message ObstacleDataB5 (0x42d)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB5
 * @{
 */

/**
 * Signal reserved_b1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB5_reserved_b1 and \ref GET_ObstacleDataB5_reserved_b1 instead.
 */
#define SIG_ObstacleDataB5_reserved_b1 0, 0, 51, 13

/**
 * Signal reserved_b1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB5_reserved_b1 or \ref INIT_ObstacleDataB5 instead.
 */
#define SETUP_ObstacleDataB5_reserved_b1 0, 0, 51, 13, 0

/**
 * Get signal reserved_b1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB5_reserved_b1(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 5))

/**
 * Set signal reserved_b1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB5_reserved_b1(buf, val)                                                                       \
    {                                                                                                                  \
        buf[6] &= ~(0x1f << 3);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
    }

/**
 * Set signal reserved_b1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB5_reserved_b1(buf) SET_ObstacleDataB5_reserved_b1(buf, 0)

/**
 * Signal reserved_b1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB5_reserved_b1(x, fmt) ((x)*fmt)

/**
 * Signal reserved_b1 raw initial value.
 */
#define START_ObstacleDataB5_reserved_b1 0

/**
 * Signal reserved_b1 raw minimum value.
 */
#define MIN_ObstacleDataB5_reserved_b1 0

/**
 * Signal reserved_b1 raw maximum value.
 */
#define MAX_ObstacleDataB5_reserved_b1 0

/**
 * Signal reserved_b1 raw offset value.
 */
#define OFF_ObstacleDataB5_reserved_b1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB6_ObstacleLength Signal ObstacleLength of Message ObstacleDataB6 (0x430)
 *
 * The length of of the target vehicle.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB6
 * @{
 */

/**
 * Signal ObstacleLength configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB6_ObstacleLength and \ref GET_ObstacleDataB6_ObstacleLength instead.
 */
#define SIG_ObstacleDataB6_ObstacleLength 0, 0, 0, 8

/**
 * Signal ObstacleLength setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB6_ObstacleLength or \ref INIT_ObstacleDataB6 instead.
 */
#define SETUP_ObstacleDataB6_ObstacleLength 0, 0, 0, 8, 0

/**
 * Get signal ObstacleLength from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB6_ObstacleLength(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleLength in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB6_ObstacleLength(buf, val)                                                                    \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLength in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB6_ObstacleLength(buf) SET_ObstacleDataB6_ObstacleLength(buf, 0)

/**
 * Signal ObstacleLength value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB6_ObstacleLength(x, fmt) ((x)*fmt / 2)

/**
 * Signal ObstacleLength raw initial value.
 */
#define START_ObstacleDataB6_ObstacleLength 0

/**
 * Signal ObstacleLength raw minimum value.
 */
#define MIN_ObstacleDataB6_ObstacleLength 0

/**
 * Signal ObstacleLength raw maximum value.
 */
#define MAX_ObstacleDataB6_ObstacleLength 63

/**
 * Signal ObstacleLength raw offset value.
 */
#define OFF_ObstacleDataB6_ObstacleLength 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB6_ObstacleWidth Signal ObstacleWidth of Message ObstacleDataB6 (0x430)
 *
 * The width of the target vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB6
 * @{
 */

/**
 * Signal ObstacleWidth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB6_ObstacleWidth and \ref GET_ObstacleDataB6_ObstacleWidth instead.
 */
#define SIG_ObstacleDataB6_ObstacleWidth 0, 0, 8, 8

/**
 * Signal ObstacleWidth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB6_ObstacleWidth or \ref INIT_ObstacleDataB6 instead.
 */
#define SETUP_ObstacleDataB6_ObstacleWidth 0, 0, 8, 8, 0

/**
 * Get signal ObstacleWidth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB6_ObstacleWidth(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleWidth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB6_ObstacleWidth(buf, val)                                                                     \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleWidth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB6_ObstacleWidth(buf) SET_ObstacleDataB6_ObstacleWidth(buf, 0)

/**
 * Signal ObstacleWidth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB6_ObstacleWidth(x, fmt) ((x)*fmt / 20)

/**
 * Signal ObstacleWidth raw initial value.
 */
#define START_ObstacleDataB6_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw minimum value.
 */
#define MIN_ObstacleDataB6_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw maximum value.
 */
#define MAX_ObstacleDataB6_ObstacleWidth 250

/**
 * Signal ObstacleWidth raw offset value.
 */
#define OFF_ObstacleDataB6_ObstacleWidth 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB6_ObstacleAge Signal ObstacleAge of Message ObstacleDataB6 (0x430)
 *
 * Frame age of obstacle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB6
 * @{
 */

/**
 * Signal ObstacleAge configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB6_ObstacleAge and \ref GET_ObstacleDataB6_ObstacleAge instead.
 */
#define SIG_ObstacleDataB6_ObstacleAge 0, 0, 16, 16

/**
 * Signal ObstacleAge setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB6_ObstacleAge or \ref INIT_ObstacleDataB6 instead.
 */
#define SETUP_ObstacleDataB6_ObstacleAge 0, 0, 16, 16, 0

/**
 * Get signal ObstacleAge from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB6_ObstacleAge(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAge in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB6_ObstacleAge(buf, val)                                                                       \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAge in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB6_ObstacleAge(buf) SET_ObstacleDataB6_ObstacleAge(buf, 0)

/**
 * Signal ObstacleAge value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB6_ObstacleAge(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleAge raw initial value.
 */
#define START_ObstacleDataB6_ObstacleAge 0

/**
 * Signal ObstacleAge raw minimum value.
 */
#define MIN_ObstacleDataB6_ObstacleAge 0

/**
 * Signal ObstacleAge raw maximum value.
 */
#define MAX_ObstacleDataB6_ObstacleAge 65535

/**
 * Signal ObstacleAge raw offset value.
 */
#define OFF_ObstacleDataB6_ObstacleAge 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB6_ObstacleLane Signal ObstacleLane of Message ObstacleDataB6 (0x430)
 *
 * Reseved. Not Implemented update next lane(distinguish left or right)
 *
 * Contains the value table \ref ENUM_ObstacleDataB6_ObstacleLane.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB6
 * @{
 */

/**
 * Signal ObstacleLane configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB6_ObstacleLane and \ref GET_ObstacleDataB6_ObstacleLane instead.
 */
#define SIG_ObstacleDataB6_ObstacleLane 0, 0, 32, 3

/**
 * Signal ObstacleLane setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB6_ObstacleLane or \ref INIT_ObstacleDataB6 instead.
 */
#define SETUP_ObstacleDataB6_ObstacleLane 0, 0, 32, 3, 0

/**
 * Get signal ObstacleLane from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB6_ObstacleLane(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0))

/**
 * Set signal ObstacleLane in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB6_ObstacleLane(buf, val)                                                                      \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLane in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB6_ObstacleLane(buf) SET_ObstacleDataB6_ObstacleLane(buf, 0)

/**
 * Signal ObstacleLane value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB6_ObstacleLane(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleLane raw initial value.
 */
#define START_ObstacleDataB6_ObstacleLane 0

/**
 * Signal ObstacleLane raw minimum value.
 */
#define MIN_ObstacleDataB6_ObstacleLane 0

/**
 * Signal ObstacleLane raw maximum value.
 */
#define MAX_ObstacleDataB6_ObstacleLane 7

/**
 * Signal ObstacleLane raw offset value.
 */
#define OFF_ObstacleDataB6_ObstacleLane 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB6_ObstacleLane Value Table for Signal ObstacleLane in Message ObstacleDataB6 (0x430)
 *
 * Enum values defined for \ref SIG_ObstacleDataB6_ObstacleLane.
 *
 * @ingroup SIG_ObstacleDataB6_ObstacleLane
 */

/**
 * Value table ObstacleDataB6_ObstacleLane entry reserved.
 *
 * @ingroup ENUM_ObstacleDataB6_ObstacleLane
 */
#define ObstacleDataB6_ObstacleLane_reserved 7

/**
 * Value table ObstacleDataB6_ObstacleLane entry reserved_6.
 *
 * @ingroup ENUM_ObstacleDataB6_ObstacleLane
 */
#define ObstacleDataB6_ObstacleLane_reserved_6 6

/**
 * Value table ObstacleDataB6_ObstacleLane entry next.
 *
 * next lane right
 *
 * @ingroup ENUM_ObstacleDataB6_ObstacleLane
 */
#define ObstacleDataB6_ObstacleLane_next 5

/**
 * Value table ObstacleDataB6_ObstacleLane entry next_4.
 *
 * next lane left
 *
 * @ingroup ENUM_ObstacleDataB6_ObstacleLane
 */
#define ObstacleDataB6_ObstacleLane_next_4 4

/**
 * Value table ObstacleDataB6_ObstacleLane entry next_3.
 *
 * lane right
 *
 * @ingroup ENUM_ObstacleDataB6_ObstacleLane
 */
#define ObstacleDataB6_ObstacleLane_next_3 3

/**
 * Value table ObstacleDataB6_ObstacleLane entry next_2.
 *
 * lane left
 *
 * @ingroup ENUM_ObstacleDataB6_ObstacleLane
 */
#define ObstacleDataB6_ObstacleLane_next_2 2

/**
 * Value table ObstacleDataB6_ObstacleLane entry ego.
 *
 * lane
 *
 * @ingroup ENUM_ObstacleDataB6_ObstacleLane
 */
#define ObstacleDataB6_ObstacleLane_ego 1

/**
 * Value table ObstacleDataB6_ObstacleLane entry not.
 *
 * assigned
 *
 * @ingroup ENUM_ObstacleDataB6_ObstacleLane
 */
#define ObstacleDataB6_ObstacleLane_not 0

/**
 * @defgroup SIG_ObstacleDataB6_CIPVFlag Signal CIPVFlag of Message ObstacleDataB6 (0x430)
 *
 * Critical Vehicle in Path Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB6_CIPVFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB6
 * @{
 */

/**
 * Signal CIPVFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB6_CIPVFlag and \ref GET_ObstacleDataB6_CIPVFlag instead.
 */
#define SIG_ObstacleDataB6_CIPVFlag 0, 0, 35, 1

/**
 * Signal CIPVFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB6_CIPVFlag or \ref INIT_ObstacleDataB6 instead.
 */
#define SETUP_ObstacleDataB6_CIPVFlag 0, 0, 35, 1, 0

/**
 * Get signal CIPVFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB6_CIPVFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0))

/**
 * Set signal CIPVFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB6_CIPVFlag(buf, val)                                                                          \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 3);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal CIPVFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB6_CIPVFlag(buf) SET_ObstacleDataB6_CIPVFlag(buf, 0)

/**
 * Signal CIPVFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB6_CIPVFlag(x, fmt) ((x)*fmt)

/**
 * Signal CIPVFlag raw initial value.
 */
#define START_ObstacleDataB6_CIPVFlag 0

/**
 * Signal CIPVFlag raw minimum value.
 */
#define MIN_ObstacleDataB6_CIPVFlag 0

/**
 * Signal CIPVFlag raw maximum value.
 */
#define MAX_ObstacleDataB6_CIPVFlag 1

/**
 * Signal CIPVFlag raw offset value.
 */
#define OFF_ObstacleDataB6_CIPVFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB6_CIPVFlag Value Table for Signal CIPVFlag in Message ObstacleDataB6 (0x430)
 *
 * Enum values defined for \ref SIG_ObstacleDataB6_CIPVFlag.
 *
 * @ingroup SIG_ObstacleDataB6_CIPVFlag
 */

/**
 * Value table ObstacleDataB6_CIPVFlag entry CIPV.
 *
 * @ingroup ENUM_ObstacleDataB6_CIPVFlag
 */
#define ObstacleDataB6_CIPVFlag_CIPV 1

/**
 * Value table ObstacleDataB6_CIPVFlag entry not.
 *
 * CIPV
 *
 * @ingroup ENUM_ObstacleDataB6_CIPVFlag
 */
#define ObstacleDataB6_CIPVFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB6_MCPFlag Signal MCPFlag of Message ObstacleDataB6 (0x430)
 *
 * Most Critical Pedestrain Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB6_MCPFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB6
 * @{
 */

/**
 * Signal MCPFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB6_MCPFlag and \ref GET_ObstacleDataB6_MCPFlag instead.
 */
#define SIG_ObstacleDataB6_MCPFlag 0, 0, 36, 1

/**
 * Signal MCPFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB6_MCPFlag or \ref INIT_ObstacleDataB6 instead.
 */
#define SETUP_ObstacleDataB6_MCPFlag 0, 0, 36, 1, 0

/**
 * Get signal MCPFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB6_MCPFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0))

/**
 * Set signal MCPFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB6_MCPFlag(buf, val)                                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 4);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal MCPFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB6_MCPFlag(buf) SET_ObstacleDataB6_MCPFlag(buf, 0)

/**
 * Signal MCPFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB6_MCPFlag(x, fmt) ((x)*fmt)

/**
 * Signal MCPFlag raw initial value.
 */
#define START_ObstacleDataB6_MCPFlag 0

/**
 * Signal MCPFlag raw minimum value.
 */
#define MIN_ObstacleDataB6_MCPFlag 0

/**
 * Signal MCPFlag raw maximum value.
 */
#define MAX_ObstacleDataB6_MCPFlag 1

/**
 * Signal MCPFlag raw offset value.
 */
#define OFF_ObstacleDataB6_MCPFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB6_MCPFlag Value Table for Signal MCPFlag in Message ObstacleDataB6 (0x430)
 *
 * Enum values defined for \ref SIG_ObstacleDataB6_MCPFlag.
 *
 * @ingroup SIG_ObstacleDataB6_MCPFlag
 */

/**
 * Value table ObstacleDataB6_MCPFlag entry MCP.
 *
 * @ingroup ENUM_ObstacleDataB6_MCPFlag
 */
#define ObstacleDataB6_MCPFlag_MCP 1

/**
 * Value table ObstacleDataB6_MCPFlag entry not.
 *
 * MCP
 *
 * @ingroup ENUM_ObstacleDataB6_MCPFlag
 */
#define ObstacleDataB6_MCPFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB6_PedSubType Signal PedSubType of Message ObstacleDataB6 (0x430)
 *
 * Pestrain sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataB6_PedSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB6
 * @{
 */

/**
 * Signal PedSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB6_PedSubType and \ref GET_ObstacleDataB6_PedSubType instead.
 */
#define SIG_ObstacleDataB6_PedSubType 0, 0, 37, 2

/**
 * Signal PedSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB6_PedSubType or \ref INIT_ObstacleDataB6 instead.
 */
#define SETUP_ObstacleDataB6_PedSubType 0, 0, 37, 2, 0

/**
 * Get signal PedSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB6_PedSubType(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x03) << 0))

/**
 * Set signal PedSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB6_PedSubType(buf, val)                                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0x03 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 5;                                                                 \
    }

/**
 * Set signal PedSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB6_PedSubType(buf) SET_ObstacleDataB6_PedSubType(buf, 0)

/**
 * Signal PedSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB6_PedSubType(x, fmt) ((x)*fmt)

/**
 * Signal PedSubType raw initial value.
 */
#define START_ObstacleDataB6_PedSubType 0

/**
 * Signal PedSubType raw minimum value.
 */
#define MIN_ObstacleDataB6_PedSubType 0

/**
 * Signal PedSubType raw maximum value.
 */
#define MAX_ObstacleDataB6_PedSubType 3

/**
 * Signal PedSubType raw offset value.
 */
#define OFF_ObstacleDataB6_PedSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB6_PedSubType Value Table for Signal PedSubType in Message ObstacleDataB6 (0x430)
 *
 * Enum values defined for \ref SIG_ObstacleDataB6_PedSubType.
 *
 * @ingroup SIG_ObstacleDataB6_PedSubType
 */

/**
 * Value table ObstacleDataB6_PedSubType entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB6_PedSubType
 */
#define ObstacleDataB6_PedSubType_undefined 2

/**
 * Value table ObstacleDataB6_PedSubType entry Child.
 *
 * @ingroup ENUM_ObstacleDataB6_PedSubType
 */
#define ObstacleDataB6_PedSubType_Child 1

/**
 * Value table ObstacleDataB6_PedSubType entry Adult.
 *
 * @ingroup ENUM_ObstacleDataB6_PedSubType
 */
#define ObstacleDataB6_PedSubType_Adult 0

/**
 * @defgroup SIG_ObstacleDataB6_PedPos Signal PedPos of Message ObstacleDataB6 (0x430)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataB6_PedPos.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB6
 * @{
 */

/**
 * Signal PedPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB6_PedPos and \ref GET_ObstacleDataB6_PedPos instead.
 */
#define SIG_ObstacleDataB6_PedPos 0, 1, 39, 12

/**
 * Signal PedPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB6_PedPos or \ref INIT_ObstacleDataB6 instead.
 */
#define SETUP_ObstacleDataB6_PedPos 0, 1, 39, 12, 0

/**
 * Get signal PedPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB6_PedPos(buf)                                                                                 \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 2) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x07) << 9))

/**
 * Set signal PedPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB6_PedPos(buf, val)                                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0;                                                       \
        buf[6] &= ~(0x07 << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0;                                                       \
    }

/**
 * Set signal PedPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB6_PedPos(buf) SET_ObstacleDataB6_PedPos(buf, 0)

/**
 * Signal PedPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB6_PedPos(x, fmt) ((x)*fmt)

/**
 * Signal PedPos raw initial value.
 */
#define START_ObstacleDataB6_PedPos 0

/**
 * Signal PedPos raw minimum value.
 */
#define MIN_ObstacleDataB6_PedPos 0

/**
 * Signal PedPos raw maximum value.
 */
#define MAX_ObstacleDataB6_PedPos 3

/**
 * Signal PedPos raw offset value.
 */
#define OFF_ObstacleDataB6_PedPos 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB6_PedPos Value Table for Signal PedPos in Message ObstacleDataB6 (0x430)
 *
 * Enum values defined for \ref SIG_ObstacleDataB6_PedPos.
 *
 * @ingroup SIG_ObstacleDataB6_PedPos
 */

/**
 * Value table ObstacleDataB6_PedPos entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB6_PedPos
 */
#define ObstacleDataB6_PedPos_undefined 5

/**
 * Value table ObstacleDataB6_PedPos entry lying.
 *
 * @ingroup ENUM_ObstacleDataB6_PedPos
 */
#define ObstacleDataB6_PedPos_lying 4

/**
 * Value table ObstacleDataB6_PedPos entry walk.
 *
 * @ingroup ENUM_ObstacleDataB6_PedPos
 */
#define ObstacleDataB6_PedPos_walk 3

/**
 * Value table ObstacleDataB6_PedPos entry sit.
 *
 * @ingroup ENUM_ObstacleDataB6_PedPos
 */
#define ObstacleDataB6_PedPos_sit 2

/**
 * Value table ObstacleDataB6_PedPos entry crouch.
 *
 * @ingroup ENUM_ObstacleDataB6_PedPos
 */
#define ObstacleDataB6_PedPos_crouch 1

/**
 * Value table ObstacleDataB6_PedPos entry stand.
 *
 * @ingroup ENUM_ObstacleDataB6_PedPos
 */
#define ObstacleDataB6_PedPos_stand 0

/**
 * @defgroup SIG_ObstacleDataB6_reserved_b1 Signal reserved_b1 of Message ObstacleDataB6 (0x430)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB6
 * @{
 */

/**
 * Signal reserved_b1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB6_reserved_b1 and \ref GET_ObstacleDataB6_reserved_b1 instead.
 */
#define SIG_ObstacleDataB6_reserved_b1 0, 0, 51, 13

/**
 * Signal reserved_b1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB6_reserved_b1 or \ref INIT_ObstacleDataB6 instead.
 */
#define SETUP_ObstacleDataB6_reserved_b1 0, 0, 51, 13, 0

/**
 * Get signal reserved_b1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB6_reserved_b1(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 5))

/**
 * Set signal reserved_b1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB6_reserved_b1(buf, val)                                                                       \
    {                                                                                                                  \
        buf[6] &= ~(0x1f << 3);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
    }

/**
 * Set signal reserved_b1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB6_reserved_b1(buf) SET_ObstacleDataB6_reserved_b1(buf, 0)

/**
 * Signal reserved_b1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB6_reserved_b1(x, fmt) ((x)*fmt)

/**
 * Signal reserved_b1 raw initial value.
 */
#define START_ObstacleDataB6_reserved_b1 0

/**
 * Signal reserved_b1 raw minimum value.
 */
#define MIN_ObstacleDataB6_reserved_b1 0

/**
 * Signal reserved_b1 raw maximum value.
 */
#define MAX_ObstacleDataB6_reserved_b1 0

/**
 * Signal reserved_b1 raw offset value.
 */
#define OFF_ObstacleDataB6_reserved_b1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB7_ObstacleLength Signal ObstacleLength of Message ObstacleDataB7 (0x433)
 *
 * The length of of the target vehicle.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB7
 * @{
 */

/**
 * Signal ObstacleLength configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB7_ObstacleLength and \ref GET_ObstacleDataB7_ObstacleLength instead.
 */
#define SIG_ObstacleDataB7_ObstacleLength 0, 0, 0, 8

/**
 * Signal ObstacleLength setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB7_ObstacleLength or \ref INIT_ObstacleDataB7 instead.
 */
#define SETUP_ObstacleDataB7_ObstacleLength 0, 0, 0, 8, 0

/**
 * Get signal ObstacleLength from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB7_ObstacleLength(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleLength in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB7_ObstacleLength(buf, val)                                                                    \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLength in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB7_ObstacleLength(buf) SET_ObstacleDataB7_ObstacleLength(buf, 0)

/**
 * Signal ObstacleLength value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB7_ObstacleLength(x, fmt) ((x)*fmt / 2)

/**
 * Signal ObstacleLength raw initial value.
 */
#define START_ObstacleDataB7_ObstacleLength 0

/**
 * Signal ObstacleLength raw minimum value.
 */
#define MIN_ObstacleDataB7_ObstacleLength 0

/**
 * Signal ObstacleLength raw maximum value.
 */
#define MAX_ObstacleDataB7_ObstacleLength 63

/**
 * Signal ObstacleLength raw offset value.
 */
#define OFF_ObstacleDataB7_ObstacleLength 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB7_ObstacleWidth Signal ObstacleWidth of Message ObstacleDataB7 (0x433)
 *
 * The width of the target vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB7
 * @{
 */

/**
 * Signal ObstacleWidth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB7_ObstacleWidth and \ref GET_ObstacleDataB7_ObstacleWidth instead.
 */
#define SIG_ObstacleDataB7_ObstacleWidth 0, 0, 8, 8

/**
 * Signal ObstacleWidth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB7_ObstacleWidth or \ref INIT_ObstacleDataB7 instead.
 */
#define SETUP_ObstacleDataB7_ObstacleWidth 0, 0, 8, 8, 0

/**
 * Get signal ObstacleWidth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB7_ObstacleWidth(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleWidth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB7_ObstacleWidth(buf, val)                                                                     \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleWidth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB7_ObstacleWidth(buf) SET_ObstacleDataB7_ObstacleWidth(buf, 0)

/**
 * Signal ObstacleWidth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB7_ObstacleWidth(x, fmt) ((x)*fmt / 20)

/**
 * Signal ObstacleWidth raw initial value.
 */
#define START_ObstacleDataB7_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw minimum value.
 */
#define MIN_ObstacleDataB7_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw maximum value.
 */
#define MAX_ObstacleDataB7_ObstacleWidth 250

/**
 * Signal ObstacleWidth raw offset value.
 */
#define OFF_ObstacleDataB7_ObstacleWidth 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB7_ObstacleAge Signal ObstacleAge of Message ObstacleDataB7 (0x433)
 *
 * Frame age of obstacle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB7
 * @{
 */

/**
 * Signal ObstacleAge configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB7_ObstacleAge and \ref GET_ObstacleDataB7_ObstacleAge instead.
 */
#define SIG_ObstacleDataB7_ObstacleAge 0, 0, 16, 16

/**
 * Signal ObstacleAge setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB7_ObstacleAge or \ref INIT_ObstacleDataB7 instead.
 */
#define SETUP_ObstacleDataB7_ObstacleAge 0, 0, 16, 16, 0

/**
 * Get signal ObstacleAge from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB7_ObstacleAge(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAge in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB7_ObstacleAge(buf, val)                                                                       \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAge in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB7_ObstacleAge(buf) SET_ObstacleDataB7_ObstacleAge(buf, 0)

/**
 * Signal ObstacleAge value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB7_ObstacleAge(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleAge raw initial value.
 */
#define START_ObstacleDataB7_ObstacleAge 0

/**
 * Signal ObstacleAge raw minimum value.
 */
#define MIN_ObstacleDataB7_ObstacleAge 0

/**
 * Signal ObstacleAge raw maximum value.
 */
#define MAX_ObstacleDataB7_ObstacleAge 65535

/**
 * Signal ObstacleAge raw offset value.
 */
#define OFF_ObstacleDataB7_ObstacleAge 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB7_ObstacleLane Signal ObstacleLane of Message ObstacleDataB7 (0x433)
 *
 * Reseved. Not Implemented update next lane(distinguish left or right)
 *
 * Contains the value table \ref ENUM_ObstacleDataB7_ObstacleLane.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB7
 * @{
 */

/**
 * Signal ObstacleLane configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB7_ObstacleLane and \ref GET_ObstacleDataB7_ObstacleLane instead.
 */
#define SIG_ObstacleDataB7_ObstacleLane 0, 0, 32, 3

/**
 * Signal ObstacleLane setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB7_ObstacleLane or \ref INIT_ObstacleDataB7 instead.
 */
#define SETUP_ObstacleDataB7_ObstacleLane 0, 0, 32, 3, 0

/**
 * Get signal ObstacleLane from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB7_ObstacleLane(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0))

/**
 * Set signal ObstacleLane in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB7_ObstacleLane(buf, val)                                                                      \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLane in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB7_ObstacleLane(buf) SET_ObstacleDataB7_ObstacleLane(buf, 0)

/**
 * Signal ObstacleLane value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB7_ObstacleLane(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleLane raw initial value.
 */
#define START_ObstacleDataB7_ObstacleLane 0

/**
 * Signal ObstacleLane raw minimum value.
 */
#define MIN_ObstacleDataB7_ObstacleLane 0

/**
 * Signal ObstacleLane raw maximum value.
 */
#define MAX_ObstacleDataB7_ObstacleLane 7

/**
 * Signal ObstacleLane raw offset value.
 */
#define OFF_ObstacleDataB7_ObstacleLane 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB7_ObstacleLane Value Table for Signal ObstacleLane in Message ObstacleDataB7 (0x433)
 *
 * Enum values defined for \ref SIG_ObstacleDataB7_ObstacleLane.
 *
 * @ingroup SIG_ObstacleDataB7_ObstacleLane
 */

/**
 * Value table ObstacleDataB7_ObstacleLane entry reserved.
 *
 * @ingroup ENUM_ObstacleDataB7_ObstacleLane
 */
#define ObstacleDataB7_ObstacleLane_reserved 7

/**
 * Value table ObstacleDataB7_ObstacleLane entry reserved_6.
 *
 * @ingroup ENUM_ObstacleDataB7_ObstacleLane
 */
#define ObstacleDataB7_ObstacleLane_reserved_6 6

/**
 * Value table ObstacleDataB7_ObstacleLane entry next.
 *
 * next lane right
 *
 * @ingroup ENUM_ObstacleDataB7_ObstacleLane
 */
#define ObstacleDataB7_ObstacleLane_next 5

/**
 * Value table ObstacleDataB7_ObstacleLane entry next_4.
 *
 * next lane left
 *
 * @ingroup ENUM_ObstacleDataB7_ObstacleLane
 */
#define ObstacleDataB7_ObstacleLane_next_4 4

/**
 * Value table ObstacleDataB7_ObstacleLane entry next_3.
 *
 * lane right
 *
 * @ingroup ENUM_ObstacleDataB7_ObstacleLane
 */
#define ObstacleDataB7_ObstacleLane_next_3 3

/**
 * Value table ObstacleDataB7_ObstacleLane entry next_2.
 *
 * lane left
 *
 * @ingroup ENUM_ObstacleDataB7_ObstacleLane
 */
#define ObstacleDataB7_ObstacleLane_next_2 2

/**
 * Value table ObstacleDataB7_ObstacleLane entry ego.
 *
 * lane
 *
 * @ingroup ENUM_ObstacleDataB7_ObstacleLane
 */
#define ObstacleDataB7_ObstacleLane_ego 1

/**
 * Value table ObstacleDataB7_ObstacleLane entry not.
 *
 * assigned
 *
 * @ingroup ENUM_ObstacleDataB7_ObstacleLane
 */
#define ObstacleDataB7_ObstacleLane_not 0

/**
 * @defgroup SIG_ObstacleDataB7_CIPVFlag Signal CIPVFlag of Message ObstacleDataB7 (0x433)
 *
 * Critical Vehicle in Path Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB7_CIPVFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB7
 * @{
 */

/**
 * Signal CIPVFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB7_CIPVFlag and \ref GET_ObstacleDataB7_CIPVFlag instead.
 */
#define SIG_ObstacleDataB7_CIPVFlag 0, 0, 35, 1

/**
 * Signal CIPVFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB7_CIPVFlag or \ref INIT_ObstacleDataB7 instead.
 */
#define SETUP_ObstacleDataB7_CIPVFlag 0, 0, 35, 1, 0

/**
 * Get signal CIPVFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB7_CIPVFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0))

/**
 * Set signal CIPVFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB7_CIPVFlag(buf, val)                                                                          \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 3);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal CIPVFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB7_CIPVFlag(buf) SET_ObstacleDataB7_CIPVFlag(buf, 0)

/**
 * Signal CIPVFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB7_CIPVFlag(x, fmt) ((x)*fmt)

/**
 * Signal CIPVFlag raw initial value.
 */
#define START_ObstacleDataB7_CIPVFlag 0

/**
 * Signal CIPVFlag raw minimum value.
 */
#define MIN_ObstacleDataB7_CIPVFlag 0

/**
 * Signal CIPVFlag raw maximum value.
 */
#define MAX_ObstacleDataB7_CIPVFlag 1

/**
 * Signal CIPVFlag raw offset value.
 */
#define OFF_ObstacleDataB7_CIPVFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB7_CIPVFlag Value Table for Signal CIPVFlag in Message ObstacleDataB7 (0x433)
 *
 * Enum values defined for \ref SIG_ObstacleDataB7_CIPVFlag.
 *
 * @ingroup SIG_ObstacleDataB7_CIPVFlag
 */

/**
 * Value table ObstacleDataB7_CIPVFlag entry CIPV.
 *
 * @ingroup ENUM_ObstacleDataB7_CIPVFlag
 */
#define ObstacleDataB7_CIPVFlag_CIPV 1

/**
 * Value table ObstacleDataB7_CIPVFlag entry not.
 *
 * CIPV
 *
 * @ingroup ENUM_ObstacleDataB7_CIPVFlag
 */
#define ObstacleDataB7_CIPVFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB7_MCPFlag Signal MCPFlag of Message ObstacleDataB7 (0x433)
 *
 * Most Critical Pedestrain Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB7_MCPFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB7
 * @{
 */

/**
 * Signal MCPFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB7_MCPFlag and \ref GET_ObstacleDataB7_MCPFlag instead.
 */
#define SIG_ObstacleDataB7_MCPFlag 0, 0, 36, 1

/**
 * Signal MCPFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB7_MCPFlag or \ref INIT_ObstacleDataB7 instead.
 */
#define SETUP_ObstacleDataB7_MCPFlag 0, 0, 36, 1, 0

/**
 * Get signal MCPFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB7_MCPFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0))

/**
 * Set signal MCPFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB7_MCPFlag(buf, val)                                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 4);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal MCPFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB7_MCPFlag(buf) SET_ObstacleDataB7_MCPFlag(buf, 0)

/**
 * Signal MCPFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB7_MCPFlag(x, fmt) ((x)*fmt)

/**
 * Signal MCPFlag raw initial value.
 */
#define START_ObstacleDataB7_MCPFlag 0

/**
 * Signal MCPFlag raw minimum value.
 */
#define MIN_ObstacleDataB7_MCPFlag 0

/**
 * Signal MCPFlag raw maximum value.
 */
#define MAX_ObstacleDataB7_MCPFlag 1

/**
 * Signal MCPFlag raw offset value.
 */
#define OFF_ObstacleDataB7_MCPFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB7_MCPFlag Value Table for Signal MCPFlag in Message ObstacleDataB7 (0x433)
 *
 * Enum values defined for \ref SIG_ObstacleDataB7_MCPFlag.
 *
 * @ingroup SIG_ObstacleDataB7_MCPFlag
 */

/**
 * Value table ObstacleDataB7_MCPFlag entry MCP.
 *
 * @ingroup ENUM_ObstacleDataB7_MCPFlag
 */
#define ObstacleDataB7_MCPFlag_MCP 1

/**
 * Value table ObstacleDataB7_MCPFlag entry not.
 *
 * MCP
 *
 * @ingroup ENUM_ObstacleDataB7_MCPFlag
 */
#define ObstacleDataB7_MCPFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB7_PedSubType Signal PedSubType of Message ObstacleDataB7 (0x433)
 *
 * Pestrain sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataB7_PedSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB7
 * @{
 */

/**
 * Signal PedSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB7_PedSubType and \ref GET_ObstacleDataB7_PedSubType instead.
 */
#define SIG_ObstacleDataB7_PedSubType 0, 0, 37, 2

/**
 * Signal PedSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB7_PedSubType or \ref INIT_ObstacleDataB7 instead.
 */
#define SETUP_ObstacleDataB7_PedSubType 0, 0, 37, 2, 0

/**
 * Get signal PedSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB7_PedSubType(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x03) << 0))

/**
 * Set signal PedSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB7_PedSubType(buf, val)                                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0x03 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 5;                                                                 \
    }

/**
 * Set signal PedSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB7_PedSubType(buf) SET_ObstacleDataB7_PedSubType(buf, 0)

/**
 * Signal PedSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB7_PedSubType(x, fmt) ((x)*fmt)

/**
 * Signal PedSubType raw initial value.
 */
#define START_ObstacleDataB7_PedSubType 0

/**
 * Signal PedSubType raw minimum value.
 */
#define MIN_ObstacleDataB7_PedSubType 0

/**
 * Signal PedSubType raw maximum value.
 */
#define MAX_ObstacleDataB7_PedSubType 3

/**
 * Signal PedSubType raw offset value.
 */
#define OFF_ObstacleDataB7_PedSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB7_PedSubType Value Table for Signal PedSubType in Message ObstacleDataB7 (0x433)
 *
 * Enum values defined for \ref SIG_ObstacleDataB7_PedSubType.
 *
 * @ingroup SIG_ObstacleDataB7_PedSubType
 */

/**
 * Value table ObstacleDataB7_PedSubType entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB7_PedSubType
 */
#define ObstacleDataB7_PedSubType_undefined 2

/**
 * Value table ObstacleDataB7_PedSubType entry Child.
 *
 * @ingroup ENUM_ObstacleDataB7_PedSubType
 */
#define ObstacleDataB7_PedSubType_Child 1

/**
 * Value table ObstacleDataB7_PedSubType entry Adult.
 *
 * @ingroup ENUM_ObstacleDataB7_PedSubType
 */
#define ObstacleDataB7_PedSubType_Adult 0

/**
 * @defgroup SIG_ObstacleDataB7_PedPos Signal PedPos of Message ObstacleDataB7 (0x433)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataB7_PedPos.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB7
 * @{
 */

/**
 * Signal PedPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB7_PedPos and \ref GET_ObstacleDataB7_PedPos instead.
 */
#define SIG_ObstacleDataB7_PedPos 0, 1, 39, 12

/**
 * Signal PedPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB7_PedPos or \ref INIT_ObstacleDataB7 instead.
 */
#define SETUP_ObstacleDataB7_PedPos 0, 1, 39, 12, 0

/**
 * Get signal PedPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB7_PedPos(buf)                                                                                 \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 2) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x07) << 9))

/**
 * Set signal PedPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB7_PedPos(buf, val)                                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0;                                                       \
        buf[6] &= ~(0x07 << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0;                                                       \
    }

/**
 * Set signal PedPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB7_PedPos(buf) SET_ObstacleDataB7_PedPos(buf, 0)

/**
 * Signal PedPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB7_PedPos(x, fmt) ((x)*fmt)

/**
 * Signal PedPos raw initial value.
 */
#define START_ObstacleDataB7_PedPos 0

/**
 * Signal PedPos raw minimum value.
 */
#define MIN_ObstacleDataB7_PedPos 0

/**
 * Signal PedPos raw maximum value.
 */
#define MAX_ObstacleDataB7_PedPos 3

/**
 * Signal PedPos raw offset value.
 */
#define OFF_ObstacleDataB7_PedPos 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB7_PedPos Value Table for Signal PedPos in Message ObstacleDataB7 (0x433)
 *
 * Enum values defined for \ref SIG_ObstacleDataB7_PedPos.
 *
 * @ingroup SIG_ObstacleDataB7_PedPos
 */

/**
 * Value table ObstacleDataB7_PedPos entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB7_PedPos
 */
#define ObstacleDataB7_PedPos_undefined 5

/**
 * Value table ObstacleDataB7_PedPos entry lying.
 *
 * @ingroup ENUM_ObstacleDataB7_PedPos
 */
#define ObstacleDataB7_PedPos_lying 4

/**
 * Value table ObstacleDataB7_PedPos entry walk.
 *
 * @ingroup ENUM_ObstacleDataB7_PedPos
 */
#define ObstacleDataB7_PedPos_walk 3

/**
 * Value table ObstacleDataB7_PedPos entry sit.
 *
 * @ingroup ENUM_ObstacleDataB7_PedPos
 */
#define ObstacleDataB7_PedPos_sit 2

/**
 * Value table ObstacleDataB7_PedPos entry crouch.
 *
 * @ingroup ENUM_ObstacleDataB7_PedPos
 */
#define ObstacleDataB7_PedPos_crouch 1

/**
 * Value table ObstacleDataB7_PedPos entry stand.
 *
 * @ingroup ENUM_ObstacleDataB7_PedPos
 */
#define ObstacleDataB7_PedPos_stand 0

/**
 * @defgroup SIG_ObstacleDataB7_reserved_b1 Signal reserved_b1 of Message ObstacleDataB7 (0x433)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB7
 * @{
 */

/**
 * Signal reserved_b1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB7_reserved_b1 and \ref GET_ObstacleDataB7_reserved_b1 instead.
 */
#define SIG_ObstacleDataB7_reserved_b1 0, 0, 51, 13

/**
 * Signal reserved_b1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB7_reserved_b1 or \ref INIT_ObstacleDataB7 instead.
 */
#define SETUP_ObstacleDataB7_reserved_b1 0, 0, 51, 13, 0

/**
 * Get signal reserved_b1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB7_reserved_b1(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 5))

/**
 * Set signal reserved_b1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB7_reserved_b1(buf, val)                                                                       \
    {                                                                                                                  \
        buf[6] &= ~(0x1f << 3);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
    }

/**
 * Set signal reserved_b1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB7_reserved_b1(buf) SET_ObstacleDataB7_reserved_b1(buf, 0)

/**
 * Signal reserved_b1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB7_reserved_b1(x, fmt) ((x)*fmt)

/**
 * Signal reserved_b1 raw initial value.
 */
#define START_ObstacleDataB7_reserved_b1 0

/**
 * Signal reserved_b1 raw minimum value.
 */
#define MIN_ObstacleDataB7_reserved_b1 0

/**
 * Signal reserved_b1 raw maximum value.
 */
#define MAX_ObstacleDataB7_reserved_b1 0

/**
 * Signal reserved_b1 raw offset value.
 */
#define OFF_ObstacleDataB7_reserved_b1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB8_ObstacleLength Signal ObstacleLength of Message ObstacleDataB8 (0x436)
 *
 * The length of of the target vehicle.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB8
 * @{
 */

/**
 * Signal ObstacleLength configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB8_ObstacleLength and \ref GET_ObstacleDataB8_ObstacleLength instead.
 */
#define SIG_ObstacleDataB8_ObstacleLength 0, 0, 0, 8

/**
 * Signal ObstacleLength setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB8_ObstacleLength or \ref INIT_ObstacleDataB8 instead.
 */
#define SETUP_ObstacleDataB8_ObstacleLength 0, 0, 0, 8, 0

/**
 * Get signal ObstacleLength from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB8_ObstacleLength(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleLength in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB8_ObstacleLength(buf, val)                                                                    \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLength in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB8_ObstacleLength(buf) SET_ObstacleDataB8_ObstacleLength(buf, 0)

/**
 * Signal ObstacleLength value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB8_ObstacleLength(x, fmt) ((x)*fmt / 2)

/**
 * Signal ObstacleLength raw initial value.
 */
#define START_ObstacleDataB8_ObstacleLength 0

/**
 * Signal ObstacleLength raw minimum value.
 */
#define MIN_ObstacleDataB8_ObstacleLength 0

/**
 * Signal ObstacleLength raw maximum value.
 */
#define MAX_ObstacleDataB8_ObstacleLength 63

/**
 * Signal ObstacleLength raw offset value.
 */
#define OFF_ObstacleDataB8_ObstacleLength 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB8_ObstacleWidth Signal ObstacleWidth of Message ObstacleDataB8 (0x436)
 *
 * The width of the target vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB8
 * @{
 */

/**
 * Signal ObstacleWidth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB8_ObstacleWidth and \ref GET_ObstacleDataB8_ObstacleWidth instead.
 */
#define SIG_ObstacleDataB8_ObstacleWidth 0, 0, 8, 8

/**
 * Signal ObstacleWidth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB8_ObstacleWidth or \ref INIT_ObstacleDataB8 instead.
 */
#define SETUP_ObstacleDataB8_ObstacleWidth 0, 0, 8, 8, 0

/**
 * Get signal ObstacleWidth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB8_ObstacleWidth(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleWidth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB8_ObstacleWidth(buf, val)                                                                     \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleWidth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB8_ObstacleWidth(buf) SET_ObstacleDataB8_ObstacleWidth(buf, 0)

/**
 * Signal ObstacleWidth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB8_ObstacleWidth(x, fmt) ((x)*fmt / 20)

/**
 * Signal ObstacleWidth raw initial value.
 */
#define START_ObstacleDataB8_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw minimum value.
 */
#define MIN_ObstacleDataB8_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw maximum value.
 */
#define MAX_ObstacleDataB8_ObstacleWidth 250

/**
 * Signal ObstacleWidth raw offset value.
 */
#define OFF_ObstacleDataB8_ObstacleWidth 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB8_ObstacleAge Signal ObstacleAge of Message ObstacleDataB8 (0x436)
 *
 * Frame age of obstacle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB8
 * @{
 */

/**
 * Signal ObstacleAge configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB8_ObstacleAge and \ref GET_ObstacleDataB8_ObstacleAge instead.
 */
#define SIG_ObstacleDataB8_ObstacleAge 0, 0, 16, 16

/**
 * Signal ObstacleAge setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB8_ObstacleAge or \ref INIT_ObstacleDataB8 instead.
 */
#define SETUP_ObstacleDataB8_ObstacleAge 0, 0, 16, 16, 0

/**
 * Get signal ObstacleAge from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB8_ObstacleAge(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAge in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB8_ObstacleAge(buf, val)                                                                       \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAge in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB8_ObstacleAge(buf) SET_ObstacleDataB8_ObstacleAge(buf, 0)

/**
 * Signal ObstacleAge value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB8_ObstacleAge(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleAge raw initial value.
 */
#define START_ObstacleDataB8_ObstacleAge 0

/**
 * Signal ObstacleAge raw minimum value.
 */
#define MIN_ObstacleDataB8_ObstacleAge 0

/**
 * Signal ObstacleAge raw maximum value.
 */
#define MAX_ObstacleDataB8_ObstacleAge 65535

/**
 * Signal ObstacleAge raw offset value.
 */
#define OFF_ObstacleDataB8_ObstacleAge 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB8_ObstacleLane Signal ObstacleLane of Message ObstacleDataB8 (0x436)
 *
 * Reseved. Not Implemented update next lane(distinguish left or right)
 *
 * Contains the value table \ref ENUM_ObstacleDataB8_ObstacleLane.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB8
 * @{
 */

/**
 * Signal ObstacleLane configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB8_ObstacleLane and \ref GET_ObstacleDataB8_ObstacleLane instead.
 */
#define SIG_ObstacleDataB8_ObstacleLane 0, 0, 32, 3

/**
 * Signal ObstacleLane setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB8_ObstacleLane or \ref INIT_ObstacleDataB8 instead.
 */
#define SETUP_ObstacleDataB8_ObstacleLane 0, 0, 32, 3, 0

/**
 * Get signal ObstacleLane from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB8_ObstacleLane(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0))

/**
 * Set signal ObstacleLane in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB8_ObstacleLane(buf, val)                                                                      \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLane in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB8_ObstacleLane(buf) SET_ObstacleDataB8_ObstacleLane(buf, 0)

/**
 * Signal ObstacleLane value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB8_ObstacleLane(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleLane raw initial value.
 */
#define START_ObstacleDataB8_ObstacleLane 0

/**
 * Signal ObstacleLane raw minimum value.
 */
#define MIN_ObstacleDataB8_ObstacleLane 0

/**
 * Signal ObstacleLane raw maximum value.
 */
#define MAX_ObstacleDataB8_ObstacleLane 7

/**
 * Signal ObstacleLane raw offset value.
 */
#define OFF_ObstacleDataB8_ObstacleLane 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB8_ObstacleLane Value Table for Signal ObstacleLane in Message ObstacleDataB8 (0x436)
 *
 * Enum values defined for \ref SIG_ObstacleDataB8_ObstacleLane.
 *
 * @ingroup SIG_ObstacleDataB8_ObstacleLane
 */

/**
 * Value table ObstacleDataB8_ObstacleLane entry reserved.
 *
 * @ingroup ENUM_ObstacleDataB8_ObstacleLane
 */
#define ObstacleDataB8_ObstacleLane_reserved 7

/**
 * Value table ObstacleDataB8_ObstacleLane entry reserved_6.
 *
 * @ingroup ENUM_ObstacleDataB8_ObstacleLane
 */
#define ObstacleDataB8_ObstacleLane_reserved_6 6

/**
 * Value table ObstacleDataB8_ObstacleLane entry next.
 *
 * next lane right
 *
 * @ingroup ENUM_ObstacleDataB8_ObstacleLane
 */
#define ObstacleDataB8_ObstacleLane_next 5

/**
 * Value table ObstacleDataB8_ObstacleLane entry next_4.
 *
 * next lane left
 *
 * @ingroup ENUM_ObstacleDataB8_ObstacleLane
 */
#define ObstacleDataB8_ObstacleLane_next_4 4

/**
 * Value table ObstacleDataB8_ObstacleLane entry next_3.
 *
 * lane right
 *
 * @ingroup ENUM_ObstacleDataB8_ObstacleLane
 */
#define ObstacleDataB8_ObstacleLane_next_3 3

/**
 * Value table ObstacleDataB8_ObstacleLane entry next_2.
 *
 * lane left
 *
 * @ingroup ENUM_ObstacleDataB8_ObstacleLane
 */
#define ObstacleDataB8_ObstacleLane_next_2 2

/**
 * Value table ObstacleDataB8_ObstacleLane entry ego.
 *
 * lane
 *
 * @ingroup ENUM_ObstacleDataB8_ObstacleLane
 */
#define ObstacleDataB8_ObstacleLane_ego 1

/**
 * Value table ObstacleDataB8_ObstacleLane entry not.
 *
 * assigned
 *
 * @ingroup ENUM_ObstacleDataB8_ObstacleLane
 */
#define ObstacleDataB8_ObstacleLane_not 0

/**
 * @defgroup SIG_ObstacleDataB8_CIPVFlag Signal CIPVFlag of Message ObstacleDataB8 (0x436)
 *
 * Critical Vehicle in Path Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB8_CIPVFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB8
 * @{
 */

/**
 * Signal CIPVFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB8_CIPVFlag and \ref GET_ObstacleDataB8_CIPVFlag instead.
 */
#define SIG_ObstacleDataB8_CIPVFlag 0, 0, 35, 1

/**
 * Signal CIPVFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB8_CIPVFlag or \ref INIT_ObstacleDataB8 instead.
 */
#define SETUP_ObstacleDataB8_CIPVFlag 0, 0, 35, 1, 0

/**
 * Get signal CIPVFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB8_CIPVFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0))

/**
 * Set signal CIPVFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB8_CIPVFlag(buf, val)                                                                          \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 3);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal CIPVFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB8_CIPVFlag(buf) SET_ObstacleDataB8_CIPVFlag(buf, 0)

/**
 * Signal CIPVFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB8_CIPVFlag(x, fmt) ((x)*fmt)

/**
 * Signal CIPVFlag raw initial value.
 */
#define START_ObstacleDataB8_CIPVFlag 0

/**
 * Signal CIPVFlag raw minimum value.
 */
#define MIN_ObstacleDataB8_CIPVFlag 0

/**
 * Signal CIPVFlag raw maximum value.
 */
#define MAX_ObstacleDataB8_CIPVFlag 1

/**
 * Signal CIPVFlag raw offset value.
 */
#define OFF_ObstacleDataB8_CIPVFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB8_CIPVFlag Value Table for Signal CIPVFlag in Message ObstacleDataB8 (0x436)
 *
 * Enum values defined for \ref SIG_ObstacleDataB8_CIPVFlag.
 *
 * @ingroup SIG_ObstacleDataB8_CIPVFlag
 */

/**
 * Value table ObstacleDataB8_CIPVFlag entry CIPV.
 *
 * @ingroup ENUM_ObstacleDataB8_CIPVFlag
 */
#define ObstacleDataB8_CIPVFlag_CIPV 1

/**
 * Value table ObstacleDataB8_CIPVFlag entry not.
 *
 * CIPV
 *
 * @ingroup ENUM_ObstacleDataB8_CIPVFlag
 */
#define ObstacleDataB8_CIPVFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB8_MCPFlag Signal MCPFlag of Message ObstacleDataB8 (0x436)
 *
 * Most Critical Pedestrain Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB8_MCPFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB8
 * @{
 */

/**
 * Signal MCPFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB8_MCPFlag and \ref GET_ObstacleDataB8_MCPFlag instead.
 */
#define SIG_ObstacleDataB8_MCPFlag 0, 0, 36, 1

/**
 * Signal MCPFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB8_MCPFlag or \ref INIT_ObstacleDataB8 instead.
 */
#define SETUP_ObstacleDataB8_MCPFlag 0, 0, 36, 1, 0

/**
 * Get signal MCPFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB8_MCPFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0))

/**
 * Set signal MCPFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB8_MCPFlag(buf, val)                                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 4);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal MCPFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB8_MCPFlag(buf) SET_ObstacleDataB8_MCPFlag(buf, 0)

/**
 * Signal MCPFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB8_MCPFlag(x, fmt) ((x)*fmt)

/**
 * Signal MCPFlag raw initial value.
 */
#define START_ObstacleDataB8_MCPFlag 0

/**
 * Signal MCPFlag raw minimum value.
 */
#define MIN_ObstacleDataB8_MCPFlag 0

/**
 * Signal MCPFlag raw maximum value.
 */
#define MAX_ObstacleDataB8_MCPFlag 1

/**
 * Signal MCPFlag raw offset value.
 */
#define OFF_ObstacleDataB8_MCPFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB8_MCPFlag Value Table for Signal MCPFlag in Message ObstacleDataB8 (0x436)
 *
 * Enum values defined for \ref SIG_ObstacleDataB8_MCPFlag.
 *
 * @ingroup SIG_ObstacleDataB8_MCPFlag
 */

/**
 * Value table ObstacleDataB8_MCPFlag entry MCP.
 *
 * @ingroup ENUM_ObstacleDataB8_MCPFlag
 */
#define ObstacleDataB8_MCPFlag_MCP 1

/**
 * Value table ObstacleDataB8_MCPFlag entry not.
 *
 * MCP
 *
 * @ingroup ENUM_ObstacleDataB8_MCPFlag
 */
#define ObstacleDataB8_MCPFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB8_PedSubType Signal PedSubType of Message ObstacleDataB8 (0x436)
 *
 * Pestrain sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataB8_PedSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB8
 * @{
 */

/**
 * Signal PedSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB8_PedSubType and \ref GET_ObstacleDataB8_PedSubType instead.
 */
#define SIG_ObstacleDataB8_PedSubType 0, 0, 37, 2

/**
 * Signal PedSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB8_PedSubType or \ref INIT_ObstacleDataB8 instead.
 */
#define SETUP_ObstacleDataB8_PedSubType 0, 0, 37, 2, 0

/**
 * Get signal PedSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB8_PedSubType(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x03) << 0))

/**
 * Set signal PedSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB8_PedSubType(buf, val)                                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0x03 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 5;                                                                 \
    }

/**
 * Set signal PedSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB8_PedSubType(buf) SET_ObstacleDataB8_PedSubType(buf, 0)

/**
 * Signal PedSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB8_PedSubType(x, fmt) ((x)*fmt)

/**
 * Signal PedSubType raw initial value.
 */
#define START_ObstacleDataB8_PedSubType 0

/**
 * Signal PedSubType raw minimum value.
 */
#define MIN_ObstacleDataB8_PedSubType 0

/**
 * Signal PedSubType raw maximum value.
 */
#define MAX_ObstacleDataB8_PedSubType 3

/**
 * Signal PedSubType raw offset value.
 */
#define OFF_ObstacleDataB8_PedSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB8_PedSubType Value Table for Signal PedSubType in Message ObstacleDataB8 (0x436)
 *
 * Enum values defined for \ref SIG_ObstacleDataB8_PedSubType.
 *
 * @ingroup SIG_ObstacleDataB8_PedSubType
 */

/**
 * Value table ObstacleDataB8_PedSubType entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB8_PedSubType
 */
#define ObstacleDataB8_PedSubType_undefined 2

/**
 * Value table ObstacleDataB8_PedSubType entry Child.
 *
 * @ingroup ENUM_ObstacleDataB8_PedSubType
 */
#define ObstacleDataB8_PedSubType_Child 1

/**
 * Value table ObstacleDataB8_PedSubType entry Adult.
 *
 * @ingroup ENUM_ObstacleDataB8_PedSubType
 */
#define ObstacleDataB8_PedSubType_Adult 0

/**
 * @defgroup SIG_ObstacleDataB8_PedPos Signal PedPos of Message ObstacleDataB8 (0x436)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataB8_PedPos.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB8
 * @{
 */

/**
 * Signal PedPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB8_PedPos and \ref GET_ObstacleDataB8_PedPos instead.
 */
#define SIG_ObstacleDataB8_PedPos 0, 1, 39, 12

/**
 * Signal PedPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB8_PedPos or \ref INIT_ObstacleDataB8 instead.
 */
#define SETUP_ObstacleDataB8_PedPos 0, 1, 39, 12, 0

/**
 * Get signal PedPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB8_PedPos(buf)                                                                                 \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 2) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x07) << 9))

/**
 * Set signal PedPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB8_PedPos(buf, val)                                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0;                                                       \
        buf[6] &= ~(0x07 << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0;                                                       \
    }

/**
 * Set signal PedPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB8_PedPos(buf) SET_ObstacleDataB8_PedPos(buf, 0)

/**
 * Signal PedPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB8_PedPos(x, fmt) ((x)*fmt)

/**
 * Signal PedPos raw initial value.
 */
#define START_ObstacleDataB8_PedPos 0

/**
 * Signal PedPos raw minimum value.
 */
#define MIN_ObstacleDataB8_PedPos 0

/**
 * Signal PedPos raw maximum value.
 */
#define MAX_ObstacleDataB8_PedPos 3

/**
 * Signal PedPos raw offset value.
 */
#define OFF_ObstacleDataB8_PedPos 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB8_PedPos Value Table for Signal PedPos in Message ObstacleDataB8 (0x436)
 *
 * Enum values defined for \ref SIG_ObstacleDataB8_PedPos.
 *
 * @ingroup SIG_ObstacleDataB8_PedPos
 */

/**
 * Value table ObstacleDataB8_PedPos entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB8_PedPos
 */
#define ObstacleDataB8_PedPos_undefined 5

/**
 * Value table ObstacleDataB8_PedPos entry lying.
 *
 * @ingroup ENUM_ObstacleDataB8_PedPos
 */
#define ObstacleDataB8_PedPos_lying 4

/**
 * Value table ObstacleDataB8_PedPos entry walk.
 *
 * @ingroup ENUM_ObstacleDataB8_PedPos
 */
#define ObstacleDataB8_PedPos_walk 3

/**
 * Value table ObstacleDataB8_PedPos entry sit.
 *
 * @ingroup ENUM_ObstacleDataB8_PedPos
 */
#define ObstacleDataB8_PedPos_sit 2

/**
 * Value table ObstacleDataB8_PedPos entry crouch.
 *
 * @ingroup ENUM_ObstacleDataB8_PedPos
 */
#define ObstacleDataB8_PedPos_crouch 1

/**
 * Value table ObstacleDataB8_PedPos entry stand.
 *
 * @ingroup ENUM_ObstacleDataB8_PedPos
 */
#define ObstacleDataB8_PedPos_stand 0

/**
 * @defgroup SIG_ObstacleDataB8_reserved_b1 Signal reserved_b1 of Message ObstacleDataB8 (0x436)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB8
 * @{
 */

/**
 * Signal reserved_b1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB8_reserved_b1 and \ref GET_ObstacleDataB8_reserved_b1 instead.
 */
#define SIG_ObstacleDataB8_reserved_b1 0, 0, 51, 13

/**
 * Signal reserved_b1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB8_reserved_b1 or \ref INIT_ObstacleDataB8 instead.
 */
#define SETUP_ObstacleDataB8_reserved_b1 0, 0, 51, 13, 0

/**
 * Get signal reserved_b1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB8_reserved_b1(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 5))

/**
 * Set signal reserved_b1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB8_reserved_b1(buf, val)                                                                       \
    {                                                                                                                  \
        buf[6] &= ~(0x1f << 3);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
    }

/**
 * Set signal reserved_b1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB8_reserved_b1(buf) SET_ObstacleDataB8_reserved_b1(buf, 0)

/**
 * Signal reserved_b1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB8_reserved_b1(x, fmt) ((x)*fmt)

/**
 * Signal reserved_b1 raw initial value.
 */
#define START_ObstacleDataB8_reserved_b1 0

/**
 * Signal reserved_b1 raw minimum value.
 */
#define MIN_ObstacleDataB8_reserved_b1 0

/**
 * Signal reserved_b1 raw maximum value.
 */
#define MAX_ObstacleDataB8_reserved_b1 0

/**
 * Signal reserved_b1 raw offset value.
 */
#define OFF_ObstacleDataB8_reserved_b1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB9_ObstacleLength Signal ObstacleLength of Message ObstacleDataB9 (0x439)
 *
 * The length of of the target vehicle.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB9
 * @{
 */

/**
 * Signal ObstacleLength configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB9_ObstacleLength and \ref GET_ObstacleDataB9_ObstacleLength instead.
 */
#define SIG_ObstacleDataB9_ObstacleLength 0, 0, 0, 8

/**
 * Signal ObstacleLength setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB9_ObstacleLength or \ref INIT_ObstacleDataB9 instead.
 */
#define SETUP_ObstacleDataB9_ObstacleLength 0, 0, 0, 8, 0

/**
 * Get signal ObstacleLength from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB9_ObstacleLength(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleLength in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB9_ObstacleLength(buf, val)                                                                    \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLength in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB9_ObstacleLength(buf) SET_ObstacleDataB9_ObstacleLength(buf, 0)

/**
 * Signal ObstacleLength value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB9_ObstacleLength(x, fmt) ((x)*fmt / 2)

/**
 * Signal ObstacleLength raw initial value.
 */
#define START_ObstacleDataB9_ObstacleLength 0

/**
 * Signal ObstacleLength raw minimum value.
 */
#define MIN_ObstacleDataB9_ObstacleLength 0

/**
 * Signal ObstacleLength raw maximum value.
 */
#define MAX_ObstacleDataB9_ObstacleLength 63

/**
 * Signal ObstacleLength raw offset value.
 */
#define OFF_ObstacleDataB9_ObstacleLength 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB9_ObstacleWidth Signal ObstacleWidth of Message ObstacleDataB9 (0x439)
 *
 * The width of the target vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB9
 * @{
 */

/**
 * Signal ObstacleWidth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB9_ObstacleWidth and \ref GET_ObstacleDataB9_ObstacleWidth instead.
 */
#define SIG_ObstacleDataB9_ObstacleWidth 0, 0, 8, 8

/**
 * Signal ObstacleWidth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB9_ObstacleWidth or \ref INIT_ObstacleDataB9 instead.
 */
#define SETUP_ObstacleDataB9_ObstacleWidth 0, 0, 8, 8, 0

/**
 * Get signal ObstacleWidth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB9_ObstacleWidth(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleWidth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB9_ObstacleWidth(buf, val)                                                                     \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleWidth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB9_ObstacleWidth(buf) SET_ObstacleDataB9_ObstacleWidth(buf, 0)

/**
 * Signal ObstacleWidth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB9_ObstacleWidth(x, fmt) ((x)*fmt / 20)

/**
 * Signal ObstacleWidth raw initial value.
 */
#define START_ObstacleDataB9_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw minimum value.
 */
#define MIN_ObstacleDataB9_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw maximum value.
 */
#define MAX_ObstacleDataB9_ObstacleWidth 250

/**
 * Signal ObstacleWidth raw offset value.
 */
#define OFF_ObstacleDataB9_ObstacleWidth 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB9_ObstacleAge Signal ObstacleAge of Message ObstacleDataB9 (0x439)
 *
 * Frame age of obstacle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB9
 * @{
 */

/**
 * Signal ObstacleAge configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB9_ObstacleAge and \ref GET_ObstacleDataB9_ObstacleAge instead.
 */
#define SIG_ObstacleDataB9_ObstacleAge 0, 0, 16, 16

/**
 * Signal ObstacleAge setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB9_ObstacleAge or \ref INIT_ObstacleDataB9 instead.
 */
#define SETUP_ObstacleDataB9_ObstacleAge 0, 0, 16, 16, 0

/**
 * Get signal ObstacleAge from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB9_ObstacleAge(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAge in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB9_ObstacleAge(buf, val)                                                                       \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAge in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB9_ObstacleAge(buf) SET_ObstacleDataB9_ObstacleAge(buf, 0)

/**
 * Signal ObstacleAge value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB9_ObstacleAge(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleAge raw initial value.
 */
#define START_ObstacleDataB9_ObstacleAge 0

/**
 * Signal ObstacleAge raw minimum value.
 */
#define MIN_ObstacleDataB9_ObstacleAge 0

/**
 * Signal ObstacleAge raw maximum value.
 */
#define MAX_ObstacleDataB9_ObstacleAge 65535

/**
 * Signal ObstacleAge raw offset value.
 */
#define OFF_ObstacleDataB9_ObstacleAge 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB9_ObstacleLane Signal ObstacleLane of Message ObstacleDataB9 (0x439)
 *
 * Reseved. Not Implemented update next lane(distinguish left or right)
 *
 * Contains the value table \ref ENUM_ObstacleDataB9_ObstacleLane.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB9
 * @{
 */

/**
 * Signal ObstacleLane configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB9_ObstacleLane and \ref GET_ObstacleDataB9_ObstacleLane instead.
 */
#define SIG_ObstacleDataB9_ObstacleLane 0, 0, 32, 3

/**
 * Signal ObstacleLane setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB9_ObstacleLane or \ref INIT_ObstacleDataB9 instead.
 */
#define SETUP_ObstacleDataB9_ObstacleLane 0, 0, 32, 3, 0

/**
 * Get signal ObstacleLane from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB9_ObstacleLane(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0))

/**
 * Set signal ObstacleLane in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB9_ObstacleLane(buf, val)                                                                      \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLane in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB9_ObstacleLane(buf) SET_ObstacleDataB9_ObstacleLane(buf, 0)

/**
 * Signal ObstacleLane value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB9_ObstacleLane(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleLane raw initial value.
 */
#define START_ObstacleDataB9_ObstacleLane 0

/**
 * Signal ObstacleLane raw minimum value.
 */
#define MIN_ObstacleDataB9_ObstacleLane 0

/**
 * Signal ObstacleLane raw maximum value.
 */
#define MAX_ObstacleDataB9_ObstacleLane 7

/**
 * Signal ObstacleLane raw offset value.
 */
#define OFF_ObstacleDataB9_ObstacleLane 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB9_ObstacleLane Value Table for Signal ObstacleLane in Message ObstacleDataB9 (0x439)
 *
 * Enum values defined for \ref SIG_ObstacleDataB9_ObstacleLane.
 *
 * @ingroup SIG_ObstacleDataB9_ObstacleLane
 */

/**
 * Value table ObstacleDataB9_ObstacleLane entry reserved.
 *
 * @ingroup ENUM_ObstacleDataB9_ObstacleLane
 */
#define ObstacleDataB9_ObstacleLane_reserved 7

/**
 * Value table ObstacleDataB9_ObstacleLane entry reserved_6.
 *
 * @ingroup ENUM_ObstacleDataB9_ObstacleLane
 */
#define ObstacleDataB9_ObstacleLane_reserved_6 6

/**
 * Value table ObstacleDataB9_ObstacleLane entry next.
 *
 * next lane right
 *
 * @ingroup ENUM_ObstacleDataB9_ObstacleLane
 */
#define ObstacleDataB9_ObstacleLane_next 5

/**
 * Value table ObstacleDataB9_ObstacleLane entry next_4.
 *
 * next lane left
 *
 * @ingroup ENUM_ObstacleDataB9_ObstacleLane
 */
#define ObstacleDataB9_ObstacleLane_next_4 4

/**
 * Value table ObstacleDataB9_ObstacleLane entry next_3.
 *
 * lane right
 *
 * @ingroup ENUM_ObstacleDataB9_ObstacleLane
 */
#define ObstacleDataB9_ObstacleLane_next_3 3

/**
 * Value table ObstacleDataB9_ObstacleLane entry next_2.
 *
 * lane left
 *
 * @ingroup ENUM_ObstacleDataB9_ObstacleLane
 */
#define ObstacleDataB9_ObstacleLane_next_2 2

/**
 * Value table ObstacleDataB9_ObstacleLane entry ego.
 *
 * lane
 *
 * @ingroup ENUM_ObstacleDataB9_ObstacleLane
 */
#define ObstacleDataB9_ObstacleLane_ego 1

/**
 * Value table ObstacleDataB9_ObstacleLane entry not.
 *
 * assigned
 *
 * @ingroup ENUM_ObstacleDataB9_ObstacleLane
 */
#define ObstacleDataB9_ObstacleLane_not 0

/**
 * @defgroup SIG_ObstacleDataB9_CIPVFlag Signal CIPVFlag of Message ObstacleDataB9 (0x439)
 *
 * Critical Vehicle in Path Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB9_CIPVFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB9
 * @{
 */

/**
 * Signal CIPVFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB9_CIPVFlag and \ref GET_ObstacleDataB9_CIPVFlag instead.
 */
#define SIG_ObstacleDataB9_CIPVFlag 0, 0, 35, 1

/**
 * Signal CIPVFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB9_CIPVFlag or \ref INIT_ObstacleDataB9 instead.
 */
#define SETUP_ObstacleDataB9_CIPVFlag 0, 0, 35, 1, 0

/**
 * Get signal CIPVFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB9_CIPVFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0))

/**
 * Set signal CIPVFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB9_CIPVFlag(buf, val)                                                                          \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 3);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal CIPVFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB9_CIPVFlag(buf) SET_ObstacleDataB9_CIPVFlag(buf, 0)

/**
 * Signal CIPVFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB9_CIPVFlag(x, fmt) ((x)*fmt)

/**
 * Signal CIPVFlag raw initial value.
 */
#define START_ObstacleDataB9_CIPVFlag 0

/**
 * Signal CIPVFlag raw minimum value.
 */
#define MIN_ObstacleDataB9_CIPVFlag 0

/**
 * Signal CIPVFlag raw maximum value.
 */
#define MAX_ObstacleDataB9_CIPVFlag 1

/**
 * Signal CIPVFlag raw offset value.
 */
#define OFF_ObstacleDataB9_CIPVFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB9_CIPVFlag Value Table for Signal CIPVFlag in Message ObstacleDataB9 (0x439)
 *
 * Enum values defined for \ref SIG_ObstacleDataB9_CIPVFlag.
 *
 * @ingroup SIG_ObstacleDataB9_CIPVFlag
 */

/**
 * Value table ObstacleDataB9_CIPVFlag entry CIPV.
 *
 * @ingroup ENUM_ObstacleDataB9_CIPVFlag
 */
#define ObstacleDataB9_CIPVFlag_CIPV 1

/**
 * Value table ObstacleDataB9_CIPVFlag entry not.
 *
 * CIPV
 *
 * @ingroup ENUM_ObstacleDataB9_CIPVFlag
 */
#define ObstacleDataB9_CIPVFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB9_MCPFlag Signal MCPFlag of Message ObstacleDataB9 (0x439)
 *
 * Most Critical Pedestrain Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB9_MCPFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB9
 * @{
 */

/**
 * Signal MCPFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB9_MCPFlag and \ref GET_ObstacleDataB9_MCPFlag instead.
 */
#define SIG_ObstacleDataB9_MCPFlag 0, 0, 36, 1

/**
 * Signal MCPFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB9_MCPFlag or \ref INIT_ObstacleDataB9 instead.
 */
#define SETUP_ObstacleDataB9_MCPFlag 0, 0, 36, 1, 0

/**
 * Get signal MCPFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB9_MCPFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0))

/**
 * Set signal MCPFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB9_MCPFlag(buf, val)                                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 4);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal MCPFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB9_MCPFlag(buf) SET_ObstacleDataB9_MCPFlag(buf, 0)

/**
 * Signal MCPFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB9_MCPFlag(x, fmt) ((x)*fmt)

/**
 * Signal MCPFlag raw initial value.
 */
#define START_ObstacleDataB9_MCPFlag 0

/**
 * Signal MCPFlag raw minimum value.
 */
#define MIN_ObstacleDataB9_MCPFlag 0

/**
 * Signal MCPFlag raw maximum value.
 */
#define MAX_ObstacleDataB9_MCPFlag 1

/**
 * Signal MCPFlag raw offset value.
 */
#define OFF_ObstacleDataB9_MCPFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB9_MCPFlag Value Table for Signal MCPFlag in Message ObstacleDataB9 (0x439)
 *
 * Enum values defined for \ref SIG_ObstacleDataB9_MCPFlag.
 *
 * @ingroup SIG_ObstacleDataB9_MCPFlag
 */

/**
 * Value table ObstacleDataB9_MCPFlag entry MCP.
 *
 * @ingroup ENUM_ObstacleDataB9_MCPFlag
 */
#define ObstacleDataB9_MCPFlag_MCP 1

/**
 * Value table ObstacleDataB9_MCPFlag entry not.
 *
 * MCP
 *
 * @ingroup ENUM_ObstacleDataB9_MCPFlag
 */
#define ObstacleDataB9_MCPFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB9_PedSubType Signal PedSubType of Message ObstacleDataB9 (0x439)
 *
 * Pestrain sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataB9_PedSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB9
 * @{
 */

/**
 * Signal PedSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB9_PedSubType and \ref GET_ObstacleDataB9_PedSubType instead.
 */
#define SIG_ObstacleDataB9_PedSubType 0, 0, 37, 2

/**
 * Signal PedSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB9_PedSubType or \ref INIT_ObstacleDataB9 instead.
 */
#define SETUP_ObstacleDataB9_PedSubType 0, 0, 37, 2, 0

/**
 * Get signal PedSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB9_PedSubType(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x03) << 0))

/**
 * Set signal PedSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB9_PedSubType(buf, val)                                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0x03 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 5;                                                                 \
    }

/**
 * Set signal PedSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB9_PedSubType(buf) SET_ObstacleDataB9_PedSubType(buf, 0)

/**
 * Signal PedSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB9_PedSubType(x, fmt) ((x)*fmt)

/**
 * Signal PedSubType raw initial value.
 */
#define START_ObstacleDataB9_PedSubType 0

/**
 * Signal PedSubType raw minimum value.
 */
#define MIN_ObstacleDataB9_PedSubType 0

/**
 * Signal PedSubType raw maximum value.
 */
#define MAX_ObstacleDataB9_PedSubType 3

/**
 * Signal PedSubType raw offset value.
 */
#define OFF_ObstacleDataB9_PedSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB9_PedSubType Value Table for Signal PedSubType in Message ObstacleDataB9 (0x439)
 *
 * Enum values defined for \ref SIG_ObstacleDataB9_PedSubType.
 *
 * @ingroup SIG_ObstacleDataB9_PedSubType
 */

/**
 * Value table ObstacleDataB9_PedSubType entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB9_PedSubType
 */
#define ObstacleDataB9_PedSubType_undefined 2

/**
 * Value table ObstacleDataB9_PedSubType entry Child.
 *
 * @ingroup ENUM_ObstacleDataB9_PedSubType
 */
#define ObstacleDataB9_PedSubType_Child 1

/**
 * Value table ObstacleDataB9_PedSubType entry Adult.
 *
 * @ingroup ENUM_ObstacleDataB9_PedSubType
 */
#define ObstacleDataB9_PedSubType_Adult 0

/**
 * @defgroup SIG_ObstacleDataB9_PedPos Signal PedPos of Message ObstacleDataB9 (0x439)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataB9_PedPos.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB9
 * @{
 */

/**
 * Signal PedPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB9_PedPos and \ref GET_ObstacleDataB9_PedPos instead.
 */
#define SIG_ObstacleDataB9_PedPos 0, 1, 39, 12

/**
 * Signal PedPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB9_PedPos or \ref INIT_ObstacleDataB9 instead.
 */
#define SETUP_ObstacleDataB9_PedPos 0, 1, 39, 12, 0

/**
 * Get signal PedPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB9_PedPos(buf)                                                                                 \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 2) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x07) << 9))

/**
 * Set signal PedPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB9_PedPos(buf, val)                                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0;                                                       \
        buf[6] &= ~(0x07 << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0;                                                       \
    }

/**
 * Set signal PedPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB9_PedPos(buf) SET_ObstacleDataB9_PedPos(buf, 0)

/**
 * Signal PedPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB9_PedPos(x, fmt) ((x)*fmt)

/**
 * Signal PedPos raw initial value.
 */
#define START_ObstacleDataB9_PedPos 0

/**
 * Signal PedPos raw minimum value.
 */
#define MIN_ObstacleDataB9_PedPos 0

/**
 * Signal PedPos raw maximum value.
 */
#define MAX_ObstacleDataB9_PedPos 3

/**
 * Signal PedPos raw offset value.
 */
#define OFF_ObstacleDataB9_PedPos 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB9_PedPos Value Table for Signal PedPos in Message ObstacleDataB9 (0x439)
 *
 * Enum values defined for \ref SIG_ObstacleDataB9_PedPos.
 *
 * @ingroup SIG_ObstacleDataB9_PedPos
 */

/**
 * Value table ObstacleDataB9_PedPos entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB9_PedPos
 */
#define ObstacleDataB9_PedPos_undefined 5

/**
 * Value table ObstacleDataB9_PedPos entry lying.
 *
 * @ingroup ENUM_ObstacleDataB9_PedPos
 */
#define ObstacleDataB9_PedPos_lying 4

/**
 * Value table ObstacleDataB9_PedPos entry walk.
 *
 * @ingroup ENUM_ObstacleDataB9_PedPos
 */
#define ObstacleDataB9_PedPos_walk 3

/**
 * Value table ObstacleDataB9_PedPos entry sit.
 *
 * @ingroup ENUM_ObstacleDataB9_PedPos
 */
#define ObstacleDataB9_PedPos_sit 2

/**
 * Value table ObstacleDataB9_PedPos entry crouch.
 *
 * @ingroup ENUM_ObstacleDataB9_PedPos
 */
#define ObstacleDataB9_PedPos_crouch 1

/**
 * Value table ObstacleDataB9_PedPos entry stand.
 *
 * @ingroup ENUM_ObstacleDataB9_PedPos
 */
#define ObstacleDataB9_PedPos_stand 0

/**
 * @defgroup SIG_ObstacleDataB9_reserved_b1 Signal reserved_b1 of Message ObstacleDataB9 (0x439)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB9
 * @{
 */

/**
 * Signal reserved_b1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB9_reserved_b1 and \ref GET_ObstacleDataB9_reserved_b1 instead.
 */
#define SIG_ObstacleDataB9_reserved_b1 0, 0, 51, 13

/**
 * Signal reserved_b1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB9_reserved_b1 or \ref INIT_ObstacleDataB9 instead.
 */
#define SETUP_ObstacleDataB9_reserved_b1 0, 0, 51, 13, 0

/**
 * Get signal reserved_b1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB9_reserved_b1(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 5))

/**
 * Set signal reserved_b1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB9_reserved_b1(buf, val)                                                                       \
    {                                                                                                                  \
        buf[6] &= ~(0x1f << 3);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
    }

/**
 * Set signal reserved_b1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB9_reserved_b1(buf) SET_ObstacleDataB9_reserved_b1(buf, 0)

/**
 * Signal reserved_b1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB9_reserved_b1(x, fmt) ((x)*fmt)

/**
 * Signal reserved_b1 raw initial value.
 */
#define START_ObstacleDataB9_reserved_b1 0

/**
 * Signal reserved_b1 raw minimum value.
 */
#define MIN_ObstacleDataB9_reserved_b1 0

/**
 * Signal reserved_b1 raw maximum value.
 */
#define MAX_ObstacleDataB9_reserved_b1 0

/**
 * Signal reserved_b1 raw offset value.
 */
#define OFF_ObstacleDataB9_reserved_b1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB10_ObstacleLength Signal ObstacleLength of Message ObstacleDataB10 (0x43c)
 *
 * The length of of the target vehicle.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB10
 * @{
 */

/**
 * Signal ObstacleLength configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB10_ObstacleLength and \ref GET_ObstacleDataB10_ObstacleLength instead.
 */
#define SIG_ObstacleDataB10_ObstacleLength 0, 0, 0, 8

/**
 * Signal ObstacleLength setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB10_ObstacleLength or \ref INIT_ObstacleDataB10 instead.
 */
#define SETUP_ObstacleDataB10_ObstacleLength 0, 0, 0, 8, 0

/**
 * Get signal ObstacleLength from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB10_ObstacleLength(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleLength in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB10_ObstacleLength(buf, val)                                                                   \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLength in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB10_ObstacleLength(buf) SET_ObstacleDataB10_ObstacleLength(buf, 0)

/**
 * Signal ObstacleLength value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB10_ObstacleLength(x, fmt) ((x)*fmt / 2)

/**
 * Signal ObstacleLength raw initial value.
 */
#define START_ObstacleDataB10_ObstacleLength 0

/**
 * Signal ObstacleLength raw minimum value.
 */
#define MIN_ObstacleDataB10_ObstacleLength 0

/**
 * Signal ObstacleLength raw maximum value.
 */
#define MAX_ObstacleDataB10_ObstacleLength 63

/**
 * Signal ObstacleLength raw offset value.
 */
#define OFF_ObstacleDataB10_ObstacleLength 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB10_ObstacleWidth Signal ObstacleWidth of Message ObstacleDataB10 (0x43c)
 *
 * The width of the target vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB10
 * @{
 */

/**
 * Signal ObstacleWidth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB10_ObstacleWidth and \ref GET_ObstacleDataB10_ObstacleWidth instead.
 */
#define SIG_ObstacleDataB10_ObstacleWidth 0, 0, 8, 8

/**
 * Signal ObstacleWidth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB10_ObstacleWidth or \ref INIT_ObstacleDataB10 instead.
 */
#define SETUP_ObstacleDataB10_ObstacleWidth 0, 0, 8, 8, 0

/**
 * Get signal ObstacleWidth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB10_ObstacleWidth(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleWidth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB10_ObstacleWidth(buf, val)                                                                    \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleWidth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB10_ObstacleWidth(buf) SET_ObstacleDataB10_ObstacleWidth(buf, 0)

/**
 * Signal ObstacleWidth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB10_ObstacleWidth(x, fmt) ((x)*fmt / 20)

/**
 * Signal ObstacleWidth raw initial value.
 */
#define START_ObstacleDataB10_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw minimum value.
 */
#define MIN_ObstacleDataB10_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw maximum value.
 */
#define MAX_ObstacleDataB10_ObstacleWidth 250

/**
 * Signal ObstacleWidth raw offset value.
 */
#define OFF_ObstacleDataB10_ObstacleWidth 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB10_ObstacleAge Signal ObstacleAge of Message ObstacleDataB10 (0x43c)
 *
 * Frame age of obstacle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB10
 * @{
 */

/**
 * Signal ObstacleAge configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB10_ObstacleAge and \ref GET_ObstacleDataB10_ObstacleAge instead.
 */
#define SIG_ObstacleDataB10_ObstacleAge 0, 0, 16, 16

/**
 * Signal ObstacleAge setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB10_ObstacleAge or \ref INIT_ObstacleDataB10 instead.
 */
#define SETUP_ObstacleDataB10_ObstacleAge 0, 0, 16, 16, 0

/**
 * Get signal ObstacleAge from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB10_ObstacleAge(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAge in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB10_ObstacleAge(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAge in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB10_ObstacleAge(buf) SET_ObstacleDataB10_ObstacleAge(buf, 0)

/**
 * Signal ObstacleAge value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB10_ObstacleAge(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleAge raw initial value.
 */
#define START_ObstacleDataB10_ObstacleAge 0

/**
 * Signal ObstacleAge raw minimum value.
 */
#define MIN_ObstacleDataB10_ObstacleAge 0

/**
 * Signal ObstacleAge raw maximum value.
 */
#define MAX_ObstacleDataB10_ObstacleAge 65535

/**
 * Signal ObstacleAge raw offset value.
 */
#define OFF_ObstacleDataB10_ObstacleAge 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB10_ObstacleLane Signal ObstacleLane of Message ObstacleDataB10 (0x43c)
 *
 * Reseved. Not Implemented update next lane(distinguish left or right)
 *
 * Contains the value table \ref ENUM_ObstacleDataB10_ObstacleLane.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB10
 * @{
 */

/**
 * Signal ObstacleLane configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB10_ObstacleLane and \ref GET_ObstacleDataB10_ObstacleLane instead.
 */
#define SIG_ObstacleDataB10_ObstacleLane 0, 0, 32, 3

/**
 * Signal ObstacleLane setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB10_ObstacleLane or \ref INIT_ObstacleDataB10 instead.
 */
#define SETUP_ObstacleDataB10_ObstacleLane 0, 0, 32, 3, 0

/**
 * Get signal ObstacleLane from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB10_ObstacleLane(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0))

/**
 * Set signal ObstacleLane in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB10_ObstacleLane(buf, val)                                                                     \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLane in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB10_ObstacleLane(buf) SET_ObstacleDataB10_ObstacleLane(buf, 0)

/**
 * Signal ObstacleLane value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB10_ObstacleLane(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleLane raw initial value.
 */
#define START_ObstacleDataB10_ObstacleLane 0

/**
 * Signal ObstacleLane raw minimum value.
 */
#define MIN_ObstacleDataB10_ObstacleLane 0

/**
 * Signal ObstacleLane raw maximum value.
 */
#define MAX_ObstacleDataB10_ObstacleLane 7

/**
 * Signal ObstacleLane raw offset value.
 */
#define OFF_ObstacleDataB10_ObstacleLane 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB10_ObstacleLane Value Table for Signal ObstacleLane in Message ObstacleDataB10 (0x43c)
 *
 * Enum values defined for \ref SIG_ObstacleDataB10_ObstacleLane.
 *
 * @ingroup SIG_ObstacleDataB10_ObstacleLane
 */

/**
 * Value table ObstacleDataB10_ObstacleLane entry reserved.
 *
 * @ingroup ENUM_ObstacleDataB10_ObstacleLane
 */
#define ObstacleDataB10_ObstacleLane_reserved 7

/**
 * Value table ObstacleDataB10_ObstacleLane entry reserved_6.
 *
 * @ingroup ENUM_ObstacleDataB10_ObstacleLane
 */
#define ObstacleDataB10_ObstacleLane_reserved_6 6

/**
 * Value table ObstacleDataB10_ObstacleLane entry next.
 *
 * next lane right
 *
 * @ingroup ENUM_ObstacleDataB10_ObstacleLane
 */
#define ObstacleDataB10_ObstacleLane_next 5

/**
 * Value table ObstacleDataB10_ObstacleLane entry next_4.
 *
 * next lane left
 *
 * @ingroup ENUM_ObstacleDataB10_ObstacleLane
 */
#define ObstacleDataB10_ObstacleLane_next_4 4

/**
 * Value table ObstacleDataB10_ObstacleLane entry next_3.
 *
 * lane right
 *
 * @ingroup ENUM_ObstacleDataB10_ObstacleLane
 */
#define ObstacleDataB10_ObstacleLane_next_3 3

/**
 * Value table ObstacleDataB10_ObstacleLane entry next_2.
 *
 * lane left
 *
 * @ingroup ENUM_ObstacleDataB10_ObstacleLane
 */
#define ObstacleDataB10_ObstacleLane_next_2 2

/**
 * Value table ObstacleDataB10_ObstacleLane entry ego.
 *
 * lane
 *
 * @ingroup ENUM_ObstacleDataB10_ObstacleLane
 */
#define ObstacleDataB10_ObstacleLane_ego 1

/**
 * Value table ObstacleDataB10_ObstacleLane entry not.
 *
 * assigned
 *
 * @ingroup ENUM_ObstacleDataB10_ObstacleLane
 */
#define ObstacleDataB10_ObstacleLane_not 0

/**
 * @defgroup SIG_ObstacleDataB10_CIPVFlag Signal CIPVFlag of Message ObstacleDataB10 (0x43c)
 *
 * Critical Vehicle in Path Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB10_CIPVFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB10
 * @{
 */

/**
 * Signal CIPVFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB10_CIPVFlag and \ref GET_ObstacleDataB10_CIPVFlag instead.
 */
#define SIG_ObstacleDataB10_CIPVFlag 0, 0, 35, 1

/**
 * Signal CIPVFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB10_CIPVFlag or \ref INIT_ObstacleDataB10 instead.
 */
#define SETUP_ObstacleDataB10_CIPVFlag 0, 0, 35, 1, 0

/**
 * Get signal CIPVFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB10_CIPVFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0))

/**
 * Set signal CIPVFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB10_CIPVFlag(buf, val)                                                                         \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 3);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal CIPVFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB10_CIPVFlag(buf) SET_ObstacleDataB10_CIPVFlag(buf, 0)

/**
 * Signal CIPVFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB10_CIPVFlag(x, fmt) ((x)*fmt)

/**
 * Signal CIPVFlag raw initial value.
 */
#define START_ObstacleDataB10_CIPVFlag 0

/**
 * Signal CIPVFlag raw minimum value.
 */
#define MIN_ObstacleDataB10_CIPVFlag 0

/**
 * Signal CIPVFlag raw maximum value.
 */
#define MAX_ObstacleDataB10_CIPVFlag 1

/**
 * Signal CIPVFlag raw offset value.
 */
#define OFF_ObstacleDataB10_CIPVFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB10_CIPVFlag Value Table for Signal CIPVFlag in Message ObstacleDataB10 (0x43c)
 *
 * Enum values defined for \ref SIG_ObstacleDataB10_CIPVFlag.
 *
 * @ingroup SIG_ObstacleDataB10_CIPVFlag
 */

/**
 * Value table ObstacleDataB10_CIPVFlag entry CIPV.
 *
 * @ingroup ENUM_ObstacleDataB10_CIPVFlag
 */
#define ObstacleDataB10_CIPVFlag_CIPV 1

/**
 * Value table ObstacleDataB10_CIPVFlag entry not.
 *
 * CIPV
 *
 * @ingroup ENUM_ObstacleDataB10_CIPVFlag
 */
#define ObstacleDataB10_CIPVFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB10_MCPFlag Signal MCPFlag of Message ObstacleDataB10 (0x43c)
 *
 * Most Critical Pedestrain Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB10_MCPFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB10
 * @{
 */

/**
 * Signal MCPFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB10_MCPFlag and \ref GET_ObstacleDataB10_MCPFlag instead.
 */
#define SIG_ObstacleDataB10_MCPFlag 0, 0, 36, 1

/**
 * Signal MCPFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB10_MCPFlag or \ref INIT_ObstacleDataB10 instead.
 */
#define SETUP_ObstacleDataB10_MCPFlag 0, 0, 36, 1, 0

/**
 * Get signal MCPFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB10_MCPFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0))

/**
 * Set signal MCPFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB10_MCPFlag(buf, val)                                                                          \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 4);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal MCPFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB10_MCPFlag(buf) SET_ObstacleDataB10_MCPFlag(buf, 0)

/**
 * Signal MCPFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB10_MCPFlag(x, fmt) ((x)*fmt)

/**
 * Signal MCPFlag raw initial value.
 */
#define START_ObstacleDataB10_MCPFlag 0

/**
 * Signal MCPFlag raw minimum value.
 */
#define MIN_ObstacleDataB10_MCPFlag 0

/**
 * Signal MCPFlag raw maximum value.
 */
#define MAX_ObstacleDataB10_MCPFlag 1

/**
 * Signal MCPFlag raw offset value.
 */
#define OFF_ObstacleDataB10_MCPFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB10_MCPFlag Value Table for Signal MCPFlag in Message ObstacleDataB10 (0x43c)
 *
 * Enum values defined for \ref SIG_ObstacleDataB10_MCPFlag.
 *
 * @ingroup SIG_ObstacleDataB10_MCPFlag
 */

/**
 * Value table ObstacleDataB10_MCPFlag entry MCP.
 *
 * @ingroup ENUM_ObstacleDataB10_MCPFlag
 */
#define ObstacleDataB10_MCPFlag_MCP 1

/**
 * Value table ObstacleDataB10_MCPFlag entry not.
 *
 * MCP
 *
 * @ingroup ENUM_ObstacleDataB10_MCPFlag
 */
#define ObstacleDataB10_MCPFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB10_PedSubType Signal PedSubType of Message ObstacleDataB10 (0x43c)
 *
 * Pestrain sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataB10_PedSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB10
 * @{
 */

/**
 * Signal PedSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB10_PedSubType and \ref GET_ObstacleDataB10_PedSubType instead.
 */
#define SIG_ObstacleDataB10_PedSubType 0, 0, 37, 2

/**
 * Signal PedSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB10_PedSubType or \ref INIT_ObstacleDataB10 instead.
 */
#define SETUP_ObstacleDataB10_PedSubType 0, 0, 37, 2, 0

/**
 * Get signal PedSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB10_PedSubType(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x03) << 0))

/**
 * Set signal PedSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB10_PedSubType(buf, val)                                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0x03 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 5;                                                                 \
    }

/**
 * Set signal PedSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB10_PedSubType(buf) SET_ObstacleDataB10_PedSubType(buf, 0)

/**
 * Signal PedSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB10_PedSubType(x, fmt) ((x)*fmt)

/**
 * Signal PedSubType raw initial value.
 */
#define START_ObstacleDataB10_PedSubType 0

/**
 * Signal PedSubType raw minimum value.
 */
#define MIN_ObstacleDataB10_PedSubType 0

/**
 * Signal PedSubType raw maximum value.
 */
#define MAX_ObstacleDataB10_PedSubType 3

/**
 * Signal PedSubType raw offset value.
 */
#define OFF_ObstacleDataB10_PedSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB10_PedSubType Value Table for Signal PedSubType in Message ObstacleDataB10 (0x43c)
 *
 * Enum values defined for \ref SIG_ObstacleDataB10_PedSubType.
 *
 * @ingroup SIG_ObstacleDataB10_PedSubType
 */

/**
 * Value table ObstacleDataB10_PedSubType entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB10_PedSubType
 */
#define ObstacleDataB10_PedSubType_undefined 2

/**
 * Value table ObstacleDataB10_PedSubType entry Child.
 *
 * @ingroup ENUM_ObstacleDataB10_PedSubType
 */
#define ObstacleDataB10_PedSubType_Child 1

/**
 * Value table ObstacleDataB10_PedSubType entry Adult.
 *
 * @ingroup ENUM_ObstacleDataB10_PedSubType
 */
#define ObstacleDataB10_PedSubType_Adult 0

/**
 * @defgroup SIG_ObstacleDataB10_PedPos Signal PedPos of Message ObstacleDataB10 (0x43c)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataB10_PedPos.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB10
 * @{
 */

/**
 * Signal PedPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB10_PedPos and \ref GET_ObstacleDataB10_PedPos instead.
 */
#define SIG_ObstacleDataB10_PedPos 0, 1, 39, 12

/**
 * Signal PedPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB10_PedPos or \ref INIT_ObstacleDataB10 instead.
 */
#define SETUP_ObstacleDataB10_PedPos 0, 1, 39, 12, 0

/**
 * Get signal PedPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB10_PedPos(buf)                                                                                \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 2) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x07) << 9))

/**
 * Set signal PedPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB10_PedPos(buf, val)                                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0;                                                       \
        buf[6] &= ~(0x07 << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0;                                                       \
    }

/**
 * Set signal PedPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB10_PedPos(buf) SET_ObstacleDataB10_PedPos(buf, 0)

/**
 * Signal PedPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB10_PedPos(x, fmt) ((x)*fmt)

/**
 * Signal PedPos raw initial value.
 */
#define START_ObstacleDataB10_PedPos 0

/**
 * Signal PedPos raw minimum value.
 */
#define MIN_ObstacleDataB10_PedPos 0

/**
 * Signal PedPos raw maximum value.
 */
#define MAX_ObstacleDataB10_PedPos 3

/**
 * Signal PedPos raw offset value.
 */
#define OFF_ObstacleDataB10_PedPos 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB10_PedPos Value Table for Signal PedPos in Message ObstacleDataB10 (0x43c)
 *
 * Enum values defined for \ref SIG_ObstacleDataB10_PedPos.
 *
 * @ingroup SIG_ObstacleDataB10_PedPos
 */

/**
 * Value table ObstacleDataB10_PedPos entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB10_PedPos
 */
#define ObstacleDataB10_PedPos_undefined 5

/**
 * Value table ObstacleDataB10_PedPos entry lying.
 *
 * @ingroup ENUM_ObstacleDataB10_PedPos
 */
#define ObstacleDataB10_PedPos_lying 4

/**
 * Value table ObstacleDataB10_PedPos entry walk.
 *
 * @ingroup ENUM_ObstacleDataB10_PedPos
 */
#define ObstacleDataB10_PedPos_walk 3

/**
 * Value table ObstacleDataB10_PedPos entry sit.
 *
 * @ingroup ENUM_ObstacleDataB10_PedPos
 */
#define ObstacleDataB10_PedPos_sit 2

/**
 * Value table ObstacleDataB10_PedPos entry crouch.
 *
 * @ingroup ENUM_ObstacleDataB10_PedPos
 */
#define ObstacleDataB10_PedPos_crouch 1

/**
 * Value table ObstacleDataB10_PedPos entry stand.
 *
 * @ingroup ENUM_ObstacleDataB10_PedPos
 */
#define ObstacleDataB10_PedPos_stand 0

/**
 * @defgroup SIG_ObstacleDataB10_reserved_b1 Signal reserved_b1 of Message ObstacleDataB10 (0x43c)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB10
 * @{
 */

/**
 * Signal reserved_b1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB10_reserved_b1 and \ref GET_ObstacleDataB10_reserved_b1 instead.
 */
#define SIG_ObstacleDataB10_reserved_b1 0, 0, 51, 13

/**
 * Signal reserved_b1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB10_reserved_b1 or \ref INIT_ObstacleDataB10 instead.
 */
#define SETUP_ObstacleDataB10_reserved_b1 0, 0, 51, 13, 0

/**
 * Get signal reserved_b1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB10_reserved_b1(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 5))

/**
 * Set signal reserved_b1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB10_reserved_b1(buf, val)                                                                      \
    {                                                                                                                  \
        buf[6] &= ~(0x1f << 3);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
    }

/**
 * Set signal reserved_b1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB10_reserved_b1(buf) SET_ObstacleDataB10_reserved_b1(buf, 0)

/**
 * Signal reserved_b1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB10_reserved_b1(x, fmt) ((x)*fmt)

/**
 * Signal reserved_b1 raw initial value.
 */
#define START_ObstacleDataB10_reserved_b1 0

/**
 * Signal reserved_b1 raw minimum value.
 */
#define MIN_ObstacleDataB10_reserved_b1 0

/**
 * Signal reserved_b1 raw maximum value.
 */
#define MAX_ObstacleDataB10_reserved_b1 0

/**
 * Signal reserved_b1 raw offset value.
 */
#define OFF_ObstacleDataB10_reserved_b1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB4_ObstacleLength Signal ObstacleLength of Message ObstacleDataB4 (0x42a)
 *
 * The length of of the target vehicle.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB4
 * @{
 */

/**
 * Signal ObstacleLength configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB4_ObstacleLength and \ref GET_ObstacleDataB4_ObstacleLength instead.
 */
#define SIG_ObstacleDataB4_ObstacleLength 0, 0, 0, 8

/**
 * Signal ObstacleLength setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB4_ObstacleLength or \ref INIT_ObstacleDataB4 instead.
 */
#define SETUP_ObstacleDataB4_ObstacleLength 0, 0, 0, 8, 0

/**
 * Get signal ObstacleLength from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB4_ObstacleLength(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleLength in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB4_ObstacleLength(buf, val)                                                                    \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLength in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB4_ObstacleLength(buf) SET_ObstacleDataB4_ObstacleLength(buf, 0)

/**
 * Signal ObstacleLength value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB4_ObstacleLength(x, fmt) ((x)*fmt / 2)

/**
 * Signal ObstacleLength raw initial value.
 */
#define START_ObstacleDataB4_ObstacleLength 0

/**
 * Signal ObstacleLength raw minimum value.
 */
#define MIN_ObstacleDataB4_ObstacleLength 0

/**
 * Signal ObstacleLength raw maximum value.
 */
#define MAX_ObstacleDataB4_ObstacleLength 63

/**
 * Signal ObstacleLength raw offset value.
 */
#define OFF_ObstacleDataB4_ObstacleLength 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB4_ObstacleWidth Signal ObstacleWidth of Message ObstacleDataB4 (0x42a)
 *
 * The width of the target vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB4
 * @{
 */

/**
 * Signal ObstacleWidth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB4_ObstacleWidth and \ref GET_ObstacleDataB4_ObstacleWidth instead.
 */
#define SIG_ObstacleDataB4_ObstacleWidth 0, 0, 8, 8

/**
 * Signal ObstacleWidth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB4_ObstacleWidth or \ref INIT_ObstacleDataB4 instead.
 */
#define SETUP_ObstacleDataB4_ObstacleWidth 0, 0, 8, 8, 0

/**
 * Get signal ObstacleWidth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB4_ObstacleWidth(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleWidth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB4_ObstacleWidth(buf, val)                                                                     \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleWidth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB4_ObstacleWidth(buf) SET_ObstacleDataB4_ObstacleWidth(buf, 0)

/**
 * Signal ObstacleWidth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB4_ObstacleWidth(x, fmt) ((x)*fmt / 20)

/**
 * Signal ObstacleWidth raw initial value.
 */
#define START_ObstacleDataB4_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw minimum value.
 */
#define MIN_ObstacleDataB4_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw maximum value.
 */
#define MAX_ObstacleDataB4_ObstacleWidth 250

/**
 * Signal ObstacleWidth raw offset value.
 */
#define OFF_ObstacleDataB4_ObstacleWidth 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB4_ObstacleAge Signal ObstacleAge of Message ObstacleDataB4 (0x42a)
 *
 * Frame age of obstacle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB4
 * @{
 */

/**
 * Signal ObstacleAge configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB4_ObstacleAge and \ref GET_ObstacleDataB4_ObstacleAge instead.
 */
#define SIG_ObstacleDataB4_ObstacleAge 0, 0, 16, 16

/**
 * Signal ObstacleAge setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB4_ObstacleAge or \ref INIT_ObstacleDataB4 instead.
 */
#define SETUP_ObstacleDataB4_ObstacleAge 0, 0, 16, 16, 0

/**
 * Get signal ObstacleAge from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB4_ObstacleAge(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAge in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB4_ObstacleAge(buf, val)                                                                       \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAge in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB4_ObstacleAge(buf) SET_ObstacleDataB4_ObstacleAge(buf, 0)

/**
 * Signal ObstacleAge value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB4_ObstacleAge(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleAge raw initial value.
 */
#define START_ObstacleDataB4_ObstacleAge 0

/**
 * Signal ObstacleAge raw minimum value.
 */
#define MIN_ObstacleDataB4_ObstacleAge 0

/**
 * Signal ObstacleAge raw maximum value.
 */
#define MAX_ObstacleDataB4_ObstacleAge 65535

/**
 * Signal ObstacleAge raw offset value.
 */
#define OFF_ObstacleDataB4_ObstacleAge 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB4_ObstacleLane Signal ObstacleLane of Message ObstacleDataB4 (0x42a)
 *
 * Reseved. Not Implemented update next lane(distinguish left or right)
 *
 * Contains the value table \ref ENUM_ObstacleDataB4_ObstacleLane.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB4
 * @{
 */

/**
 * Signal ObstacleLane configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB4_ObstacleLane and \ref GET_ObstacleDataB4_ObstacleLane instead.
 */
#define SIG_ObstacleDataB4_ObstacleLane 0, 0, 32, 3

/**
 * Signal ObstacleLane setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB4_ObstacleLane or \ref INIT_ObstacleDataB4 instead.
 */
#define SETUP_ObstacleDataB4_ObstacleLane 0, 0, 32, 3, 0

/**
 * Get signal ObstacleLane from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB4_ObstacleLane(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0))

/**
 * Set signal ObstacleLane in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB4_ObstacleLane(buf, val)                                                                      \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLane in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB4_ObstacleLane(buf) SET_ObstacleDataB4_ObstacleLane(buf, 0)

/**
 * Signal ObstacleLane value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB4_ObstacleLane(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleLane raw initial value.
 */
#define START_ObstacleDataB4_ObstacleLane 0

/**
 * Signal ObstacleLane raw minimum value.
 */
#define MIN_ObstacleDataB4_ObstacleLane 0

/**
 * Signal ObstacleLane raw maximum value.
 */
#define MAX_ObstacleDataB4_ObstacleLane 7

/**
 * Signal ObstacleLane raw offset value.
 */
#define OFF_ObstacleDataB4_ObstacleLane 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB4_ObstacleLane Value Table for Signal ObstacleLane in Message ObstacleDataB4 (0x42a)
 *
 * Enum values defined for \ref SIG_ObstacleDataB4_ObstacleLane.
 *
 * @ingroup SIG_ObstacleDataB4_ObstacleLane
 */

/**
 * Value table ObstacleDataB4_ObstacleLane entry reserved.
 *
 * @ingroup ENUM_ObstacleDataB4_ObstacleLane
 */
#define ObstacleDataB4_ObstacleLane_reserved 7

/**
 * Value table ObstacleDataB4_ObstacleLane entry reserved_6.
 *
 * @ingroup ENUM_ObstacleDataB4_ObstacleLane
 */
#define ObstacleDataB4_ObstacleLane_reserved_6 6

/**
 * Value table ObstacleDataB4_ObstacleLane entry next.
 *
 * next lane right
 *
 * @ingroup ENUM_ObstacleDataB4_ObstacleLane
 */
#define ObstacleDataB4_ObstacleLane_next 5

/**
 * Value table ObstacleDataB4_ObstacleLane entry next_4.
 *
 * next lane left
 *
 * @ingroup ENUM_ObstacleDataB4_ObstacleLane
 */
#define ObstacleDataB4_ObstacleLane_next_4 4

/**
 * Value table ObstacleDataB4_ObstacleLane entry next_3.
 *
 * lane right
 *
 * @ingroup ENUM_ObstacleDataB4_ObstacleLane
 */
#define ObstacleDataB4_ObstacleLane_next_3 3

/**
 * Value table ObstacleDataB4_ObstacleLane entry next_2.
 *
 * lane left
 *
 * @ingroup ENUM_ObstacleDataB4_ObstacleLane
 */
#define ObstacleDataB4_ObstacleLane_next_2 2

/**
 * Value table ObstacleDataB4_ObstacleLane entry ego.
 *
 * lane
 *
 * @ingroup ENUM_ObstacleDataB4_ObstacleLane
 */
#define ObstacleDataB4_ObstacleLane_ego 1

/**
 * Value table ObstacleDataB4_ObstacleLane entry not.
 *
 * assigned
 *
 * @ingroup ENUM_ObstacleDataB4_ObstacleLane
 */
#define ObstacleDataB4_ObstacleLane_not 0

/**
 * @defgroup SIG_ObstacleDataB4_CIPVFlag Signal CIPVFlag of Message ObstacleDataB4 (0x42a)
 *
 * Critical Vehicle in Path Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB4_CIPVFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB4
 * @{
 */

/**
 * Signal CIPVFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB4_CIPVFlag and \ref GET_ObstacleDataB4_CIPVFlag instead.
 */
#define SIG_ObstacleDataB4_CIPVFlag 0, 0, 35, 1

/**
 * Signal CIPVFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB4_CIPVFlag or \ref INIT_ObstacleDataB4 instead.
 */
#define SETUP_ObstacleDataB4_CIPVFlag 0, 0, 35, 1, 0

/**
 * Get signal CIPVFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB4_CIPVFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0))

/**
 * Set signal CIPVFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB4_CIPVFlag(buf, val)                                                                          \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 3);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal CIPVFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB4_CIPVFlag(buf) SET_ObstacleDataB4_CIPVFlag(buf, 0)

/**
 * Signal CIPVFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB4_CIPVFlag(x, fmt) ((x)*fmt)

/**
 * Signal CIPVFlag raw initial value.
 */
#define START_ObstacleDataB4_CIPVFlag 0

/**
 * Signal CIPVFlag raw minimum value.
 */
#define MIN_ObstacleDataB4_CIPVFlag 0

/**
 * Signal CIPVFlag raw maximum value.
 */
#define MAX_ObstacleDataB4_CIPVFlag 1

/**
 * Signal CIPVFlag raw offset value.
 */
#define OFF_ObstacleDataB4_CIPVFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB4_CIPVFlag Value Table for Signal CIPVFlag in Message ObstacleDataB4 (0x42a)
 *
 * Enum values defined for \ref SIG_ObstacleDataB4_CIPVFlag.
 *
 * @ingroup SIG_ObstacleDataB4_CIPVFlag
 */

/**
 * Value table ObstacleDataB4_CIPVFlag entry CIPV.
 *
 * @ingroup ENUM_ObstacleDataB4_CIPVFlag
 */
#define ObstacleDataB4_CIPVFlag_CIPV 1

/**
 * Value table ObstacleDataB4_CIPVFlag entry not.
 *
 * CIPV
 *
 * @ingroup ENUM_ObstacleDataB4_CIPVFlag
 */
#define ObstacleDataB4_CIPVFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB4_MCPFlag Signal MCPFlag of Message ObstacleDataB4 (0x42a)
 *
 * Most Critical Pedestrain Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB4_MCPFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB4
 * @{
 */

/**
 * Signal MCPFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB4_MCPFlag and \ref GET_ObstacleDataB4_MCPFlag instead.
 */
#define SIG_ObstacleDataB4_MCPFlag 0, 0, 36, 1

/**
 * Signal MCPFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB4_MCPFlag or \ref INIT_ObstacleDataB4 instead.
 */
#define SETUP_ObstacleDataB4_MCPFlag 0, 0, 36, 1, 0

/**
 * Get signal MCPFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB4_MCPFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0))

/**
 * Set signal MCPFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB4_MCPFlag(buf, val)                                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 4);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal MCPFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB4_MCPFlag(buf) SET_ObstacleDataB4_MCPFlag(buf, 0)

/**
 * Signal MCPFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB4_MCPFlag(x, fmt) ((x)*fmt)

/**
 * Signal MCPFlag raw initial value.
 */
#define START_ObstacleDataB4_MCPFlag 0

/**
 * Signal MCPFlag raw minimum value.
 */
#define MIN_ObstacleDataB4_MCPFlag 0

/**
 * Signal MCPFlag raw maximum value.
 */
#define MAX_ObstacleDataB4_MCPFlag 1

/**
 * Signal MCPFlag raw offset value.
 */
#define OFF_ObstacleDataB4_MCPFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB4_MCPFlag Value Table for Signal MCPFlag in Message ObstacleDataB4 (0x42a)
 *
 * Enum values defined for \ref SIG_ObstacleDataB4_MCPFlag.
 *
 * @ingroup SIG_ObstacleDataB4_MCPFlag
 */

/**
 * Value table ObstacleDataB4_MCPFlag entry MCP.
 *
 * @ingroup ENUM_ObstacleDataB4_MCPFlag
 */
#define ObstacleDataB4_MCPFlag_MCP 1

/**
 * Value table ObstacleDataB4_MCPFlag entry not.
 *
 * MCP
 *
 * @ingroup ENUM_ObstacleDataB4_MCPFlag
 */
#define ObstacleDataB4_MCPFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB4_PedSubType Signal PedSubType of Message ObstacleDataB4 (0x42a)
 *
 * Pestrain sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataB4_PedSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB4
 * @{
 */

/**
 * Signal PedSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB4_PedSubType and \ref GET_ObstacleDataB4_PedSubType instead.
 */
#define SIG_ObstacleDataB4_PedSubType 0, 0, 37, 2

/**
 * Signal PedSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB4_PedSubType or \ref INIT_ObstacleDataB4 instead.
 */
#define SETUP_ObstacleDataB4_PedSubType 0, 0, 37, 2, 0

/**
 * Get signal PedSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB4_PedSubType(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x03) << 0))

/**
 * Set signal PedSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB4_PedSubType(buf, val)                                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0x03 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 5;                                                                 \
    }

/**
 * Set signal PedSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB4_PedSubType(buf) SET_ObstacleDataB4_PedSubType(buf, 0)

/**
 * Signal PedSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB4_PedSubType(x, fmt) ((x)*fmt)

/**
 * Signal PedSubType raw initial value.
 */
#define START_ObstacleDataB4_PedSubType 0

/**
 * Signal PedSubType raw minimum value.
 */
#define MIN_ObstacleDataB4_PedSubType 0

/**
 * Signal PedSubType raw maximum value.
 */
#define MAX_ObstacleDataB4_PedSubType 3

/**
 * Signal PedSubType raw offset value.
 */
#define OFF_ObstacleDataB4_PedSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB4_PedSubType Value Table for Signal PedSubType in Message ObstacleDataB4 (0x42a)
 *
 * Enum values defined for \ref SIG_ObstacleDataB4_PedSubType.
 *
 * @ingroup SIG_ObstacleDataB4_PedSubType
 */

/**
 * Value table ObstacleDataB4_PedSubType entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB4_PedSubType
 */
#define ObstacleDataB4_PedSubType_undefined 2

/**
 * Value table ObstacleDataB4_PedSubType entry Child.
 *
 * @ingroup ENUM_ObstacleDataB4_PedSubType
 */
#define ObstacleDataB4_PedSubType_Child 1

/**
 * Value table ObstacleDataB4_PedSubType entry Adult.
 *
 * @ingroup ENUM_ObstacleDataB4_PedSubType
 */
#define ObstacleDataB4_PedSubType_Adult 0

/**
 * @defgroup SIG_ObstacleDataB4_PedPos Signal PedPos of Message ObstacleDataB4 (0x42a)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataB4_PedPos.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB4
 * @{
 */

/**
 * Signal PedPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB4_PedPos and \ref GET_ObstacleDataB4_PedPos instead.
 */
#define SIG_ObstacleDataB4_PedPos 0, 1, 39, 12

/**
 * Signal PedPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB4_PedPos or \ref INIT_ObstacleDataB4 instead.
 */
#define SETUP_ObstacleDataB4_PedPos 0, 1, 39, 12, 0

/**
 * Get signal PedPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB4_PedPos(buf)                                                                                 \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 2) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x07) << 9))

/**
 * Set signal PedPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB4_PedPos(buf, val)                                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0;                                                       \
        buf[6] &= ~(0x07 << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0;                                                       \
    }

/**
 * Set signal PedPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB4_PedPos(buf) SET_ObstacleDataB4_PedPos(buf, 0)

/**
 * Signal PedPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB4_PedPos(x, fmt) ((x)*fmt)

/**
 * Signal PedPos raw initial value.
 */
#define START_ObstacleDataB4_PedPos 0

/**
 * Signal PedPos raw minimum value.
 */
#define MIN_ObstacleDataB4_PedPos 0

/**
 * Signal PedPos raw maximum value.
 */
#define MAX_ObstacleDataB4_PedPos 3

/**
 * Signal PedPos raw offset value.
 */
#define OFF_ObstacleDataB4_PedPos 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB4_PedPos Value Table for Signal PedPos in Message ObstacleDataB4 (0x42a)
 *
 * Enum values defined for \ref SIG_ObstacleDataB4_PedPos.
 *
 * @ingroup SIG_ObstacleDataB4_PedPos
 */

/**
 * Value table ObstacleDataB4_PedPos entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB4_PedPos
 */
#define ObstacleDataB4_PedPos_undefined 5

/**
 * Value table ObstacleDataB4_PedPos entry lying.
 *
 * @ingroup ENUM_ObstacleDataB4_PedPos
 */
#define ObstacleDataB4_PedPos_lying 4

/**
 * Value table ObstacleDataB4_PedPos entry walk.
 *
 * @ingroup ENUM_ObstacleDataB4_PedPos
 */
#define ObstacleDataB4_PedPos_walk 3

/**
 * Value table ObstacleDataB4_PedPos entry sit.
 *
 * @ingroup ENUM_ObstacleDataB4_PedPos
 */
#define ObstacleDataB4_PedPos_sit 2

/**
 * Value table ObstacleDataB4_PedPos entry crouch.
 *
 * @ingroup ENUM_ObstacleDataB4_PedPos
 */
#define ObstacleDataB4_PedPos_crouch 1

/**
 * Value table ObstacleDataB4_PedPos entry stand.
 *
 * @ingroup ENUM_ObstacleDataB4_PedPos
 */
#define ObstacleDataB4_PedPos_stand 0

/**
 * @defgroup SIG_ObstacleDataB4_reserved_b1 Signal reserved_b1 of Message ObstacleDataB4 (0x42a)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB4
 * @{
 */

/**
 * Signal reserved_b1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB4_reserved_b1 and \ref GET_ObstacleDataB4_reserved_b1 instead.
 */
#define SIG_ObstacleDataB4_reserved_b1 0, 0, 51, 13

/**
 * Signal reserved_b1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB4_reserved_b1 or \ref INIT_ObstacleDataB4 instead.
 */
#define SETUP_ObstacleDataB4_reserved_b1 0, 0, 51, 13, 0

/**
 * Get signal reserved_b1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB4_reserved_b1(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 5))

/**
 * Set signal reserved_b1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB4_reserved_b1(buf, val)                                                                       \
    {                                                                                                                  \
        buf[6] &= ~(0x1f << 3);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
    }

/**
 * Set signal reserved_b1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB4_reserved_b1(buf) SET_ObstacleDataB4_reserved_b1(buf, 0)

/**
 * Signal reserved_b1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB4_reserved_b1(x, fmt) ((x)*fmt)

/**
 * Signal reserved_b1 raw initial value.
 */
#define START_ObstacleDataB4_reserved_b1 0

/**
 * Signal reserved_b1 raw minimum value.
 */
#define MIN_ObstacleDataB4_reserved_b1 0

/**
 * Signal reserved_b1 raw maximum value.
 */
#define MAX_ObstacleDataB4_reserved_b1 0

/**
 * Signal reserved_b1 raw offset value.
 */
#define OFF_ObstacleDataB4_reserved_b1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB3_ObstacleLength Signal ObstacleLength of Message ObstacleDataB3 (0x427)
 *
 * The length of of the target vehicle.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB3
 * @{
 */

/**
 * Signal ObstacleLength configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB3_ObstacleLength and \ref GET_ObstacleDataB3_ObstacleLength instead.
 */
#define SIG_ObstacleDataB3_ObstacleLength 0, 0, 0, 8

/**
 * Signal ObstacleLength setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB3_ObstacleLength or \ref INIT_ObstacleDataB3 instead.
 */
#define SETUP_ObstacleDataB3_ObstacleLength 0, 0, 0, 8, 0

/**
 * Get signal ObstacleLength from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB3_ObstacleLength(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleLength in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB3_ObstacleLength(buf, val)                                                                    \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLength in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB3_ObstacleLength(buf) SET_ObstacleDataB3_ObstacleLength(buf, 0)

/**
 * Signal ObstacleLength value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB3_ObstacleLength(x, fmt) ((x)*fmt / 2)

/**
 * Signal ObstacleLength raw initial value.
 */
#define START_ObstacleDataB3_ObstacleLength 0

/**
 * Signal ObstacleLength raw minimum value.
 */
#define MIN_ObstacleDataB3_ObstacleLength 0

/**
 * Signal ObstacleLength raw maximum value.
 */
#define MAX_ObstacleDataB3_ObstacleLength 63

/**
 * Signal ObstacleLength raw offset value.
 */
#define OFF_ObstacleDataB3_ObstacleLength 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB3_ObstacleWidth Signal ObstacleWidth of Message ObstacleDataB3 (0x427)
 *
 * The width of the target vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB3
 * @{
 */

/**
 * Signal ObstacleWidth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB3_ObstacleWidth and \ref GET_ObstacleDataB3_ObstacleWidth instead.
 */
#define SIG_ObstacleDataB3_ObstacleWidth 0, 0, 8, 8

/**
 * Signal ObstacleWidth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB3_ObstacleWidth or \ref INIT_ObstacleDataB3 instead.
 */
#define SETUP_ObstacleDataB3_ObstacleWidth 0, 0, 8, 8, 0

/**
 * Get signal ObstacleWidth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB3_ObstacleWidth(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleWidth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB3_ObstacleWidth(buf, val)                                                                     \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleWidth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB3_ObstacleWidth(buf) SET_ObstacleDataB3_ObstacleWidth(buf, 0)

/**
 * Signal ObstacleWidth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB3_ObstacleWidth(x, fmt) ((x)*fmt / 20)

/**
 * Signal ObstacleWidth raw initial value.
 */
#define START_ObstacleDataB3_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw minimum value.
 */
#define MIN_ObstacleDataB3_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw maximum value.
 */
#define MAX_ObstacleDataB3_ObstacleWidth 250

/**
 * Signal ObstacleWidth raw offset value.
 */
#define OFF_ObstacleDataB3_ObstacleWidth 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB3_ObstacleAge Signal ObstacleAge of Message ObstacleDataB3 (0x427)
 *
 * Frame age of obstacle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB3
 * @{
 */

/**
 * Signal ObstacleAge configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB3_ObstacleAge and \ref GET_ObstacleDataB3_ObstacleAge instead.
 */
#define SIG_ObstacleDataB3_ObstacleAge 0, 0, 16, 16

/**
 * Signal ObstacleAge setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB3_ObstacleAge or \ref INIT_ObstacleDataB3 instead.
 */
#define SETUP_ObstacleDataB3_ObstacleAge 0, 0, 16, 16, 0

/**
 * Get signal ObstacleAge from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB3_ObstacleAge(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAge in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB3_ObstacleAge(buf, val)                                                                       \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAge in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB3_ObstacleAge(buf) SET_ObstacleDataB3_ObstacleAge(buf, 0)

/**
 * Signal ObstacleAge value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB3_ObstacleAge(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleAge raw initial value.
 */
#define START_ObstacleDataB3_ObstacleAge 0

/**
 * Signal ObstacleAge raw minimum value.
 */
#define MIN_ObstacleDataB3_ObstacleAge 0

/**
 * Signal ObstacleAge raw maximum value.
 */
#define MAX_ObstacleDataB3_ObstacleAge 65535

/**
 * Signal ObstacleAge raw offset value.
 */
#define OFF_ObstacleDataB3_ObstacleAge 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB3_ObstacleLane Signal ObstacleLane of Message ObstacleDataB3 (0x427)
 *
 * Reseved. Not Implemented update next lane(distinguish left or right)
 *
 * Contains the value table \ref ENUM_ObstacleDataB3_ObstacleLane.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB3
 * @{
 */

/**
 * Signal ObstacleLane configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB3_ObstacleLane and \ref GET_ObstacleDataB3_ObstacleLane instead.
 */
#define SIG_ObstacleDataB3_ObstacleLane 0, 0, 32, 3

/**
 * Signal ObstacleLane setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB3_ObstacleLane or \ref INIT_ObstacleDataB3 instead.
 */
#define SETUP_ObstacleDataB3_ObstacleLane 0, 0, 32, 3, 0

/**
 * Get signal ObstacleLane from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB3_ObstacleLane(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0))

/**
 * Set signal ObstacleLane in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB3_ObstacleLane(buf, val)                                                                      \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLane in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB3_ObstacleLane(buf) SET_ObstacleDataB3_ObstacleLane(buf, 0)

/**
 * Signal ObstacleLane value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB3_ObstacleLane(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleLane raw initial value.
 */
#define START_ObstacleDataB3_ObstacleLane 0

/**
 * Signal ObstacleLane raw minimum value.
 */
#define MIN_ObstacleDataB3_ObstacleLane 0

/**
 * Signal ObstacleLane raw maximum value.
 */
#define MAX_ObstacleDataB3_ObstacleLane 7

/**
 * Signal ObstacleLane raw offset value.
 */
#define OFF_ObstacleDataB3_ObstacleLane 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB3_ObstacleLane Value Table for Signal ObstacleLane in Message ObstacleDataB3 (0x427)
 *
 * Enum values defined for \ref SIG_ObstacleDataB3_ObstacleLane.
 *
 * @ingroup SIG_ObstacleDataB3_ObstacleLane
 */

/**
 * Value table ObstacleDataB3_ObstacleLane entry reserved.
 *
 * @ingroup ENUM_ObstacleDataB3_ObstacleLane
 */
#define ObstacleDataB3_ObstacleLane_reserved 7

/**
 * Value table ObstacleDataB3_ObstacleLane entry reserved_6.
 *
 * @ingroup ENUM_ObstacleDataB3_ObstacleLane
 */
#define ObstacleDataB3_ObstacleLane_reserved_6 6

/**
 * Value table ObstacleDataB3_ObstacleLane entry next.
 *
 * next lane right
 *
 * @ingroup ENUM_ObstacleDataB3_ObstacleLane
 */
#define ObstacleDataB3_ObstacleLane_next 5

/**
 * Value table ObstacleDataB3_ObstacleLane entry next_4.
 *
 * next lane left
 *
 * @ingroup ENUM_ObstacleDataB3_ObstacleLane
 */
#define ObstacleDataB3_ObstacleLane_next_4 4

/**
 * Value table ObstacleDataB3_ObstacleLane entry next_3.
 *
 * lane right
 *
 * @ingroup ENUM_ObstacleDataB3_ObstacleLane
 */
#define ObstacleDataB3_ObstacleLane_next_3 3

/**
 * Value table ObstacleDataB3_ObstacleLane entry next_2.
 *
 * lane left
 *
 * @ingroup ENUM_ObstacleDataB3_ObstacleLane
 */
#define ObstacleDataB3_ObstacleLane_next_2 2

/**
 * Value table ObstacleDataB3_ObstacleLane entry ego.
 *
 * lane
 *
 * @ingroup ENUM_ObstacleDataB3_ObstacleLane
 */
#define ObstacleDataB3_ObstacleLane_ego 1

/**
 * Value table ObstacleDataB3_ObstacleLane entry not.
 *
 * assigned
 *
 * @ingroup ENUM_ObstacleDataB3_ObstacleLane
 */
#define ObstacleDataB3_ObstacleLane_not 0

/**
 * @defgroup SIG_ObstacleDataB3_CIPVFlag Signal CIPVFlag of Message ObstacleDataB3 (0x427)
 *
 * Critical Vehicle in Path Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB3_CIPVFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB3
 * @{
 */

/**
 * Signal CIPVFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB3_CIPVFlag and \ref GET_ObstacleDataB3_CIPVFlag instead.
 */
#define SIG_ObstacleDataB3_CIPVFlag 0, 0, 35, 1

/**
 * Signal CIPVFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB3_CIPVFlag or \ref INIT_ObstacleDataB3 instead.
 */
#define SETUP_ObstacleDataB3_CIPVFlag 0, 0, 35, 1, 0

/**
 * Get signal CIPVFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB3_CIPVFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0))

/**
 * Set signal CIPVFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB3_CIPVFlag(buf, val)                                                                          \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 3);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal CIPVFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB3_CIPVFlag(buf) SET_ObstacleDataB3_CIPVFlag(buf, 0)

/**
 * Signal CIPVFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB3_CIPVFlag(x, fmt) ((x)*fmt)

/**
 * Signal CIPVFlag raw initial value.
 */
#define START_ObstacleDataB3_CIPVFlag 0

/**
 * Signal CIPVFlag raw minimum value.
 */
#define MIN_ObstacleDataB3_CIPVFlag 0

/**
 * Signal CIPVFlag raw maximum value.
 */
#define MAX_ObstacleDataB3_CIPVFlag 1

/**
 * Signal CIPVFlag raw offset value.
 */
#define OFF_ObstacleDataB3_CIPVFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB3_CIPVFlag Value Table for Signal CIPVFlag in Message ObstacleDataB3 (0x427)
 *
 * Enum values defined for \ref SIG_ObstacleDataB3_CIPVFlag.
 *
 * @ingroup SIG_ObstacleDataB3_CIPVFlag
 */

/**
 * Value table ObstacleDataB3_CIPVFlag entry CIPV.
 *
 * @ingroup ENUM_ObstacleDataB3_CIPVFlag
 */
#define ObstacleDataB3_CIPVFlag_CIPV 1

/**
 * Value table ObstacleDataB3_CIPVFlag entry not.
 *
 * CIPV
 *
 * @ingroup ENUM_ObstacleDataB3_CIPVFlag
 */
#define ObstacleDataB3_CIPVFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB3_MCPFlag Signal MCPFlag of Message ObstacleDataB3 (0x427)
 *
 * Most Critical Pedestrain Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB3_MCPFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB3
 * @{
 */

/**
 * Signal MCPFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB3_MCPFlag and \ref GET_ObstacleDataB3_MCPFlag instead.
 */
#define SIG_ObstacleDataB3_MCPFlag 0, 0, 36, 1

/**
 * Signal MCPFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB3_MCPFlag or \ref INIT_ObstacleDataB3 instead.
 */
#define SETUP_ObstacleDataB3_MCPFlag 0, 0, 36, 1, 0

/**
 * Get signal MCPFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB3_MCPFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0))

/**
 * Set signal MCPFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB3_MCPFlag(buf, val)                                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 4);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal MCPFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB3_MCPFlag(buf) SET_ObstacleDataB3_MCPFlag(buf, 0)

/**
 * Signal MCPFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB3_MCPFlag(x, fmt) ((x)*fmt)

/**
 * Signal MCPFlag raw initial value.
 */
#define START_ObstacleDataB3_MCPFlag 0

/**
 * Signal MCPFlag raw minimum value.
 */
#define MIN_ObstacleDataB3_MCPFlag 0

/**
 * Signal MCPFlag raw maximum value.
 */
#define MAX_ObstacleDataB3_MCPFlag 1

/**
 * Signal MCPFlag raw offset value.
 */
#define OFF_ObstacleDataB3_MCPFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB3_MCPFlag Value Table for Signal MCPFlag in Message ObstacleDataB3 (0x427)
 *
 * Enum values defined for \ref SIG_ObstacleDataB3_MCPFlag.
 *
 * @ingroup SIG_ObstacleDataB3_MCPFlag
 */

/**
 * Value table ObstacleDataB3_MCPFlag entry MCP.
 *
 * @ingroup ENUM_ObstacleDataB3_MCPFlag
 */
#define ObstacleDataB3_MCPFlag_MCP 1

/**
 * Value table ObstacleDataB3_MCPFlag entry not.
 *
 * MCP
 *
 * @ingroup ENUM_ObstacleDataB3_MCPFlag
 */
#define ObstacleDataB3_MCPFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB3_PedSubType Signal PedSubType of Message ObstacleDataB3 (0x427)
 *
 * Pestrain sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataB3_PedSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB3
 * @{
 */

/**
 * Signal PedSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB3_PedSubType and \ref GET_ObstacleDataB3_PedSubType instead.
 */
#define SIG_ObstacleDataB3_PedSubType 0, 0, 37, 2

/**
 * Signal PedSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB3_PedSubType or \ref INIT_ObstacleDataB3 instead.
 */
#define SETUP_ObstacleDataB3_PedSubType 0, 0, 37, 2, 0

/**
 * Get signal PedSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB3_PedSubType(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x03) << 0))

/**
 * Set signal PedSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB3_PedSubType(buf, val)                                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0x03 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 5;                                                                 \
    }

/**
 * Set signal PedSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB3_PedSubType(buf) SET_ObstacleDataB3_PedSubType(buf, 0)

/**
 * Signal PedSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB3_PedSubType(x, fmt) ((x)*fmt)

/**
 * Signal PedSubType raw initial value.
 */
#define START_ObstacleDataB3_PedSubType 0

/**
 * Signal PedSubType raw minimum value.
 */
#define MIN_ObstacleDataB3_PedSubType 0

/**
 * Signal PedSubType raw maximum value.
 */
#define MAX_ObstacleDataB3_PedSubType 3

/**
 * Signal PedSubType raw offset value.
 */
#define OFF_ObstacleDataB3_PedSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB3_PedSubType Value Table for Signal PedSubType in Message ObstacleDataB3 (0x427)
 *
 * Enum values defined for \ref SIG_ObstacleDataB3_PedSubType.
 *
 * @ingroup SIG_ObstacleDataB3_PedSubType
 */

/**
 * Value table ObstacleDataB3_PedSubType entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB3_PedSubType
 */
#define ObstacleDataB3_PedSubType_undefined 2

/**
 * Value table ObstacleDataB3_PedSubType entry Child.
 *
 * @ingroup ENUM_ObstacleDataB3_PedSubType
 */
#define ObstacleDataB3_PedSubType_Child 1

/**
 * Value table ObstacleDataB3_PedSubType entry Adult.
 *
 * @ingroup ENUM_ObstacleDataB3_PedSubType
 */
#define ObstacleDataB3_PedSubType_Adult 0

/**
 * @defgroup SIG_ObstacleDataB3_PedPos Signal PedPos of Message ObstacleDataB3 (0x427)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataB3_PedPos.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB3
 * @{
 */

/**
 * Signal PedPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB3_PedPos and \ref GET_ObstacleDataB3_PedPos instead.
 */
#define SIG_ObstacleDataB3_PedPos 0, 1, 39, 12

/**
 * Signal PedPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB3_PedPos or \ref INIT_ObstacleDataB3 instead.
 */
#define SETUP_ObstacleDataB3_PedPos 0, 1, 39, 12, 0

/**
 * Get signal PedPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB3_PedPos(buf)                                                                                 \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 2) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x07) << 9))

/**
 * Set signal PedPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB3_PedPos(buf, val)                                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0;                                                       \
        buf[6] &= ~(0x07 << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0;                                                       \
    }

/**
 * Set signal PedPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB3_PedPos(buf) SET_ObstacleDataB3_PedPos(buf, 0)

/**
 * Signal PedPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB3_PedPos(x, fmt) ((x)*fmt)

/**
 * Signal PedPos raw initial value.
 */
#define START_ObstacleDataB3_PedPos 0

/**
 * Signal PedPos raw minimum value.
 */
#define MIN_ObstacleDataB3_PedPos 0

/**
 * Signal PedPos raw maximum value.
 */
#define MAX_ObstacleDataB3_PedPos 3

/**
 * Signal PedPos raw offset value.
 */
#define OFF_ObstacleDataB3_PedPos 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB3_PedPos Value Table for Signal PedPos in Message ObstacleDataB3 (0x427)
 *
 * Enum values defined for \ref SIG_ObstacleDataB3_PedPos.
 *
 * @ingroup SIG_ObstacleDataB3_PedPos
 */

/**
 * Value table ObstacleDataB3_PedPos entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB3_PedPos
 */
#define ObstacleDataB3_PedPos_undefined 5

/**
 * Value table ObstacleDataB3_PedPos entry lying.
 *
 * @ingroup ENUM_ObstacleDataB3_PedPos
 */
#define ObstacleDataB3_PedPos_lying 4

/**
 * Value table ObstacleDataB3_PedPos entry walk.
 *
 * @ingroup ENUM_ObstacleDataB3_PedPos
 */
#define ObstacleDataB3_PedPos_walk 3

/**
 * Value table ObstacleDataB3_PedPos entry sit.
 *
 * @ingroup ENUM_ObstacleDataB3_PedPos
 */
#define ObstacleDataB3_PedPos_sit 2

/**
 * Value table ObstacleDataB3_PedPos entry crouch.
 *
 * @ingroup ENUM_ObstacleDataB3_PedPos
 */
#define ObstacleDataB3_PedPos_crouch 1

/**
 * Value table ObstacleDataB3_PedPos entry stand.
 *
 * @ingroup ENUM_ObstacleDataB3_PedPos
 */
#define ObstacleDataB3_PedPos_stand 0

/**
 * @defgroup SIG_ObstacleDataB3_reserved_b1 Signal reserved_b1 of Message ObstacleDataB3 (0x427)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB3
 * @{
 */

/**
 * Signal reserved_b1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB3_reserved_b1 and \ref GET_ObstacleDataB3_reserved_b1 instead.
 */
#define SIG_ObstacleDataB3_reserved_b1 0, 0, 51, 13

/**
 * Signal reserved_b1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB3_reserved_b1 or \ref INIT_ObstacleDataB3 instead.
 */
#define SETUP_ObstacleDataB3_reserved_b1 0, 0, 51, 13, 0

/**
 * Get signal reserved_b1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB3_reserved_b1(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 5))

/**
 * Set signal reserved_b1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB3_reserved_b1(buf, val)                                                                       \
    {                                                                                                                  \
        buf[6] &= ~(0x1f << 3);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
    }

/**
 * Set signal reserved_b1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB3_reserved_b1(buf) SET_ObstacleDataB3_reserved_b1(buf, 0)

/**
 * Signal reserved_b1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB3_reserved_b1(x, fmt) ((x)*fmt)

/**
 * Signal reserved_b1 raw initial value.
 */
#define START_ObstacleDataB3_reserved_b1 0

/**
 * Signal reserved_b1 raw minimum value.
 */
#define MIN_ObstacleDataB3_reserved_b1 0

/**
 * Signal reserved_b1 raw maximum value.
 */
#define MAX_ObstacleDataB3_reserved_b1 0

/**
 * Signal reserved_b1 raw offset value.
 */
#define OFF_ObstacleDataB3_reserved_b1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB2_ObstacleLength Signal ObstacleLength of Message ObstacleDataB2 (0x424)
 *
 * The length of of the target vehicle.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB2
 * @{
 */

/**
 * Signal ObstacleLength configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB2_ObstacleLength and \ref GET_ObstacleDataB2_ObstacleLength instead.
 */
#define SIG_ObstacleDataB2_ObstacleLength 0, 0, 0, 8

/**
 * Signal ObstacleLength setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB2_ObstacleLength or \ref INIT_ObstacleDataB2 instead.
 */
#define SETUP_ObstacleDataB2_ObstacleLength 0, 0, 0, 8, 0

/**
 * Get signal ObstacleLength from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB2_ObstacleLength(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleLength in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB2_ObstacleLength(buf, val)                                                                    \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLength in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB2_ObstacleLength(buf) SET_ObstacleDataB2_ObstacleLength(buf, 0)

/**
 * Signal ObstacleLength value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB2_ObstacleLength(x, fmt) ((x)*fmt / 2)

/**
 * Signal ObstacleLength raw initial value.
 */
#define START_ObstacleDataB2_ObstacleLength 0

/**
 * Signal ObstacleLength raw minimum value.
 */
#define MIN_ObstacleDataB2_ObstacleLength 0

/**
 * Signal ObstacleLength raw maximum value.
 */
#define MAX_ObstacleDataB2_ObstacleLength 63

/**
 * Signal ObstacleLength raw offset value.
 */
#define OFF_ObstacleDataB2_ObstacleLength 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB2_ObstacleWidth Signal ObstacleWidth of Message ObstacleDataB2 (0x424)
 *
 * The width of the target vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB2
 * @{
 */

/**
 * Signal ObstacleWidth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB2_ObstacleWidth and \ref GET_ObstacleDataB2_ObstacleWidth instead.
 */
#define SIG_ObstacleDataB2_ObstacleWidth 0, 0, 8, 8

/**
 * Signal ObstacleWidth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB2_ObstacleWidth or \ref INIT_ObstacleDataB2 instead.
 */
#define SETUP_ObstacleDataB2_ObstacleWidth 0, 0, 8, 8, 0

/**
 * Get signal ObstacleWidth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB2_ObstacleWidth(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleWidth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB2_ObstacleWidth(buf, val)                                                                     \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleWidth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB2_ObstacleWidth(buf) SET_ObstacleDataB2_ObstacleWidth(buf, 0)

/**
 * Signal ObstacleWidth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB2_ObstacleWidth(x, fmt) ((x)*fmt / 20)

/**
 * Signal ObstacleWidth raw initial value.
 */
#define START_ObstacleDataB2_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw minimum value.
 */
#define MIN_ObstacleDataB2_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw maximum value.
 */
#define MAX_ObstacleDataB2_ObstacleWidth 250

/**
 * Signal ObstacleWidth raw offset value.
 */
#define OFF_ObstacleDataB2_ObstacleWidth 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB2_ObstacleAge Signal ObstacleAge of Message ObstacleDataB2 (0x424)
 *
 * Frame age of obstacle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB2
 * @{
 */

/**
 * Signal ObstacleAge configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB2_ObstacleAge and \ref GET_ObstacleDataB2_ObstacleAge instead.
 */
#define SIG_ObstacleDataB2_ObstacleAge 0, 0, 16, 16

/**
 * Signal ObstacleAge setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB2_ObstacleAge or \ref INIT_ObstacleDataB2 instead.
 */
#define SETUP_ObstacleDataB2_ObstacleAge 0, 0, 16, 16, 0

/**
 * Get signal ObstacleAge from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB2_ObstacleAge(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAge in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB2_ObstacleAge(buf, val)                                                                       \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAge in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB2_ObstacleAge(buf) SET_ObstacleDataB2_ObstacleAge(buf, 0)

/**
 * Signal ObstacleAge value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB2_ObstacleAge(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleAge raw initial value.
 */
#define START_ObstacleDataB2_ObstacleAge 0

/**
 * Signal ObstacleAge raw minimum value.
 */
#define MIN_ObstacleDataB2_ObstacleAge 0

/**
 * Signal ObstacleAge raw maximum value.
 */
#define MAX_ObstacleDataB2_ObstacleAge 65535

/**
 * Signal ObstacleAge raw offset value.
 */
#define OFF_ObstacleDataB2_ObstacleAge 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB2_ObstacleLane Signal ObstacleLane of Message ObstacleDataB2 (0x424)
 *
 * Reseved. Not Implemented update next lane(distinguish left or right)
 *
 * Contains the value table \ref ENUM_ObstacleDataB2_ObstacleLane.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB2
 * @{
 */

/**
 * Signal ObstacleLane configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB2_ObstacleLane and \ref GET_ObstacleDataB2_ObstacleLane instead.
 */
#define SIG_ObstacleDataB2_ObstacleLane 0, 0, 32, 3

/**
 * Signal ObstacleLane setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB2_ObstacleLane or \ref INIT_ObstacleDataB2 instead.
 */
#define SETUP_ObstacleDataB2_ObstacleLane 0, 0, 32, 3, 0

/**
 * Get signal ObstacleLane from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB2_ObstacleLane(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0))

/**
 * Set signal ObstacleLane in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB2_ObstacleLane(buf, val)                                                                      \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLane in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB2_ObstacleLane(buf) SET_ObstacleDataB2_ObstacleLane(buf, 0)

/**
 * Signal ObstacleLane value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB2_ObstacleLane(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleLane raw initial value.
 */
#define START_ObstacleDataB2_ObstacleLane 0

/**
 * Signal ObstacleLane raw minimum value.
 */
#define MIN_ObstacleDataB2_ObstacleLane 0

/**
 * Signal ObstacleLane raw maximum value.
 */
#define MAX_ObstacleDataB2_ObstacleLane 7

/**
 * Signal ObstacleLane raw offset value.
 */
#define OFF_ObstacleDataB2_ObstacleLane 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB2_ObstacleLane Value Table for Signal ObstacleLane in Message ObstacleDataB2 (0x424)
 *
 * Enum values defined for \ref SIG_ObstacleDataB2_ObstacleLane.
 *
 * @ingroup SIG_ObstacleDataB2_ObstacleLane
 */

/**
 * Value table ObstacleDataB2_ObstacleLane entry reserved.
 *
 * @ingroup ENUM_ObstacleDataB2_ObstacleLane
 */
#define ObstacleDataB2_ObstacleLane_reserved 7

/**
 * Value table ObstacleDataB2_ObstacleLane entry reserved_6.
 *
 * @ingroup ENUM_ObstacleDataB2_ObstacleLane
 */
#define ObstacleDataB2_ObstacleLane_reserved_6 6

/**
 * Value table ObstacleDataB2_ObstacleLane entry next.
 *
 * next lane right
 *
 * @ingroup ENUM_ObstacleDataB2_ObstacleLane
 */
#define ObstacleDataB2_ObstacleLane_next 5

/**
 * Value table ObstacleDataB2_ObstacleLane entry next_4.
 *
 * next lane left
 *
 * @ingroup ENUM_ObstacleDataB2_ObstacleLane
 */
#define ObstacleDataB2_ObstacleLane_next_4 4

/**
 * Value table ObstacleDataB2_ObstacleLane entry next_3.
 *
 * lane right
 *
 * @ingroup ENUM_ObstacleDataB2_ObstacleLane
 */
#define ObstacleDataB2_ObstacleLane_next_3 3

/**
 * Value table ObstacleDataB2_ObstacleLane entry next_2.
 *
 * lane left
 *
 * @ingroup ENUM_ObstacleDataB2_ObstacleLane
 */
#define ObstacleDataB2_ObstacleLane_next_2 2

/**
 * Value table ObstacleDataB2_ObstacleLane entry ego.
 *
 * lane
 *
 * @ingroup ENUM_ObstacleDataB2_ObstacleLane
 */
#define ObstacleDataB2_ObstacleLane_ego 1

/**
 * Value table ObstacleDataB2_ObstacleLane entry not.
 *
 * assigned
 *
 * @ingroup ENUM_ObstacleDataB2_ObstacleLane
 */
#define ObstacleDataB2_ObstacleLane_not 0

/**
 * @defgroup SIG_ObstacleDataB2_CIPVFlag Signal CIPVFlag of Message ObstacleDataB2 (0x424)
 *
 * Critical Vehicle in Path Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB2_CIPVFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB2
 * @{
 */

/**
 * Signal CIPVFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB2_CIPVFlag and \ref GET_ObstacleDataB2_CIPVFlag instead.
 */
#define SIG_ObstacleDataB2_CIPVFlag 0, 0, 35, 1

/**
 * Signal CIPVFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB2_CIPVFlag or \ref INIT_ObstacleDataB2 instead.
 */
#define SETUP_ObstacleDataB2_CIPVFlag 0, 0, 35, 1, 0

/**
 * Get signal CIPVFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB2_CIPVFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0))

/**
 * Set signal CIPVFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB2_CIPVFlag(buf, val)                                                                          \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 3);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal CIPVFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB2_CIPVFlag(buf) SET_ObstacleDataB2_CIPVFlag(buf, 0)

/**
 * Signal CIPVFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB2_CIPVFlag(x, fmt) ((x)*fmt)

/**
 * Signal CIPVFlag raw initial value.
 */
#define START_ObstacleDataB2_CIPVFlag 0

/**
 * Signal CIPVFlag raw minimum value.
 */
#define MIN_ObstacleDataB2_CIPVFlag 0

/**
 * Signal CIPVFlag raw maximum value.
 */
#define MAX_ObstacleDataB2_CIPVFlag 1

/**
 * Signal CIPVFlag raw offset value.
 */
#define OFF_ObstacleDataB2_CIPVFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB2_CIPVFlag Value Table for Signal CIPVFlag in Message ObstacleDataB2 (0x424)
 *
 * Enum values defined for \ref SIG_ObstacleDataB2_CIPVFlag.
 *
 * @ingroup SIG_ObstacleDataB2_CIPVFlag
 */

/**
 * Value table ObstacleDataB2_CIPVFlag entry CIPV.
 *
 * @ingroup ENUM_ObstacleDataB2_CIPVFlag
 */
#define ObstacleDataB2_CIPVFlag_CIPV 1

/**
 * Value table ObstacleDataB2_CIPVFlag entry not.
 *
 * CIPV
 *
 * @ingroup ENUM_ObstacleDataB2_CIPVFlag
 */
#define ObstacleDataB2_CIPVFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB2_MCPFlag Signal MCPFlag of Message ObstacleDataB2 (0x424)
 *
 * Most Critical Pedestrain Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB2_MCPFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB2
 * @{
 */

/**
 * Signal MCPFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB2_MCPFlag and \ref GET_ObstacleDataB2_MCPFlag instead.
 */
#define SIG_ObstacleDataB2_MCPFlag 0, 0, 36, 1

/**
 * Signal MCPFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB2_MCPFlag or \ref INIT_ObstacleDataB2 instead.
 */
#define SETUP_ObstacleDataB2_MCPFlag 0, 0, 36, 1, 0

/**
 * Get signal MCPFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB2_MCPFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0))

/**
 * Set signal MCPFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB2_MCPFlag(buf, val)                                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 4);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal MCPFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB2_MCPFlag(buf) SET_ObstacleDataB2_MCPFlag(buf, 0)

/**
 * Signal MCPFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB2_MCPFlag(x, fmt) ((x)*fmt)

/**
 * Signal MCPFlag raw initial value.
 */
#define START_ObstacleDataB2_MCPFlag 0

/**
 * Signal MCPFlag raw minimum value.
 */
#define MIN_ObstacleDataB2_MCPFlag 0

/**
 * Signal MCPFlag raw maximum value.
 */
#define MAX_ObstacleDataB2_MCPFlag 1

/**
 * Signal MCPFlag raw offset value.
 */
#define OFF_ObstacleDataB2_MCPFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB2_MCPFlag Value Table for Signal MCPFlag in Message ObstacleDataB2 (0x424)
 *
 * Enum values defined for \ref SIG_ObstacleDataB2_MCPFlag.
 *
 * @ingroup SIG_ObstacleDataB2_MCPFlag
 */

/**
 * Value table ObstacleDataB2_MCPFlag entry MCP.
 *
 * @ingroup ENUM_ObstacleDataB2_MCPFlag
 */
#define ObstacleDataB2_MCPFlag_MCP 1

/**
 * Value table ObstacleDataB2_MCPFlag entry not.
 *
 * MCP
 *
 * @ingroup ENUM_ObstacleDataB2_MCPFlag
 */
#define ObstacleDataB2_MCPFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB2_PedSubType Signal PedSubType of Message ObstacleDataB2 (0x424)
 *
 * Pestrain sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataB2_PedSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB2
 * @{
 */

/**
 * Signal PedSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB2_PedSubType and \ref GET_ObstacleDataB2_PedSubType instead.
 */
#define SIG_ObstacleDataB2_PedSubType 0, 0, 37, 2

/**
 * Signal PedSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB2_PedSubType or \ref INIT_ObstacleDataB2 instead.
 */
#define SETUP_ObstacleDataB2_PedSubType 0, 0, 37, 2, 0

/**
 * Get signal PedSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB2_PedSubType(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x03) << 0))

/**
 * Set signal PedSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB2_PedSubType(buf, val)                                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0x03 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 5;                                                                 \
    }

/**
 * Set signal PedSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB2_PedSubType(buf) SET_ObstacleDataB2_PedSubType(buf, 0)

/**
 * Signal PedSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB2_PedSubType(x, fmt) ((x)*fmt)

/**
 * Signal PedSubType raw initial value.
 */
#define START_ObstacleDataB2_PedSubType 0

/**
 * Signal PedSubType raw minimum value.
 */
#define MIN_ObstacleDataB2_PedSubType 0

/**
 * Signal PedSubType raw maximum value.
 */
#define MAX_ObstacleDataB2_PedSubType 3

/**
 * Signal PedSubType raw offset value.
 */
#define OFF_ObstacleDataB2_PedSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB2_PedSubType Value Table for Signal PedSubType in Message ObstacleDataB2 (0x424)
 *
 * Enum values defined for \ref SIG_ObstacleDataB2_PedSubType.
 *
 * @ingroup SIG_ObstacleDataB2_PedSubType
 */

/**
 * Value table ObstacleDataB2_PedSubType entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB2_PedSubType
 */
#define ObstacleDataB2_PedSubType_undefined 2

/**
 * Value table ObstacleDataB2_PedSubType entry Child.
 *
 * @ingroup ENUM_ObstacleDataB2_PedSubType
 */
#define ObstacleDataB2_PedSubType_Child 1

/**
 * Value table ObstacleDataB2_PedSubType entry Adult.
 *
 * @ingroup ENUM_ObstacleDataB2_PedSubType
 */
#define ObstacleDataB2_PedSubType_Adult 0

/**
 * @defgroup SIG_ObstacleDataB2_PedPos Signal PedPos of Message ObstacleDataB2 (0x424)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataB2_PedPos.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB2
 * @{
 */

/**
 * Signal PedPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB2_PedPos and \ref GET_ObstacleDataB2_PedPos instead.
 */
#define SIG_ObstacleDataB2_PedPos 0, 1, 39, 12

/**
 * Signal PedPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB2_PedPos or \ref INIT_ObstacleDataB2 instead.
 */
#define SETUP_ObstacleDataB2_PedPos 0, 1, 39, 12, 0

/**
 * Get signal PedPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB2_PedPos(buf)                                                                                 \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 2) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x07) << 9))

/**
 * Set signal PedPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB2_PedPos(buf, val)                                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0;                                                       \
        buf[6] &= ~(0x07 << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0;                                                       \
    }

/**
 * Set signal PedPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB2_PedPos(buf) SET_ObstacleDataB2_PedPos(buf, 0)

/**
 * Signal PedPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB2_PedPos(x, fmt) ((x)*fmt)

/**
 * Signal PedPos raw initial value.
 */
#define START_ObstacleDataB2_PedPos 0

/**
 * Signal PedPos raw minimum value.
 */
#define MIN_ObstacleDataB2_PedPos 0

/**
 * Signal PedPos raw maximum value.
 */
#define MAX_ObstacleDataB2_PedPos 3

/**
 * Signal PedPos raw offset value.
 */
#define OFF_ObstacleDataB2_PedPos 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB2_PedPos Value Table for Signal PedPos in Message ObstacleDataB2 (0x424)
 *
 * Enum values defined for \ref SIG_ObstacleDataB2_PedPos.
 *
 * @ingroup SIG_ObstacleDataB2_PedPos
 */

/**
 * Value table ObstacleDataB2_PedPos entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB2_PedPos
 */
#define ObstacleDataB2_PedPos_undefined 5

/**
 * Value table ObstacleDataB2_PedPos entry lying.
 *
 * @ingroup ENUM_ObstacleDataB2_PedPos
 */
#define ObstacleDataB2_PedPos_lying 4

/**
 * Value table ObstacleDataB2_PedPos entry walk.
 *
 * @ingroup ENUM_ObstacleDataB2_PedPos
 */
#define ObstacleDataB2_PedPos_walk 3

/**
 * Value table ObstacleDataB2_PedPos entry sit.
 *
 * @ingroup ENUM_ObstacleDataB2_PedPos
 */
#define ObstacleDataB2_PedPos_sit 2

/**
 * Value table ObstacleDataB2_PedPos entry crouch.
 *
 * @ingroup ENUM_ObstacleDataB2_PedPos
 */
#define ObstacleDataB2_PedPos_crouch 1

/**
 * Value table ObstacleDataB2_PedPos entry stand.
 *
 * @ingroup ENUM_ObstacleDataB2_PedPos
 */
#define ObstacleDataB2_PedPos_stand 0

/**
 * @defgroup SIG_ObstacleDataB2_reserved_b1 Signal reserved_b1 of Message ObstacleDataB2 (0x424)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB2
 * @{
 */

/**
 * Signal reserved_b1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB2_reserved_b1 and \ref GET_ObstacleDataB2_reserved_b1 instead.
 */
#define SIG_ObstacleDataB2_reserved_b1 0, 0, 51, 13

/**
 * Signal reserved_b1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB2_reserved_b1 or \ref INIT_ObstacleDataB2 instead.
 */
#define SETUP_ObstacleDataB2_reserved_b1 0, 0, 51, 13, 0

/**
 * Get signal reserved_b1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB2_reserved_b1(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 5))

/**
 * Set signal reserved_b1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB2_reserved_b1(buf, val)                                                                       \
    {                                                                                                                  \
        buf[6] &= ~(0x1f << 3);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
    }

/**
 * Set signal reserved_b1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB2_reserved_b1(buf) SET_ObstacleDataB2_reserved_b1(buf, 0)

/**
 * Signal reserved_b1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB2_reserved_b1(x, fmt) ((x)*fmt)

/**
 * Signal reserved_b1 raw initial value.
 */
#define START_ObstacleDataB2_reserved_b1 0

/**
 * Signal reserved_b1 raw minimum value.
 */
#define MIN_ObstacleDataB2_reserved_b1 0

/**
 * Signal reserved_b1 raw maximum value.
 */
#define MAX_ObstacleDataB2_reserved_b1 0

/**
 * Signal reserved_b1 raw offset value.
 */
#define OFF_ObstacleDataB2_reserved_b1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA7_ObstacleID Signal ObstacleID of Message ObstacleDataA7 (0x432)
 *
 * New obstacles are given the last used free ID
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal ObstacleID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_ObstacleID and \ref GET_ObstacleDataA7_ObstacleID instead.
 */
#define SIG_ObstacleDataA7_ObstacleID 0, 0, 0, 8

/**
 * Signal ObstacleID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_ObstacleID or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_ObstacleID 0, 0, 0, 8, 0

/**
 * Get signal ObstacleID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_ObstacleID(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_ObstacleID(buf, val)                                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_ObstacleID(buf) SET_ObstacleDataA7_ObstacleID(buf, 0)

/**
 * Signal ObstacleID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_ObstacleID(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleID raw initial value.
 */
#define START_ObstacleDataA7_ObstacleID 0

/**
 * Signal ObstacleID raw minimum value.
 */
#define MIN_ObstacleDataA7_ObstacleID 0

/**
 * Signal ObstacleID raw maximum value.
 */
#define MAX_ObstacleDataA7_ObstacleID 63

/**
 * Signal ObstacleID raw offset value.
 */
#define OFF_ObstacleDataA7_ObstacleID 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA7_ObstaclePosX Signal ObstaclePosX of Message ObstacleDataA7 (0x432)
 *
 * longitudinal distance to the middle of the RL and RR corners
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal ObstaclePosX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_ObstaclePosX and \ref GET_ObstacleDataA7_ObstaclePosX instead.
 */
#define SIG_ObstacleDataA7_ObstaclePosX 0, 0, 8, 13

/**
 * Signal ObstaclePosX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_ObstaclePosX or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_ObstaclePosX 0, 0, 8, 13, 0

/**
 * Get signal ObstaclePosX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_ObstaclePosX(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 8))

/**
 * Set signal ObstaclePosX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_ObstaclePosX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[2] &= ~(0x1f << 0);                                                                                        \
        buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0;                                                       \
    }

/**
 * Set signal ObstaclePosX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_ObstaclePosX(buf) SET_ObstacleDataA7_ObstaclePosX(buf, 0)

/**
 * Signal ObstaclePosX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_ObstaclePosX(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosX raw initial value.
 */
#define START_ObstacleDataA7_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw minimum value.
 */
#define MIN_ObstacleDataA7_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw maximum value.
 */
#define MAX_ObstacleDataA7_ObstaclePosX 8176

/**
 * Signal ObstaclePosX raw offset value.
 */
#define OFF_ObstacleDataA7_ObstaclePosX -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA7_ObstaclePosY Signal ObstaclePosY of Message ObstacleDataA7 (0x432)
 *
 * the lateral distance to the middle of the RL and RR corners, positive to the left
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal ObstaclePosY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_ObstaclePosY and \ref GET_ObstacleDataA7_ObstaclePosY instead.
 */
#define SIG_ObstacleDataA7_ObstaclePosY 0, 0, 21, 13

/**
 * Signal ObstaclePosY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_ObstaclePosY or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_ObstaclePosY 0, 0, 21, 13, 0

/**
 * Get signal ObstaclePosY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_ObstaclePosY(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) |       \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 11))

/**
 * Set signal ObstaclePosY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_ObstaclePosY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0x07 << 5);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0;                                                       \
        buf[4] &= ~(0x03 << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x03) << 0;                                                      \
    }

/**
 * Set signal ObstaclePosY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_ObstaclePosY(buf) SET_ObstacleDataA7_ObstaclePosY(buf, 0)

/**
 * Signal ObstaclePosY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_ObstaclePosY(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosY raw initial value.
 */
#define START_ObstacleDataA7_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw minimum value.
 */
#define MIN_ObstacleDataA7_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw maximum value.
 */
#define MAX_ObstacleDataA7_ObstaclePosY 8176

/**
 * Signal ObstaclePosY raw offset value.
 */
#define OFF_ObstacleDataA7_ObstaclePosY -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA7_BlinkerInfo Signal BlinkerInfo of Message ObstacleDataA7 (0x432)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA7_BlinkerInfo.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal BlinkerInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_BlinkerInfo and \ref GET_ObstacleDataA7_BlinkerInfo instead.
 */
#define SIG_ObstacleDataA7_BlinkerInfo 0, 0, 34, 3

/**
 * Signal BlinkerInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_BlinkerInfo or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_BlinkerInfo 0, 0, 34, 3, 0

/**
 * Get signal BlinkerInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_BlinkerInfo(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x07) << 0))

/**
 * Set signal BlinkerInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_BlinkerInfo(buf, val)                                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 2);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal BlinkerInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_BlinkerInfo(buf) SET_ObstacleDataA7_BlinkerInfo(buf, 0)

/**
 * Signal BlinkerInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_BlinkerInfo(x, fmt) ((x)*fmt)

/**
 * Signal BlinkerInfo raw initial value.
 */
#define START_ObstacleDataA7_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw minimum value.
 */
#define MIN_ObstacleDataA7_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw maximum value.
 */
#define MAX_ObstacleDataA7_BlinkerInfo 4

/**
 * Signal BlinkerInfo raw offset value.
 */
#define OFF_ObstacleDataA7_BlinkerInfo 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA7_BlinkerInfo Value Table for Signal BlinkerInfo in Message ObstacleDataA7 (0x432)
 *
 * Enum values defined for \ref SIG_ObstacleDataA7_BlinkerInfo.
 *
 * @ingroup SIG_ObstacleDataA7_BlinkerInfo
 */

/**
 * Value table ObstacleDataA7_BlinkerInfo entry both.
 *
 * @ingroup ENUM_ObstacleDataA7_BlinkerInfo
 */
#define ObstacleDataA7_BlinkerInfo_both 4

/**
 * Value table ObstacleDataA7_BlinkerInfo entry right.
 *
 * @ingroup ENUM_ObstacleDataA7_BlinkerInfo
 */
#define ObstacleDataA7_BlinkerInfo_right 3

/**
 * Value table ObstacleDataA7_BlinkerInfo entry left.
 *
 * @ingroup ENUM_ObstacleDataA7_BlinkerInfo
 */
#define ObstacleDataA7_BlinkerInfo_left 2

/**
 * Value table ObstacleDataA7_BlinkerInfo entry off.
 *
 * @ingroup ENUM_ObstacleDataA7_BlinkerInfo
 */
#define ObstacleDataA7_BlinkerInfo_off 1

/**
 * Value table ObstacleDataA7_BlinkerInfo entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataA7_BlinkerInfo
 */
#define ObstacleDataA7_BlinkerInfo_unavailable 0

/**
 * @defgroup SIG_ObstacleDataA7_Move_in_and_Out Signal Move_in_and_Out of Message ObstacleDataA7 (0x432)
 *
 * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our
 * estimation of where it is going to be within one second.
 *
 * Contains the value table \ref ENUM_ObstacleDataA7_Move_in_and_Out.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal Move_in_and_Out configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_Move_in_and_Out and \ref GET_ObstacleDataA7_Move_in_and_Out instead.
 */
#define SIG_ObstacleDataA7_Move_in_and_Out 0, 0, 37, 3

/**
 * Signal Move_in_and_Out setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_Move_in_and_Out or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_Move_in_and_Out 0, 0, 37, 3, 0

/**
 * Get signal Move_in_and_Out from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_Move_in_and_Out(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0))

/**
 * Set signal Move_in_and_Out in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_Move_in_and_Out(buf, val)                                                                   \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
    }

/**
 * Set signal Move_in_and_Out in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_Move_in_and_Out(buf) SET_ObstacleDataA7_Move_in_and_Out(buf, 0)

/**
 * Signal Move_in_and_Out value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_Move_in_and_Out(x, fmt) ((x)*fmt)

/**
 * Signal Move_in_and_Out raw initial value.
 */
#define START_ObstacleDataA7_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw minimum value.
 */
#define MIN_ObstacleDataA7_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw maximum value.
 */
#define MAX_ObstacleDataA7_Move_in_and_Out 4

/**
 * Signal Move_in_and_Out raw offset value.
 */
#define OFF_ObstacleDataA7_Move_in_and_Out 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA7_Move_in_and_Out Value Table for Signal Move_in_and_Out in Message ObstacleDataA7
 * (0x432)
 *
 * Enum values defined for \ref SIG_ObstacleDataA7_Move_in_and_Out.
 *
 * @ingroup SIG_ObstacleDataA7_Move_in_and_Out
 */

/**
 * Value table ObstacleDataA7_Move_in_and_Out entry cut_out.
 *
 * @ingroup ENUM_ObstacleDataA7_Move_in_and_Out
 */
#define ObstacleDataA7_Move_in_and_Out_cut_out 4

/**
 * Value table ObstacleDataA7_Move_in_and_Out entry cut_in.
 *
 * @ingroup ENUM_ObstacleDataA7_Move_in_and_Out
 */
#define ObstacleDataA7_Move_in_and_Out_cut_in 3

/**
 * Value table ObstacleDataA7_Move_in_and_Out entry out_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA7_Move_in_and_Out
 */
#define ObstacleDataA7_Move_in_and_Out_out_host_lane 2

/**
 * Value table ObstacleDataA7_Move_in_and_Out entry in_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA7_Move_in_and_Out
 */
#define ObstacleDataA7_Move_in_and_Out_in_host_lane 1

/**
 * Value table ObstacleDataA7_Move_in_and_Out entry undefined.
 *
 * @ingroup ENUM_ObstacleDataA7_Move_in_and_Out
 */
#define ObstacleDataA7_Move_in_and_Out_undefined 0

/**
 * @defgroup SIG_ObstacleDataA7_ObstacleVelX Signal ObstacleVelX of Message ObstacleDataA7 (0x432)
 *
 * Relative longitudinal speed of the ego vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal ObstacleVelX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_ObstacleVelX and \ref GET_ObstacleDataA7_ObstacleVelX instead.
 */
#define SIG_ObstacleDataA7_ObstacleVelX 0, 1, 40, 12

/**
 * Signal ObstacleVelX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_ObstacleVelX or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_ObstacleVelX 0, 1, 40, 12, 0

/**
 * Get signal ObstacleVelX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_ObstacleVelX(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_ObstacleVelX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[6] &= ~(0x0f << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_ObstacleVelX(buf) SET_ObstacleDataA7_ObstacleVelX(buf, 0)

/**
 * Signal ObstacleVelX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_ObstacleVelX(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelX raw initial value.
 */
#define START_ObstacleDataA7_ObstacleVelX 0

/**
 * Signal ObstacleVelX raw minimum value.
 */
#define MIN_ObstacleDataA7_ObstacleVelX -2047

/**
 * Signal ObstacleVelX raw maximum value.
 */
#define MAX_ObstacleDataA7_ObstacleVelX 2047

/**
 * Signal ObstacleVelX raw offset value.
 */
#define OFF_ObstacleDataA7_ObstacleVelX 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA7_ObstacleType Signal ObstacleType of Message ObstacleDataA7 (0x432)
 *
 * Obstacle type
 *
 * Contains the value table \ref ENUM_ObstacleDataA7_ObstacleType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal ObstacleType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_ObstacleType and \ref GET_ObstacleDataA7_ObstacleType instead.
 */
#define SIG_ObstacleDataA7_ObstacleType 0, 0, 52, 2

/**
 * Signal ObstacleType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_ObstacleType or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_ObstacleType 0, 0, 52, 2, 0

/**
 * Get signal ObstacleType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_ObstacleType(buf) (0 | (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x03) << 0))

/**
 * Set signal ObstacleType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_ObstacleType(buf, val)                                                                      \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 4);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 4;                                                                 \
    }

/**
 * Set signal ObstacleType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_ObstacleType(buf) SET_ObstacleDataA7_ObstacleType(buf, 0)

/**
 * Signal ObstacleType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_ObstacleType(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleType raw initial value.
 */
#define START_ObstacleDataA7_ObstacleType 0

/**
 * Signal ObstacleType raw minimum value.
 */
#define MIN_ObstacleDataA7_ObstacleType 0

/**
 * Signal ObstacleType raw maximum value.
 */
#define MAX_ObstacleDataA7_ObstacleType 3

/**
 * Signal ObstacleType raw offset value.
 */
#define OFF_ObstacleDataA7_ObstacleType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA7_ObstacleType Value Table for Signal ObstacleType in Message ObstacleDataA7 (0x432)
 *
 * Enum values defined for \ref SIG_ObstacleDataA7_ObstacleType.
 *
 * @ingroup SIG_ObstacleDataA7_ObstacleType
 */

/**
 * Value table ObstacleDataA7_ObstacleType entry General.
 *
 * Object
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleType
 */
#define ObstacleDataA7_ObstacleType_General 3

/**
 * Value table ObstacleDataA7_ObstacleType entry Cyclist.
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleType
 */
#define ObstacleDataA7_ObstacleType_Cyclist 2

/**
 * Value table ObstacleDataA7_ObstacleType entry Pedestrian.
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleType
 */
#define ObstacleDataA7_ObstacleType_Pedestrian 1

/**
 * Value table ObstacleDataA7_ObstacleType entry Vehicle.
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleType
 */
#define ObstacleDataA7_ObstacleType_Vehicle 0

/**
 * @defgroup SIG_ObstacleDataA7_VehicleSubType Signal VehicleSubType of Message ObstacleDataA7 (0x432)
 *
 * Vehicle sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataA7_VehicleSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal VehicleSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_VehicleSubType and \ref GET_ObstacleDataA7_VehicleSubType instead.
 */
#define SIG_ObstacleDataA7_VehicleSubType 0, 0, 54, 4

/**
 * Signal VehicleSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_VehicleSubType or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_VehicleSubType 0, 0, 54, 4, 0

/**
 * Get signal VehicleSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_VehicleSubType(buf)                                                                         \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x03) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 2))

/**
 * Set signal VehicleSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_VehicleSubType(buf, val)                                                                    \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 6);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[7] &= ~(0x03 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 2) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal VehicleSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_VehicleSubType(buf) SET_ObstacleDataA7_VehicleSubType(buf, 0)

/**
 * Signal VehicleSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_VehicleSubType(x, fmt) ((x)*fmt)

/**
 * Signal VehicleSubType raw initial value.
 */
#define START_ObstacleDataA7_VehicleSubType 0

/**
 * Signal VehicleSubType raw minimum value.
 */
#define MIN_ObstacleDataA7_VehicleSubType 0

/**
 * Signal VehicleSubType raw maximum value.
 */
#define MAX_ObstacleDataA7_VehicleSubType 15

/**
 * Signal VehicleSubType raw offset value.
 */
#define OFF_ObstacleDataA7_VehicleSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA7_VehicleSubType Value Table for Signal VehicleSubType in Message ObstacleDataA7 (0x432)
 *
 * Enum values defined for \ref SIG_ObstacleDataA7_VehicleSubType.
 *
 * @ingroup SIG_ObstacleDataA7_VehicleSubType
 */

/**
 * Value table ObstacleDataA7_VehicleSubType entry Tiny_car.
 *
 * @ingroup ENUM_ObstacleDataA7_VehicleSubType
 */
#define ObstacleDataA7_VehicleSubType_Tiny_car 5

/**
 * Value table ObstacleDataA7_VehicleSubType entry Special_vehicle.
 *
 * @ingroup ENUM_ObstacleDataA7_VehicleSubType
 */
#define ObstacleDataA7_VehicleSubType_Special_vehicle 4

/**
 * Value table ObstacleDataA7_VehicleSubType entry Motors.
 *
 * @ingroup ENUM_ObstacleDataA7_VehicleSubType
 */
#define ObstacleDataA7_VehicleSubType_Motors 3

/**
 * Value table ObstacleDataA7_VehicleSubType entry Trucks.
 *
 * @ingroup ENUM_ObstacleDataA7_VehicleSubType
 */
#define ObstacleDataA7_VehicleSubType_Trucks 2

/**
 * Value table ObstacleDataA7_VehicleSubType entry Small_Medium_Car.
 *
 * @ingroup ENUM_ObstacleDataA7_VehicleSubType
 */
#define ObstacleDataA7_VehicleSubType_Small_Medium_Car 1

/**
 * Value table ObstacleDataA7_VehicleSubType entry Bus.
 *
 * @ingroup ENUM_ObstacleDataA7_VehicleSubType
 */
#define ObstacleDataA7_VehicleSubType_Bus 0

/**
 * @defgroup SIG_ObstacleDataA7_ObstacleStatus Signal ObstacleStatus of Message ObstacleDataA7 (0x432)
 *
 * Reseved. Not Implemented
 *
 * Contains the value table \ref ENUM_ObstacleDataA7_ObstacleStatus.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal ObstacleStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_ObstacleStatus and \ref GET_ObstacleDataA7_ObstacleStatus instead.
 */
#define SIG_ObstacleDataA7_ObstacleStatus 0, 0, 58, 3

/**
 * Signal ObstacleStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_ObstacleStatus or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_ObstacleStatus 0, 0, 58, 3, 0

/**
 * Get signal ObstacleStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_ObstacleStatus(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0))

/**
 * Set signal ObstacleStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_ObstacleStatus(buf, val)                                                                    \
    {                                                                                                                  \
        buf[7] &= ~(0x07 << 2);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal ObstacleStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_ObstacleStatus(buf) SET_ObstacleDataA7_ObstacleStatus(buf, 0)

/**
 * Signal ObstacleStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_ObstacleStatus(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleStatus raw initial value.
 */
#define START_ObstacleDataA7_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw minimum value.
 */
#define MIN_ObstacleDataA7_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw maximum value.
 */
#define MAX_ObstacleDataA7_ObstacleStatus 7

/**
 * Signal ObstacleStatus raw offset value.
 */
#define OFF_ObstacleDataA7_ObstacleStatus 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA7_ObstacleStatus Value Table for Signal ObstacleStatus in Message ObstacleDataA7 (0x432)
 *
 * Enum values defined for \ref SIG_ObstacleDataA7_ObstacleStatus.
 *
 * @ingroup SIG_ObstacleDataA7_ObstacleStatus
 */

/**
 * Value table ObstacleDataA7_ObstacleStatus entry Unused.
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleStatus
 */
#define ObstacleDataA7_ObstacleStatus_Unused 6

/**
 * Value table ObstacleDataA7_ObstacleStatus entry Parked.
 *
 * never moved, BckLightsOff
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleStatus
 */
#define ObstacleDataA7_ObstacleStatus_Parked 5

/**
 * Value table ObstacleDataA7_ObstacleStatus entry Oncoming.
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleStatus
 */
#define ObstacleDataA7_ObstacleStatus_Oncoming 4

/**
 * Value table ObstacleDataA7_ObstacleStatus entry moving.
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleStatus
 */
#define ObstacleDataA7_ObstacleStatus_moving 3

/**
 * Value table ObstacleDataA7_ObstacleStatus entry stopped.
 *
 * (movable)
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleStatus
 */
#define ObstacleDataA7_ObstacleStatus_stopped 2

/**
 * Value table ObstacleDataA7_ObstacleStatus entry standing.
 *
 * neverMoved bckLightsOn
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleStatus
 */
#define ObstacleDataA7_ObstacleStatus_standing 1

/**
 * Value table ObstacleDataA7_ObstacleStatus entry not.
 *
 * defined
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleStatus
 */
#define ObstacleDataA7_ObstacleStatus_not 0

/**
 * @defgroup SIG_ObstacleDataA7_ObstacleBrakeLights Signal ObstacleBrakeLights of Message ObstacleDataA7 (0x432)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA7_ObstacleBrakeLights.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal ObstacleBrakeLights configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_ObstacleBrakeLights and \ref GET_ObstacleDataA7_ObstacleBrakeLights instead.
 */
#define SIG_ObstacleDataA7_ObstacleBrakeLights 0, 0, 61, 1

/**
 * Signal ObstacleBrakeLights setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_ObstacleBrakeLights or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_ObstacleBrakeLights 0, 0, 61, 1, 0

/**
 * Get signal ObstacleBrakeLights from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_ObstacleBrakeLights(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0))

/**
 * Set signal ObstacleBrakeLights in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_ObstacleBrakeLights(buf, val)                                                               \
    {                                                                                                                  \
        buf[7] &= ~(0x01 << 5);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal ObstacleBrakeLights in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_ObstacleBrakeLights(buf) SET_ObstacleDataA7_ObstacleBrakeLights(buf, 0)

/**
 * Signal ObstacleBrakeLights value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_ObstacleBrakeLights(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleBrakeLights raw initial value.
 */
#define START_ObstacleDataA7_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw minimum value.
 */
#define MIN_ObstacleDataA7_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw maximum value.
 */
#define MAX_ObstacleDataA7_ObstacleBrakeLights 1

/**
 * Signal ObstacleBrakeLights raw offset value.
 */
#define OFF_ObstacleDataA7_ObstacleBrakeLights 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA7_ObstacleBrakeLights Value Table for Signal ObstacleBrakeLights in Message
 * ObstacleDataA7 (0x432)
 *
 * Enum values defined for \ref SIG_ObstacleDataA7_ObstacleBrakeLights.
 *
 * @ingroup SIG_ObstacleDataA7_ObstacleBrakeLights
 */

/**
 * Value table ObstacleDataA7_ObstacleBrakeLights entry object_s.
 *
 * object's brake lights are on
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleBrakeLights
 */
#define ObstacleDataA7_ObstacleBrakeLights_object_s 1

/**
 * Value table ObstacleDataA7_ObstacleBrakeLights entry object_s_0.
 *
 * object's brake lights are off
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleBrakeLights
 */
#define ObstacleDataA7_ObstacleBrakeLights_object_s_0 0

/**
 * @defgroup SIG_ObstacleDataA7_ObstacleValid Signal ObstacleValid of Message ObstacleDataA7 (0x432)
 *
 * Obstacle Valid info
 *
 * Contains the value table \ref ENUM_ObstacleDataA7_ObstacleValid.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA7
 * @{
 */

/**
 * Signal ObstacleValid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA7_ObstacleValid and \ref GET_ObstacleDataA7_ObstacleValid instead.
 */
#define SIG_ObstacleDataA7_ObstacleValid 0, 0, 62, 2

/**
 * Signal ObstacleValid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA7_ObstacleValid or \ref INIT_ObstacleDataA7 instead.
 */
#define SETUP_ObstacleDataA7_ObstacleValid 0, 0, 62, 2, 0

/**
 * Get signal ObstacleValid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA7_ObstacleValid(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0))

/**
 * Set signal ObstacleValid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA7_ObstacleValid(buf, val)                                                                     \
    {                                                                                                                  \
        buf[7] &= ~(0x03 << 6);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
    }

/**
 * Set signal ObstacleValid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA7_ObstacleValid(buf) SET_ObstacleDataA7_ObstacleValid(buf, 0)

/**
 * Signal ObstacleValid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA7_ObstacleValid(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleValid raw initial value.
 */
#define START_ObstacleDataA7_ObstacleValid 0

/**
 * Signal ObstacleValid raw minimum value.
 */
#define MIN_ObstacleDataA7_ObstacleValid 0

/**
 * Signal ObstacleValid raw maximum value.
 */
#define MAX_ObstacleDataA7_ObstacleValid 2

/**
 * Signal ObstacleValid raw offset value.
 */
#define OFF_ObstacleDataA7_ObstacleValid 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA7_ObstacleValid Value Table for Signal ObstacleValid in Message ObstacleDataA7 (0x432)
 *
 * Enum values defined for \ref SIG_ObstacleDataA7_ObstacleValid.
 *
 * @ingroup SIG_ObstacleDataA7_ObstacleValid
 */

/**
 * Value table ObstacleDataA7_ObstacleValid entry older.
 *
 * valid
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleValid
 */
#define ObstacleDataA7_ObstacleValid_older 2

/**
 * Value table ObstacleDataA7_ObstacleValid entry new.
 *
 * valid (detected this frame)
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleValid
 */
#define ObstacleDataA7_ObstacleValid_new 1

/**
 * Value table ObstacleDataA7_ObstacleValid entry invalid.
 *
 * Obstacle(default value)
 *
 * @ingroup ENUM_ObstacleDataA7_ObstacleValid
 */
#define ObstacleDataA7_ObstacleValid_invalid 0

/**
 * @defgroup SIG_ObstacleDataA8_ObstacleID Signal ObstacleID of Message ObstacleDataA8 (0x435)
 *
 * New obstacles are given the last used free ID
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal ObstacleID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_ObstacleID and \ref GET_ObstacleDataA8_ObstacleID instead.
 */
#define SIG_ObstacleDataA8_ObstacleID 0, 0, 0, 8

/**
 * Signal ObstacleID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_ObstacleID or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_ObstacleID 0, 0, 0, 8, 0

/**
 * Get signal ObstacleID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_ObstacleID(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_ObstacleID(buf, val)                                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_ObstacleID(buf) SET_ObstacleDataA8_ObstacleID(buf, 0)

/**
 * Signal ObstacleID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_ObstacleID(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleID raw initial value.
 */
#define START_ObstacleDataA8_ObstacleID 0

/**
 * Signal ObstacleID raw minimum value.
 */
#define MIN_ObstacleDataA8_ObstacleID 0

/**
 * Signal ObstacleID raw maximum value.
 */
#define MAX_ObstacleDataA8_ObstacleID 63

/**
 * Signal ObstacleID raw offset value.
 */
#define OFF_ObstacleDataA8_ObstacleID 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA8_ObstaclePosX Signal ObstaclePosX of Message ObstacleDataA8 (0x435)
 *
 * longitudinal distance to the middle of the RL and RR corners
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal ObstaclePosX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_ObstaclePosX and \ref GET_ObstacleDataA8_ObstaclePosX instead.
 */
#define SIG_ObstacleDataA8_ObstaclePosX 0, 0, 8, 13

/**
 * Signal ObstaclePosX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_ObstaclePosX or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_ObstaclePosX 0, 0, 8, 13, 0

/**
 * Get signal ObstaclePosX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_ObstaclePosX(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 8))

/**
 * Set signal ObstaclePosX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_ObstaclePosX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[2] &= ~(0x1f << 0);                                                                                        \
        buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0;                                                       \
    }

/**
 * Set signal ObstaclePosX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_ObstaclePosX(buf) SET_ObstacleDataA8_ObstaclePosX(buf, 0)

/**
 * Signal ObstaclePosX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_ObstaclePosX(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosX raw initial value.
 */
#define START_ObstacleDataA8_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw minimum value.
 */
#define MIN_ObstacleDataA8_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw maximum value.
 */
#define MAX_ObstacleDataA8_ObstaclePosX 8176

/**
 * Signal ObstaclePosX raw offset value.
 */
#define OFF_ObstacleDataA8_ObstaclePosX -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA8_ObstaclePosY Signal ObstaclePosY of Message ObstacleDataA8 (0x435)
 *
 * the lateral distance to the middle of the RL and RR corners, positive to the left
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal ObstaclePosY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_ObstaclePosY and \ref GET_ObstacleDataA8_ObstaclePosY instead.
 */
#define SIG_ObstacleDataA8_ObstaclePosY 0, 0, 21, 13

/**
 * Signal ObstaclePosY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_ObstaclePosY or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_ObstaclePosY 0, 0, 21, 13, 0

/**
 * Get signal ObstaclePosY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_ObstaclePosY(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) |       \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 11))

/**
 * Set signal ObstaclePosY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_ObstaclePosY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0x07 << 5);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0;                                                       \
        buf[4] &= ~(0x03 << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x03) << 0;                                                      \
    }

/**
 * Set signal ObstaclePosY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_ObstaclePosY(buf) SET_ObstacleDataA8_ObstaclePosY(buf, 0)

/**
 * Signal ObstaclePosY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_ObstaclePosY(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosY raw initial value.
 */
#define START_ObstacleDataA8_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw minimum value.
 */
#define MIN_ObstacleDataA8_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw maximum value.
 */
#define MAX_ObstacleDataA8_ObstaclePosY 8176

/**
 * Signal ObstaclePosY raw offset value.
 */
#define OFF_ObstacleDataA8_ObstaclePosY -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA8_BlinkerInfo Signal BlinkerInfo of Message ObstacleDataA8 (0x435)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA8_BlinkerInfo.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal BlinkerInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_BlinkerInfo and \ref GET_ObstacleDataA8_BlinkerInfo instead.
 */
#define SIG_ObstacleDataA8_BlinkerInfo 0, 0, 34, 3

/**
 * Signal BlinkerInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_BlinkerInfo or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_BlinkerInfo 0, 0, 34, 3, 0

/**
 * Get signal BlinkerInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_BlinkerInfo(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x07) << 0))

/**
 * Set signal BlinkerInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_BlinkerInfo(buf, val)                                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 2);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal BlinkerInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_BlinkerInfo(buf) SET_ObstacleDataA8_BlinkerInfo(buf, 0)

/**
 * Signal BlinkerInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_BlinkerInfo(x, fmt) ((x)*fmt)

/**
 * Signal BlinkerInfo raw initial value.
 */
#define START_ObstacleDataA8_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw minimum value.
 */
#define MIN_ObstacleDataA8_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw maximum value.
 */
#define MAX_ObstacleDataA8_BlinkerInfo 4

/**
 * Signal BlinkerInfo raw offset value.
 */
#define OFF_ObstacleDataA8_BlinkerInfo 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA8_BlinkerInfo Value Table for Signal BlinkerInfo in Message ObstacleDataA8 (0x435)
 *
 * Enum values defined for \ref SIG_ObstacleDataA8_BlinkerInfo.
 *
 * @ingroup SIG_ObstacleDataA8_BlinkerInfo
 */

/**
 * Value table ObstacleDataA8_BlinkerInfo entry both.
 *
 * @ingroup ENUM_ObstacleDataA8_BlinkerInfo
 */
#define ObstacleDataA8_BlinkerInfo_both 4

/**
 * Value table ObstacleDataA8_BlinkerInfo entry right.
 *
 * @ingroup ENUM_ObstacleDataA8_BlinkerInfo
 */
#define ObstacleDataA8_BlinkerInfo_right 3

/**
 * Value table ObstacleDataA8_BlinkerInfo entry left.
 *
 * @ingroup ENUM_ObstacleDataA8_BlinkerInfo
 */
#define ObstacleDataA8_BlinkerInfo_left 2

/**
 * Value table ObstacleDataA8_BlinkerInfo entry off.
 *
 * @ingroup ENUM_ObstacleDataA8_BlinkerInfo
 */
#define ObstacleDataA8_BlinkerInfo_off 1

/**
 * Value table ObstacleDataA8_BlinkerInfo entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataA8_BlinkerInfo
 */
#define ObstacleDataA8_BlinkerInfo_unavailable 0

/**
 * @defgroup SIG_ObstacleDataA8_Move_in_and_Out Signal Move_in_and_Out of Message ObstacleDataA8 (0x435)
 *
 * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our
 * estimation of where it is going to be within one second.
 *
 * Contains the value table \ref ENUM_ObstacleDataA8_Move_in_and_Out.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal Move_in_and_Out configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_Move_in_and_Out and \ref GET_ObstacleDataA8_Move_in_and_Out instead.
 */
#define SIG_ObstacleDataA8_Move_in_and_Out 0, 0, 37, 3

/**
 * Signal Move_in_and_Out setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_Move_in_and_Out or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_Move_in_and_Out 0, 0, 37, 3, 0

/**
 * Get signal Move_in_and_Out from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_Move_in_and_Out(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0))

/**
 * Set signal Move_in_and_Out in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_Move_in_and_Out(buf, val)                                                                   \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
    }

/**
 * Set signal Move_in_and_Out in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_Move_in_and_Out(buf) SET_ObstacleDataA8_Move_in_and_Out(buf, 0)

/**
 * Signal Move_in_and_Out value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_Move_in_and_Out(x, fmt) ((x)*fmt)

/**
 * Signal Move_in_and_Out raw initial value.
 */
#define START_ObstacleDataA8_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw minimum value.
 */
#define MIN_ObstacleDataA8_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw maximum value.
 */
#define MAX_ObstacleDataA8_Move_in_and_Out 4

/**
 * Signal Move_in_and_Out raw offset value.
 */
#define OFF_ObstacleDataA8_Move_in_and_Out 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA8_Move_in_and_Out Value Table for Signal Move_in_and_Out in Message ObstacleDataA8
 * (0x435)
 *
 * Enum values defined for \ref SIG_ObstacleDataA8_Move_in_and_Out.
 *
 * @ingroup SIG_ObstacleDataA8_Move_in_and_Out
 */

/**
 * Value table ObstacleDataA8_Move_in_and_Out entry cut_out.
 *
 * @ingroup ENUM_ObstacleDataA8_Move_in_and_Out
 */
#define ObstacleDataA8_Move_in_and_Out_cut_out 4

/**
 * Value table ObstacleDataA8_Move_in_and_Out entry cut_in.
 *
 * @ingroup ENUM_ObstacleDataA8_Move_in_and_Out
 */
#define ObstacleDataA8_Move_in_and_Out_cut_in 3

/**
 * Value table ObstacleDataA8_Move_in_and_Out entry out_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA8_Move_in_and_Out
 */
#define ObstacleDataA8_Move_in_and_Out_out_host_lane 2

/**
 * Value table ObstacleDataA8_Move_in_and_Out entry in_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA8_Move_in_and_Out
 */
#define ObstacleDataA8_Move_in_and_Out_in_host_lane 1

/**
 * Value table ObstacleDataA8_Move_in_and_Out entry undefined.
 *
 * @ingroup ENUM_ObstacleDataA8_Move_in_and_Out
 */
#define ObstacleDataA8_Move_in_and_Out_undefined 0

/**
 * @defgroup SIG_ObstacleDataA8_ObstacleVelX Signal ObstacleVelX of Message ObstacleDataA8 (0x435)
 *
 * Relative longitudinal speed of the ego vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal ObstacleVelX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_ObstacleVelX and \ref GET_ObstacleDataA8_ObstacleVelX instead.
 */
#define SIG_ObstacleDataA8_ObstacleVelX 0, 1, 40, 12

/**
 * Signal ObstacleVelX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_ObstacleVelX or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_ObstacleVelX 0, 1, 40, 12, 0

/**
 * Get signal ObstacleVelX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_ObstacleVelX(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_ObstacleVelX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[6] &= ~(0x0f << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_ObstacleVelX(buf) SET_ObstacleDataA8_ObstacleVelX(buf, 0)

/**
 * Signal ObstacleVelX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_ObstacleVelX(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelX raw initial value.
 */
#define START_ObstacleDataA8_ObstacleVelX 0

/**
 * Signal ObstacleVelX raw minimum value.
 */
#define MIN_ObstacleDataA8_ObstacleVelX -2047

/**
 * Signal ObstacleVelX raw maximum value.
 */
#define MAX_ObstacleDataA8_ObstacleVelX 2047

/**
 * Signal ObstacleVelX raw offset value.
 */
#define OFF_ObstacleDataA8_ObstacleVelX 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA8_ObstacleType Signal ObstacleType of Message ObstacleDataA8 (0x435)
 *
 * Obstacle type
 *
 * Contains the value table \ref ENUM_ObstacleDataA8_ObstacleType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal ObstacleType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_ObstacleType and \ref GET_ObstacleDataA8_ObstacleType instead.
 */
#define SIG_ObstacleDataA8_ObstacleType 0, 0, 52, 2

/**
 * Signal ObstacleType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_ObstacleType or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_ObstacleType 0, 0, 52, 2, 0

/**
 * Get signal ObstacleType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_ObstacleType(buf) (0 | (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x03) << 0))

/**
 * Set signal ObstacleType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_ObstacleType(buf, val)                                                                      \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 4);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 4;                                                                 \
    }

/**
 * Set signal ObstacleType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_ObstacleType(buf) SET_ObstacleDataA8_ObstacleType(buf, 0)

/**
 * Signal ObstacleType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_ObstacleType(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleType raw initial value.
 */
#define START_ObstacleDataA8_ObstacleType 0

/**
 * Signal ObstacleType raw minimum value.
 */
#define MIN_ObstacleDataA8_ObstacleType 0

/**
 * Signal ObstacleType raw maximum value.
 */
#define MAX_ObstacleDataA8_ObstacleType 3

/**
 * Signal ObstacleType raw offset value.
 */
#define OFF_ObstacleDataA8_ObstacleType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA8_ObstacleType Value Table for Signal ObstacleType in Message ObstacleDataA8 (0x435)
 *
 * Enum values defined for \ref SIG_ObstacleDataA8_ObstacleType.
 *
 * @ingroup SIG_ObstacleDataA8_ObstacleType
 */

/**
 * Value table ObstacleDataA8_ObstacleType entry General.
 *
 * Object
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleType
 */
#define ObstacleDataA8_ObstacleType_General 3

/**
 * Value table ObstacleDataA8_ObstacleType entry Cyclist.
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleType
 */
#define ObstacleDataA8_ObstacleType_Cyclist 2

/**
 * Value table ObstacleDataA8_ObstacleType entry Pedestrian.
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleType
 */
#define ObstacleDataA8_ObstacleType_Pedestrian 1

/**
 * Value table ObstacleDataA8_ObstacleType entry Vehicle.
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleType
 */
#define ObstacleDataA8_ObstacleType_Vehicle 0

/**
 * @defgroup SIG_ObstacleDataA8_VehicleSubType Signal VehicleSubType of Message ObstacleDataA8 (0x435)
 *
 * Vehicle sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataA8_VehicleSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal VehicleSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_VehicleSubType and \ref GET_ObstacleDataA8_VehicleSubType instead.
 */
#define SIG_ObstacleDataA8_VehicleSubType 0, 0, 54, 4

/**
 * Signal VehicleSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_VehicleSubType or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_VehicleSubType 0, 0, 54, 4, 0

/**
 * Get signal VehicleSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_VehicleSubType(buf)                                                                         \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x03) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 2))

/**
 * Set signal VehicleSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_VehicleSubType(buf, val)                                                                    \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 6);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[7] &= ~(0x03 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 2) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal VehicleSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_VehicleSubType(buf) SET_ObstacleDataA8_VehicleSubType(buf, 0)

/**
 * Signal VehicleSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_VehicleSubType(x, fmt) ((x)*fmt)

/**
 * Signal VehicleSubType raw initial value.
 */
#define START_ObstacleDataA8_VehicleSubType 0

/**
 * Signal VehicleSubType raw minimum value.
 */
#define MIN_ObstacleDataA8_VehicleSubType 0

/**
 * Signal VehicleSubType raw maximum value.
 */
#define MAX_ObstacleDataA8_VehicleSubType 15

/**
 * Signal VehicleSubType raw offset value.
 */
#define OFF_ObstacleDataA8_VehicleSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA8_VehicleSubType Value Table for Signal VehicleSubType in Message ObstacleDataA8 (0x435)
 *
 * Enum values defined for \ref SIG_ObstacleDataA8_VehicleSubType.
 *
 * @ingroup SIG_ObstacleDataA8_VehicleSubType
 */

/**
 * Value table ObstacleDataA8_VehicleSubType entry Tiny_car.
 *
 * @ingroup ENUM_ObstacleDataA8_VehicleSubType
 */
#define ObstacleDataA8_VehicleSubType_Tiny_car 5

/**
 * Value table ObstacleDataA8_VehicleSubType entry Special_vehicle.
 *
 * @ingroup ENUM_ObstacleDataA8_VehicleSubType
 */
#define ObstacleDataA8_VehicleSubType_Special_vehicle 4

/**
 * Value table ObstacleDataA8_VehicleSubType entry Motors.
 *
 * @ingroup ENUM_ObstacleDataA8_VehicleSubType
 */
#define ObstacleDataA8_VehicleSubType_Motors 3

/**
 * Value table ObstacleDataA8_VehicleSubType entry Trucks.
 *
 * @ingroup ENUM_ObstacleDataA8_VehicleSubType
 */
#define ObstacleDataA8_VehicleSubType_Trucks 2

/**
 * Value table ObstacleDataA8_VehicleSubType entry Small_Medium_Car.
 *
 * @ingroup ENUM_ObstacleDataA8_VehicleSubType
 */
#define ObstacleDataA8_VehicleSubType_Small_Medium_Car 1

/**
 * Value table ObstacleDataA8_VehicleSubType entry Bus.
 *
 * @ingroup ENUM_ObstacleDataA8_VehicleSubType
 */
#define ObstacleDataA8_VehicleSubType_Bus 0

/**
 * @defgroup SIG_ObstacleDataA8_ObstacleStatus Signal ObstacleStatus of Message ObstacleDataA8 (0x435)
 *
 * Reseved. Not Implemented
 *
 * Contains the value table \ref ENUM_ObstacleDataA8_ObstacleStatus.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal ObstacleStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_ObstacleStatus and \ref GET_ObstacleDataA8_ObstacleStatus instead.
 */
#define SIG_ObstacleDataA8_ObstacleStatus 0, 0, 58, 3

/**
 * Signal ObstacleStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_ObstacleStatus or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_ObstacleStatus 0, 0, 58, 3, 0

/**
 * Get signal ObstacleStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_ObstacleStatus(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0))

/**
 * Set signal ObstacleStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_ObstacleStatus(buf, val)                                                                    \
    {                                                                                                                  \
        buf[7] &= ~(0x07 << 2);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal ObstacleStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_ObstacleStatus(buf) SET_ObstacleDataA8_ObstacleStatus(buf, 0)

/**
 * Signal ObstacleStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_ObstacleStatus(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleStatus raw initial value.
 */
#define START_ObstacleDataA8_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw minimum value.
 */
#define MIN_ObstacleDataA8_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw maximum value.
 */
#define MAX_ObstacleDataA8_ObstacleStatus 7

/**
 * Signal ObstacleStatus raw offset value.
 */
#define OFF_ObstacleDataA8_ObstacleStatus 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA8_ObstacleStatus Value Table for Signal ObstacleStatus in Message ObstacleDataA8 (0x435)
 *
 * Enum values defined for \ref SIG_ObstacleDataA8_ObstacleStatus.
 *
 * @ingroup SIG_ObstacleDataA8_ObstacleStatus
 */

/**
 * Value table ObstacleDataA8_ObstacleStatus entry Unused.
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleStatus
 */
#define ObstacleDataA8_ObstacleStatus_Unused 6

/**
 * Value table ObstacleDataA8_ObstacleStatus entry Parked.
 *
 * never moved, BckLightsOff
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleStatus
 */
#define ObstacleDataA8_ObstacleStatus_Parked 5

/**
 * Value table ObstacleDataA8_ObstacleStatus entry Oncoming.
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleStatus
 */
#define ObstacleDataA8_ObstacleStatus_Oncoming 4

/**
 * Value table ObstacleDataA8_ObstacleStatus entry moving.
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleStatus
 */
#define ObstacleDataA8_ObstacleStatus_moving 3

/**
 * Value table ObstacleDataA8_ObstacleStatus entry stopped.
 *
 * (movable)
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleStatus
 */
#define ObstacleDataA8_ObstacleStatus_stopped 2

/**
 * Value table ObstacleDataA8_ObstacleStatus entry standing.
 *
 * neverMoved bckLightsOn
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleStatus
 */
#define ObstacleDataA8_ObstacleStatus_standing 1

/**
 * Value table ObstacleDataA8_ObstacleStatus entry not.
 *
 * defined
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleStatus
 */
#define ObstacleDataA8_ObstacleStatus_not 0

/**
 * @defgroup SIG_ObstacleDataA8_ObstacleBrakeLights Signal ObstacleBrakeLights of Message ObstacleDataA8 (0x435)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA8_ObstacleBrakeLights.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal ObstacleBrakeLights configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_ObstacleBrakeLights and \ref GET_ObstacleDataA8_ObstacleBrakeLights instead.
 */
#define SIG_ObstacleDataA8_ObstacleBrakeLights 0, 0, 61, 1

/**
 * Signal ObstacleBrakeLights setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_ObstacleBrakeLights or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_ObstacleBrakeLights 0, 0, 61, 1, 0

/**
 * Get signal ObstacleBrakeLights from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_ObstacleBrakeLights(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0))

/**
 * Set signal ObstacleBrakeLights in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_ObstacleBrakeLights(buf, val)                                                               \
    {                                                                                                                  \
        buf[7] &= ~(0x01 << 5);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal ObstacleBrakeLights in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_ObstacleBrakeLights(buf) SET_ObstacleDataA8_ObstacleBrakeLights(buf, 0)

/**
 * Signal ObstacleBrakeLights value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_ObstacleBrakeLights(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleBrakeLights raw initial value.
 */
#define START_ObstacleDataA8_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw minimum value.
 */
#define MIN_ObstacleDataA8_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw maximum value.
 */
#define MAX_ObstacleDataA8_ObstacleBrakeLights 1

/**
 * Signal ObstacleBrakeLights raw offset value.
 */
#define OFF_ObstacleDataA8_ObstacleBrakeLights 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA8_ObstacleBrakeLights Value Table for Signal ObstacleBrakeLights in Message
 * ObstacleDataA8 (0x435)
 *
 * Enum values defined for \ref SIG_ObstacleDataA8_ObstacleBrakeLights.
 *
 * @ingroup SIG_ObstacleDataA8_ObstacleBrakeLights
 */

/**
 * Value table ObstacleDataA8_ObstacleBrakeLights entry object_s.
 *
 * object's brake lights are on
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleBrakeLights
 */
#define ObstacleDataA8_ObstacleBrakeLights_object_s 1

/**
 * Value table ObstacleDataA8_ObstacleBrakeLights entry object_s_0.
 *
 * object's brake lights are off
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleBrakeLights
 */
#define ObstacleDataA8_ObstacleBrakeLights_object_s_0 0

/**
 * @defgroup SIG_ObstacleDataA8_ObstacleValid Signal ObstacleValid of Message ObstacleDataA8 (0x435)
 *
 * Obstacle Valid info
 *
 * Contains the value table \ref ENUM_ObstacleDataA8_ObstacleValid.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA8
 * @{
 */

/**
 * Signal ObstacleValid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA8_ObstacleValid and \ref GET_ObstacleDataA8_ObstacleValid instead.
 */
#define SIG_ObstacleDataA8_ObstacleValid 0, 0, 62, 2

/**
 * Signal ObstacleValid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA8_ObstacleValid or \ref INIT_ObstacleDataA8 instead.
 */
#define SETUP_ObstacleDataA8_ObstacleValid 0, 0, 62, 2, 0

/**
 * Get signal ObstacleValid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA8_ObstacleValid(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0))

/**
 * Set signal ObstacleValid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA8_ObstacleValid(buf, val)                                                                     \
    {                                                                                                                  \
        buf[7] &= ~(0x03 << 6);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
    }

/**
 * Set signal ObstacleValid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA8_ObstacleValid(buf) SET_ObstacleDataA8_ObstacleValid(buf, 0)

/**
 * Signal ObstacleValid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA8_ObstacleValid(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleValid raw initial value.
 */
#define START_ObstacleDataA8_ObstacleValid 0

/**
 * Signal ObstacleValid raw minimum value.
 */
#define MIN_ObstacleDataA8_ObstacleValid 0

/**
 * Signal ObstacleValid raw maximum value.
 */
#define MAX_ObstacleDataA8_ObstacleValid 2

/**
 * Signal ObstacleValid raw offset value.
 */
#define OFF_ObstacleDataA8_ObstacleValid 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA8_ObstacleValid Value Table for Signal ObstacleValid in Message ObstacleDataA8 (0x435)
 *
 * Enum values defined for \ref SIG_ObstacleDataA8_ObstacleValid.
 *
 * @ingroup SIG_ObstacleDataA8_ObstacleValid
 */

/**
 * Value table ObstacleDataA8_ObstacleValid entry older.
 *
 * valid
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleValid
 */
#define ObstacleDataA8_ObstacleValid_older 2

/**
 * Value table ObstacleDataA8_ObstacleValid entry new.
 *
 * valid (detected this frame)
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleValid
 */
#define ObstacleDataA8_ObstacleValid_new 1

/**
 * Value table ObstacleDataA8_ObstacleValid entry invalid.
 *
 * Obstacle(default value)
 *
 * @ingroup ENUM_ObstacleDataA8_ObstacleValid
 */
#define ObstacleDataA8_ObstacleValid_invalid 0

/**
 * @defgroup SIG_ObstacleDataA9_ObstacleID Signal ObstacleID of Message ObstacleDataA9 (0x438)
 *
 * New obstacles are given the last used free ID
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal ObstacleID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_ObstacleID and \ref GET_ObstacleDataA9_ObstacleID instead.
 */
#define SIG_ObstacleDataA9_ObstacleID 0, 0, 0, 8

/**
 * Signal ObstacleID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_ObstacleID or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_ObstacleID 0, 0, 0, 8, 0

/**
 * Get signal ObstacleID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_ObstacleID(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_ObstacleID(buf, val)                                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_ObstacleID(buf) SET_ObstacleDataA9_ObstacleID(buf, 0)

/**
 * Signal ObstacleID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_ObstacleID(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleID raw initial value.
 */
#define START_ObstacleDataA9_ObstacleID 0

/**
 * Signal ObstacleID raw minimum value.
 */
#define MIN_ObstacleDataA9_ObstacleID 0

/**
 * Signal ObstacleID raw maximum value.
 */
#define MAX_ObstacleDataA9_ObstacleID 63

/**
 * Signal ObstacleID raw offset value.
 */
#define OFF_ObstacleDataA9_ObstacleID 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA9_ObstaclePosX Signal ObstaclePosX of Message ObstacleDataA9 (0x438)
 *
 * longitudinal distance to the middle of the RL and RR corners
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal ObstaclePosX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_ObstaclePosX and \ref GET_ObstacleDataA9_ObstaclePosX instead.
 */
#define SIG_ObstacleDataA9_ObstaclePosX 0, 0, 8, 13

/**
 * Signal ObstaclePosX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_ObstaclePosX or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_ObstaclePosX 0, 0, 8, 13, 0

/**
 * Get signal ObstaclePosX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_ObstaclePosX(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 8))

/**
 * Set signal ObstaclePosX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_ObstaclePosX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[2] &= ~(0x1f << 0);                                                                                        \
        buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0;                                                       \
    }

/**
 * Set signal ObstaclePosX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_ObstaclePosX(buf) SET_ObstacleDataA9_ObstaclePosX(buf, 0)

/**
 * Signal ObstaclePosX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_ObstaclePosX(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosX raw initial value.
 */
#define START_ObstacleDataA9_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw minimum value.
 */
#define MIN_ObstacleDataA9_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw maximum value.
 */
#define MAX_ObstacleDataA9_ObstaclePosX 8176

/**
 * Signal ObstaclePosX raw offset value.
 */
#define OFF_ObstacleDataA9_ObstaclePosX -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA9_ObstaclePosY Signal ObstaclePosY of Message ObstacleDataA9 (0x438)
 *
 * the lateral distance to the middle of the RL and RR corners, positive to the left
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal ObstaclePosY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_ObstaclePosY and \ref GET_ObstacleDataA9_ObstaclePosY instead.
 */
#define SIG_ObstacleDataA9_ObstaclePosY 0, 0, 21, 13

/**
 * Signal ObstaclePosY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_ObstaclePosY or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_ObstaclePosY 0, 0, 21, 13, 0

/**
 * Get signal ObstaclePosY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_ObstaclePosY(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) |       \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 11))

/**
 * Set signal ObstaclePosY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_ObstaclePosY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0x07 << 5);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0;                                                       \
        buf[4] &= ~(0x03 << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x03) << 0;                                                      \
    }

/**
 * Set signal ObstaclePosY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_ObstaclePosY(buf) SET_ObstacleDataA9_ObstaclePosY(buf, 0)

/**
 * Signal ObstaclePosY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_ObstaclePosY(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosY raw initial value.
 */
#define START_ObstacleDataA9_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw minimum value.
 */
#define MIN_ObstacleDataA9_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw maximum value.
 */
#define MAX_ObstacleDataA9_ObstaclePosY 8176

/**
 * Signal ObstaclePosY raw offset value.
 */
#define OFF_ObstacleDataA9_ObstaclePosY -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA9_BlinkerInfo Signal BlinkerInfo of Message ObstacleDataA9 (0x438)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA9_BlinkerInfo.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal BlinkerInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_BlinkerInfo and \ref GET_ObstacleDataA9_BlinkerInfo instead.
 */
#define SIG_ObstacleDataA9_BlinkerInfo 0, 0, 34, 3

/**
 * Signal BlinkerInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_BlinkerInfo or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_BlinkerInfo 0, 0, 34, 3, 0

/**
 * Get signal BlinkerInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_BlinkerInfo(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x07) << 0))

/**
 * Set signal BlinkerInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_BlinkerInfo(buf, val)                                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 2);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal BlinkerInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_BlinkerInfo(buf) SET_ObstacleDataA9_BlinkerInfo(buf, 0)

/**
 * Signal BlinkerInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_BlinkerInfo(x, fmt) ((x)*fmt)

/**
 * Signal BlinkerInfo raw initial value.
 */
#define START_ObstacleDataA9_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw minimum value.
 */
#define MIN_ObstacleDataA9_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw maximum value.
 */
#define MAX_ObstacleDataA9_BlinkerInfo 4

/**
 * Signal BlinkerInfo raw offset value.
 */
#define OFF_ObstacleDataA9_BlinkerInfo 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA9_BlinkerInfo Value Table for Signal BlinkerInfo in Message ObstacleDataA9 (0x438)
 *
 * Enum values defined for \ref SIG_ObstacleDataA9_BlinkerInfo.
 *
 * @ingroup SIG_ObstacleDataA9_BlinkerInfo
 */

/**
 * Value table ObstacleDataA9_BlinkerInfo entry both.
 *
 * @ingroup ENUM_ObstacleDataA9_BlinkerInfo
 */
#define ObstacleDataA9_BlinkerInfo_both 4

/**
 * Value table ObstacleDataA9_BlinkerInfo entry right.
 *
 * @ingroup ENUM_ObstacleDataA9_BlinkerInfo
 */
#define ObstacleDataA9_BlinkerInfo_right 3

/**
 * Value table ObstacleDataA9_BlinkerInfo entry left.
 *
 * @ingroup ENUM_ObstacleDataA9_BlinkerInfo
 */
#define ObstacleDataA9_BlinkerInfo_left 2

/**
 * Value table ObstacleDataA9_BlinkerInfo entry off.
 *
 * @ingroup ENUM_ObstacleDataA9_BlinkerInfo
 */
#define ObstacleDataA9_BlinkerInfo_off 1

/**
 * Value table ObstacleDataA9_BlinkerInfo entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataA9_BlinkerInfo
 */
#define ObstacleDataA9_BlinkerInfo_unavailable 0

/**
 * @defgroup SIG_ObstacleDataA9_Move_in_and_Out Signal Move_in_and_Out of Message ObstacleDataA9 (0x438)
 *
 * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our
 * estimation of where it is going to be within one second.
 *
 * Contains the value table \ref ENUM_ObstacleDataA9_Move_in_and_Out.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal Move_in_and_Out configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_Move_in_and_Out and \ref GET_ObstacleDataA9_Move_in_and_Out instead.
 */
#define SIG_ObstacleDataA9_Move_in_and_Out 0, 0, 37, 3

/**
 * Signal Move_in_and_Out setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_Move_in_and_Out or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_Move_in_and_Out 0, 0, 37, 3, 0

/**
 * Get signal Move_in_and_Out from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_Move_in_and_Out(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0))

/**
 * Set signal Move_in_and_Out in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_Move_in_and_Out(buf, val)                                                                   \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
    }

/**
 * Set signal Move_in_and_Out in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_Move_in_and_Out(buf) SET_ObstacleDataA9_Move_in_and_Out(buf, 0)

/**
 * Signal Move_in_and_Out value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_Move_in_and_Out(x, fmt) ((x)*fmt)

/**
 * Signal Move_in_and_Out raw initial value.
 */
#define START_ObstacleDataA9_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw minimum value.
 */
#define MIN_ObstacleDataA9_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw maximum value.
 */
#define MAX_ObstacleDataA9_Move_in_and_Out 4

/**
 * Signal Move_in_and_Out raw offset value.
 */
#define OFF_ObstacleDataA9_Move_in_and_Out 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA9_Move_in_and_Out Value Table for Signal Move_in_and_Out in Message ObstacleDataA9
 * (0x438)
 *
 * Enum values defined for \ref SIG_ObstacleDataA9_Move_in_and_Out.
 *
 * @ingroup SIG_ObstacleDataA9_Move_in_and_Out
 */

/**
 * Value table ObstacleDataA9_Move_in_and_Out entry cut_out.
 *
 * @ingroup ENUM_ObstacleDataA9_Move_in_and_Out
 */
#define ObstacleDataA9_Move_in_and_Out_cut_out 4

/**
 * Value table ObstacleDataA9_Move_in_and_Out entry cut_in.
 *
 * @ingroup ENUM_ObstacleDataA9_Move_in_and_Out
 */
#define ObstacleDataA9_Move_in_and_Out_cut_in 3

/**
 * Value table ObstacleDataA9_Move_in_and_Out entry out_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA9_Move_in_and_Out
 */
#define ObstacleDataA9_Move_in_and_Out_out_host_lane 2

/**
 * Value table ObstacleDataA9_Move_in_and_Out entry in_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA9_Move_in_and_Out
 */
#define ObstacleDataA9_Move_in_and_Out_in_host_lane 1

/**
 * Value table ObstacleDataA9_Move_in_and_Out entry undefined.
 *
 * @ingroup ENUM_ObstacleDataA9_Move_in_and_Out
 */
#define ObstacleDataA9_Move_in_and_Out_undefined 0

/**
 * @defgroup SIG_ObstacleDataA9_ObstacleVelX Signal ObstacleVelX of Message ObstacleDataA9 (0x438)
 *
 * Relative longitudinal speed of the ego vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal ObstacleVelX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_ObstacleVelX and \ref GET_ObstacleDataA9_ObstacleVelX instead.
 */
#define SIG_ObstacleDataA9_ObstacleVelX 0, 1, 40, 12

/**
 * Signal ObstacleVelX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_ObstacleVelX or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_ObstacleVelX 0, 1, 40, 12, 0

/**
 * Get signal ObstacleVelX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_ObstacleVelX(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_ObstacleVelX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[6] &= ~(0x0f << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_ObstacleVelX(buf) SET_ObstacleDataA9_ObstacleVelX(buf, 0)

/**
 * Signal ObstacleVelX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_ObstacleVelX(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelX raw initial value.
 */
#define START_ObstacleDataA9_ObstacleVelX 0

/**
 * Signal ObstacleVelX raw minimum value.
 */
#define MIN_ObstacleDataA9_ObstacleVelX -2047

/**
 * Signal ObstacleVelX raw maximum value.
 */
#define MAX_ObstacleDataA9_ObstacleVelX 2047

/**
 * Signal ObstacleVelX raw offset value.
 */
#define OFF_ObstacleDataA9_ObstacleVelX 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA9_ObstacleType Signal ObstacleType of Message ObstacleDataA9 (0x438)
 *
 * Obstacle type
 *
 * Contains the value table \ref ENUM_ObstacleDataA9_ObstacleType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal ObstacleType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_ObstacleType and \ref GET_ObstacleDataA9_ObstacleType instead.
 */
#define SIG_ObstacleDataA9_ObstacleType 0, 0, 52, 2

/**
 * Signal ObstacleType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_ObstacleType or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_ObstacleType 0, 0, 52, 2, 0

/**
 * Get signal ObstacleType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_ObstacleType(buf) (0 | (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x03) << 0))

/**
 * Set signal ObstacleType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_ObstacleType(buf, val)                                                                      \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 4);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 4;                                                                 \
    }

/**
 * Set signal ObstacleType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_ObstacleType(buf) SET_ObstacleDataA9_ObstacleType(buf, 0)

/**
 * Signal ObstacleType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_ObstacleType(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleType raw initial value.
 */
#define START_ObstacleDataA9_ObstacleType 0

/**
 * Signal ObstacleType raw minimum value.
 */
#define MIN_ObstacleDataA9_ObstacleType 0

/**
 * Signal ObstacleType raw maximum value.
 */
#define MAX_ObstacleDataA9_ObstacleType 3

/**
 * Signal ObstacleType raw offset value.
 */
#define OFF_ObstacleDataA9_ObstacleType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA9_ObstacleType Value Table for Signal ObstacleType in Message ObstacleDataA9 (0x438)
 *
 * Enum values defined for \ref SIG_ObstacleDataA9_ObstacleType.
 *
 * @ingroup SIG_ObstacleDataA9_ObstacleType
 */

/**
 * Value table ObstacleDataA9_ObstacleType entry General.
 *
 * Object
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleType
 */
#define ObstacleDataA9_ObstacleType_General 3

/**
 * Value table ObstacleDataA9_ObstacleType entry Cyclist.
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleType
 */
#define ObstacleDataA9_ObstacleType_Cyclist 2

/**
 * Value table ObstacleDataA9_ObstacleType entry Pedestrian.
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleType
 */
#define ObstacleDataA9_ObstacleType_Pedestrian 1

/**
 * Value table ObstacleDataA9_ObstacleType entry Vehicle.
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleType
 */
#define ObstacleDataA9_ObstacleType_Vehicle 0

/**
 * @defgroup SIG_ObstacleDataA9_VehicleSubType Signal VehicleSubType of Message ObstacleDataA9 (0x438)
 *
 * Vehicle sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataA9_VehicleSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal VehicleSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_VehicleSubType and \ref GET_ObstacleDataA9_VehicleSubType instead.
 */
#define SIG_ObstacleDataA9_VehicleSubType 0, 0, 54, 4

/**
 * Signal VehicleSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_VehicleSubType or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_VehicleSubType 0, 0, 54, 4, 0

/**
 * Get signal VehicleSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_VehicleSubType(buf)                                                                         \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x03) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 2))

/**
 * Set signal VehicleSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_VehicleSubType(buf, val)                                                                    \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 6);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[7] &= ~(0x03 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 2) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal VehicleSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_VehicleSubType(buf) SET_ObstacleDataA9_VehicleSubType(buf, 0)

/**
 * Signal VehicleSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_VehicleSubType(x, fmt) ((x)*fmt)

/**
 * Signal VehicleSubType raw initial value.
 */
#define START_ObstacleDataA9_VehicleSubType 0

/**
 * Signal VehicleSubType raw minimum value.
 */
#define MIN_ObstacleDataA9_VehicleSubType 0

/**
 * Signal VehicleSubType raw maximum value.
 */
#define MAX_ObstacleDataA9_VehicleSubType 15

/**
 * Signal VehicleSubType raw offset value.
 */
#define OFF_ObstacleDataA9_VehicleSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA9_VehicleSubType Value Table for Signal VehicleSubType in Message ObstacleDataA9 (0x438)
 *
 * Enum values defined for \ref SIG_ObstacleDataA9_VehicleSubType.
 *
 * @ingroup SIG_ObstacleDataA9_VehicleSubType
 */

/**
 * Value table ObstacleDataA9_VehicleSubType entry Tiny_car.
 *
 * @ingroup ENUM_ObstacleDataA9_VehicleSubType
 */
#define ObstacleDataA9_VehicleSubType_Tiny_car 5

/**
 * Value table ObstacleDataA9_VehicleSubType entry Special_vehicle.
 *
 * @ingroup ENUM_ObstacleDataA9_VehicleSubType
 */
#define ObstacleDataA9_VehicleSubType_Special_vehicle 4

/**
 * Value table ObstacleDataA9_VehicleSubType entry Motors.
 *
 * @ingroup ENUM_ObstacleDataA9_VehicleSubType
 */
#define ObstacleDataA9_VehicleSubType_Motors 3

/**
 * Value table ObstacleDataA9_VehicleSubType entry Trucks.
 *
 * @ingroup ENUM_ObstacleDataA9_VehicleSubType
 */
#define ObstacleDataA9_VehicleSubType_Trucks 2

/**
 * Value table ObstacleDataA9_VehicleSubType entry Small_Medium_Car.
 *
 * @ingroup ENUM_ObstacleDataA9_VehicleSubType
 */
#define ObstacleDataA9_VehicleSubType_Small_Medium_Car 1

/**
 * Value table ObstacleDataA9_VehicleSubType entry Bus.
 *
 * @ingroup ENUM_ObstacleDataA9_VehicleSubType
 */
#define ObstacleDataA9_VehicleSubType_Bus 0

/**
 * @defgroup SIG_ObstacleDataA9_ObstacleStatus Signal ObstacleStatus of Message ObstacleDataA9 (0x438)
 *
 * Reseved. Not Implemented
 *
 * Contains the value table \ref ENUM_ObstacleDataA9_ObstacleStatus.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal ObstacleStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_ObstacleStatus and \ref GET_ObstacleDataA9_ObstacleStatus instead.
 */
#define SIG_ObstacleDataA9_ObstacleStatus 0, 0, 58, 3

/**
 * Signal ObstacleStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_ObstacleStatus or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_ObstacleStatus 0, 0, 58, 3, 0

/**
 * Get signal ObstacleStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_ObstacleStatus(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0))

/**
 * Set signal ObstacleStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_ObstacleStatus(buf, val)                                                                    \
    {                                                                                                                  \
        buf[7] &= ~(0x07 << 2);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal ObstacleStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_ObstacleStatus(buf) SET_ObstacleDataA9_ObstacleStatus(buf, 0)

/**
 * Signal ObstacleStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_ObstacleStatus(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleStatus raw initial value.
 */
#define START_ObstacleDataA9_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw minimum value.
 */
#define MIN_ObstacleDataA9_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw maximum value.
 */
#define MAX_ObstacleDataA9_ObstacleStatus 7

/**
 * Signal ObstacleStatus raw offset value.
 */
#define OFF_ObstacleDataA9_ObstacleStatus 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA9_ObstacleStatus Value Table for Signal ObstacleStatus in Message ObstacleDataA9 (0x438)
 *
 * Enum values defined for \ref SIG_ObstacleDataA9_ObstacleStatus.
 *
 * @ingroup SIG_ObstacleDataA9_ObstacleStatus
 */

/**
 * Value table ObstacleDataA9_ObstacleStatus entry Unused.
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleStatus
 */
#define ObstacleDataA9_ObstacleStatus_Unused 6

/**
 * Value table ObstacleDataA9_ObstacleStatus entry Parked.
 *
 * never moved, BckLightsOff
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleStatus
 */
#define ObstacleDataA9_ObstacleStatus_Parked 5

/**
 * Value table ObstacleDataA9_ObstacleStatus entry Oncoming.
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleStatus
 */
#define ObstacleDataA9_ObstacleStatus_Oncoming 4

/**
 * Value table ObstacleDataA9_ObstacleStatus entry moving.
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleStatus
 */
#define ObstacleDataA9_ObstacleStatus_moving 3

/**
 * Value table ObstacleDataA9_ObstacleStatus entry stopped.
 *
 * (movable)
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleStatus
 */
#define ObstacleDataA9_ObstacleStatus_stopped 2

/**
 * Value table ObstacleDataA9_ObstacleStatus entry standing.
 *
 * neverMoved bckLightsOn
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleStatus
 */
#define ObstacleDataA9_ObstacleStatus_standing 1

/**
 * Value table ObstacleDataA9_ObstacleStatus entry not.
 *
 * defined
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleStatus
 */
#define ObstacleDataA9_ObstacleStatus_not 0

/**
 * @defgroup SIG_ObstacleDataA9_ObstacleBrakeLights Signal ObstacleBrakeLights of Message ObstacleDataA9 (0x438)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA9_ObstacleBrakeLights.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal ObstacleBrakeLights configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_ObstacleBrakeLights and \ref GET_ObstacleDataA9_ObstacleBrakeLights instead.
 */
#define SIG_ObstacleDataA9_ObstacleBrakeLights 0, 0, 61, 1

/**
 * Signal ObstacleBrakeLights setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_ObstacleBrakeLights or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_ObstacleBrakeLights 0, 0, 61, 1, 0

/**
 * Get signal ObstacleBrakeLights from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_ObstacleBrakeLights(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0))

/**
 * Set signal ObstacleBrakeLights in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_ObstacleBrakeLights(buf, val)                                                               \
    {                                                                                                                  \
        buf[7] &= ~(0x01 << 5);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal ObstacleBrakeLights in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_ObstacleBrakeLights(buf) SET_ObstacleDataA9_ObstacleBrakeLights(buf, 0)

/**
 * Signal ObstacleBrakeLights value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_ObstacleBrakeLights(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleBrakeLights raw initial value.
 */
#define START_ObstacleDataA9_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw minimum value.
 */
#define MIN_ObstacleDataA9_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw maximum value.
 */
#define MAX_ObstacleDataA9_ObstacleBrakeLights 1

/**
 * Signal ObstacleBrakeLights raw offset value.
 */
#define OFF_ObstacleDataA9_ObstacleBrakeLights 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA9_ObstacleBrakeLights Value Table for Signal ObstacleBrakeLights in Message
 * ObstacleDataA9 (0x438)
 *
 * Enum values defined for \ref SIG_ObstacleDataA9_ObstacleBrakeLights.
 *
 * @ingroup SIG_ObstacleDataA9_ObstacleBrakeLights
 */

/**
 * Value table ObstacleDataA9_ObstacleBrakeLights entry object_s.
 *
 * object's brake lights are on
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleBrakeLights
 */
#define ObstacleDataA9_ObstacleBrakeLights_object_s 1

/**
 * Value table ObstacleDataA9_ObstacleBrakeLights entry object_s_0.
 *
 * object's brake lights are off
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleBrakeLights
 */
#define ObstacleDataA9_ObstacleBrakeLights_object_s_0 0

/**
 * @defgroup SIG_ObstacleDataA9_ObstacleValid Signal ObstacleValid of Message ObstacleDataA9 (0x438)
 *
 * Obstacle Valid info
 *
 * Contains the value table \ref ENUM_ObstacleDataA9_ObstacleValid.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA9
 * @{
 */

/**
 * Signal ObstacleValid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA9_ObstacleValid and \ref GET_ObstacleDataA9_ObstacleValid instead.
 */
#define SIG_ObstacleDataA9_ObstacleValid 0, 0, 62, 2

/**
 * Signal ObstacleValid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA9_ObstacleValid or \ref INIT_ObstacleDataA9 instead.
 */
#define SETUP_ObstacleDataA9_ObstacleValid 0, 0, 62, 2, 0

/**
 * Get signal ObstacleValid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA9_ObstacleValid(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0))

/**
 * Set signal ObstacleValid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA9_ObstacleValid(buf, val)                                                                     \
    {                                                                                                                  \
        buf[7] &= ~(0x03 << 6);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
    }

/**
 * Set signal ObstacleValid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA9_ObstacleValid(buf) SET_ObstacleDataA9_ObstacleValid(buf, 0)

/**
 * Signal ObstacleValid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA9_ObstacleValid(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleValid raw initial value.
 */
#define START_ObstacleDataA9_ObstacleValid 0

/**
 * Signal ObstacleValid raw minimum value.
 */
#define MIN_ObstacleDataA9_ObstacleValid 0

/**
 * Signal ObstacleValid raw maximum value.
 */
#define MAX_ObstacleDataA9_ObstacleValid 2

/**
 * Signal ObstacleValid raw offset value.
 */
#define OFF_ObstacleDataA9_ObstacleValid 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA9_ObstacleValid Value Table for Signal ObstacleValid in Message ObstacleDataA9 (0x438)
 *
 * Enum values defined for \ref SIG_ObstacleDataA9_ObstacleValid.
 *
 * @ingroup SIG_ObstacleDataA9_ObstacleValid
 */

/**
 * Value table ObstacleDataA9_ObstacleValid entry older.
 *
 * valid
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleValid
 */
#define ObstacleDataA9_ObstacleValid_older 2

/**
 * Value table ObstacleDataA9_ObstacleValid entry new.
 *
 * valid (detected this frame)
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleValid
 */
#define ObstacleDataA9_ObstacleValid_new 1

/**
 * Value table ObstacleDataA9_ObstacleValid entry invalid.
 *
 * Obstacle(default value)
 *
 * @ingroup ENUM_ObstacleDataA9_ObstacleValid
 */
#define ObstacleDataA9_ObstacleValid_invalid 0

/**
 * @defgroup SIG_ObstacleDataA10_ObstacleID Signal ObstacleID of Message ObstacleDataA10 (0x43b)
 *
 * New obstacles are given the last used free ID
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal ObstacleID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_ObstacleID and \ref GET_ObstacleDataA10_ObstacleID instead.
 */
#define SIG_ObstacleDataA10_ObstacleID 0, 0, 0, 8

/**
 * Signal ObstacleID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_ObstacleID or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_ObstacleID 0, 0, 0, 8, 0

/**
 * Get signal ObstacleID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_ObstacleID(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_ObstacleID(buf, val)                                                                       \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_ObstacleID(buf) SET_ObstacleDataA10_ObstacleID(buf, 0)

/**
 * Signal ObstacleID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_ObstacleID(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleID raw initial value.
 */
#define START_ObstacleDataA10_ObstacleID 0

/**
 * Signal ObstacleID raw minimum value.
 */
#define MIN_ObstacleDataA10_ObstacleID 0

/**
 * Signal ObstacleID raw maximum value.
 */
#define MAX_ObstacleDataA10_ObstacleID 63

/**
 * Signal ObstacleID raw offset value.
 */
#define OFF_ObstacleDataA10_ObstacleID 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA10_ObstaclePosX Signal ObstaclePosX of Message ObstacleDataA10 (0x43b)
 *
 * longitudinal distance to the middle of the RL and RR corners
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal ObstaclePosX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_ObstaclePosX and \ref GET_ObstacleDataA10_ObstaclePosX instead.
 */
#define SIG_ObstacleDataA10_ObstaclePosX 0, 0, 8, 13

/**
 * Signal ObstaclePosX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_ObstaclePosX or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_ObstaclePosX 0, 0, 8, 13, 0

/**
 * Get signal ObstaclePosX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_ObstaclePosX(buf)                                                                          \
    (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 8))

/**
 * Set signal ObstaclePosX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_ObstaclePosX(buf, val)                                                                     \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[2] &= ~(0x1f << 0);                                                                                        \
        buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0;                                                       \
    }

/**
 * Set signal ObstaclePosX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_ObstaclePosX(buf) SET_ObstacleDataA10_ObstaclePosX(buf, 0)

/**
 * Signal ObstaclePosX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_ObstaclePosX(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosX raw initial value.
 */
#define START_ObstacleDataA10_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw minimum value.
 */
#define MIN_ObstacleDataA10_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw maximum value.
 */
#define MAX_ObstacleDataA10_ObstaclePosX 8176

/**
 * Signal ObstaclePosX raw offset value.
 */
#define OFF_ObstacleDataA10_ObstaclePosX -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA10_ObstaclePosY Signal ObstaclePosY of Message ObstacleDataA10 (0x43b)
 *
 * the lateral distance to the middle of the RL and RR corners, positive to the left
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal ObstaclePosY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_ObstaclePosY and \ref GET_ObstacleDataA10_ObstaclePosY instead.
 */
#define SIG_ObstacleDataA10_ObstaclePosY 0, 0, 21, 13

/**
 * Signal ObstaclePosY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_ObstaclePosY or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_ObstaclePosY 0, 0, 21, 13, 0

/**
 * Get signal ObstaclePosY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_ObstaclePosY(buf)                                                                          \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) |       \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 11))

/**
 * Set signal ObstaclePosY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_ObstaclePosY(buf, val)                                                                     \
    {                                                                                                                  \
        buf[2] &= ~(0x07 << 5);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0;                                                       \
        buf[4] &= ~(0x03 << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x03) << 0;                                                      \
    }

/**
 * Set signal ObstaclePosY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_ObstaclePosY(buf) SET_ObstacleDataA10_ObstaclePosY(buf, 0)

/**
 * Signal ObstaclePosY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_ObstaclePosY(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosY raw initial value.
 */
#define START_ObstacleDataA10_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw minimum value.
 */
#define MIN_ObstacleDataA10_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw maximum value.
 */
#define MAX_ObstacleDataA10_ObstaclePosY 8176

/**
 * Signal ObstaclePosY raw offset value.
 */
#define OFF_ObstacleDataA10_ObstaclePosY -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA10_BlinkerInfo Signal BlinkerInfo of Message ObstacleDataA10 (0x43b)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA10_BlinkerInfo.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal BlinkerInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_BlinkerInfo and \ref GET_ObstacleDataA10_BlinkerInfo instead.
 */
#define SIG_ObstacleDataA10_BlinkerInfo 0, 0, 34, 3

/**
 * Signal BlinkerInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_BlinkerInfo or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_BlinkerInfo 0, 0, 34, 3, 0

/**
 * Get signal BlinkerInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_BlinkerInfo(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x07) << 0))

/**
 * Set signal BlinkerInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_BlinkerInfo(buf, val)                                                                      \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 2);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal BlinkerInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_BlinkerInfo(buf) SET_ObstacleDataA10_BlinkerInfo(buf, 0)

/**
 * Signal BlinkerInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_BlinkerInfo(x, fmt) ((x)*fmt)

/**
 * Signal BlinkerInfo raw initial value.
 */
#define START_ObstacleDataA10_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw minimum value.
 */
#define MIN_ObstacleDataA10_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw maximum value.
 */
#define MAX_ObstacleDataA10_BlinkerInfo 4

/**
 * Signal BlinkerInfo raw offset value.
 */
#define OFF_ObstacleDataA10_BlinkerInfo 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA10_BlinkerInfo Value Table for Signal BlinkerInfo in Message ObstacleDataA10 (0x43b)
 *
 * Enum values defined for \ref SIG_ObstacleDataA10_BlinkerInfo.
 *
 * @ingroup SIG_ObstacleDataA10_BlinkerInfo
 */

/**
 * Value table ObstacleDataA10_BlinkerInfo entry both.
 *
 * @ingroup ENUM_ObstacleDataA10_BlinkerInfo
 */
#define ObstacleDataA10_BlinkerInfo_both 4

/**
 * Value table ObstacleDataA10_BlinkerInfo entry right.
 *
 * @ingroup ENUM_ObstacleDataA10_BlinkerInfo
 */
#define ObstacleDataA10_BlinkerInfo_right 3

/**
 * Value table ObstacleDataA10_BlinkerInfo entry left.
 *
 * @ingroup ENUM_ObstacleDataA10_BlinkerInfo
 */
#define ObstacleDataA10_BlinkerInfo_left 2

/**
 * Value table ObstacleDataA10_BlinkerInfo entry off.
 *
 * @ingroup ENUM_ObstacleDataA10_BlinkerInfo
 */
#define ObstacleDataA10_BlinkerInfo_off 1

/**
 * Value table ObstacleDataA10_BlinkerInfo entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataA10_BlinkerInfo
 */
#define ObstacleDataA10_BlinkerInfo_unavailable 0

/**
 * @defgroup SIG_ObstacleDataA10_Move_in_and_Out Signal Move_in_and_Out of Message ObstacleDataA10 (0x43b)
 *
 * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our
 * estimation of where it is going to be within one second.
 *
 * Contains the value table \ref ENUM_ObstacleDataA10_Move_in_and_Out.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal Move_in_and_Out configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_Move_in_and_Out and \ref GET_ObstacleDataA10_Move_in_and_Out instead.
 */
#define SIG_ObstacleDataA10_Move_in_and_Out 0, 0, 37, 3

/**
 * Signal Move_in_and_Out setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_Move_in_and_Out or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_Move_in_and_Out 0, 0, 37, 3, 0

/**
 * Get signal Move_in_and_Out from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_Move_in_and_Out(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0))

/**
 * Set signal Move_in_and_Out in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_Move_in_and_Out(buf, val)                                                                  \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
    }

/**
 * Set signal Move_in_and_Out in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_Move_in_and_Out(buf) SET_ObstacleDataA10_Move_in_and_Out(buf, 0)

/**
 * Signal Move_in_and_Out value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_Move_in_and_Out(x, fmt) ((x)*fmt)

/**
 * Signal Move_in_and_Out raw initial value.
 */
#define START_ObstacleDataA10_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw minimum value.
 */
#define MIN_ObstacleDataA10_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw maximum value.
 */
#define MAX_ObstacleDataA10_Move_in_and_Out 4

/**
 * Signal Move_in_and_Out raw offset value.
 */
#define OFF_ObstacleDataA10_Move_in_and_Out 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA10_Move_in_and_Out Value Table for Signal Move_in_and_Out in Message ObstacleDataA10
 * (0x43b)
 *
 * Enum values defined for \ref SIG_ObstacleDataA10_Move_in_and_Out.
 *
 * @ingroup SIG_ObstacleDataA10_Move_in_and_Out
 */

/**
 * Value table ObstacleDataA10_Move_in_and_Out entry cut_out.
 *
 * @ingroup ENUM_ObstacleDataA10_Move_in_and_Out
 */
#define ObstacleDataA10_Move_in_and_Out_cut_out 4

/**
 * Value table ObstacleDataA10_Move_in_and_Out entry cut_in.
 *
 * @ingroup ENUM_ObstacleDataA10_Move_in_and_Out
 */
#define ObstacleDataA10_Move_in_and_Out_cut_in 3

/**
 * Value table ObstacleDataA10_Move_in_and_Out entry out_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA10_Move_in_and_Out
 */
#define ObstacleDataA10_Move_in_and_Out_out_host_lane 2

/**
 * Value table ObstacleDataA10_Move_in_and_Out entry in_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA10_Move_in_and_Out
 */
#define ObstacleDataA10_Move_in_and_Out_in_host_lane 1

/**
 * Value table ObstacleDataA10_Move_in_and_Out entry undefined.
 *
 * @ingroup ENUM_ObstacleDataA10_Move_in_and_Out
 */
#define ObstacleDataA10_Move_in_and_Out_undefined 0

/**
 * @defgroup SIG_ObstacleDataA10_ObstacleVelX Signal ObstacleVelX of Message ObstacleDataA10 (0x43b)
 *
 * Relative longitudinal speed of the ego vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal ObstacleVelX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_ObstacleVelX and \ref GET_ObstacleDataA10_ObstacleVelX instead.
 */
#define SIG_ObstacleDataA10_ObstacleVelX 0, 1, 40, 12

/**
 * Signal ObstacleVelX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_ObstacleVelX or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_ObstacleVelX 0, 1, 40, 12, 0

/**
 * Get signal ObstacleVelX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_ObstacleVelX(buf)                                                                          \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_ObstacleVelX(buf, val)                                                                     \
    {                                                                                                                  \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[6] &= ~(0x0f << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_ObstacleVelX(buf) SET_ObstacleDataA10_ObstacleVelX(buf, 0)

/**
 * Signal ObstacleVelX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_ObstacleVelX(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelX raw initial value.
 */
#define START_ObstacleDataA10_ObstacleVelX 0

/**
 * Signal ObstacleVelX raw minimum value.
 */
#define MIN_ObstacleDataA10_ObstacleVelX -2047

/**
 * Signal ObstacleVelX raw maximum value.
 */
#define MAX_ObstacleDataA10_ObstacleVelX 2047

/**
 * Signal ObstacleVelX raw offset value.
 */
#define OFF_ObstacleDataA10_ObstacleVelX 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA10_ObstacleType Signal ObstacleType of Message ObstacleDataA10 (0x43b)
 *
 * Obstacle type
 *
 * Contains the value table \ref ENUM_ObstacleDataA10_ObstacleType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal ObstacleType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_ObstacleType and \ref GET_ObstacleDataA10_ObstacleType instead.
 */
#define SIG_ObstacleDataA10_ObstacleType 0, 0, 52, 2

/**
 * Signal ObstacleType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_ObstacleType or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_ObstacleType 0, 0, 52, 2, 0

/**
 * Get signal ObstacleType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_ObstacleType(buf) (0 | (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x03) << 0))

/**
 * Set signal ObstacleType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_ObstacleType(buf, val)                                                                     \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 4);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 4;                                                                 \
    }

/**
 * Set signal ObstacleType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_ObstacleType(buf) SET_ObstacleDataA10_ObstacleType(buf, 0)

/**
 * Signal ObstacleType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_ObstacleType(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleType raw initial value.
 */
#define START_ObstacleDataA10_ObstacleType 0

/**
 * Signal ObstacleType raw minimum value.
 */
#define MIN_ObstacleDataA10_ObstacleType 0

/**
 * Signal ObstacleType raw maximum value.
 */
#define MAX_ObstacleDataA10_ObstacleType 3

/**
 * Signal ObstacleType raw offset value.
 */
#define OFF_ObstacleDataA10_ObstacleType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA10_ObstacleType Value Table for Signal ObstacleType in Message ObstacleDataA10 (0x43b)
 *
 * Enum values defined for \ref SIG_ObstacleDataA10_ObstacleType.
 *
 * @ingroup SIG_ObstacleDataA10_ObstacleType
 */

/**
 * Value table ObstacleDataA10_ObstacleType entry General.
 *
 * Object
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleType
 */
#define ObstacleDataA10_ObstacleType_General 3

/**
 * Value table ObstacleDataA10_ObstacleType entry Cyclist.
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleType
 */
#define ObstacleDataA10_ObstacleType_Cyclist 2

/**
 * Value table ObstacleDataA10_ObstacleType entry Pedestrian.
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleType
 */
#define ObstacleDataA10_ObstacleType_Pedestrian 1

/**
 * Value table ObstacleDataA10_ObstacleType entry Vehicle.
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleType
 */
#define ObstacleDataA10_ObstacleType_Vehicle 0

/**
 * @defgroup SIG_ObstacleDataA10_VehicleSubType Signal VehicleSubType of Message ObstacleDataA10 (0x43b)
 *
 * Vehicle sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataA10_VehicleSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal VehicleSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_VehicleSubType and \ref GET_ObstacleDataA10_VehicleSubType instead.
 */
#define SIG_ObstacleDataA10_VehicleSubType 0, 0, 54, 4

/**
 * Signal VehicleSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_VehicleSubType or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_VehicleSubType 0, 0, 54, 4, 0

/**
 * Get signal VehicleSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_VehicleSubType(buf)                                                                        \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x03) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 2))

/**
 * Set signal VehicleSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_VehicleSubType(buf, val)                                                                   \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 6);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[7] &= ~(0x03 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 2) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal VehicleSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_VehicleSubType(buf) SET_ObstacleDataA10_VehicleSubType(buf, 0)

/**
 * Signal VehicleSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_VehicleSubType(x, fmt) ((x)*fmt)

/**
 * Signal VehicleSubType raw initial value.
 */
#define START_ObstacleDataA10_VehicleSubType 0

/**
 * Signal VehicleSubType raw minimum value.
 */
#define MIN_ObstacleDataA10_VehicleSubType 0

/**
 * Signal VehicleSubType raw maximum value.
 */
#define MAX_ObstacleDataA10_VehicleSubType 15

/**
 * Signal VehicleSubType raw offset value.
 */
#define OFF_ObstacleDataA10_VehicleSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA10_VehicleSubType Value Table for Signal VehicleSubType in Message ObstacleDataA10
 * (0x43b)
 *
 * Enum values defined for \ref SIG_ObstacleDataA10_VehicleSubType.
 *
 * @ingroup SIG_ObstacleDataA10_VehicleSubType
 */

/**
 * Value table ObstacleDataA10_VehicleSubType entry Tiny_car.
 *
 * @ingroup ENUM_ObstacleDataA10_VehicleSubType
 */
#define ObstacleDataA10_VehicleSubType_Tiny_car 5

/**
 * Value table ObstacleDataA10_VehicleSubType entry Special_vehicle.
 *
 * @ingroup ENUM_ObstacleDataA10_VehicleSubType
 */
#define ObstacleDataA10_VehicleSubType_Special_vehicle 4

/**
 * Value table ObstacleDataA10_VehicleSubType entry Motors.
 *
 * @ingroup ENUM_ObstacleDataA10_VehicleSubType
 */
#define ObstacleDataA10_VehicleSubType_Motors 3

/**
 * Value table ObstacleDataA10_VehicleSubType entry Trucks.
 *
 * @ingroup ENUM_ObstacleDataA10_VehicleSubType
 */
#define ObstacleDataA10_VehicleSubType_Trucks 2

/**
 * Value table ObstacleDataA10_VehicleSubType entry Small_Medium_Car.
 *
 * @ingroup ENUM_ObstacleDataA10_VehicleSubType
 */
#define ObstacleDataA10_VehicleSubType_Small_Medium_Car 1

/**
 * Value table ObstacleDataA10_VehicleSubType entry Bus.
 *
 * @ingroup ENUM_ObstacleDataA10_VehicleSubType
 */
#define ObstacleDataA10_VehicleSubType_Bus 0

/**
 * @defgroup SIG_ObstacleDataA10_ObstacleStatus Signal ObstacleStatus of Message ObstacleDataA10 (0x43b)
 *
 * Reseved. Not Implemented
 *
 * Contains the value table \ref ENUM_ObstacleDataA10_ObstacleStatus.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal ObstacleStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_ObstacleStatus and \ref GET_ObstacleDataA10_ObstacleStatus instead.
 */
#define SIG_ObstacleDataA10_ObstacleStatus 0, 0, 58, 3

/**
 * Signal ObstacleStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_ObstacleStatus or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_ObstacleStatus 0, 0, 58, 3, 0

/**
 * Get signal ObstacleStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_ObstacleStatus(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0))

/**
 * Set signal ObstacleStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_ObstacleStatus(buf, val)                                                                   \
    {                                                                                                                  \
        buf[7] &= ~(0x07 << 2);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal ObstacleStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_ObstacleStatus(buf) SET_ObstacleDataA10_ObstacleStatus(buf, 0)

/**
 * Signal ObstacleStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_ObstacleStatus(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleStatus raw initial value.
 */
#define START_ObstacleDataA10_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw minimum value.
 */
#define MIN_ObstacleDataA10_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw maximum value.
 */
#define MAX_ObstacleDataA10_ObstacleStatus 7

/**
 * Signal ObstacleStatus raw offset value.
 */
#define OFF_ObstacleDataA10_ObstacleStatus 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA10_ObstacleStatus Value Table for Signal ObstacleStatus in Message ObstacleDataA10
 * (0x43b)
 *
 * Enum values defined for \ref SIG_ObstacleDataA10_ObstacleStatus.
 *
 * @ingroup SIG_ObstacleDataA10_ObstacleStatus
 */

/**
 * Value table ObstacleDataA10_ObstacleStatus entry Unused.
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleStatus
 */
#define ObstacleDataA10_ObstacleStatus_Unused 6

/**
 * Value table ObstacleDataA10_ObstacleStatus entry Parked.
 *
 * never moved, BckLightsOff
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleStatus
 */
#define ObstacleDataA10_ObstacleStatus_Parked 5

/**
 * Value table ObstacleDataA10_ObstacleStatus entry Oncoming.
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleStatus
 */
#define ObstacleDataA10_ObstacleStatus_Oncoming 4

/**
 * Value table ObstacleDataA10_ObstacleStatus entry moving.
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleStatus
 */
#define ObstacleDataA10_ObstacleStatus_moving 3

/**
 * Value table ObstacleDataA10_ObstacleStatus entry stopped.
 *
 * (movable)
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleStatus
 */
#define ObstacleDataA10_ObstacleStatus_stopped 2

/**
 * Value table ObstacleDataA10_ObstacleStatus entry standing.
 *
 * neverMoved bckLightsOn
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleStatus
 */
#define ObstacleDataA10_ObstacleStatus_standing 1

/**
 * Value table ObstacleDataA10_ObstacleStatus entry not.
 *
 * defined
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleStatus
 */
#define ObstacleDataA10_ObstacleStatus_not 0

/**
 * @defgroup SIG_ObstacleDataA10_ObstacleBrakeLights Signal ObstacleBrakeLights of Message ObstacleDataA10 (0x43b)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA10_ObstacleBrakeLights.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal ObstacleBrakeLights configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_ObstacleBrakeLights and \ref GET_ObstacleDataA10_ObstacleBrakeLights instead.
 */
#define SIG_ObstacleDataA10_ObstacleBrakeLights 0, 0, 61, 1

/**
 * Signal ObstacleBrakeLights setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_ObstacleBrakeLights or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_ObstacleBrakeLights 0, 0, 61, 1, 0

/**
 * Get signal ObstacleBrakeLights from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_ObstacleBrakeLights(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0))

/**
 * Set signal ObstacleBrakeLights in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_ObstacleBrakeLights(buf, val)                                                              \
    {                                                                                                                  \
        buf[7] &= ~(0x01 << 5);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal ObstacleBrakeLights in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_ObstacleBrakeLights(buf) SET_ObstacleDataA10_ObstacleBrakeLights(buf, 0)

/**
 * Signal ObstacleBrakeLights value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_ObstacleBrakeLights(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleBrakeLights raw initial value.
 */
#define START_ObstacleDataA10_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw minimum value.
 */
#define MIN_ObstacleDataA10_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw maximum value.
 */
#define MAX_ObstacleDataA10_ObstacleBrakeLights 1

/**
 * Signal ObstacleBrakeLights raw offset value.
 */
#define OFF_ObstacleDataA10_ObstacleBrakeLights 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA10_ObstacleBrakeLights Value Table for Signal ObstacleBrakeLights in Message
 * ObstacleDataA10 (0x43b)
 *
 * Enum values defined for \ref SIG_ObstacleDataA10_ObstacleBrakeLights.
 *
 * @ingroup SIG_ObstacleDataA10_ObstacleBrakeLights
 */

/**
 * Value table ObstacleDataA10_ObstacleBrakeLights entry object_s.
 *
 * object's brake lights are on
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleBrakeLights
 */
#define ObstacleDataA10_ObstacleBrakeLights_object_s 1

/**
 * Value table ObstacleDataA10_ObstacleBrakeLights entry object_s_0.
 *
 * object's brake lights are off
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleBrakeLights
 */
#define ObstacleDataA10_ObstacleBrakeLights_object_s_0 0

/**
 * @defgroup SIG_ObstacleDataA10_ObstacleValid Signal ObstacleValid of Message ObstacleDataA10 (0x43b)
 *
 * Obstacle Valid info
 *
 * Contains the value table \ref ENUM_ObstacleDataA10_ObstacleValid.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA10
 * @{
 */

/**
 * Signal ObstacleValid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA10_ObstacleValid and \ref GET_ObstacleDataA10_ObstacleValid instead.
 */
#define SIG_ObstacleDataA10_ObstacleValid 0, 0, 62, 2

/**
 * Signal ObstacleValid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA10_ObstacleValid or \ref INIT_ObstacleDataA10 instead.
 */
#define SETUP_ObstacleDataA10_ObstacleValid 0, 0, 62, 2, 0

/**
 * Get signal ObstacleValid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA10_ObstacleValid(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0))

/**
 * Set signal ObstacleValid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA10_ObstacleValid(buf, val)                                                                    \
    {                                                                                                                  \
        buf[7] &= ~(0x03 << 6);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
    }

/**
 * Set signal ObstacleValid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA10_ObstacleValid(buf) SET_ObstacleDataA10_ObstacleValid(buf, 0)

/**
 * Signal ObstacleValid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA10_ObstacleValid(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleValid raw initial value.
 */
#define START_ObstacleDataA10_ObstacleValid 0

/**
 * Signal ObstacleValid raw minimum value.
 */
#define MIN_ObstacleDataA10_ObstacleValid 0

/**
 * Signal ObstacleValid raw maximum value.
 */
#define MAX_ObstacleDataA10_ObstacleValid 2

/**
 * Signal ObstacleValid raw offset value.
 */
#define OFF_ObstacleDataA10_ObstacleValid 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA10_ObstacleValid Value Table for Signal ObstacleValid in Message ObstacleDataA10 (0x43b)
 *
 * Enum values defined for \ref SIG_ObstacleDataA10_ObstacleValid.
 *
 * @ingroup SIG_ObstacleDataA10_ObstacleValid
 */

/**
 * Value table ObstacleDataA10_ObstacleValid entry older.
 *
 * valid
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleValid
 */
#define ObstacleDataA10_ObstacleValid_older 2

/**
 * Value table ObstacleDataA10_ObstacleValid entry new.
 *
 * valid (detected this frame)
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleValid
 */
#define ObstacleDataA10_ObstacleValid_new 1

/**
 * Value table ObstacleDataA10_ObstacleValid entry invalid.
 *
 * Obstacle(default value)
 *
 * @ingroup ENUM_ObstacleDataA10_ObstacleValid
 */
#define ObstacleDataA10_ObstacleValid_invalid 0

/**
 * @defgroup SIG_ObstacleDataA6_ObstacleID Signal ObstacleID of Message ObstacleDataA6 (0x42f)
 *
 * New obstacles are given the last used free ID
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal ObstacleID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_ObstacleID and \ref GET_ObstacleDataA6_ObstacleID instead.
 */
#define SIG_ObstacleDataA6_ObstacleID 0, 0, 0, 8

/**
 * Signal ObstacleID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_ObstacleID or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_ObstacleID 0, 0, 0, 8, 0

/**
 * Get signal ObstacleID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_ObstacleID(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_ObstacleID(buf, val)                                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_ObstacleID(buf) SET_ObstacleDataA6_ObstacleID(buf, 0)

/**
 * Signal ObstacleID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_ObstacleID(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleID raw initial value.
 */
#define START_ObstacleDataA6_ObstacleID 0

/**
 * Signal ObstacleID raw minimum value.
 */
#define MIN_ObstacleDataA6_ObstacleID 0

/**
 * Signal ObstacleID raw maximum value.
 */
#define MAX_ObstacleDataA6_ObstacleID 63

/**
 * Signal ObstacleID raw offset value.
 */
#define OFF_ObstacleDataA6_ObstacleID 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA6_ObstaclePosX Signal ObstaclePosX of Message ObstacleDataA6 (0x42f)
 *
 * longitudinal distance to the middle of the RL and RR corners
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal ObstaclePosX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_ObstaclePosX and \ref GET_ObstacleDataA6_ObstaclePosX instead.
 */
#define SIG_ObstacleDataA6_ObstaclePosX 0, 0, 8, 13

/**
 * Signal ObstaclePosX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_ObstaclePosX or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_ObstaclePosX 0, 0, 8, 13, 0

/**
 * Get signal ObstaclePosX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_ObstaclePosX(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 8))

/**
 * Set signal ObstaclePosX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_ObstaclePosX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[2] &= ~(0x1f << 0);                                                                                        \
        buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0;                                                       \
    }

/**
 * Set signal ObstaclePosX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_ObstaclePosX(buf) SET_ObstacleDataA6_ObstaclePosX(buf, 0)

/**
 * Signal ObstaclePosX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_ObstaclePosX(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosX raw initial value.
 */
#define START_ObstacleDataA6_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw minimum value.
 */
#define MIN_ObstacleDataA6_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw maximum value.
 */
#define MAX_ObstacleDataA6_ObstaclePosX 8176

/**
 * Signal ObstaclePosX raw offset value.
 */
#define OFF_ObstacleDataA6_ObstaclePosX -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA6_ObstaclePosY Signal ObstaclePosY of Message ObstacleDataA6 (0x42f)
 *
 * the lateral distance to the middle of the RL and RR corners, positive to the left
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal ObstaclePosY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_ObstaclePosY and \ref GET_ObstacleDataA6_ObstaclePosY instead.
 */
#define SIG_ObstacleDataA6_ObstaclePosY 0, 0, 21, 13

/**
 * Signal ObstaclePosY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_ObstaclePosY or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_ObstaclePosY 0, 0, 21, 13, 0

/**
 * Get signal ObstaclePosY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_ObstaclePosY(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) |       \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 11))

/**
 * Set signal ObstaclePosY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_ObstaclePosY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0x07 << 5);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0;                                                       \
        buf[4] &= ~(0x03 << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x03) << 0;                                                      \
    }

/**
 * Set signal ObstaclePosY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_ObstaclePosY(buf) SET_ObstacleDataA6_ObstaclePosY(buf, 0)

/**
 * Signal ObstaclePosY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_ObstaclePosY(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosY raw initial value.
 */
#define START_ObstacleDataA6_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw minimum value.
 */
#define MIN_ObstacleDataA6_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw maximum value.
 */
#define MAX_ObstacleDataA6_ObstaclePosY 8176

/**
 * Signal ObstaclePosY raw offset value.
 */
#define OFF_ObstacleDataA6_ObstaclePosY -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA6_BlinkerInfo Signal BlinkerInfo of Message ObstacleDataA6 (0x42f)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA6_BlinkerInfo.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal BlinkerInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_BlinkerInfo and \ref GET_ObstacleDataA6_BlinkerInfo instead.
 */
#define SIG_ObstacleDataA6_BlinkerInfo 0, 0, 34, 3

/**
 * Signal BlinkerInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_BlinkerInfo or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_BlinkerInfo 0, 0, 34, 3, 0

/**
 * Get signal BlinkerInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_BlinkerInfo(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x07) << 0))

/**
 * Set signal BlinkerInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_BlinkerInfo(buf, val)                                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 2);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal BlinkerInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_BlinkerInfo(buf) SET_ObstacleDataA6_BlinkerInfo(buf, 0)

/**
 * Signal BlinkerInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_BlinkerInfo(x, fmt) ((x)*fmt)

/**
 * Signal BlinkerInfo raw initial value.
 */
#define START_ObstacleDataA6_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw minimum value.
 */
#define MIN_ObstacleDataA6_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw maximum value.
 */
#define MAX_ObstacleDataA6_BlinkerInfo 4

/**
 * Signal BlinkerInfo raw offset value.
 */
#define OFF_ObstacleDataA6_BlinkerInfo 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA6_BlinkerInfo Value Table for Signal BlinkerInfo in Message ObstacleDataA6 (0x42f)
 *
 * Enum values defined for \ref SIG_ObstacleDataA6_BlinkerInfo.
 *
 * @ingroup SIG_ObstacleDataA6_BlinkerInfo
 */

/**
 * Value table ObstacleDataA6_BlinkerInfo entry both.
 *
 * @ingroup ENUM_ObstacleDataA6_BlinkerInfo
 */
#define ObstacleDataA6_BlinkerInfo_both 4

/**
 * Value table ObstacleDataA6_BlinkerInfo entry right.
 *
 * @ingroup ENUM_ObstacleDataA6_BlinkerInfo
 */
#define ObstacleDataA6_BlinkerInfo_right 3

/**
 * Value table ObstacleDataA6_BlinkerInfo entry left.
 *
 * @ingroup ENUM_ObstacleDataA6_BlinkerInfo
 */
#define ObstacleDataA6_BlinkerInfo_left 2

/**
 * Value table ObstacleDataA6_BlinkerInfo entry off.
 *
 * @ingroup ENUM_ObstacleDataA6_BlinkerInfo
 */
#define ObstacleDataA6_BlinkerInfo_off 1

/**
 * Value table ObstacleDataA6_BlinkerInfo entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataA6_BlinkerInfo
 */
#define ObstacleDataA6_BlinkerInfo_unavailable 0

/**
 * @defgroup SIG_ObstacleDataA6_Move_in_and_Out Signal Move_in_and_Out of Message ObstacleDataA6 (0x42f)
 *
 * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our
 * estimation of where it is going to be within one second.
 *
 * Contains the value table \ref ENUM_ObstacleDataA6_Move_in_and_Out.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal Move_in_and_Out configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_Move_in_and_Out and \ref GET_ObstacleDataA6_Move_in_and_Out instead.
 */
#define SIG_ObstacleDataA6_Move_in_and_Out 0, 0, 37, 3

/**
 * Signal Move_in_and_Out setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_Move_in_and_Out or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_Move_in_and_Out 0, 0, 37, 3, 0

/**
 * Get signal Move_in_and_Out from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_Move_in_and_Out(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0))

/**
 * Set signal Move_in_and_Out in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_Move_in_and_Out(buf, val)                                                                   \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
    }

/**
 * Set signal Move_in_and_Out in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_Move_in_and_Out(buf) SET_ObstacleDataA6_Move_in_and_Out(buf, 0)

/**
 * Signal Move_in_and_Out value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_Move_in_and_Out(x, fmt) ((x)*fmt)

/**
 * Signal Move_in_and_Out raw initial value.
 */
#define START_ObstacleDataA6_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw minimum value.
 */
#define MIN_ObstacleDataA6_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw maximum value.
 */
#define MAX_ObstacleDataA6_Move_in_and_Out 4

/**
 * Signal Move_in_and_Out raw offset value.
 */
#define OFF_ObstacleDataA6_Move_in_and_Out 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA6_Move_in_and_Out Value Table for Signal Move_in_and_Out in Message ObstacleDataA6
 * (0x42f)
 *
 * Enum values defined for \ref SIG_ObstacleDataA6_Move_in_and_Out.
 *
 * @ingroup SIG_ObstacleDataA6_Move_in_and_Out
 */

/**
 * Value table ObstacleDataA6_Move_in_and_Out entry cut_out.
 *
 * @ingroup ENUM_ObstacleDataA6_Move_in_and_Out
 */
#define ObstacleDataA6_Move_in_and_Out_cut_out 4

/**
 * Value table ObstacleDataA6_Move_in_and_Out entry cut_in.
 *
 * @ingroup ENUM_ObstacleDataA6_Move_in_and_Out
 */
#define ObstacleDataA6_Move_in_and_Out_cut_in 3

/**
 * Value table ObstacleDataA6_Move_in_and_Out entry out_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA6_Move_in_and_Out
 */
#define ObstacleDataA6_Move_in_and_Out_out_host_lane 2

/**
 * Value table ObstacleDataA6_Move_in_and_Out entry in_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA6_Move_in_and_Out
 */
#define ObstacleDataA6_Move_in_and_Out_in_host_lane 1

/**
 * Value table ObstacleDataA6_Move_in_and_Out entry undefined.
 *
 * @ingroup ENUM_ObstacleDataA6_Move_in_and_Out
 */
#define ObstacleDataA6_Move_in_and_Out_undefined 0

/**
 * @defgroup SIG_ObstacleDataA6_ObstacleVelX Signal ObstacleVelX of Message ObstacleDataA6 (0x42f)
 *
 * Relative longitudinal speed of the ego vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal ObstacleVelX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_ObstacleVelX and \ref GET_ObstacleDataA6_ObstacleVelX instead.
 */
#define SIG_ObstacleDataA6_ObstacleVelX 0, 1, 40, 12

/**
 * Signal ObstacleVelX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_ObstacleVelX or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_ObstacleVelX 0, 1, 40, 12, 0

/**
 * Get signal ObstacleVelX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_ObstacleVelX(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_ObstacleVelX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[6] &= ~(0x0f << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_ObstacleVelX(buf) SET_ObstacleDataA6_ObstacleVelX(buf, 0)

/**
 * Signal ObstacleVelX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_ObstacleVelX(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelX raw initial value.
 */
#define START_ObstacleDataA6_ObstacleVelX 0

/**
 * Signal ObstacleVelX raw minimum value.
 */
#define MIN_ObstacleDataA6_ObstacleVelX -2047

/**
 * Signal ObstacleVelX raw maximum value.
 */
#define MAX_ObstacleDataA6_ObstacleVelX 2047

/**
 * Signal ObstacleVelX raw offset value.
 */
#define OFF_ObstacleDataA6_ObstacleVelX 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA6_ObstacleType Signal ObstacleType of Message ObstacleDataA6 (0x42f)
 *
 * Obstacle type
 *
 * Contains the value table \ref ENUM_ObstacleDataA6_ObstacleType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal ObstacleType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_ObstacleType and \ref GET_ObstacleDataA6_ObstacleType instead.
 */
#define SIG_ObstacleDataA6_ObstacleType 0, 0, 52, 2

/**
 * Signal ObstacleType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_ObstacleType or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_ObstacleType 0, 0, 52, 2, 0

/**
 * Get signal ObstacleType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_ObstacleType(buf) (0 | (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x03) << 0))

/**
 * Set signal ObstacleType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_ObstacleType(buf, val)                                                                      \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 4);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 4;                                                                 \
    }

/**
 * Set signal ObstacleType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_ObstacleType(buf) SET_ObstacleDataA6_ObstacleType(buf, 0)

/**
 * Signal ObstacleType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_ObstacleType(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleType raw initial value.
 */
#define START_ObstacleDataA6_ObstacleType 0

/**
 * Signal ObstacleType raw minimum value.
 */
#define MIN_ObstacleDataA6_ObstacleType 0

/**
 * Signal ObstacleType raw maximum value.
 */
#define MAX_ObstacleDataA6_ObstacleType 3

/**
 * Signal ObstacleType raw offset value.
 */
#define OFF_ObstacleDataA6_ObstacleType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA6_ObstacleType Value Table for Signal ObstacleType in Message ObstacleDataA6 (0x42f)
 *
 * Enum values defined for \ref SIG_ObstacleDataA6_ObstacleType.
 *
 * @ingroup SIG_ObstacleDataA6_ObstacleType
 */

/**
 * Value table ObstacleDataA6_ObstacleType entry General.
 *
 * Object
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleType
 */
#define ObstacleDataA6_ObstacleType_General 3

/**
 * Value table ObstacleDataA6_ObstacleType entry Cyclist.
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleType
 */
#define ObstacleDataA6_ObstacleType_Cyclist 2

/**
 * Value table ObstacleDataA6_ObstacleType entry Pedestrian.
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleType
 */
#define ObstacleDataA6_ObstacleType_Pedestrian 1

/**
 * Value table ObstacleDataA6_ObstacleType entry Vehicle.
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleType
 */
#define ObstacleDataA6_ObstacleType_Vehicle 0

/**
 * @defgroup SIG_ObstacleDataA6_VehicleSubType Signal VehicleSubType of Message ObstacleDataA6 (0x42f)
 *
 * Vehicle sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataA6_VehicleSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal VehicleSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_VehicleSubType and \ref GET_ObstacleDataA6_VehicleSubType instead.
 */
#define SIG_ObstacleDataA6_VehicleSubType 0, 0, 54, 4

/**
 * Signal VehicleSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_VehicleSubType or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_VehicleSubType 0, 0, 54, 4, 0

/**
 * Get signal VehicleSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_VehicleSubType(buf)                                                                         \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x03) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 2))

/**
 * Set signal VehicleSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_VehicleSubType(buf, val)                                                                    \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 6);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[7] &= ~(0x03 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 2) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal VehicleSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_VehicleSubType(buf) SET_ObstacleDataA6_VehicleSubType(buf, 0)

/**
 * Signal VehicleSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_VehicleSubType(x, fmt) ((x)*fmt)

/**
 * Signal VehicleSubType raw initial value.
 */
#define START_ObstacleDataA6_VehicleSubType 0

/**
 * Signal VehicleSubType raw minimum value.
 */
#define MIN_ObstacleDataA6_VehicleSubType 0

/**
 * Signal VehicleSubType raw maximum value.
 */
#define MAX_ObstacleDataA6_VehicleSubType 15

/**
 * Signal VehicleSubType raw offset value.
 */
#define OFF_ObstacleDataA6_VehicleSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA6_VehicleSubType Value Table for Signal VehicleSubType in Message ObstacleDataA6 (0x42f)
 *
 * Enum values defined for \ref SIG_ObstacleDataA6_VehicleSubType.
 *
 * @ingroup SIG_ObstacleDataA6_VehicleSubType
 */

/**
 * Value table ObstacleDataA6_VehicleSubType entry Tiny_car.
 *
 * @ingroup ENUM_ObstacleDataA6_VehicleSubType
 */
#define ObstacleDataA6_VehicleSubType_Tiny_car 5

/**
 * Value table ObstacleDataA6_VehicleSubType entry Special_vehicle.
 *
 * @ingroup ENUM_ObstacleDataA6_VehicleSubType
 */
#define ObstacleDataA6_VehicleSubType_Special_vehicle 4

/**
 * Value table ObstacleDataA6_VehicleSubType entry Motors.
 *
 * @ingroup ENUM_ObstacleDataA6_VehicleSubType
 */
#define ObstacleDataA6_VehicleSubType_Motors 3

/**
 * Value table ObstacleDataA6_VehicleSubType entry Trucks.
 *
 * @ingroup ENUM_ObstacleDataA6_VehicleSubType
 */
#define ObstacleDataA6_VehicleSubType_Trucks 2

/**
 * Value table ObstacleDataA6_VehicleSubType entry Small_Medium_Car.
 *
 * @ingroup ENUM_ObstacleDataA6_VehicleSubType
 */
#define ObstacleDataA6_VehicleSubType_Small_Medium_Car 1

/**
 * Value table ObstacleDataA6_VehicleSubType entry Bus.
 *
 * @ingroup ENUM_ObstacleDataA6_VehicleSubType
 */
#define ObstacleDataA6_VehicleSubType_Bus 0

/**
 * @defgroup SIG_ObstacleDataA6_ObstacleStatus Signal ObstacleStatus of Message ObstacleDataA6 (0x42f)
 *
 * Reseved. Not Implemented
 *
 * Contains the value table \ref ENUM_ObstacleDataA6_ObstacleStatus.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal ObstacleStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_ObstacleStatus and \ref GET_ObstacleDataA6_ObstacleStatus instead.
 */
#define SIG_ObstacleDataA6_ObstacleStatus 0, 0, 58, 3

/**
 * Signal ObstacleStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_ObstacleStatus or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_ObstacleStatus 0, 0, 58, 3, 0

/**
 * Get signal ObstacleStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_ObstacleStatus(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0))

/**
 * Set signal ObstacleStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_ObstacleStatus(buf, val)                                                                    \
    {                                                                                                                  \
        buf[7] &= ~(0x07 << 2);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal ObstacleStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_ObstacleStatus(buf) SET_ObstacleDataA6_ObstacleStatus(buf, 0)

/**
 * Signal ObstacleStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_ObstacleStatus(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleStatus raw initial value.
 */
#define START_ObstacleDataA6_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw minimum value.
 */
#define MIN_ObstacleDataA6_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw maximum value.
 */
#define MAX_ObstacleDataA6_ObstacleStatus 7

/**
 * Signal ObstacleStatus raw offset value.
 */
#define OFF_ObstacleDataA6_ObstacleStatus 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA6_ObstacleStatus Value Table for Signal ObstacleStatus in Message ObstacleDataA6 (0x42f)
 *
 * Enum values defined for \ref SIG_ObstacleDataA6_ObstacleStatus.
 *
 * @ingroup SIG_ObstacleDataA6_ObstacleStatus
 */

/**
 * Value table ObstacleDataA6_ObstacleStatus entry Unused.
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleStatus
 */
#define ObstacleDataA6_ObstacleStatus_Unused 6

/**
 * Value table ObstacleDataA6_ObstacleStatus entry Parked.
 *
 * never moved, BckLightsOff
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleStatus
 */
#define ObstacleDataA6_ObstacleStatus_Parked 5

/**
 * Value table ObstacleDataA6_ObstacleStatus entry Oncoming.
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleStatus
 */
#define ObstacleDataA6_ObstacleStatus_Oncoming 4

/**
 * Value table ObstacleDataA6_ObstacleStatus entry moving.
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleStatus
 */
#define ObstacleDataA6_ObstacleStatus_moving 3

/**
 * Value table ObstacleDataA6_ObstacleStatus entry stopped.
 *
 * (movable)
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleStatus
 */
#define ObstacleDataA6_ObstacleStatus_stopped 2

/**
 * Value table ObstacleDataA6_ObstacleStatus entry standing.
 *
 * neverMoved bckLightsOn
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleStatus
 */
#define ObstacleDataA6_ObstacleStatus_standing 1

/**
 * Value table ObstacleDataA6_ObstacleStatus entry not.
 *
 * defined
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleStatus
 */
#define ObstacleDataA6_ObstacleStatus_not 0

/**
 * @defgroup SIG_ObstacleDataA6_ObstacleBrakeLights Signal ObstacleBrakeLights of Message ObstacleDataA6 (0x42f)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA6_ObstacleBrakeLights.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal ObstacleBrakeLights configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_ObstacleBrakeLights and \ref GET_ObstacleDataA6_ObstacleBrakeLights instead.
 */
#define SIG_ObstacleDataA6_ObstacleBrakeLights 0, 0, 61, 1

/**
 * Signal ObstacleBrakeLights setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_ObstacleBrakeLights or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_ObstacleBrakeLights 0, 0, 61, 1, 0

/**
 * Get signal ObstacleBrakeLights from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_ObstacleBrakeLights(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0))

/**
 * Set signal ObstacleBrakeLights in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_ObstacleBrakeLights(buf, val)                                                               \
    {                                                                                                                  \
        buf[7] &= ~(0x01 << 5);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal ObstacleBrakeLights in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_ObstacleBrakeLights(buf) SET_ObstacleDataA6_ObstacleBrakeLights(buf, 0)

/**
 * Signal ObstacleBrakeLights value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_ObstacleBrakeLights(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleBrakeLights raw initial value.
 */
#define START_ObstacleDataA6_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw minimum value.
 */
#define MIN_ObstacleDataA6_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw maximum value.
 */
#define MAX_ObstacleDataA6_ObstacleBrakeLights 1

/**
 * Signal ObstacleBrakeLights raw offset value.
 */
#define OFF_ObstacleDataA6_ObstacleBrakeLights 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA6_ObstacleBrakeLights Value Table for Signal ObstacleBrakeLights in Message
 * ObstacleDataA6 (0x42f)
 *
 * Enum values defined for \ref SIG_ObstacleDataA6_ObstacleBrakeLights.
 *
 * @ingroup SIG_ObstacleDataA6_ObstacleBrakeLights
 */

/**
 * Value table ObstacleDataA6_ObstacleBrakeLights entry object_s.
 *
 * object's brake lights are on
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleBrakeLights
 */
#define ObstacleDataA6_ObstacleBrakeLights_object_s 1

/**
 * Value table ObstacleDataA6_ObstacleBrakeLights entry object_s_0.
 *
 * object's brake lights are off
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleBrakeLights
 */
#define ObstacleDataA6_ObstacleBrakeLights_object_s_0 0

/**
 * @defgroup SIG_ObstacleDataA6_ObstacleValid Signal ObstacleValid of Message ObstacleDataA6 (0x42f)
 *
 * Obstacle Valid info
 *
 * Contains the value table \ref ENUM_ObstacleDataA6_ObstacleValid.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA6
 * @{
 */

/**
 * Signal ObstacleValid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA6_ObstacleValid and \ref GET_ObstacleDataA6_ObstacleValid instead.
 */
#define SIG_ObstacleDataA6_ObstacleValid 0, 0, 62, 2

/**
 * Signal ObstacleValid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA6_ObstacleValid or \ref INIT_ObstacleDataA6 instead.
 */
#define SETUP_ObstacleDataA6_ObstacleValid 0, 0, 62, 2, 0

/**
 * Get signal ObstacleValid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA6_ObstacleValid(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0))

/**
 * Set signal ObstacleValid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA6_ObstacleValid(buf, val)                                                                     \
    {                                                                                                                  \
        buf[7] &= ~(0x03 << 6);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
    }

/**
 * Set signal ObstacleValid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA6_ObstacleValid(buf) SET_ObstacleDataA6_ObstacleValid(buf, 0)

/**
 * Signal ObstacleValid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA6_ObstacleValid(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleValid raw initial value.
 */
#define START_ObstacleDataA6_ObstacleValid 0

/**
 * Signal ObstacleValid raw minimum value.
 */
#define MIN_ObstacleDataA6_ObstacleValid 0

/**
 * Signal ObstacleValid raw maximum value.
 */
#define MAX_ObstacleDataA6_ObstacleValid 2

/**
 * Signal ObstacleValid raw offset value.
 */
#define OFF_ObstacleDataA6_ObstacleValid 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA6_ObstacleValid Value Table for Signal ObstacleValid in Message ObstacleDataA6 (0x42f)
 *
 * Enum values defined for \ref SIG_ObstacleDataA6_ObstacleValid.
 *
 * @ingroup SIG_ObstacleDataA6_ObstacleValid
 */

/**
 * Value table ObstacleDataA6_ObstacleValid entry older.
 *
 * valid
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleValid
 */
#define ObstacleDataA6_ObstacleValid_older 2

/**
 * Value table ObstacleDataA6_ObstacleValid entry new.
 *
 * valid (detected this frame)
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleValid
 */
#define ObstacleDataA6_ObstacleValid_new 1

/**
 * Value table ObstacleDataA6_ObstacleValid entry invalid.
 *
 * Obstacle(default value)
 *
 * @ingroup ENUM_ObstacleDataA6_ObstacleValid
 */
#define ObstacleDataA6_ObstacleValid_invalid 0

/**
 * @defgroup SIG_ObstacleDataA5_ObstacleID Signal ObstacleID of Message ObstacleDataA5 (0x42c)
 *
 * New obstacles are given the last used free ID
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal ObstacleID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_ObstacleID and \ref GET_ObstacleDataA5_ObstacleID instead.
 */
#define SIG_ObstacleDataA5_ObstacleID 0, 0, 0, 8

/**
 * Signal ObstacleID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_ObstacleID or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_ObstacleID 0, 0, 0, 8, 0

/**
 * Get signal ObstacleID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_ObstacleID(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_ObstacleID(buf, val)                                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_ObstacleID(buf) SET_ObstacleDataA5_ObstacleID(buf, 0)

/**
 * Signal ObstacleID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_ObstacleID(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleID raw initial value.
 */
#define START_ObstacleDataA5_ObstacleID 0

/**
 * Signal ObstacleID raw minimum value.
 */
#define MIN_ObstacleDataA5_ObstacleID 0

/**
 * Signal ObstacleID raw maximum value.
 */
#define MAX_ObstacleDataA5_ObstacleID 63

/**
 * Signal ObstacleID raw offset value.
 */
#define OFF_ObstacleDataA5_ObstacleID 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA5_ObstaclePosX Signal ObstaclePosX of Message ObstacleDataA5 (0x42c)
 *
 * longitudinal distance to the middle of the RL and RR corners
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal ObstaclePosX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_ObstaclePosX and \ref GET_ObstacleDataA5_ObstaclePosX instead.
 */
#define SIG_ObstacleDataA5_ObstaclePosX 0, 0, 8, 13

/**
 * Signal ObstaclePosX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_ObstaclePosX or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_ObstaclePosX 0, 0, 8, 13, 0

/**
 * Get signal ObstaclePosX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_ObstaclePosX(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 8))

/**
 * Set signal ObstaclePosX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_ObstaclePosX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[2] &= ~(0x1f << 0);                                                                                        \
        buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0;                                                       \
    }

/**
 * Set signal ObstaclePosX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_ObstaclePosX(buf) SET_ObstacleDataA5_ObstaclePosX(buf, 0)

/**
 * Signal ObstaclePosX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_ObstaclePosX(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosX raw initial value.
 */
#define START_ObstacleDataA5_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw minimum value.
 */
#define MIN_ObstacleDataA5_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw maximum value.
 */
#define MAX_ObstacleDataA5_ObstaclePosX 8176

/**
 * Signal ObstaclePosX raw offset value.
 */
#define OFF_ObstacleDataA5_ObstaclePosX -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA5_ObstaclePosY Signal ObstaclePosY of Message ObstacleDataA5 (0x42c)
 *
 * the lateral distance to the middle of the RL and RR corners, positive to the left
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal ObstaclePosY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_ObstaclePosY and \ref GET_ObstacleDataA5_ObstaclePosY instead.
 */
#define SIG_ObstacleDataA5_ObstaclePosY 0, 0, 21, 13

/**
 * Signal ObstaclePosY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_ObstaclePosY or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_ObstaclePosY 0, 0, 21, 13, 0

/**
 * Get signal ObstaclePosY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_ObstaclePosY(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) |       \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 11))

/**
 * Set signal ObstaclePosY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_ObstaclePosY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0x07 << 5);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0;                                                       \
        buf[4] &= ~(0x03 << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x03) << 0;                                                      \
    }

/**
 * Set signal ObstaclePosY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_ObstaclePosY(buf) SET_ObstacleDataA5_ObstaclePosY(buf, 0)

/**
 * Signal ObstaclePosY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_ObstaclePosY(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosY raw initial value.
 */
#define START_ObstacleDataA5_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw minimum value.
 */
#define MIN_ObstacleDataA5_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw maximum value.
 */
#define MAX_ObstacleDataA5_ObstaclePosY 8176

/**
 * Signal ObstaclePosY raw offset value.
 */
#define OFF_ObstacleDataA5_ObstaclePosY -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA5_BlinkerInfo Signal BlinkerInfo of Message ObstacleDataA5 (0x42c)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA5_BlinkerInfo.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal BlinkerInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_BlinkerInfo and \ref GET_ObstacleDataA5_BlinkerInfo instead.
 */
#define SIG_ObstacleDataA5_BlinkerInfo 0, 0, 34, 3

/**
 * Signal BlinkerInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_BlinkerInfo or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_BlinkerInfo 0, 0, 34, 3, 0

/**
 * Get signal BlinkerInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_BlinkerInfo(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x07) << 0))

/**
 * Set signal BlinkerInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_BlinkerInfo(buf, val)                                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 2);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal BlinkerInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_BlinkerInfo(buf) SET_ObstacleDataA5_BlinkerInfo(buf, 0)

/**
 * Signal BlinkerInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_BlinkerInfo(x, fmt) ((x)*fmt)

/**
 * Signal BlinkerInfo raw initial value.
 */
#define START_ObstacleDataA5_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw minimum value.
 */
#define MIN_ObstacleDataA5_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw maximum value.
 */
#define MAX_ObstacleDataA5_BlinkerInfo 4

/**
 * Signal BlinkerInfo raw offset value.
 */
#define OFF_ObstacleDataA5_BlinkerInfo 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA5_BlinkerInfo Value Table for Signal BlinkerInfo in Message ObstacleDataA5 (0x42c)
 *
 * Enum values defined for \ref SIG_ObstacleDataA5_BlinkerInfo.
 *
 * @ingroup SIG_ObstacleDataA5_BlinkerInfo
 */

/**
 * Value table ObstacleDataA5_BlinkerInfo entry both.
 *
 * @ingroup ENUM_ObstacleDataA5_BlinkerInfo
 */
#define ObstacleDataA5_BlinkerInfo_both 4

/**
 * Value table ObstacleDataA5_BlinkerInfo entry right.
 *
 * @ingroup ENUM_ObstacleDataA5_BlinkerInfo
 */
#define ObstacleDataA5_BlinkerInfo_right 3

/**
 * Value table ObstacleDataA5_BlinkerInfo entry left.
 *
 * @ingroup ENUM_ObstacleDataA5_BlinkerInfo
 */
#define ObstacleDataA5_BlinkerInfo_left 2

/**
 * Value table ObstacleDataA5_BlinkerInfo entry off.
 *
 * @ingroup ENUM_ObstacleDataA5_BlinkerInfo
 */
#define ObstacleDataA5_BlinkerInfo_off 1

/**
 * Value table ObstacleDataA5_BlinkerInfo entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataA5_BlinkerInfo
 */
#define ObstacleDataA5_BlinkerInfo_unavailable 0

/**
 * @defgroup SIG_ObstacleDataA5_Move_in_and_Out Signal Move_in_and_Out of Message ObstacleDataA5 (0x42c)
 *
 * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our
 * estimation of where it is going to be within one second.
 *
 * Contains the value table \ref ENUM_ObstacleDataA5_Move_in_and_Out.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal Move_in_and_Out configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_Move_in_and_Out and \ref GET_ObstacleDataA5_Move_in_and_Out instead.
 */
#define SIG_ObstacleDataA5_Move_in_and_Out 0, 0, 37, 3

/**
 * Signal Move_in_and_Out setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_Move_in_and_Out or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_Move_in_and_Out 0, 0, 37, 3, 0

/**
 * Get signal Move_in_and_Out from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_Move_in_and_Out(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0))

/**
 * Set signal Move_in_and_Out in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_Move_in_and_Out(buf, val)                                                                   \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
    }

/**
 * Set signal Move_in_and_Out in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_Move_in_and_Out(buf) SET_ObstacleDataA5_Move_in_and_Out(buf, 0)

/**
 * Signal Move_in_and_Out value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_Move_in_and_Out(x, fmt) ((x)*fmt)

/**
 * Signal Move_in_and_Out raw initial value.
 */
#define START_ObstacleDataA5_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw minimum value.
 */
#define MIN_ObstacleDataA5_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw maximum value.
 */
#define MAX_ObstacleDataA5_Move_in_and_Out 4

/**
 * Signal Move_in_and_Out raw offset value.
 */
#define OFF_ObstacleDataA5_Move_in_and_Out 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA5_Move_in_and_Out Value Table for Signal Move_in_and_Out in Message ObstacleDataA5
 * (0x42c)
 *
 * Enum values defined for \ref SIG_ObstacleDataA5_Move_in_and_Out.
 *
 * @ingroup SIG_ObstacleDataA5_Move_in_and_Out
 */

/**
 * Value table ObstacleDataA5_Move_in_and_Out entry cut_out.
 *
 * @ingroup ENUM_ObstacleDataA5_Move_in_and_Out
 */
#define ObstacleDataA5_Move_in_and_Out_cut_out 4

/**
 * Value table ObstacleDataA5_Move_in_and_Out entry cut_in.
 *
 * @ingroup ENUM_ObstacleDataA5_Move_in_and_Out
 */
#define ObstacleDataA5_Move_in_and_Out_cut_in 3

/**
 * Value table ObstacleDataA5_Move_in_and_Out entry out_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA5_Move_in_and_Out
 */
#define ObstacleDataA5_Move_in_and_Out_out_host_lane 2

/**
 * Value table ObstacleDataA5_Move_in_and_Out entry in_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA5_Move_in_and_Out
 */
#define ObstacleDataA5_Move_in_and_Out_in_host_lane 1

/**
 * Value table ObstacleDataA5_Move_in_and_Out entry undefined.
 *
 * @ingroup ENUM_ObstacleDataA5_Move_in_and_Out
 */
#define ObstacleDataA5_Move_in_and_Out_undefined 0

/**
 * @defgroup SIG_ObstacleDataA5_ObstacleVelX Signal ObstacleVelX of Message ObstacleDataA5 (0x42c)
 *
 * Relative longitudinal speed of the ego vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal ObstacleVelX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_ObstacleVelX and \ref GET_ObstacleDataA5_ObstacleVelX instead.
 */
#define SIG_ObstacleDataA5_ObstacleVelX 0, 1, 40, 12

/**
 * Signal ObstacleVelX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_ObstacleVelX or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_ObstacleVelX 0, 1, 40, 12, 0

/**
 * Get signal ObstacleVelX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_ObstacleVelX(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_ObstacleVelX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[6] &= ~(0x0f << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_ObstacleVelX(buf) SET_ObstacleDataA5_ObstacleVelX(buf, 0)

/**
 * Signal ObstacleVelX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_ObstacleVelX(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelX raw initial value.
 */
#define START_ObstacleDataA5_ObstacleVelX 0

/**
 * Signal ObstacleVelX raw minimum value.
 */
#define MIN_ObstacleDataA5_ObstacleVelX -2047

/**
 * Signal ObstacleVelX raw maximum value.
 */
#define MAX_ObstacleDataA5_ObstacleVelX 2047

/**
 * Signal ObstacleVelX raw offset value.
 */
#define OFF_ObstacleDataA5_ObstacleVelX 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA5_ObstacleType Signal ObstacleType of Message ObstacleDataA5 (0x42c)
 *
 * Obstacle type
 *
 * Contains the value table \ref ENUM_ObstacleDataA5_ObstacleType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal ObstacleType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_ObstacleType and \ref GET_ObstacleDataA5_ObstacleType instead.
 */
#define SIG_ObstacleDataA5_ObstacleType 0, 0, 52, 2

/**
 * Signal ObstacleType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_ObstacleType or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_ObstacleType 0, 0, 52, 2, 0

/**
 * Get signal ObstacleType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_ObstacleType(buf) (0 | (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x03) << 0))

/**
 * Set signal ObstacleType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_ObstacleType(buf, val)                                                                      \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 4);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 4;                                                                 \
    }

/**
 * Set signal ObstacleType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_ObstacleType(buf) SET_ObstacleDataA5_ObstacleType(buf, 0)

/**
 * Signal ObstacleType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_ObstacleType(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleType raw initial value.
 */
#define START_ObstacleDataA5_ObstacleType 0

/**
 * Signal ObstacleType raw minimum value.
 */
#define MIN_ObstacleDataA5_ObstacleType 0

/**
 * Signal ObstacleType raw maximum value.
 */
#define MAX_ObstacleDataA5_ObstacleType 3

/**
 * Signal ObstacleType raw offset value.
 */
#define OFF_ObstacleDataA5_ObstacleType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA5_ObstacleType Value Table for Signal ObstacleType in Message ObstacleDataA5 (0x42c)
 *
 * Enum values defined for \ref SIG_ObstacleDataA5_ObstacleType.
 *
 * @ingroup SIG_ObstacleDataA5_ObstacleType
 */

/**
 * Value table ObstacleDataA5_ObstacleType entry General.
 *
 * Object
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleType
 */
#define ObstacleDataA5_ObstacleType_General 3

/**
 * Value table ObstacleDataA5_ObstacleType entry Cyclist.
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleType
 */
#define ObstacleDataA5_ObstacleType_Cyclist 2

/**
 * Value table ObstacleDataA5_ObstacleType entry Pedestrian.
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleType
 */
#define ObstacleDataA5_ObstacleType_Pedestrian 1

/**
 * Value table ObstacleDataA5_ObstacleType entry Vehicle.
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleType
 */
#define ObstacleDataA5_ObstacleType_Vehicle 0

/**
 * @defgroup SIG_ObstacleDataA5_VehicleSubType Signal VehicleSubType of Message ObstacleDataA5 (0x42c)
 *
 * Vehicle sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataA5_VehicleSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal VehicleSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_VehicleSubType and \ref GET_ObstacleDataA5_VehicleSubType instead.
 */
#define SIG_ObstacleDataA5_VehicleSubType 0, 0, 54, 4

/**
 * Signal VehicleSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_VehicleSubType or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_VehicleSubType 0, 0, 54, 4, 0

/**
 * Get signal VehicleSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_VehicleSubType(buf)                                                                         \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x03) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 2))

/**
 * Set signal VehicleSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_VehicleSubType(buf, val)                                                                    \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 6);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[7] &= ~(0x03 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 2) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal VehicleSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_VehicleSubType(buf) SET_ObstacleDataA5_VehicleSubType(buf, 0)

/**
 * Signal VehicleSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_VehicleSubType(x, fmt) ((x)*fmt)

/**
 * Signal VehicleSubType raw initial value.
 */
#define START_ObstacleDataA5_VehicleSubType 0

/**
 * Signal VehicleSubType raw minimum value.
 */
#define MIN_ObstacleDataA5_VehicleSubType 0

/**
 * Signal VehicleSubType raw maximum value.
 */
#define MAX_ObstacleDataA5_VehicleSubType 15

/**
 * Signal VehicleSubType raw offset value.
 */
#define OFF_ObstacleDataA5_VehicleSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA5_VehicleSubType Value Table for Signal VehicleSubType in Message ObstacleDataA5 (0x42c)
 *
 * Enum values defined for \ref SIG_ObstacleDataA5_VehicleSubType.
 *
 * @ingroup SIG_ObstacleDataA5_VehicleSubType
 */

/**
 * Value table ObstacleDataA5_VehicleSubType entry Tiny_car.
 *
 * @ingroup ENUM_ObstacleDataA5_VehicleSubType
 */
#define ObstacleDataA5_VehicleSubType_Tiny_car 5

/**
 * Value table ObstacleDataA5_VehicleSubType entry Special_vehicle.
 *
 * @ingroup ENUM_ObstacleDataA5_VehicleSubType
 */
#define ObstacleDataA5_VehicleSubType_Special_vehicle 4

/**
 * Value table ObstacleDataA5_VehicleSubType entry Motors.
 *
 * @ingroup ENUM_ObstacleDataA5_VehicleSubType
 */
#define ObstacleDataA5_VehicleSubType_Motors 3

/**
 * Value table ObstacleDataA5_VehicleSubType entry Trucks.
 *
 * @ingroup ENUM_ObstacleDataA5_VehicleSubType
 */
#define ObstacleDataA5_VehicleSubType_Trucks 2

/**
 * Value table ObstacleDataA5_VehicleSubType entry Small_Medium_Car.
 *
 * @ingroup ENUM_ObstacleDataA5_VehicleSubType
 */
#define ObstacleDataA5_VehicleSubType_Small_Medium_Car 1

/**
 * Value table ObstacleDataA5_VehicleSubType entry Bus.
 *
 * @ingroup ENUM_ObstacleDataA5_VehicleSubType
 */
#define ObstacleDataA5_VehicleSubType_Bus 0

/**
 * @defgroup SIG_ObstacleDataA5_ObstacleStatus Signal ObstacleStatus of Message ObstacleDataA5 (0x42c)
 *
 * Reseved. Not Implemented
 *
 * Contains the value table \ref ENUM_ObstacleDataA5_ObstacleStatus.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal ObstacleStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_ObstacleStatus and \ref GET_ObstacleDataA5_ObstacleStatus instead.
 */
#define SIG_ObstacleDataA5_ObstacleStatus 0, 0, 58, 3

/**
 * Signal ObstacleStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_ObstacleStatus or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_ObstacleStatus 0, 0, 58, 3, 0

/**
 * Get signal ObstacleStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_ObstacleStatus(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0))

/**
 * Set signal ObstacleStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_ObstacleStatus(buf, val)                                                                    \
    {                                                                                                                  \
        buf[7] &= ~(0x07 << 2);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal ObstacleStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_ObstacleStatus(buf) SET_ObstacleDataA5_ObstacleStatus(buf, 0)

/**
 * Signal ObstacleStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_ObstacleStatus(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleStatus raw initial value.
 */
#define START_ObstacleDataA5_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw minimum value.
 */
#define MIN_ObstacleDataA5_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw maximum value.
 */
#define MAX_ObstacleDataA5_ObstacleStatus 7

/**
 * Signal ObstacleStatus raw offset value.
 */
#define OFF_ObstacleDataA5_ObstacleStatus 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA5_ObstacleStatus Value Table for Signal ObstacleStatus in Message ObstacleDataA5 (0x42c)
 *
 * Enum values defined for \ref SIG_ObstacleDataA5_ObstacleStatus.
 *
 * @ingroup SIG_ObstacleDataA5_ObstacleStatus
 */

/**
 * Value table ObstacleDataA5_ObstacleStatus entry Unused.
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleStatus
 */
#define ObstacleDataA5_ObstacleStatus_Unused 6

/**
 * Value table ObstacleDataA5_ObstacleStatus entry Parked.
 *
 * never moved, BckLightsOff
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleStatus
 */
#define ObstacleDataA5_ObstacleStatus_Parked 5

/**
 * Value table ObstacleDataA5_ObstacleStatus entry Oncoming.
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleStatus
 */
#define ObstacleDataA5_ObstacleStatus_Oncoming 4

/**
 * Value table ObstacleDataA5_ObstacleStatus entry moving.
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleStatus
 */
#define ObstacleDataA5_ObstacleStatus_moving 3

/**
 * Value table ObstacleDataA5_ObstacleStatus entry stopped.
 *
 * (movable)
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleStatus
 */
#define ObstacleDataA5_ObstacleStatus_stopped 2

/**
 * Value table ObstacleDataA5_ObstacleStatus entry standing.
 *
 * neverMoved bckLightsOn
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleStatus
 */
#define ObstacleDataA5_ObstacleStatus_standing 1

/**
 * Value table ObstacleDataA5_ObstacleStatus entry not.
 *
 * defined
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleStatus
 */
#define ObstacleDataA5_ObstacleStatus_not 0

/**
 * @defgroup SIG_ObstacleDataA5_ObstacleBrakeLights Signal ObstacleBrakeLights of Message ObstacleDataA5 (0x42c)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA5_ObstacleBrakeLights.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal ObstacleBrakeLights configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_ObstacleBrakeLights and \ref GET_ObstacleDataA5_ObstacleBrakeLights instead.
 */
#define SIG_ObstacleDataA5_ObstacleBrakeLights 0, 0, 61, 1

/**
 * Signal ObstacleBrakeLights setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_ObstacleBrakeLights or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_ObstacleBrakeLights 0, 0, 61, 1, 0

/**
 * Get signal ObstacleBrakeLights from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_ObstacleBrakeLights(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0))

/**
 * Set signal ObstacleBrakeLights in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_ObstacleBrakeLights(buf, val)                                                               \
    {                                                                                                                  \
        buf[7] &= ~(0x01 << 5);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal ObstacleBrakeLights in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_ObstacleBrakeLights(buf) SET_ObstacleDataA5_ObstacleBrakeLights(buf, 0)

/**
 * Signal ObstacleBrakeLights value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_ObstacleBrakeLights(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleBrakeLights raw initial value.
 */
#define START_ObstacleDataA5_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw minimum value.
 */
#define MIN_ObstacleDataA5_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw maximum value.
 */
#define MAX_ObstacleDataA5_ObstacleBrakeLights 1

/**
 * Signal ObstacleBrakeLights raw offset value.
 */
#define OFF_ObstacleDataA5_ObstacleBrakeLights 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA5_ObstacleBrakeLights Value Table for Signal ObstacleBrakeLights in Message
 * ObstacleDataA5 (0x42c)
 *
 * Enum values defined for \ref SIG_ObstacleDataA5_ObstacleBrakeLights.
 *
 * @ingroup SIG_ObstacleDataA5_ObstacleBrakeLights
 */

/**
 * Value table ObstacleDataA5_ObstacleBrakeLights entry object_s.
 *
 * object's brake lights are on
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleBrakeLights
 */
#define ObstacleDataA5_ObstacleBrakeLights_object_s 1

/**
 * Value table ObstacleDataA5_ObstacleBrakeLights entry object_s_0.
 *
 * object's brake lights are off
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleBrakeLights
 */
#define ObstacleDataA5_ObstacleBrakeLights_object_s_0 0

/**
 * @defgroup SIG_ObstacleDataA5_ObstacleValid Signal ObstacleValid of Message ObstacleDataA5 (0x42c)
 *
 * Obstacle Valid info
 *
 * Contains the value table \ref ENUM_ObstacleDataA5_ObstacleValid.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA5
 * @{
 */

/**
 * Signal ObstacleValid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA5_ObstacleValid and \ref GET_ObstacleDataA5_ObstacleValid instead.
 */
#define SIG_ObstacleDataA5_ObstacleValid 0, 0, 62, 2

/**
 * Signal ObstacleValid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA5_ObstacleValid or \ref INIT_ObstacleDataA5 instead.
 */
#define SETUP_ObstacleDataA5_ObstacleValid 0, 0, 62, 2, 0

/**
 * Get signal ObstacleValid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA5_ObstacleValid(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0))

/**
 * Set signal ObstacleValid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA5_ObstacleValid(buf, val)                                                                     \
    {                                                                                                                  \
        buf[7] &= ~(0x03 << 6);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
    }

/**
 * Set signal ObstacleValid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA5_ObstacleValid(buf) SET_ObstacleDataA5_ObstacleValid(buf, 0)

/**
 * Signal ObstacleValid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA5_ObstacleValid(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleValid raw initial value.
 */
#define START_ObstacleDataA5_ObstacleValid 0

/**
 * Signal ObstacleValid raw minimum value.
 */
#define MIN_ObstacleDataA5_ObstacleValid 0

/**
 * Signal ObstacleValid raw maximum value.
 */
#define MAX_ObstacleDataA5_ObstacleValid 2

/**
 * Signal ObstacleValid raw offset value.
 */
#define OFF_ObstacleDataA5_ObstacleValid 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA5_ObstacleValid Value Table for Signal ObstacleValid in Message ObstacleDataA5 (0x42c)
 *
 * Enum values defined for \ref SIG_ObstacleDataA5_ObstacleValid.
 *
 * @ingroup SIG_ObstacleDataA5_ObstacleValid
 */

/**
 * Value table ObstacleDataA5_ObstacleValid entry older.
 *
 * valid
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleValid
 */
#define ObstacleDataA5_ObstacleValid_older 2

/**
 * Value table ObstacleDataA5_ObstacleValid entry new.
 *
 * valid (detected this frame)
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleValid
 */
#define ObstacleDataA5_ObstacleValid_new 1

/**
 * Value table ObstacleDataA5_ObstacleValid entry invalid.
 *
 * Obstacle(default value)
 *
 * @ingroup ENUM_ObstacleDataA5_ObstacleValid
 */
#define ObstacleDataA5_ObstacleValid_invalid 0

/**
 * @defgroup SIG_ObstacleDataA4_ObstacleID Signal ObstacleID of Message ObstacleDataA4 (0x429)
 *
 * New obstacles are given the last used free ID
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal ObstacleID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_ObstacleID and \ref GET_ObstacleDataA4_ObstacleID instead.
 */
#define SIG_ObstacleDataA4_ObstacleID 0, 0, 0, 8

/**
 * Signal ObstacleID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_ObstacleID or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_ObstacleID 0, 0, 0, 8, 0

/**
 * Get signal ObstacleID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_ObstacleID(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_ObstacleID(buf, val)                                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_ObstacleID(buf) SET_ObstacleDataA4_ObstacleID(buf, 0)

/**
 * Signal ObstacleID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_ObstacleID(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleID raw initial value.
 */
#define START_ObstacleDataA4_ObstacleID 0

/**
 * Signal ObstacleID raw minimum value.
 */
#define MIN_ObstacleDataA4_ObstacleID 0

/**
 * Signal ObstacleID raw maximum value.
 */
#define MAX_ObstacleDataA4_ObstacleID 63

/**
 * Signal ObstacleID raw offset value.
 */
#define OFF_ObstacleDataA4_ObstacleID 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA4_ObstaclePosX Signal ObstaclePosX of Message ObstacleDataA4 (0x429)
 *
 * longitudinal distance to the middle of the RL and RR corners
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal ObstaclePosX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_ObstaclePosX and \ref GET_ObstacleDataA4_ObstaclePosX instead.
 */
#define SIG_ObstacleDataA4_ObstaclePosX 0, 0, 8, 13

/**
 * Signal ObstaclePosX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_ObstaclePosX or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_ObstaclePosX 0, 0, 8, 13, 0

/**
 * Get signal ObstaclePosX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_ObstaclePosX(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 8))

/**
 * Set signal ObstaclePosX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_ObstaclePosX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[2] &= ~(0x1f << 0);                                                                                        \
        buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0;                                                       \
    }

/**
 * Set signal ObstaclePosX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_ObstaclePosX(buf) SET_ObstacleDataA4_ObstaclePosX(buf, 0)

/**
 * Signal ObstaclePosX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_ObstaclePosX(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosX raw initial value.
 */
#define START_ObstacleDataA4_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw minimum value.
 */
#define MIN_ObstacleDataA4_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw maximum value.
 */
#define MAX_ObstacleDataA4_ObstaclePosX 8176

/**
 * Signal ObstaclePosX raw offset value.
 */
#define OFF_ObstacleDataA4_ObstaclePosX -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA4_ObstaclePosY Signal ObstaclePosY of Message ObstacleDataA4 (0x429)
 *
 * the lateral distance to the middle of the RL and RR corners, positive to the left
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal ObstaclePosY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_ObstaclePosY and \ref GET_ObstacleDataA4_ObstaclePosY instead.
 */
#define SIG_ObstacleDataA4_ObstaclePosY 0, 0, 21, 13

/**
 * Signal ObstaclePosY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_ObstaclePosY or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_ObstaclePosY 0, 0, 21, 13, 0

/**
 * Get signal ObstaclePosY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_ObstaclePosY(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) |       \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 11))

/**
 * Set signal ObstaclePosY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_ObstaclePosY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0x07 << 5);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0;                                                       \
        buf[4] &= ~(0x03 << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x03) << 0;                                                      \
    }

/**
 * Set signal ObstaclePosY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_ObstaclePosY(buf) SET_ObstacleDataA4_ObstaclePosY(buf, 0)

/**
 * Signal ObstaclePosY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_ObstaclePosY(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosY raw initial value.
 */
#define START_ObstacleDataA4_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw minimum value.
 */
#define MIN_ObstacleDataA4_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw maximum value.
 */
#define MAX_ObstacleDataA4_ObstaclePosY 8176

/**
 * Signal ObstaclePosY raw offset value.
 */
#define OFF_ObstacleDataA4_ObstaclePosY -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA4_BlinkerInfo Signal BlinkerInfo of Message ObstacleDataA4 (0x429)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA4_BlinkerInfo.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal BlinkerInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_BlinkerInfo and \ref GET_ObstacleDataA4_BlinkerInfo instead.
 */
#define SIG_ObstacleDataA4_BlinkerInfo 0, 0, 34, 3

/**
 * Signal BlinkerInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_BlinkerInfo or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_BlinkerInfo 0, 0, 34, 3, 0

/**
 * Get signal BlinkerInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_BlinkerInfo(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x07) << 0))

/**
 * Set signal BlinkerInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_BlinkerInfo(buf, val)                                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 2);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal BlinkerInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_BlinkerInfo(buf) SET_ObstacleDataA4_BlinkerInfo(buf, 0)

/**
 * Signal BlinkerInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_BlinkerInfo(x, fmt) ((x)*fmt)

/**
 * Signal BlinkerInfo raw initial value.
 */
#define START_ObstacleDataA4_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw minimum value.
 */
#define MIN_ObstacleDataA4_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw maximum value.
 */
#define MAX_ObstacleDataA4_BlinkerInfo 4

/**
 * Signal BlinkerInfo raw offset value.
 */
#define OFF_ObstacleDataA4_BlinkerInfo 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA4_BlinkerInfo Value Table for Signal BlinkerInfo in Message ObstacleDataA4 (0x429)
 *
 * Enum values defined for \ref SIG_ObstacleDataA4_BlinkerInfo.
 *
 * @ingroup SIG_ObstacleDataA4_BlinkerInfo
 */

/**
 * Value table ObstacleDataA4_BlinkerInfo entry both.
 *
 * @ingroup ENUM_ObstacleDataA4_BlinkerInfo
 */
#define ObstacleDataA4_BlinkerInfo_both 4

/**
 * Value table ObstacleDataA4_BlinkerInfo entry right.
 *
 * @ingroup ENUM_ObstacleDataA4_BlinkerInfo
 */
#define ObstacleDataA4_BlinkerInfo_right 3

/**
 * Value table ObstacleDataA4_BlinkerInfo entry left.
 *
 * @ingroup ENUM_ObstacleDataA4_BlinkerInfo
 */
#define ObstacleDataA4_BlinkerInfo_left 2

/**
 * Value table ObstacleDataA4_BlinkerInfo entry off.
 *
 * @ingroup ENUM_ObstacleDataA4_BlinkerInfo
 */
#define ObstacleDataA4_BlinkerInfo_off 1

/**
 * Value table ObstacleDataA4_BlinkerInfo entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataA4_BlinkerInfo
 */
#define ObstacleDataA4_BlinkerInfo_unavailable 0

/**
 * @defgroup SIG_ObstacleDataA4_Move_in_and_Out Signal Move_in_and_Out of Message ObstacleDataA4 (0x429)
 *
 * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our
 * estimation of where it is going to be within one second.
 *
 * Contains the value table \ref ENUM_ObstacleDataA4_Move_in_and_Out.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal Move_in_and_Out configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_Move_in_and_Out and \ref GET_ObstacleDataA4_Move_in_and_Out instead.
 */
#define SIG_ObstacleDataA4_Move_in_and_Out 0, 0, 37, 3

/**
 * Signal Move_in_and_Out setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_Move_in_and_Out or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_Move_in_and_Out 0, 0, 37, 3, 0

/**
 * Get signal Move_in_and_Out from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_Move_in_and_Out(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0))

/**
 * Set signal Move_in_and_Out in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_Move_in_and_Out(buf, val)                                                                   \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
    }

/**
 * Set signal Move_in_and_Out in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_Move_in_and_Out(buf) SET_ObstacleDataA4_Move_in_and_Out(buf, 0)

/**
 * Signal Move_in_and_Out value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_Move_in_and_Out(x, fmt) ((x)*fmt)

/**
 * Signal Move_in_and_Out raw initial value.
 */
#define START_ObstacleDataA4_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw minimum value.
 */
#define MIN_ObstacleDataA4_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw maximum value.
 */
#define MAX_ObstacleDataA4_Move_in_and_Out 4

/**
 * Signal Move_in_and_Out raw offset value.
 */
#define OFF_ObstacleDataA4_Move_in_and_Out 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA4_Move_in_and_Out Value Table for Signal Move_in_and_Out in Message ObstacleDataA4
 * (0x429)
 *
 * Enum values defined for \ref SIG_ObstacleDataA4_Move_in_and_Out.
 *
 * @ingroup SIG_ObstacleDataA4_Move_in_and_Out
 */

/**
 * Value table ObstacleDataA4_Move_in_and_Out entry cut_out.
 *
 * @ingroup ENUM_ObstacleDataA4_Move_in_and_Out
 */
#define ObstacleDataA4_Move_in_and_Out_cut_out 4

/**
 * Value table ObstacleDataA4_Move_in_and_Out entry cut_in.
 *
 * @ingroup ENUM_ObstacleDataA4_Move_in_and_Out
 */
#define ObstacleDataA4_Move_in_and_Out_cut_in 3

/**
 * Value table ObstacleDataA4_Move_in_and_Out entry out_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA4_Move_in_and_Out
 */
#define ObstacleDataA4_Move_in_and_Out_out_host_lane 2

/**
 * Value table ObstacleDataA4_Move_in_and_Out entry in_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA4_Move_in_and_Out
 */
#define ObstacleDataA4_Move_in_and_Out_in_host_lane 1

/**
 * Value table ObstacleDataA4_Move_in_and_Out entry undefined.
 *
 * @ingroup ENUM_ObstacleDataA4_Move_in_and_Out
 */
#define ObstacleDataA4_Move_in_and_Out_undefined 0

/**
 * @defgroup SIG_ObstacleDataA4_ObstacleVelX Signal ObstacleVelX of Message ObstacleDataA4 (0x429)
 *
 * Relative longitudinal speed of the ego vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal ObstacleVelX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_ObstacleVelX and \ref GET_ObstacleDataA4_ObstacleVelX instead.
 */
#define SIG_ObstacleDataA4_ObstacleVelX 0, 1, 40, 12

/**
 * Signal ObstacleVelX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_ObstacleVelX or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_ObstacleVelX 0, 1, 40, 12, 0

/**
 * Get signal ObstacleVelX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_ObstacleVelX(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_ObstacleVelX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[6] &= ~(0x0f << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_ObstacleVelX(buf) SET_ObstacleDataA4_ObstacleVelX(buf, 0)

/**
 * Signal ObstacleVelX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_ObstacleVelX(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelX raw initial value.
 */
#define START_ObstacleDataA4_ObstacleVelX 0

/**
 * Signal ObstacleVelX raw minimum value.
 */
#define MIN_ObstacleDataA4_ObstacleVelX -2047

/**
 * Signal ObstacleVelX raw maximum value.
 */
#define MAX_ObstacleDataA4_ObstacleVelX 2047

/**
 * Signal ObstacleVelX raw offset value.
 */
#define OFF_ObstacleDataA4_ObstacleVelX 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA4_ObstacleType Signal ObstacleType of Message ObstacleDataA4 (0x429)
 *
 * Obstacle type
 *
 * Contains the value table \ref ENUM_ObstacleDataA4_ObstacleType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal ObstacleType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_ObstacleType and \ref GET_ObstacleDataA4_ObstacleType instead.
 */
#define SIG_ObstacleDataA4_ObstacleType 0, 0, 52, 2

/**
 * Signal ObstacleType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_ObstacleType or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_ObstacleType 0, 0, 52, 2, 0

/**
 * Get signal ObstacleType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_ObstacleType(buf) (0 | (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x03) << 0))

/**
 * Set signal ObstacleType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_ObstacleType(buf, val)                                                                      \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 4);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 4;                                                                 \
    }

/**
 * Set signal ObstacleType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_ObstacleType(buf) SET_ObstacleDataA4_ObstacleType(buf, 0)

/**
 * Signal ObstacleType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_ObstacleType(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleType raw initial value.
 */
#define START_ObstacleDataA4_ObstacleType 0

/**
 * Signal ObstacleType raw minimum value.
 */
#define MIN_ObstacleDataA4_ObstacleType 0

/**
 * Signal ObstacleType raw maximum value.
 */
#define MAX_ObstacleDataA4_ObstacleType 3

/**
 * Signal ObstacleType raw offset value.
 */
#define OFF_ObstacleDataA4_ObstacleType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA4_ObstacleType Value Table for Signal ObstacleType in Message ObstacleDataA4 (0x429)
 *
 * Enum values defined for \ref SIG_ObstacleDataA4_ObstacleType.
 *
 * @ingroup SIG_ObstacleDataA4_ObstacleType
 */

/**
 * Value table ObstacleDataA4_ObstacleType entry General.
 *
 * Object
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleType
 */
#define ObstacleDataA4_ObstacleType_General 3

/**
 * Value table ObstacleDataA4_ObstacleType entry Cyclist.
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleType
 */
#define ObstacleDataA4_ObstacleType_Cyclist 2

/**
 * Value table ObstacleDataA4_ObstacleType entry Pedestrian.
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleType
 */
#define ObstacleDataA4_ObstacleType_Pedestrian 1

/**
 * Value table ObstacleDataA4_ObstacleType entry Vehicle.
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleType
 */
#define ObstacleDataA4_ObstacleType_Vehicle 0

/**
 * @defgroup SIG_ObstacleDataA4_VehicleSubType Signal VehicleSubType of Message ObstacleDataA4 (0x429)
 *
 * Vehicle sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataA4_VehicleSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal VehicleSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_VehicleSubType and \ref GET_ObstacleDataA4_VehicleSubType instead.
 */
#define SIG_ObstacleDataA4_VehicleSubType 0, 0, 54, 4

/**
 * Signal VehicleSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_VehicleSubType or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_VehicleSubType 0, 0, 54, 4, 0

/**
 * Get signal VehicleSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_VehicleSubType(buf)                                                                         \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x03) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 2))

/**
 * Set signal VehicleSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_VehicleSubType(buf, val)                                                                    \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 6);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[7] &= ~(0x03 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 2) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal VehicleSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_VehicleSubType(buf) SET_ObstacleDataA4_VehicleSubType(buf, 0)

/**
 * Signal VehicleSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_VehicleSubType(x, fmt) ((x)*fmt)

/**
 * Signal VehicleSubType raw initial value.
 */
#define START_ObstacleDataA4_VehicleSubType 0

/**
 * Signal VehicleSubType raw minimum value.
 */
#define MIN_ObstacleDataA4_VehicleSubType 0

/**
 * Signal VehicleSubType raw maximum value.
 */
#define MAX_ObstacleDataA4_VehicleSubType 15

/**
 * Signal VehicleSubType raw offset value.
 */
#define OFF_ObstacleDataA4_VehicleSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA4_VehicleSubType Value Table for Signal VehicleSubType in Message ObstacleDataA4 (0x429)
 *
 * Enum values defined for \ref SIG_ObstacleDataA4_VehicleSubType.
 *
 * @ingroup SIG_ObstacleDataA4_VehicleSubType
 */

/**
 * Value table ObstacleDataA4_VehicleSubType entry Tiny_car.
 *
 * @ingroup ENUM_ObstacleDataA4_VehicleSubType
 */
#define ObstacleDataA4_VehicleSubType_Tiny_car 5

/**
 * Value table ObstacleDataA4_VehicleSubType entry Special_vehicle.
 *
 * @ingroup ENUM_ObstacleDataA4_VehicleSubType
 */
#define ObstacleDataA4_VehicleSubType_Special_vehicle 4

/**
 * Value table ObstacleDataA4_VehicleSubType entry Motors.
 *
 * @ingroup ENUM_ObstacleDataA4_VehicleSubType
 */
#define ObstacleDataA4_VehicleSubType_Motors 3

/**
 * Value table ObstacleDataA4_VehicleSubType entry Trucks.
 *
 * @ingroup ENUM_ObstacleDataA4_VehicleSubType
 */
#define ObstacleDataA4_VehicleSubType_Trucks 2

/**
 * Value table ObstacleDataA4_VehicleSubType entry Small_Medium_Car.
 *
 * @ingroup ENUM_ObstacleDataA4_VehicleSubType
 */
#define ObstacleDataA4_VehicleSubType_Small_Medium_Car 1

/**
 * Value table ObstacleDataA4_VehicleSubType entry Bus.
 *
 * @ingroup ENUM_ObstacleDataA4_VehicleSubType
 */
#define ObstacleDataA4_VehicleSubType_Bus 0

/**
 * @defgroup SIG_ObstacleDataA4_ObstacleStatus Signal ObstacleStatus of Message ObstacleDataA4 (0x429)
 *
 * Reseved. Not Implemented
 *
 * Contains the value table \ref ENUM_ObstacleDataA4_ObstacleStatus.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal ObstacleStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_ObstacleStatus and \ref GET_ObstacleDataA4_ObstacleStatus instead.
 */
#define SIG_ObstacleDataA4_ObstacleStatus 0, 0, 58, 3

/**
 * Signal ObstacleStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_ObstacleStatus or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_ObstacleStatus 0, 0, 58, 3, 0

/**
 * Get signal ObstacleStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_ObstacleStatus(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0))

/**
 * Set signal ObstacleStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_ObstacleStatus(buf, val)                                                                    \
    {                                                                                                                  \
        buf[7] &= ~(0x07 << 2);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal ObstacleStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_ObstacleStatus(buf) SET_ObstacleDataA4_ObstacleStatus(buf, 0)

/**
 * Signal ObstacleStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_ObstacleStatus(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleStatus raw initial value.
 */
#define START_ObstacleDataA4_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw minimum value.
 */
#define MIN_ObstacleDataA4_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw maximum value.
 */
#define MAX_ObstacleDataA4_ObstacleStatus 7

/**
 * Signal ObstacleStatus raw offset value.
 */
#define OFF_ObstacleDataA4_ObstacleStatus 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA4_ObstacleStatus Value Table for Signal ObstacleStatus in Message ObstacleDataA4 (0x429)
 *
 * Enum values defined for \ref SIG_ObstacleDataA4_ObstacleStatus.
 *
 * @ingroup SIG_ObstacleDataA4_ObstacleStatus
 */

/**
 * Value table ObstacleDataA4_ObstacleStatus entry Unused.
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleStatus
 */
#define ObstacleDataA4_ObstacleStatus_Unused 6

/**
 * Value table ObstacleDataA4_ObstacleStatus entry Parked.
 *
 * never moved, BckLightsOff
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleStatus
 */
#define ObstacleDataA4_ObstacleStatus_Parked 5

/**
 * Value table ObstacleDataA4_ObstacleStatus entry Oncoming.
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleStatus
 */
#define ObstacleDataA4_ObstacleStatus_Oncoming 4

/**
 * Value table ObstacleDataA4_ObstacleStatus entry moving.
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleStatus
 */
#define ObstacleDataA4_ObstacleStatus_moving 3

/**
 * Value table ObstacleDataA4_ObstacleStatus entry stopped.
 *
 * (movable)
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleStatus
 */
#define ObstacleDataA4_ObstacleStatus_stopped 2

/**
 * Value table ObstacleDataA4_ObstacleStatus entry standing.
 *
 * neverMoved bckLightsOn
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleStatus
 */
#define ObstacleDataA4_ObstacleStatus_standing 1

/**
 * Value table ObstacleDataA4_ObstacleStatus entry not.
 *
 * defined
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleStatus
 */
#define ObstacleDataA4_ObstacleStatus_not 0

/**
 * @defgroup SIG_ObstacleDataA4_ObstacleBrakeLights Signal ObstacleBrakeLights of Message ObstacleDataA4 (0x429)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA4_ObstacleBrakeLights.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal ObstacleBrakeLights configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_ObstacleBrakeLights and \ref GET_ObstacleDataA4_ObstacleBrakeLights instead.
 */
#define SIG_ObstacleDataA4_ObstacleBrakeLights 0, 0, 61, 1

/**
 * Signal ObstacleBrakeLights setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_ObstacleBrakeLights or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_ObstacleBrakeLights 0, 0, 61, 1, 0

/**
 * Get signal ObstacleBrakeLights from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_ObstacleBrakeLights(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0))

/**
 * Set signal ObstacleBrakeLights in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_ObstacleBrakeLights(buf, val)                                                               \
    {                                                                                                                  \
        buf[7] &= ~(0x01 << 5);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal ObstacleBrakeLights in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_ObstacleBrakeLights(buf) SET_ObstacleDataA4_ObstacleBrakeLights(buf, 0)

/**
 * Signal ObstacleBrakeLights value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_ObstacleBrakeLights(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleBrakeLights raw initial value.
 */
#define START_ObstacleDataA4_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw minimum value.
 */
#define MIN_ObstacleDataA4_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw maximum value.
 */
#define MAX_ObstacleDataA4_ObstacleBrakeLights 1

/**
 * Signal ObstacleBrakeLights raw offset value.
 */
#define OFF_ObstacleDataA4_ObstacleBrakeLights 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA4_ObstacleBrakeLights Value Table for Signal ObstacleBrakeLights in Message
 * ObstacleDataA4 (0x429)
 *
 * Enum values defined for \ref SIG_ObstacleDataA4_ObstacleBrakeLights.
 *
 * @ingroup SIG_ObstacleDataA4_ObstacleBrakeLights
 */

/**
 * Value table ObstacleDataA4_ObstacleBrakeLights entry object_s.
 *
 * object's brake lights are on
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleBrakeLights
 */
#define ObstacleDataA4_ObstacleBrakeLights_object_s 1

/**
 * Value table ObstacleDataA4_ObstacleBrakeLights entry object_s_0.
 *
 * object's brake lights are off
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleBrakeLights
 */
#define ObstacleDataA4_ObstacleBrakeLights_object_s_0 0

/**
 * @defgroup SIG_ObstacleDataA4_ObstacleValid Signal ObstacleValid of Message ObstacleDataA4 (0x429)
 *
 * Obstacle Valid info
 *
 * Contains the value table \ref ENUM_ObstacleDataA4_ObstacleValid.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA4
 * @{
 */

/**
 * Signal ObstacleValid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA4_ObstacleValid and \ref GET_ObstacleDataA4_ObstacleValid instead.
 */
#define SIG_ObstacleDataA4_ObstacleValid 0, 0, 62, 2

/**
 * Signal ObstacleValid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA4_ObstacleValid or \ref INIT_ObstacleDataA4 instead.
 */
#define SETUP_ObstacleDataA4_ObstacleValid 0, 0, 62, 2, 0

/**
 * Get signal ObstacleValid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA4_ObstacleValid(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0))

/**
 * Set signal ObstacleValid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA4_ObstacleValid(buf, val)                                                                     \
    {                                                                                                                  \
        buf[7] &= ~(0x03 << 6);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
    }

/**
 * Set signal ObstacleValid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA4_ObstacleValid(buf) SET_ObstacleDataA4_ObstacleValid(buf, 0)

/**
 * Signal ObstacleValid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA4_ObstacleValid(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleValid raw initial value.
 */
#define START_ObstacleDataA4_ObstacleValid 0

/**
 * Signal ObstacleValid raw minimum value.
 */
#define MIN_ObstacleDataA4_ObstacleValid 0

/**
 * Signal ObstacleValid raw maximum value.
 */
#define MAX_ObstacleDataA4_ObstacleValid 2

/**
 * Signal ObstacleValid raw offset value.
 */
#define OFF_ObstacleDataA4_ObstacleValid 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA4_ObstacleValid Value Table for Signal ObstacleValid in Message ObstacleDataA4 (0x429)
 *
 * Enum values defined for \ref SIG_ObstacleDataA4_ObstacleValid.
 *
 * @ingroup SIG_ObstacleDataA4_ObstacleValid
 */

/**
 * Value table ObstacleDataA4_ObstacleValid entry older.
 *
 * valid
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleValid
 */
#define ObstacleDataA4_ObstacleValid_older 2

/**
 * Value table ObstacleDataA4_ObstacleValid entry new.
 *
 * valid (detected this frame)
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleValid
 */
#define ObstacleDataA4_ObstacleValid_new 1

/**
 * Value table ObstacleDataA4_ObstacleValid entry invalid.
 *
 * Obstacle(default value)
 *
 * @ingroup ENUM_ObstacleDataA4_ObstacleValid
 */
#define ObstacleDataA4_ObstacleValid_invalid 0

/**
 * @defgroup SIG_ObstacleDataA3_ObstacleID Signal ObstacleID of Message ObstacleDataA3 (0x426)
 *
 * New obstacles are given the last used free ID
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal ObstacleID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_ObstacleID and \ref GET_ObstacleDataA3_ObstacleID instead.
 */
#define SIG_ObstacleDataA3_ObstacleID 0, 0, 0, 8

/**
 * Signal ObstacleID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_ObstacleID or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_ObstacleID 0, 0, 0, 8, 0

/**
 * Get signal ObstacleID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_ObstacleID(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_ObstacleID(buf, val)                                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_ObstacleID(buf) SET_ObstacleDataA3_ObstacleID(buf, 0)

/**
 * Signal ObstacleID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_ObstacleID(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleID raw initial value.
 */
#define START_ObstacleDataA3_ObstacleID 0

/**
 * Signal ObstacleID raw minimum value.
 */
#define MIN_ObstacleDataA3_ObstacleID 0

/**
 * Signal ObstacleID raw maximum value.
 */
#define MAX_ObstacleDataA3_ObstacleID 63

/**
 * Signal ObstacleID raw offset value.
 */
#define OFF_ObstacleDataA3_ObstacleID 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA3_ObstaclePosX Signal ObstaclePosX of Message ObstacleDataA3 (0x426)
 *
 * longitudinal distance to the middle of the RL and RR corners
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal ObstaclePosX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_ObstaclePosX and \ref GET_ObstacleDataA3_ObstaclePosX instead.
 */
#define SIG_ObstacleDataA3_ObstaclePosX 0, 0, 8, 13

/**
 * Signal ObstaclePosX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_ObstaclePosX or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_ObstaclePosX 0, 0, 8, 13, 0

/**
 * Get signal ObstaclePosX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_ObstaclePosX(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 8))

/**
 * Set signal ObstaclePosX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_ObstaclePosX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[2] &= ~(0x1f << 0);                                                                                        \
        buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0;                                                       \
    }

/**
 * Set signal ObstaclePosX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_ObstaclePosX(buf) SET_ObstacleDataA3_ObstaclePosX(buf, 0)

/**
 * Signal ObstaclePosX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_ObstaclePosX(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosX raw initial value.
 */
#define START_ObstacleDataA3_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw minimum value.
 */
#define MIN_ObstacleDataA3_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw maximum value.
 */
#define MAX_ObstacleDataA3_ObstaclePosX 8176

/**
 * Signal ObstaclePosX raw offset value.
 */
#define OFF_ObstacleDataA3_ObstaclePosX -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA3_ObstaclePosY Signal ObstaclePosY of Message ObstacleDataA3 (0x426)
 *
 * the lateral distance to the middle of the RL and RR corners, positive to the left
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal ObstaclePosY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_ObstaclePosY and \ref GET_ObstacleDataA3_ObstaclePosY instead.
 */
#define SIG_ObstacleDataA3_ObstaclePosY 0, 0, 21, 13

/**
 * Signal ObstaclePosY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_ObstaclePosY or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_ObstaclePosY 0, 0, 21, 13, 0

/**
 * Get signal ObstaclePosY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_ObstaclePosY(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) |       \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 11))

/**
 * Set signal ObstaclePosY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_ObstaclePosY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0x07 << 5);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0;                                                       \
        buf[4] &= ~(0x03 << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x03) << 0;                                                      \
    }

/**
 * Set signal ObstaclePosY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_ObstaclePosY(buf) SET_ObstacleDataA3_ObstaclePosY(buf, 0)

/**
 * Signal ObstaclePosY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_ObstaclePosY(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosY raw initial value.
 */
#define START_ObstacleDataA3_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw minimum value.
 */
#define MIN_ObstacleDataA3_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw maximum value.
 */
#define MAX_ObstacleDataA3_ObstaclePosY 8176

/**
 * Signal ObstaclePosY raw offset value.
 */
#define OFF_ObstacleDataA3_ObstaclePosY -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA3_BlinkerInfo Signal BlinkerInfo of Message ObstacleDataA3 (0x426)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA3_BlinkerInfo.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal BlinkerInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_BlinkerInfo and \ref GET_ObstacleDataA3_BlinkerInfo instead.
 */
#define SIG_ObstacleDataA3_BlinkerInfo 0, 0, 34, 3

/**
 * Signal BlinkerInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_BlinkerInfo or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_BlinkerInfo 0, 0, 34, 3, 0

/**
 * Get signal BlinkerInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_BlinkerInfo(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x07) << 0))

/**
 * Set signal BlinkerInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_BlinkerInfo(buf, val)                                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 2);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal BlinkerInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_BlinkerInfo(buf) SET_ObstacleDataA3_BlinkerInfo(buf, 0)

/**
 * Signal BlinkerInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_BlinkerInfo(x, fmt) ((x)*fmt)

/**
 * Signal BlinkerInfo raw initial value.
 */
#define START_ObstacleDataA3_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw minimum value.
 */
#define MIN_ObstacleDataA3_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw maximum value.
 */
#define MAX_ObstacleDataA3_BlinkerInfo 4

/**
 * Signal BlinkerInfo raw offset value.
 */
#define OFF_ObstacleDataA3_BlinkerInfo 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA3_BlinkerInfo Value Table for Signal BlinkerInfo in Message ObstacleDataA3 (0x426)
 *
 * Enum values defined for \ref SIG_ObstacleDataA3_BlinkerInfo.
 *
 * @ingroup SIG_ObstacleDataA3_BlinkerInfo
 */

/**
 * Value table ObstacleDataA3_BlinkerInfo entry both.
 *
 * @ingroup ENUM_ObstacleDataA3_BlinkerInfo
 */
#define ObstacleDataA3_BlinkerInfo_both 4

/**
 * Value table ObstacleDataA3_BlinkerInfo entry right.
 *
 * @ingroup ENUM_ObstacleDataA3_BlinkerInfo
 */
#define ObstacleDataA3_BlinkerInfo_right 3

/**
 * Value table ObstacleDataA3_BlinkerInfo entry left.
 *
 * @ingroup ENUM_ObstacleDataA3_BlinkerInfo
 */
#define ObstacleDataA3_BlinkerInfo_left 2

/**
 * Value table ObstacleDataA3_BlinkerInfo entry off.
 *
 * @ingroup ENUM_ObstacleDataA3_BlinkerInfo
 */
#define ObstacleDataA3_BlinkerInfo_off 1

/**
 * Value table ObstacleDataA3_BlinkerInfo entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataA3_BlinkerInfo
 */
#define ObstacleDataA3_BlinkerInfo_unavailable 0

/**
 * @defgroup SIG_ObstacleDataA3_Move_in_and_Out Signal Move_in_and_Out of Message ObstacleDataA3 (0x426)
 *
 * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our
 * estimation of where it is going to be within one second.
 *
 * Contains the value table \ref ENUM_ObstacleDataA3_Move_in_and_Out.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal Move_in_and_Out configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_Move_in_and_Out and \ref GET_ObstacleDataA3_Move_in_and_Out instead.
 */
#define SIG_ObstacleDataA3_Move_in_and_Out 0, 0, 37, 3

/**
 * Signal Move_in_and_Out setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_Move_in_and_Out or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_Move_in_and_Out 0, 0, 37, 3, 0

/**
 * Get signal Move_in_and_Out from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_Move_in_and_Out(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0))

/**
 * Set signal Move_in_and_Out in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_Move_in_and_Out(buf, val)                                                                   \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
    }

/**
 * Set signal Move_in_and_Out in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_Move_in_and_Out(buf) SET_ObstacleDataA3_Move_in_and_Out(buf, 0)

/**
 * Signal Move_in_and_Out value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_Move_in_and_Out(x, fmt) ((x)*fmt)

/**
 * Signal Move_in_and_Out raw initial value.
 */
#define START_ObstacleDataA3_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw minimum value.
 */
#define MIN_ObstacleDataA3_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw maximum value.
 */
#define MAX_ObstacleDataA3_Move_in_and_Out 4

/**
 * Signal Move_in_and_Out raw offset value.
 */
#define OFF_ObstacleDataA3_Move_in_and_Out 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA3_Move_in_and_Out Value Table for Signal Move_in_and_Out in Message ObstacleDataA3
 * (0x426)
 *
 * Enum values defined for \ref SIG_ObstacleDataA3_Move_in_and_Out.
 *
 * @ingroup SIG_ObstacleDataA3_Move_in_and_Out
 */

/**
 * Value table ObstacleDataA3_Move_in_and_Out entry cut_out.
 *
 * @ingroup ENUM_ObstacleDataA3_Move_in_and_Out
 */
#define ObstacleDataA3_Move_in_and_Out_cut_out 4

/**
 * Value table ObstacleDataA3_Move_in_and_Out entry cut_in.
 *
 * @ingroup ENUM_ObstacleDataA3_Move_in_and_Out
 */
#define ObstacleDataA3_Move_in_and_Out_cut_in 3

/**
 * Value table ObstacleDataA3_Move_in_and_Out entry out_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA3_Move_in_and_Out
 */
#define ObstacleDataA3_Move_in_and_Out_out_host_lane 2

/**
 * Value table ObstacleDataA3_Move_in_and_Out entry in_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA3_Move_in_and_Out
 */
#define ObstacleDataA3_Move_in_and_Out_in_host_lane 1

/**
 * Value table ObstacleDataA3_Move_in_and_Out entry undefined.
 *
 * @ingroup ENUM_ObstacleDataA3_Move_in_and_Out
 */
#define ObstacleDataA3_Move_in_and_Out_undefined 0

/**
 * @defgroup SIG_ObstacleDataA3_ObstacleVelX Signal ObstacleVelX of Message ObstacleDataA3 (0x426)
 *
 * Relative longitudinal speed of the ego vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal ObstacleVelX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_ObstacleVelX and \ref GET_ObstacleDataA3_ObstacleVelX instead.
 */
#define SIG_ObstacleDataA3_ObstacleVelX 0, 1, 40, 12

/**
 * Signal ObstacleVelX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_ObstacleVelX or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_ObstacleVelX 0, 1, 40, 12, 0

/**
 * Get signal ObstacleVelX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_ObstacleVelX(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_ObstacleVelX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[6] &= ~(0x0f << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_ObstacleVelX(buf) SET_ObstacleDataA3_ObstacleVelX(buf, 0)

/**
 * Signal ObstacleVelX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_ObstacleVelX(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelX raw initial value.
 */
#define START_ObstacleDataA3_ObstacleVelX 0

/**
 * Signal ObstacleVelX raw minimum value.
 */
#define MIN_ObstacleDataA3_ObstacleVelX -2047

/**
 * Signal ObstacleVelX raw maximum value.
 */
#define MAX_ObstacleDataA3_ObstacleVelX 2047

/**
 * Signal ObstacleVelX raw offset value.
 */
#define OFF_ObstacleDataA3_ObstacleVelX 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA3_ObstacleType Signal ObstacleType of Message ObstacleDataA3 (0x426)
 *
 * Obstacle type
 *
 * Contains the value table \ref ENUM_ObstacleDataA3_ObstacleType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal ObstacleType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_ObstacleType and \ref GET_ObstacleDataA3_ObstacleType instead.
 */
#define SIG_ObstacleDataA3_ObstacleType 0, 0, 52, 2

/**
 * Signal ObstacleType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_ObstacleType or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_ObstacleType 0, 0, 52, 2, 0

/**
 * Get signal ObstacleType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_ObstacleType(buf) (0 | (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x03) << 0))

/**
 * Set signal ObstacleType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_ObstacleType(buf, val)                                                                      \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 4);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 4;                                                                 \
    }

/**
 * Set signal ObstacleType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_ObstacleType(buf) SET_ObstacleDataA3_ObstacleType(buf, 0)

/**
 * Signal ObstacleType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_ObstacleType(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleType raw initial value.
 */
#define START_ObstacleDataA3_ObstacleType 0

/**
 * Signal ObstacleType raw minimum value.
 */
#define MIN_ObstacleDataA3_ObstacleType 0

/**
 * Signal ObstacleType raw maximum value.
 */
#define MAX_ObstacleDataA3_ObstacleType 3

/**
 * Signal ObstacleType raw offset value.
 */
#define OFF_ObstacleDataA3_ObstacleType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA3_ObstacleType Value Table for Signal ObstacleType in Message ObstacleDataA3 (0x426)
 *
 * Enum values defined for \ref SIG_ObstacleDataA3_ObstacleType.
 *
 * @ingroup SIG_ObstacleDataA3_ObstacleType
 */

/**
 * Value table ObstacleDataA3_ObstacleType entry General.
 *
 * Object
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleType
 */
#define ObstacleDataA3_ObstacleType_General 3

/**
 * Value table ObstacleDataA3_ObstacleType entry Cyclist.
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleType
 */
#define ObstacleDataA3_ObstacleType_Cyclist 2

/**
 * Value table ObstacleDataA3_ObstacleType entry Pedestrian.
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleType
 */
#define ObstacleDataA3_ObstacleType_Pedestrian 1

/**
 * Value table ObstacleDataA3_ObstacleType entry Vehicle.
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleType
 */
#define ObstacleDataA3_ObstacleType_Vehicle 0

/**
 * @defgroup SIG_ObstacleDataA3_VehicleSubType Signal VehicleSubType of Message ObstacleDataA3 (0x426)
 *
 * Vehicle sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataA3_VehicleSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal VehicleSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_VehicleSubType and \ref GET_ObstacleDataA3_VehicleSubType instead.
 */
#define SIG_ObstacleDataA3_VehicleSubType 0, 0, 54, 4

/**
 * Signal VehicleSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_VehicleSubType or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_VehicleSubType 0, 0, 54, 4, 0

/**
 * Get signal VehicleSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_VehicleSubType(buf)                                                                         \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x03) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 2))

/**
 * Set signal VehicleSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_VehicleSubType(buf, val)                                                                    \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 6);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[7] &= ~(0x03 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 2) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal VehicleSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_VehicleSubType(buf) SET_ObstacleDataA3_VehicleSubType(buf, 0)

/**
 * Signal VehicleSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_VehicleSubType(x, fmt) ((x)*fmt)

/**
 * Signal VehicleSubType raw initial value.
 */
#define START_ObstacleDataA3_VehicleSubType 0

/**
 * Signal VehicleSubType raw minimum value.
 */
#define MIN_ObstacleDataA3_VehicleSubType 0

/**
 * Signal VehicleSubType raw maximum value.
 */
#define MAX_ObstacleDataA3_VehicleSubType 15

/**
 * Signal VehicleSubType raw offset value.
 */
#define OFF_ObstacleDataA3_VehicleSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA3_VehicleSubType Value Table for Signal VehicleSubType in Message ObstacleDataA3 (0x426)
 *
 * Enum values defined for \ref SIG_ObstacleDataA3_VehicleSubType.
 *
 * @ingroup SIG_ObstacleDataA3_VehicleSubType
 */

/**
 * Value table ObstacleDataA3_VehicleSubType entry Tiny_car.
 *
 * @ingroup ENUM_ObstacleDataA3_VehicleSubType
 */
#define ObstacleDataA3_VehicleSubType_Tiny_car 5

/**
 * Value table ObstacleDataA3_VehicleSubType entry Special_vehicle.
 *
 * @ingroup ENUM_ObstacleDataA3_VehicleSubType
 */
#define ObstacleDataA3_VehicleSubType_Special_vehicle 4

/**
 * Value table ObstacleDataA3_VehicleSubType entry Motors.
 *
 * @ingroup ENUM_ObstacleDataA3_VehicleSubType
 */
#define ObstacleDataA3_VehicleSubType_Motors 3

/**
 * Value table ObstacleDataA3_VehicleSubType entry Trucks.
 *
 * @ingroup ENUM_ObstacleDataA3_VehicleSubType
 */
#define ObstacleDataA3_VehicleSubType_Trucks 2

/**
 * Value table ObstacleDataA3_VehicleSubType entry Small_Medium_Car.
 *
 * @ingroup ENUM_ObstacleDataA3_VehicleSubType
 */
#define ObstacleDataA3_VehicleSubType_Small_Medium_Car 1

/**
 * Value table ObstacleDataA3_VehicleSubType entry Bus.
 *
 * @ingroup ENUM_ObstacleDataA3_VehicleSubType
 */
#define ObstacleDataA3_VehicleSubType_Bus 0

/**
 * @defgroup SIG_ObstacleDataA3_ObstacleStatus Signal ObstacleStatus of Message ObstacleDataA3 (0x426)
 *
 * Reseved. Not Implemented
 *
 * Contains the value table \ref ENUM_ObstacleDataA3_ObstacleStatus.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal ObstacleStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_ObstacleStatus and \ref GET_ObstacleDataA3_ObstacleStatus instead.
 */
#define SIG_ObstacleDataA3_ObstacleStatus 0, 0, 58, 3

/**
 * Signal ObstacleStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_ObstacleStatus or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_ObstacleStatus 0, 0, 58, 3, 0

/**
 * Get signal ObstacleStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_ObstacleStatus(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0))

/**
 * Set signal ObstacleStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_ObstacleStatus(buf, val)                                                                    \
    {                                                                                                                  \
        buf[7] &= ~(0x07 << 2);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal ObstacleStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_ObstacleStatus(buf) SET_ObstacleDataA3_ObstacleStatus(buf, 0)

/**
 * Signal ObstacleStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_ObstacleStatus(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleStatus raw initial value.
 */
#define START_ObstacleDataA3_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw minimum value.
 */
#define MIN_ObstacleDataA3_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw maximum value.
 */
#define MAX_ObstacleDataA3_ObstacleStatus 7

/**
 * Signal ObstacleStatus raw offset value.
 */
#define OFF_ObstacleDataA3_ObstacleStatus 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA3_ObstacleStatus Value Table for Signal ObstacleStatus in Message ObstacleDataA3 (0x426)
 *
 * Enum values defined for \ref SIG_ObstacleDataA3_ObstacleStatus.
 *
 * @ingroup SIG_ObstacleDataA3_ObstacleStatus
 */

/**
 * Value table ObstacleDataA3_ObstacleStatus entry Unused.
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleStatus
 */
#define ObstacleDataA3_ObstacleStatus_Unused 6

/**
 * Value table ObstacleDataA3_ObstacleStatus entry Parked.
 *
 * never moved, BckLightsOff
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleStatus
 */
#define ObstacleDataA3_ObstacleStatus_Parked 5

/**
 * Value table ObstacleDataA3_ObstacleStatus entry Oncoming.
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleStatus
 */
#define ObstacleDataA3_ObstacleStatus_Oncoming 4

/**
 * Value table ObstacleDataA3_ObstacleStatus entry moving.
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleStatus
 */
#define ObstacleDataA3_ObstacleStatus_moving 3

/**
 * Value table ObstacleDataA3_ObstacleStatus entry stopped.
 *
 * (movable)
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleStatus
 */
#define ObstacleDataA3_ObstacleStatus_stopped 2

/**
 * Value table ObstacleDataA3_ObstacleStatus entry standing.
 *
 * neverMoved bckLightsOn
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleStatus
 */
#define ObstacleDataA3_ObstacleStatus_standing 1

/**
 * Value table ObstacleDataA3_ObstacleStatus entry not.
 *
 * defined
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleStatus
 */
#define ObstacleDataA3_ObstacleStatus_not 0

/**
 * @defgroup SIG_ObstacleDataA3_ObstacleBrakeLights Signal ObstacleBrakeLights of Message ObstacleDataA3 (0x426)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA3_ObstacleBrakeLights.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal ObstacleBrakeLights configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_ObstacleBrakeLights and \ref GET_ObstacleDataA3_ObstacleBrakeLights instead.
 */
#define SIG_ObstacleDataA3_ObstacleBrakeLights 0, 0, 61, 1

/**
 * Signal ObstacleBrakeLights setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_ObstacleBrakeLights or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_ObstacleBrakeLights 0, 0, 61, 1, 0

/**
 * Get signal ObstacleBrakeLights from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_ObstacleBrakeLights(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0))

/**
 * Set signal ObstacleBrakeLights in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_ObstacleBrakeLights(buf, val)                                                               \
    {                                                                                                                  \
        buf[7] &= ~(0x01 << 5);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal ObstacleBrakeLights in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_ObstacleBrakeLights(buf) SET_ObstacleDataA3_ObstacleBrakeLights(buf, 0)

/**
 * Signal ObstacleBrakeLights value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_ObstacleBrakeLights(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleBrakeLights raw initial value.
 */
#define START_ObstacleDataA3_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw minimum value.
 */
#define MIN_ObstacleDataA3_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw maximum value.
 */
#define MAX_ObstacleDataA3_ObstacleBrakeLights 1

/**
 * Signal ObstacleBrakeLights raw offset value.
 */
#define OFF_ObstacleDataA3_ObstacleBrakeLights 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA3_ObstacleBrakeLights Value Table for Signal ObstacleBrakeLights in Message
 * ObstacleDataA3 (0x426)
 *
 * Enum values defined for \ref SIG_ObstacleDataA3_ObstacleBrakeLights.
 *
 * @ingroup SIG_ObstacleDataA3_ObstacleBrakeLights
 */

/**
 * Value table ObstacleDataA3_ObstacleBrakeLights entry object_s.
 *
 * object's brake lights are on
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleBrakeLights
 */
#define ObstacleDataA3_ObstacleBrakeLights_object_s 1

/**
 * Value table ObstacleDataA3_ObstacleBrakeLights entry object_s_0.
 *
 * object's brake lights are off
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleBrakeLights
 */
#define ObstacleDataA3_ObstacleBrakeLights_object_s_0 0

/**
 * @defgroup SIG_ObstacleDataA3_ObstacleValid Signal ObstacleValid of Message ObstacleDataA3 (0x426)
 *
 * Obstacle Valid info
 *
 * Contains the value table \ref ENUM_ObstacleDataA3_ObstacleValid.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA3
 * @{
 */

/**
 * Signal ObstacleValid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA3_ObstacleValid and \ref GET_ObstacleDataA3_ObstacleValid instead.
 */
#define SIG_ObstacleDataA3_ObstacleValid 0, 0, 62, 2

/**
 * Signal ObstacleValid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA3_ObstacleValid or \ref INIT_ObstacleDataA3 instead.
 */
#define SETUP_ObstacleDataA3_ObstacleValid 0, 0, 62, 2, 0

/**
 * Get signal ObstacleValid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA3_ObstacleValid(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0))

/**
 * Set signal ObstacleValid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA3_ObstacleValid(buf, val)                                                                     \
    {                                                                                                                  \
        buf[7] &= ~(0x03 << 6);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
    }

/**
 * Set signal ObstacleValid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA3_ObstacleValid(buf) SET_ObstacleDataA3_ObstacleValid(buf, 0)

/**
 * Signal ObstacleValid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA3_ObstacleValid(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleValid raw initial value.
 */
#define START_ObstacleDataA3_ObstacleValid 0

/**
 * Signal ObstacleValid raw minimum value.
 */
#define MIN_ObstacleDataA3_ObstacleValid 0

/**
 * Signal ObstacleValid raw maximum value.
 */
#define MAX_ObstacleDataA3_ObstacleValid 2

/**
 * Signal ObstacleValid raw offset value.
 */
#define OFF_ObstacleDataA3_ObstacleValid 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA3_ObstacleValid Value Table for Signal ObstacleValid in Message ObstacleDataA3 (0x426)
 *
 * Enum values defined for \ref SIG_ObstacleDataA3_ObstacleValid.
 *
 * @ingroup SIG_ObstacleDataA3_ObstacleValid
 */

/**
 * Value table ObstacleDataA3_ObstacleValid entry older.
 *
 * valid
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleValid
 */
#define ObstacleDataA3_ObstacleValid_older 2

/**
 * Value table ObstacleDataA3_ObstacleValid entry new.
 *
 * valid (detected this frame)
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleValid
 */
#define ObstacleDataA3_ObstacleValid_new 1

/**
 * Value table ObstacleDataA3_ObstacleValid entry invalid.
 *
 * Obstacle(default value)
 *
 * @ingroup ENUM_ObstacleDataA3_ObstacleValid
 */
#define ObstacleDataA3_ObstacleValid_invalid 0

/**
 * @defgroup SIG_ObstacleDataA2_ObstacleID Signal ObstacleID of Message ObstacleDataA2 (0x423)
 *
 * New obstacles are given the last used free ID
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal ObstacleID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_ObstacleID and \ref GET_ObstacleDataA2_ObstacleID instead.
 */
#define SIG_ObstacleDataA2_ObstacleID 0, 0, 0, 8

/**
 * Signal ObstacleID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_ObstacleID or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_ObstacleID 0, 0, 0, 8, 0

/**
 * Get signal ObstacleID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_ObstacleID(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_ObstacleID(buf, val)                                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_ObstacleID(buf) SET_ObstacleDataA2_ObstacleID(buf, 0)

/**
 * Signal ObstacleID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_ObstacleID(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleID raw initial value.
 */
#define START_ObstacleDataA2_ObstacleID 0

/**
 * Signal ObstacleID raw minimum value.
 */
#define MIN_ObstacleDataA2_ObstacleID 0

/**
 * Signal ObstacleID raw maximum value.
 */
#define MAX_ObstacleDataA2_ObstacleID 63

/**
 * Signal ObstacleID raw offset value.
 */
#define OFF_ObstacleDataA2_ObstacleID 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA2_ObstaclePosX Signal ObstaclePosX of Message ObstacleDataA2 (0x423)
 *
 * longitudinal distance to the middle of the RL and RR corners
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal ObstaclePosX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_ObstaclePosX and \ref GET_ObstacleDataA2_ObstaclePosX instead.
 */
#define SIG_ObstacleDataA2_ObstaclePosX 0, 0, 8, 13

/**
 * Signal ObstaclePosX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_ObstaclePosX or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_ObstaclePosX 0, 0, 8, 13, 0

/**
 * Get signal ObstaclePosX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_ObstaclePosX(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 8))

/**
 * Set signal ObstaclePosX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_ObstaclePosX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[2] &= ~(0x1f << 0);                                                                                        \
        buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0;                                                       \
    }

/**
 * Set signal ObstaclePosX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_ObstaclePosX(buf) SET_ObstacleDataA2_ObstaclePosX(buf, 0)

/**
 * Signal ObstaclePosX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_ObstaclePosX(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosX raw initial value.
 */
#define START_ObstacleDataA2_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw minimum value.
 */
#define MIN_ObstacleDataA2_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw maximum value.
 */
#define MAX_ObstacleDataA2_ObstaclePosX 8176

/**
 * Signal ObstaclePosX raw offset value.
 */
#define OFF_ObstacleDataA2_ObstaclePosX -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA2_ObstaclePosY Signal ObstaclePosY of Message ObstacleDataA2 (0x423)
 *
 * the lateral distance to the middle of the RL and RR corners, positive to the left
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal ObstaclePosY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_ObstaclePosY and \ref GET_ObstacleDataA2_ObstaclePosY instead.
 */
#define SIG_ObstacleDataA2_ObstaclePosY 0, 0, 21, 13

/**
 * Signal ObstaclePosY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_ObstaclePosY or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_ObstaclePosY 0, 0, 21, 13, 0

/**
 * Get signal ObstaclePosY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_ObstaclePosY(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) |       \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 11))

/**
 * Set signal ObstaclePosY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_ObstaclePosY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0x07 << 5);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0;                                                       \
        buf[4] &= ~(0x03 << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x03) << 0;                                                      \
    }

/**
 * Set signal ObstaclePosY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_ObstaclePosY(buf) SET_ObstacleDataA2_ObstaclePosY(buf, 0)

/**
 * Signal ObstaclePosY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_ObstaclePosY(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosY raw initial value.
 */
#define START_ObstacleDataA2_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw minimum value.
 */
#define MIN_ObstacleDataA2_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw maximum value.
 */
#define MAX_ObstacleDataA2_ObstaclePosY 8176

/**
 * Signal ObstaclePosY raw offset value.
 */
#define OFF_ObstacleDataA2_ObstaclePosY -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA2_BlinkerInfo Signal BlinkerInfo of Message ObstacleDataA2 (0x423)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA2_BlinkerInfo.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal BlinkerInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_BlinkerInfo and \ref GET_ObstacleDataA2_BlinkerInfo instead.
 */
#define SIG_ObstacleDataA2_BlinkerInfo 0, 0, 34, 3

/**
 * Signal BlinkerInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_BlinkerInfo or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_BlinkerInfo 0, 0, 34, 3, 0

/**
 * Get signal BlinkerInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_BlinkerInfo(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x07) << 0))

/**
 * Set signal BlinkerInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_BlinkerInfo(buf, val)                                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 2);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal BlinkerInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_BlinkerInfo(buf) SET_ObstacleDataA2_BlinkerInfo(buf, 0)

/**
 * Signal BlinkerInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_BlinkerInfo(x, fmt) ((x)*fmt)

/**
 * Signal BlinkerInfo raw initial value.
 */
#define START_ObstacleDataA2_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw minimum value.
 */
#define MIN_ObstacleDataA2_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw maximum value.
 */
#define MAX_ObstacleDataA2_BlinkerInfo 4

/**
 * Signal BlinkerInfo raw offset value.
 */
#define OFF_ObstacleDataA2_BlinkerInfo 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA2_BlinkerInfo Value Table for Signal BlinkerInfo in Message ObstacleDataA2 (0x423)
 *
 * Enum values defined for \ref SIG_ObstacleDataA2_BlinkerInfo.
 *
 * @ingroup SIG_ObstacleDataA2_BlinkerInfo
 */

/**
 * Value table ObstacleDataA2_BlinkerInfo entry both.
 *
 * @ingroup ENUM_ObstacleDataA2_BlinkerInfo
 */
#define ObstacleDataA2_BlinkerInfo_both 4

/**
 * Value table ObstacleDataA2_BlinkerInfo entry right.
 *
 * @ingroup ENUM_ObstacleDataA2_BlinkerInfo
 */
#define ObstacleDataA2_BlinkerInfo_right 3

/**
 * Value table ObstacleDataA2_BlinkerInfo entry left.
 *
 * @ingroup ENUM_ObstacleDataA2_BlinkerInfo
 */
#define ObstacleDataA2_BlinkerInfo_left 2

/**
 * Value table ObstacleDataA2_BlinkerInfo entry off.
 *
 * @ingroup ENUM_ObstacleDataA2_BlinkerInfo
 */
#define ObstacleDataA2_BlinkerInfo_off 1

/**
 * Value table ObstacleDataA2_BlinkerInfo entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataA2_BlinkerInfo
 */
#define ObstacleDataA2_BlinkerInfo_unavailable 0

/**
 * @defgroup SIG_ObstacleDataA2_Move_in_and_Out Signal Move_in_and_Out of Message ObstacleDataA2 (0x423)
 *
 * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our
 * estimation of where it is going to be within one second.
 *
 * Contains the value table \ref ENUM_ObstacleDataA2_Move_in_and_Out.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal Move_in_and_Out configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_Move_in_and_Out and \ref GET_ObstacleDataA2_Move_in_and_Out instead.
 */
#define SIG_ObstacleDataA2_Move_in_and_Out 0, 0, 37, 3

/**
 * Signal Move_in_and_Out setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_Move_in_and_Out or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_Move_in_and_Out 0, 0, 37, 3, 0

/**
 * Get signal Move_in_and_Out from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_Move_in_and_Out(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0))

/**
 * Set signal Move_in_and_Out in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_Move_in_and_Out(buf, val)                                                                   \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
    }

/**
 * Set signal Move_in_and_Out in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_Move_in_and_Out(buf) SET_ObstacleDataA2_Move_in_and_Out(buf, 0)

/**
 * Signal Move_in_and_Out value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_Move_in_and_Out(x, fmt) ((x)*fmt)

/**
 * Signal Move_in_and_Out raw initial value.
 */
#define START_ObstacleDataA2_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw minimum value.
 */
#define MIN_ObstacleDataA2_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw maximum value.
 */
#define MAX_ObstacleDataA2_Move_in_and_Out 4

/**
 * Signal Move_in_and_Out raw offset value.
 */
#define OFF_ObstacleDataA2_Move_in_and_Out 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA2_Move_in_and_Out Value Table for Signal Move_in_and_Out in Message ObstacleDataA2
 * (0x423)
 *
 * Enum values defined for \ref SIG_ObstacleDataA2_Move_in_and_Out.
 *
 * @ingroup SIG_ObstacleDataA2_Move_in_and_Out
 */

/**
 * Value table ObstacleDataA2_Move_in_and_Out entry cut_out.
 *
 * @ingroup ENUM_ObstacleDataA2_Move_in_and_Out
 */
#define ObstacleDataA2_Move_in_and_Out_cut_out 4

/**
 * Value table ObstacleDataA2_Move_in_and_Out entry cut_in.
 *
 * @ingroup ENUM_ObstacleDataA2_Move_in_and_Out
 */
#define ObstacleDataA2_Move_in_and_Out_cut_in 3

/**
 * Value table ObstacleDataA2_Move_in_and_Out entry out_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA2_Move_in_and_Out
 */
#define ObstacleDataA2_Move_in_and_Out_out_host_lane 2

/**
 * Value table ObstacleDataA2_Move_in_and_Out entry in_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA2_Move_in_and_Out
 */
#define ObstacleDataA2_Move_in_and_Out_in_host_lane 1

/**
 * Value table ObstacleDataA2_Move_in_and_Out entry undefined.
 *
 * @ingroup ENUM_ObstacleDataA2_Move_in_and_Out
 */
#define ObstacleDataA2_Move_in_and_Out_undefined 0

/**
 * @defgroup SIG_ObstacleDataA2_ObstacleVelX Signal ObstacleVelX of Message ObstacleDataA2 (0x423)
 *
 * Relative longitudinal speed of the ego vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal ObstacleVelX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_ObstacleVelX and \ref GET_ObstacleDataA2_ObstacleVelX instead.
 */
#define SIG_ObstacleDataA2_ObstacleVelX 0, 1, 40, 12

/**
 * Signal ObstacleVelX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_ObstacleVelX or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_ObstacleVelX 0, 1, 40, 12, 0

/**
 * Get signal ObstacleVelX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_ObstacleVelX(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_ObstacleVelX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[6] &= ~(0x0f << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_ObstacleVelX(buf) SET_ObstacleDataA2_ObstacleVelX(buf, 0)

/**
 * Signal ObstacleVelX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_ObstacleVelX(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelX raw initial value.
 */
#define START_ObstacleDataA2_ObstacleVelX 0

/**
 * Signal ObstacleVelX raw minimum value.
 */
#define MIN_ObstacleDataA2_ObstacleVelX -2047

/**
 * Signal ObstacleVelX raw maximum value.
 */
#define MAX_ObstacleDataA2_ObstacleVelX 2047

/**
 * Signal ObstacleVelX raw offset value.
 */
#define OFF_ObstacleDataA2_ObstacleVelX 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA2_ObstacleType Signal ObstacleType of Message ObstacleDataA2 (0x423)
 *
 * Obstacle type
 *
 * Contains the value table \ref ENUM_ObstacleDataA2_ObstacleType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal ObstacleType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_ObstacleType and \ref GET_ObstacleDataA2_ObstacleType instead.
 */
#define SIG_ObstacleDataA2_ObstacleType 0, 0, 52, 2

/**
 * Signal ObstacleType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_ObstacleType or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_ObstacleType 0, 0, 52, 2, 0

/**
 * Get signal ObstacleType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_ObstacleType(buf) (0 | (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x03) << 0))

/**
 * Set signal ObstacleType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_ObstacleType(buf, val)                                                                      \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 4);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 4;                                                                 \
    }

/**
 * Set signal ObstacleType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_ObstacleType(buf) SET_ObstacleDataA2_ObstacleType(buf, 0)

/**
 * Signal ObstacleType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_ObstacleType(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleType raw initial value.
 */
#define START_ObstacleDataA2_ObstacleType 0

/**
 * Signal ObstacleType raw minimum value.
 */
#define MIN_ObstacleDataA2_ObstacleType 0

/**
 * Signal ObstacleType raw maximum value.
 */
#define MAX_ObstacleDataA2_ObstacleType 3

/**
 * Signal ObstacleType raw offset value.
 */
#define OFF_ObstacleDataA2_ObstacleType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA2_ObstacleType Value Table for Signal ObstacleType in Message ObstacleDataA2 (0x423)
 *
 * Enum values defined for \ref SIG_ObstacleDataA2_ObstacleType.
 *
 * @ingroup SIG_ObstacleDataA2_ObstacleType
 */

/**
 * Value table ObstacleDataA2_ObstacleType entry General.
 *
 * Object
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleType
 */
#define ObstacleDataA2_ObstacleType_General 3

/**
 * Value table ObstacleDataA2_ObstacleType entry Cyclist.
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleType
 */
#define ObstacleDataA2_ObstacleType_Cyclist 2

/**
 * Value table ObstacleDataA2_ObstacleType entry Pedestrian.
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleType
 */
#define ObstacleDataA2_ObstacleType_Pedestrian 1

/**
 * Value table ObstacleDataA2_ObstacleType entry Vehicle.
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleType
 */
#define ObstacleDataA2_ObstacleType_Vehicle 0

/**
 * @defgroup SIG_ObstacleDataA2_VehicleSubType Signal VehicleSubType of Message ObstacleDataA2 (0x423)
 *
 * Vehicle sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataA2_VehicleSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal VehicleSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_VehicleSubType and \ref GET_ObstacleDataA2_VehicleSubType instead.
 */
#define SIG_ObstacleDataA2_VehicleSubType 0, 0, 54, 4

/**
 * Signal VehicleSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_VehicleSubType or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_VehicleSubType 0, 0, 54, 4, 0

/**
 * Get signal VehicleSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_VehicleSubType(buf)                                                                         \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x03) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 2))

/**
 * Set signal VehicleSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_VehicleSubType(buf, val)                                                                    \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 6);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[7] &= ~(0x03 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 2) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal VehicleSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_VehicleSubType(buf) SET_ObstacleDataA2_VehicleSubType(buf, 0)

/**
 * Signal VehicleSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_VehicleSubType(x, fmt) ((x)*fmt)

/**
 * Signal VehicleSubType raw initial value.
 */
#define START_ObstacleDataA2_VehicleSubType 0

/**
 * Signal VehicleSubType raw minimum value.
 */
#define MIN_ObstacleDataA2_VehicleSubType 0

/**
 * Signal VehicleSubType raw maximum value.
 */
#define MAX_ObstacleDataA2_VehicleSubType 15

/**
 * Signal VehicleSubType raw offset value.
 */
#define OFF_ObstacleDataA2_VehicleSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA2_VehicleSubType Value Table for Signal VehicleSubType in Message ObstacleDataA2 (0x423)
 *
 * Enum values defined for \ref SIG_ObstacleDataA2_VehicleSubType.
 *
 * @ingroup SIG_ObstacleDataA2_VehicleSubType
 */

/**
 * Value table ObstacleDataA2_VehicleSubType entry Tiny_car.
 *
 * @ingroup ENUM_ObstacleDataA2_VehicleSubType
 */
#define ObstacleDataA2_VehicleSubType_Tiny_car 5

/**
 * Value table ObstacleDataA2_VehicleSubType entry Special_vehicle.
 *
 * @ingroup ENUM_ObstacleDataA2_VehicleSubType
 */
#define ObstacleDataA2_VehicleSubType_Special_vehicle 4

/**
 * Value table ObstacleDataA2_VehicleSubType entry Motors.
 *
 * @ingroup ENUM_ObstacleDataA2_VehicleSubType
 */
#define ObstacleDataA2_VehicleSubType_Motors 3

/**
 * Value table ObstacleDataA2_VehicleSubType entry Trucks.
 *
 * @ingroup ENUM_ObstacleDataA2_VehicleSubType
 */
#define ObstacleDataA2_VehicleSubType_Trucks 2

/**
 * Value table ObstacleDataA2_VehicleSubType entry Small_Medium_Car.
 *
 * @ingroup ENUM_ObstacleDataA2_VehicleSubType
 */
#define ObstacleDataA2_VehicleSubType_Small_Medium_Car 1

/**
 * Value table ObstacleDataA2_VehicleSubType entry Bus.
 *
 * @ingroup ENUM_ObstacleDataA2_VehicleSubType
 */
#define ObstacleDataA2_VehicleSubType_Bus 0

/**
 * @defgroup SIG_ObstacleDataA2_ObstacleStatus Signal ObstacleStatus of Message ObstacleDataA2 (0x423)
 *
 * Reseved. Not Implemented
 *
 * Contains the value table \ref ENUM_ObstacleDataA2_ObstacleStatus.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal ObstacleStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_ObstacleStatus and \ref GET_ObstacleDataA2_ObstacleStatus instead.
 */
#define SIG_ObstacleDataA2_ObstacleStatus 0, 0, 58, 3

/**
 * Signal ObstacleStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_ObstacleStatus or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_ObstacleStatus 0, 0, 58, 3, 0

/**
 * Get signal ObstacleStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_ObstacleStatus(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0))

/**
 * Set signal ObstacleStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_ObstacleStatus(buf, val)                                                                    \
    {                                                                                                                  \
        buf[7] &= ~(0x07 << 2);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal ObstacleStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_ObstacleStatus(buf) SET_ObstacleDataA2_ObstacleStatus(buf, 0)

/**
 * Signal ObstacleStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_ObstacleStatus(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleStatus raw initial value.
 */
#define START_ObstacleDataA2_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw minimum value.
 */
#define MIN_ObstacleDataA2_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw maximum value.
 */
#define MAX_ObstacleDataA2_ObstacleStatus 7

/**
 * Signal ObstacleStatus raw offset value.
 */
#define OFF_ObstacleDataA2_ObstacleStatus 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA2_ObstacleStatus Value Table for Signal ObstacleStatus in Message ObstacleDataA2 (0x423)
 *
 * Enum values defined for \ref SIG_ObstacleDataA2_ObstacleStatus.
 *
 * @ingroup SIG_ObstacleDataA2_ObstacleStatus
 */

/**
 * Value table ObstacleDataA2_ObstacleStatus entry Unused.
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleStatus
 */
#define ObstacleDataA2_ObstacleStatus_Unused 6

/**
 * Value table ObstacleDataA2_ObstacleStatus entry Parked.
 *
 * never moved, BckLightsOff
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleStatus
 */
#define ObstacleDataA2_ObstacleStatus_Parked 5

/**
 * Value table ObstacleDataA2_ObstacleStatus entry Oncoming.
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleStatus
 */
#define ObstacleDataA2_ObstacleStatus_Oncoming 4

/**
 * Value table ObstacleDataA2_ObstacleStatus entry moving.
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleStatus
 */
#define ObstacleDataA2_ObstacleStatus_moving 3

/**
 * Value table ObstacleDataA2_ObstacleStatus entry stopped.
 *
 * (movable)
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleStatus
 */
#define ObstacleDataA2_ObstacleStatus_stopped 2

/**
 * Value table ObstacleDataA2_ObstacleStatus entry standing.
 *
 * neverMoved bckLightsOn
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleStatus
 */
#define ObstacleDataA2_ObstacleStatus_standing 1

/**
 * Value table ObstacleDataA2_ObstacleStatus entry not.
 *
 * defined
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleStatus
 */
#define ObstacleDataA2_ObstacleStatus_not 0

/**
 * @defgroup SIG_ObstacleDataA2_ObstacleBrakeLights Signal ObstacleBrakeLights of Message ObstacleDataA2 (0x423)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA2_ObstacleBrakeLights.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal ObstacleBrakeLights configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_ObstacleBrakeLights and \ref GET_ObstacleDataA2_ObstacleBrakeLights instead.
 */
#define SIG_ObstacleDataA2_ObstacleBrakeLights 0, 0, 61, 1

/**
 * Signal ObstacleBrakeLights setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_ObstacleBrakeLights or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_ObstacleBrakeLights 0, 0, 61, 1, 0

/**
 * Get signal ObstacleBrakeLights from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_ObstacleBrakeLights(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0))

/**
 * Set signal ObstacleBrakeLights in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_ObstacleBrakeLights(buf, val)                                                               \
    {                                                                                                                  \
        buf[7] &= ~(0x01 << 5);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal ObstacleBrakeLights in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_ObstacleBrakeLights(buf) SET_ObstacleDataA2_ObstacleBrakeLights(buf, 0)

/**
 * Signal ObstacleBrakeLights value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_ObstacleBrakeLights(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleBrakeLights raw initial value.
 */
#define START_ObstacleDataA2_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw minimum value.
 */
#define MIN_ObstacleDataA2_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw maximum value.
 */
#define MAX_ObstacleDataA2_ObstacleBrakeLights 1

/**
 * Signal ObstacleBrakeLights raw offset value.
 */
#define OFF_ObstacleDataA2_ObstacleBrakeLights 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA2_ObstacleBrakeLights Value Table for Signal ObstacleBrakeLights in Message
 * ObstacleDataA2 (0x423)
 *
 * Enum values defined for \ref SIG_ObstacleDataA2_ObstacleBrakeLights.
 *
 * @ingroup SIG_ObstacleDataA2_ObstacleBrakeLights
 */

/**
 * Value table ObstacleDataA2_ObstacleBrakeLights entry object_s.
 *
 * object's brake lights are on
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleBrakeLights
 */
#define ObstacleDataA2_ObstacleBrakeLights_object_s 1

/**
 * Value table ObstacleDataA2_ObstacleBrakeLights entry object_s_0.
 *
 * object's brake lights are off
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleBrakeLights
 */
#define ObstacleDataA2_ObstacleBrakeLights_object_s_0 0

/**
 * @defgroup SIG_ObstacleDataA2_ObstacleValid Signal ObstacleValid of Message ObstacleDataA2 (0x423)
 *
 * Obstacle Valid info
 *
 * Contains the value table \ref ENUM_ObstacleDataA2_ObstacleValid.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA2
 * @{
 */

/**
 * Signal ObstacleValid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA2_ObstacleValid and \ref GET_ObstacleDataA2_ObstacleValid instead.
 */
#define SIG_ObstacleDataA2_ObstacleValid 0, 0, 62, 2

/**
 * Signal ObstacleValid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA2_ObstacleValid or \ref INIT_ObstacleDataA2 instead.
 */
#define SETUP_ObstacleDataA2_ObstacleValid 0, 0, 62, 2, 0

/**
 * Get signal ObstacleValid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA2_ObstacleValid(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0))

/**
 * Set signal ObstacleValid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA2_ObstacleValid(buf, val)                                                                     \
    {                                                                                                                  \
        buf[7] &= ~(0x03 << 6);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
    }

/**
 * Set signal ObstacleValid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA2_ObstacleValid(buf) SET_ObstacleDataA2_ObstacleValid(buf, 0)

/**
 * Signal ObstacleValid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA2_ObstacleValid(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleValid raw initial value.
 */
#define START_ObstacleDataA2_ObstacleValid 0

/**
 * Signal ObstacleValid raw minimum value.
 */
#define MIN_ObstacleDataA2_ObstacleValid 0

/**
 * Signal ObstacleValid raw maximum value.
 */
#define MAX_ObstacleDataA2_ObstacleValid 2

/**
 * Signal ObstacleValid raw offset value.
 */
#define OFF_ObstacleDataA2_ObstacleValid 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA2_ObstacleValid Value Table for Signal ObstacleValid in Message ObstacleDataA2 (0x423)
 *
 * Enum values defined for \ref SIG_ObstacleDataA2_ObstacleValid.
 *
 * @ingroup SIG_ObstacleDataA2_ObstacleValid
 */

/**
 * Value table ObstacleDataA2_ObstacleValid entry older.
 *
 * valid
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleValid
 */
#define ObstacleDataA2_ObstacleValid_older 2

/**
 * Value table ObstacleDataA2_ObstacleValid entry new.
 *
 * valid (detected this frame)
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleValid
 */
#define ObstacleDataA2_ObstacleValid_new 1

/**
 * Value table ObstacleDataA2_ObstacleValid entry invalid.
 *
 * Obstacle(default value)
 *
 * @ingroup ENUM_ObstacleDataA2_ObstacleValid
 */
#define ObstacleDataA2_ObstacleValid_invalid 0

/**
 * @defgroup SIG_ObstacleDataC1_ObstacleAngleRate Signal ObstacleAngleRate of Message ObstacleDataC1 (0x422)
 *
 * Reserved
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC1
 * @{
 */

/**
 * Signal ObstacleAngleRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC1_ObstacleAngleRate and \ref GET_ObstacleDataC1_ObstacleAngleRate instead.
 */
#define SIG_ObstacleDataC1_ObstacleAngleRate 0, 1, 0, 16

/**
 * Signal ObstacleAngleRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC1_ObstacleAngleRate or \ref INIT_ObstacleDataC1 instead.
 */
#define SETUP_ObstacleDataC1_ObstacleAngleRate 0, 1, 0, 16, 0

/**
 * Get signal ObstacleAngleRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC1_ObstacleAngleRate(buf)                                                                      \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAngleRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC1_ObstacleAngleRate(buf, val)                                                                 \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAngleRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC1_ObstacleAngleRate(buf) SET_ObstacleDataC1_ObstacleAngleRate(buf, 0)

/**
 * Signal ObstacleAngleRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC1_ObstacleAngleRate(x, fmt) ((x)*fmt / 100)

/**
 * Signal ObstacleAngleRate raw initial value.
 */
#define START_ObstacleDataC1_ObstacleAngleRate 0

/**
 * Signal ObstacleAngleRate raw minimum value.
 */
#define MIN_ObstacleDataC1_ObstacleAngleRate -32768

/**
 * Signal ObstacleAngleRate raw maximum value.
 */
#define MAX_ObstacleDataC1_ObstacleAngleRate 32767

/**
 * Signal ObstacleAngleRate raw offset value.
 */
#define OFF_ObstacleDataC1_ObstacleAngleRate 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC1_ObstacleVelY Signal ObstacleVelY of Message ObstacleDataC1 (0x422)
 *
 * Relative lateral velocity of the object.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC1
 * @{
 */

/**
 * Signal ObstacleVelY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC1_ObstacleVelY and \ref GET_ObstacleDataC1_ObstacleVelY instead.
 */
#define SIG_ObstacleDataC1_ObstacleVelY 0, 1, 16, 12

/**
 * Signal ObstacleVelY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC1_ObstacleVelY or \ref INIT_ObstacleDataC1 instead.
 */
#define SETUP_ObstacleDataC1_ObstacleVelY 0, 1, 16, 12, 0

/**
 * Get signal ObstacleVelY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC1_ObstacleVelY(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[3] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC1_ObstacleVelY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0x0f << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC1_ObstacleVelY(buf) SET_ObstacleDataC1_ObstacleVelY(buf, 0)

/**
 * Signal ObstacleVelY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC1_ObstacleVelY(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelY raw initial value.
 */
#define START_ObstacleDataC1_ObstacleVelY 0

/**
 * Signal ObstacleVelY raw minimum value.
 */
#define MIN_ObstacleDataC1_ObstacleVelY -2047

/**
 * Signal ObstacleVelY raw maximum value.
 */
#define MAX_ObstacleDataC1_ObstacleVelY 2047

/**
 * Signal ObstacleVelY raw offset value.
 */
#define OFF_ObstacleDataC1_ObstacleVelY 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC1_Object_Accel_X Signal Object_Accel_X of Message ObstacleDataC1 (0x422)
 *
 * The longitude acceleration of the object. Type: 10 bit, signed integer  Range: -14.97 : 14.97 [m/s2] Conversion:
 * (HEX)* 0.03 Invalid value: 200h
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC1
 * @{
 */

/**
 * Signal Object_Accel_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC1_Object_Accel_X and \ref GET_ObstacleDataC1_Object_Accel_X instead.
 */
#define SIG_ObstacleDataC1_Object_Accel_X 0, 1, 28, 10

/**
 * Signal Object_Accel_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC1_Object_Accel_X or \ref INIT_ObstacleDataC1 instead.
 */
#define SETUP_ObstacleDataC1_Object_Accel_X 0, 1, 28, 10, 0

/**
 * Get signal Object_Accel_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC1_Object_Accel_X(buf)                                                                         \
    (0 | (uint16_t)(-(uint16_t)((buf[4] >> 5) & 0x01) << 10) | (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x3f) << 4))

/**
 * Set signal Object_Accel_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC1_Object_Accel_X(buf, val)                                                                    \
    {                                                                                                                  \
        buf[3] &= ~(0x0f << 4);                                                                                        \
        buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4;                                                                 \
        buf[4] &= ~(0x3f << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0;                                                       \
    }

/**
 * Set signal Object_Accel_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC1_Object_Accel_X(buf) SET_ObstacleDataC1_Object_Accel_X(buf, 0)

/**
 * Signal Object_Accel_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC1_Object_Accel_X(x, fmt) ((x)*fmt * 3 / 100)

/**
 * Signal Object_Accel_X raw initial value.
 */
#define START_ObstacleDataC1_Object_Accel_X 0

/**
 * Signal Object_Accel_X raw minimum value.
 */
#define MIN_ObstacleDataC1_Object_Accel_X -499

/**
 * Signal Object_Accel_X raw maximum value.
 */
#define MAX_ObstacleDataC1_Object_Accel_X 499

/**
 * Signal Object_Accel_X raw offset value.
 */
#define OFF_ObstacleDataC1_Object_Accel_X 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC1_ObstacleReplaced Signal ObstacleReplaced of Message ObstacleDataC1 (0x422)
 *
 * Reserved
 *
 * Contains the value table \ref ENUM_ObstacleDataC1_ObstacleReplaced.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC1
 * @{
 */

/**
 * Signal ObstacleReplaced configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC1_ObstacleReplaced and \ref GET_ObstacleDataC1_ObstacleReplaced instead.
 */
#define SIG_ObstacleDataC1_ObstacleReplaced 0, 0, 38, 1

/**
 * Signal ObstacleReplaced setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC1_ObstacleReplaced or \ref INIT_ObstacleDataC1 instead.
 */
#define SETUP_ObstacleDataC1_ObstacleReplaced 0, 0, 38, 1, 0

/**
 * Get signal ObstacleReplaced from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC1_ObstacleReplaced(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x01) << 0))

/**
 * Set signal ObstacleReplaced in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC1_ObstacleReplaced(buf, val)                                                                  \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 6);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 6;                                                                 \
    }

/**
 * Set signal ObstacleReplaced in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC1_ObstacleReplaced(buf) SET_ObstacleDataC1_ObstacleReplaced(buf, 0)

/**
 * Signal ObstacleReplaced value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC1_ObstacleReplaced(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleReplaced raw initial value.
 */
#define START_ObstacleDataC1_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw minimum value.
 */
#define MIN_ObstacleDataC1_ObstacleReplaced 0

/**
 * Signal ObstacleReplaced raw maximum value.
 */
#define MAX_ObstacleDataC1_ObstacleReplaced 1

/**
 * Signal ObstacleReplaced raw offset value.
 */
#define OFF_ObstacleDataC1_ObstacleReplaced 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC1_ObstacleReplaced Value Table for Signal ObstacleReplaced in Message ObstacleDataC1
 * (0x422)
 *
 * Enum values defined for \ref SIG_ObstacleDataC1_ObstacleReplaced.
 *
 * @ingroup SIG_ObstacleDataC1_ObstacleReplaced
 */

/**
 * Value table ObstacleDataC1_ObstacleReplaced entry replaced.
 *
 * in this frame
 *
 * @ingroup ENUM_ObstacleDataC1_ObstacleReplaced
 */
#define ObstacleDataC1_ObstacleReplaced_replaced 1

/**
 * Value table ObstacleDataC1_ObstacleReplaced entry not.
 *
 * replaced in this frame
 *
 * @ingroup ENUM_ObstacleDataC1_ObstacleReplaced
 */
#define ObstacleDataC1_ObstacleReplaced_not 0

/**
 * @defgroup SIG_ObstacleDataC1_PedestrainOrientations Signal PedestrainOrientations of Message ObstacleDataC1 (0x422)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataC1_PedestrainOrientations.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC1
 * @{
 */

/**
 * Signal PedestrainOrientations configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC1_PedestrainOrientations and \ref GET_ObstacleDataC1_PedestrainOrientations instead.
 */
#define SIG_ObstacleDataC1_PedestrainOrientations 0, 0, 39, 4

/**
 * Signal PedestrainOrientations setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC1_PedestrainOrientations or \ref INIT_ObstacleDataC1 instead.
 */
#define SETUP_ObstacleDataC1_PedestrainOrientations 0, 0, 39, 4, 0

/**
 * Get signal PedestrainOrientations from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC1_PedestrainOrientations(buf)                                                                 \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x07) << 1))

/**
 * Set signal PedestrainOrientations in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC1_PedestrainOrientations(buf, val)                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0x07 << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 1) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal PedestrainOrientations in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC1_PedestrainOrientations(buf) SET_ObstacleDataC1_PedestrainOrientations(buf, 0)

/**
 * Signal PedestrainOrientations value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC1_PedestrainOrientations(x, fmt) ((x)*fmt)

/**
 * Signal PedestrainOrientations raw initial value.
 */
#define START_ObstacleDataC1_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw minimum value.
 */
#define MIN_ObstacleDataC1_PedestrainOrientations 0

/**
 * Signal PedestrainOrientations raw maximum value.
 */
#define MAX_ObstacleDataC1_PedestrainOrientations 9

/**
 * Signal PedestrainOrientations raw offset value.
 */
#define OFF_ObstacleDataC1_PedestrainOrientations 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataC1_PedestrainOrientations Value Table for Signal PedestrainOrientations in Message
 * ObstacleDataC1 (0x422)
 *
 * Enum values defined for \ref SIG_ObstacleDataC1_PedestrainOrientations.
 *
 * @ingroup SIG_ObstacleDataC1_PedestrainOrientations
 */

/**
 * Value table ObstacleDataC1_PedestrainOrientations entry unkown.
 *
 * @ingroup ENUM_ObstacleDataC1_PedestrainOrientations
 */
#define ObstacleDataC1_PedestrainOrientations_unkown 9

/**
 * Value table ObstacleDataC1_PedestrainOrientations entry right_back.
 *
 * @ingroup ENUM_ObstacleDataC1_PedestrainOrientations
 */
#define ObstacleDataC1_PedestrainOrientations_right_back 8

/**
 * Value table ObstacleDataC1_PedestrainOrientations entry right_front.
 *
 * @ingroup ENUM_ObstacleDataC1_PedestrainOrientations
 */
#define ObstacleDataC1_PedestrainOrientations_right_front 7

/**
 * Value table ObstacleDataC1_PedestrainOrientations entry right.
 *
 * @ingroup ENUM_ObstacleDataC1_PedestrainOrientations
 */
#define ObstacleDataC1_PedestrainOrientations_right 6

/**
 * Value table ObstacleDataC1_PedestrainOrientations entry left_back.
 *
 * @ingroup ENUM_ObstacleDataC1_PedestrainOrientations
 */
#define ObstacleDataC1_PedestrainOrientations_left_back 5

/**
 * Value table ObstacleDataC1_PedestrainOrientations entry left_anterior.
 *
 * @ingroup ENUM_ObstacleDataC1_PedestrainOrientations
 */
#define ObstacleDataC1_PedestrainOrientations_left_anterior 4

/**
 * Value table ObstacleDataC1_PedestrainOrientations entry left.
 *
 * @ingroup ENUM_ObstacleDataC1_PedestrainOrientations
 */
#define ObstacleDataC1_PedestrainOrientations_left 3

/**
 * Value table ObstacleDataC1_PedestrainOrientations entry front.
 *
 * @ingroup ENUM_ObstacleDataC1_PedestrainOrientations
 */
#define ObstacleDataC1_PedestrainOrientations_front 2

/**
 * Value table ObstacleDataC1_PedestrainOrientations entry back.
 *
 * @ingroup ENUM_ObstacleDataC1_PedestrainOrientations
 */
#define ObstacleDataC1_PedestrainOrientations_back 1

/**
 * Value table ObstacleDataC1_PedestrainOrientations entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataC1_PedestrainOrientations
 */
#define ObstacleDataC1_PedestrainOrientations_unavailable 0

/**
 * @defgroup SIG_ObstacleDataC1_VehicleAngle Signal VehicleAngle of Message ObstacleDataC1 (0x422)
 *
 * Vehicle yaw angle information
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC1
 * @{
 */

/**
 * Signal VehicleAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC1_VehicleAngle and \ref GET_ObstacleDataC1_VehicleAngle instead.
 */
#define SIG_ObstacleDataC1_VehicleAngle 0, 1, 43, 16

/**
 * Signal VehicleAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC1_VehicleAngle or \ref INIT_ObstacleDataC1 instead.
 */
#define SETUP_ObstacleDataC1_VehicleAngle 0, 1, 43, 16, 0

/**
 * Get signal VehicleAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC1_VehicleAngle(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) |       \
     (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x07) << 13))

/**
 * Set signal VehicleAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC1_VehicleAngle(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0x1f << 3);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
        buf[7] &= ~(0x07 << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 13) & 0x07) << 0;                                                      \
    }

/**
 * Set signal VehicleAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC1_VehicleAngle(buf) SET_ObstacleDataC1_VehicleAngle(buf, 0)

/**
 * Signal VehicleAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC1_VehicleAngle(x, fmt) ((x)*fmt / 100)

/**
 * Signal VehicleAngle raw initial value.
 */
#define START_ObstacleDataC1_VehicleAngle 0

/**
 * Signal VehicleAngle raw minimum value.
 */
#define MIN_ObstacleDataC1_VehicleAngle -32768

/**
 * Signal VehicleAngle raw maximum value.
 */
#define MAX_ObstacleDataC1_VehicleAngle 32767

/**
 * Signal VehicleAngle raw offset value.
 */
#define OFF_ObstacleDataC1_VehicleAngle 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataC1_reserved_C Signal reserved_C of Message ObstacleDataC1 (0x422)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataC1
 * @{
 */

/**
 * Signal reserved_C configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataC1_reserved_C and \ref GET_ObstacleDataC1_reserved_C instead.
 */
#define SIG_ObstacleDataC1_reserved_C 0, 0, 59, 5

/**
 * Signal reserved_C setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataC1_reserved_C or \ref INIT_ObstacleDataC1 instead.
 */
#define SETUP_ObstacleDataC1_reserved_C 0, 0, 59, 5, 0

/**
 * Get signal reserved_C from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataC1_reserved_C(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0))

/**
 * Set signal reserved_C in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataC1_reserved_C(buf, val)                                                                        \
    {                                                                                                                  \
        buf[7] &= ~(0x1f << 3);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
    }

/**
 * Set signal reserved_C in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataC1_reserved_C(buf) SET_ObstacleDataC1_reserved_C(buf, 0)

/**
 * Signal reserved_C value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataC1_reserved_C(x, fmt) ((x)*fmt)

/**
 * Signal reserved_C raw initial value.
 */
#define START_ObstacleDataC1_reserved_C 0

/**
 * Signal reserved_C raw minimum value.
 */
#define MIN_ObstacleDataC1_reserved_C 0

/**
 * Signal reserved_C raw maximum value.
 */
#define MAX_ObstacleDataC1_reserved_C 0

/**
 * Signal reserved_C raw offset value.
 */
#define OFF_ObstacleDataC1_reserved_C 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB1_ObstacleLength Signal ObstacleLength of Message ObstacleDataB1 (0x421)
 *
 * The length of of the target vehicle.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB1
 * @{
 */

/**
 * Signal ObstacleLength configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB1_ObstacleLength and \ref GET_ObstacleDataB1_ObstacleLength instead.
 */
#define SIG_ObstacleDataB1_ObstacleLength 0, 0, 0, 8

/**
 * Signal ObstacleLength setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB1_ObstacleLength or \ref INIT_ObstacleDataB1 instead.
 */
#define SETUP_ObstacleDataB1_ObstacleLength 0, 0, 0, 8, 0

/**
 * Get signal ObstacleLength from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB1_ObstacleLength(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleLength in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB1_ObstacleLength(buf, val)                                                                    \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLength in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB1_ObstacleLength(buf) SET_ObstacleDataB1_ObstacleLength(buf, 0)

/**
 * Signal ObstacleLength value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB1_ObstacleLength(x, fmt) ((x)*fmt / 2)

/**
 * Signal ObstacleLength raw initial value.
 */
#define START_ObstacleDataB1_ObstacleLength 0

/**
 * Signal ObstacleLength raw minimum value.
 */
#define MIN_ObstacleDataB1_ObstacleLength 0

/**
 * Signal ObstacleLength raw maximum value.
 */
#define MAX_ObstacleDataB1_ObstacleLength 63

/**
 * Signal ObstacleLength raw offset value.
 */
#define OFF_ObstacleDataB1_ObstacleLength 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB1_ObstacleWidth Signal ObstacleWidth of Message ObstacleDataB1 (0x421)
 *
 * The width of the target vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB1
 * @{
 */

/**
 * Signal ObstacleWidth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB1_ObstacleWidth and \ref GET_ObstacleDataB1_ObstacleWidth instead.
 */
#define SIG_ObstacleDataB1_ObstacleWidth 0, 0, 8, 8

/**
 * Signal ObstacleWidth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB1_ObstacleWidth or \ref INIT_ObstacleDataB1 instead.
 */
#define SETUP_ObstacleDataB1_ObstacleWidth 0, 0, 8, 8, 0

/**
 * Get signal ObstacleWidth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB1_ObstacleWidth(buf) (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleWidth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB1_ObstacleWidth(buf, val)                                                                     \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleWidth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB1_ObstacleWidth(buf) SET_ObstacleDataB1_ObstacleWidth(buf, 0)

/**
 * Signal ObstacleWidth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB1_ObstacleWidth(x, fmt) ((x)*fmt / 20)

/**
 * Signal ObstacleWidth raw initial value.
 */
#define START_ObstacleDataB1_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw minimum value.
 */
#define MIN_ObstacleDataB1_ObstacleWidth 0

/**
 * Signal ObstacleWidth raw maximum value.
 */
#define MAX_ObstacleDataB1_ObstacleWidth 250

/**
 * Signal ObstacleWidth raw offset value.
 */
#define OFF_ObstacleDataB1_ObstacleWidth 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB1_ObstacleAge Signal ObstacleAge of Message ObstacleDataB1 (0x421)
 *
 * Frame age of obstacle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB1
 * @{
 */

/**
 * Signal ObstacleAge configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB1_ObstacleAge and \ref GET_ObstacleDataB1_ObstacleAge instead.
 */
#define SIG_ObstacleDataB1_ObstacleAge 0, 0, 16, 16

/**
 * Signal ObstacleAge setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB1_ObstacleAge or \ref INIT_ObstacleDataB1 instead.
 */
#define SETUP_ObstacleDataB1_ObstacleAge 0, 0, 16, 16, 0

/**
 * Get signal ObstacleAge from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB1_ObstacleAge(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8))

/**
 * Set signal ObstacleAge in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB1_ObstacleAge(buf, val)                                                                       \
    {                                                                                                                  \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
    }

/**
 * Set signal ObstacleAge in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB1_ObstacleAge(buf) SET_ObstacleDataB1_ObstacleAge(buf, 0)

/**
 * Signal ObstacleAge value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB1_ObstacleAge(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleAge raw initial value.
 */
#define START_ObstacleDataB1_ObstacleAge 0

/**
 * Signal ObstacleAge raw minimum value.
 */
#define MIN_ObstacleDataB1_ObstacleAge 0

/**
 * Signal ObstacleAge raw maximum value.
 */
#define MAX_ObstacleDataB1_ObstacleAge 65535

/**
 * Signal ObstacleAge raw offset value.
 */
#define OFF_ObstacleDataB1_ObstacleAge 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataB1_ObstacleLane Signal ObstacleLane of Message ObstacleDataB1 (0x421)
 *
 * Reseved. Not Implemented update next lane(distinguish left or right)
 *
 * Contains the value table \ref ENUM_ObstacleDataB1_ObstacleLane.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB1
 * @{
 */

/**
 * Signal ObstacleLane configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB1_ObstacleLane and \ref GET_ObstacleDataB1_ObstacleLane instead.
 */
#define SIG_ObstacleDataB1_ObstacleLane 0, 0, 32, 3

/**
 * Signal ObstacleLane setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB1_ObstacleLane or \ref INIT_ObstacleDataB1 instead.
 */
#define SETUP_ObstacleDataB1_ObstacleLane 0, 0, 32, 3, 0

/**
 * Get signal ObstacleLane from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB1_ObstacleLane(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0))

/**
 * Set signal ObstacleLane in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB1_ObstacleLane(buf, val)                                                                      \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0;                                                                 \
    }

/**
 * Set signal ObstacleLane in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB1_ObstacleLane(buf) SET_ObstacleDataB1_ObstacleLane(buf, 0)

/**
 * Signal ObstacleLane value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB1_ObstacleLane(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleLane raw initial value.
 */
#define START_ObstacleDataB1_ObstacleLane 0

/**
 * Signal ObstacleLane raw minimum value.
 */
#define MIN_ObstacleDataB1_ObstacleLane 0

/**
 * Signal ObstacleLane raw maximum value.
 */
#define MAX_ObstacleDataB1_ObstacleLane 7

/**
 * Signal ObstacleLane raw offset value.
 */
#define OFF_ObstacleDataB1_ObstacleLane 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB1_ObstacleLane Value Table for Signal ObstacleLane in Message ObstacleDataB1 (0x421)
 *
 * Enum values defined for \ref SIG_ObstacleDataB1_ObstacleLane.
 *
 * @ingroup SIG_ObstacleDataB1_ObstacleLane
 */

/**
 * Value table ObstacleDataB1_ObstacleLane entry reserved.
 *
 * @ingroup ENUM_ObstacleDataB1_ObstacleLane
 */
#define ObstacleDataB1_ObstacleLane_reserved 7

/**
 * Value table ObstacleDataB1_ObstacleLane entry reserved_6.
 *
 * @ingroup ENUM_ObstacleDataB1_ObstacleLane
 */
#define ObstacleDataB1_ObstacleLane_reserved_6 6

/**
 * Value table ObstacleDataB1_ObstacleLane entry next.
 *
 * next lane right
 *
 * @ingroup ENUM_ObstacleDataB1_ObstacleLane
 */
#define ObstacleDataB1_ObstacleLane_next 5

/**
 * Value table ObstacleDataB1_ObstacleLane entry next_4.
 *
 * next lane left
 *
 * @ingroup ENUM_ObstacleDataB1_ObstacleLane
 */
#define ObstacleDataB1_ObstacleLane_next_4 4

/**
 * Value table ObstacleDataB1_ObstacleLane entry next_3.
 *
 * lane right
 *
 * @ingroup ENUM_ObstacleDataB1_ObstacleLane
 */
#define ObstacleDataB1_ObstacleLane_next_3 3

/**
 * Value table ObstacleDataB1_ObstacleLane entry next_2.
 *
 * lane left
 *
 * @ingroup ENUM_ObstacleDataB1_ObstacleLane
 */
#define ObstacleDataB1_ObstacleLane_next_2 2

/**
 * Value table ObstacleDataB1_ObstacleLane entry ego.
 *
 * lane
 *
 * @ingroup ENUM_ObstacleDataB1_ObstacleLane
 */
#define ObstacleDataB1_ObstacleLane_ego 1

/**
 * Value table ObstacleDataB1_ObstacleLane entry not.
 *
 * assigned
 *
 * @ingroup ENUM_ObstacleDataB1_ObstacleLane
 */
#define ObstacleDataB1_ObstacleLane_not 0

/**
 * @defgroup SIG_ObstacleDataB1_CIPVFlag Signal CIPVFlag of Message ObstacleDataB1 (0x421)
 *
 * Critical Vehicle in Path Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB1_CIPVFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB1
 * @{
 */

/**
 * Signal CIPVFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB1_CIPVFlag and \ref GET_ObstacleDataB1_CIPVFlag instead.
 */
#define SIG_ObstacleDataB1_CIPVFlag 0, 0, 35, 1

/**
 * Signal CIPVFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB1_CIPVFlag or \ref INIT_ObstacleDataB1 instead.
 */
#define SETUP_ObstacleDataB1_CIPVFlag 0, 0, 35, 1, 0

/**
 * Get signal CIPVFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB1_CIPVFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x01) << 0))

/**
 * Set signal CIPVFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB1_CIPVFlag(buf, val)                                                                          \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 3);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 3;                                                                 \
    }

/**
 * Set signal CIPVFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB1_CIPVFlag(buf) SET_ObstacleDataB1_CIPVFlag(buf, 0)

/**
 * Signal CIPVFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB1_CIPVFlag(x, fmt) ((x)*fmt)

/**
 * Signal CIPVFlag raw initial value.
 */
#define START_ObstacleDataB1_CIPVFlag 0

/**
 * Signal CIPVFlag raw minimum value.
 */
#define MIN_ObstacleDataB1_CIPVFlag 0

/**
 * Signal CIPVFlag raw maximum value.
 */
#define MAX_ObstacleDataB1_CIPVFlag 1

/**
 * Signal CIPVFlag raw offset value.
 */
#define OFF_ObstacleDataB1_CIPVFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB1_CIPVFlag Value Table for Signal CIPVFlag in Message ObstacleDataB1 (0x421)
 *
 * Enum values defined for \ref SIG_ObstacleDataB1_CIPVFlag.
 *
 * @ingroup SIG_ObstacleDataB1_CIPVFlag
 */

/**
 * Value table ObstacleDataB1_CIPVFlag entry CIPV.
 *
 * @ingroup ENUM_ObstacleDataB1_CIPVFlag
 */
#define ObstacleDataB1_CIPVFlag_CIPV 1

/**
 * Value table ObstacleDataB1_CIPVFlag entry not.
 *
 * CIPV
 *
 * @ingroup ENUM_ObstacleDataB1_CIPVFlag
 */
#define ObstacleDataB1_CIPVFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB1_MCPFlag Signal MCPFlag of Message ObstacleDataB1 (0x421)
 *
 * Most Critical Pedestrain Flag
 *
 * Contains the value table \ref ENUM_ObstacleDataB1_MCPFlag.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB1
 * @{
 */

/**
 * Signal MCPFlag configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB1_MCPFlag and \ref GET_ObstacleDataB1_MCPFlag instead.
 */
#define SIG_ObstacleDataB1_MCPFlag 0, 0, 36, 1

/**
 * Signal MCPFlag setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB1_MCPFlag or \ref INIT_ObstacleDataB1 instead.
 */
#define SETUP_ObstacleDataB1_MCPFlag 0, 0, 36, 1, 0

/**
 * Get signal MCPFlag from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB1_MCPFlag(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x01) << 0))

/**
 * Set signal MCPFlag in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB1_MCPFlag(buf, val)                                                                           \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 4);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 4;                                                                 \
    }

/**
 * Set signal MCPFlag in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB1_MCPFlag(buf) SET_ObstacleDataB1_MCPFlag(buf, 0)

/**
 * Signal MCPFlag value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB1_MCPFlag(x, fmt) ((x)*fmt)

/**
 * Signal MCPFlag raw initial value.
 */
#define START_ObstacleDataB1_MCPFlag 0

/**
 * Signal MCPFlag raw minimum value.
 */
#define MIN_ObstacleDataB1_MCPFlag 0

/**
 * Signal MCPFlag raw maximum value.
 */
#define MAX_ObstacleDataB1_MCPFlag 1

/**
 * Signal MCPFlag raw offset value.
 */
#define OFF_ObstacleDataB1_MCPFlag 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB1_MCPFlag Value Table for Signal MCPFlag in Message ObstacleDataB1 (0x421)
 *
 * Enum values defined for \ref SIG_ObstacleDataB1_MCPFlag.
 *
 * @ingroup SIG_ObstacleDataB1_MCPFlag
 */

/**
 * Value table ObstacleDataB1_MCPFlag entry MCP.
 *
 * @ingroup ENUM_ObstacleDataB1_MCPFlag
 */
#define ObstacleDataB1_MCPFlag_MCP 1

/**
 * Value table ObstacleDataB1_MCPFlag entry not.
 *
 * MCP
 *
 * @ingroup ENUM_ObstacleDataB1_MCPFlag
 */
#define ObstacleDataB1_MCPFlag_not 0

/**
 * @defgroup SIG_ObstacleDataB1_PedSubType Signal PedSubType of Message ObstacleDataB1 (0x421)
 *
 * Pestrain sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataB1_PedSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB1
 * @{
 */

/**
 * Signal PedSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB1_PedSubType and \ref GET_ObstacleDataB1_PedSubType instead.
 */
#define SIG_ObstacleDataB1_PedSubType 0, 0, 37, 2

/**
 * Signal PedSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB1_PedSubType or \ref INIT_ObstacleDataB1 instead.
 */
#define SETUP_ObstacleDataB1_PedSubType 0, 0, 37, 2, 0

/**
 * Get signal PedSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB1_PedSubType(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x03) << 0))

/**
 * Set signal PedSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB1_PedSubType(buf, val)                                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0x03 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 5;                                                                 \
    }

/**
 * Set signal PedSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB1_PedSubType(buf) SET_ObstacleDataB1_PedSubType(buf, 0)

/**
 * Signal PedSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB1_PedSubType(x, fmt) ((x)*fmt)

/**
 * Signal PedSubType raw initial value.
 */
#define START_ObstacleDataB1_PedSubType 0

/**
 * Signal PedSubType raw minimum value.
 */
#define MIN_ObstacleDataB1_PedSubType 0

/**
 * Signal PedSubType raw maximum value.
 */
#define MAX_ObstacleDataB1_PedSubType 3

/**
 * Signal PedSubType raw offset value.
 */
#define OFF_ObstacleDataB1_PedSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB1_PedSubType Value Table for Signal PedSubType in Message ObstacleDataB1 (0x421)
 *
 * Enum values defined for \ref SIG_ObstacleDataB1_PedSubType.
 *
 * @ingroup SIG_ObstacleDataB1_PedSubType
 */

/**
 * Value table ObstacleDataB1_PedSubType entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB1_PedSubType
 */
#define ObstacleDataB1_PedSubType_undefined 2

/**
 * Value table ObstacleDataB1_PedSubType entry Child.
 *
 * @ingroup ENUM_ObstacleDataB1_PedSubType
 */
#define ObstacleDataB1_PedSubType_Child 1

/**
 * Value table ObstacleDataB1_PedSubType entry Adult.
 *
 * @ingroup ENUM_ObstacleDataB1_PedSubType
 */
#define ObstacleDataB1_PedSubType_Adult 0

/**
 * @defgroup SIG_ObstacleDataB1_PedPos Signal PedPos of Message ObstacleDataB1 (0x421)
 *
 * Reseved
 *
 * Contains the value table \ref ENUM_ObstacleDataB1_PedPos.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB1
 * @{
 */

/**
 * Signal PedPos configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB1_PedPos and \ref GET_ObstacleDataB1_PedPos instead.
 */
#define SIG_ObstacleDataB1_PedPos 0, 1, 39, 12

/**
 * Signal PedPos setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB1_PedPos or \ref INIT_ObstacleDataB1 instead.
 */
#define SETUP_ObstacleDataB1_PedPos 0, 1, 39, 12, 0

/**
 * Get signal PedPos from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB1_PedPos(buf)                                                                                 \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 2) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) | (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x07) << 9))

/**
 * Set signal PedPos in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB1_PedPos(buf, val)                                                                            \
    {                                                                                                                  \
        buf[4] &= ~(0x01 << 7);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0;                                                       \
        buf[6] &= ~(0x07 << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0;                                                       \
    }

/**
 * Set signal PedPos in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB1_PedPos(buf) SET_ObstacleDataB1_PedPos(buf, 0)

/**
 * Signal PedPos value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB1_PedPos(x, fmt) ((x)*fmt)

/**
 * Signal PedPos raw initial value.
 */
#define START_ObstacleDataB1_PedPos 0

/**
 * Signal PedPos raw minimum value.
 */
#define MIN_ObstacleDataB1_PedPos 0

/**
 * Signal PedPos raw maximum value.
 */
#define MAX_ObstacleDataB1_PedPos 3

/**
 * Signal PedPos raw offset value.
 */
#define OFF_ObstacleDataB1_PedPos 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataB1_PedPos Value Table for Signal PedPos in Message ObstacleDataB1 (0x421)
 *
 * Enum values defined for \ref SIG_ObstacleDataB1_PedPos.
 *
 * @ingroup SIG_ObstacleDataB1_PedPos
 */

/**
 * Value table ObstacleDataB1_PedPos entry undefined.
 *
 * @ingroup ENUM_ObstacleDataB1_PedPos
 */
#define ObstacleDataB1_PedPos_undefined 5

/**
 * Value table ObstacleDataB1_PedPos entry lying.
 *
 * @ingroup ENUM_ObstacleDataB1_PedPos
 */
#define ObstacleDataB1_PedPos_lying 4

/**
 * Value table ObstacleDataB1_PedPos entry walk.
 *
 * @ingroup ENUM_ObstacleDataB1_PedPos
 */
#define ObstacleDataB1_PedPos_walk 3

/**
 * Value table ObstacleDataB1_PedPos entry sit.
 *
 * @ingroup ENUM_ObstacleDataB1_PedPos
 */
#define ObstacleDataB1_PedPos_sit 2

/**
 * Value table ObstacleDataB1_PedPos entry crouch.
 *
 * @ingroup ENUM_ObstacleDataB1_PedPos
 */
#define ObstacleDataB1_PedPos_crouch 1

/**
 * Value table ObstacleDataB1_PedPos entry stand.
 *
 * @ingroup ENUM_ObstacleDataB1_PedPos
 */
#define ObstacleDataB1_PedPos_stand 0

/**
 * @defgroup SIG_ObstacleDataB1_reserved_b1 Signal reserved_b1 of Message ObstacleDataB1 (0x421)
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataB1
 * @{
 */

/**
 * Signal reserved_b1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataB1_reserved_b1 and \ref GET_ObstacleDataB1_reserved_b1 instead.
 */
#define SIG_ObstacleDataB1_reserved_b1 0, 0, 51, 13

/**
 * Signal reserved_b1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataB1_reserved_b1 or \ref INIT_ObstacleDataB1 instead.
 */
#define SETUP_ObstacleDataB1_reserved_b1 0, 0, 51, 13, 0

/**
 * Get signal reserved_b1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataB1_reserved_b1(buf)                                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 3) & 0x1f) << 0) | (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 5))

/**
 * Set signal reserved_b1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataB1_reserved_b1(buf, val)                                                                       \
    {                                                                                                                  \
        buf[6] &= ~(0x1f << 3);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x1f) << 3;                                                                 \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0;                                                       \
    }

/**
 * Set signal reserved_b1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataB1_reserved_b1(buf) SET_ObstacleDataB1_reserved_b1(buf, 0)

/**
 * Signal reserved_b1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataB1_reserved_b1(x, fmt) ((x)*fmt)

/**
 * Signal reserved_b1 raw initial value.
 */
#define START_ObstacleDataB1_reserved_b1 0

/**
 * Signal reserved_b1 raw minimum value.
 */
#define MIN_ObstacleDataB1_reserved_b1 0

/**
 * Signal reserved_b1 raw maximum value.
 */
#define MAX_ObstacleDataB1_reserved_b1 0

/**
 * Signal reserved_b1 raw offset value.
 */
#define OFF_ObstacleDataB1_reserved_b1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA1_ObstacleID Signal ObstacleID of Message ObstacleDataA1 (0x420)
 *
 * Default:1
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal ObstacleID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_ObstacleID and \ref GET_ObstacleDataA1_ObstacleID instead.
 */
#define SIG_ObstacleDataA1_ObstacleID 0, 0, 0, 8

/**
 * Signal ObstacleID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_ObstacleID or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_ObstacleID 0, 0, 0, 8, 0

/**
 * Get signal ObstacleID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_ObstacleID(buf) (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0))

/**
 * Set signal ObstacleID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_ObstacleID(buf, val)                                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
    }

/**
 * Set signal ObstacleID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_ObstacleID(buf) SET_ObstacleDataA1_ObstacleID(buf, 0)

/**
 * Signal ObstacleID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_ObstacleID(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleID raw initial value.
 */
#define START_ObstacleDataA1_ObstacleID 0

/**
 * Signal ObstacleID raw minimum value.
 */
#define MIN_ObstacleDataA1_ObstacleID 0

/**
 * Signal ObstacleID raw maximum value.
 */
#define MAX_ObstacleDataA1_ObstacleID 63

/**
 * Signal ObstacleID raw offset value.
 */
#define OFF_ObstacleDataA1_ObstacleID 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA1_ObstaclePosX Signal ObstaclePosX of Message ObstacleDataA1 (0x420)
 *
 * longitudinal distance to the middle of the RL and RR corners
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal ObstaclePosX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_ObstaclePosX and \ref GET_ObstacleDataA1_ObstaclePosX instead.
 */
#define SIG_ObstacleDataA1_ObstaclePosX 0, 0, 8, 13

/**
 * Signal ObstaclePosX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_ObstaclePosX or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_ObstaclePosX 0, 0, 8, 13, 0

/**
 * Get signal ObstaclePosX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_ObstaclePosX(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 8))

/**
 * Set signal ObstaclePosX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_ObstaclePosX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[2] &= ~(0x1f << 0);                                                                                        \
        buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x1f) << 0;                                                       \
    }

/**
 * Set signal ObstaclePosX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_ObstaclePosX(buf) SET_ObstacleDataA1_ObstaclePosX(buf, 0)

/**
 * Signal ObstaclePosX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_ObstaclePosX(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosX raw initial value.
 */
#define START_ObstacleDataA1_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw minimum value.
 */
#define MIN_ObstacleDataA1_ObstaclePosX 0

/**
 * Signal ObstaclePosX raw maximum value.
 */
#define MAX_ObstacleDataA1_ObstaclePosX 8176

/**
 * Signal ObstaclePosX raw offset value.
 */
#define OFF_ObstacleDataA1_ObstaclePosX -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA1_ObstaclePosY Signal ObstaclePosY of Message ObstacleDataA1 (0x420)
 *
 * the lateral distance to the middle of the RL and RR corners, positive to the left
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal ObstaclePosY configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_ObstaclePosY and \ref GET_ObstacleDataA1_ObstaclePosY instead.
 */
#define SIG_ObstacleDataA1_ObstaclePosY 0, 0, 21, 13

/**
 * Signal ObstaclePosY setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_ObstaclePosY or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_ObstaclePosY 0, 0, 21, 13, 0

/**
 * Get signal ObstaclePosY from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_ObstaclePosY(buf)                                                                           \
    (0 | (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) | (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) |       \
     (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x03) << 11))

/**
 * Set signal ObstaclePosY in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_ObstaclePosY(buf, val)                                                                      \
    {                                                                                                                  \
        buf[2] &= ~(0x07 << 5);                                                                                        \
        buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0;                                                       \
        buf[4] &= ~(0x03 << 0);                                                                                        \
        buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x03) << 0;                                                      \
    }

/**
 * Set signal ObstaclePosY in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_ObstaclePosY(buf) SET_ObstacleDataA1_ObstaclePosY(buf, 0)

/**
 * Signal ObstaclePosY value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_ObstaclePosY(x, fmt) ((x)*fmt / 16 + fmt * (-256))

/**
 * Signal ObstaclePosY raw initial value.
 */
#define START_ObstacleDataA1_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw minimum value.
 */
#define MIN_ObstacleDataA1_ObstaclePosY 0

/**
 * Signal ObstaclePosY raw maximum value.
 */
#define MAX_ObstacleDataA1_ObstaclePosY 8176

/**
 * Signal ObstaclePosY raw offset value.
 */
#define OFF_ObstacleDataA1_ObstaclePosY -4096

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA1_BlinkerInfo Signal BlinkerInfo of Message ObstacleDataA1 (0x420)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA1_BlinkerInfo.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal BlinkerInfo configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_BlinkerInfo and \ref GET_ObstacleDataA1_BlinkerInfo instead.
 */
#define SIG_ObstacleDataA1_BlinkerInfo 0, 0, 34, 3

/**
 * Signal BlinkerInfo setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_BlinkerInfo or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_BlinkerInfo 0, 0, 34, 3, 0

/**
 * Get signal BlinkerInfo from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_BlinkerInfo(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 2) & 0x07) << 0))

/**
 * Set signal BlinkerInfo in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_BlinkerInfo(buf, val)                                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 2);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal BlinkerInfo in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_BlinkerInfo(buf) SET_ObstacleDataA1_BlinkerInfo(buf, 0)

/**
 * Signal BlinkerInfo value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_BlinkerInfo(x, fmt) ((x)*fmt)

/**
 * Signal BlinkerInfo raw initial value.
 */
#define START_ObstacleDataA1_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw minimum value.
 */
#define MIN_ObstacleDataA1_BlinkerInfo 0

/**
 * Signal BlinkerInfo raw maximum value.
 */
#define MAX_ObstacleDataA1_BlinkerInfo 4

/**
 * Signal BlinkerInfo raw offset value.
 */
#define OFF_ObstacleDataA1_BlinkerInfo 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA1_BlinkerInfo Value Table for Signal BlinkerInfo in Message ObstacleDataA1 (0x420)
 *
 * Enum values defined for \ref SIG_ObstacleDataA1_BlinkerInfo.
 *
 * @ingroup SIG_ObstacleDataA1_BlinkerInfo
 */

/**
 * Value table ObstacleDataA1_BlinkerInfo entry both.
 *
 * @ingroup ENUM_ObstacleDataA1_BlinkerInfo
 */
#define ObstacleDataA1_BlinkerInfo_both 4

/**
 * Value table ObstacleDataA1_BlinkerInfo entry right.
 *
 * @ingroup ENUM_ObstacleDataA1_BlinkerInfo
 */
#define ObstacleDataA1_BlinkerInfo_right 3

/**
 * Value table ObstacleDataA1_BlinkerInfo entry left.
 *
 * @ingroup ENUM_ObstacleDataA1_BlinkerInfo
 */
#define ObstacleDataA1_BlinkerInfo_left 2

/**
 * Value table ObstacleDataA1_BlinkerInfo entry off.
 *
 * @ingroup ENUM_ObstacleDataA1_BlinkerInfo
 */
#define ObstacleDataA1_BlinkerInfo_off 1

/**
 * Value table ObstacleDataA1_BlinkerInfo entry unavailable.
 *
 * @ingroup ENUM_ObstacleDataA1_BlinkerInfo
 */
#define ObstacleDataA1_BlinkerInfo_unavailable 0

/**
 * @defgroup SIG_ObstacleDataA1_Move_in_and_Out Signal Move_in_and_Out of Message ObstacleDataA1 (0x420)
 *
 * The signal is based on our estimation of where the target is now relatively to the lanes, its rate of change, and our
 * estimation of where it is going to be within one second.
 *
 * Contains the value table \ref ENUM_ObstacleDataA1_Move_in_and_Out.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal Move_in_and_Out configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_Move_in_and_Out and \ref GET_ObstacleDataA1_Move_in_and_Out instead.
 */
#define SIG_ObstacleDataA1_Move_in_and_Out 0, 0, 37, 3

/**
 * Signal Move_in_and_Out setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_Move_in_and_Out or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_Move_in_and_Out 0, 0, 37, 3, 0

/**
 * Get signal Move_in_and_Out from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_Move_in_and_Out(buf) (0 | (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0))

/**
 * Set signal Move_in_and_Out in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_Move_in_and_Out(buf, val)                                                                   \
    {                                                                                                                  \
        buf[4] &= ~(0x07 << 5);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5;                                                                 \
    }

/**
 * Set signal Move_in_and_Out in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_Move_in_and_Out(buf) SET_ObstacleDataA1_Move_in_and_Out(buf, 0)

/**
 * Signal Move_in_and_Out value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_Move_in_and_Out(x, fmt) ((x)*fmt)

/**
 * Signal Move_in_and_Out raw initial value.
 */
#define START_ObstacleDataA1_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw minimum value.
 */
#define MIN_ObstacleDataA1_Move_in_and_Out 0

/**
 * Signal Move_in_and_Out raw maximum value.
 */
#define MAX_ObstacleDataA1_Move_in_and_Out 4

/**
 * Signal Move_in_and_Out raw offset value.
 */
#define OFF_ObstacleDataA1_Move_in_and_Out 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA1_Move_in_and_Out Value Table for Signal Move_in_and_Out in Message ObstacleDataA1
 * (0x420)
 *
 * Enum values defined for \ref SIG_ObstacleDataA1_Move_in_and_Out.
 *
 * @ingroup SIG_ObstacleDataA1_Move_in_and_Out
 */

/**
 * Value table ObstacleDataA1_Move_in_and_Out entry cut_out.
 *
 * @ingroup ENUM_ObstacleDataA1_Move_in_and_Out
 */
#define ObstacleDataA1_Move_in_and_Out_cut_out 4

/**
 * Value table ObstacleDataA1_Move_in_and_Out entry cut_in.
 *
 * @ingroup ENUM_ObstacleDataA1_Move_in_and_Out
 */
#define ObstacleDataA1_Move_in_and_Out_cut_in 3

/**
 * Value table ObstacleDataA1_Move_in_and_Out entry out_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA1_Move_in_and_Out
 */
#define ObstacleDataA1_Move_in_and_Out_out_host_lane 2

/**
 * Value table ObstacleDataA1_Move_in_and_Out entry in_host_lane.
 *
 * @ingroup ENUM_ObstacleDataA1_Move_in_and_Out
 */
#define ObstacleDataA1_Move_in_and_Out_in_host_lane 1

/**
 * Value table ObstacleDataA1_Move_in_and_Out entry undefined.
 *
 * @ingroup ENUM_ObstacleDataA1_Move_in_and_Out
 */
#define ObstacleDataA1_Move_in_and_Out_undefined 0

/**
 * @defgroup SIG_ObstacleDataA1_ObstacleVelX Signal ObstacleVelX of Message ObstacleDataA1 (0x420)
 *
 * Relative longitudinal speed of the ego vehicle
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal ObstacleVelX configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_ObstacleVelX and \ref GET_ObstacleDataA1_ObstacleVelX instead.
 */
#define SIG_ObstacleDataA1_ObstacleVelX 0, 1, 40, 12

/**
 * Signal ObstacleVelX setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_ObstacleVelX or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_ObstacleVelX 0, 1, 40, 12, 0

/**
 * Get signal ObstacleVelX from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_ObstacleVelX(buf)                                                                           \
    (0 | (uint16_t)(-(uint16_t)((buf[6] >> 3) & 0x01) << 12) | (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) |      \
     (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8))

/**
 * Set signal ObstacleVelX in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_ObstacleVelX(buf, val)                                                                      \
    {                                                                                                                  \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[6] &= ~(0x0f << 0);                                                                                        \
        buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0;                                                       \
    }

/**
 * Set signal ObstacleVelX in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_ObstacleVelX(buf) SET_ObstacleDataA1_ObstacleVelX(buf, 0)

/**
 * Signal ObstacleVelX value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_ObstacleVelX(x, fmt) ((x)*fmt / 16)

/**
 * Signal ObstacleVelX raw initial value.
 */
#define START_ObstacleDataA1_ObstacleVelX 0

/**
 * Signal ObstacleVelX raw minimum value.
 */
#define MIN_ObstacleDataA1_ObstacleVelX -2047

/**
 * Signal ObstacleVelX raw maximum value.
 */
#define MAX_ObstacleDataA1_ObstacleVelX 2047

/**
 * Signal ObstacleVelX raw offset value.
 */
#define OFF_ObstacleDataA1_ObstacleVelX 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleDataA1_ObstacleType Signal ObstacleType of Message ObstacleDataA1 (0x420)
 *
 * Obstacle type
 *
 * Contains the value table \ref ENUM_ObstacleDataA1_ObstacleType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal ObstacleType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_ObstacleType and \ref GET_ObstacleDataA1_ObstacleType instead.
 */
#define SIG_ObstacleDataA1_ObstacleType 0, 0, 52, 2

/**
 * Signal ObstacleType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_ObstacleType or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_ObstacleType 0, 0, 52, 2, 0

/**
 * Get signal ObstacleType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_ObstacleType(buf) (0 | (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x03) << 0))

/**
 * Set signal ObstacleType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_ObstacleType(buf, val)                                                                      \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 4);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 4;                                                                 \
    }

/**
 * Set signal ObstacleType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_ObstacleType(buf) SET_ObstacleDataA1_ObstacleType(buf, 0)

/**
 * Signal ObstacleType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_ObstacleType(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleType raw initial value.
 */
#define START_ObstacleDataA1_ObstacleType 0

/**
 * Signal ObstacleType raw minimum value.
 */
#define MIN_ObstacleDataA1_ObstacleType 0

/**
 * Signal ObstacleType raw maximum value.
 */
#define MAX_ObstacleDataA1_ObstacleType 3

/**
 * Signal ObstacleType raw offset value.
 */
#define OFF_ObstacleDataA1_ObstacleType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA1_ObstacleType Value Table for Signal ObstacleType in Message ObstacleDataA1 (0x420)
 *
 * Enum values defined for \ref SIG_ObstacleDataA1_ObstacleType.
 *
 * @ingroup SIG_ObstacleDataA1_ObstacleType
 */

/**
 * Value table ObstacleDataA1_ObstacleType entry General.
 *
 * Object
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleType
 */
#define ObstacleDataA1_ObstacleType_General 3

/**
 * Value table ObstacleDataA1_ObstacleType entry Cyclist.
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleType
 */
#define ObstacleDataA1_ObstacleType_Cyclist 2

/**
 * Value table ObstacleDataA1_ObstacleType entry Pedestrian.
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleType
 */
#define ObstacleDataA1_ObstacleType_Pedestrian 1

/**
 * Value table ObstacleDataA1_ObstacleType entry Vehicle.
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleType
 */
#define ObstacleDataA1_ObstacleType_Vehicle 0

/**
 * @defgroup SIG_ObstacleDataA1_VehicleSubType Signal VehicleSubType of Message ObstacleDataA1 (0x420)
 *
 * Vehicle sub type
 *
 * Contains the value table \ref ENUM_ObstacleDataA1_VehicleSubType.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal VehicleSubType configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_VehicleSubType and \ref GET_ObstacleDataA1_VehicleSubType instead.
 */
#define SIG_ObstacleDataA1_VehicleSubType 0, 0, 54, 4

/**
 * Signal VehicleSubType setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_VehicleSubType or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_VehicleSubType 0, 0, 54, 4, 0

/**
 * Get signal VehicleSubType from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_VehicleSubType(buf)                                                                         \
    (0 | (uint8_t)(+(uint8_t)((buf[6] >> 6) & 0x03) << 0) | (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 2))

/**
 * Set signal VehicleSubType in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_VehicleSubType(buf, val)                                                                    \
    {                                                                                                                  \
        buf[6] &= ~(0x03 << 6);                                                                                        \
        buf[6] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
        buf[7] &= ~(0x03 << 0);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 2) & 0x03) << 0;                                                                 \
    }

/**
 * Set signal VehicleSubType in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_VehicleSubType(buf) SET_ObstacleDataA1_VehicleSubType(buf, 0)

/**
 * Signal VehicleSubType value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_VehicleSubType(x, fmt) ((x)*fmt)

/**
 * Signal VehicleSubType raw initial value.
 */
#define START_ObstacleDataA1_VehicleSubType 0

/**
 * Signal VehicleSubType raw minimum value.
 */
#define MIN_ObstacleDataA1_VehicleSubType 0

/**
 * Signal VehicleSubType raw maximum value.
 */
#define MAX_ObstacleDataA1_VehicleSubType 15

/**
 * Signal VehicleSubType raw offset value.
 */
#define OFF_ObstacleDataA1_VehicleSubType 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA1_VehicleSubType Value Table for Signal VehicleSubType in Message ObstacleDataA1 (0x420)
 *
 * Enum values defined for \ref SIG_ObstacleDataA1_VehicleSubType.
 *
 * @ingroup SIG_ObstacleDataA1_VehicleSubType
 */

/**
 * Value table ObstacleDataA1_VehicleSubType entry Tiny_car.
 *
 * @ingroup ENUM_ObstacleDataA1_VehicleSubType
 */
#define ObstacleDataA1_VehicleSubType_Tiny_car 5

/**
 * Value table ObstacleDataA1_VehicleSubType entry Special_vehicle.
 *
 * @ingroup ENUM_ObstacleDataA1_VehicleSubType
 */
#define ObstacleDataA1_VehicleSubType_Special_vehicle 4

/**
 * Value table ObstacleDataA1_VehicleSubType entry Motors.
 *
 * @ingroup ENUM_ObstacleDataA1_VehicleSubType
 */
#define ObstacleDataA1_VehicleSubType_Motors 3

/**
 * Value table ObstacleDataA1_VehicleSubType entry Trucks.
 *
 * @ingroup ENUM_ObstacleDataA1_VehicleSubType
 */
#define ObstacleDataA1_VehicleSubType_Trucks 2

/**
 * Value table ObstacleDataA1_VehicleSubType entry Small_Medium_Car.
 *
 * @ingroup ENUM_ObstacleDataA1_VehicleSubType
 */
#define ObstacleDataA1_VehicleSubType_Small_Medium_Car 1

/**
 * Value table ObstacleDataA1_VehicleSubType entry Bus.
 *
 * @ingroup ENUM_ObstacleDataA1_VehicleSubType
 */
#define ObstacleDataA1_VehicleSubType_Bus 0

/**
 * @defgroup SIG_ObstacleDataA1_ObstacleStatus Signal ObstacleStatus of Message ObstacleDataA1 (0x420)
 *
 * Reseved. Not Implemented
 *
 * Contains the value table \ref ENUM_ObstacleDataA1_ObstacleStatus.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal ObstacleStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_ObstacleStatus and \ref GET_ObstacleDataA1_ObstacleStatus instead.
 */
#define SIG_ObstacleDataA1_ObstacleStatus 0, 0, 58, 3

/**
 * Signal ObstacleStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_ObstacleStatus or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_ObstacleStatus 0, 0, 58, 3, 0

/**
 * Get signal ObstacleStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_ObstacleStatus(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0))

/**
 * Set signal ObstacleStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_ObstacleStatus(buf, val)                                                                    \
    {                                                                                                                  \
        buf[7] &= ~(0x07 << 2);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2;                                                                 \
    }

/**
 * Set signal ObstacleStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_ObstacleStatus(buf) SET_ObstacleDataA1_ObstacleStatus(buf, 0)

/**
 * Signal ObstacleStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_ObstacleStatus(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleStatus raw initial value.
 */
#define START_ObstacleDataA1_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw minimum value.
 */
#define MIN_ObstacleDataA1_ObstacleStatus 0

/**
 * Signal ObstacleStatus raw maximum value.
 */
#define MAX_ObstacleDataA1_ObstacleStatus 7

/**
 * Signal ObstacleStatus raw offset value.
 */
#define OFF_ObstacleDataA1_ObstacleStatus 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA1_ObstacleStatus Value Table for Signal ObstacleStatus in Message ObstacleDataA1 (0x420)
 *
 * Enum values defined for \ref SIG_ObstacleDataA1_ObstacleStatus.
 *
 * @ingroup SIG_ObstacleDataA1_ObstacleStatus
 */

/**
 * Value table ObstacleDataA1_ObstacleStatus entry Unused.
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleStatus
 */
#define ObstacleDataA1_ObstacleStatus_Unused 6

/**
 * Value table ObstacleDataA1_ObstacleStatus entry Parked.
 *
 * never moved, BckLightsOff
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleStatus
 */
#define ObstacleDataA1_ObstacleStatus_Parked 5

/**
 * Value table ObstacleDataA1_ObstacleStatus entry Oncoming.
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleStatus
 */
#define ObstacleDataA1_ObstacleStatus_Oncoming 4

/**
 * Value table ObstacleDataA1_ObstacleStatus entry moving.
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleStatus
 */
#define ObstacleDataA1_ObstacleStatus_moving 3

/**
 * Value table ObstacleDataA1_ObstacleStatus entry stopped.
 *
 * (movable)
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleStatus
 */
#define ObstacleDataA1_ObstacleStatus_stopped 2

/**
 * Value table ObstacleDataA1_ObstacleStatus entry standing.
 *
 * neverMoved bckLightsOn
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleStatus
 */
#define ObstacleDataA1_ObstacleStatus_standing 1

/**
 * Value table ObstacleDataA1_ObstacleStatus entry not.
 *
 * defined
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleStatus
 */
#define ObstacleDataA1_ObstacleStatus_not 0

/**
 * @defgroup SIG_ObstacleDataA1_ObstacleBrakeLights Signal ObstacleBrakeLights of Message ObstacleDataA1 (0x420)
 *
 * Reserved. Not intergrated Vehicle light model
 *
 * Contains the value table \ref ENUM_ObstacleDataA1_ObstacleBrakeLights.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal ObstacleBrakeLights configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_ObstacleBrakeLights and \ref GET_ObstacleDataA1_ObstacleBrakeLights instead.
 */
#define SIG_ObstacleDataA1_ObstacleBrakeLights 0, 0, 61, 1

/**
 * Signal ObstacleBrakeLights setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_ObstacleBrakeLights or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_ObstacleBrakeLights 0, 0, 61, 1, 0

/**
 * Get signal ObstacleBrakeLights from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_ObstacleBrakeLights(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0))

/**
 * Set signal ObstacleBrakeLights in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_ObstacleBrakeLights(buf, val)                                                               \
    {                                                                                                                  \
        buf[7] &= ~(0x01 << 5);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5;                                                                 \
    }

/**
 * Set signal ObstacleBrakeLights in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_ObstacleBrakeLights(buf) SET_ObstacleDataA1_ObstacleBrakeLights(buf, 0)

/**
 * Signal ObstacleBrakeLights value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_ObstacleBrakeLights(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleBrakeLights raw initial value.
 */
#define START_ObstacleDataA1_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw minimum value.
 */
#define MIN_ObstacleDataA1_ObstacleBrakeLights 0

/**
 * Signal ObstacleBrakeLights raw maximum value.
 */
#define MAX_ObstacleDataA1_ObstacleBrakeLights 1

/**
 * Signal ObstacleBrakeLights raw offset value.
 */
#define OFF_ObstacleDataA1_ObstacleBrakeLights 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA1_ObstacleBrakeLights Value Table for Signal ObstacleBrakeLights in Message
 * ObstacleDataA1 (0x420)
 *
 * Enum values defined for \ref SIG_ObstacleDataA1_ObstacleBrakeLights.
 *
 * @ingroup SIG_ObstacleDataA1_ObstacleBrakeLights
 */

/**
 * Value table ObstacleDataA1_ObstacleBrakeLights entry object_s.
 *
 * object's brake lights are on
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleBrakeLights
 */
#define ObstacleDataA1_ObstacleBrakeLights_object_s 1

/**
 * Value table ObstacleDataA1_ObstacleBrakeLights entry object_s_0.
 *
 * object's brake lights are off
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleBrakeLights
 */
#define ObstacleDataA1_ObstacleBrakeLights_object_s_0 0

/**
 * @defgroup SIG_ObstacleDataA1_ObstacleValid Signal ObstacleValid of Message ObstacleDataA1 (0x420)
 *
 * Obstacle Valid info
 *
 * Contains the value table \ref ENUM_ObstacleDataA1_ObstacleValid.
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleDataA1
 * @{
 */

/**
 * Signal ObstacleValid configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleDataA1_ObstacleValid and \ref GET_ObstacleDataA1_ObstacleValid instead.
 */
#define SIG_ObstacleDataA1_ObstacleValid 0, 0, 62, 2

/**
 * Signal ObstacleValid setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleDataA1_ObstacleValid or \ref INIT_ObstacleDataA1 instead.
 */
#define SETUP_ObstacleDataA1_ObstacleValid 0, 0, 62, 2, 0

/**
 * Get signal ObstacleValid from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleDataA1_ObstacleValid(buf) (0 | (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0))

/**
 * Set signal ObstacleValid in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleDataA1_ObstacleValid(buf, val)                                                                     \
    {                                                                                                                  \
        buf[7] &= ~(0x03 << 6);                                                                                        \
        buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6;                                                                 \
    }

/**
 * Set signal ObstacleValid in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleDataA1_ObstacleValid(buf) SET_ObstacleDataA1_ObstacleValid(buf, 0)

/**
 * Signal ObstacleValid value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleDataA1_ObstacleValid(x, fmt) ((x)*fmt)

/**
 * Signal ObstacleValid raw initial value.
 */
#define START_ObstacleDataA1_ObstacleValid 0

/**
 * Signal ObstacleValid raw minimum value.
 */
#define MIN_ObstacleDataA1_ObstacleValid 0

/**
 * Signal ObstacleValid raw maximum value.
 */
#define MAX_ObstacleDataA1_ObstacleValid 2

/**
 * Signal ObstacleValid raw offset value.
 */
#define OFF_ObstacleDataA1_ObstacleValid 0

/**
 * @}
 */

/**
 * @defgroup ENUM_ObstacleDataA1_ObstacleValid Value Table for Signal ObstacleValid in Message ObstacleDataA1 (0x420)
 *
 * Enum values defined for \ref SIG_ObstacleDataA1_ObstacleValid.
 *
 * @ingroup SIG_ObstacleDataA1_ObstacleValid
 */

/**
 * Value table ObstacleDataA1_ObstacleValid entry older.
 *
 * valid
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleValid
 */
#define ObstacleDataA1_ObstacleValid_older 2

/**
 * Value table ObstacleDataA1_ObstacleValid entry new.
 *
 * valid (detected this frame)
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleValid
 */
#define ObstacleDataA1_ObstacleValid_new 1

/**
 * Value table ObstacleDataA1_ObstacleValid entry invalid.
 *
 * Obstacle(default value)
 *
 * @ingroup ENUM_ObstacleDataA1_ObstacleValid
 */
#define ObstacleDataA1_ObstacleValid_invalid 0

/**
 * @defgroup SIG_ObstacleInternalID0_Obstacle_Internal_ID1 Signal Obstacle_Internal_ID1 of Message ObstacleInternalID0
 * (0x413)
 *
 * Description: Obstacle_Internal ID mapping to Framework protocol
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleInternalID0
 * @{
 */

/**
 * Signal Obstacle_Internal_ID1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleInternalID0_Obstacle_Internal_ID1 and \ref GET_ObstacleInternalID0_Obstacle_Internal_ID1
 *instead.
 */
#define SIG_ObstacleInternalID0_Obstacle_Internal_ID1 0, 0, 0, 32

/**
 * Signal Obstacle_Internal_ID1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleInternalID0_Obstacle_Internal_ID1 or \ref INIT_ObstacleInternalID0 instead.
 */
#define SETUP_ObstacleInternalID0_Obstacle_Internal_ID1 0, 0, 0, 32, 0

/**
 * Get signal Obstacle_Internal_ID1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleInternalID0_Obstacle_Internal_ID1(buf)                                                             \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) |       \
     (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 16) | (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 24))

/**
 * Set signal Obstacle_Internal_ID1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleInternalID0_Obstacle_Internal_ID1(buf, val)                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= ((uint8_t)((ulong)(val) >> 16) & 0xff) << 0;                                                         \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((ulong)(val) >> 24) & 0xff) << 0;                                                         \
    }

/**
 * Set signal Obstacle_Internal_ID1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleInternalID0_Obstacle_Internal_ID1(buf) SET_ObstacleInternalID0_Obstacle_Internal_ID1(buf, 0)

/**
 * Signal Obstacle_Internal_ID1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleInternalID0_Obstacle_Internal_ID1(x, fmt) ((x)*fmt)

/**
 * Signal Obstacle_Internal_ID1 raw initial value.
 */
#define START_ObstacleInternalID0_Obstacle_Internal_ID1 0

/**
 * Signal Obstacle_Internal_ID1 raw minimum value.
 */
#define MIN_ObstacleInternalID0_Obstacle_Internal_ID1 0

/**
 * Signal Obstacle_Internal_ID1 raw maximum value.
 */
#define MAX_ObstacleInternalID0_Obstacle_Internal_ID1 4294967295

/**
 * Signal Obstacle_Internal_ID1 raw offset value.
 */
#define OFF_ObstacleInternalID0_Obstacle_Internal_ID1 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleInternalID0_Obstacle_Internal_ID2 Signal Obstacle_Internal_ID2 of Message ObstacleInternalID0
 * (0x413)
 *
 * Description: Obstacle_Internal ID mapping to Framework protocol
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleInternalID0
 * @{
 */

/**
 * Signal Obstacle_Internal_ID2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleInternalID0_Obstacle_Internal_ID2 and \ref GET_ObstacleInternalID0_Obstacle_Internal_ID2
 *instead.
 */
#define SIG_ObstacleInternalID0_Obstacle_Internal_ID2 0, 0, 32, 32

/**
 * Signal Obstacle_Internal_ID2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleInternalID0_Obstacle_Internal_ID2 or \ref INIT_ObstacleInternalID0 instead.
 */
#define SETUP_ObstacleInternalID0_Obstacle_Internal_ID2 0, 0, 32, 32, 0

/**
 * Get signal Obstacle_Internal_ID2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleInternalID0_Obstacle_Internal_ID2(buf)                                                             \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 8) |       \
     (ulong)(+(ulong)((buf[6] >> 0) & 0xff) << 16) | (ulong)(+(ulong)((buf[7] >> 0) & 0xff) << 24))

/**
 * Set signal Obstacle_Internal_ID2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleInternalID0_Obstacle_Internal_ID2(buf, val)                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0xff << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((ulong)(val) >> 16) & 0xff) << 0;                                                         \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((ulong)(val) >> 24) & 0xff) << 0;                                                         \
    }

/**
 * Set signal Obstacle_Internal_ID2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleInternalID0_Obstacle_Internal_ID2(buf) SET_ObstacleInternalID0_Obstacle_Internal_ID2(buf, 0)

/**
 * Signal Obstacle_Internal_ID2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleInternalID0_Obstacle_Internal_ID2(x, fmt) ((x)*fmt)

/**
 * Signal Obstacle_Internal_ID2 raw initial value.
 */
#define START_ObstacleInternalID0_Obstacle_Internal_ID2 0

/**
 * Signal Obstacle_Internal_ID2 raw minimum value.
 */
#define MIN_ObstacleInternalID0_Obstacle_Internal_ID2 0

/**
 * Signal Obstacle_Internal_ID2 raw maximum value.
 */
#define MAX_ObstacleInternalID0_Obstacle_Internal_ID2 4294967295

/**
 * Signal Obstacle_Internal_ID2 raw offset value.
 */
#define OFF_ObstacleInternalID0_Obstacle_Internal_ID2 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleInternalID1_Obstacle_Internal_ID3 Signal Obstacle_Internal_ID3 of Message ObstacleInternalID1
 * (0x414)
 *
 * Description: Obstacle_Internal ID mapping to Framework protocol
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleInternalID1
 * @{
 */

/**
 * Signal Obstacle_Internal_ID3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleInternalID1_Obstacle_Internal_ID3 and \ref GET_ObstacleInternalID1_Obstacle_Internal_ID3
 *instead.
 */
#define SIG_ObstacleInternalID1_Obstacle_Internal_ID3 0, 0, 0, 32

/**
 * Signal Obstacle_Internal_ID3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleInternalID1_Obstacle_Internal_ID3 or \ref INIT_ObstacleInternalID1 instead.
 */
#define SETUP_ObstacleInternalID1_Obstacle_Internal_ID3 0, 0, 0, 32, 0

/**
 * Get signal Obstacle_Internal_ID3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleInternalID1_Obstacle_Internal_ID3(buf)                                                             \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) |       \
     (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 16) | (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 24))

/**
 * Set signal Obstacle_Internal_ID3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleInternalID1_Obstacle_Internal_ID3(buf, val)                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= ((uint8_t)((ulong)(val) >> 16) & 0xff) << 0;                                                         \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((ulong)(val) >> 24) & 0xff) << 0;                                                         \
    }

/**
 * Set signal Obstacle_Internal_ID3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleInternalID1_Obstacle_Internal_ID3(buf) SET_ObstacleInternalID1_Obstacle_Internal_ID3(buf, 0)

/**
 * Signal Obstacle_Internal_ID3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleInternalID1_Obstacle_Internal_ID3(x, fmt) ((x)*fmt)

/**
 * Signal Obstacle_Internal_ID3 raw initial value.
 */
#define START_ObstacleInternalID1_Obstacle_Internal_ID3 0

/**
 * Signal Obstacle_Internal_ID3 raw minimum value.
 */
#define MIN_ObstacleInternalID1_Obstacle_Internal_ID3 0

/**
 * Signal Obstacle_Internal_ID3 raw maximum value.
 */
#define MAX_ObstacleInternalID1_Obstacle_Internal_ID3 4294967295

/**
 * Signal Obstacle_Internal_ID3 raw offset value.
 */
#define OFF_ObstacleInternalID1_Obstacle_Internal_ID3 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleInternalID1_Obstacle_Internal_ID4 Signal Obstacle_Internal_ID4 of Message ObstacleInternalID1
 * (0x414)
 *
 * Description: Obstacle_Internal ID mapping to Framework protocol
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleInternalID1
 * @{
 */

/**
 * Signal Obstacle_Internal_ID4 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleInternalID1_Obstacle_Internal_ID4 and \ref GET_ObstacleInternalID1_Obstacle_Internal_ID4
 *instead.
 */
#define SIG_ObstacleInternalID1_Obstacle_Internal_ID4 0, 0, 32, 32

/**
 * Signal Obstacle_Internal_ID4 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleInternalID1_Obstacle_Internal_ID4 or \ref INIT_ObstacleInternalID1 instead.
 */
#define SETUP_ObstacleInternalID1_Obstacle_Internal_ID4 0, 0, 32, 32, 0

/**
 * Get signal Obstacle_Internal_ID4 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleInternalID1_Obstacle_Internal_ID4(buf)                                                             \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 8) |       \
     (ulong)(+(ulong)((buf[6] >> 0) & 0xff) << 16) | (ulong)(+(ulong)((buf[7] >> 0) & 0xff) << 24))

/**
 * Set signal Obstacle_Internal_ID4 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleInternalID1_Obstacle_Internal_ID4(buf, val)                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0xff << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((ulong)(val) >> 16) & 0xff) << 0;                                                         \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((ulong)(val) >> 24) & 0xff) << 0;                                                         \
    }

/**
 * Set signal Obstacle_Internal_ID4 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleInternalID1_Obstacle_Internal_ID4(buf) SET_ObstacleInternalID1_Obstacle_Internal_ID4(buf, 0)

/**
 * Signal Obstacle_Internal_ID4 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleInternalID1_Obstacle_Internal_ID4(x, fmt) ((x)*fmt)

/**
 * Signal Obstacle_Internal_ID4 raw initial value.
 */
#define START_ObstacleInternalID1_Obstacle_Internal_ID4 0

/**
 * Signal Obstacle_Internal_ID4 raw minimum value.
 */
#define MIN_ObstacleInternalID1_Obstacle_Internal_ID4 0

/**
 * Signal Obstacle_Internal_ID4 raw maximum value.
 */
#define MAX_ObstacleInternalID1_Obstacle_Internal_ID4 4294967295

/**
 * Signal Obstacle_Internal_ID4 raw offset value.
 */
#define OFF_ObstacleInternalID1_Obstacle_Internal_ID4 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleInternalID2_Obstacle_Internal_ID5 Signal Obstacle_Internal_ID5 of Message ObstacleInternalID2
 * (0x415)
 *
 * Description: Obstacle_Internal ID mapping to Framework protocol
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleInternalID2
 * @{
 */

/**
 * Signal Obstacle_Internal_ID5 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleInternalID2_Obstacle_Internal_ID5 and \ref GET_ObstacleInternalID2_Obstacle_Internal_ID5
 *instead.
 */
#define SIG_ObstacleInternalID2_Obstacle_Internal_ID5 0, 0, 0, 32

/**
 * Signal Obstacle_Internal_ID5 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleInternalID2_Obstacle_Internal_ID5 or \ref INIT_ObstacleInternalID2 instead.
 */
#define SETUP_ObstacleInternalID2_Obstacle_Internal_ID5 0, 0, 0, 32, 0

/**
 * Get signal Obstacle_Internal_ID5 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleInternalID2_Obstacle_Internal_ID5(buf)                                                             \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) |       \
     (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 16) | (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 24))

/**
 * Set signal Obstacle_Internal_ID5 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleInternalID2_Obstacle_Internal_ID5(buf, val)                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= ((uint8_t)((ulong)(val) >> 16) & 0xff) << 0;                                                         \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((ulong)(val) >> 24) & 0xff) << 0;                                                         \
    }

/**
 * Set signal Obstacle_Internal_ID5 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleInternalID2_Obstacle_Internal_ID5(buf) SET_ObstacleInternalID2_Obstacle_Internal_ID5(buf, 0)

/**
 * Signal Obstacle_Internal_ID5 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleInternalID2_Obstacle_Internal_ID5(x, fmt) ((x)*fmt)

/**
 * Signal Obstacle_Internal_ID5 raw initial value.
 */
#define START_ObstacleInternalID2_Obstacle_Internal_ID5 0

/**
 * Signal Obstacle_Internal_ID5 raw minimum value.
 */
#define MIN_ObstacleInternalID2_Obstacle_Internal_ID5 0

/**
 * Signal Obstacle_Internal_ID5 raw maximum value.
 */
#define MAX_ObstacleInternalID2_Obstacle_Internal_ID5 4294967295

/**
 * Signal Obstacle_Internal_ID5 raw offset value.
 */
#define OFF_ObstacleInternalID2_Obstacle_Internal_ID5 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleInternalID2_Obstacle_Internal_ID6 Signal Obstacle_Internal_ID6 of Message ObstacleInternalID2
 * (0x415)
 *
 * Description: Obstacle_Internal ID mapping to Framework protocol
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleInternalID2
 * @{
 */

/**
 * Signal Obstacle_Internal_ID6 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleInternalID2_Obstacle_Internal_ID6 and \ref GET_ObstacleInternalID2_Obstacle_Internal_ID6
 *instead.
 */
#define SIG_ObstacleInternalID2_Obstacle_Internal_ID6 0, 0, 32, 32

/**
 * Signal Obstacle_Internal_ID6 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleInternalID2_Obstacle_Internal_ID6 or \ref INIT_ObstacleInternalID2 instead.
 */
#define SETUP_ObstacleInternalID2_Obstacle_Internal_ID6 0, 0, 32, 32, 0

/**
 * Get signal Obstacle_Internal_ID6 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleInternalID2_Obstacle_Internal_ID6(buf)                                                             \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 8) |       \
     (ulong)(+(ulong)((buf[6] >> 0) & 0xff) << 16) | (ulong)(+(ulong)((buf[7] >> 0) & 0xff) << 24))

/**
 * Set signal Obstacle_Internal_ID6 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleInternalID2_Obstacle_Internal_ID6(buf, val)                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0xff << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((ulong)(val) >> 16) & 0xff) << 0;                                                         \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((ulong)(val) >> 24) & 0xff) << 0;                                                         \
    }

/**
 * Set signal Obstacle_Internal_ID6 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleInternalID2_Obstacle_Internal_ID6(buf) SET_ObstacleInternalID2_Obstacle_Internal_ID6(buf, 0)

/**
 * Signal Obstacle_Internal_ID6 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleInternalID2_Obstacle_Internal_ID6(x, fmt) ((x)*fmt)

/**
 * Signal Obstacle_Internal_ID6 raw initial value.
 */
#define START_ObstacleInternalID2_Obstacle_Internal_ID6 0

/**
 * Signal Obstacle_Internal_ID6 raw minimum value.
 */
#define MIN_ObstacleInternalID2_Obstacle_Internal_ID6 0

/**
 * Signal Obstacle_Internal_ID6 raw maximum value.
 */
#define MAX_ObstacleInternalID2_Obstacle_Internal_ID6 4294967295

/**
 * Signal Obstacle_Internal_ID6 raw offset value.
 */
#define OFF_ObstacleInternalID2_Obstacle_Internal_ID6 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleInternalID3_Obstacle_Internal_ID7 Signal Obstacle_Internal_ID7 of Message ObstacleInternalID3
 * (0x416)
 *
 * Description: Obstacle_Internal ID mapping to Framework protocol
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleInternalID3
 * @{
 */

/**
 * Signal Obstacle_Internal_ID7 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleInternalID3_Obstacle_Internal_ID7 and \ref GET_ObstacleInternalID3_Obstacle_Internal_ID7
 *instead.
 */
#define SIG_ObstacleInternalID3_Obstacle_Internal_ID7 0, 0, 0, 32

/**
 * Signal Obstacle_Internal_ID7 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleInternalID3_Obstacle_Internal_ID7 or \ref INIT_ObstacleInternalID3 instead.
 */
#define SETUP_ObstacleInternalID3_Obstacle_Internal_ID7 0, 0, 0, 32, 0

/**
 * Get signal Obstacle_Internal_ID7 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleInternalID3_Obstacle_Internal_ID7(buf)                                                             \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) |       \
     (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 16) | (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 24))

/**
 * Set signal Obstacle_Internal_ID7 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleInternalID3_Obstacle_Internal_ID7(buf, val)                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= ((uint8_t)((ulong)(val) >> 16) & 0xff) << 0;                                                         \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((ulong)(val) >> 24) & 0xff) << 0;                                                         \
    }

/**
 * Set signal Obstacle_Internal_ID7 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleInternalID3_Obstacle_Internal_ID7(buf) SET_ObstacleInternalID3_Obstacle_Internal_ID7(buf, 0)

/**
 * Signal Obstacle_Internal_ID7 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleInternalID3_Obstacle_Internal_ID7(x, fmt) ((x)*fmt)

/**
 * Signal Obstacle_Internal_ID7 raw initial value.
 */
#define START_ObstacleInternalID3_Obstacle_Internal_ID7 0

/**
 * Signal Obstacle_Internal_ID7 raw minimum value.
 */
#define MIN_ObstacleInternalID3_Obstacle_Internal_ID7 0

/**
 * Signal Obstacle_Internal_ID7 raw maximum value.
 */
#define MAX_ObstacleInternalID3_Obstacle_Internal_ID7 4294967295

/**
 * Signal Obstacle_Internal_ID7 raw offset value.
 */
#define OFF_ObstacleInternalID3_Obstacle_Internal_ID7 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleInternalID3_Obstacle_Internal_ID8 Signal Obstacle_Internal_ID8 of Message ObstacleInternalID3
 * (0x416)
 *
 * Description: Obstacle_Internal ID mapping to Framework protocol
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleInternalID3
 * @{
 */

/**
 * Signal Obstacle_Internal_ID8 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleInternalID3_Obstacle_Internal_ID8 and \ref GET_ObstacleInternalID3_Obstacle_Internal_ID8
 *instead.
 */
#define SIG_ObstacleInternalID3_Obstacle_Internal_ID8 0, 0, 32, 32

/**
 * Signal Obstacle_Internal_ID8 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleInternalID3_Obstacle_Internal_ID8 or \ref INIT_ObstacleInternalID3 instead.
 */
#define SETUP_ObstacleInternalID3_Obstacle_Internal_ID8 0, 0, 32, 32, 0

/**
 * Get signal Obstacle_Internal_ID8 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleInternalID3_Obstacle_Internal_ID8(buf)                                                             \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 8) |       \
     (ulong)(+(ulong)((buf[6] >> 0) & 0xff) << 16) | (ulong)(+(ulong)((buf[7] >> 0) & 0xff) << 24))

/**
 * Set signal Obstacle_Internal_ID8 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleInternalID3_Obstacle_Internal_ID8(buf, val)                                                        \
    {                                                                                                                  \
        buf[4] &= ~(0xff << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((ulong)(val) >> 16) & 0xff) << 0;                                                         \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((ulong)(val) >> 24) & 0xff) << 0;                                                         \
    }

/**
 * Set signal Obstacle_Internal_ID8 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleInternalID3_Obstacle_Internal_ID8(buf) SET_ObstacleInternalID3_Obstacle_Internal_ID8(buf, 0)

/**
 * Signal Obstacle_Internal_ID8 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleInternalID3_Obstacle_Internal_ID8(x, fmt) ((x)*fmt)

/**
 * Signal Obstacle_Internal_ID8 raw initial value.
 */
#define START_ObstacleInternalID3_Obstacle_Internal_ID8 0

/**
 * Signal Obstacle_Internal_ID8 raw minimum value.
 */
#define MIN_ObstacleInternalID3_Obstacle_Internal_ID8 0

/**
 * Signal Obstacle_Internal_ID8 raw maximum value.
 */
#define MAX_ObstacleInternalID3_Obstacle_Internal_ID8 4294967295

/**
 * Signal Obstacle_Internal_ID8 raw offset value.
 */
#define OFF_ObstacleInternalID3_Obstacle_Internal_ID8 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleInternalID4_Obstacle_Internal_ID9 Signal Obstacle_Internal_ID9 of Message ObstacleInternalID4
 * (0x417)
 *
 * Description: Obstacle_Internal ID mapping to Framework protocol
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleInternalID4
 * @{
 */

/**
 * Signal Obstacle_Internal_ID9 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleInternalID4_Obstacle_Internal_ID9 and \ref GET_ObstacleInternalID4_Obstacle_Internal_ID9
 *instead.
 */
#define SIG_ObstacleInternalID4_Obstacle_Internal_ID9 0, 0, 0, 32

/**
 * Signal Obstacle_Internal_ID9 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleInternalID4_Obstacle_Internal_ID9 or \ref INIT_ObstacleInternalID4 instead.
 */
#define SETUP_ObstacleInternalID4_Obstacle_Internal_ID9 0, 0, 0, 32, 0

/**
 * Get signal Obstacle_Internal_ID9 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleInternalID4_Obstacle_Internal_ID9(buf)                                                             \
    (0 | (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) |       \
     (ulong)(+(ulong)((buf[2] >> 0) & 0xff) << 16) | (ulong)(+(ulong)((buf[3] >> 0) & 0xff) << 24))

/**
 * Set signal Obstacle_Internal_ID9 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleInternalID4_Obstacle_Internal_ID9(buf, val)                                                        \
    {                                                                                                                  \
        buf[0] &= ~(0xff << 0);                                                                                        \
        buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[1] &= ~(0xff << 0);                                                                                        \
        buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
        buf[2] &= ~(0xff << 0);                                                                                        \
        buf[2] |= ((uint8_t)((ulong)(val) >> 16) & 0xff) << 0;                                                         \
        buf[3] &= ~(0xff << 0);                                                                                        \
        buf[3] |= ((uint8_t)((ulong)(val) >> 24) & 0xff) << 0;                                                         \
    }

/**
 * Set signal Obstacle_Internal_ID9 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleInternalID4_Obstacle_Internal_ID9(buf) SET_ObstacleInternalID4_Obstacle_Internal_ID9(buf, 0)

/**
 * Signal Obstacle_Internal_ID9 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleInternalID4_Obstacle_Internal_ID9(x, fmt) ((x)*fmt)

/**
 * Signal Obstacle_Internal_ID9 raw initial value.
 */
#define START_ObstacleInternalID4_Obstacle_Internal_ID9 0

/**
 * Signal Obstacle_Internal_ID9 raw minimum value.
 */
#define MIN_ObstacleInternalID4_Obstacle_Internal_ID9 0

/**
 * Signal Obstacle_Internal_ID9 raw maximum value.
 */
#define MAX_ObstacleInternalID4_Obstacle_Internal_ID9 4294967295

/**
 * Signal Obstacle_Internal_ID9 raw offset value.
 */
#define OFF_ObstacleInternalID4_Obstacle_Internal_ID9 0

/**
 * @}
 */

/**
 * @defgroup SIG_ObstacleInternalID4_Obstacle_Internal_ID10 Signal Obstacle_Internal_ID10 of Message ObstacleInternalID4
 * (0x417)
 *
 * Description: Obstacle_Internal ID mapping to Framework protocol
 *
 * Received by the ECUs:
 * - \ref ECU_Matrix
 *
 * @ingroup MSG_ObstacleInternalID4
 * @{
 */

/**
 * Signal Obstacle_Internal_ID10 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ObstacleInternalID4_Obstacle_Internal_ID10 and \ref GET_ObstacleInternalID4_Obstacle_Internal_ID10
 *instead.
 */
#define SIG_ObstacleInternalID4_Obstacle_Internal_ID10 0, 0, 32, 32

/**
 * Signal Obstacle_Internal_ID10 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ObstacleInternalID4_Obstacle_Internal_ID10 or \ref INIT_ObstacleInternalID4 instead.
 */
#define SETUP_ObstacleInternalID4_Obstacle_Internal_ID10 0, 0, 32, 32, 0

/**
 * Get signal Obstacle_Internal_ID10 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ObstacleInternalID4_Obstacle_Internal_ID10(buf)                                                            \
    (0 | (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) | (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 8) |       \
     (ulong)(+(ulong)((buf[6] >> 0) & 0xff) << 16) | (ulong)(+(ulong)((buf[7] >> 0) & 0xff) << 24))

/**
 * Set signal Obstacle_Internal_ID10 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ObstacleInternalID4_Obstacle_Internal_ID10(buf, val)                                                       \
    {                                                                                                                  \
        buf[4] &= ~(0xff << 0);                                                                                        \
        buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0;                                                                 \
        buf[5] &= ~(0xff << 0);                                                                                        \
        buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0;                                                       \
        buf[6] &= ~(0xff << 0);                                                                                        \
        buf[6] |= ((uint8_t)((ulong)(val) >> 16) & 0xff) << 0;                                                         \
        buf[7] &= ~(0xff << 0);                                                                                        \
        buf[7] |= ((uint8_t)((ulong)(val) >> 24) & 0xff) << 0;                                                         \
    }

/**
 * Set signal Obstacle_Internal_ID10 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ObstacleInternalID4_Obstacle_Internal_ID10(buf) SET_ObstacleInternalID4_Obstacle_Internal_ID10(buf, 0)

/**
 * Signal Obstacle_Internal_ID10 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ObstacleInternalID4_Obstacle_Internal_ID10(x, fmt) ((x)*fmt)

/**
 * Signal Obstacle_Internal_ID10 raw initial value.
 */
#define START_ObstacleInternalID4_Obstacle_Internal_ID10 0

/**
 * Signal Obstacle_Internal_ID10 raw minimum value.
 */
#define MIN_ObstacleInternalID4_Obstacle_Internal_ID10 0

/**
 * Signal Obstacle_Internal_ID10 raw maximum value.
 */
#define MAX_ObstacleInternalID4_Obstacle_Internal_ID10 4294967295

/**
 * Signal Obstacle_Internal_ID10 raw offset value.
 */
#define OFF_ObstacleInternalID4_Obstacle_Internal_ID10 0

/**
 * @}
 */

#endif
