// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p19
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL__HOME_YUEPF_DOCUMENTS_CODE_APA_PROJECT_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_PARKING_MSG_INCLUDE_HOLO_PARKING_MSG_CORE_TYPESC_YMVNXH_H_
#define _TAO_IDL__HOME_YUEPF_DOCUMENTS_CODE_APA_PROJECT_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_PARKING_MSG_INCLUDE_HOLO_PARKING_MSG_CORE_TYPESC_YMVNXH_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace holo_parking_msg
{

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:38

  namespace core
  {

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::Boolean bool_t;
    typedef ::CORBA::Boolean_out bool_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_bool_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::Char char_t;
    typedef ::CORBA::Char_out char_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_char_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::WChar _cxx_wchar_t;
    typedef ::CORBA::WChar_out _cxx_wchar_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc__cxx_wchar_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::Char int8_t;
    typedef ::CORBA::Char_out int8_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_int8_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::Octet uint8_t;
    typedef ::CORBA::Octet_out uint8_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_uint8_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::Short int16_t;
    typedef ::CORBA::Short_out int16_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_int16_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::UShort uint16_t;
    typedef ::CORBA::UShort_out uint16_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_uint16_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::Long int32_t;
    typedef ::CORBA::Long_out int32_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_int32_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::ULong uint32_t;
    typedef ::CORBA::ULong_out uint32_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_uint32_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::LongLong int64_t;
    typedef ::CORBA::LongLong_out int64_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_int64_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::ULongLong uint64_t;
    typedef ::CORBA::ULongLong_out uint64_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_uint64_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::Float float32_t;
    typedef ::CORBA::Float_out float32_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_float32_t;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef ::CORBA::Double float64_t;
    typedef ::CORBA::Double_out float64_t_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_float64_t;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_BOOLSEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_BOOLSEQUENCE_CH_

    class BoolSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          BoolSequence
        >
      BoolSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          BoolSequence
        >
      BoolSequence_out;

    class  BoolSequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Boolean
            >
    {
    public:
      BoolSequence (void);
      BoolSequence ( ::CORBA::ULong max);
      BoolSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Boolean* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      BoolSequence (const BoolSequence &) = default;
      BoolSequence (BoolSequence &&) = default;
      BoolSequence& operator= (const BoolSequence &) = default;
      BoolSequence& operator= (BoolSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~BoolSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef BoolSequence_var _var_type;
      typedef BoolSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_BoolSequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_CHARSEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_CHARSEQUENCE_CH_

    class CharSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          CharSequence
        >
      CharSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          CharSequence
        >
      CharSequence_out;

    class  CharSequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Char
            >
    {
    public:
      CharSequence (void);
      CharSequence ( ::CORBA::ULong max);
      CharSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Char* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      CharSequence (const CharSequence &) = default;
      CharSequence (CharSequence &&) = default;
      CharSequence& operator= (const CharSequence &) = default;
      CharSequence& operator= (CharSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~CharSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef CharSequence_var _var_type;
      typedef CharSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_CharSequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_WCHARSEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_WCHARSEQUENCE_CH_

    class WcharSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          WcharSequence
        >
      WcharSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          WcharSequence
        >
      WcharSequence_out;

    class  WcharSequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::WChar
            >
    {
    public:
      WcharSequence (void);
      WcharSequence ( ::CORBA::ULong max);
      WcharSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::WChar* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      WcharSequence (const WcharSequence &) = default;
      WcharSequence (WcharSequence &&) = default;
      WcharSequence& operator= (const WcharSequence &) = default;
      WcharSequence& operator= (WcharSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~WcharSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef WcharSequence_var _var_type;
      typedef WcharSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_WcharSequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_INT8SEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_INT8SEQUENCE_CH_

    class Int8Sequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Int8Sequence
        >
      Int8Sequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Int8Sequence
        >
      Int8Sequence_out;

    class  Int8Sequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Char
            >
    {
    public:
      Int8Sequence (void);
      Int8Sequence ( ::CORBA::ULong max);
      Int8Sequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Char* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Int8Sequence (const Int8Sequence &) = default;
      Int8Sequence (Int8Sequence &&) = default;
      Int8Sequence& operator= (const Int8Sequence &) = default;
      Int8Sequence& operator= (Int8Sequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Int8Sequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Int8Sequence_var _var_type;
      typedef Int8Sequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Int8Sequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_UINT8SEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_UINT8SEQUENCE_CH_

    class Uint8Sequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Uint8Sequence
        >
      Uint8Sequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Uint8Sequence
        >
      Uint8Sequence_out;

    class  Uint8Sequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Octet
            >
    {
    public:
      Uint8Sequence (void);
      Uint8Sequence ( ::CORBA::ULong max);
      Uint8Sequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Octet* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Uint8Sequence (const Uint8Sequence &) = default;
      Uint8Sequence (Uint8Sequence &&) = default;
      Uint8Sequence& operator= (const Uint8Sequence &) = default;
      Uint8Sequence& operator= (Uint8Sequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Uint8Sequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Uint8Sequence_var _var_type;
      typedef Uint8Sequence_out _out_type;

      static void _tao_any_destructor (void *);

      

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
      Uint8Sequence (
          ::CORBA::ULong length,
          const ACE_Message_Block* mb
        )
        : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Uint8Sequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_INT16SEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_INT16SEQUENCE_CH_

    class Int16Sequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Int16Sequence
        >
      Int16Sequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Int16Sequence
        >
      Int16Sequence_out;

    class  Int16Sequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Short
            >
    {
    public:
      Int16Sequence (void);
      Int16Sequence ( ::CORBA::ULong max);
      Int16Sequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Short* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Int16Sequence (const Int16Sequence &) = default;
      Int16Sequence (Int16Sequence &&) = default;
      Int16Sequence& operator= (const Int16Sequence &) = default;
      Int16Sequence& operator= (Int16Sequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Int16Sequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Int16Sequence_var _var_type;
      typedef Int16Sequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Int16Sequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_UINT16SEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_UINT16SEQUENCE_CH_

    class Uint16Sequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Uint16Sequence
        >
      Uint16Sequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Uint16Sequence
        >
      Uint16Sequence_out;

    class  Uint16Sequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::UShort
            >
    {
    public:
      Uint16Sequence (void);
      Uint16Sequence ( ::CORBA::ULong max);
      Uint16Sequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::UShort* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Uint16Sequence (const Uint16Sequence &) = default;
      Uint16Sequence (Uint16Sequence &&) = default;
      Uint16Sequence& operator= (const Uint16Sequence &) = default;
      Uint16Sequence& operator= (Uint16Sequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Uint16Sequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Uint16Sequence_var _var_type;
      typedef Uint16Sequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Uint16Sequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_INT32SEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_INT32SEQUENCE_CH_

    class Int32Sequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Int32Sequence
        >
      Int32Sequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Int32Sequence
        >
      Int32Sequence_out;

    class  Int32Sequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Long
            >
    {
    public:
      Int32Sequence (void);
      Int32Sequence ( ::CORBA::ULong max);
      Int32Sequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Long* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Int32Sequence (const Int32Sequence &) = default;
      Int32Sequence (Int32Sequence &&) = default;
      Int32Sequence& operator= (const Int32Sequence &) = default;
      Int32Sequence& operator= (Int32Sequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Int32Sequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Int32Sequence_var _var_type;
      typedef Int32Sequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Int32Sequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_UINT32SEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_UINT32SEQUENCE_CH_

    class Uint32Sequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Uint32Sequence
        >
      Uint32Sequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Uint32Sequence
        >
      Uint32Sequence_out;

    class  Uint32Sequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::ULong
            >
    {
    public:
      Uint32Sequence (void);
      Uint32Sequence ( ::CORBA::ULong max);
      Uint32Sequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::ULong* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Uint32Sequence (const Uint32Sequence &) = default;
      Uint32Sequence (Uint32Sequence &&) = default;
      Uint32Sequence& operator= (const Uint32Sequence &) = default;
      Uint32Sequence& operator= (Uint32Sequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Uint32Sequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Uint32Sequence_var _var_type;
      typedef Uint32Sequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Uint32Sequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_INT64SEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_INT64SEQUENCE_CH_

    class Int64Sequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Int64Sequence
        >
      Int64Sequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Int64Sequence
        >
      Int64Sequence_out;

    class  Int64Sequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::LongLong
            >
    {
    public:
      Int64Sequence (void);
      Int64Sequence ( ::CORBA::ULong max);
      Int64Sequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::LongLong* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Int64Sequence (const Int64Sequence &) = default;
      Int64Sequence (Int64Sequence &&) = default;
      Int64Sequence& operator= (const Int64Sequence &) = default;
      Int64Sequence& operator= (Int64Sequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Int64Sequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Int64Sequence_var _var_type;
      typedef Int64Sequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Int64Sequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_UINT64SEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_UINT64SEQUENCE_CH_

    class Uint64Sequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Uint64Sequence
        >
      Uint64Sequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Uint64Sequence
        >
      Uint64Sequence_out;

    class  Uint64Sequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::ULongLong
            >
    {
    public:
      Uint64Sequence (void);
      Uint64Sequence ( ::CORBA::ULong max);
      Uint64Sequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::ULongLong* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Uint64Sequence (const Uint64Sequence &) = default;
      Uint64Sequence (Uint64Sequence &&) = default;
      Uint64Sequence& operator= (const Uint64Sequence &) = default;
      Uint64Sequence& operator= (Uint64Sequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Uint64Sequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Uint64Sequence_var _var_type;
      typedef Uint64Sequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Uint64Sequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_FLOAT32SEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_FLOAT32SEQUENCE_CH_

    class Float32Sequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Float32Sequence
        >
      Float32Sequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Float32Sequence
        >
      Float32Sequence_out;

    class  Float32Sequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Float
            >
    {
    public:
      Float32Sequence (void);
      Float32Sequence ( ::CORBA::ULong max);
      Float32Sequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Float* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Float32Sequence (const Float32Sequence &) = default;
      Float32Sequence (Float32Sequence &&) = default;
      Float32Sequence& operator= (const Float32Sequence &) = default;
      Float32Sequence& operator= (Float32Sequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Float32Sequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Float32Sequence_var _var_type;
      typedef Float32Sequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Float32Sequence;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_PARKING_MSG_CORE_FLOAT64SEQUENCE_CH_)
#define _HOLO_PARKING_MSG_CORE_FLOAT64SEQUENCE_CH_

    class Float64Sequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Float64Sequence
        >
      Float64Sequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Float64Sequence
        >
      Float64Sequence_out;

    class  Float64Sequence
      : public
          ::TAO::unbounded_value_sequence<
              ::CORBA::Double
            >
    {
    public:
      Float64Sequence (void);
      Float64Sequence ( ::CORBA::ULong max);
      Float64Sequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Double* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Float64Sequence (const Float64Sequence &) = default;
      Float64Sequence (Float64Sequence &&) = default;
      Float64Sequence& operator= (const Float64Sequence &) = default;
      Float64Sequence& operator= (Float64Sequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Float64Sequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Float64Sequence_var _var_type;
      typedef Float64Sequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Float64Sequence;
  
  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:67
  
  } // module holo_parking_msg::core

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module holo_parking_msg

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::BoolSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::BoolSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::CharSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::CharSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::WcharSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::WcharSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::Int8Sequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::Int8Sequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::Uint8Sequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::Uint8Sequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::Int16Sequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::Int16Sequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::Uint16Sequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::Uint16Sequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::Int32Sequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::Int32Sequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::Uint32Sequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::Uint32Sequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::Int64Sequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::Int64Sequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::Uint64Sequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::Uint64Sequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::Float32Sequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::Float32Sequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_parking_msg::core::Float64Sequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_parking_msg::core::Float64Sequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::BoolSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::BoolSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::BoolSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::BoolSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::BoolSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::BoolSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::BoolSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::BoolSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::CharSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::CharSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::CharSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::CharSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::CharSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::CharSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::CharSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::CharSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::WcharSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::WcharSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::WcharSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::WcharSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::WcharSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::WcharSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::WcharSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::WcharSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::Int8Sequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::Int8Sequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::Int8Sequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::Int8Sequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::Int8Sequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::Int8Sequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::Int8Sequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::Int8Sequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::Uint8Sequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::Uint8Sequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::Uint8Sequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::Uint8Sequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::Uint8Sequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::Uint8Sequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::Uint8Sequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::Uint8Sequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::Int16Sequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::Int16Sequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::Int16Sequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::Int16Sequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::Int16Sequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::Int16Sequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::Int16Sequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::Int16Sequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::Uint16Sequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::Uint16Sequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::Uint16Sequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::Uint16Sequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::Uint16Sequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::Uint16Sequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::Uint16Sequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::Uint16Sequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::Int32Sequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::Int32Sequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::Int32Sequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::Int32Sequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::Int32Sequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::Int32Sequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::Int32Sequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::Int32Sequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::Uint32Sequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::Uint32Sequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::Uint32Sequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::Uint32Sequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::Uint32Sequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::Uint32Sequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::Uint32Sequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::Uint32Sequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::Int64Sequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::Int64Sequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::Int64Sequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::Int64Sequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::Int64Sequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::Int64Sequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::Int64Sequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::Int64Sequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::Uint64Sequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::Uint64Sequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::Uint64Sequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::Uint64Sequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::Uint64Sequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::Uint64Sequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::Uint64Sequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::Uint64Sequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::Float32Sequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::Float32Sequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::Float32Sequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::Float32Sequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::Float32Sequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::Float32Sequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::Float32Sequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::Float32Sequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_parking_msg
{
  
  namespace core
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_parking_msg::core::Float64Sequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_parking_msg::core::Float64Sequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_parking_msg::core::Float64Sequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_parking_msg::core::Float64Sequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_parking_msg::core::Float64Sequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_parking_msg::core::Float64Sequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_parking_msg::core::Float64Sequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_parking_msg::core::Float64Sequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_BoolSequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_BoolSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::BoolSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::BoolSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_BoolSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_CharSequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_CharSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::CharSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::CharSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_CharSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_WcharSequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_WcharSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::WcharSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::WcharSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_WcharSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_Int8Sequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_Int8Sequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::Int8Sequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::Int8Sequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_Int8Sequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_Uint8Sequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_Uint8Sequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::Uint8Sequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::Uint8Sequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_Uint8Sequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_Int16Sequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_Int16Sequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::Int16Sequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::Int16Sequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_Int16Sequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_Uint16Sequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_Uint16Sequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::Uint16Sequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::Uint16Sequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_Uint16Sequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_Int32Sequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_Int32Sequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::Int32Sequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::Int32Sequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_Int32Sequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_Uint32Sequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_Uint32Sequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::Uint32Sequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::Uint32Sequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_Uint32Sequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_Int64Sequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_Int64Sequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::Int64Sequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::Int64Sequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_Int64Sequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_Uint64Sequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_Uint64Sequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::Uint64Sequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::Uint64Sequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_Uint64Sequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_Float32Sequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_Float32Sequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::Float32Sequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::Float32Sequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_Float32Sequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_parking_msg_core_Float64Sequence_H_
#define _TAO_CDR_OP_holo_parking_msg_core_Float64Sequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_parking_msg::core::Float64Sequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_parking_msg::core::Float64Sequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_parking_msg_core_Float64Sequence_H_ */

// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "TypesC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

