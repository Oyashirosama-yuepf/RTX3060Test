// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidar_detection.proto

#ifndef PROTOBUF_INCLUDED_lidar_5fdetection_2eproto
#define PROTOBUF_INCLUDED_lidar_5fdetection_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_lidar_5fdetection_2eproto 

namespace protobuf_lidar_5fdetection_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_lidar_5fdetection_2eproto
namespace holo {
namespace perception {
namespace lidar_obstacle_detection {
class LidarDetectionConfig;
class LidarDetectionConfigDefaultTypeInternal;
extern LidarDetectionConfigDefaultTypeInternal _LidarDetectionConfig_default_instance_;
class ObjMergeThreshold;
class ObjMergeThresholdDefaultTypeInternal;
extern ObjMergeThresholdDefaultTypeInternal _ObjMergeThreshold_default_instance_;
}  // namespace lidar_obstacle_detection
}  // namespace perception
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::perception::lidar_obstacle_detection::LidarDetectionConfig* Arena::CreateMaybeMessage<::holo::perception::lidar_obstacle_detection::LidarDetectionConfig>(Arena*);
template<> ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold* Arena::CreateMaybeMessage<::holo::perception::lidar_obstacle_detection::ObjMergeThreshold>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace perception {
namespace lidar_obstacle_detection {

// ===================================================================

class ObjMergeThreshold : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.perception.lidar_obstacle_detection.ObjMergeThreshold) */ {
 public:
  ObjMergeThreshold();
  virtual ~ObjMergeThreshold();

  ObjMergeThreshold(const ObjMergeThreshold& from);

  inline ObjMergeThreshold& operator=(const ObjMergeThreshold& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjMergeThreshold(ObjMergeThreshold&& from) noexcept
    : ObjMergeThreshold() {
    *this = ::std::move(from);
  }

  inline ObjMergeThreshold& operator=(ObjMergeThreshold&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjMergeThreshold& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjMergeThreshold* internal_default_instance() {
    return reinterpret_cast<const ObjMergeThreshold*>(
               &_ObjMergeThreshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ObjMergeThreshold* other);
  friend void swap(ObjMergeThreshold& a, ObjMergeThreshold& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjMergeThreshold* New() const final {
    return CreateMaybeMessage<ObjMergeThreshold>(NULL);
  }

  ObjMergeThreshold* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjMergeThreshold>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjMergeThreshold& from);
  void MergeFrom(const ObjMergeThreshold& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjMergeThreshold* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float delta_x = 1;
  bool has_delta_x() const;
  void clear_delta_x();
  static const int kDeltaXFieldNumber = 1;
  float delta_x() const;
  void set_delta_x(float value);

  // optional float delta_y = 2;
  bool has_delta_y() const;
  void clear_delta_y();
  static const int kDeltaYFieldNumber = 2;
  float delta_y() const;
  void set_delta_y(float value);

  // optional float delta_vx = 3;
  bool has_delta_vx() const;
  void clear_delta_vx();
  static const int kDeltaVxFieldNumber = 3;
  float delta_vx() const;
  void set_delta_vx(float value);

  // optional float delta_vy = 4;
  bool has_delta_vy() const;
  void clear_delta_vy();
  static const int kDeltaVyFieldNumber = 4;
  float delta_vy() const;
  void set_delta_vy(float value);

  // @@protoc_insertion_point(class_scope:holo.perception.lidar_obstacle_detection.ObjMergeThreshold)
 private:
  void set_has_delta_x();
  void clear_has_delta_x();
  void set_has_delta_y();
  void clear_has_delta_y();
  void set_has_delta_vx();
  void clear_has_delta_vx();
  void set_has_delta_vy();
  void clear_has_delta_vy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float delta_x_;
  float delta_y_;
  float delta_vx_;
  float delta_vy_;
  friend struct ::protobuf_lidar_5fdetection_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LidarDetectionConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.perception.lidar_obstacle_detection.LidarDetectionConfig) */ {
 public:
  LidarDetectionConfig();
  virtual ~LidarDetectionConfig();

  LidarDetectionConfig(const LidarDetectionConfig& from);

  inline LidarDetectionConfig& operator=(const LidarDetectionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LidarDetectionConfig(LidarDetectionConfig&& from) noexcept
    : LidarDetectionConfig() {
    *this = ::std::move(from);
  }

  inline LidarDetectionConfig& operator=(LidarDetectionConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LidarDetectionConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarDetectionConfig* internal_default_instance() {
    return reinterpret_cast<const LidarDetectionConfig*>(
               &_LidarDetectionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LidarDetectionConfig* other);
  friend void swap(LidarDetectionConfig& a, LidarDetectionConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LidarDetectionConfig* New() const final {
    return CreateMaybeMessage<LidarDetectionConfig>(NULL);
  }

  LidarDetectionConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LidarDetectionConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LidarDetectionConfig& from);
  void MergeFrom(const LidarDetectionConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarDetectionConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string roi_config = 6;
  bool has_roi_config() const;
  void clear_roi_config();
  static const int kRoiConfigFieldNumber = 6;
  const ::std::string& roi_config() const;
  void set_roi_config(const ::std::string& value);
  #if LANG_CXX11
  void set_roi_config(::std::string&& value);
  #endif
  void set_roi_config(const char* value);
  void set_roi_config(const char* value, size_t size);
  ::std::string* mutable_roi_config();
  ::std::string* release_roi_config();
  void set_allocated_roi_config(::std::string* roi_config);

  // optional .holo.perception.lidar_obstacle_detection.ObjMergeThreshold obs_merger = 15;
  bool has_obs_merger() const;
  void clear_obs_merger();
  static const int kObsMergerFieldNumber = 15;
  private:
  const ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold& _internal_obs_merger() const;
  public:
  const ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold& obs_merger() const;
  ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold* release_obs_merger();
  ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold* mutable_obs_merger();
  void set_allocated_obs_merger(::holo::perception::lidar_obstacle_detection::ObjMergeThreshold* obs_merger);

  // optional uint64 min_pts = 2;
  bool has_min_pts() const;
  void clear_min_pts();
  static const int kMinPtsFieldNumber = 2;
  ::google::protobuf::uint64 min_pts() const;
  void set_min_pts(::google::protobuf::uint64 value);

  // optional float moving_obs_x = 1;
  bool has_moving_obs_x() const;
  void clear_moving_obs_x();
  static const int kMovingObsXFieldNumber = 1;
  float moving_obs_x() const;
  void set_moving_obs_x(float value);

  // optional float hash_map_resolution = 3;
  bool has_hash_map_resolution() const;
  void clear_hash_map_resolution();
  static const int kHashMapResolutionFieldNumber = 3;
  float hash_map_resolution() const;
  void set_hash_map_resolution(float value);

  // optional float cloud_point_track_duration = 4;
  bool has_cloud_point_track_duration() const;
  void clear_cloud_point_track_duration();
  static const int kCloudPointTrackDurationFieldNumber = 4;
  float cloud_point_track_duration() const;
  void set_cloud_point_track_duration(float value);

  // optional float motion_duration = 5;
  bool has_motion_duration() const;
  void clear_motion_duration();
  static const int kMotionDurationFieldNumber = 5;
  float motion_duration() const;
  void set_motion_duration(float value);

  // optional float max_theta = 7;
  bool has_max_theta() const;
  void clear_max_theta();
  static const int kMaxThetaFieldNumber = 7;
  float max_theta() const;
  void set_max_theta(float value);

  // optional float min_height = 8;
  bool has_min_height() const;
  void clear_min_height();
  static const int kMinHeightFieldNumber = 8;
  float min_height() const;
  void set_min_height(float value);

  // optional uint64 cloud_point_track_max_ele = 9;
  bool has_cloud_point_track_max_ele() const;
  void clear_cloud_point_track_max_ele();
  static const int kCloudPointTrackMaxEleFieldNumber = 9;
  ::google::protobuf::uint64 cloud_point_track_max_ele() const;
  void set_cloud_point_track_max_ele(::google::protobuf::uint64 value);

  // optional float obj_threshold = 10;
  bool has_obj_threshold() const;
  void clear_obj_threshold();
  static const int kObjThresholdFieldNumber = 10;
  float obj_threshold() const;
  void set_obj_threshold(float value);

  // optional float min_width = 11;
  bool has_min_width() const;
  void clear_min_width();
  static const int kMinWidthFieldNumber = 11;
  float min_width() const;
  void set_min_width(float value);

  // optional uint64 association_num = 13;
  bool has_association_num() const;
  void clear_association_num();
  static const int kAssociationNumFieldNumber = 13;
  ::google::protobuf::uint64 association_num() const;
  void set_association_num(::google::protobuf::uint64 value);

  // optional uint64 max_lost_num = 14;
  bool has_max_lost_num() const;
  void clear_max_lost_num();
  static const int kMaxLostNumFieldNumber = 14;
  ::google::protobuf::uint64 max_lost_num() const;
  void set_max_lost_num(::google::protobuf::uint64 value);

  // optional float merge_radar_dis = 12;
  bool has_merge_radar_dis() const;
  void clear_merge_radar_dis();
  static const int kMergeRadarDisFieldNumber = 12;
  float merge_radar_dis() const;
  void set_merge_radar_dis(float value);

  // @@protoc_insertion_point(class_scope:holo.perception.lidar_obstacle_detection.LidarDetectionConfig)
 private:
  void set_has_moving_obs_x();
  void clear_has_moving_obs_x();
  void set_has_min_pts();
  void clear_has_min_pts();
  void set_has_hash_map_resolution();
  void clear_has_hash_map_resolution();
  void set_has_cloud_point_track_duration();
  void clear_has_cloud_point_track_duration();
  void set_has_motion_duration();
  void clear_has_motion_duration();
  void set_has_roi_config();
  void clear_has_roi_config();
  void set_has_max_theta();
  void clear_has_max_theta();
  void set_has_min_height();
  void clear_has_min_height();
  void set_has_cloud_point_track_max_ele();
  void clear_has_cloud_point_track_max_ele();
  void set_has_obj_threshold();
  void clear_has_obj_threshold();
  void set_has_min_width();
  void clear_has_min_width();
  void set_has_merge_radar_dis();
  void clear_has_merge_radar_dis();
  void set_has_association_num();
  void clear_has_association_num();
  void set_has_max_lost_num();
  void clear_has_max_lost_num();
  void set_has_obs_merger();
  void clear_has_obs_merger();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr roi_config_;
  ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold* obs_merger_;
  ::google::protobuf::uint64 min_pts_;
  float moving_obs_x_;
  float hash_map_resolution_;
  float cloud_point_track_duration_;
  float motion_duration_;
  float max_theta_;
  float min_height_;
  ::google::protobuf::uint64 cloud_point_track_max_ele_;
  float obj_threshold_;
  float min_width_;
  ::google::protobuf::uint64 association_num_;
  ::google::protobuf::uint64 max_lost_num_;
  float merge_radar_dis_;
  friend struct ::protobuf_lidar_5fdetection_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjMergeThreshold

// optional float delta_x = 1;
inline bool ObjMergeThreshold::has_delta_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjMergeThreshold::set_has_delta_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjMergeThreshold::clear_has_delta_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjMergeThreshold::clear_delta_x() {
  delta_x_ = 0;
  clear_has_delta_x();
}
inline float ObjMergeThreshold::delta_x() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.ObjMergeThreshold.delta_x)
  return delta_x_;
}
inline void ObjMergeThreshold::set_delta_x(float value) {
  set_has_delta_x();
  delta_x_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.ObjMergeThreshold.delta_x)
}

// optional float delta_y = 2;
inline bool ObjMergeThreshold::has_delta_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjMergeThreshold::set_has_delta_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjMergeThreshold::clear_has_delta_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjMergeThreshold::clear_delta_y() {
  delta_y_ = 0;
  clear_has_delta_y();
}
inline float ObjMergeThreshold::delta_y() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.ObjMergeThreshold.delta_y)
  return delta_y_;
}
inline void ObjMergeThreshold::set_delta_y(float value) {
  set_has_delta_y();
  delta_y_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.ObjMergeThreshold.delta_y)
}

// optional float delta_vx = 3;
inline bool ObjMergeThreshold::has_delta_vx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjMergeThreshold::set_has_delta_vx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjMergeThreshold::clear_has_delta_vx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjMergeThreshold::clear_delta_vx() {
  delta_vx_ = 0;
  clear_has_delta_vx();
}
inline float ObjMergeThreshold::delta_vx() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.ObjMergeThreshold.delta_vx)
  return delta_vx_;
}
inline void ObjMergeThreshold::set_delta_vx(float value) {
  set_has_delta_vx();
  delta_vx_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.ObjMergeThreshold.delta_vx)
}

// optional float delta_vy = 4;
inline bool ObjMergeThreshold::has_delta_vy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjMergeThreshold::set_has_delta_vy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjMergeThreshold::clear_has_delta_vy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjMergeThreshold::clear_delta_vy() {
  delta_vy_ = 0;
  clear_has_delta_vy();
}
inline float ObjMergeThreshold::delta_vy() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.ObjMergeThreshold.delta_vy)
  return delta_vy_;
}
inline void ObjMergeThreshold::set_delta_vy(float value) {
  set_has_delta_vy();
  delta_vy_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.ObjMergeThreshold.delta_vy)
}

// -------------------------------------------------------------------

// LidarDetectionConfig

// optional float moving_obs_x = 1;
inline bool LidarDetectionConfig::has_moving_obs_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LidarDetectionConfig::set_has_moving_obs_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LidarDetectionConfig::clear_has_moving_obs_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LidarDetectionConfig::clear_moving_obs_x() {
  moving_obs_x_ = 0;
  clear_has_moving_obs_x();
}
inline float LidarDetectionConfig::moving_obs_x() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.moving_obs_x)
  return moving_obs_x_;
}
inline void LidarDetectionConfig::set_moving_obs_x(float value) {
  set_has_moving_obs_x();
  moving_obs_x_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.moving_obs_x)
}

// optional uint64 min_pts = 2;
inline bool LidarDetectionConfig::has_min_pts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LidarDetectionConfig::set_has_min_pts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LidarDetectionConfig::clear_has_min_pts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LidarDetectionConfig::clear_min_pts() {
  min_pts_ = GOOGLE_ULONGLONG(0);
  clear_has_min_pts();
}
inline ::google::protobuf::uint64 LidarDetectionConfig::min_pts() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.min_pts)
  return min_pts_;
}
inline void LidarDetectionConfig::set_min_pts(::google::protobuf::uint64 value) {
  set_has_min_pts();
  min_pts_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.min_pts)
}

// optional float hash_map_resolution = 3;
inline bool LidarDetectionConfig::has_hash_map_resolution() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LidarDetectionConfig::set_has_hash_map_resolution() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LidarDetectionConfig::clear_has_hash_map_resolution() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LidarDetectionConfig::clear_hash_map_resolution() {
  hash_map_resolution_ = 0;
  clear_has_hash_map_resolution();
}
inline float LidarDetectionConfig::hash_map_resolution() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.hash_map_resolution)
  return hash_map_resolution_;
}
inline void LidarDetectionConfig::set_hash_map_resolution(float value) {
  set_has_hash_map_resolution();
  hash_map_resolution_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.hash_map_resolution)
}

// optional float cloud_point_track_duration = 4;
inline bool LidarDetectionConfig::has_cloud_point_track_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LidarDetectionConfig::set_has_cloud_point_track_duration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LidarDetectionConfig::clear_has_cloud_point_track_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LidarDetectionConfig::clear_cloud_point_track_duration() {
  cloud_point_track_duration_ = 0;
  clear_has_cloud_point_track_duration();
}
inline float LidarDetectionConfig::cloud_point_track_duration() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.cloud_point_track_duration)
  return cloud_point_track_duration_;
}
inline void LidarDetectionConfig::set_cloud_point_track_duration(float value) {
  set_has_cloud_point_track_duration();
  cloud_point_track_duration_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.cloud_point_track_duration)
}

// optional float motion_duration = 5;
inline bool LidarDetectionConfig::has_motion_duration() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LidarDetectionConfig::set_has_motion_duration() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LidarDetectionConfig::clear_has_motion_duration() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LidarDetectionConfig::clear_motion_duration() {
  motion_duration_ = 0;
  clear_has_motion_duration();
}
inline float LidarDetectionConfig::motion_duration() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.motion_duration)
  return motion_duration_;
}
inline void LidarDetectionConfig::set_motion_duration(float value) {
  set_has_motion_duration();
  motion_duration_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.motion_duration)
}

// optional string roi_config = 6;
inline bool LidarDetectionConfig::has_roi_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LidarDetectionConfig::set_has_roi_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LidarDetectionConfig::clear_has_roi_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LidarDetectionConfig::clear_roi_config() {
  roi_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_roi_config();
}
inline const ::std::string& LidarDetectionConfig::roi_config() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.roi_config)
  return roi_config_.GetNoArena();
}
inline void LidarDetectionConfig::set_roi_config(const ::std::string& value) {
  set_has_roi_config();
  roi_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.roi_config)
}
#if LANG_CXX11
inline void LidarDetectionConfig::set_roi_config(::std::string&& value) {
  set_has_roi_config();
  roi_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.roi_config)
}
#endif
inline void LidarDetectionConfig::set_roi_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_roi_config();
  roi_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.roi_config)
}
inline void LidarDetectionConfig::set_roi_config(const char* value, size_t size) {
  set_has_roi_config();
  roi_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.roi_config)
}
inline ::std::string* LidarDetectionConfig::mutable_roi_config() {
  set_has_roi_config();
  // @@protoc_insertion_point(field_mutable:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.roi_config)
  return roi_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LidarDetectionConfig::release_roi_config() {
  // @@protoc_insertion_point(field_release:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.roi_config)
  if (!has_roi_config()) {
    return NULL;
  }
  clear_has_roi_config();
  return roi_config_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LidarDetectionConfig::set_allocated_roi_config(::std::string* roi_config) {
  if (roi_config != NULL) {
    set_has_roi_config();
  } else {
    clear_has_roi_config();
  }
  roi_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roi_config);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.roi_config)
}

// optional float max_theta = 7;
inline bool LidarDetectionConfig::has_max_theta() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LidarDetectionConfig::set_has_max_theta() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LidarDetectionConfig::clear_has_max_theta() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LidarDetectionConfig::clear_max_theta() {
  max_theta_ = 0;
  clear_has_max_theta();
}
inline float LidarDetectionConfig::max_theta() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.max_theta)
  return max_theta_;
}
inline void LidarDetectionConfig::set_max_theta(float value) {
  set_has_max_theta();
  max_theta_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.max_theta)
}

// optional float min_height = 8;
inline bool LidarDetectionConfig::has_min_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LidarDetectionConfig::set_has_min_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LidarDetectionConfig::clear_has_min_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LidarDetectionConfig::clear_min_height() {
  min_height_ = 0;
  clear_has_min_height();
}
inline float LidarDetectionConfig::min_height() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.min_height)
  return min_height_;
}
inline void LidarDetectionConfig::set_min_height(float value) {
  set_has_min_height();
  min_height_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.min_height)
}

// optional uint64 cloud_point_track_max_ele = 9;
inline bool LidarDetectionConfig::has_cloud_point_track_max_ele() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LidarDetectionConfig::set_has_cloud_point_track_max_ele() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LidarDetectionConfig::clear_has_cloud_point_track_max_ele() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LidarDetectionConfig::clear_cloud_point_track_max_ele() {
  cloud_point_track_max_ele_ = GOOGLE_ULONGLONG(0);
  clear_has_cloud_point_track_max_ele();
}
inline ::google::protobuf::uint64 LidarDetectionConfig::cloud_point_track_max_ele() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.cloud_point_track_max_ele)
  return cloud_point_track_max_ele_;
}
inline void LidarDetectionConfig::set_cloud_point_track_max_ele(::google::protobuf::uint64 value) {
  set_has_cloud_point_track_max_ele();
  cloud_point_track_max_ele_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.cloud_point_track_max_ele)
}

// optional float obj_threshold = 10;
inline bool LidarDetectionConfig::has_obj_threshold() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LidarDetectionConfig::set_has_obj_threshold() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LidarDetectionConfig::clear_has_obj_threshold() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LidarDetectionConfig::clear_obj_threshold() {
  obj_threshold_ = 0;
  clear_has_obj_threshold();
}
inline float LidarDetectionConfig::obj_threshold() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.obj_threshold)
  return obj_threshold_;
}
inline void LidarDetectionConfig::set_obj_threshold(float value) {
  set_has_obj_threshold();
  obj_threshold_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.obj_threshold)
}

// optional float min_width = 11;
inline bool LidarDetectionConfig::has_min_width() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LidarDetectionConfig::set_has_min_width() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LidarDetectionConfig::clear_has_min_width() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LidarDetectionConfig::clear_min_width() {
  min_width_ = 0;
  clear_has_min_width();
}
inline float LidarDetectionConfig::min_width() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.min_width)
  return min_width_;
}
inline void LidarDetectionConfig::set_min_width(float value) {
  set_has_min_width();
  min_width_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.min_width)
}

// optional float merge_radar_dis = 12;
inline bool LidarDetectionConfig::has_merge_radar_dis() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LidarDetectionConfig::set_has_merge_radar_dis() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LidarDetectionConfig::clear_has_merge_radar_dis() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LidarDetectionConfig::clear_merge_radar_dis() {
  merge_radar_dis_ = 0;
  clear_has_merge_radar_dis();
}
inline float LidarDetectionConfig::merge_radar_dis() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.merge_radar_dis)
  return merge_radar_dis_;
}
inline void LidarDetectionConfig::set_merge_radar_dis(float value) {
  set_has_merge_radar_dis();
  merge_radar_dis_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.merge_radar_dis)
}

// optional uint64 association_num = 13;
inline bool LidarDetectionConfig::has_association_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LidarDetectionConfig::set_has_association_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LidarDetectionConfig::clear_has_association_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LidarDetectionConfig::clear_association_num() {
  association_num_ = GOOGLE_ULONGLONG(0);
  clear_has_association_num();
}
inline ::google::protobuf::uint64 LidarDetectionConfig::association_num() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.association_num)
  return association_num_;
}
inline void LidarDetectionConfig::set_association_num(::google::protobuf::uint64 value) {
  set_has_association_num();
  association_num_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.association_num)
}

// optional uint64 max_lost_num = 14;
inline bool LidarDetectionConfig::has_max_lost_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LidarDetectionConfig::set_has_max_lost_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LidarDetectionConfig::clear_has_max_lost_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LidarDetectionConfig::clear_max_lost_num() {
  max_lost_num_ = GOOGLE_ULONGLONG(0);
  clear_has_max_lost_num();
}
inline ::google::protobuf::uint64 LidarDetectionConfig::max_lost_num() const {
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.max_lost_num)
  return max_lost_num_;
}
inline void LidarDetectionConfig::set_max_lost_num(::google::protobuf::uint64 value) {
  set_has_max_lost_num();
  max_lost_num_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.max_lost_num)
}

// optional .holo.perception.lidar_obstacle_detection.ObjMergeThreshold obs_merger = 15;
inline bool LidarDetectionConfig::has_obs_merger() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LidarDetectionConfig::set_has_obs_merger() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LidarDetectionConfig::clear_has_obs_merger() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LidarDetectionConfig::clear_obs_merger() {
  if (obs_merger_ != NULL) obs_merger_->Clear();
  clear_has_obs_merger();
}
inline const ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold& LidarDetectionConfig::_internal_obs_merger() const {
  return *obs_merger_;
}
inline const ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold& LidarDetectionConfig::obs_merger() const {
  const ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold* p = obs_merger_;
  // @@protoc_insertion_point(field_get:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.obs_merger)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold*>(
      &::holo::perception::lidar_obstacle_detection::_ObjMergeThreshold_default_instance_);
}
inline ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold* LidarDetectionConfig::release_obs_merger() {
  // @@protoc_insertion_point(field_release:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.obs_merger)
  clear_has_obs_merger();
  ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold* temp = obs_merger_;
  obs_merger_ = NULL;
  return temp;
}
inline ::holo::perception::lidar_obstacle_detection::ObjMergeThreshold* LidarDetectionConfig::mutable_obs_merger() {
  set_has_obs_merger();
  if (obs_merger_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::perception::lidar_obstacle_detection::ObjMergeThreshold>(GetArenaNoVirtual());
    obs_merger_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.obs_merger)
  return obs_merger_;
}
inline void LidarDetectionConfig::set_allocated_obs_merger(::holo::perception::lidar_obstacle_detection::ObjMergeThreshold* obs_merger) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete obs_merger_;
  }
  if (obs_merger) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      obs_merger = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, obs_merger, submessage_arena);
    }
    set_has_obs_merger();
  } else {
    clear_has_obs_merger();
  }
  obs_merger_ = obs_merger;
  // @@protoc_insertion_point(field_set_allocated:holo.perception.lidar_obstacle_detection.LidarDetectionConfig.obs_merger)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lidar_obstacle_detection
}  // namespace perception
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_lidar_5fdetection_2eproto
