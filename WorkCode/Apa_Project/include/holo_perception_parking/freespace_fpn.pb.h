// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: freespace_fpn.proto

#ifndef PROTOBUF_INCLUDED_freespace_5ffpn_2eproto
#define PROTOBUF_INCLUDED_freespace_5ffpn_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensor_rt.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_freespace_5ffpn_2eproto 

namespace protobuf_freespace_5ffpn_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_freespace_5ffpn_2eproto
namespace holo {
namespace perception {
class FreespaceFPNConfig;
class FreespaceFPNConfigDefaultTypeInternal;
extern FreespaceFPNConfigDefaultTypeInternal _FreespaceFPNConfig_default_instance_;
}  // namespace perception
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::perception::FreespaceFPNConfig* Arena::CreateMaybeMessage<::holo::perception::FreespaceFPNConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace perception {

// ===================================================================

class FreespaceFPNConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.perception.FreespaceFPNConfig) */ {
 public:
  FreespaceFPNConfig();
  virtual ~FreespaceFPNConfig();

  FreespaceFPNConfig(const FreespaceFPNConfig& from);

  inline FreespaceFPNConfig& operator=(const FreespaceFPNConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FreespaceFPNConfig(FreespaceFPNConfig&& from) noexcept
    : FreespaceFPNConfig() {
    *this = ::std::move(from);
  }

  inline FreespaceFPNConfig& operator=(FreespaceFPNConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FreespaceFPNConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreespaceFPNConfig* internal_default_instance() {
    return reinterpret_cast<const FreespaceFPNConfig*>(
               &_FreespaceFPNConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FreespaceFPNConfig* other);
  friend void swap(FreespaceFPNConfig& a, FreespaceFPNConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FreespaceFPNConfig* New() const final {
    return CreateMaybeMessage<FreespaceFPNConfig>(NULL);
  }

  FreespaceFPNConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FreespaceFPNConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FreespaceFPNConfig& from);
  void MergeFrom(const FreespaceFPNConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreespaceFPNConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mean = 4;
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 4;
  const ::std::string& mean() const;
  void set_mean(const ::std::string& value);
  #if LANG_CXX11
  void set_mean(::std::string&& value);
  #endif
  void set_mean(const char* value);
  void set_mean(const char* value, size_t size);
  ::std::string* mutable_mean();
  ::std::string* release_mean();
  void set_allocated_mean(::std::string* mean);

  // optional string dev = 5;
  bool has_dev() const;
  void clear_dev();
  static const int kDevFieldNumber = 5;
  const ::std::string& dev() const;
  void set_dev(const ::std::string& value);
  #if LANG_CXX11
  void set_dev(::std::string&& value);
  #endif
  void set_dev(const char* value);
  void set_dev(const char* value, size_t size);
  ::std::string* mutable_dev();
  ::std::string* release_dev();
  void set_allocated_dev(::std::string* dev);

  // optional .holo.perception.TensorRTConfig tensor_rt_config = 1;
  bool has_tensor_rt_config() const;
  void clear_tensor_rt_config();
  static const int kTensorRtConfigFieldNumber = 1;
  private:
  const ::holo::perception::TensorRTConfig& _internal_tensor_rt_config() const;
  public:
  const ::holo::perception::TensorRTConfig& tensor_rt_config() const;
  ::holo::perception::TensorRTConfig* release_tensor_rt_config();
  ::holo::perception::TensorRTConfig* mutable_tensor_rt_config();
  void set_allocated_tensor_rt_config(::holo::perception::TensorRTConfig* tensor_rt_config);

  // optional int32 num_classes = 2;
  bool has_num_classes() const;
  void clear_num_classes();
  static const int kNumClassesFieldNumber = 2;
  ::google::protobuf::int32 num_classes() const;
  void set_num_classes(::google::protobuf::int32 value);

  // optional float scale = 3;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 3;
  float scale() const;
  void set_scale(float value);

  // @@protoc_insertion_point(class_scope:holo.perception.FreespaceFPNConfig)
 private:
  void set_has_tensor_rt_config();
  void clear_has_tensor_rt_config();
  void set_has_num_classes();
  void clear_has_num_classes();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean();
  void clear_has_mean();
  void set_has_dev();
  void clear_has_dev();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr mean_;
  ::google::protobuf::internal::ArenaStringPtr dev_;
  ::holo::perception::TensorRTConfig* tensor_rt_config_;
  ::google::protobuf::int32 num_classes_;
  float scale_;
  friend struct ::protobuf_freespace_5ffpn_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FreespaceFPNConfig

// optional .holo.perception.TensorRTConfig tensor_rt_config = 1;
inline bool FreespaceFPNConfig::has_tensor_rt_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FreespaceFPNConfig::set_has_tensor_rt_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FreespaceFPNConfig::clear_has_tensor_rt_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::holo::perception::TensorRTConfig& FreespaceFPNConfig::_internal_tensor_rt_config() const {
  return *tensor_rt_config_;
}
inline const ::holo::perception::TensorRTConfig& FreespaceFPNConfig::tensor_rt_config() const {
  const ::holo::perception::TensorRTConfig* p = tensor_rt_config_;
  // @@protoc_insertion_point(field_get:holo.perception.FreespaceFPNConfig.tensor_rt_config)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::perception::TensorRTConfig*>(
      &::holo::perception::_TensorRTConfig_default_instance_);
}
inline ::holo::perception::TensorRTConfig* FreespaceFPNConfig::release_tensor_rt_config() {
  // @@protoc_insertion_point(field_release:holo.perception.FreespaceFPNConfig.tensor_rt_config)
  clear_has_tensor_rt_config();
  ::holo::perception::TensorRTConfig* temp = tensor_rt_config_;
  tensor_rt_config_ = NULL;
  return temp;
}
inline ::holo::perception::TensorRTConfig* FreespaceFPNConfig::mutable_tensor_rt_config() {
  set_has_tensor_rt_config();
  if (tensor_rt_config_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::perception::TensorRTConfig>(GetArenaNoVirtual());
    tensor_rt_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.perception.FreespaceFPNConfig.tensor_rt_config)
  return tensor_rt_config_;
}
inline void FreespaceFPNConfig::set_allocated_tensor_rt_config(::holo::perception::TensorRTConfig* tensor_rt_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(tensor_rt_config_);
  }
  if (tensor_rt_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      tensor_rt_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tensor_rt_config, submessage_arena);
    }
    set_has_tensor_rt_config();
  } else {
    clear_has_tensor_rt_config();
  }
  tensor_rt_config_ = tensor_rt_config;
  // @@protoc_insertion_point(field_set_allocated:holo.perception.FreespaceFPNConfig.tensor_rt_config)
}

// optional int32 num_classes = 2;
inline bool FreespaceFPNConfig::has_num_classes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FreespaceFPNConfig::set_has_num_classes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FreespaceFPNConfig::clear_has_num_classes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FreespaceFPNConfig::clear_num_classes() {
  num_classes_ = 0;
  clear_has_num_classes();
}
inline ::google::protobuf::int32 FreespaceFPNConfig::num_classes() const {
  // @@protoc_insertion_point(field_get:holo.perception.FreespaceFPNConfig.num_classes)
  return num_classes_;
}
inline void FreespaceFPNConfig::set_num_classes(::google::protobuf::int32 value) {
  set_has_num_classes();
  num_classes_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.FreespaceFPNConfig.num_classes)
}

// optional float scale = 3;
inline bool FreespaceFPNConfig::has_scale() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FreespaceFPNConfig::set_has_scale() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FreespaceFPNConfig::clear_has_scale() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FreespaceFPNConfig::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float FreespaceFPNConfig::scale() const {
  // @@protoc_insertion_point(field_get:holo.perception.FreespaceFPNConfig.scale)
  return scale_;
}
inline void FreespaceFPNConfig::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.FreespaceFPNConfig.scale)
}

// optional string mean = 4;
inline bool FreespaceFPNConfig::has_mean() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FreespaceFPNConfig::set_has_mean() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FreespaceFPNConfig::clear_has_mean() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FreespaceFPNConfig::clear_mean() {
  mean_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean();
}
inline const ::std::string& FreespaceFPNConfig::mean() const {
  // @@protoc_insertion_point(field_get:holo.perception.FreespaceFPNConfig.mean)
  return mean_.GetNoArena();
}
inline void FreespaceFPNConfig::set_mean(const ::std::string& value) {
  set_has_mean();
  mean_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.FreespaceFPNConfig.mean)
}
#if LANG_CXX11
inline void FreespaceFPNConfig::set_mean(::std::string&& value) {
  set_has_mean();
  mean_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.FreespaceFPNConfig.mean)
}
#endif
inline void FreespaceFPNConfig::set_mean(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean();
  mean_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.FreespaceFPNConfig.mean)
}
inline void FreespaceFPNConfig::set_mean(const char* value, size_t size) {
  set_has_mean();
  mean_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.FreespaceFPNConfig.mean)
}
inline ::std::string* FreespaceFPNConfig::mutable_mean() {
  set_has_mean();
  // @@protoc_insertion_point(field_mutable:holo.perception.FreespaceFPNConfig.mean)
  return mean_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FreespaceFPNConfig::release_mean() {
  // @@protoc_insertion_point(field_release:holo.perception.FreespaceFPNConfig.mean)
  if (!has_mean()) {
    return NULL;
  }
  clear_has_mean();
  return mean_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FreespaceFPNConfig::set_allocated_mean(::std::string* mean) {
  if (mean != NULL) {
    set_has_mean();
  } else {
    clear_has_mean();
  }
  mean_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.FreespaceFPNConfig.mean)
}

// optional string dev = 5;
inline bool FreespaceFPNConfig::has_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FreespaceFPNConfig::set_has_dev() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FreespaceFPNConfig::clear_has_dev() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FreespaceFPNConfig::clear_dev() {
  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dev();
}
inline const ::std::string& FreespaceFPNConfig::dev() const {
  // @@protoc_insertion_point(field_get:holo.perception.FreespaceFPNConfig.dev)
  return dev_.GetNoArena();
}
inline void FreespaceFPNConfig::set_dev(const ::std::string& value) {
  set_has_dev();
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.FreespaceFPNConfig.dev)
}
#if LANG_CXX11
inline void FreespaceFPNConfig::set_dev(::std::string&& value) {
  set_has_dev();
  dev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.FreespaceFPNConfig.dev)
}
#endif
inline void FreespaceFPNConfig::set_dev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dev();
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.FreespaceFPNConfig.dev)
}
inline void FreespaceFPNConfig::set_dev(const char* value, size_t size) {
  set_has_dev();
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.FreespaceFPNConfig.dev)
}
inline ::std::string* FreespaceFPNConfig::mutable_dev() {
  set_has_dev();
  // @@protoc_insertion_point(field_mutable:holo.perception.FreespaceFPNConfig.dev)
  return dev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FreespaceFPNConfig::release_dev() {
  // @@protoc_insertion_point(field_release:holo.perception.FreespaceFPNConfig.dev)
  if (!has_dev()) {
    return NULL;
  }
  clear_has_dev();
  return dev_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FreespaceFPNConfig::set_allocated_dev(::std::string* dev) {
  if (dev != NULL) {
    set_has_dev();
  } else {
    clear_has_dev();
  }
  dev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.FreespaceFPNConfig.dev)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_freespace_5ffpn_2eproto
