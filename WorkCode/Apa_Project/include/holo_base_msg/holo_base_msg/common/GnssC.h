// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p19
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL__HOME_HOLO_WORKSPACE_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_BASE_MSG_INCLUDE_HOLO_BASE_MSG_COMMON_GNSSC_GF3LNY_H_
#define _TAO_IDL__HOME_HOLO_WORKSPACE_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_BASE_MSG_INCLUDE_HOLO_BASE_MSG_COMMON_GNSSC_GF3LNY_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "holo_base_msg/common/CommonC.h"
#include "holo_base_msg/core/TypesC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace holo_base_msg
{

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:38

  namespace common
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct GnssPvt;

    typedef
      ::TAO_Fixed_Var_T<
          GnssPvt
        >
      GnssPvt_var;

    typedef
      GnssPvt &
      GnssPvt_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  GnssPvt
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef GnssPvt_var _var_type;
      typedef GnssPvt_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::core::uint32_t status;
      holo_base_msg::core::float64_t longitude;
      holo_base_msg::core::float64_t latitude;
      holo_base_msg::core::float64_t height;
      holo_base_msg::core::float64_t velocity_east;
      holo_base_msg::core::float64_t velocity_north;
      holo_base_msg::core::float64_t velocity_up;
      holo_base_msg::core::float64_t longitude_cov;
      holo_base_msg::core::float64_t latitude_cov;
      holo_base_msg::core::float64_t height_cov;
      holo_base_msg::core::float64_t velocity_east_cov;
      holo_base_msg::core::float64_t velocity_north_cov;
      holo_base_msg::core::float64_t velocity_up_cov;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_GnssPvt;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef holo_base_msg::core::int32_t GnssPositionStatus;
    typedef holo_base_msg::core::int32_t_out GnssPositionStatus_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_GnssPositionStatus;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct GnssPosition;

    typedef
      ::TAO_Fixed_Var_T<
          GnssPosition
        >
      GnssPosition_var;

    typedef
      GnssPosition &
      GnssPosition_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  GnssPosition
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef GnssPosition_var _var_type;
      typedef GnssPosition_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::core::float64_t latitude;
      holo_base_msg::core::float64_t longitude;
      holo_base_msg::core::float64_t altitude;
      holo_base_msg::core::float64_t latitude_cov;
      holo_base_msg::core::float64_t longitude_cov;
      holo_base_msg::core::float64_t altitude_cov;
      holo_base_msg::common::GnssPositionStatus status;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_GnssPosition;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct RawBlock;

    typedef
      ::TAO_Fixed_Var_T<
          RawBlock
        >
      RawBlock_var;

    typedef
      RawBlock &
      RawBlock_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  RawBlock
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef RawBlock_var _var_type;
      typedef RawBlock_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::core::float64_t pseudorange_measurement;
      holo_base_msg::core::float64_t carrier_phase_measurement;
      holo_base_msg::core::float32_t doppler_measurement;
      holo_base_msg::core::uint8_t gnss_identifier;
      holo_base_msg::core::uint8_t satellite_identifier;
      holo_base_msg::core::uint8_t frequence_identifier;
      holo_base_msg::core::uint16_t carrier_phase_locktime;
      holo_base_msg::core::uint8_t carrier_noise_ratio;
      holo_base_msg::core::uint8_t pseudorange_standard_deviation;
      holo_base_msg::core::uint8_t carrier_phase_standard_deviation;
      holo_base_msg::core::uint8_t doppler_standard_deviation;
      holo_base_msg::core::uint8_t tracking_status;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_RawBlock;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_COMMON_RAWBLOCKSEQUENCE_CH_)
#define _HOLO_BASE_MSG_COMMON_RAWBLOCKSEQUENCE_CH_

    class RawBlockSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          RawBlockSequence
        >
      RawBlockSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          RawBlockSequence
        >
      RawBlockSequence_out;

    class  RawBlockSequence
      : public
          ::TAO::unbounded_value_sequence<
              RawBlock
            >
    {
    public:
      RawBlockSequence (void);
      RawBlockSequence ( ::CORBA::ULong max);
      RawBlockSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        RawBlock* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      RawBlockSequence (const RawBlockSequence &) = default;
      RawBlockSequence (RawBlockSequence &&) = default;
      RawBlockSequence& operator= (const RawBlockSequence &) = default;
      RawBlockSequence& operator= (RawBlockSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~RawBlockSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef RawBlockSequence_var _var_type;
      typedef RawBlockSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_RawBlockSequence;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct GnssRawMeasurement;

    typedef
      ::TAO_Var_Var_T<
          GnssRawMeasurement
        >
      GnssRawMeasurement_var;

    typedef
      ::TAO_Out_T<
          GnssRawMeasurement
        >
      GnssRawMeasurement_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  GnssRawMeasurement
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef GnssRawMeasurement_var _var_type;
      typedef GnssRawMeasurement_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::core::float64_t gps_second;
      holo_base_msg::core::uint16_t gps_week;
      holo_base_msg::core::int8_t leap_second;
      holo_base_msg::core::uint8_t satellite_number;
      holo_base_msg::core::float32_t pdop;
      holo_base_msg::common::RawBlockSequence blocks;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_GnssRawMeasurement;
  
  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:67
  
  } // module holo_base_msg::common

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module holo_base_msg

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::common::GnssPvt>
    : public
        Fixed_Size_Arg_Traits_T<
            ::holo_base_msg::common::GnssPvt,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::common::GnssPosition>
    : public
        Fixed_Size_Arg_Traits_T<
            ::holo_base_msg::common::GnssPosition,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::common::RawBlock>
    : public
        Fixed_Size_Arg_Traits_T<
            ::holo_base_msg::common::RawBlock,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::common::RawBlockSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::common::RawBlockSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::common::GnssRawMeasurement>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::common::GnssRawMeasurement,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::common::GnssPvt &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::common::GnssPvt*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::GnssPvt *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::GnssPvt *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::common::GnssPvt &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::common::GnssPvt*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::GnssPvt *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::GnssPvt *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::common::GnssPosition &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::common::GnssPosition*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::GnssPosition *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::GnssPosition *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::common::GnssPosition &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::common::GnssPosition*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::GnssPosition *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::GnssPosition *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::common::RawBlock &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::common::RawBlock*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::RawBlock *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::RawBlock *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::common::RawBlock &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::common::RawBlock*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::RawBlock *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::RawBlock *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::common::RawBlockSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::common::RawBlockSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::RawBlockSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::RawBlockSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::common::RawBlockSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::common::RawBlockSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::RawBlockSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::RawBlockSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::common::GnssRawMeasurement &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::common::GnssRawMeasurement*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::GnssRawMeasurement *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::GnssRawMeasurement *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::common::GnssRawMeasurement &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::common::GnssRawMeasurement*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::GnssRawMeasurement *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::GnssRawMeasurement *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::common::GnssPvt &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::common::GnssPvt &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::common::GnssPosition &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::common::GnssPosition &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::common::RawBlock &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::common::RawBlock &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_common_RawBlockSequence_H_
#define _TAO_CDR_OP_holo_base_msg_common_RawBlockSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::common::RawBlockSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::common::RawBlockSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_common_RawBlockSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::common::GnssRawMeasurement &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::common::GnssRawMeasurement &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "GnssC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

