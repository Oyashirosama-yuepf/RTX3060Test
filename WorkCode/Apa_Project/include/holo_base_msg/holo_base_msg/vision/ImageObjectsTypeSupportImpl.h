/* -*- C++ -*- */
/* Generated by /home/holo/workspace/output/tda4_ubuntu-18.04/debug/host/bin/opendds_idl version 3.16 (ACE version 6.2a_p19) running on input file /home/holo/workspace/src/holo_base_msg/opendds_msg/message/holo_base_msg/vision/ImageObjects.idl */
#ifndef OPENDDS_IDL_GENERATED_IMAGEOBJECTSTYPESUPPORTIMPL_H_61G9MG
#define OPENDDS_IDL_GENERATED_IMAGEOBJECTSTYPESUPPORTIMPL_H_61G9MG
#include "ImageObjectsC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "dds/Version.h"
#if DDS_MAJOR_VERSION != 3 || DDS_MINOR_VERSION != 16 || DDS_MICRO_VERSION != 0
#error This file should be regenerated with opendds_idl
#endif
#include "ImageObjectsTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "holo_base_msg/common/CommonC.h"
#include "holo_base_msg/core/TypesC.h"
#include "holo_base_msg/geometry/PointC.h"
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: holo_base_msg */



/* Begin MODULE: core */



/* Begin TYPEDEF: bool_t */


/* End TYPEDEF: bool_t */


/* Begin TYPEDEF: char_t */


/* End TYPEDEF: char_t */


/* Begin TYPEDEF: _cxx_wchar_t */


/* End TYPEDEF: _cxx_wchar_t */


/* Begin TYPEDEF: int8_t */


/* End TYPEDEF: int8_t */


/* Begin TYPEDEF: uint8_t */


/* End TYPEDEF: uint8_t */


/* Begin TYPEDEF: int16_t */


/* End TYPEDEF: int16_t */


/* Begin TYPEDEF: uint16_t */


/* End TYPEDEF: uint16_t */


/* Begin TYPEDEF: int32_t */


/* End TYPEDEF: int32_t */


/* Begin TYPEDEF: uint32_t */


/* End TYPEDEF: uint32_t */


/* Begin TYPEDEF: int64_t */


/* End TYPEDEF: int64_t */


/* Begin TYPEDEF: uint64_t */


/* End TYPEDEF: uint64_t */


/* Begin TYPEDEF: float32_t */


/* End TYPEDEF: float32_t */


/* Begin TYPEDEF: float64_t */


/* End TYPEDEF: float64_t */


/* Begin TYPEDEF: BoolSequence */


/* End TYPEDEF: BoolSequence */


/* Begin TYPEDEF: CharSequence */


/* End TYPEDEF: CharSequence */


/* Begin TYPEDEF: WcharSequence */


/* End TYPEDEF: WcharSequence */


/* Begin TYPEDEF: Int8Sequence */


/* End TYPEDEF: Int8Sequence */


/* Begin TYPEDEF: Uint8Sequence */


/* End TYPEDEF: Uint8Sequence */


/* Begin TYPEDEF: Int16Sequence */


/* End TYPEDEF: Int16Sequence */


/* Begin TYPEDEF: Uint16Sequence */


/* End TYPEDEF: Uint16Sequence */


/* Begin TYPEDEF: Int32Sequence */


/* End TYPEDEF: Int32Sequence */


/* Begin TYPEDEF: Uint32Sequence */


/* End TYPEDEF: Uint32Sequence */


/* Begin TYPEDEF: Int64Sequence */


/* End TYPEDEF: Int64Sequence */


/* Begin TYPEDEF: Uint64Sequence */


/* End TYPEDEF: Uint64Sequence */


/* Begin TYPEDEF: Float32Sequence */


/* End TYPEDEF: Float32Sequence */


/* Begin TYPEDEF: Float64Sequence */


/* End TYPEDEF: Float64Sequence */

/* End MODULE: core */

/* End MODULE: holo_base_msg */


/* Begin MODULE: holo_base_msg */



/* Begin MODULE: common */



/* Begin TYPEDEF: Coordinate */


/* End TYPEDEF: Coordinate */


/* Begin TYPEDEF: SensorId */


/* End TYPEDEF: SensorId */


/* Begin TYPEDEF: Classification */


/* End TYPEDEF: Classification */


/* Begin STRUCT: Duration */


/* End STRUCT: Duration */


/* Begin STRUCT: Timestamp */


/* End STRUCT: Timestamp */

/* End MODULE: common */

/* End MODULE: holo_base_msg */


/* Begin MODULE: holo_base_msg */



/* Begin MODULE: geometry */



/* Begin STRUCT: Point3f */


/* End STRUCT: Point3f */


/* Begin TYPEDEF: Point3fSequence */


/* End TYPEDEF: Point3fSequence */


/* Begin STRUCT: Point3d */


/* End STRUCT: Point3d */


/* Begin TYPEDEF: Point3dSequence */


/* End TYPEDEF: Point3dSequence */


/* Begin STRUCT: Point2f */


/* End STRUCT: Point2f */


/* Begin TYPEDEF: Point2fSequence */


/* End TYPEDEF: Point2fSequence */


/* Begin STRUCT: Point2d */


/* End STRUCT: Point2d */


/* Begin TYPEDEF: Point2dSequence */


/* End TYPEDEF: Point2dSequence */

/* End MODULE: geometry */

/* End MODULE: holo_base_msg */


/* Begin MODULE: holo_base_msg */



/* Begin MODULE: vision */



/* Begin STRUCT: KeyPoint2d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::KeyPoint2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::KeyPoint2d& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::KeyPoint2d& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::KeyPoint2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::KeyPoint2d>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::KeyPoint2d>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::KeyPoint2d>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::KeyPoint2d& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::KeyPoint2d>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::KeyPoint2d*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_KeyPoint2d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_KeyPoint2d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_KeyPoint2d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: KeyPoint2d */


/* Begin TYPEDEF: KeyPoint2dSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::KeyPoint2dSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::vision::KeyPoint2dSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::vision::KeyPoint2dSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::vision::KeyPoint2dSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_KeyPoint2dSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_KeyPoint2dSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_KeyPoint2dSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: KeyPoint2dSequence */


/* Begin STRUCT: KeyPoint2f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::KeyPoint2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::KeyPoint2f& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::KeyPoint2f& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::KeyPoint2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::KeyPoint2f>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::KeyPoint2f>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::KeyPoint2f>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::KeyPoint2f& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::KeyPoint2f>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::KeyPoint2f*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_KeyPoint2f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_KeyPoint2f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_KeyPoint2f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: KeyPoint2f */


/* Begin TYPEDEF: KeyPoint2fSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::KeyPoint2fSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::vision::KeyPoint2fSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::vision::KeyPoint2fSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::vision::KeyPoint2fSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_KeyPoint2fSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_KeyPoint2fSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_KeyPoint2fSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: KeyPoint2fSequence */


/* Begin STRUCT: ObjectKeyPoint2d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ObjectKeyPoint2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectKeyPoint2d& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectKeyPoint2d& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectKeyPoint2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ObjectKeyPoint2d>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ObjectKeyPoint2d>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ObjectKeyPoint2d>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ObjectKeyPoint2d& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ObjectKeyPoint2d>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectKeyPoint2d*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectKeyPoint2d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectKeyPoint2d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectKeyPoint2d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ObjectKeyPoint2d */


/* Begin TYPEDEF: ObjectKeyPoint2dSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectKeyPoint2dSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectKeyPoint2dSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectKeyPoint2dSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectKeyPoint2dSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectKeyPoint2dSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectKeyPoint2dSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectKeyPoint2dSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ObjectKeyPoint2dSequence */


/* Begin STRUCT: ObjectKeyPoint2f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ObjectKeyPoint2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectKeyPoint2f& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectKeyPoint2f& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectKeyPoint2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ObjectKeyPoint2f>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ObjectKeyPoint2f>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ObjectKeyPoint2f>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ObjectKeyPoint2f& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ObjectKeyPoint2f>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectKeyPoint2f*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectKeyPoint2f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectKeyPoint2f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectKeyPoint2f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ObjectKeyPoint2f */


/* Begin TYPEDEF: ObjectKeyPoint2fSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectKeyPoint2fSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectKeyPoint2fSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectKeyPoint2fSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectKeyPoint2fSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectKeyPoint2fSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectKeyPoint2fSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectKeyPoint2fSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ObjectKeyPoint2fSequence */


/* Begin STRUCT: ObjectPoint2d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ObjectPoint2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectPoint2d& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectPoint2d& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectPoint2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ObjectPoint2d>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ObjectPoint2d>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ObjectPoint2d>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ObjectPoint2d& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ObjectPoint2d>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectPoint2d*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectPoint2d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectPoint2d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectPoint2d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ObjectPoint2d */


/* Begin TYPEDEF: ObjectPoint2dSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectPoint2dSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectPoint2dSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectPoint2dSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectPoint2dSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectPoint2dSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectPoint2dSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectPoint2dSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ObjectPoint2dSequence */


/* Begin STRUCT: ObjectPoint2f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ObjectPoint2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectPoint2f& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectPoint2f& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectPoint2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ObjectPoint2f>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ObjectPoint2f>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ObjectPoint2f>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ObjectPoint2f& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ObjectPoint2f>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectPoint2f*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectPoint2f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectPoint2f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectPoint2f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ObjectPoint2f */


/* Begin TYPEDEF: ObjectPoint2fSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectPoint2fSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectPoint2fSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectPoint2fSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectPoint2fSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectPoint2fSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectPoint2fSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectPoint2fSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ObjectPoint2fSequence */


/* Begin STRUCT: ObjectPoint3d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ObjectPoint3d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectPoint3d& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectPoint3d& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectPoint3d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ObjectPoint3d>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ObjectPoint3d>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ObjectPoint3d>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ObjectPoint3d& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ObjectPoint3d>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectPoint3d*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectPoint3d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectPoint3d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectPoint3d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ObjectPoint3d */


/* Begin TYPEDEF: ObjectPoint3dSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectPoint3dSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectPoint3dSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectPoint3dSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectPoint3dSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectPoint3dSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectPoint3dSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectPoint3dSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ObjectPoint3dSequence */


/* Begin STRUCT: ObjectPoint3f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ObjectPoint3f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectPoint3f& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectPoint3f& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectPoint3f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ObjectPoint3f>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ObjectPoint3f>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ObjectPoint3f>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ObjectPoint3f& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ObjectPoint3f>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectPoint3f*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectPoint3f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectPoint3f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectPoint3f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ObjectPoint3f */


/* Begin TYPEDEF: ObjectPoint3fSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ObjectPoint3fSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ObjectPoint3fSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::vision::ObjectPoint3fSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ObjectPoint3fSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ObjectPoint3fSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ObjectPoint3fSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ObjectPoint3fSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: ObjectPoint3fSequence */


/* Begin STRUCT: ImageObjectsKeyPoint2d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ImageObjectsKeyPoint2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ImageObjectsKeyPoint2d& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ImageObjectsKeyPoint2d& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ImageObjectsKeyPoint2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsKeyPoint2d>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsKeyPoint2d>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ImageObjectsKeyPoint2d>& stru);

template <>
struct MarshalTraits<holo_base_msg::vision::ImageObjectsKeyPoint2d> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(3);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const holo_base_msg::vision::ImageObjectsKeyPoint2d&) { return false; }
  static bool from_message_block(holo_base_msg::vision::ImageObjectsKeyPoint2d&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const holo_base_msg::vision::ImageObjectsKeyPoint2d> stru);

bool operator<<(Serializer& strm, KeyOnly<const holo_base_msg::vision::ImageObjectsKeyPoint2d> stru);

bool operator>>(Serializer& strm, KeyOnly<holo_base_msg::vision::ImageObjectsKeyPoint2d> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
/// This structure supports use of std::map with one or more keys.
struct  ImageObjectsKeyPoint2d_OpenDDS_KeyLessThan {
  bool operator()(const holo_base_msg::vision::ImageObjectsKeyPoint2d&, const holo_base_msg::vision::ImageObjectsKeyPoint2d&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ImageObjectsKeyPoint2d& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class ImageObjectsKeyPoint2dTypeSupportImpl;
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits<holo_base_msg::vision::ImageObjectsKeyPoint2d> {
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2d MessageType;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2dSeq MessageSequenceType;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2dTypeSupport TypeSupportType;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2dTypeSupportImpl TypeSupportTypeImpl;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2dDataWriter DataWriterType;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2dDataReader DataReaderType;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2d_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const holo_base_msg::vision::ImageObjectsKeyPoint2d> KeyOnlyType;

  static const char* type_name() { return "holo_base_msg::vision::ImageObjectsKeyPoint2d"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class  ImageObjectsKeyPoint2dTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<ImageObjectsKeyPoint2dTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<ImageObjectsKeyPoint2d> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<ImageObjectsKeyPoint2d> MarshalTraitsType;
  typedef ImageObjectsKeyPoint2dTypeSupport TypeSupportType;
  typedef ImageObjectsKeyPoint2dTypeSupport::_var_type _var_type;
  typedef ImageObjectsKeyPoint2dTypeSupport::_ptr_type _ptr_type;

  ImageObjectsKeyPoint2dTypeSupportImpl() {}
  virtual ~ImageObjectsKeyPoint2dTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static ImageObjectsKeyPoint2dTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ImageObjectsKeyPoint2d>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ImageObjectsKeyPoint2d*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ImageObjectsKeyPoint2d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ImageObjectsKeyPoint2d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ImageObjectsKeyPoint2d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ImageObjectsKeyPoint2d */


/* Begin STRUCT: ImageObjectsKeyPoint2f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ImageObjectsKeyPoint2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ImageObjectsKeyPoint2f& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ImageObjectsKeyPoint2f& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ImageObjectsKeyPoint2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsKeyPoint2f>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsKeyPoint2f>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ImageObjectsKeyPoint2f>& stru);

template <>
struct MarshalTraits<holo_base_msg::vision::ImageObjectsKeyPoint2f> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(3);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const holo_base_msg::vision::ImageObjectsKeyPoint2f&) { return false; }
  static bool from_message_block(holo_base_msg::vision::ImageObjectsKeyPoint2f&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const holo_base_msg::vision::ImageObjectsKeyPoint2f> stru);

bool operator<<(Serializer& strm, KeyOnly<const holo_base_msg::vision::ImageObjectsKeyPoint2f> stru);

bool operator>>(Serializer& strm, KeyOnly<holo_base_msg::vision::ImageObjectsKeyPoint2f> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
/// This structure supports use of std::map with one or more keys.
struct  ImageObjectsKeyPoint2f_OpenDDS_KeyLessThan {
  bool operator()(const holo_base_msg::vision::ImageObjectsKeyPoint2f&, const holo_base_msg::vision::ImageObjectsKeyPoint2f&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ImageObjectsKeyPoint2f& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class ImageObjectsKeyPoint2fTypeSupportImpl;
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits<holo_base_msg::vision::ImageObjectsKeyPoint2f> {
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2f MessageType;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2fSeq MessageSequenceType;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2fTypeSupport TypeSupportType;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2fTypeSupportImpl TypeSupportTypeImpl;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2fDataWriter DataWriterType;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2fDataReader DataReaderType;
  typedef holo_base_msg::vision::ImageObjectsKeyPoint2f_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const holo_base_msg::vision::ImageObjectsKeyPoint2f> KeyOnlyType;

  static const char* type_name() { return "holo_base_msg::vision::ImageObjectsKeyPoint2f"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class  ImageObjectsKeyPoint2fTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<ImageObjectsKeyPoint2fTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<ImageObjectsKeyPoint2f> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<ImageObjectsKeyPoint2f> MarshalTraitsType;
  typedef ImageObjectsKeyPoint2fTypeSupport TypeSupportType;
  typedef ImageObjectsKeyPoint2fTypeSupport::_var_type _var_type;
  typedef ImageObjectsKeyPoint2fTypeSupport::_ptr_type _ptr_type;

  ImageObjectsKeyPoint2fTypeSupportImpl() {}
  virtual ~ImageObjectsKeyPoint2fTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static ImageObjectsKeyPoint2fTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ImageObjectsKeyPoint2f>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ImageObjectsKeyPoint2f*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ImageObjectsKeyPoint2f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ImageObjectsKeyPoint2f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ImageObjectsKeyPoint2f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ImageObjectsKeyPoint2f */


/* Begin STRUCT: ImageObjectsPoint2d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ImageObjectsPoint2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ImageObjectsPoint2d& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ImageObjectsPoint2d& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ImageObjectsPoint2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsPoint2d>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsPoint2d>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ImageObjectsPoint2d>& stru);

template <>
struct MarshalTraits<holo_base_msg::vision::ImageObjectsPoint2d> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(3);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const holo_base_msg::vision::ImageObjectsPoint2d&) { return false; }
  static bool from_message_block(holo_base_msg::vision::ImageObjectsPoint2d&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const holo_base_msg::vision::ImageObjectsPoint2d> stru);

bool operator<<(Serializer& strm, KeyOnly<const holo_base_msg::vision::ImageObjectsPoint2d> stru);

bool operator>>(Serializer& strm, KeyOnly<holo_base_msg::vision::ImageObjectsPoint2d> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
/// This structure supports use of std::map with one or more keys.
struct  ImageObjectsPoint2d_OpenDDS_KeyLessThan {
  bool operator()(const holo_base_msg::vision::ImageObjectsPoint2d&, const holo_base_msg::vision::ImageObjectsPoint2d&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ImageObjectsPoint2d& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class ImageObjectsPoint2dTypeSupportImpl;
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits<holo_base_msg::vision::ImageObjectsPoint2d> {
  typedef holo_base_msg::vision::ImageObjectsPoint2d MessageType;
  typedef holo_base_msg::vision::ImageObjectsPoint2dSeq MessageSequenceType;
  typedef holo_base_msg::vision::ImageObjectsPoint2dTypeSupport TypeSupportType;
  typedef holo_base_msg::vision::ImageObjectsPoint2dTypeSupportImpl TypeSupportTypeImpl;
  typedef holo_base_msg::vision::ImageObjectsPoint2dDataWriter DataWriterType;
  typedef holo_base_msg::vision::ImageObjectsPoint2dDataReader DataReaderType;
  typedef holo_base_msg::vision::ImageObjectsPoint2d_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const holo_base_msg::vision::ImageObjectsPoint2d> KeyOnlyType;

  static const char* type_name() { return "holo_base_msg::vision::ImageObjectsPoint2d"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class  ImageObjectsPoint2dTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<ImageObjectsPoint2dTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<ImageObjectsPoint2d> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<ImageObjectsPoint2d> MarshalTraitsType;
  typedef ImageObjectsPoint2dTypeSupport TypeSupportType;
  typedef ImageObjectsPoint2dTypeSupport::_var_type _var_type;
  typedef ImageObjectsPoint2dTypeSupport::_ptr_type _ptr_type;

  ImageObjectsPoint2dTypeSupportImpl() {}
  virtual ~ImageObjectsPoint2dTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static ImageObjectsPoint2dTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ImageObjectsPoint2d>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ImageObjectsPoint2d*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ImageObjectsPoint2d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ImageObjectsPoint2d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ImageObjectsPoint2d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ImageObjectsPoint2d */


/* Begin STRUCT: ImageObjectsPoint2f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ImageObjectsPoint2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ImageObjectsPoint2f& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ImageObjectsPoint2f& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ImageObjectsPoint2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsPoint2f>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsPoint2f>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ImageObjectsPoint2f>& stru);

template <>
struct MarshalTraits<holo_base_msg::vision::ImageObjectsPoint2f> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(3);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const holo_base_msg::vision::ImageObjectsPoint2f&) { return false; }
  static bool from_message_block(holo_base_msg::vision::ImageObjectsPoint2f&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const holo_base_msg::vision::ImageObjectsPoint2f> stru);

bool operator<<(Serializer& strm, KeyOnly<const holo_base_msg::vision::ImageObjectsPoint2f> stru);

bool operator>>(Serializer& strm, KeyOnly<holo_base_msg::vision::ImageObjectsPoint2f> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
/// This structure supports use of std::map with one or more keys.
struct  ImageObjectsPoint2f_OpenDDS_KeyLessThan {
  bool operator()(const holo_base_msg::vision::ImageObjectsPoint2f&, const holo_base_msg::vision::ImageObjectsPoint2f&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ImageObjectsPoint2f& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class ImageObjectsPoint2fTypeSupportImpl;
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits<holo_base_msg::vision::ImageObjectsPoint2f> {
  typedef holo_base_msg::vision::ImageObjectsPoint2f MessageType;
  typedef holo_base_msg::vision::ImageObjectsPoint2fSeq MessageSequenceType;
  typedef holo_base_msg::vision::ImageObjectsPoint2fTypeSupport TypeSupportType;
  typedef holo_base_msg::vision::ImageObjectsPoint2fTypeSupportImpl TypeSupportTypeImpl;
  typedef holo_base_msg::vision::ImageObjectsPoint2fDataWriter DataWriterType;
  typedef holo_base_msg::vision::ImageObjectsPoint2fDataReader DataReaderType;
  typedef holo_base_msg::vision::ImageObjectsPoint2f_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const holo_base_msg::vision::ImageObjectsPoint2f> KeyOnlyType;

  static const char* type_name() { return "holo_base_msg::vision::ImageObjectsPoint2f"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class  ImageObjectsPoint2fTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<ImageObjectsPoint2fTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<ImageObjectsPoint2f> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<ImageObjectsPoint2f> MarshalTraitsType;
  typedef ImageObjectsPoint2fTypeSupport TypeSupportType;
  typedef ImageObjectsPoint2fTypeSupport::_var_type _var_type;
  typedef ImageObjectsPoint2fTypeSupport::_ptr_type _ptr_type;

  ImageObjectsPoint2fTypeSupportImpl() {}
  virtual ~ImageObjectsPoint2fTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static ImageObjectsPoint2fTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ImageObjectsPoint2f>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ImageObjectsPoint2f*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ImageObjectsPoint2f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ImageObjectsPoint2f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ImageObjectsPoint2f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ImageObjectsPoint2f */


/* Begin STRUCT: ImageObjectsPoint3d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ImageObjectsPoint3d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ImageObjectsPoint3d& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ImageObjectsPoint3d& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ImageObjectsPoint3d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsPoint3d>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsPoint3d>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ImageObjectsPoint3d>& stru);

template <>
struct MarshalTraits<holo_base_msg::vision::ImageObjectsPoint3d> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(3);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const holo_base_msg::vision::ImageObjectsPoint3d&) { return false; }
  static bool from_message_block(holo_base_msg::vision::ImageObjectsPoint3d&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const holo_base_msg::vision::ImageObjectsPoint3d> stru);

bool operator<<(Serializer& strm, KeyOnly<const holo_base_msg::vision::ImageObjectsPoint3d> stru);

bool operator>>(Serializer& strm, KeyOnly<holo_base_msg::vision::ImageObjectsPoint3d> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
/// This structure supports use of std::map with one or more keys.
struct  ImageObjectsPoint3d_OpenDDS_KeyLessThan {
  bool operator()(const holo_base_msg::vision::ImageObjectsPoint3d&, const holo_base_msg::vision::ImageObjectsPoint3d&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ImageObjectsPoint3d& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class ImageObjectsPoint3dTypeSupportImpl;
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits<holo_base_msg::vision::ImageObjectsPoint3d> {
  typedef holo_base_msg::vision::ImageObjectsPoint3d MessageType;
  typedef holo_base_msg::vision::ImageObjectsPoint3dSeq MessageSequenceType;
  typedef holo_base_msg::vision::ImageObjectsPoint3dTypeSupport TypeSupportType;
  typedef holo_base_msg::vision::ImageObjectsPoint3dTypeSupportImpl TypeSupportTypeImpl;
  typedef holo_base_msg::vision::ImageObjectsPoint3dDataWriter DataWriterType;
  typedef holo_base_msg::vision::ImageObjectsPoint3dDataReader DataReaderType;
  typedef holo_base_msg::vision::ImageObjectsPoint3d_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const holo_base_msg::vision::ImageObjectsPoint3d> KeyOnlyType;

  static const char* type_name() { return "holo_base_msg::vision::ImageObjectsPoint3d"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class  ImageObjectsPoint3dTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<ImageObjectsPoint3dTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<ImageObjectsPoint3d> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<ImageObjectsPoint3d> MarshalTraitsType;
  typedef ImageObjectsPoint3dTypeSupport TypeSupportType;
  typedef ImageObjectsPoint3dTypeSupport::_var_type _var_type;
  typedef ImageObjectsPoint3dTypeSupport::_ptr_type _ptr_type;

  ImageObjectsPoint3dTypeSupportImpl() {}
  virtual ~ImageObjectsPoint3dTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static ImageObjectsPoint3dTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ImageObjectsPoint3d>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ImageObjectsPoint3d*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ImageObjectsPoint3d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ImageObjectsPoint3d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ImageObjectsPoint3d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ImageObjectsPoint3d */


/* Begin STRUCT: ImageObjectsPoint3f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::vision::ImageObjectsPoint3f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::vision::ImageObjectsPoint3f& stru);

bool operator<<(Serializer& strm, const holo_base_msg::vision::ImageObjectsPoint3f& stru);

bool operator>>(Serializer& strm, holo_base_msg::vision::ImageObjectsPoint3f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsPoint3f>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::vision::ImageObjectsPoint3f>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::vision::ImageObjectsPoint3f>& stru);

template <>
struct MarshalTraits<holo_base_msg::vision::ImageObjectsPoint3f> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(3);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const holo_base_msg::vision::ImageObjectsPoint3f&) { return false; }
  static bool from_message_block(holo_base_msg::vision::ImageObjectsPoint3f&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const holo_base_msg::vision::ImageObjectsPoint3f> stru);

bool operator<<(Serializer& strm, KeyOnly<const holo_base_msg::vision::ImageObjectsPoint3f> stru);

bool operator>>(Serializer& strm, KeyOnly<holo_base_msg::vision::ImageObjectsPoint3f> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
/// This structure supports use of std::map with one or more keys.
struct  ImageObjectsPoint3f_OpenDDS_KeyLessThan {
  bool operator()(const holo_base_msg::vision::ImageObjectsPoint3f&, const holo_base_msg::vision::ImageObjectsPoint3f&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::vision::ImageObjectsPoint3f& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class ImageObjectsPoint3fTypeSupportImpl;
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits<holo_base_msg::vision::ImageObjectsPoint3f> {
  typedef holo_base_msg::vision::ImageObjectsPoint3f MessageType;
  typedef holo_base_msg::vision::ImageObjectsPoint3fSeq MessageSequenceType;
  typedef holo_base_msg::vision::ImageObjectsPoint3fTypeSupport TypeSupportType;
  typedef holo_base_msg::vision::ImageObjectsPoint3fTypeSupportImpl TypeSupportTypeImpl;
  typedef holo_base_msg::vision::ImageObjectsPoint3fDataWriter DataWriterType;
  typedef holo_base_msg::vision::ImageObjectsPoint3fDataReader DataReaderType;
  typedef holo_base_msg::vision::ImageObjectsPoint3f_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const holo_base_msg::vision::ImageObjectsPoint3f> KeyOnlyType;

  static const char* type_name() { return "holo_base_msg::vision::ImageObjectsPoint3f"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace vision {
class  ImageObjectsPoint3fTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<ImageObjectsPoint3fTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<ImageObjectsPoint3f> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<ImageObjectsPoint3f> MarshalTraitsType;
  typedef ImageObjectsPoint3fTypeSupport TypeSupportType;
  typedef ImageObjectsPoint3fTypeSupport::_var_type _var_type;
  typedef ImageObjectsPoint3fTypeSupport::_ptr_type _ptr_type;

  ImageObjectsPoint3fTypeSupportImpl() {}
  virtual ~ImageObjectsPoint3fTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static ImageObjectsPoint3fTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::vision::ImageObjectsPoint3f>();
bool gen_skip_over(Serializer& ser, holo_base_msg::vision::ImageObjectsPoint3f*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_vision_ImageObjectsPoint3f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_vision_ImageObjectsPoint3f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_vision_ImageObjectsPoint3f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: ImageObjectsPoint3f */

/* End MODULE: vision */

/* End MODULE: holo_base_msg */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_IMAGEOBJECTSTYPESUPPORTIMPL_H_61G9MG */
