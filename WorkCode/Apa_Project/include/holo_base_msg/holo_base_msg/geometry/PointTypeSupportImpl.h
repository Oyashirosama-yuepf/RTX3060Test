/* -*- C++ -*- */
/* Generated by /home/holo/workspace/output/tda4_ubuntu-18.04/debug/host/bin/opendds_idl version 3.16 (ACE version 6.2a_p19) running on input file /home/holo/workspace/src/holo_base_msg/opendds_msg/message/holo_base_msg/geometry/Point.idl */
#ifndef OPENDDS_IDL_GENERATED_POINTTYPESUPPORTIMPL_H_20EGIO
#define OPENDDS_IDL_GENERATED_POINTTYPESUPPORTIMPL_H_20EGIO
#include "PointC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "dds/Version.h"
#if DDS_MAJOR_VERSION != 3 || DDS_MINOR_VERSION != 16 || DDS_MICRO_VERSION != 0
#error This file should be regenerated with opendds_idl
#endif
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "holo_base_msg/core/TypesC.h"
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: holo_base_msg */



/* Begin MODULE: core */



/* Begin TYPEDEF: bool_t */


/* End TYPEDEF: bool_t */


/* Begin TYPEDEF: char_t */


/* End TYPEDEF: char_t */


/* Begin TYPEDEF: _cxx_wchar_t */


/* End TYPEDEF: _cxx_wchar_t */


/* Begin TYPEDEF: int8_t */


/* End TYPEDEF: int8_t */


/* Begin TYPEDEF: uint8_t */


/* End TYPEDEF: uint8_t */


/* Begin TYPEDEF: int16_t */


/* End TYPEDEF: int16_t */


/* Begin TYPEDEF: uint16_t */


/* End TYPEDEF: uint16_t */


/* Begin TYPEDEF: int32_t */


/* End TYPEDEF: int32_t */


/* Begin TYPEDEF: uint32_t */


/* End TYPEDEF: uint32_t */


/* Begin TYPEDEF: int64_t */


/* End TYPEDEF: int64_t */


/* Begin TYPEDEF: uint64_t */


/* End TYPEDEF: uint64_t */


/* Begin TYPEDEF: float32_t */


/* End TYPEDEF: float32_t */


/* Begin TYPEDEF: float64_t */


/* End TYPEDEF: float64_t */


/* Begin TYPEDEF: BoolSequence */


/* End TYPEDEF: BoolSequence */


/* Begin TYPEDEF: CharSequence */


/* End TYPEDEF: CharSequence */


/* Begin TYPEDEF: WcharSequence */


/* End TYPEDEF: WcharSequence */


/* Begin TYPEDEF: Int8Sequence */


/* End TYPEDEF: Int8Sequence */


/* Begin TYPEDEF: Uint8Sequence */


/* End TYPEDEF: Uint8Sequence */


/* Begin TYPEDEF: Int16Sequence */


/* End TYPEDEF: Int16Sequence */


/* Begin TYPEDEF: Uint16Sequence */


/* End TYPEDEF: Uint16Sequence */


/* Begin TYPEDEF: Int32Sequence */


/* End TYPEDEF: Int32Sequence */


/* Begin TYPEDEF: Uint32Sequence */


/* End TYPEDEF: Uint32Sequence */


/* Begin TYPEDEF: Int64Sequence */


/* End TYPEDEF: Int64Sequence */


/* Begin TYPEDEF: Uint64Sequence */


/* End TYPEDEF: Uint64Sequence */


/* Begin TYPEDEF: Float32Sequence */


/* End TYPEDEF: Float32Sequence */


/* Begin TYPEDEF: Float64Sequence */


/* End TYPEDEF: Float64Sequence */

/* End MODULE: core */

/* End MODULE: holo_base_msg */


/* Begin MODULE: holo_base_msg */



/* Begin MODULE: geometry */



/* Begin STRUCT: Point3f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::geometry::Point3f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::geometry::Point3f& stru);

bool operator<<(Serializer& strm, const holo_base_msg::geometry::Point3f& stru);

bool operator>>(Serializer& strm, holo_base_msg::geometry::Point3f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::geometry::Point3f>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::geometry::Point3f>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::geometry::Point3f>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::geometry::Point3f& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<holo_base_msg::geometry::Point3f>();
bool gen_skip_over(Serializer& ser, holo_base_msg::geometry::Point3f*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_geometry_Point3f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_geometry_Point3f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_geometry_Point3f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Point3f */


/* Begin TYPEDEF: Point3fSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::geometry::Point3fSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::geometry::Point3fSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::geometry::Point3fSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::geometry::Point3fSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_geometry_Point3fSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_geometry_Point3fSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_geometry_Point3fSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Point3fSequence */


/* Begin STRUCT: Point3d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::geometry::Point3d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::geometry::Point3d& stru);

bool operator<<(Serializer& strm, const holo_base_msg::geometry::Point3d& stru);

bool operator>>(Serializer& strm, holo_base_msg::geometry::Point3d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::geometry::Point3d>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::geometry::Point3d>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::geometry::Point3d>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::geometry::Point3d& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::geometry::Point3d>();
bool gen_skip_over(Serializer& ser, holo_base_msg::geometry::Point3d*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_geometry_Point3d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_geometry_Point3d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_geometry_Point3d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Point3d */


/* Begin TYPEDEF: Point3dSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::geometry::Point3dSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::geometry::Point3dSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::geometry::Point3dSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::geometry::Point3dSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_geometry_Point3dSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_geometry_Point3dSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_geometry_Point3dSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Point3dSequence */


/* Begin STRUCT: Point2f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::geometry::Point2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::geometry::Point2f& stru);

bool operator<<(Serializer& strm, const holo_base_msg::geometry::Point2f& stru);

bool operator>>(Serializer& strm, holo_base_msg::geometry::Point2f& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::geometry::Point2f>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::geometry::Point2f>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::geometry::Point2f>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::geometry::Point2f& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::geometry::Point2f>();
bool gen_skip_over(Serializer& ser, holo_base_msg::geometry::Point2f*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_geometry_Point2f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_geometry_Point2f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_geometry_Point2f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Point2f */


/* Begin TYPEDEF: Point2fSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::geometry::Point2fSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::geometry::Point2fSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::geometry::Point2fSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::geometry::Point2fSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_geometry_Point2fSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_geometry_Point2fSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_geometry_Point2fSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Point2fSequence */


/* Begin STRUCT: Point2d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::geometry::Point2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::geometry::Point2d& stru);

bool operator<<(Serializer& strm, const holo_base_msg::geometry::Point2d& stru);

bool operator>>(Serializer& strm, holo_base_msg::geometry::Point2d& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::geometry::Point2d>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::geometry::Point2d>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::geometry::Point2d>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::geometry::Point2d& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::geometry::Point2d>();
bool gen_skip_over(Serializer& ser, holo_base_msg::geometry::Point2d*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_geometry_Point2d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_geometry_Point2d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_geometry_Point2d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Point2d */


/* Begin TYPEDEF: Point2dSequence */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::geometry::Point2dSequence& seq);

bool operator<<(Serializer& strm, const holo_base_msg::geometry::Point2dSequence& seq);

bool operator>>(Serializer& strm, holo_base_msg::geometry::Point2dSequence& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::geometry::Point2dSequence*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_geometry_Point2dSequence_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_geometry_Point2dSequence_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_geometry_Point2dSequence_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Point2dSequence */

/* End MODULE: geometry */

/* End MODULE: holo_base_msg */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_POINTTYPESUPPORTIMPL_H_20EGIO */
