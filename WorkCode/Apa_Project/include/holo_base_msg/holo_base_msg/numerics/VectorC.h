// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p19
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL__HOME_HOLO_WORKSPACE_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_BASE_MSG_INCLUDE_HOLO_BASE_MSG_NUMERICS_VECTORC_MHSBUE_H_
#define _TAO_IDL__HOME_HOLO_WORKSPACE_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_BASE_MSG_INCLUDE_HOLO_BASE_MSG_NUMERICS_VECTORC_MHSBUE_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/Array_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Fixed_Array_Argument_T.h"
#include "tao/Var_Array_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "holo_base_msg/core/TypesC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace holo_base_msg
{

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:38

  namespace numerics
  {

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_NUMERICS_VECTORD_CH_)
#define _HOLO_BASE_MSG_NUMERICS_VECTORD_CH_

    class Vectord;

    typedef
      ::TAO_FixedSeq_Var_T<
          Vectord
        >
      Vectord_var;

    typedef
      ::TAO_Seq_Out_T<
          Vectord
        >
      Vectord_out;

    class  Vectord
      : public
          ::TAO::unbounded_value_sequence<
              holo_base_msg::core::float64_t
            >
    {
    public:
      Vectord (void);
      Vectord ( ::CORBA::ULong max);
      Vectord (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Double* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Vectord (const Vectord &) = default;
      Vectord (Vectord &&) = default;
      Vectord& operator= (const Vectord &) = default;
      Vectord& operator= (Vectord &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Vectord (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Vectord_var _var_type;
      typedef Vectord_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vectord;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float64_t Vector2d[2];
    typedef holo_base_msg::core::float64_t Vector2d_slice;
    struct Vector2d_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector2d,
          Vector2d_slice,
          Vector2d_tag
        >
      Vector2d_var;

    typedef
      Vector2d
      Vector2d_out;

    typedef
      TAO_Array_Forany_T<
          Vector2d,
          Vector2d_slice,
          Vector2d_tag
        >
      Vector2d_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector2d_slice *
    Vector2d_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector2d_free (
        Vector2d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector2d_slice *
    Vector2d_dup (
        const Vector2d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector2d_copy (
        Vector2d_slice *_tao_to,
        const Vector2d_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector2d;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float64_t Vector3d[3];
    typedef holo_base_msg::core::float64_t Vector3d_slice;
    struct Vector3d_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector3d,
          Vector3d_slice,
          Vector3d_tag
        >
      Vector3d_var;

    typedef
      Vector3d
      Vector3d_out;

    typedef
      TAO_Array_Forany_T<
          Vector3d,
          Vector3d_slice,
          Vector3d_tag
        >
      Vector3d_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector3d_slice *
    Vector3d_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector3d_free (
        Vector3d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector3d_slice *
    Vector3d_dup (
        const Vector3d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector3d_copy (
        Vector3d_slice *_tao_to,
        const Vector3d_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector3d;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float64_t Vector4d[4];
    typedef holo_base_msg::core::float64_t Vector4d_slice;
    struct Vector4d_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector4d,
          Vector4d_slice,
          Vector4d_tag
        >
      Vector4d_var;

    typedef
      Vector4d
      Vector4d_out;

    typedef
      TAO_Array_Forany_T<
          Vector4d,
          Vector4d_slice,
          Vector4d_tag
        >
      Vector4d_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector4d_slice *
    Vector4d_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector4d_free (
        Vector4d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector4d_slice *
    Vector4d_dup (
        const Vector4d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector4d_copy (
        Vector4d_slice *_tao_to,
        const Vector4d_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector4d;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float64_t Vector5d[5];
    typedef holo_base_msg::core::float64_t Vector5d_slice;
    struct Vector5d_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector5d,
          Vector5d_slice,
          Vector5d_tag
        >
      Vector5d_var;

    typedef
      Vector5d
      Vector5d_out;

    typedef
      TAO_Array_Forany_T<
          Vector5d,
          Vector5d_slice,
          Vector5d_tag
        >
      Vector5d_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector5d_slice *
    Vector5d_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector5d_free (
        Vector5d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector5d_slice *
    Vector5d_dup (
        const Vector5d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector5d_copy (
        Vector5d_slice *_tao_to,
        const Vector5d_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector5d;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float64_t Vector6d[6];
    typedef holo_base_msg::core::float64_t Vector6d_slice;
    struct Vector6d_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector6d,
          Vector6d_slice,
          Vector6d_tag
        >
      Vector6d_var;

    typedef
      Vector6d
      Vector6d_out;

    typedef
      TAO_Array_Forany_T<
          Vector6d,
          Vector6d_slice,
          Vector6d_tag
        >
      Vector6d_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector6d_slice *
    Vector6d_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector6d_free (
        Vector6d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector6d_slice *
    Vector6d_dup (
        const Vector6d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector6d_copy (
        Vector6d_slice *_tao_to,
        const Vector6d_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector6d;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float64_t Vector7d[7];
    typedef holo_base_msg::core::float64_t Vector7d_slice;
    struct Vector7d_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector7d,
          Vector7d_slice,
          Vector7d_tag
        >
      Vector7d_var;

    typedef
      Vector7d
      Vector7d_out;

    typedef
      TAO_Array_Forany_T<
          Vector7d,
          Vector7d_slice,
          Vector7d_tag
        >
      Vector7d_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector7d_slice *
    Vector7d_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector7d_free (
        Vector7d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector7d_slice *
    Vector7d_dup (
        const Vector7d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector7d_copy (
        Vector7d_slice *_tao_to,
        const Vector7d_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector7d;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float64_t Vector8d[8];
    typedef holo_base_msg::core::float64_t Vector8d_slice;
    struct Vector8d_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector8d,
          Vector8d_slice,
          Vector8d_tag
        >
      Vector8d_var;

    typedef
      Vector8d
      Vector8d_out;

    typedef
      TAO_Array_Forany_T<
          Vector8d,
          Vector8d_slice,
          Vector8d_tag
        >
      Vector8d_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector8d_slice *
    Vector8d_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector8d_free (
        Vector8d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector8d_slice *
    Vector8d_dup (
        const Vector8d_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector8d_copy (
        Vector8d_slice *_tao_to,
        const Vector8d_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector8d;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_NUMERICS_VECTORF_CH_)
#define _HOLO_BASE_MSG_NUMERICS_VECTORF_CH_

    class Vectorf;

    typedef
      ::TAO_FixedSeq_Var_T<
          Vectorf
        >
      Vectorf_var;

    typedef
      ::TAO_Seq_Out_T<
          Vectorf
        >
      Vectorf_out;

    class  Vectorf
      : public
          ::TAO::unbounded_value_sequence<
              holo_base_msg::core::float32_t
            >
    {
    public:
      Vectorf (void);
      Vectorf ( ::CORBA::ULong max);
      Vectorf (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ::CORBA::Float* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Vectorf (const Vectorf &) = default;
      Vectorf (Vectorf &&) = default;
      Vectorf& operator= (const Vectorf &) = default;
      Vectorf& operator= (Vectorf &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Vectorf (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Vectorf_var _var_type;
      typedef Vectorf_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vectorf;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float32_t Vector2f[2];
    typedef holo_base_msg::core::float32_t Vector2f_slice;
    struct Vector2f_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector2f,
          Vector2f_slice,
          Vector2f_tag
        >
      Vector2f_var;

    typedef
      Vector2f
      Vector2f_out;

    typedef
      TAO_Array_Forany_T<
          Vector2f,
          Vector2f_slice,
          Vector2f_tag
        >
      Vector2f_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector2f_slice *
    Vector2f_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector2f_free (
        Vector2f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector2f_slice *
    Vector2f_dup (
        const Vector2f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector2f_copy (
        Vector2f_slice *_tao_to,
        const Vector2f_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector2f;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float32_t Vector3f[3];
    typedef holo_base_msg::core::float32_t Vector3f_slice;
    struct Vector3f_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector3f,
          Vector3f_slice,
          Vector3f_tag
        >
      Vector3f_var;

    typedef
      Vector3f
      Vector3f_out;

    typedef
      TAO_Array_Forany_T<
          Vector3f,
          Vector3f_slice,
          Vector3f_tag
        >
      Vector3f_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector3f_slice *
    Vector3f_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector3f_free (
        Vector3f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector3f_slice *
    Vector3f_dup (
        const Vector3f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector3f_copy (
        Vector3f_slice *_tao_to,
        const Vector3f_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector3f;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float32_t Vector4f[4];
    typedef holo_base_msg::core::float32_t Vector4f_slice;
    struct Vector4f_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector4f,
          Vector4f_slice,
          Vector4f_tag
        >
      Vector4f_var;

    typedef
      Vector4f
      Vector4f_out;

    typedef
      TAO_Array_Forany_T<
          Vector4f,
          Vector4f_slice,
          Vector4f_tag
        >
      Vector4f_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector4f_slice *
    Vector4f_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector4f_free (
        Vector4f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector4f_slice *
    Vector4f_dup (
        const Vector4f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector4f_copy (
        Vector4f_slice *_tao_to,
        const Vector4f_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector4f;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float32_t Vector5f[5];
    typedef holo_base_msg::core::float32_t Vector5f_slice;
    struct Vector5f_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector5f,
          Vector5f_slice,
          Vector5f_tag
        >
      Vector5f_var;

    typedef
      Vector5f
      Vector5f_out;

    typedef
      TAO_Array_Forany_T<
          Vector5f,
          Vector5f_slice,
          Vector5f_tag
        >
      Vector5f_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector5f_slice *
    Vector5f_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector5f_free (
        Vector5f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector5f_slice *
    Vector5f_dup (
        const Vector5f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector5f_copy (
        Vector5f_slice *_tao_to,
        const Vector5f_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector5f;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float32_t Vector6f[6];
    typedef holo_base_msg::core::float32_t Vector6f_slice;
    struct Vector6f_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector6f,
          Vector6f_slice,
          Vector6f_tag
        >
      Vector6f_var;

    typedef
      Vector6f
      Vector6f_out;

    typedef
      TAO_Array_Forany_T<
          Vector6f,
          Vector6f_slice,
          Vector6f_tag
        >
      Vector6f_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector6f_slice *
    Vector6f_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector6f_free (
        Vector6f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector6f_slice *
    Vector6f_dup (
        const Vector6f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector6f_copy (
        Vector6f_slice *_tao_to,
        const Vector6f_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector6f;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float32_t Vector7f[7];
    typedef holo_base_msg::core::float32_t Vector7f_slice;
    struct Vector7f_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector7f,
          Vector7f_slice,
          Vector7f_tag
        >
      Vector7f_var;

    typedef
      Vector7f
      Vector7f_out;

    typedef
      TAO_Array_Forany_T<
          Vector7f,
          Vector7f_slice,
          Vector7f_tag
        >
      Vector7f_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector7f_slice *
    Vector7f_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector7f_free (
        Vector7f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector7f_slice *
    Vector7f_dup (
        const Vector7f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector7f_copy (
        Vector7f_slice *_tao_to,
        const Vector7f_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector7f;

    // TAO_IDL - Generated from
    // be/be_visitor_array/array_ch.cpp:54

    typedef holo_base_msg::core::float32_t Vector8f[8];
    typedef holo_base_msg::core::float32_t Vector8f_slice;
    struct Vector8f_tag {};
    

    typedef
      TAO_FixedArray_Var_T<
          Vector8f,
          Vector8f_slice,
          Vector8f_tag
        >
      Vector8f_var;

    typedef
      Vector8f
      Vector8f_out;

    typedef
      TAO_Array_Forany_T<
          Vector8f,
          Vector8f_slice,
          Vector8f_tag
        >
      Vector8f_forany;

    TAO_NAMESPACE_STORAGE_CLASS Vector8f_slice *
    Vector8f_alloc (void);

    TAO_NAMESPACE_STORAGE_CLASS void
    Vector8f_free (
        Vector8f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS Vector8f_slice *
    Vector8f_dup (
        const Vector8f_slice *_tao_slice);
    
    TAO_NAMESPACE_STORAGE_CLASS void
    Vector8f_copy (
        Vector8f_slice *_tao_to,
        const Vector8f_slice *_tao_from);

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Vector8f;
  
  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:67
  
  } // module holo_base_msg::numerics

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module holo_base_msg

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vectord>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::numerics::Vectord,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector2d_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector2d_var,
            ::holo_base_msg::numerics::Vector2d_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector3d_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector3d_var,
            ::holo_base_msg::numerics::Vector3d_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector4d_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector4d_var,
            ::holo_base_msg::numerics::Vector4d_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector5d_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector5d_var,
            ::holo_base_msg::numerics::Vector5d_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector6d_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector6d_var,
            ::holo_base_msg::numerics::Vector6d_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector7d_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector7d_var,
            ::holo_base_msg::numerics::Vector7d_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector8d_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector8d_var,
            ::holo_base_msg::numerics::Vector8d_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vectorf>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::numerics::Vectorf,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector2f_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector2f_var,
            ::holo_base_msg::numerics::Vector2f_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector3f_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector3f_var,
            ::holo_base_msg::numerics::Vector3f_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector4f_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector4f_var,
            ::holo_base_msg::numerics::Vector4f_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector5f_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector5f_var,
            ::holo_base_msg::numerics::Vector5f_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector6f_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector6f_var,
            ::holo_base_msg::numerics::Vector6f_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector7f_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector7f_var,
            ::holo_base_msg::numerics::Vector7f_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  template<>
  class Arg_Traits< ::holo_base_msg::numerics::Vector8f_tag>
    : public
        Fixed_Array_Arg_Traits_T<
            ::holo_base_msg::numerics::Vector8f_var,
            ::holo_base_msg::numerics::Vector8f_forany,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector2d_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector2d_slice * _tao_slice);
    static holo_base_msg::numerics::Vector2d_slice * dup (
        const holo_base_msg::numerics::Vector2d_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector2d_slice * _tao_to,
        const holo_base_msg::numerics::Vector2d_slice * _tao_from);
    static holo_base_msg::numerics::Vector2d_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector2d_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector3d_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector3d_slice * _tao_slice);
    static holo_base_msg::numerics::Vector3d_slice * dup (
        const holo_base_msg::numerics::Vector3d_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector3d_slice * _tao_to,
        const holo_base_msg::numerics::Vector3d_slice * _tao_from);
    static holo_base_msg::numerics::Vector3d_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector3d_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector4d_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector4d_slice * _tao_slice);
    static holo_base_msg::numerics::Vector4d_slice * dup (
        const holo_base_msg::numerics::Vector4d_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector4d_slice * _tao_to,
        const holo_base_msg::numerics::Vector4d_slice * _tao_from);
    static holo_base_msg::numerics::Vector4d_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector4d_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector5d_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector5d_slice * _tao_slice);
    static holo_base_msg::numerics::Vector5d_slice * dup (
        const holo_base_msg::numerics::Vector5d_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector5d_slice * _tao_to,
        const holo_base_msg::numerics::Vector5d_slice * _tao_from);
    static holo_base_msg::numerics::Vector5d_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector5d_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector6d_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector6d_slice * _tao_slice);
    static holo_base_msg::numerics::Vector6d_slice * dup (
        const holo_base_msg::numerics::Vector6d_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector6d_slice * _tao_to,
        const holo_base_msg::numerics::Vector6d_slice * _tao_from);
    static holo_base_msg::numerics::Vector6d_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector6d_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector7d_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector7d_slice * _tao_slice);
    static holo_base_msg::numerics::Vector7d_slice * dup (
        const holo_base_msg::numerics::Vector7d_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector7d_slice * _tao_to,
        const holo_base_msg::numerics::Vector7d_slice * _tao_from);
    static holo_base_msg::numerics::Vector7d_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector7d_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector8d_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector8d_slice * _tao_slice);
    static holo_base_msg::numerics::Vector8d_slice * dup (
        const holo_base_msg::numerics::Vector8d_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector8d_slice * _tao_to,
        const holo_base_msg::numerics::Vector8d_slice * _tao_from);
    static holo_base_msg::numerics::Vector8d_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector8d_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector2f_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector2f_slice * _tao_slice);
    static holo_base_msg::numerics::Vector2f_slice * dup (
        const holo_base_msg::numerics::Vector2f_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector2f_slice * _tao_to,
        const holo_base_msg::numerics::Vector2f_slice * _tao_from);
    static holo_base_msg::numerics::Vector2f_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector2f_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector3f_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector3f_slice * _tao_slice);
    static holo_base_msg::numerics::Vector3f_slice * dup (
        const holo_base_msg::numerics::Vector3f_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector3f_slice * _tao_to,
        const holo_base_msg::numerics::Vector3f_slice * _tao_from);
    static holo_base_msg::numerics::Vector3f_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector3f_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector4f_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector4f_slice * _tao_slice);
    static holo_base_msg::numerics::Vector4f_slice * dup (
        const holo_base_msg::numerics::Vector4f_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector4f_slice * _tao_to,
        const holo_base_msg::numerics::Vector4f_slice * _tao_from);
    static holo_base_msg::numerics::Vector4f_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector4f_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector5f_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector5f_slice * _tao_slice);
    static holo_base_msg::numerics::Vector5f_slice * dup (
        const holo_base_msg::numerics::Vector5f_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector5f_slice * _tao_to,
        const holo_base_msg::numerics::Vector5f_slice * _tao_from);
    static holo_base_msg::numerics::Vector5f_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector5f_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector6f_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector6f_slice * _tao_slice);
    static holo_base_msg::numerics::Vector6f_slice * dup (
        const holo_base_msg::numerics::Vector6f_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector6f_slice * _tao_to,
        const holo_base_msg::numerics::Vector6f_slice * _tao_from);
    static holo_base_msg::numerics::Vector6f_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector6f_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector7f_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector7f_slice * _tao_slice);
    static holo_base_msg::numerics::Vector7f_slice * dup (
        const holo_base_msg::numerics::Vector7f_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector7f_slice * _tao_to,
        const holo_base_msg::numerics::Vector7f_slice * _tao_from);
    static holo_base_msg::numerics::Vector7f_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector7f_slice * _tao_slice);
  };
  template<>
  struct  Array_Traits<
      holo_base_msg::numerics::Vector8f_forany
    >
  {
    static void free (
        holo_base_msg::numerics::Vector8f_slice * _tao_slice);
    static holo_base_msg::numerics::Vector8f_slice * dup (
        const holo_base_msg::numerics::Vector8f_slice * _tao_slice);
    static void copy (
        holo_base_msg::numerics::Vector8f_slice * _tao_to,
        const holo_base_msg::numerics::Vector8f_slice * _tao_from);
    static holo_base_msg::numerics::Vector8f_slice * alloc (void);
    static void zero (
        holo_base_msg::numerics::Vector8f_slice * _tao_slice);
  };
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace numerics
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::numerics::Vectord &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::numerics::Vectord*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::numerics::Vectord *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::numerics::Vectord *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::numerics::Vectord &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::numerics::Vectord*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vectord *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::numerics::Vectord *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector2d_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector2d_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector3d_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector3d_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector4d_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector4d_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector5d_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector5d_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector6d_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector6d_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector7d_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector7d_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector8d_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector8d_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace numerics
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::numerics::Vectorf &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::numerics::Vectorf*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::numerics::Vectorf *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::numerics::Vectorf *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::numerics::Vectorf &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::numerics::Vectorf*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vectorf *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::numerics::Vectorf *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector2f_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector2f_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector3f_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector3f_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector4f_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector4f_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector5f_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector5f_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector6f_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector6f_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector7f_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector7f_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_array/any_op_ch.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::numerics::Vector8f_forany &);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::numerics::Vector8f_forany &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_numerics_Vectord_H_
#define _TAO_CDR_OP_holo_base_msg_numerics_Vectord_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::numerics::Vectord &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::numerics::Vectord &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_numerics_Vectord_H_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector2d_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector2d_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector3d_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector3d_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector4d_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector4d_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector5d_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector5d_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector6d_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector6d_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector7d_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector7d_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector8d_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector8d_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_numerics_Vectorf_H_
#define _TAO_CDR_OP_holo_base_msg_numerics_Vectorf_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::numerics::Vectorf &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::numerics::Vectorf &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_numerics_Vectorf_H_ */

// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector2f_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector2f_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector3f_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector3f_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector4f_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector4f_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector5f_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector5f_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector6f_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector6f_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector7f_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector7f_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_visitor_array/cdr_op_ch.cpp:102


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 CORBA::Boolean operator<< (TAO_OutputCDR &strm, const holo_base_msg::numerics::Vector8f_forany &_tao_array);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::numerics::Vector8f_forany &_tao_array);

TAO_END_VERSIONED_NAMESPACE_DECL


// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "VectorC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

