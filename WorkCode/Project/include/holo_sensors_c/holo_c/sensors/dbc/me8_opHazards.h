#ifndef HOLO_SENSORS_ME8_ME8_OPHAZARDS_H_
#define HOLO_SENSORS_ME8_ME8_OPHAZARDS_H_
/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2021年 12月 06日 星期一 13:13:09 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_opHazards
 */

/**
 * @defgroup DB_opHazards CAN Database opHazards
 *
 * Path to file: output/opHazards.dbc
 *
 * Provides the following ECUs:
 */

/**
 * @defgroup MSG_Hazards_Header Message Hazards_Header (0x486)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Hazards_Header_Protocol_Version
 * - \ref SIG_Hazards_Header_imageTimestamp
 * - \ref SIG_Hazards_Header_Num_Hazards_Objects
 * - \ref SIG_Hazards_Header_Valid_Frame
 *
 * @{
 */

/**
 * Message Hazards_Header configuration tuple.
 */
#define MSG_Hazards_Header                          0x486, 0, 6

/**
 * Message Hazards_Header id.
 */
#define ID_Hazards_Header                           0x486

/**
 * Message Hazards_Header extended id bit.
 */
#define EXT_Hazards_Header                          0

/**
 * Message Hazards_Header Data Length Count.
 */
#define DLC_Hazards_Header                          6

/**
 * Message Hazards_Header cycle time.
 */
#define CYCLE_Hazards_Header                        0

/**
 * Message Hazards_Header fast cycle time.
 */
#define FAST_Hazards_Header                         0

/**
 * Initialise message Hazards_Header buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Hazards_Header(buf) { \
	INITSIG_Hazards_Header_Protocol_Version(buf); \
	INITSIG_Hazards_Header_imageTimestamp(buf); \
	INITSIG_Hazards_Header_Num_Hazards_Objects(buf); \
	INITSIG_Hazards_Header_Valid_Frame(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Hazards_UTC Message Hazards_UTC (0x487)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Hazards_UTC_UTC_Timestamp
 *
 * @{
 */

/**
 * Message Hazards_UTC configuration tuple.
 */
#define MSG_Hazards_UTC                             0x487, 0, 7

/**
 * Message Hazards_UTC id.
 */
#define ID_Hazards_UTC                              0x487

/**
 * Message Hazards_UTC extended id bit.
 */
#define EXT_Hazards_UTC                             0

/**
 * Message Hazards_UTC Data Length Count.
 */
#define DLC_Hazards_UTC                             7

/**
 * Message Hazards_UTC cycle time.
 */
#define CYCLE_Hazards_UTC                           0

/**
 * Message Hazards_UTC fast cycle time.
 */
#define FAST_Hazards_UTC                            0

/**
 * Initialise message Hazards_UTC buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Hazards_UTC(buf) { \
	INITSIG_Hazards_UTC_UTC_Timestamp(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Hazards_0A Message Hazards_0A (0x488)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Hazards_0A_HZD_ID
 * - \ref SIG_Hazards_0A_HZD_ExistenceProb
 * - \ref SIG_Hazards_0A_HZD_Lateral_Position
 * - \ref SIG_Hazards_0A_HZD_Longitudinal_Position
 * - \ref SIG_Hazards_0A_HZD_Vertical_Position
 *
 * @{
 */

/**
 * Message Hazards_0A configuration tuple.
 */
#define MSG_Hazards_0A                              0x488, 0, 8

/**
 * Message Hazards_0A id.
 */
#define ID_Hazards_0A                               0x488

/**
 * Message Hazards_0A extended id bit.
 */
#define EXT_Hazards_0A                              0

/**
 * Message Hazards_0A Data Length Count.
 */
#define DLC_Hazards_0A                              8

/**
 * Message Hazards_0A cycle time.
 */
#define CYCLE_Hazards_0A                            0

/**
 * Message Hazards_0A fast cycle time.
 */
#define FAST_Hazards_0A                             0

/**
 * Initialise message Hazards_0A buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Hazards_0A(buf) { \
	INITSIG_Hazards_0A_HZD_ID(buf); \
	INITSIG_Hazards_0A_HZD_ExistenceProb(buf); \
	INITSIG_Hazards_0A_HZD_Lateral_Position(buf); \
	INITSIG_Hazards_0A_HZD_Longitudinal_Position(buf); \
	INITSIG_Hazards_0A_HZD_Vertical_Position(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Hazards_0B Message Hazards_0B (0x489)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Hazards_0B_HZD_Height
 * - \ref SIG_Hazards_0B_HZD_Width
 * - \ref SIG_Hazards_0B_HZD_Lateral_STD
 * - \ref SIG_Hazards_0B_HZD_Longitudinal_STD
 *
 * @{
 */

/**
 * Message Hazards_0B configuration tuple.
 */
#define MSG_Hazards_0B                              0x489, 0, 5

/**
 * Message Hazards_0B id.
 */
#define ID_Hazards_0B                               0x489

/**
 * Message Hazards_0B extended id bit.
 */
#define EXT_Hazards_0B                              0

/**
 * Message Hazards_0B Data Length Count.
 */
#define DLC_Hazards_0B                              5

/**
 * Message Hazards_0B cycle time.
 */
#define CYCLE_Hazards_0B                            0

/**
 * Message Hazards_0B fast cycle time.
 */
#define FAST_Hazards_0B                             0

/**
 * Initialise message Hazards_0B buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Hazards_0B(buf) { \
	INITSIG_Hazards_0B_HZD_Height(buf); \
	INITSIG_Hazards_0B_HZD_Width(buf); \
	INITSIG_Hazards_0B_HZD_Lateral_STD(buf); \
	INITSIG_Hazards_0B_HZD_Longitudinal_STD(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Hazards_1A Message Hazards_1A (0x48a)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Hazards_1A_HZD_ID
 * - \ref SIG_Hazards_1A_HZD_ExistenceProb
 * - \ref SIG_Hazards_1A_HZD_Lateral_Position
 * - \ref SIG_Hazards_1A_HZD_Longitudinal_Position
 * - \ref SIG_Hazards_1A_HZD_Vertical_Position
 *
 * @{
 */

/**
 * Message Hazards_1A configuration tuple.
 */
#define MSG_Hazards_1A                              0x48a, 0, 8

/**
 * Message Hazards_1A id.
 */
#define ID_Hazards_1A                               0x48a

/**
 * Message Hazards_1A extended id bit.
 */
#define EXT_Hazards_1A                              0

/**
 * Message Hazards_1A Data Length Count.
 */
#define DLC_Hazards_1A                              8

/**
 * Message Hazards_1A cycle time.
 */
#define CYCLE_Hazards_1A                            0

/**
 * Message Hazards_1A fast cycle time.
 */
#define FAST_Hazards_1A                             0

/**
 * Initialise message Hazards_1A buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Hazards_1A(buf) { \
	INITSIG_Hazards_1A_HZD_ID(buf); \
	INITSIG_Hazards_1A_HZD_ExistenceProb(buf); \
	INITSIG_Hazards_1A_HZD_Lateral_Position(buf); \
	INITSIG_Hazards_1A_HZD_Longitudinal_Position(buf); \
	INITSIG_Hazards_1A_HZD_Vertical_Position(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Hazards_1B Message Hazards_1B (0x48b)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Hazards_1B_HZD_Height
 * - \ref SIG_Hazards_1B_HZD_Width
 * - \ref SIG_Hazards_1B_HZD_Lateral_STD
 * - \ref SIG_Hazards_1B_HZD_Longitudinal_STD
 *
 * @{
 */

/**
 * Message Hazards_1B configuration tuple.
 */
#define MSG_Hazards_1B                              0x48b, 0, 5

/**
 * Message Hazards_1B id.
 */
#define ID_Hazards_1B                               0x48b

/**
 * Message Hazards_1B extended id bit.
 */
#define EXT_Hazards_1B                              0

/**
 * Message Hazards_1B Data Length Count.
 */
#define DLC_Hazards_1B                              5

/**
 * Message Hazards_1B cycle time.
 */
#define CYCLE_Hazards_1B                            0

/**
 * Message Hazards_1B fast cycle time.
 */
#define FAST_Hazards_1B                             0

/**
 * Initialise message Hazards_1B buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Hazards_1B(buf) { \
	INITSIG_Hazards_1B_HZD_Height(buf); \
	INITSIG_Hazards_1B_HZD_Width(buf); \
	INITSIG_Hazards_1B_HZD_Lateral_STD(buf); \
	INITSIG_Hazards_1B_HZD_Longitudinal_STD(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Hazards_2A Message Hazards_2A (0x48c)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Hazards_2A_HZD_ID
 * - \ref SIG_Hazards_2A_HZD_ExistenceProb
 * - \ref SIG_Hazards_2A_HZD_Lateral_Position
 * - \ref SIG_Hazards_2A_HZD_Longitudinal_Position
 * - \ref SIG_Hazards_2A_HZD_Vertical_Position
 *
 * @{
 */

/**
 * Message Hazards_2A configuration tuple.
 */
#define MSG_Hazards_2A                              0x48c, 0, 8

/**
 * Message Hazards_2A id.
 */
#define ID_Hazards_2A                               0x48c

/**
 * Message Hazards_2A extended id bit.
 */
#define EXT_Hazards_2A                              0

/**
 * Message Hazards_2A Data Length Count.
 */
#define DLC_Hazards_2A                              8

/**
 * Message Hazards_2A cycle time.
 */
#define CYCLE_Hazards_2A                            0

/**
 * Message Hazards_2A fast cycle time.
 */
#define FAST_Hazards_2A                             0

/**
 * Initialise message Hazards_2A buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Hazards_2A(buf) { \
	INITSIG_Hazards_2A_HZD_ID(buf); \
	INITSIG_Hazards_2A_HZD_ExistenceProb(buf); \
	INITSIG_Hazards_2A_HZD_Lateral_Position(buf); \
	INITSIG_Hazards_2A_HZD_Longitudinal_Position(buf); \
	INITSIG_Hazards_2A_HZD_Vertical_Position(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Hazards_2B Message Hazards_2B (0x48d)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Hazards_2B_HZD_Height
 * - \ref SIG_Hazards_2B_HZD_Width
 * - \ref SIG_Hazards_2B_HZD_Lateral_STD
 * - \ref SIG_Hazards_2B_HZD_Longitudinal_STD
 *
 * @{
 */

/**
 * Message Hazards_2B configuration tuple.
 */
#define MSG_Hazards_2B                              0x48d, 0, 5

/**
 * Message Hazards_2B id.
 */
#define ID_Hazards_2B                               0x48d

/**
 * Message Hazards_2B extended id bit.
 */
#define EXT_Hazards_2B                              0

/**
 * Message Hazards_2B Data Length Count.
 */
#define DLC_Hazards_2B                              5

/**
 * Message Hazards_2B cycle time.
 */
#define CYCLE_Hazards_2B                            0

/**
 * Message Hazards_2B fast cycle time.
 */
#define FAST_Hazards_2B                             0

/**
 * Initialise message Hazards_2B buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Hazards_2B(buf) { \
	INITSIG_Hazards_2B_HZD_Height(buf); \
	INITSIG_Hazards_2B_HZD_Width(buf); \
	INITSIG_Hazards_2B_HZD_Lateral_STD(buf); \
	INITSIG_Hazards_2B_HZD_Longitudinal_STD(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Hazards_3A Message Hazards_3A (0x48e)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Hazards_3A_HZD_ID
 * - \ref SIG_Hazards_3A_HZD_ExistenceProb
 * - \ref SIG_Hazards_3A_HZD_Lateral_Position
 * - \ref SIG_Hazards_3A_HZD_Longitudinal_Position
 * - \ref SIG_Hazards_3A_HZD_Vertical_Position
 *
 * @{
 */

/**
 * Message Hazards_3A configuration tuple.
 */
#define MSG_Hazards_3A                              0x48e, 0, 8

/**
 * Message Hazards_3A id.
 */
#define ID_Hazards_3A                               0x48e

/**
 * Message Hazards_3A extended id bit.
 */
#define EXT_Hazards_3A                              0

/**
 * Message Hazards_3A Data Length Count.
 */
#define DLC_Hazards_3A                              8

/**
 * Message Hazards_3A cycle time.
 */
#define CYCLE_Hazards_3A                            0

/**
 * Message Hazards_3A fast cycle time.
 */
#define FAST_Hazards_3A                             0

/**
 * Initialise message Hazards_3A buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Hazards_3A(buf) { \
	INITSIG_Hazards_3A_HZD_ID(buf); \
	INITSIG_Hazards_3A_HZD_ExistenceProb(buf); \
	INITSIG_Hazards_3A_HZD_Lateral_Position(buf); \
	INITSIG_Hazards_3A_HZD_Longitudinal_Position(buf); \
	INITSIG_Hazards_3A_HZD_Vertical_Position(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Hazards_3B Message Hazards_3B (0x48f)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Hazards_3B_HZD_Height
 * - \ref SIG_Hazards_3B_HZD_Width
 * - \ref SIG_Hazards_3B_HZD_Lateral_STD
 * - \ref SIG_Hazards_3B_HZD_Longitudinal_STD
 *
 * @{
 */

/**
 * Message Hazards_3B configuration tuple.
 */
#define MSG_Hazards_3B                              0x48f, 0, 5

/**
 * Message Hazards_3B id.
 */
#define ID_Hazards_3B                               0x48f

/**
 * Message Hazards_3B extended id bit.
 */
#define EXT_Hazards_3B                              0

/**
 * Message Hazards_3B Data Length Count.
 */
#define DLC_Hazards_3B                              5

/**
 * Message Hazards_3B cycle time.
 */
#define CYCLE_Hazards_3B                            0

/**
 * Message Hazards_3B fast cycle time.
 */
#define FAST_Hazards_3B                             0

/**
 * Initialise message Hazards_3B buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Hazards_3B(buf) { \
	INITSIG_Hazards_3B_HZD_Height(buf); \
	INITSIG_Hazards_3B_HZD_Width(buf); \
	INITSIG_Hazards_3B_HZD_Lateral_STD(buf); \
	INITSIG_Hazards_3B_HZD_Longitudinal_STD(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_Header_Protocol_Version Signal Protocol_Version of Message Hazards_Header (0x486)
 *
 * Denotes the protocol version
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_Header
 * @{
 */

/**
 * Signal Protocol_Version configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_Header_Protocol_Version and \ref GET_Hazards_Header_Protocol_Version instead.
 */
#define SIG_Hazards_Header_Protocol_Version         0, 0, 0, 8

/**
 * Signal Protocol_Version setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_Header_Protocol_Version or \ref INIT_Hazards_Header instead.
 */
#define SETUP_Hazards_Header_Protocol_Version       0, 0, 0, 8, 0

/**
 * Get signal Protocol_Version from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_Header_Protocol_Version(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Protocol_Version in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_Header_Protocol_Version(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Protocol_Version in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_Header_Protocol_Version(buf) \
	SET_Hazards_Header_Protocol_Version(buf, 0)

/**
 * Signal Protocol_Version value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_Header_Protocol_Version(x, fmt) \
	((x) * fmt)

/**
 * Signal Protocol_Version raw initial value.
 */
#define START_Hazards_Header_Protocol_Version       0

/**
 * Signal Protocol_Version raw minimum value.
 */
#define MIN_Hazards_Header_Protocol_Version         2

/**
 * Signal Protocol_Version raw maximum value.
 */
#define MAX_Hazards_Header_Protocol_Version         2

/**
 * Signal Protocol_Version raw offset value.
 */
#define OFF_Hazards_Header_Protocol_Version         0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_Header_imageTimestamp Signal imageTimestamp of Message Hazards_Header (0x486)
 *
 * The time in which the image was grabbed, in external clock time
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_Header
 * @{
 */

/**
 * Signal imageTimestamp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_Header_imageTimestamp and \ref GET_Hazards_Header_imageTimestamp instead.
 */
#define SIG_Hazards_Header_imageTimestamp           0, 0, 8, 32

/**
 * Signal imageTimestamp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_Header_imageTimestamp or \ref INIT_Hazards_Header instead.
 */
#define SETUP_Hazards_Header_imageTimestamp         0, 0, 8, 32, 0

/**
 * Get signal imageTimestamp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_Header_imageTimestamp(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint32_t)(+(uint32_t)((buf[3] >> 0) & 0xff) << 16) \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
)

/**
 * Set signal imageTimestamp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_Header_imageTimestamp(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
}

/**
 * Set signal imageTimestamp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_Header_imageTimestamp(buf) \
	SET_Hazards_Header_imageTimestamp(buf, 0)

/**
 * Signal imageTimestamp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_Header_imageTimestamp(x, fmt) \
	((x) * fmt)

/**
 * Signal imageTimestamp raw initial value.
 */
#define START_Hazards_Header_imageTimestamp         0

/**
 * Signal imageTimestamp raw minimum value.
 */
#define MIN_Hazards_Header_imageTimestamp           0

/**
 * Signal imageTimestamp raw maximum value.
 */
#define MAX_Hazards_Header_imageTimestamp           4294967295

/**
 * Signal imageTimestamp raw offset value.
 */
#define OFF_Hazards_Header_imageTimestamp           0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_Header_Num_Hazards_Objects Signal Num_Hazards_Objects of Message Hazards_Header (0x486)
 *
 * Number of hazards reported in hazards protocol
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_Header
 * @{
 */

/**
 * Signal Num_Hazards_Objects configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_Header_Num_Hazards_Objects and \ref GET_Hazards_Header_Num_Hazards_Objects instead.
 */
#define SIG_Hazards_Header_Num_Hazards_Objects        0, 0, 40, 7

/**
 * Signal Num_Hazards_Objects setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_Header_Num_Hazards_Objects or \ref INIT_Hazards_Header instead.
 */
#define SETUP_Hazards_Header_Num_Hazards_Objects      0, 0, 40, 7, 0

/**
 * Get signal Num_Hazards_Objects from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_Header_Num_Hazards_Objects(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal Num_Hazards_Objects in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_Header_Num_Hazards_Objects(buf, val) { \
	buf[5] &= ~(0x7f << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal Num_Hazards_Objects in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_Header_Num_Hazards_Objects(buf) \
	SET_Hazards_Header_Num_Hazards_Objects(buf, 0)

/**
 * Signal Num_Hazards_Objects value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_Header_Num_Hazards_Objects(x, fmt) \
	((x) * fmt)

/**
 * Signal Num_Hazards_Objects raw initial value.
 */
#define START_Hazards_Header_Num_Hazards_Objects      0

/**
 * Signal Num_Hazards_Objects raw minimum value.
 */
#define MIN_Hazards_Header_Num_Hazards_Objects        0

/**
 * Signal Num_Hazards_Objects raw maximum value.
 */
#define MAX_Hazards_Header_Num_Hazards_Objects        127

/**
 * Signal Num_Hazards_Objects raw offset value.
 */
#define OFF_Hazards_Header_Num_Hazards_Objects        0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_Header_Valid_Frame Signal Valid_Frame of Message Hazards_Header (0x486)
 *
 * If frame is not valid, data is not to be used
 *
 * Contains the value table \ref ENUM_Hazards_Header_Valid_Frame.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_Header
 * @{
 */

/**
 * Signal Valid_Frame configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_Header_Valid_Frame and \ref GET_Hazards_Header_Valid_Frame instead.
 */
#define SIG_Hazards_Header_Valid_Frame              0, 0, 47, 1

/**
 * Signal Valid_Frame setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_Header_Valid_Frame or \ref INIT_Hazards_Header instead.
 */
#define SETUP_Hazards_Header_Valid_Frame            0, 0, 47, 1, 0

/**
 * Get signal Valid_Frame from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_Header_Valid_Frame(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 7) & 0x01) << 0) \
)

/**
 * Set signal Valid_Frame in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_Header_Valid_Frame(buf, val) { \
	buf[5] &= ~(0x01 << 7); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal Valid_Frame in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_Header_Valid_Frame(buf) \
	SET_Hazards_Header_Valid_Frame(buf, 0)

/**
 * Signal Valid_Frame value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_Header_Valid_Frame(x, fmt) \
	((x) * fmt)

/**
 * Signal Valid_Frame raw initial value.
 */
#define START_Hazards_Header_Valid_Frame            0

/**
 * Signal Valid_Frame raw minimum value.
 */
#define MIN_Hazards_Header_Valid_Frame              0

/**
 * Signal Valid_Frame raw maximum value.
 */
#define MAX_Hazards_Header_Valid_Frame              1

/**
 * Signal Valid_Frame raw offset value.
 */
#define OFF_Hazards_Header_Valid_Frame              0

/**
 * @}
 */

/**
 * @defgroup ENUM_Hazards_Header_Valid_Frame Value Table for Signal Valid_Frame in Message Hazards_Header (0x486)
 *
 * Enum values defined for \ref SIG_Hazards_Header_Valid_Frame.
 *
 * @ingroup SIG_Hazards_Header_Valid_Frame
 */

/**
 * Value table Hazards_Header_Valid_Frame entry TRUE.
 *
 * @ingroup ENUM_Hazards_Header_Valid_Frame
 */
#define Hazards_Header_Valid_Frame_TRUE                1

/**
 * Value table Hazards_Header_Valid_Frame entry FALSE.
 *
 * @ingroup ENUM_Hazards_Header_Valid_Frame
 */
#define Hazards_Header_Valid_Frame_FALSE               0

/**
 * @defgroup SIG_Hazards_UTC_UTC_Timestamp Signal UTC_Timestamp of Message Hazards_UTC (0x487)
 *
 * UTC timestamp. If unavailble, an external clock time, which is used in meSyncProtocol3, will take affect. Otherwise an internal (ME) clock will be outputted.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_UTC
 * @{
 */

/**
 * Signal UTC_Timestamp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_UTC_UTC_Timestamp and \ref GET_Hazards_UTC_UTC_Timestamp instead.
 */
#define SIG_Hazards_UTC_UTC_Timestamp               0, 0, 0, 51

/**
 * Signal UTC_Timestamp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_UTC_UTC_Timestamp or \ref INIT_Hazards_UTC instead.
 */
#define SETUP_Hazards_UTC_UTC_Timestamp             0, 0, 0, 51, 0

/**
 * Get signal UTC_Timestamp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_UTC_UTC_Timestamp(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0xff) << 8) \
	| (uint32_t)(+(uint32_t)((buf[2] >> 0) & 0xff) << 16) \
	| (uint32_t)(+(uint32_t)((buf[3] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 32) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 40) \
	| (uint32_t)(+(uint32_t)((buf[6] >> 0) & 0x07) << 48) \
)

/**
 * Set signal UTC_Timestamp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_UTC_UTC_Timestamp(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 32) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 40) & 0xff) << 0; \
	buf[6] &= ~(0x07 << 0); \
	buf[6] |= ((uint8_t)((uint32_t)(val) >> 48) & 0x07) << 0; \
}

/**
 * Set signal UTC_Timestamp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_UTC_UTC_Timestamp(buf) \
	SET_Hazards_UTC_UTC_Timestamp(buf, 0)

/**
 * Signal UTC_Timestamp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_UTC_UTC_Timestamp(x, fmt) \
	((x) * fmt)

/**
 * Signal UTC_Timestamp raw initial value.
 */
#define START_Hazards_UTC_UTC_Timestamp             0

/**
 * Signal UTC_Timestamp raw minimum value.
 */
#define MIN_Hazards_UTC_UTC_Timestamp               0

/**
 * Signal UTC_Timestamp raw maximum value.
 */
#define MAX_Hazards_UTC_UTC_Timestamp               2251799813685240

/**
 * Signal UTC_Timestamp raw offset value.
 */
#define OFF_Hazards_UTC_UTC_Timestamp               0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_0A_HZD_ID Signal HZD_ID of Message Hazards_0A (0x488)
 *
 * The hazard element ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_0A
 * @{
 */

/**
 * Signal HZD_ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_0A_HZD_ID and \ref GET_Hazards_0A_HZD_ID instead.
 */
#define SIG_Hazards_0A_HZD_ID                       0, 0, 0, 8

/**
 * Signal HZD_ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_0A_HZD_ID or \ref INIT_Hazards_0A instead.
 */
#define SETUP_Hazards_0A_HZD_ID                     0, 0, 0, 8, 0

/**
 * Get signal HZD_ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_0A_HZD_ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal HZD_ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_0A_HZD_ID(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal HZD_ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_0A_HZD_ID(buf) \
	SET_Hazards_0A_HZD_ID(buf, 0)

/**
 * Signal HZD_ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_0A_HZD_ID(x, fmt) \
	((x) * fmt)

/**
 * Signal HZD_ID raw initial value.
 */
#define START_Hazards_0A_HZD_ID                     0

/**
 * Signal HZD_ID raw minimum value.
 */
#define MIN_Hazards_0A_HZD_ID                       0

/**
 * Signal HZD_ID raw maximum value.
 */
#define MAX_Hazards_0A_HZD_ID                       255

/**
 * Signal HZD_ID raw offset value.
 */
#define OFF_Hazards_0A_HZD_ID                       0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_0A_HZD_ExistenceProb Signal HZD_ExistenceProb of Message Hazards_0A (0x488)
 *
 * Probability of presence of hazard
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_0A
 * @{
 */

/**
 * Signal HZD_ExistenceProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_0A_HZD_ExistenceProb and \ref GET_Hazards_0A_HZD_ExistenceProb instead.
 */
#define SIG_Hazards_0A_HZD_ExistenceProb            0, 0, 8, 10

/**
 * Signal HZD_ExistenceProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_0A_HZD_ExistenceProb or \ref INIT_Hazards_0A instead.
 */
#define SETUP_Hazards_0A_HZD_ExistenceProb          0, 0, 8, 10, 0

/**
 * Get signal HZD_ExistenceProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_0A_HZD_ExistenceProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x03) << 8) \
)

/**
 * Set signal HZD_ExistenceProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_0A_HZD_ExistenceProb(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[2] &= ~(0x03 << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
}

/**
 * Set signal HZD_ExistenceProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_0A_HZD_ExistenceProb(buf) \
	SET_Hazards_0A_HZD_ExistenceProb(buf, 0)

/**
 * Signal HZD_ExistenceProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_0A_HZD_ExistenceProb(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal HZD_ExistenceProb raw initial value.
 */
#define START_Hazards_0A_HZD_ExistenceProb          0

/**
 * Signal HZD_ExistenceProb raw minimum value.
 */
#define MIN_Hazards_0A_HZD_ExistenceProb            0

/**
 * Signal HZD_ExistenceProb raw maximum value.
 */
#define MAX_Hazards_0A_HZD_ExistenceProb            1000

/**
 * Signal HZD_ExistenceProb raw offset value.
 */
#define OFF_Hazards_0A_HZD_ExistenceProb            0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_0A_HZD_Lateral_Position Signal HZD_Lateral_Position of Message Hazards_0A (0x488)
 *
 * Lateral position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_0A
 * @{
 */

/**
 * Signal HZD_Lateral_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_0A_HZD_Lateral_Position and \ref GET_Hazards_0A_HZD_Lateral_Position instead.
 */
#define SIG_Hazards_0A_HZD_Lateral_Position         0, 0, 18, 15

/**
 * Signal HZD_Lateral_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_0A_HZD_Lateral_Position or \ref INIT_Hazards_0A instead.
 */
#define SETUP_Hazards_0A_HZD_Lateral_Position       0, 0, 18, 15, 0

/**
 * Get signal HZD_Lateral_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_0A_HZD_Lateral_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 6) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x01) << 14) \
)

/**
 * Set signal HZD_Lateral_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_0A_HZD_Lateral_Position(buf, val) { \
	buf[2] &= ~(0x3f << 2); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 6) & 0xff) << 0; \
	buf[4] &= ~(0x01 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 14) & 0x01) << 0; \
}

/**
 * Set signal HZD_Lateral_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_0A_HZD_Lateral_Position(buf) \
	SET_Hazards_0A_HZD_Lateral_Position(buf, 0)

/**
 * Signal HZD_Lateral_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_0A_HZD_Lateral_Position(x, fmt) \
	((x) * fmt / 100 + fmt * (-100))

/**
 * Signal HZD_Lateral_Position raw initial value.
 */
#define START_Hazards_0A_HZD_Lateral_Position       0

/**
 * Signal HZD_Lateral_Position raw minimum value.
 */
#define MIN_Hazards_0A_HZD_Lateral_Position         0

/**
 * Signal HZD_Lateral_Position raw maximum value.
 */
#define MAX_Hazards_0A_HZD_Lateral_Position         20000

/**
 * Signal HZD_Lateral_Position raw offset value.
 */
#define OFF_Hazards_0A_HZD_Lateral_Position         -10000

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_0A_HZD_Longitudinal_Position Signal HZD_Longitudinal_Position of Message Hazards_0A (0x488)
 *
 * Longitudinal position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_0A
 * @{
 */

/**
 * Signal HZD_Longitudinal_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_0A_HZD_Longitudinal_Position and \ref GET_Hazards_0A_HZD_Longitudinal_Position instead.
 */
#define SIG_Hazards_0A_HZD_Longitudinal_Position        0, 0, 33, 15

/**
 * Signal HZD_Longitudinal_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_0A_HZD_Longitudinal_Position or \ref INIT_Hazards_0A instead.
 */
#define SETUP_Hazards_0A_HZD_Longitudinal_Position      0, 0, 33, 15, 0

/**
 * Get signal HZD_Longitudinal_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_0A_HZD_Longitudinal_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 7) \
)

/**
 * Set signal HZD_Longitudinal_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_0A_HZD_Longitudinal_Position(buf, val) { \
	buf[4] &= ~(0x7f << 1); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 7) & 0xff) << 0; \
}

/**
 * Set signal HZD_Longitudinal_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_0A_HZD_Longitudinal_Position(buf) \
	SET_Hazards_0A_HZD_Longitudinal_Position(buf, 0)

/**
 * Signal HZD_Longitudinal_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_0A_HZD_Longitudinal_Position(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Longitudinal_Position raw initial value.
 */
#define START_Hazards_0A_HZD_Longitudinal_Position      0

/**
 * Signal HZD_Longitudinal_Position raw minimum value.
 */
#define MIN_Hazards_0A_HZD_Longitudinal_Position        0

/**
 * Signal HZD_Longitudinal_Position raw maximum value.
 */
#define MAX_Hazards_0A_HZD_Longitudinal_Position        20000

/**
 * Signal HZD_Longitudinal_Position raw offset value.
 */
#define OFF_Hazards_0A_HZD_Longitudinal_Position        0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_0A_HZD_Vertical_Position Signal HZD_Vertical_Position of Message Hazards_0A (0x488)
 *
 * Vertical position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_0A
 * @{
 */

/**
 * Signal HZD_Vertical_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_0A_HZD_Vertical_Position and \ref GET_Hazards_0A_HZD_Vertical_Position instead.
 */
#define SIG_Hazards_0A_HZD_Vertical_Position        0, 0, 48, 12

/**
 * Signal HZD_Vertical_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_0A_HZD_Vertical_Position or \ref INIT_Hazards_0A instead.
 */
#define SETUP_Hazards_0A_HZD_Vertical_Position      0, 0, 48, 12, 0

/**
 * Get signal HZD_Vertical_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_0A_HZD_Vertical_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal HZD_Vertical_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_0A_HZD_Vertical_Position(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[7] &= ~(0x0f << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal HZD_Vertical_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_0A_HZD_Vertical_Position(buf) \
	SET_Hazards_0A_HZD_Vertical_Position(buf, 0)

/**
 * Signal HZD_Vertical_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_0A_HZD_Vertical_Position(x, fmt) \
	((x) * fmt / 100 + fmt * (-20))

/**
 * Signal HZD_Vertical_Position raw initial value.
 */
#define START_Hazards_0A_HZD_Vertical_Position      0

/**
 * Signal HZD_Vertical_Position raw minimum value.
 */
#define MIN_Hazards_0A_HZD_Vertical_Position        0

/**
 * Signal HZD_Vertical_Position raw maximum value.
 */
#define MAX_Hazards_0A_HZD_Vertical_Position        4000

/**
 * Signal HZD_Vertical_Position raw offset value.
 */
#define OFF_Hazards_0A_HZD_Vertical_Position        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_0B_HZD_Height Signal HZD_Height of Message Hazards_0B (0x489)
 *
 * Height of hazard object
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_0B
 * @{
 */

/**
 * Signal HZD_Height configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_0B_HZD_Height and \ref GET_Hazards_0B_HZD_Height instead.
 */
#define SIG_Hazards_0B_HZD_Height                   0, 0, 0, 9

/**
 * Signal HZD_Height setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_0B_HZD_Height or \ref INIT_Hazards_0B instead.
 */
#define SETUP_Hazards_0B_HZD_Height                 0, 0, 0, 9, 0

/**
 * Get signal HZD_Height from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_0B_HZD_Height(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal HZD_Height in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_0B_HZD_Height(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal HZD_Height in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_0B_HZD_Height(buf) \
	SET_Hazards_0B_HZD_Height(buf, 0)

/**
 * Signal HZD_Height value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_0B_HZD_Height(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Height raw initial value.
 */
#define START_Hazards_0B_HZD_Height                 0

/**
 * Signal HZD_Height raw minimum value.
 */
#define MIN_Hazards_0B_HZD_Height                   0

/**
 * Signal HZD_Height raw maximum value.
 */
#define MAX_Hazards_0B_HZD_Height                   500

/**
 * Signal HZD_Height raw offset value.
 */
#define OFF_Hazards_0B_HZD_Height                   0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_0B_HZD_Width Signal HZD_Width of Message Hazards_0B (0x489)
 *
 * Width of hazard object
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_0B
 * @{
 */

/**
 * Signal HZD_Width configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_0B_HZD_Width and \ref GET_Hazards_0B_HZD_Width instead.
 */
#define SIG_Hazards_0B_HZD_Width                    0, 0, 9, 13

/**
 * Signal HZD_Width setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_0B_HZD_Width or \ref INIT_Hazards_0B instead.
 */
#define SETUP_Hazards_0B_HZD_Width                  0, 0, 9, 13, 0

/**
 * Get signal HZD_Width from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_0B_HZD_Width(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal HZD_Width in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_0B_HZD_Width(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal HZD_Width in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_0B_HZD_Width(buf) \
	SET_Hazards_0B_HZD_Width(buf, 0)

/**
 * Signal HZD_Width value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_0B_HZD_Width(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Width raw initial value.
 */
#define START_Hazards_0B_HZD_Width                  0

/**
 * Signal HZD_Width raw minimum value.
 */
#define MIN_Hazards_0B_HZD_Width                    0

/**
 * Signal HZD_Width raw maximum value.
 */
#define MAX_Hazards_0B_HZD_Width                    5000

/**
 * Signal HZD_Width raw offset value.
 */
#define OFF_Hazards_0B_HZD_Width                    0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_0B_HZD_Lateral_STD Signal HZD_Lateral_STD of Message Hazards_0B (0x489)
 *
 * Standard deviation of lateral position
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_0B
 * @{
 */

/**
 * Signal HZD_Lateral_STD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_0B_HZD_Lateral_STD and \ref GET_Hazards_0B_HZD_Lateral_STD instead.
 */
#define SIG_Hazards_0B_HZD_Lateral_STD              0, 0, 22, 8

/**
 * Signal HZD_Lateral_STD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_0B_HZD_Lateral_STD or \ref INIT_Hazards_0B instead.
 */
#define SETUP_Hazards_0B_HZD_Lateral_STD            0, 0, 22, 8, 0

/**
 * Get signal HZD_Lateral_STD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_0B_HZD_Lateral_STD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x3f) << 2) \
)

/**
 * Set signal HZD_Lateral_STD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_0B_HZD_Lateral_STD(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= (((uint8_t)(val) >> 2) & 0x3f) << 0; \
}

/**
 * Set signal HZD_Lateral_STD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_0B_HZD_Lateral_STD(buf) \
	SET_Hazards_0B_HZD_Lateral_STD(buf, 0)

/**
 * Signal HZD_Lateral_STD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_0B_HZD_Lateral_STD(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal HZD_Lateral_STD raw initial value.
 */
#define START_Hazards_0B_HZD_Lateral_STD            0

/**
 * Signal HZD_Lateral_STD raw minimum value.
 */
#define MIN_Hazards_0B_HZD_Lateral_STD              0

/**
 * Signal HZD_Lateral_STD raw maximum value.
 */
#define MAX_Hazards_0B_HZD_Lateral_STD              200

/**
 * Signal HZD_Lateral_STD raw offset value.
 */
#define OFF_Hazards_0B_HZD_Lateral_STD              0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_0B_HZD_Longitudinal_STD Signal HZD_Longitudinal_STD of Message Hazards_0B (0x489)
 *
 * Standard deviation of longitudinal position
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_0B
 * @{
 */

/**
 * Signal HZD_Longitudinal_STD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_0B_HZD_Longitudinal_STD and \ref GET_Hazards_0B_HZD_Longitudinal_STD instead.
 */
#define SIG_Hazards_0B_HZD_Longitudinal_STD         0, 0, 30, 9

/**
 * Signal HZD_Longitudinal_STD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_0B_HZD_Longitudinal_STD or \ref INIT_Hazards_0B instead.
 */
#define SETUP_Hazards_0B_HZD_Longitudinal_STD       0, 0, 30, 9, 0

/**
 * Get signal HZD_Longitudinal_STD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_0B_HZD_Longitudinal_STD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 2) \
)

/**
 * Set signal HZD_Longitudinal_STD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_0B_HZD_Longitudinal_STD(buf, val) { \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 2) & 0x7f) << 0; \
}

/**
 * Set signal HZD_Longitudinal_STD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_0B_HZD_Longitudinal_STD(buf) \
	SET_Hazards_0B_HZD_Longitudinal_STD(buf, 0)

/**
 * Signal HZD_Longitudinal_STD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_0B_HZD_Longitudinal_STD(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal HZD_Longitudinal_STD raw initial value.
 */
#define START_Hazards_0B_HZD_Longitudinal_STD       0

/**
 * Signal HZD_Longitudinal_STD raw minimum value.
 */
#define MIN_Hazards_0B_HZD_Longitudinal_STD         0

/**
 * Signal HZD_Longitudinal_STD raw maximum value.
 */
#define MAX_Hazards_0B_HZD_Longitudinal_STD         400

/**
 * Signal HZD_Longitudinal_STD raw offset value.
 */
#define OFF_Hazards_0B_HZD_Longitudinal_STD         0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_1A_HZD_ID Signal HZD_ID of Message Hazards_1A (0x48a)
 *
 * The hazard element ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_1A
 * @{
 */

/**
 * Signal HZD_ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_1A_HZD_ID and \ref GET_Hazards_1A_HZD_ID instead.
 */
#define SIG_Hazards_1A_HZD_ID                       0, 0, 0, 8

/**
 * Signal HZD_ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_1A_HZD_ID or \ref INIT_Hazards_1A instead.
 */
#define SETUP_Hazards_1A_HZD_ID                     0, 0, 0, 8, 0

/**
 * Get signal HZD_ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_1A_HZD_ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal HZD_ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_1A_HZD_ID(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal HZD_ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_1A_HZD_ID(buf) \
	SET_Hazards_1A_HZD_ID(buf, 0)

/**
 * Signal HZD_ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_1A_HZD_ID(x, fmt) \
	((x) * fmt)

/**
 * Signal HZD_ID raw initial value.
 */
#define START_Hazards_1A_HZD_ID                     0

/**
 * Signal HZD_ID raw minimum value.
 */
#define MIN_Hazards_1A_HZD_ID                       0

/**
 * Signal HZD_ID raw maximum value.
 */
#define MAX_Hazards_1A_HZD_ID                       255

/**
 * Signal HZD_ID raw offset value.
 */
#define OFF_Hazards_1A_HZD_ID                       0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_1A_HZD_ExistenceProb Signal HZD_ExistenceProb of Message Hazards_1A (0x48a)
 *
 * Probability of presence of hazard
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_1A
 * @{
 */

/**
 * Signal HZD_ExistenceProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_1A_HZD_ExistenceProb and \ref GET_Hazards_1A_HZD_ExistenceProb instead.
 */
#define SIG_Hazards_1A_HZD_ExistenceProb            0, 0, 8, 10

/**
 * Signal HZD_ExistenceProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_1A_HZD_ExistenceProb or \ref INIT_Hazards_1A instead.
 */
#define SETUP_Hazards_1A_HZD_ExistenceProb          0, 0, 8, 10, 0

/**
 * Get signal HZD_ExistenceProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_1A_HZD_ExistenceProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x03) << 8) \
)

/**
 * Set signal HZD_ExistenceProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_1A_HZD_ExistenceProb(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[2] &= ~(0x03 << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
}

/**
 * Set signal HZD_ExistenceProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_1A_HZD_ExistenceProb(buf) \
	SET_Hazards_1A_HZD_ExistenceProb(buf, 0)

/**
 * Signal HZD_ExistenceProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_1A_HZD_ExistenceProb(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal HZD_ExistenceProb raw initial value.
 */
#define START_Hazards_1A_HZD_ExistenceProb          0

/**
 * Signal HZD_ExistenceProb raw minimum value.
 */
#define MIN_Hazards_1A_HZD_ExistenceProb            0

/**
 * Signal HZD_ExistenceProb raw maximum value.
 */
#define MAX_Hazards_1A_HZD_ExistenceProb            1000

/**
 * Signal HZD_ExistenceProb raw offset value.
 */
#define OFF_Hazards_1A_HZD_ExistenceProb            0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_1A_HZD_Lateral_Position Signal HZD_Lateral_Position of Message Hazards_1A (0x48a)
 *
 * Lateral position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_1A
 * @{
 */

/**
 * Signal HZD_Lateral_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_1A_HZD_Lateral_Position and \ref GET_Hazards_1A_HZD_Lateral_Position instead.
 */
#define SIG_Hazards_1A_HZD_Lateral_Position         0, 0, 18, 15

/**
 * Signal HZD_Lateral_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_1A_HZD_Lateral_Position or \ref INIT_Hazards_1A instead.
 */
#define SETUP_Hazards_1A_HZD_Lateral_Position       0, 0, 18, 15, 0

/**
 * Get signal HZD_Lateral_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_1A_HZD_Lateral_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 6) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x01) << 14) \
)

/**
 * Set signal HZD_Lateral_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_1A_HZD_Lateral_Position(buf, val) { \
	buf[2] &= ~(0x3f << 2); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 6) & 0xff) << 0; \
	buf[4] &= ~(0x01 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 14) & 0x01) << 0; \
}

/**
 * Set signal HZD_Lateral_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_1A_HZD_Lateral_Position(buf) \
	SET_Hazards_1A_HZD_Lateral_Position(buf, 0)

/**
 * Signal HZD_Lateral_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_1A_HZD_Lateral_Position(x, fmt) \
	((x) * fmt / 100 + fmt * (-100))

/**
 * Signal HZD_Lateral_Position raw initial value.
 */
#define START_Hazards_1A_HZD_Lateral_Position       0

/**
 * Signal HZD_Lateral_Position raw minimum value.
 */
#define MIN_Hazards_1A_HZD_Lateral_Position         0

/**
 * Signal HZD_Lateral_Position raw maximum value.
 */
#define MAX_Hazards_1A_HZD_Lateral_Position         20000

/**
 * Signal HZD_Lateral_Position raw offset value.
 */
#define OFF_Hazards_1A_HZD_Lateral_Position         -10000

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_1A_HZD_Longitudinal_Position Signal HZD_Longitudinal_Position of Message Hazards_1A (0x48a)
 *
 * Longitudinal position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_1A
 * @{
 */

/**
 * Signal HZD_Longitudinal_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_1A_HZD_Longitudinal_Position and \ref GET_Hazards_1A_HZD_Longitudinal_Position instead.
 */
#define SIG_Hazards_1A_HZD_Longitudinal_Position        0, 0, 33, 15

/**
 * Signal HZD_Longitudinal_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_1A_HZD_Longitudinal_Position or \ref INIT_Hazards_1A instead.
 */
#define SETUP_Hazards_1A_HZD_Longitudinal_Position      0, 0, 33, 15, 0

/**
 * Get signal HZD_Longitudinal_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_1A_HZD_Longitudinal_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 7) \
)

/**
 * Set signal HZD_Longitudinal_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_1A_HZD_Longitudinal_Position(buf, val) { \
	buf[4] &= ~(0x7f << 1); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 7) & 0xff) << 0; \
}

/**
 * Set signal HZD_Longitudinal_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_1A_HZD_Longitudinal_Position(buf) \
	SET_Hazards_1A_HZD_Longitudinal_Position(buf, 0)

/**
 * Signal HZD_Longitudinal_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_1A_HZD_Longitudinal_Position(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Longitudinal_Position raw initial value.
 */
#define START_Hazards_1A_HZD_Longitudinal_Position      0

/**
 * Signal HZD_Longitudinal_Position raw minimum value.
 */
#define MIN_Hazards_1A_HZD_Longitudinal_Position        0

/**
 * Signal HZD_Longitudinal_Position raw maximum value.
 */
#define MAX_Hazards_1A_HZD_Longitudinal_Position        20000

/**
 * Signal HZD_Longitudinal_Position raw offset value.
 */
#define OFF_Hazards_1A_HZD_Longitudinal_Position        0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_1A_HZD_Vertical_Position Signal HZD_Vertical_Position of Message Hazards_1A (0x48a)
 *
 * Vertical position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_1A
 * @{
 */

/**
 * Signal HZD_Vertical_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_1A_HZD_Vertical_Position and \ref GET_Hazards_1A_HZD_Vertical_Position instead.
 */
#define SIG_Hazards_1A_HZD_Vertical_Position        0, 0, 48, 12

/**
 * Signal HZD_Vertical_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_1A_HZD_Vertical_Position or \ref INIT_Hazards_1A instead.
 */
#define SETUP_Hazards_1A_HZD_Vertical_Position      0, 0, 48, 12, 0

/**
 * Get signal HZD_Vertical_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_1A_HZD_Vertical_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal HZD_Vertical_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_1A_HZD_Vertical_Position(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[7] &= ~(0x0f << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal HZD_Vertical_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_1A_HZD_Vertical_Position(buf) \
	SET_Hazards_1A_HZD_Vertical_Position(buf, 0)

/**
 * Signal HZD_Vertical_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_1A_HZD_Vertical_Position(x, fmt) \
	((x) * fmt / 100 + fmt * (-20))

/**
 * Signal HZD_Vertical_Position raw initial value.
 */
#define START_Hazards_1A_HZD_Vertical_Position      0

/**
 * Signal HZD_Vertical_Position raw minimum value.
 */
#define MIN_Hazards_1A_HZD_Vertical_Position        0

/**
 * Signal HZD_Vertical_Position raw maximum value.
 */
#define MAX_Hazards_1A_HZD_Vertical_Position        4000

/**
 * Signal HZD_Vertical_Position raw offset value.
 */
#define OFF_Hazards_1A_HZD_Vertical_Position        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_1B_HZD_Height Signal HZD_Height of Message Hazards_1B (0x48b)
 *
 * Height of hazard object
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_1B
 * @{
 */

/**
 * Signal HZD_Height configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_1B_HZD_Height and \ref GET_Hazards_1B_HZD_Height instead.
 */
#define SIG_Hazards_1B_HZD_Height                   0, 0, 0, 9

/**
 * Signal HZD_Height setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_1B_HZD_Height or \ref INIT_Hazards_1B instead.
 */
#define SETUP_Hazards_1B_HZD_Height                 0, 0, 0, 9, 0

/**
 * Get signal HZD_Height from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_1B_HZD_Height(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal HZD_Height in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_1B_HZD_Height(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal HZD_Height in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_1B_HZD_Height(buf) \
	SET_Hazards_1B_HZD_Height(buf, 0)

/**
 * Signal HZD_Height value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_1B_HZD_Height(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Height raw initial value.
 */
#define START_Hazards_1B_HZD_Height                 0

/**
 * Signal HZD_Height raw minimum value.
 */
#define MIN_Hazards_1B_HZD_Height                   0

/**
 * Signal HZD_Height raw maximum value.
 */
#define MAX_Hazards_1B_HZD_Height                   500

/**
 * Signal HZD_Height raw offset value.
 */
#define OFF_Hazards_1B_HZD_Height                   0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_1B_HZD_Width Signal HZD_Width of Message Hazards_1B (0x48b)
 *
 * Width of hazard object
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_1B
 * @{
 */

/**
 * Signal HZD_Width configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_1B_HZD_Width and \ref GET_Hazards_1B_HZD_Width instead.
 */
#define SIG_Hazards_1B_HZD_Width                    0, 0, 9, 13

/**
 * Signal HZD_Width setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_1B_HZD_Width or \ref INIT_Hazards_1B instead.
 */
#define SETUP_Hazards_1B_HZD_Width                  0, 0, 9, 13, 0

/**
 * Get signal HZD_Width from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_1B_HZD_Width(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal HZD_Width in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_1B_HZD_Width(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal HZD_Width in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_1B_HZD_Width(buf) \
	SET_Hazards_1B_HZD_Width(buf, 0)

/**
 * Signal HZD_Width value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_1B_HZD_Width(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Width raw initial value.
 */
#define START_Hazards_1B_HZD_Width                  0

/**
 * Signal HZD_Width raw minimum value.
 */
#define MIN_Hazards_1B_HZD_Width                    0

/**
 * Signal HZD_Width raw maximum value.
 */
#define MAX_Hazards_1B_HZD_Width                    5000

/**
 * Signal HZD_Width raw offset value.
 */
#define OFF_Hazards_1B_HZD_Width                    0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_1B_HZD_Lateral_STD Signal HZD_Lateral_STD of Message Hazards_1B (0x48b)
 *
 * Standard deviation of lateral position
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_1B
 * @{
 */

/**
 * Signal HZD_Lateral_STD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_1B_HZD_Lateral_STD and \ref GET_Hazards_1B_HZD_Lateral_STD instead.
 */
#define SIG_Hazards_1B_HZD_Lateral_STD              0, 0, 22, 8

/**
 * Signal HZD_Lateral_STD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_1B_HZD_Lateral_STD or \ref INIT_Hazards_1B instead.
 */
#define SETUP_Hazards_1B_HZD_Lateral_STD            0, 0, 22, 8, 0

/**
 * Get signal HZD_Lateral_STD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_1B_HZD_Lateral_STD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x3f) << 2) \
)

/**
 * Set signal HZD_Lateral_STD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_1B_HZD_Lateral_STD(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= (((uint8_t)(val) >> 2) & 0x3f) << 0; \
}

/**
 * Set signal HZD_Lateral_STD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_1B_HZD_Lateral_STD(buf) \
	SET_Hazards_1B_HZD_Lateral_STD(buf, 0)

/**
 * Signal HZD_Lateral_STD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_1B_HZD_Lateral_STD(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal HZD_Lateral_STD raw initial value.
 */
#define START_Hazards_1B_HZD_Lateral_STD            0

/**
 * Signal HZD_Lateral_STD raw minimum value.
 */
#define MIN_Hazards_1B_HZD_Lateral_STD              0

/**
 * Signal HZD_Lateral_STD raw maximum value.
 */
#define MAX_Hazards_1B_HZD_Lateral_STD              200

/**
 * Signal HZD_Lateral_STD raw offset value.
 */
#define OFF_Hazards_1B_HZD_Lateral_STD              0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_1B_HZD_Longitudinal_STD Signal HZD_Longitudinal_STD of Message Hazards_1B (0x48b)
 *
 * Standard deviation of longitudinal position
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_1B
 * @{
 */

/**
 * Signal HZD_Longitudinal_STD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_1B_HZD_Longitudinal_STD and \ref GET_Hazards_1B_HZD_Longitudinal_STD instead.
 */
#define SIG_Hazards_1B_HZD_Longitudinal_STD         0, 0, 30, 9

/**
 * Signal HZD_Longitudinal_STD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_1B_HZD_Longitudinal_STD or \ref INIT_Hazards_1B instead.
 */
#define SETUP_Hazards_1B_HZD_Longitudinal_STD       0, 0, 30, 9, 0

/**
 * Get signal HZD_Longitudinal_STD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_1B_HZD_Longitudinal_STD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 2) \
)

/**
 * Set signal HZD_Longitudinal_STD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_1B_HZD_Longitudinal_STD(buf, val) { \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 2) & 0x7f) << 0; \
}

/**
 * Set signal HZD_Longitudinal_STD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_1B_HZD_Longitudinal_STD(buf) \
	SET_Hazards_1B_HZD_Longitudinal_STD(buf, 0)

/**
 * Signal HZD_Longitudinal_STD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_1B_HZD_Longitudinal_STD(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal HZD_Longitudinal_STD raw initial value.
 */
#define START_Hazards_1B_HZD_Longitudinal_STD       0

/**
 * Signal HZD_Longitudinal_STD raw minimum value.
 */
#define MIN_Hazards_1B_HZD_Longitudinal_STD         0

/**
 * Signal HZD_Longitudinal_STD raw maximum value.
 */
#define MAX_Hazards_1B_HZD_Longitudinal_STD         400

/**
 * Signal HZD_Longitudinal_STD raw offset value.
 */
#define OFF_Hazards_1B_HZD_Longitudinal_STD         0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_2A_HZD_ID Signal HZD_ID of Message Hazards_2A (0x48c)
 *
 * The hazard element ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_2A
 * @{
 */

/**
 * Signal HZD_ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_2A_HZD_ID and \ref GET_Hazards_2A_HZD_ID instead.
 */
#define SIG_Hazards_2A_HZD_ID                       0, 0, 0, 8

/**
 * Signal HZD_ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_2A_HZD_ID or \ref INIT_Hazards_2A instead.
 */
#define SETUP_Hazards_2A_HZD_ID                     0, 0, 0, 8, 0

/**
 * Get signal HZD_ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_2A_HZD_ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal HZD_ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_2A_HZD_ID(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal HZD_ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_2A_HZD_ID(buf) \
	SET_Hazards_2A_HZD_ID(buf, 0)

/**
 * Signal HZD_ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_2A_HZD_ID(x, fmt) \
	((x) * fmt)

/**
 * Signal HZD_ID raw initial value.
 */
#define START_Hazards_2A_HZD_ID                     0

/**
 * Signal HZD_ID raw minimum value.
 */
#define MIN_Hazards_2A_HZD_ID                       0

/**
 * Signal HZD_ID raw maximum value.
 */
#define MAX_Hazards_2A_HZD_ID                       255

/**
 * Signal HZD_ID raw offset value.
 */
#define OFF_Hazards_2A_HZD_ID                       0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_2A_HZD_ExistenceProb Signal HZD_ExistenceProb of Message Hazards_2A (0x48c)
 *
 * Probability of presence of hazard
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_2A
 * @{
 */

/**
 * Signal HZD_ExistenceProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_2A_HZD_ExistenceProb and \ref GET_Hazards_2A_HZD_ExistenceProb instead.
 */
#define SIG_Hazards_2A_HZD_ExistenceProb            0, 0, 8, 10

/**
 * Signal HZD_ExistenceProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_2A_HZD_ExistenceProb or \ref INIT_Hazards_2A instead.
 */
#define SETUP_Hazards_2A_HZD_ExistenceProb          0, 0, 8, 10, 0

/**
 * Get signal HZD_ExistenceProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_2A_HZD_ExistenceProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x03) << 8) \
)

/**
 * Set signal HZD_ExistenceProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_2A_HZD_ExistenceProb(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[2] &= ~(0x03 << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
}

/**
 * Set signal HZD_ExistenceProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_2A_HZD_ExistenceProb(buf) \
	SET_Hazards_2A_HZD_ExistenceProb(buf, 0)

/**
 * Signal HZD_ExistenceProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_2A_HZD_ExistenceProb(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal HZD_ExistenceProb raw initial value.
 */
#define START_Hazards_2A_HZD_ExistenceProb          0

/**
 * Signal HZD_ExistenceProb raw minimum value.
 */
#define MIN_Hazards_2A_HZD_ExistenceProb            0

/**
 * Signal HZD_ExistenceProb raw maximum value.
 */
#define MAX_Hazards_2A_HZD_ExistenceProb            1000

/**
 * Signal HZD_ExistenceProb raw offset value.
 */
#define OFF_Hazards_2A_HZD_ExistenceProb            0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_2A_HZD_Lateral_Position Signal HZD_Lateral_Position of Message Hazards_2A (0x48c)
 *
 * Lateral position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_2A
 * @{
 */

/**
 * Signal HZD_Lateral_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_2A_HZD_Lateral_Position and \ref GET_Hazards_2A_HZD_Lateral_Position instead.
 */
#define SIG_Hazards_2A_HZD_Lateral_Position         0, 0, 18, 15

/**
 * Signal HZD_Lateral_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_2A_HZD_Lateral_Position or \ref INIT_Hazards_2A instead.
 */
#define SETUP_Hazards_2A_HZD_Lateral_Position       0, 0, 18, 15, 0

/**
 * Get signal HZD_Lateral_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_2A_HZD_Lateral_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 6) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x01) << 14) \
)

/**
 * Set signal HZD_Lateral_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_2A_HZD_Lateral_Position(buf, val) { \
	buf[2] &= ~(0x3f << 2); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 6) & 0xff) << 0; \
	buf[4] &= ~(0x01 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 14) & 0x01) << 0; \
}

/**
 * Set signal HZD_Lateral_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_2A_HZD_Lateral_Position(buf) \
	SET_Hazards_2A_HZD_Lateral_Position(buf, 0)

/**
 * Signal HZD_Lateral_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_2A_HZD_Lateral_Position(x, fmt) \
	((x) * fmt / 100 + fmt * (-100))

/**
 * Signal HZD_Lateral_Position raw initial value.
 */
#define START_Hazards_2A_HZD_Lateral_Position       0

/**
 * Signal HZD_Lateral_Position raw minimum value.
 */
#define MIN_Hazards_2A_HZD_Lateral_Position         0

/**
 * Signal HZD_Lateral_Position raw maximum value.
 */
#define MAX_Hazards_2A_HZD_Lateral_Position         20000

/**
 * Signal HZD_Lateral_Position raw offset value.
 */
#define OFF_Hazards_2A_HZD_Lateral_Position         -10000

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_2A_HZD_Longitudinal_Position Signal HZD_Longitudinal_Position of Message Hazards_2A (0x48c)
 *
 * Longitudinal position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_2A
 * @{
 */

/**
 * Signal HZD_Longitudinal_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_2A_HZD_Longitudinal_Position and \ref GET_Hazards_2A_HZD_Longitudinal_Position instead.
 */
#define SIG_Hazards_2A_HZD_Longitudinal_Position        0, 0, 33, 15

/**
 * Signal HZD_Longitudinal_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_2A_HZD_Longitudinal_Position or \ref INIT_Hazards_2A instead.
 */
#define SETUP_Hazards_2A_HZD_Longitudinal_Position      0, 0, 33, 15, 0

/**
 * Get signal HZD_Longitudinal_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_2A_HZD_Longitudinal_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 7) \
)

/**
 * Set signal HZD_Longitudinal_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_2A_HZD_Longitudinal_Position(buf, val) { \
	buf[4] &= ~(0x7f << 1); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 7) & 0xff) << 0; \
}

/**
 * Set signal HZD_Longitudinal_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_2A_HZD_Longitudinal_Position(buf) \
	SET_Hazards_2A_HZD_Longitudinal_Position(buf, 0)

/**
 * Signal HZD_Longitudinal_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_2A_HZD_Longitudinal_Position(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Longitudinal_Position raw initial value.
 */
#define START_Hazards_2A_HZD_Longitudinal_Position      0

/**
 * Signal HZD_Longitudinal_Position raw minimum value.
 */
#define MIN_Hazards_2A_HZD_Longitudinal_Position        0

/**
 * Signal HZD_Longitudinal_Position raw maximum value.
 */
#define MAX_Hazards_2A_HZD_Longitudinal_Position        20000

/**
 * Signal HZD_Longitudinal_Position raw offset value.
 */
#define OFF_Hazards_2A_HZD_Longitudinal_Position        0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_2A_HZD_Vertical_Position Signal HZD_Vertical_Position of Message Hazards_2A (0x48c)
 *
 * Vertical position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_2A
 * @{
 */

/**
 * Signal HZD_Vertical_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_2A_HZD_Vertical_Position and \ref GET_Hazards_2A_HZD_Vertical_Position instead.
 */
#define SIG_Hazards_2A_HZD_Vertical_Position        0, 0, 48, 12

/**
 * Signal HZD_Vertical_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_2A_HZD_Vertical_Position or \ref INIT_Hazards_2A instead.
 */
#define SETUP_Hazards_2A_HZD_Vertical_Position      0, 0, 48, 12, 0

/**
 * Get signal HZD_Vertical_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_2A_HZD_Vertical_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal HZD_Vertical_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_2A_HZD_Vertical_Position(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[7] &= ~(0x0f << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal HZD_Vertical_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_2A_HZD_Vertical_Position(buf) \
	SET_Hazards_2A_HZD_Vertical_Position(buf, 0)

/**
 * Signal HZD_Vertical_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_2A_HZD_Vertical_Position(x, fmt) \
	((x) * fmt / 100 + fmt * (-20))

/**
 * Signal HZD_Vertical_Position raw initial value.
 */
#define START_Hazards_2A_HZD_Vertical_Position      0

/**
 * Signal HZD_Vertical_Position raw minimum value.
 */
#define MIN_Hazards_2A_HZD_Vertical_Position        0

/**
 * Signal HZD_Vertical_Position raw maximum value.
 */
#define MAX_Hazards_2A_HZD_Vertical_Position        4000

/**
 * Signal HZD_Vertical_Position raw offset value.
 */
#define OFF_Hazards_2A_HZD_Vertical_Position        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_2B_HZD_Height Signal HZD_Height of Message Hazards_2B (0x48d)
 *
 * Height of hazard object
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_2B
 * @{
 */

/**
 * Signal HZD_Height configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_2B_HZD_Height and \ref GET_Hazards_2B_HZD_Height instead.
 */
#define SIG_Hazards_2B_HZD_Height                   0, 0, 0, 9

/**
 * Signal HZD_Height setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_2B_HZD_Height or \ref INIT_Hazards_2B instead.
 */
#define SETUP_Hazards_2B_HZD_Height                 0, 0, 0, 9, 0

/**
 * Get signal HZD_Height from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_2B_HZD_Height(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal HZD_Height in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_2B_HZD_Height(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal HZD_Height in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_2B_HZD_Height(buf) \
	SET_Hazards_2B_HZD_Height(buf, 0)

/**
 * Signal HZD_Height value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_2B_HZD_Height(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Height raw initial value.
 */
#define START_Hazards_2B_HZD_Height                 0

/**
 * Signal HZD_Height raw minimum value.
 */
#define MIN_Hazards_2B_HZD_Height                   0

/**
 * Signal HZD_Height raw maximum value.
 */
#define MAX_Hazards_2B_HZD_Height                   500

/**
 * Signal HZD_Height raw offset value.
 */
#define OFF_Hazards_2B_HZD_Height                   0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_2B_HZD_Width Signal HZD_Width of Message Hazards_2B (0x48d)
 *
 * Width of hazard object
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_2B
 * @{
 */

/**
 * Signal HZD_Width configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_2B_HZD_Width and \ref GET_Hazards_2B_HZD_Width instead.
 */
#define SIG_Hazards_2B_HZD_Width                    0, 0, 9, 13

/**
 * Signal HZD_Width setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_2B_HZD_Width or \ref INIT_Hazards_2B instead.
 */
#define SETUP_Hazards_2B_HZD_Width                  0, 0, 9, 13, 0

/**
 * Get signal HZD_Width from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_2B_HZD_Width(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal HZD_Width in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_2B_HZD_Width(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal HZD_Width in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_2B_HZD_Width(buf) \
	SET_Hazards_2B_HZD_Width(buf, 0)

/**
 * Signal HZD_Width value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_2B_HZD_Width(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Width raw initial value.
 */
#define START_Hazards_2B_HZD_Width                  0

/**
 * Signal HZD_Width raw minimum value.
 */
#define MIN_Hazards_2B_HZD_Width                    0

/**
 * Signal HZD_Width raw maximum value.
 */
#define MAX_Hazards_2B_HZD_Width                    5000

/**
 * Signal HZD_Width raw offset value.
 */
#define OFF_Hazards_2B_HZD_Width                    0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_2B_HZD_Lateral_STD Signal HZD_Lateral_STD of Message Hazards_2B (0x48d)
 *
 * Standard deviation of lateral position
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_2B
 * @{
 */

/**
 * Signal HZD_Lateral_STD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_2B_HZD_Lateral_STD and \ref GET_Hazards_2B_HZD_Lateral_STD instead.
 */
#define SIG_Hazards_2B_HZD_Lateral_STD              0, 0, 22, 8

/**
 * Signal HZD_Lateral_STD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_2B_HZD_Lateral_STD or \ref INIT_Hazards_2B instead.
 */
#define SETUP_Hazards_2B_HZD_Lateral_STD            0, 0, 22, 8, 0

/**
 * Get signal HZD_Lateral_STD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_2B_HZD_Lateral_STD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x3f) << 2) \
)

/**
 * Set signal HZD_Lateral_STD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_2B_HZD_Lateral_STD(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= (((uint8_t)(val) >> 2) & 0x3f) << 0; \
}

/**
 * Set signal HZD_Lateral_STD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_2B_HZD_Lateral_STD(buf) \
	SET_Hazards_2B_HZD_Lateral_STD(buf, 0)

/**
 * Signal HZD_Lateral_STD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_2B_HZD_Lateral_STD(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal HZD_Lateral_STD raw initial value.
 */
#define START_Hazards_2B_HZD_Lateral_STD            0

/**
 * Signal HZD_Lateral_STD raw minimum value.
 */
#define MIN_Hazards_2B_HZD_Lateral_STD              0

/**
 * Signal HZD_Lateral_STD raw maximum value.
 */
#define MAX_Hazards_2B_HZD_Lateral_STD              200

/**
 * Signal HZD_Lateral_STD raw offset value.
 */
#define OFF_Hazards_2B_HZD_Lateral_STD              0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_2B_HZD_Longitudinal_STD Signal HZD_Longitudinal_STD of Message Hazards_2B (0x48d)
 *
 * Standard deviation of longitudinal position
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_2B
 * @{
 */

/**
 * Signal HZD_Longitudinal_STD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_2B_HZD_Longitudinal_STD and \ref GET_Hazards_2B_HZD_Longitudinal_STD instead.
 */
#define SIG_Hazards_2B_HZD_Longitudinal_STD         0, 0, 30, 9

/**
 * Signal HZD_Longitudinal_STD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_2B_HZD_Longitudinal_STD or \ref INIT_Hazards_2B instead.
 */
#define SETUP_Hazards_2B_HZD_Longitudinal_STD       0, 0, 30, 9, 0

/**
 * Get signal HZD_Longitudinal_STD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_2B_HZD_Longitudinal_STD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 2) \
)

/**
 * Set signal HZD_Longitudinal_STD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_2B_HZD_Longitudinal_STD(buf, val) { \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 2) & 0x7f) << 0; \
}

/**
 * Set signal HZD_Longitudinal_STD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_2B_HZD_Longitudinal_STD(buf) \
	SET_Hazards_2B_HZD_Longitudinal_STD(buf, 0)

/**
 * Signal HZD_Longitudinal_STD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_2B_HZD_Longitudinal_STD(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal HZD_Longitudinal_STD raw initial value.
 */
#define START_Hazards_2B_HZD_Longitudinal_STD       0

/**
 * Signal HZD_Longitudinal_STD raw minimum value.
 */
#define MIN_Hazards_2B_HZD_Longitudinal_STD         0

/**
 * Signal HZD_Longitudinal_STD raw maximum value.
 */
#define MAX_Hazards_2B_HZD_Longitudinal_STD         400

/**
 * Signal HZD_Longitudinal_STD raw offset value.
 */
#define OFF_Hazards_2B_HZD_Longitudinal_STD         0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_3A_HZD_ID Signal HZD_ID of Message Hazards_3A (0x48e)
 *
 * The hazard element ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_3A
 * @{
 */

/**
 * Signal HZD_ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_3A_HZD_ID and \ref GET_Hazards_3A_HZD_ID instead.
 */
#define SIG_Hazards_3A_HZD_ID                       0, 0, 0, 8

/**
 * Signal HZD_ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_3A_HZD_ID or \ref INIT_Hazards_3A instead.
 */
#define SETUP_Hazards_3A_HZD_ID                     0, 0, 0, 8, 0

/**
 * Get signal HZD_ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_3A_HZD_ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal HZD_ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_3A_HZD_ID(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal HZD_ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_3A_HZD_ID(buf) \
	SET_Hazards_3A_HZD_ID(buf, 0)

/**
 * Signal HZD_ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_3A_HZD_ID(x, fmt) \
	((x) * fmt)

/**
 * Signal HZD_ID raw initial value.
 */
#define START_Hazards_3A_HZD_ID                     0

/**
 * Signal HZD_ID raw minimum value.
 */
#define MIN_Hazards_3A_HZD_ID                       0

/**
 * Signal HZD_ID raw maximum value.
 */
#define MAX_Hazards_3A_HZD_ID                       255

/**
 * Signal HZD_ID raw offset value.
 */
#define OFF_Hazards_3A_HZD_ID                       0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_3A_HZD_ExistenceProb Signal HZD_ExistenceProb of Message Hazards_3A (0x48e)
 *
 * Probability of presence of hazard
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_3A
 * @{
 */

/**
 * Signal HZD_ExistenceProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_3A_HZD_ExistenceProb and \ref GET_Hazards_3A_HZD_ExistenceProb instead.
 */
#define SIG_Hazards_3A_HZD_ExistenceProb            0, 0, 8, 10

/**
 * Signal HZD_ExistenceProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_3A_HZD_ExistenceProb or \ref INIT_Hazards_3A instead.
 */
#define SETUP_Hazards_3A_HZD_ExistenceProb          0, 0, 8, 10, 0

/**
 * Get signal HZD_ExistenceProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_3A_HZD_ExistenceProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x03) << 8) \
)

/**
 * Set signal HZD_ExistenceProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_3A_HZD_ExistenceProb(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[2] &= ~(0x03 << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
}

/**
 * Set signal HZD_ExistenceProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_3A_HZD_ExistenceProb(buf) \
	SET_Hazards_3A_HZD_ExistenceProb(buf, 0)

/**
 * Signal HZD_ExistenceProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_3A_HZD_ExistenceProb(x, fmt) \
	((x) * fmt / 1000)

/**
 * Signal HZD_ExistenceProb raw initial value.
 */
#define START_Hazards_3A_HZD_ExistenceProb          0

/**
 * Signal HZD_ExistenceProb raw minimum value.
 */
#define MIN_Hazards_3A_HZD_ExistenceProb            0

/**
 * Signal HZD_ExistenceProb raw maximum value.
 */
#define MAX_Hazards_3A_HZD_ExistenceProb            1000

/**
 * Signal HZD_ExistenceProb raw offset value.
 */
#define OFF_Hazards_3A_HZD_ExistenceProb            0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_3A_HZD_Lateral_Position Signal HZD_Lateral_Position of Message Hazards_3A (0x48e)
 *
 * Lateral position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_3A
 * @{
 */

/**
 * Signal HZD_Lateral_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_3A_HZD_Lateral_Position and \ref GET_Hazards_3A_HZD_Lateral_Position instead.
 */
#define SIG_Hazards_3A_HZD_Lateral_Position         0, 0, 18, 15

/**
 * Signal HZD_Lateral_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_3A_HZD_Lateral_Position or \ref INIT_Hazards_3A instead.
 */
#define SETUP_Hazards_3A_HZD_Lateral_Position       0, 0, 18, 15, 0

/**
 * Get signal HZD_Lateral_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_3A_HZD_Lateral_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 2) & 0x3f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 6) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x01) << 14) \
)

/**
 * Set signal HZD_Lateral_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_3A_HZD_Lateral_Position(buf, val) { \
	buf[2] &= ~(0x3f << 2); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 6) & 0xff) << 0; \
	buf[4] &= ~(0x01 << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 14) & 0x01) << 0; \
}

/**
 * Set signal HZD_Lateral_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_3A_HZD_Lateral_Position(buf) \
	SET_Hazards_3A_HZD_Lateral_Position(buf, 0)

/**
 * Signal HZD_Lateral_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_3A_HZD_Lateral_Position(x, fmt) \
	((x) * fmt / 100 + fmt * (-100))

/**
 * Signal HZD_Lateral_Position raw initial value.
 */
#define START_Hazards_3A_HZD_Lateral_Position       0

/**
 * Signal HZD_Lateral_Position raw minimum value.
 */
#define MIN_Hazards_3A_HZD_Lateral_Position         0

/**
 * Signal HZD_Lateral_Position raw maximum value.
 */
#define MAX_Hazards_3A_HZD_Lateral_Position         20000

/**
 * Signal HZD_Lateral_Position raw offset value.
 */
#define OFF_Hazards_3A_HZD_Lateral_Position         -10000

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_3A_HZD_Longitudinal_Position Signal HZD_Longitudinal_Position of Message Hazards_3A (0x48e)
 *
 * Longitudinal position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_3A
 * @{
 */

/**
 * Signal HZD_Longitudinal_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_3A_HZD_Longitudinal_Position and \ref GET_Hazards_3A_HZD_Longitudinal_Position instead.
 */
#define SIG_Hazards_3A_HZD_Longitudinal_Position        0, 0, 33, 15

/**
 * Signal HZD_Longitudinal_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_3A_HZD_Longitudinal_Position or \ref INIT_Hazards_3A instead.
 */
#define SETUP_Hazards_3A_HZD_Longitudinal_Position      0, 0, 33, 15, 0

/**
 * Get signal HZD_Longitudinal_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_3A_HZD_Longitudinal_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 7) \
)

/**
 * Set signal HZD_Longitudinal_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_3A_HZD_Longitudinal_Position(buf, val) { \
	buf[4] &= ~(0x7f << 1); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 7) & 0xff) << 0; \
}

/**
 * Set signal HZD_Longitudinal_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_3A_HZD_Longitudinal_Position(buf) \
	SET_Hazards_3A_HZD_Longitudinal_Position(buf, 0)

/**
 * Signal HZD_Longitudinal_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_3A_HZD_Longitudinal_Position(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Longitudinal_Position raw initial value.
 */
#define START_Hazards_3A_HZD_Longitudinal_Position      0

/**
 * Signal HZD_Longitudinal_Position raw minimum value.
 */
#define MIN_Hazards_3A_HZD_Longitudinal_Position        0

/**
 * Signal HZD_Longitudinal_Position raw maximum value.
 */
#define MAX_Hazards_3A_HZD_Longitudinal_Position        20000

/**
 * Signal HZD_Longitudinal_Position raw offset value.
 */
#define OFF_Hazards_3A_HZD_Longitudinal_Position        0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_3A_HZD_Vertical_Position Signal HZD_Vertical_Position of Message Hazards_3A (0x48e)
 *
 * Vertical position of hazard in defined CS
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_3A
 * @{
 */

/**
 * Signal HZD_Vertical_Position configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_3A_HZD_Vertical_Position and \ref GET_Hazards_3A_HZD_Vertical_Position instead.
 */
#define SIG_Hazards_3A_HZD_Vertical_Position        0, 0, 48, 12

/**
 * Signal HZD_Vertical_Position setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_3A_HZD_Vertical_Position or \ref INIT_Hazards_3A instead.
 */
#define SETUP_Hazards_3A_HZD_Vertical_Position      0, 0, 48, 12, 0

/**
 * Get signal HZD_Vertical_Position from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_3A_HZD_Vertical_Position(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x0f) << 8) \
)

/**
 * Set signal HZD_Vertical_Position in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_3A_HZD_Vertical_Position(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[7] &= ~(0x0f << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
}

/**
 * Set signal HZD_Vertical_Position in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_3A_HZD_Vertical_Position(buf) \
	SET_Hazards_3A_HZD_Vertical_Position(buf, 0)

/**
 * Signal HZD_Vertical_Position value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_3A_HZD_Vertical_Position(x, fmt) \
	((x) * fmt / 100 + fmt * (-20))

/**
 * Signal HZD_Vertical_Position raw initial value.
 */
#define START_Hazards_3A_HZD_Vertical_Position      0

/**
 * Signal HZD_Vertical_Position raw minimum value.
 */
#define MIN_Hazards_3A_HZD_Vertical_Position        0

/**
 * Signal HZD_Vertical_Position raw maximum value.
 */
#define MAX_Hazards_3A_HZD_Vertical_Position        4000

/**
 * Signal HZD_Vertical_Position raw offset value.
 */
#define OFF_Hazards_3A_HZD_Vertical_Position        -2000

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_3B_HZD_Height Signal HZD_Height of Message Hazards_3B (0x48f)
 *
 * Height of hazard object
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_3B
 * @{
 */

/**
 * Signal HZD_Height configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_3B_HZD_Height and \ref GET_Hazards_3B_HZD_Height instead.
 */
#define SIG_Hazards_3B_HZD_Height                   0, 0, 0, 9

/**
 * Signal HZD_Height setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_3B_HZD_Height or \ref INIT_Hazards_3B instead.
 */
#define SETUP_Hazards_3B_HZD_Height                 0, 0, 0, 9, 0

/**
 * Get signal HZD_Height from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_3B_HZD_Height(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x01) << 8) \
)

/**
 * Set signal HZD_Height in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_3B_HZD_Height(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x01 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x01) << 0; \
}

/**
 * Set signal HZD_Height in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_3B_HZD_Height(buf) \
	SET_Hazards_3B_HZD_Height(buf, 0)

/**
 * Signal HZD_Height value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_3B_HZD_Height(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Height raw initial value.
 */
#define START_Hazards_3B_HZD_Height                 0

/**
 * Signal HZD_Height raw minimum value.
 */
#define MIN_Hazards_3B_HZD_Height                   0

/**
 * Signal HZD_Height raw maximum value.
 */
#define MAX_Hazards_3B_HZD_Height                   500

/**
 * Signal HZD_Height raw offset value.
 */
#define OFF_Hazards_3B_HZD_Height                   0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_3B_HZD_Width Signal HZD_Width of Message Hazards_3B (0x48f)
 *
 * Width of hazard object
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_3B
 * @{
 */

/**
 * Signal HZD_Width configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_3B_HZD_Width and \ref GET_Hazards_3B_HZD_Width instead.
 */
#define SIG_Hazards_3B_HZD_Width                    0, 0, 9, 13

/**
 * Signal HZD_Width setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_3B_HZD_Width or \ref INIT_Hazards_3B instead.
 */
#define SETUP_Hazards_3B_HZD_Width                  0, 0, 9, 13, 0

/**
 * Get signal HZD_Width from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_3B_HZD_Width(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 1) & 0x7f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x3f) << 7) \
)

/**
 * Set signal HZD_Width in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_3B_HZD_Width(buf, val) { \
	buf[1] &= ~(0x7f << 1); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
	buf[2] &= ~(0x3f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x3f) << 0; \
}

/**
 * Set signal HZD_Width in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_3B_HZD_Width(buf) \
	SET_Hazards_3B_HZD_Width(buf, 0)

/**
 * Signal HZD_Width value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_3B_HZD_Width(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal HZD_Width raw initial value.
 */
#define START_Hazards_3B_HZD_Width                  0

/**
 * Signal HZD_Width raw minimum value.
 */
#define MIN_Hazards_3B_HZD_Width                    0

/**
 * Signal HZD_Width raw maximum value.
 */
#define MAX_Hazards_3B_HZD_Width                    5000

/**
 * Signal HZD_Width raw offset value.
 */
#define OFF_Hazards_3B_HZD_Width                    0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_3B_HZD_Lateral_STD Signal HZD_Lateral_STD of Message Hazards_3B (0x48f)
 *
 * Standard deviation of lateral position
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_3B
 * @{
 */

/**
 * Signal HZD_Lateral_STD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_3B_HZD_Lateral_STD and \ref GET_Hazards_3B_HZD_Lateral_STD instead.
 */
#define SIG_Hazards_3B_HZD_Lateral_STD              0, 0, 22, 8

/**
 * Signal HZD_Lateral_STD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_3B_HZD_Lateral_STD or \ref INIT_Hazards_3B instead.
 */
#define SETUP_Hazards_3B_HZD_Lateral_STD            0, 0, 22, 8, 0

/**
 * Get signal HZD_Lateral_STD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_3B_HZD_Lateral_STD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x03) << 0) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x3f) << 2) \
)

/**
 * Set signal HZD_Lateral_STD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_3B_HZD_Lateral_STD(buf, val) { \
	buf[2] &= ~(0x03 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= (((uint8_t)(val) >> 2) & 0x3f) << 0; \
}

/**
 * Set signal HZD_Lateral_STD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_3B_HZD_Lateral_STD(buf) \
	SET_Hazards_3B_HZD_Lateral_STD(buf, 0)

/**
 * Signal HZD_Lateral_STD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_3B_HZD_Lateral_STD(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal HZD_Lateral_STD raw initial value.
 */
#define START_Hazards_3B_HZD_Lateral_STD            0

/**
 * Signal HZD_Lateral_STD raw minimum value.
 */
#define MIN_Hazards_3B_HZD_Lateral_STD              0

/**
 * Signal HZD_Lateral_STD raw maximum value.
 */
#define MAX_Hazards_3B_HZD_Lateral_STD              200

/**
 * Signal HZD_Lateral_STD raw offset value.
 */
#define OFF_Hazards_3B_HZD_Lateral_STD              0

/**
 * @}
 */

/**
 * @defgroup SIG_Hazards_3B_HZD_Longitudinal_STD Signal HZD_Longitudinal_STD of Message Hazards_3B (0x48f)
 *
 * Standard deviation of longitudinal position
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Hazards_3B
 * @{
 */

/**
 * Signal HZD_Longitudinal_STD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Hazards_3B_HZD_Longitudinal_STD and \ref GET_Hazards_3B_HZD_Longitudinal_STD instead.
 */
#define SIG_Hazards_3B_HZD_Longitudinal_STD         0, 0, 30, 9

/**
 * Signal HZD_Longitudinal_STD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Hazards_3B_HZD_Longitudinal_STD or \ref INIT_Hazards_3B instead.
 */
#define SETUP_Hazards_3B_HZD_Longitudinal_STD       0, 0, 30, 9, 0

/**
 * Get signal HZD_Longitudinal_STD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Hazards_3B_HZD_Longitudinal_STD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 2) \
)

/**
 * Set signal HZD_Longitudinal_STD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Hazards_3B_HZD_Longitudinal_STD(buf, val) { \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 2) & 0x7f) << 0; \
}

/**
 * Set signal HZD_Longitudinal_STD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Hazards_3B_HZD_Longitudinal_STD(buf) \
	SET_Hazards_3B_HZD_Longitudinal_STD(buf, 0)

/**
 * Signal HZD_Longitudinal_STD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Hazards_3B_HZD_Longitudinal_STD(x, fmt) \
	((x) * fmt / 20)

/**
 * Signal HZD_Longitudinal_STD raw initial value.
 */
#define START_Hazards_3B_HZD_Longitudinal_STD       0

/**
 * Signal HZD_Longitudinal_STD raw minimum value.
 */
#define MIN_Hazards_3B_HZD_Longitudinal_STD         0

/**
 * Signal HZD_Longitudinal_STD raw maximum value.
 */
#define MAX_Hazards_3B_HZD_Longitudinal_STD         400

/**
 * Signal HZD_Longitudinal_STD raw offset value.
 */
#define OFF_Hazards_3B_HZD_Longitudinal_STD         0

/**
 * @}
 */
#endif
