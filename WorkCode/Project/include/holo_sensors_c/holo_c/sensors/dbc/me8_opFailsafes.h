#ifndef HOLO_SENSORS_ME8_ME8_OPFAILSAFES_H_
#define HOLO_SENSORS_ME8_ME8_OPFAILSAFES_H_
/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2021年 12月 06日 星期一 13:13:09 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_opFailsafes
 */

/**
 * @defgroup DB_opFailsafes CAN Database opFailsafes
 *
 * Path to file: output/opFailsafes.dbc
 *
 * Provides the following ECUs:
 */

/**
 * @defgroup MSG_Fail_Safes Message Fail_Safes (0x690)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Fail_Safes_Protocol_Version
 * - \ref SIG_Fail_Safes_Sync_Frame_Index
 * - \ref SIG_Fail_Safes_FS_Free_Sight
 * - \ref SIG_Fail_Safes_FS_Rain
 * - \ref SIG_Fail_Safes_FS_Fog
 * - \ref SIG_Fail_Safes_FS_Splashes
 * - \ref SIG_Fail_Safes_FS_Sun_Ray
 * - \ref SIG_Fail_Safes_FS_Low_Sun
 * - \ref SIG_Fail_Safes_FS_Blur_Image
 * - \ref SIG_Fail_Safes_FS_Partial_Blockage
 * - \ref SIG_Fail_Safes_FS_Full_Blockage
 * - \ref SIG_Fail_Safes_FS_Frozen_Windshield
 * - \ref SIG_Fail_Safes_FS_Out_Of_Calib
 * - \ref SIG_Fail_Safes_FS_Out_Of_Focus
 * - \ref SIG_Fail_Safes_FS_TSR_Out_OF_Calib
 * - \ref SIG_Fail_Safes_Reserved
 *
 * @{
 */

/**
 * Message Fail_Safes configuration tuple.
 */
#define MSG_Fail_Safes                              0x690, 0, 8

/**
 * Message Fail_Safes id.
 */
#define ID_Fail_Safes                               0x690

/**
 * Message Fail_Safes extended id bit.
 */
#define EXT_Fail_Safes                              0

/**
 * Message Fail_Safes Data Length Count.
 */
#define DLC_Fail_Safes                              8

/**
 * Message Fail_Safes cycle time.
 */
#define CYCLE_Fail_Safes                            0

/**
 * Message Fail_Safes fast cycle time.
 */
#define FAST_Fail_Safes                             0

/**
 * Initialise message Fail_Safes buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Fail_Safes(buf) { \
	INITSIG_Fail_Safes_Protocol_Version(buf); \
	INITSIG_Fail_Safes_Sync_Frame_Index(buf); \
	INITSIG_Fail_Safes_FS_Free_Sight(buf); \
	INITSIG_Fail_Safes_FS_Rain(buf); \
	INITSIG_Fail_Safes_FS_Fog(buf); \
	INITSIG_Fail_Safes_FS_Splashes(buf); \
	INITSIG_Fail_Safes_FS_Sun_Ray(buf); \
	INITSIG_Fail_Safes_FS_Low_Sun(buf); \
	INITSIG_Fail_Safes_FS_Blur_Image(buf); \
	INITSIG_Fail_Safes_FS_Partial_Blockage(buf); \
	INITSIG_Fail_Safes_FS_Full_Blockage(buf); \
	INITSIG_Fail_Safes_FS_Frozen_Windshield(buf); \
	INITSIG_Fail_Safes_FS_Out_Of_Calib(buf); \
	INITSIG_Fail_Safes_FS_Out_Of_Focus(buf); \
	INITSIG_Fail_Safes_FS_TSR_Out_OF_Calib(buf); \
	INITSIG_Fail_Safes_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_Fail_Safes_Protocol_Version Signal Protocol_Version of Message Fail_Safes (0x690)
 *
 * Version number of the failsafe message
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal Protocol_Version configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_Protocol_Version and \ref GET_Fail_Safes_Protocol_Version instead.
 */
#define SIG_Fail_Safes_Protocol_Version             0, 0, 0, 8

/**
 * Signal Protocol_Version setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_Protocol_Version or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_Protocol_Version           0, 0, 0, 8, 0

/**
 * Get signal Protocol_Version from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_Protocol_Version(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Protocol_Version in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_Protocol_Version(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Protocol_Version in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_Protocol_Version(buf) \
	SET_Fail_Safes_Protocol_Version(buf, 0)

/**
 * Signal Protocol_Version value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_Protocol_Version(x, fmt) \
	((x) * fmt)

/**
 * Signal Protocol_Version raw initial value.
 */
#define START_Fail_Safes_Protocol_Version           0

/**
 * Signal Protocol_Version raw minimum value.
 */
#define MIN_Fail_Safes_Protocol_Version             2

/**
 * Signal Protocol_Version raw maximum value.
 */
#define MAX_Fail_Safes_Protocol_Version             2

/**
 * Signal Protocol_Version raw offset value.
 */
#define OFF_Fail_Safes_Protocol_Version             0

/**
 * @}
 */

/**
 * @defgroup SIG_Fail_Safes_Sync_Frame_Index Signal Sync_Frame_Index of Message Fail_Safes (0x690)
 *
 * sync ID to be used to sync between signals in the system
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal Sync_Frame_Index configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_Sync_Frame_Index and \ref GET_Fail_Safes_Sync_Frame_Index instead.
 */
#define SIG_Fail_Safes_Sync_Frame_Index             0, 0, 8, 8

/**
 * Signal Sync_Frame_Index setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_Sync_Frame_Index or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_Sync_Frame_Index           0, 0, 8, 8, 0

/**
 * Get signal Sync_Frame_Index from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_Sync_Frame_Index(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Sync_Frame_Index in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_Sync_Frame_Index(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Sync_Frame_Index in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_Sync_Frame_Index(buf) \
	SET_Fail_Safes_Sync_Frame_Index(buf, 0)

/**
 * Signal Sync_Frame_Index value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_Sync_Frame_Index(x, fmt) \
	((x) * fmt)

/**
 * Signal Sync_Frame_Index raw initial value.
 */
#define START_Fail_Safes_Sync_Frame_Index           0

/**
 * Signal Sync_Frame_Index raw minimum value.
 */
#define MIN_Fail_Safes_Sync_Frame_Index             0

/**
 * Signal Sync_Frame_Index raw maximum value.
 */
#define MAX_Fail_Safes_Sync_Frame_Index             255

/**
 * Signal Sync_Frame_Index raw offset value.
 */
#define OFF_Fail_Safes_Sync_Frame_Index             0

/**
 * @}
 */

/**
 * @defgroup SIG_Fail_Safes_FS_Free_Sight Signal FS_Free_Sight of Message Fail_Safes (0x690)
 *
 * The FOV is split to 6 different regions. Once an object (Lanes/ VD/ PED/ TSR) is detected in every one of the regions the freeSight signal is set to true.
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Free_Sight.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Free_Sight configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Free_Sight and \ref GET_Fail_Safes_FS_Free_Sight instead.
 */
#define SIG_Fail_Safes_FS_Free_Sight                0, 0, 16, 1

/**
 * Signal FS_Free_Sight setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Free_Sight or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Free_Sight              0, 0, 16, 1, 0

/**
 * Get signal FS_Free_Sight from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Free_Sight(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 0) \
)

/**
 * Set signal FS_Free_Sight in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Free_Sight(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal FS_Free_Sight in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Free_Sight(buf) \
	SET_Fail_Safes_FS_Free_Sight(buf, 0)

/**
 * Signal FS_Free_Sight value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Free_Sight(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Free_Sight raw initial value.
 */
#define START_Fail_Safes_FS_Free_Sight              0

/**
 * Signal FS_Free_Sight raw minimum value.
 */
#define MIN_Fail_Safes_FS_Free_Sight                0

/**
 * Signal FS_Free_Sight raw maximum value.
 */
#define MAX_Fail_Safes_FS_Free_Sight                1

/**
 * Signal FS_Free_Sight raw offset value.
 */
#define OFF_Fail_Safes_FS_Free_Sight                0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Free_Sight Value Table for Signal FS_Free_Sight in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Free_Sight.
 *
 * @ingroup SIG_Fail_Safes_FS_Free_Sight
 */

/**
 * Value table Fail_Safes_FS_Free_Sight entry TRUE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Free_Sight
 */
#define Fail_Safes_FS_Free_Sight_TRUE                1

/**
 * Value table Fail_Safes_FS_Free_Sight entry FALSE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Free_Sight
 */
#define Fail_Safes_FS_Free_Sight_FALSE               0

/**
 * @defgroup SIG_Fail_Safes_FS_Rain Signal FS_Rain of Message Fail_Safes (0x690)
 *
 * Detection of rain or similar precipitation
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Rain.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Rain configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Rain and \ref GET_Fail_Safes_FS_Rain instead.
 */
#define SIG_Fail_Safes_FS_Rain                      0, 0, 17, 3

/**
 * Signal FS_Rain setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Rain or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Rain                    0, 0, 17, 3, 0

/**
 * Get signal FS_Rain from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Rain(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x07) << 0) \
)

/**
 * Set signal FS_Rain in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Rain(buf, val) { \
	buf[2] &= ~(0x07 << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal FS_Rain in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Rain(buf) \
	SET_Fail_Safes_FS_Rain(buf, 0)

/**
 * Signal FS_Rain value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Rain(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Rain raw initial value.
 */
#define START_Fail_Safes_FS_Rain                    0

/**
 * Signal FS_Rain raw minimum value.
 */
#define MIN_Fail_Safes_FS_Rain                      0

/**
 * Signal FS_Rain raw maximum value.
 */
#define MAX_Fail_Safes_FS_Rain                      5

/**
 * Signal FS_Rain raw offset value.
 */
#define OFF_Fail_Safes_FS_Rain                      0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Rain Value Table for Signal FS_Rain in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Rain.
 *
 * @ingroup SIG_Fail_Safes_FS_Rain
 */

/**
 * Value table Fail_Safes_FS_Rain entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Rain
 */
#define Fail_Safes_FS_Rain_99                  5

/**
 * Value table Fail_Safes_FS_Rain entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Rain
 */
#define Fail_Safes_FS_Rain_75                  4

/**
 * Value table Fail_Safes_FS_Rain entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Rain
 */
#define Fail_Safes_FS_Rain_50                  3

/**
 * Value table Fail_Safes_FS_Rain entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Rain
 */
#define Fail_Safes_FS_Rain_25                  2

/**
 * Value table Fail_Safes_FS_Rain entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Rain
 */
#define Fail_Safes_FS_Rain_NONE                1

/**
 * Value table Fail_Safes_FS_Rain entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Rain
 */
#define Fail_Safes_FS_Rain_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_Fog Signal FS_Fog of Message Fail_Safes (0x690)
 *
 * Detection of fog
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Fog.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Fog configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Fog and \ref GET_Fail_Safes_FS_Fog instead.
 */
#define SIG_Fail_Safes_FS_Fog                       0, 0, 20, 3

/**
 * Signal FS_Fog setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Fog or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Fog                     0, 0, 20, 3, 0

/**
 * Get signal FS_Fog from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Fog(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x07) << 0) \
)

/**
 * Set signal FS_Fog in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Fog(buf, val) { \
	buf[2] &= ~(0x07 << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal FS_Fog in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Fog(buf) \
	SET_Fail_Safes_FS_Fog(buf, 0)

/**
 * Signal FS_Fog value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Fog(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Fog raw initial value.
 */
#define START_Fail_Safes_FS_Fog                     0

/**
 * Signal FS_Fog raw minimum value.
 */
#define MIN_Fail_Safes_FS_Fog                       0

/**
 * Signal FS_Fog raw maximum value.
 */
#define MAX_Fail_Safes_FS_Fog                       5

/**
 * Signal FS_Fog raw offset value.
 */
#define OFF_Fail_Safes_FS_Fog                       0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Fog Value Table for Signal FS_Fog in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Fog.
 *
 * @ingroup SIG_Fail_Safes_FS_Fog
 */

/**
 * Value table Fail_Safes_FS_Fog entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Fog
 */
#define Fail_Safes_FS_Fog_99                  5

/**
 * Value table Fail_Safes_FS_Fog entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Fog
 */
#define Fail_Safes_FS_Fog_75                  4

/**
 * Value table Fail_Safes_FS_Fog entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Fog
 */
#define Fail_Safes_FS_Fog_50                  3

/**
 * Value table Fail_Safes_FS_Fog entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Fog
 */
#define Fail_Safes_FS_Fog_25                  2

/**
 * Value table Fail_Safes_FS_Fog entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Fog
 */
#define Fail_Safes_FS_Fog_NONE                1

/**
 * Value table Fail_Safes_FS_Fog entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Fog
 */
#define Fail_Safes_FS_Fog_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_Splashes Signal FS_Splashes of Message Fail_Safes (0x690)
 *
 * We cannot detect the lower edges of vehicles due to water spray aka splashes
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Splashes.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Splashes configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Splashes and \ref GET_Fail_Safes_FS_Splashes instead.
 */
#define SIG_Fail_Safes_FS_Splashes                  0, 0, 23, 3

/**
 * Signal FS_Splashes setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Splashes or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Splashes                0, 0, 23, 3, 0

/**
 * Get signal FS_Splashes from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Splashes(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x03) << 1) \
)

/**
 * Set signal FS_Splashes in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Splashes(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal FS_Splashes in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Splashes(buf) \
	SET_Fail_Safes_FS_Splashes(buf, 0)

/**
 * Signal FS_Splashes value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Splashes(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Splashes raw initial value.
 */
#define START_Fail_Safes_FS_Splashes                0

/**
 * Signal FS_Splashes raw minimum value.
 */
#define MIN_Fail_Safes_FS_Splashes                  0

/**
 * Signal FS_Splashes raw maximum value.
 */
#define MAX_Fail_Safes_FS_Splashes                  5

/**
 * Signal FS_Splashes raw offset value.
 */
#define OFF_Fail_Safes_FS_Splashes                  0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Splashes Value Table for Signal FS_Splashes in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Splashes.
 *
 * @ingroup SIG_Fail_Safes_FS_Splashes
 */

/**
 * Value table Fail_Safes_FS_Splashes entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Splashes
 */
#define Fail_Safes_FS_Splashes_99                  5

/**
 * Value table Fail_Safes_FS_Splashes entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Splashes
 */
#define Fail_Safes_FS_Splashes_75                  4

/**
 * Value table Fail_Safes_FS_Splashes entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Splashes
 */
#define Fail_Safes_FS_Splashes_50                  3

/**
 * Value table Fail_Safes_FS_Splashes entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Splashes
 */
#define Fail_Safes_FS_Splashes_25                  2

/**
 * Value table Fail_Safes_FS_Splashes entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Splashes
 */
#define Fail_Safes_FS_Splashes_NONE                1

/**
 * Value table Fail_Safes_FS_Splashes entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Splashes
 */
#define Fail_Safes_FS_Splashes_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_Sun_Ray Signal FS_Sun_Ray of Message Fail_Safes (0x690)
 *
 * A strong glare due to micro scratches on the windshield
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Sun_Ray.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Sun_Ray configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Sun_Ray and \ref GET_Fail_Safes_FS_Sun_Ray instead.
 */
#define SIG_Fail_Safes_FS_Sun_Ray                   0, 0, 26, 3

/**
 * Signal FS_Sun_Ray setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Sun_Ray or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Sun_Ray                 0, 0, 26, 3, 0

/**
 * Get signal FS_Sun_Ray from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Sun_Ray(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x07) << 0) \
)

/**
 * Set signal FS_Sun_Ray in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Sun_Ray(buf, val) { \
	buf[3] &= ~(0x07 << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal FS_Sun_Ray in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Sun_Ray(buf) \
	SET_Fail_Safes_FS_Sun_Ray(buf, 0)

/**
 * Signal FS_Sun_Ray value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Sun_Ray(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Sun_Ray raw initial value.
 */
#define START_Fail_Safes_FS_Sun_Ray                 0

/**
 * Signal FS_Sun_Ray raw minimum value.
 */
#define MIN_Fail_Safes_FS_Sun_Ray                   0

/**
 * Signal FS_Sun_Ray raw maximum value.
 */
#define MAX_Fail_Safes_FS_Sun_Ray                   5

/**
 * Signal FS_Sun_Ray raw offset value.
 */
#define OFF_Fail_Safes_FS_Sun_Ray                   0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Sun_Ray Value Table for Signal FS_Sun_Ray in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Sun_Ray.
 *
 * @ingroup SIG_Fail_Safes_FS_Sun_Ray
 */

/**
 * Value table Fail_Safes_FS_Sun_Ray entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Sun_Ray
 */
#define Fail_Safes_FS_Sun_Ray_99                  5

/**
 * Value table Fail_Safes_FS_Sun_Ray entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Sun_Ray
 */
#define Fail_Safes_FS_Sun_Ray_75                  4

/**
 * Value table Fail_Safes_FS_Sun_Ray entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Sun_Ray
 */
#define Fail_Safes_FS_Sun_Ray_50                  3

/**
 * Value table Fail_Safes_FS_Sun_Ray entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Sun_Ray
 */
#define Fail_Safes_FS_Sun_Ray_25                  2

/**
 * Value table Fail_Safes_FS_Sun_Ray entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Sun_Ray
 */
#define Fail_Safes_FS_Sun_Ray_NONE                1

/**
 * Value table Fail_Safes_FS_Sun_Ray entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Sun_Ray
 */
#define Fail_Safes_FS_Sun_Ray_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_Low_Sun Signal FS_Low_Sun of Message Fail_Safes (0x690)
 *
 * Sun glare which disrupts the image. The sun appears over the FOE
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Low_Sun.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Low_Sun configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Low_Sun and \ref GET_Fail_Safes_FS_Low_Sun instead.
 */
#define SIG_Fail_Safes_FS_Low_Sun                   0, 0, 29, 3

/**
 * Signal FS_Low_Sun setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Low_Sun or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Low_Sun                 0, 0, 29, 3, 0

/**
 * Get signal FS_Low_Sun from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Low_Sun(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 5) & 0x07) << 0) \
)

/**
 * Set signal FS_Low_Sun in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Low_Sun(buf, val) { \
	buf[3] &= ~(0x07 << 5); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal FS_Low_Sun in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Low_Sun(buf) \
	SET_Fail_Safes_FS_Low_Sun(buf, 0)

/**
 * Signal FS_Low_Sun value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Low_Sun(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Low_Sun raw initial value.
 */
#define START_Fail_Safes_FS_Low_Sun                 0

/**
 * Signal FS_Low_Sun raw minimum value.
 */
#define MIN_Fail_Safes_FS_Low_Sun                   0

/**
 * Signal FS_Low_Sun raw maximum value.
 */
#define MAX_Fail_Safes_FS_Low_Sun                   5

/**
 * Signal FS_Low_Sun raw offset value.
 */
#define OFF_Fail_Safes_FS_Low_Sun                   0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Low_Sun Value Table for Signal FS_Low_Sun in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Low_Sun.
 *
 * @ingroup SIG_Fail_Safes_FS_Low_Sun
 */

/**
 * Value table Fail_Safes_FS_Low_Sun entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Low_Sun
 */
#define Fail_Safes_FS_Low_Sun_99                  5

/**
 * Value table Fail_Safes_FS_Low_Sun entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Low_Sun
 */
#define Fail_Safes_FS_Low_Sun_75                  4

/**
 * Value table Fail_Safes_FS_Low_Sun entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Low_Sun
 */
#define Fail_Safes_FS_Low_Sun_50                  3

/**
 * Value table Fail_Safes_FS_Low_Sun entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Low_Sun
 */
#define Fail_Safes_FS_Low_Sun_25                  2

/**
 * Value table Fail_Safes_FS_Low_Sun entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Low_Sun
 */
#define Fail_Safes_FS_Low_Sun_NONE                1

/**
 * Value table Fail_Safes_FS_Low_Sun entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Low_Sun
 */
#define Fail_Safes_FS_Low_Sun_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_Blur_Image Signal FS_Blur_Image of Message Fail_Safes (0x690)
 *
 * Issued when visibility on the image is lowered such that detection of objects inside the Danger Zone (in-path and next lanes up-to some level) can't be fully performed.
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Blur_Image.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Blur_Image configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Blur_Image and \ref GET_Fail_Safes_FS_Blur_Image instead.
 */
#define SIG_Fail_Safes_FS_Blur_Image                0, 0, 32, 3

/**
 * Signal FS_Blur_Image setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Blur_Image or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Blur_Image              0, 0, 32, 3, 0

/**
 * Get signal FS_Blur_Image from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Blur_Image(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0) \
)

/**
 * Set signal FS_Blur_Image in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Blur_Image(buf, val) { \
	buf[4] &= ~(0x07 << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal FS_Blur_Image in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Blur_Image(buf) \
	SET_Fail_Safes_FS_Blur_Image(buf, 0)

/**
 * Signal FS_Blur_Image value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Blur_Image(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Blur_Image raw initial value.
 */
#define START_Fail_Safes_FS_Blur_Image              0

/**
 * Signal FS_Blur_Image raw minimum value.
 */
#define MIN_Fail_Safes_FS_Blur_Image                0

/**
 * Signal FS_Blur_Image raw maximum value.
 */
#define MAX_Fail_Safes_FS_Blur_Image                5

/**
 * Signal FS_Blur_Image raw offset value.
 */
#define OFF_Fail_Safes_FS_Blur_Image                0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Blur_Image Value Table for Signal FS_Blur_Image in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Blur_Image.
 *
 * @ingroup SIG_Fail_Safes_FS_Blur_Image
 */

/**
 * Value table Fail_Safes_FS_Blur_Image entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Blur_Image
 */
#define Fail_Safes_FS_Blur_Image_99                  5

/**
 * Value table Fail_Safes_FS_Blur_Image entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Blur_Image
 */
#define Fail_Safes_FS_Blur_Image_75                  4

/**
 * Value table Fail_Safes_FS_Blur_Image entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Blur_Image
 */
#define Fail_Safes_FS_Blur_Image_50                  3

/**
 * Value table Fail_Safes_FS_Blur_Image entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Blur_Image
 */
#define Fail_Safes_FS_Blur_Image_25                  2

/**
 * Value table Fail_Safes_FS_Blur_Image entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Blur_Image
 */
#define Fail_Safes_FS_Blur_Image_NONE                1

/**
 * Value table Fail_Safes_FS_Blur_Image entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Blur_Image
 */
#define Fail_Safes_FS_Blur_Image_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_Partial_Blockage Signal FS_Partial_Blockage of Message Fail_Safes (0x690)
 *
 * Low visibility due to partially covered lens.
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Partial_Blockage.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Partial_Blockage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Partial_Blockage and \ref GET_Fail_Safes_FS_Partial_Blockage instead.
 */
#define SIG_Fail_Safes_FS_Partial_Blockage          0, 0, 35, 3

/**
 * Signal FS_Partial_Blockage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Partial_Blockage or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Partial_Blockage        0, 0, 35, 3, 0

/**
 * Get signal FS_Partial_Blockage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Partial_Blockage(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x07) << 0) \
)

/**
 * Set signal FS_Partial_Blockage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Partial_Blockage(buf, val) { \
	buf[4] &= ~(0x07 << 3); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal FS_Partial_Blockage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Partial_Blockage(buf) \
	SET_Fail_Safes_FS_Partial_Blockage(buf, 0)

/**
 * Signal FS_Partial_Blockage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Partial_Blockage(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Partial_Blockage raw initial value.
 */
#define START_Fail_Safes_FS_Partial_Blockage        0

/**
 * Signal FS_Partial_Blockage raw minimum value.
 */
#define MIN_Fail_Safes_FS_Partial_Blockage          0

/**
 * Signal FS_Partial_Blockage raw maximum value.
 */
#define MAX_Fail_Safes_FS_Partial_Blockage          5

/**
 * Signal FS_Partial_Blockage raw offset value.
 */
#define OFF_Fail_Safes_FS_Partial_Blockage          0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Partial_Blockage Value Table for Signal FS_Partial_Blockage in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Partial_Blockage.
 *
 * @ingroup SIG_Fail_Safes_FS_Partial_Blockage
 */

/**
 * Value table Fail_Safes_FS_Partial_Blockage entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Partial_Blockage
 */
#define Fail_Safes_FS_Partial_Blockage_99                  5

/**
 * Value table Fail_Safes_FS_Partial_Blockage entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Partial_Blockage
 */
#define Fail_Safes_FS_Partial_Blockage_75                  4

/**
 * Value table Fail_Safes_FS_Partial_Blockage entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Partial_Blockage
 */
#define Fail_Safes_FS_Partial_Blockage_50                  3

/**
 * Value table Fail_Safes_FS_Partial_Blockage entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Partial_Blockage
 */
#define Fail_Safes_FS_Partial_Blockage_25                  2

/**
 * Value table Fail_Safes_FS_Partial_Blockage entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Partial_Blockage
 */
#define Fail_Safes_FS_Partial_Blockage_NONE                1

/**
 * Value table Fail_Safes_FS_Partial_Blockage entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Partial_Blockage
 */
#define Fail_Safes_FS_Partial_Blockage_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_Full_Blockage Signal FS_Full_Blockage of Message Fail_Safes (0x690)
 *
 * Takes 50 frames with no edges. Recovery is very quick (max 50 frames). Will be on when standing at night with no headlights.
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Full_Blockage.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Full_Blockage configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Full_Blockage and \ref GET_Fail_Safes_FS_Full_Blockage instead.
 */
#define SIG_Fail_Safes_FS_Full_Blockage             0, 0, 38, 3

/**
 * Signal FS_Full_Blockage setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Full_Blockage or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Full_Blockage           0, 0, 38, 3, 0

/**
 * Get signal FS_Full_Blockage from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Full_Blockage(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x03) << 0) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x01) << 2) \
)

/**
 * Set signal FS_Full_Blockage in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Full_Blockage(buf, val) { \
	buf[4] &= ~(0x03 << 6); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
	buf[5] &= ~(0x01 << 0); \
	buf[5] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
}

/**
 * Set signal FS_Full_Blockage in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Full_Blockage(buf) \
	SET_Fail_Safes_FS_Full_Blockage(buf, 0)

/**
 * Signal FS_Full_Blockage value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Full_Blockage(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Full_Blockage raw initial value.
 */
#define START_Fail_Safes_FS_Full_Blockage           0

/**
 * Signal FS_Full_Blockage raw minimum value.
 */
#define MIN_Fail_Safes_FS_Full_Blockage             0

/**
 * Signal FS_Full_Blockage raw maximum value.
 */
#define MAX_Fail_Safes_FS_Full_Blockage             5

/**
 * Signal FS_Full_Blockage raw offset value.
 */
#define OFF_Fail_Safes_FS_Full_Blockage             0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Full_Blockage Value Table for Signal FS_Full_Blockage in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Full_Blockage.
 *
 * @ingroup SIG_Fail_Safes_FS_Full_Blockage
 */

/**
 * Value table Fail_Safes_FS_Full_Blockage entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Full_Blockage
 */
#define Fail_Safes_FS_Full_Blockage_99                  5

/**
 * Value table Fail_Safes_FS_Full_Blockage entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Full_Blockage
 */
#define Fail_Safes_FS_Full_Blockage_75                  4

/**
 * Value table Fail_Safes_FS_Full_Blockage entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Full_Blockage
 */
#define Fail_Safes_FS_Full_Blockage_50                  3

/**
 * Value table Fail_Safes_FS_Full_Blockage entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Full_Blockage
 */
#define Fail_Safes_FS_Full_Blockage_25                  2

/**
 * Value table Fail_Safes_FS_Full_Blockage entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Full_Blockage
 */
#define Fail_Safes_FS_Full_Blockage_NONE                1

/**
 * Value table Fail_Safes_FS_Full_Blockage entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Full_Blockage
 */
#define Fail_Safes_FS_Full_Blockage_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_Frozen_Windshield Signal FS_Frozen_Windshield of Message Fail_Safes (0x690)
 *
 * Significant failsafe indicating the windshield is frozen and this will impact all technologies
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Frozen_Windshield.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Frozen_Windshield configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Frozen_Windshield and \ref GET_Fail_Safes_FS_Frozen_Windshield instead.
 */
#define SIG_Fail_Safes_FS_Frozen_Windshield         0, 0, 41, 3

/**
 * Signal FS_Frozen_Windshield setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Frozen_Windshield or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Frozen_Windshield       0, 0, 41, 3, 0

/**
 * Get signal FS_Frozen_Windshield from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Frozen_Windshield(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 1) & 0x07) << 0) \
)

/**
 * Set signal FS_Frozen_Windshield in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Frozen_Windshield(buf, val) { \
	buf[5] &= ~(0x07 << 1); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal FS_Frozen_Windshield in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Frozen_Windshield(buf) \
	SET_Fail_Safes_FS_Frozen_Windshield(buf, 0)

/**
 * Signal FS_Frozen_Windshield value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Frozen_Windshield(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Frozen_Windshield raw initial value.
 */
#define START_Fail_Safes_FS_Frozen_Windshield       0

/**
 * Signal FS_Frozen_Windshield raw minimum value.
 */
#define MIN_Fail_Safes_FS_Frozen_Windshield         0

/**
 * Signal FS_Frozen_Windshield raw maximum value.
 */
#define MAX_Fail_Safes_FS_Frozen_Windshield         5

/**
 * Signal FS_Frozen_Windshield raw offset value.
 */
#define OFF_Fail_Safes_FS_Frozen_Windshield         0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Frozen_Windshield Value Table for Signal FS_Frozen_Windshield in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Frozen_Windshield.
 *
 * @ingroup SIG_Fail_Safes_FS_Frozen_Windshield
 */

/**
 * Value table Fail_Safes_FS_Frozen_Windshield entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Frozen_Windshield
 */
#define Fail_Safes_FS_Frozen_Windshield_99                  5

/**
 * Value table Fail_Safes_FS_Frozen_Windshield entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Frozen_Windshield
 */
#define Fail_Safes_FS_Frozen_Windshield_75                  4

/**
 * Value table Fail_Safes_FS_Frozen_Windshield entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Frozen_Windshield
 */
#define Fail_Safes_FS_Frozen_Windshield_50                  3

/**
 * Value table Fail_Safes_FS_Frozen_Windshield entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Frozen_Windshield
 */
#define Fail_Safes_FS_Frozen_Windshield_25                  2

/**
 * Value table Fail_Safes_FS_Frozen_Windshield entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Frozen_Windshield
 */
#define Fail_Safes_FS_Frozen_Windshield_NONE                1

/**
 * Value table Fail_Safes_FS_Frozen_Windshield entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Frozen_Windshield
 */
#define Fail_Safes_FS_Frozen_Windshield_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_Out_Of_Calib Signal FS_Out_Of_Calib of Message Fail_Safes (0x690)
 *
 * The vision detected that the calibration is wrong (Auto Fix)
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Out_Of_Calib.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Out_Of_Calib configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Out_Of_Calib and \ref GET_Fail_Safes_FS_Out_Of_Calib instead.
 */
#define SIG_Fail_Safes_FS_Out_Of_Calib              0, 0, 44, 3

/**
 * Signal FS_Out_Of_Calib setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Out_Of_Calib or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Out_Of_Calib            0, 0, 44, 3, 0

/**
 * Get signal FS_Out_Of_Calib from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Out_Of_Calib(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 4) & 0x07) << 0) \
)

/**
 * Set signal FS_Out_Of_Calib in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Out_Of_Calib(buf, val) { \
	buf[5] &= ~(0x07 << 4); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal FS_Out_Of_Calib in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Out_Of_Calib(buf) \
	SET_Fail_Safes_FS_Out_Of_Calib(buf, 0)

/**
 * Signal FS_Out_Of_Calib value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Out_Of_Calib(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Out_Of_Calib raw initial value.
 */
#define START_Fail_Safes_FS_Out_Of_Calib            0

/**
 * Signal FS_Out_Of_Calib raw minimum value.
 */
#define MIN_Fail_Safes_FS_Out_Of_Calib              0

/**
 * Signal FS_Out_Of_Calib raw maximum value.
 */
#define MAX_Fail_Safes_FS_Out_Of_Calib              5

/**
 * Signal FS_Out_Of_Calib raw offset value.
 */
#define OFF_Fail_Safes_FS_Out_Of_Calib              0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Out_Of_Calib Value Table for Signal FS_Out_Of_Calib in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Out_Of_Calib.
 *
 * @ingroup SIG_Fail_Safes_FS_Out_Of_Calib
 */

/**
 * Value table Fail_Safes_FS_Out_Of_Calib entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Calib
 */
#define Fail_Safes_FS_Out_Of_Calib_99                  5

/**
 * Value table Fail_Safes_FS_Out_Of_Calib entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Calib
 */
#define Fail_Safes_FS_Out_Of_Calib_75                  4

/**
 * Value table Fail_Safes_FS_Out_Of_Calib entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Calib
 */
#define Fail_Safes_FS_Out_Of_Calib_50                  3

/**
 * Value table Fail_Safes_FS_Out_Of_Calib entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Calib
 */
#define Fail_Safes_FS_Out_Of_Calib_25                  2

/**
 * Value table Fail_Safes_FS_Out_Of_Calib entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Calib
 */
#define Fail_Safes_FS_Out_Of_Calib_NONE                1

/**
 * Value table Fail_Safes_FS_Out_Of_Calib entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Calib
 */
#define Fail_Safes_FS_Out_Of_Calib_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_Out_Of_Focus Signal FS_Out_Of_Focus of Message Fail_Safes (0x690)
 *
 * The vision detected that the focus calibration is wrong 
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_Out_Of_Focus.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_Out_Of_Focus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_Out_Of_Focus and \ref GET_Fail_Safes_FS_Out_Of_Focus instead.
 */
#define SIG_Fail_Safes_FS_Out_Of_Focus              0, 0, 47, 3

/**
 * Signal FS_Out_Of_Focus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_Out_Of_Focus or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_Out_Of_Focus            0, 0, 47, 3, 0

/**
 * Get signal FS_Out_Of_Focus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_Out_Of_Focus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0x03) << 1) \
)

/**
 * Set signal FS_Out_Of_Focus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_Out_Of_Focus(buf, val) { \
	buf[5] &= ~(0x01 << 7); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[6] &= ~(0x03 << 0); \
	buf[6] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
}

/**
 * Set signal FS_Out_Of_Focus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_Out_Of_Focus(buf) \
	SET_Fail_Safes_FS_Out_Of_Focus(buf, 0)

/**
 * Signal FS_Out_Of_Focus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_Out_Of_Focus(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_Out_Of_Focus raw initial value.
 */
#define START_Fail_Safes_FS_Out_Of_Focus            0

/**
 * Signal FS_Out_Of_Focus raw minimum value.
 */
#define MIN_Fail_Safes_FS_Out_Of_Focus              0

/**
 * Signal FS_Out_Of_Focus raw maximum value.
 */
#define MAX_Fail_Safes_FS_Out_Of_Focus              5

/**
 * Signal FS_Out_Of_Focus raw offset value.
 */
#define OFF_Fail_Safes_FS_Out_Of_Focus              0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_Out_Of_Focus Value Table for Signal FS_Out_Of_Focus in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_Out_Of_Focus.
 *
 * @ingroup SIG_Fail_Safes_FS_Out_Of_Focus
 */

/**
 * Value table Fail_Safes_FS_Out_Of_Focus entry 99.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Focus
 */
#define Fail_Safes_FS_Out_Of_Focus_99                  5

/**
 * Value table Fail_Safes_FS_Out_Of_Focus entry 75.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Focus
 */
#define Fail_Safes_FS_Out_Of_Focus_75                  4

/**
 * Value table Fail_Safes_FS_Out_Of_Focus entry 50.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Focus
 */
#define Fail_Safes_FS_Out_Of_Focus_50                  3

/**
 * Value table Fail_Safes_FS_Out_Of_Focus entry 25.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Focus
 */
#define Fail_Safes_FS_Out_Of_Focus_25                  2

/**
 * Value table Fail_Safes_FS_Out_Of_Focus entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Focus
 */
#define Fail_Safes_FS_Out_Of_Focus_NONE                1

/**
 * Value table Fail_Safes_FS_Out_Of_Focus entry NOT_READY.
 *
 * @ingroup ENUM_Fail_Safes_FS_Out_Of_Focus
 */
#define Fail_Safes_FS_Out_Of_Focus_NOT_READY           0

/**
 * @defgroup SIG_Fail_Safes_FS_TSR_Out_OF_Calib Signal FS_TSR_Out_OF_Calib of Message Fail_Safes (0x690)
 *
 * Specific TSR Out Of Calib Signal
 *
 * Contains the value table \ref ENUM_Fail_Safes_FS_TSR_Out_OF_Calib.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal FS_TSR_Out_OF_Calib configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_FS_TSR_Out_OF_Calib and \ref GET_Fail_Safes_FS_TSR_Out_OF_Calib instead.
 */
#define SIG_Fail_Safes_FS_TSR_Out_OF_Calib          0, 0, 50, 8

/**
 * Signal FS_TSR_Out_OF_Calib setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_FS_TSR_Out_OF_Calib or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_FS_TSR_Out_OF_Calib        0, 0, 50, 8, 0

/**
 * Get signal FS_TSR_Out_OF_Calib from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_FS_TSR_Out_OF_Calib(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 2) & 0x3f) << 0) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 6) \
)

/**
 * Set signal FS_TSR_Out_OF_Calib in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_FS_TSR_Out_OF_Calib(buf, val) { \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
	buf[7] &= ~(0x03 << 0); \
	buf[7] |= (((uint8_t)(val) >> 6) & 0x03) << 0; \
}

/**
 * Set signal FS_TSR_Out_OF_Calib in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_FS_TSR_Out_OF_Calib(buf) \
	SET_Fail_Safes_FS_TSR_Out_OF_Calib(buf, 0)

/**
 * Signal FS_TSR_Out_OF_Calib value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_FS_TSR_Out_OF_Calib(x, fmt) \
	((x) * fmt)

/**
 * Signal FS_TSR_Out_OF_Calib raw initial value.
 */
#define START_Fail_Safes_FS_TSR_Out_OF_Calib        0

/**
 * Signal FS_TSR_Out_OF_Calib raw minimum value.
 */
#define MIN_Fail_Safes_FS_TSR_Out_OF_Calib          0

/**
 * Signal FS_TSR_Out_OF_Calib raw maximum value.
 */
#define MAX_Fail_Safes_FS_TSR_Out_OF_Calib          8

/**
 * Signal FS_TSR_Out_OF_Calib raw offset value.
 */
#define OFF_Fail_Safes_FS_TSR_Out_OF_Calib          0

/**
 * @}
 */

/**
 * @defgroup ENUM_Fail_Safes_FS_TSR_Out_OF_Calib Value Table for Signal FS_TSR_Out_OF_Calib in Message Fail_Safes (0x690)
 *
 * Enum values defined for \ref SIG_Fail_Safes_FS_TSR_Out_OF_Calib.
 *
 * @ingroup SIG_Fail_Safes_FS_TSR_Out_OF_Calib
 */

/**
 * Value table Fail_Safes_FS_TSR_Out_OF_Calib entry TSR_OUT_OF_CALIB_HORIZON.
 *
 * @ingroup ENUM_Fail_Safes_FS_TSR_Out_OF_Calib
 */
#define Fail_Safes_FS_TSR_Out_OF_Calib_TSR_OUT_OF_CALIB_HORIZON    8

/**
 * Value table Fail_Safes_FS_TSR_Out_OF_Calib entry TSR_OUT_OF_CALIB_YAW.
 *
 * @ingroup ENUM_Fail_Safes_FS_TSR_Out_OF_Calib
 */
#define Fail_Safes_FS_TSR_Out_OF_Calib_TSR_OUT_OF_CALIB_YAW    4

/**
 *
 *  TSR_OUT_OF_CALIB_AEB
 *
 * @ingroup ENUM_Fail_Safes_FS_TSR_Out_OF_Calib
 */

/**
 * Value table Fail_Safes_FS_TSR_Out_OF_Calib entry TSR_OUT_OF_CALIB.
 *
 * @ingroup ENUM_Fail_Safes_FS_TSR_Out_OF_Calib
 */
#define Fail_Safes_FS_TSR_Out_OF_Calib_TSR_OUT_OF_CALIB    1

/**
 * Value table Fail_Safes_FS_TSR_Out_OF_Calib entry NONE.
 *
 * @ingroup ENUM_Fail_Safes_FS_TSR_Out_OF_Calib
 */
#define Fail_Safes_FS_TSR_Out_OF_Calib_NONE                0

/**
 * @defgroup SIG_Fail_Safes_Reserved Signal Reserved of Message Fail_Safes (0x690)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Fail_Safes
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Fail_Safes_Reserved and \ref GET_Fail_Safes_Reserved instead.
 */
#define SIG_Fail_Safes_Reserved                     0, 0, 58, 6

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Fail_Safes_Reserved or \ref INIT_Fail_Safes instead.
 */
#define SETUP_Fail_Safes_Reserved                   0, 0, 58, 6, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Fail_Safes_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Fail_Safes_Reserved(buf, val) { \
	buf[7] &= ~(0x3f << 2); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Fail_Safes_Reserved(buf) \
	SET_Fail_Safes_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Fail_Safes_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Fail_Safes_Reserved                   0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Fail_Safes_Reserved                     0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Fail_Safes_Reserved                     0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Fail_Safes_Reserved                     0

/**
 * @}
 */
#endif
