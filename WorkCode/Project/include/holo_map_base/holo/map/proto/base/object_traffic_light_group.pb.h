// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/object_traffic_light_group.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_5fgroup_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_5fgroup_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/coordinate.pb.h"
#include "holo/map/proto/common/geo_box.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_5fgroup_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_5fgroup_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_5fgroup_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class ObjectTrafficLightGroup;
class ObjectTrafficLightGroupDefaultTypeInternal;
extern ObjectTrafficLightGroupDefaultTypeInternal _ObjectTrafficLightGroup_default_instance_;
class ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse;
class ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUseDefaultTypeInternal;
extern ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUseDefaultTypeInternal _ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::ObjectTrafficLightGroup* Arena::CreateMaybeMessage<::holo::map::proto::base::ObjectTrafficLightGroup>(Arena*);
template<> ::holo::map::proto::base::ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

// ===================================================================

class ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse();
  ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse& other);
  static const ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse*>(&_ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ObjectTrafficLightGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.ObjectTrafficLightGroup) */ {
 public:
  ObjectTrafficLightGroup();
  virtual ~ObjectTrafficLightGroup();

  ObjectTrafficLightGroup(const ObjectTrafficLightGroup& from);

  inline ObjectTrafficLightGroup& operator=(const ObjectTrafficLightGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectTrafficLightGroup(ObjectTrafficLightGroup&& from) noexcept
    : ObjectTrafficLightGroup() {
    *this = ::std::move(from);
  }

  inline ObjectTrafficLightGroup& operator=(ObjectTrafficLightGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectTrafficLightGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectTrafficLightGroup* internal_default_instance() {
    return reinterpret_cast<const ObjectTrafficLightGroup*>(
               &_ObjectTrafficLightGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ObjectTrafficLightGroup* other);
  friend void swap(ObjectTrafficLightGroup& a, ObjectTrafficLightGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectTrafficLightGroup* New() const final {
    return CreateMaybeMessage<ObjectTrafficLightGroup>(NULL);
  }

  ObjectTrafficLightGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectTrafficLightGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectTrafficLightGroup& from);
  void MergeFrom(const ObjectTrafficLightGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectTrafficLightGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated uint64 traffic_light_ids = 2 [packed = true];
  int traffic_light_ids_size() const;
  void clear_traffic_light_ids();
  static const int kTrafficLightIdsFieldNumber = 2;
  ::google::protobuf::uint64 traffic_light_ids(int index) const;
  void set_traffic_light_ids(int index, ::google::protobuf::uint64 value);
  void add_traffic_light_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      traffic_light_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_traffic_light_ids();

  // repeated uint64 intersection_id = 3 [packed = true];
  int intersection_id_size() const;
  void clear_intersection_id();
  static const int kIntersectionIdFieldNumber = 3;
  ::google::protobuf::uint64 intersection_id(int index) const;
  void set_intersection_id(int index, ::google::protobuf::uint64 value);
  void add_intersection_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      intersection_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_intersection_id();

  // repeated uint64 tile_ids = 10 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 10;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // map<uint32, .holo.map.proto.common.GeoBox> extra_geo_box = 24;
  int extra_geo_box_size() const;
  void clear_extra_geo_box();
  static const int kExtraGeoBoxFieldNumber = 24;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >&
      extra_geo_box() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >*
      mutable_extra_geo_box();

  // optional .holo.map.proto.common.GeoBox geo_box = 23;
  bool has_geo_box() const;
  void clear_geo_box();
  static const int kGeoBoxFieldNumber = 23;
  private:
  const ::holo::map::proto::common::GeoBox& _internal_geo_box() const;
  public:
  const ::holo::map::proto::common::GeoBox& geo_box() const;
  ::holo::map::proto::common::GeoBox* release_geo_box();
  ::holo::map::proto::common::GeoBox* mutable_geo_box();
  void set_allocated_geo_box(::holo::map::proto::common::GeoBox* geo_box);

  // optional .holo.map.proto.common.Coordinate coordinate = 25;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 25;
  private:
  const ::holo::map::proto::common::Coordinate& _internal_coordinate() const;
  public:
  const ::holo::map::proto::common::Coordinate& coordinate() const;
  ::holo::map::proto::common::Coordinate* release_coordinate();
  ::holo::map::proto::common::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate);

  // optional uint64 object_traffic_light_group_id = 1;
  bool has_object_traffic_light_group_id() const;
  void clear_object_traffic_light_group_id();
  static const int kObjectTrafficLightGroupIdFieldNumber = 1;
  ::google::protobuf::uint64 object_traffic_light_group_id() const;
  void set_object_traffic_light_group_id(::google::protobuf::uint64 value);

  // optional bool south_flag = 22;
  bool has_south_flag() const;
  void clear_south_flag();
  static const int kSouthFlagFieldNumber = 22;
  bool south_flag() const;
  void set_south_flag(bool value);

  // optional uint32 zone_id = 20;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 20;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // optional uint32 extra_zone_id = 21;
  bool has_extra_zone_id() const;
  void clear_extra_zone_id();
  static const int kExtraZoneIdFieldNumber = 21;
  ::google::protobuf::uint32 extra_zone_id() const;
  void set_extra_zone_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.ObjectTrafficLightGroup)
 private:
  void set_has_object_traffic_light_group_id();
  void clear_has_object_traffic_light_group_id();
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_extra_zone_id();
  void clear_has_extra_zone_id();
  void set_has_south_flag();
  void clear_has_south_flag();
  void set_has_geo_box();
  void clear_has_geo_box();
  void set_has_coordinate();
  void clear_has_coordinate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > traffic_light_ids_;
  mutable int _traffic_light_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > intersection_id_;
  mutable int _intersection_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      ObjectTrafficLightGroup_ExtraGeoBoxEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_geo_box_;
  ::holo::map::proto::common::GeoBox* geo_box_;
  ::holo::map::proto::common::Coordinate* coordinate_;
  ::google::protobuf::uint64 object_traffic_light_group_id_;
  bool south_flag_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 extra_zone_id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_5fgroup_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ObjectTrafficLightGroup

// optional uint64 object_traffic_light_group_id = 1;
inline bool ObjectTrafficLightGroup::has_object_traffic_light_group_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectTrafficLightGroup::set_has_object_traffic_light_group_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectTrafficLightGroup::clear_has_object_traffic_light_group_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectTrafficLightGroup::clear_object_traffic_light_group_id() {
  object_traffic_light_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_traffic_light_group_id();
}
inline ::google::protobuf::uint64 ObjectTrafficLightGroup::object_traffic_light_group_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLightGroup.object_traffic_light_group_id)
  return object_traffic_light_group_id_;
}
inline void ObjectTrafficLightGroup::set_object_traffic_light_group_id(::google::protobuf::uint64 value) {
  set_has_object_traffic_light_group_id();
  object_traffic_light_group_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLightGroup.object_traffic_light_group_id)
}

// repeated uint64 traffic_light_ids = 2 [packed = true];
inline int ObjectTrafficLightGroup::traffic_light_ids_size() const {
  return traffic_light_ids_.size();
}
inline void ObjectTrafficLightGroup::clear_traffic_light_ids() {
  traffic_light_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectTrafficLightGroup::traffic_light_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLightGroup.traffic_light_ids)
  return traffic_light_ids_.Get(index);
}
inline void ObjectTrafficLightGroup::set_traffic_light_ids(int index, ::google::protobuf::uint64 value) {
  traffic_light_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLightGroup.traffic_light_ids)
}
inline void ObjectTrafficLightGroup::add_traffic_light_ids(::google::protobuf::uint64 value) {
  traffic_light_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectTrafficLightGroup.traffic_light_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectTrafficLightGroup::traffic_light_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectTrafficLightGroup.traffic_light_ids)
  return traffic_light_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectTrafficLightGroup::mutable_traffic_light_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectTrafficLightGroup.traffic_light_ids)
  return &traffic_light_ids_;
}

// repeated uint64 intersection_id = 3 [packed = true];
inline int ObjectTrafficLightGroup::intersection_id_size() const {
  return intersection_id_.size();
}
inline void ObjectTrafficLightGroup::clear_intersection_id() {
  intersection_id_.Clear();
}
inline ::google::protobuf::uint64 ObjectTrafficLightGroup::intersection_id(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLightGroup.intersection_id)
  return intersection_id_.Get(index);
}
inline void ObjectTrafficLightGroup::set_intersection_id(int index, ::google::protobuf::uint64 value) {
  intersection_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLightGroup.intersection_id)
}
inline void ObjectTrafficLightGroup::add_intersection_id(::google::protobuf::uint64 value) {
  intersection_id_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectTrafficLightGroup.intersection_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectTrafficLightGroup::intersection_id() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectTrafficLightGroup.intersection_id)
  return intersection_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectTrafficLightGroup::mutable_intersection_id() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectTrafficLightGroup.intersection_id)
  return &intersection_id_;
}

// repeated uint64 tile_ids = 10 [packed = true];
inline int ObjectTrafficLightGroup::tile_ids_size() const {
  return tile_ids_.size();
}
inline void ObjectTrafficLightGroup::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectTrafficLightGroup::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLightGroup.tile_ids)
  return tile_ids_.Get(index);
}
inline void ObjectTrafficLightGroup::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLightGroup.tile_ids)
}
inline void ObjectTrafficLightGroup::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectTrafficLightGroup.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectTrafficLightGroup::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectTrafficLightGroup.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectTrafficLightGroup::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectTrafficLightGroup.tile_ids)
  return &tile_ids_;
}

// optional uint32 zone_id = 20;
inline bool ObjectTrafficLightGroup::has_zone_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObjectTrafficLightGroup::set_has_zone_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObjectTrafficLightGroup::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObjectTrafficLightGroup::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 ObjectTrafficLightGroup::zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLightGroup.zone_id)
  return zone_id_;
}
inline void ObjectTrafficLightGroup::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLightGroup.zone_id)
}

// optional uint32 extra_zone_id = 21;
inline bool ObjectTrafficLightGroup::has_extra_zone_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObjectTrafficLightGroup::set_has_extra_zone_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObjectTrafficLightGroup::clear_has_extra_zone_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObjectTrafficLightGroup::clear_extra_zone_id() {
  extra_zone_id_ = 0u;
  clear_has_extra_zone_id();
}
inline ::google::protobuf::uint32 ObjectTrafficLightGroup::extra_zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLightGroup.extra_zone_id)
  return extra_zone_id_;
}
inline void ObjectTrafficLightGroup::set_extra_zone_id(::google::protobuf::uint32 value) {
  set_has_extra_zone_id();
  extra_zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLightGroup.extra_zone_id)
}

// optional bool south_flag = 22;
inline bool ObjectTrafficLightGroup::has_south_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectTrafficLightGroup::set_has_south_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectTrafficLightGroup::clear_has_south_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectTrafficLightGroup::clear_south_flag() {
  south_flag_ = false;
  clear_has_south_flag();
}
inline bool ObjectTrafficLightGroup::south_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLightGroup.south_flag)
  return south_flag_;
}
inline void ObjectTrafficLightGroup::set_south_flag(bool value) {
  set_has_south_flag();
  south_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLightGroup.south_flag)
}

// optional .holo.map.proto.common.GeoBox geo_box = 23;
inline bool ObjectTrafficLightGroup::has_geo_box() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectTrafficLightGroup::set_has_geo_box() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectTrafficLightGroup::clear_has_geo_box() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::GeoBox& ObjectTrafficLightGroup::_internal_geo_box() const {
  return *geo_box_;
}
inline const ::holo::map::proto::common::GeoBox& ObjectTrafficLightGroup::geo_box() const {
  const ::holo::map::proto::common::GeoBox* p = geo_box_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLightGroup.geo_box)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoBox*>(
      &::holo::map::proto::common::_GeoBox_default_instance_);
}
inline ::holo::map::proto::common::GeoBox* ObjectTrafficLightGroup::release_geo_box() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.ObjectTrafficLightGroup.geo_box)
  clear_has_geo_box();
  ::holo::map::proto::common::GeoBox* temp = geo_box_;
  geo_box_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoBox* ObjectTrafficLightGroup::mutable_geo_box() {
  set_has_geo_box();
  if (geo_box_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoBox>(GetArenaNoVirtual());
    geo_box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.ObjectTrafficLightGroup.geo_box)
  return geo_box_;
}
inline void ObjectTrafficLightGroup::set_allocated_geo_box(::holo::map::proto::common::GeoBox* geo_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geo_box_);
  }
  if (geo_box) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geo_box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geo_box, submessage_arena);
    }
    set_has_geo_box();
  } else {
    clear_has_geo_box();
  }
  geo_box_ = geo_box;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.ObjectTrafficLightGroup.geo_box)
}

// map<uint32, .holo.map.proto.common.GeoBox> extra_geo_box = 24;
inline int ObjectTrafficLightGroup::extra_geo_box_size() const {
  return extra_geo_box_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >&
ObjectTrafficLightGroup::extra_geo_box() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.ObjectTrafficLightGroup.extra_geo_box)
  return extra_geo_box_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >*
ObjectTrafficLightGroup::mutable_extra_geo_box() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.ObjectTrafficLightGroup.extra_geo_box)
  return extra_geo_box_.MutableMap();
}

// optional .holo.map.proto.common.Coordinate coordinate = 25;
inline bool ObjectTrafficLightGroup::has_coordinate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectTrafficLightGroup::set_has_coordinate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectTrafficLightGroup::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::Coordinate& ObjectTrafficLightGroup::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::holo::map::proto::common::Coordinate& ObjectTrafficLightGroup::coordinate() const {
  const ::holo::map::proto::common::Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLightGroup.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::Coordinate*>(
      &::holo::map::proto::common::_Coordinate_default_instance_);
}
inline ::holo::map::proto::common::Coordinate* ObjectTrafficLightGroup::release_coordinate() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.ObjectTrafficLightGroup.coordinate)
  clear_has_coordinate();
  ::holo::map::proto::common::Coordinate* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::Coordinate* ObjectTrafficLightGroup::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.ObjectTrafficLightGroup.coordinate)
  return coordinate_;
}
inline void ObjectTrafficLightGroup::set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.ObjectTrafficLightGroup.coordinate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_5fgroup_2eproto
