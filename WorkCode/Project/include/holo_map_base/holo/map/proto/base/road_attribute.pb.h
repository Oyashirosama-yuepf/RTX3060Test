// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/road_attribute.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2froad_5fattribute_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2froad_5fattribute_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2froad_5fattribute_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2froad_5fattribute_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2froad_5fattribute_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class RoadAttribute;
class RoadAttributeDefaultTypeInternal;
extern RoadAttributeDefaultTypeInternal _RoadAttribute_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::RoadAttribute* Arena::CreateMaybeMessage<::holo::map::proto::base::RoadAttribute>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

enum RoadAttribute_TollDir {
  RoadAttribute_TollDir_TOLL_DIR_UNDEFINED = 0,
  RoadAttribute_TollDir_TOLL_DIR_POSITIVE_DIRECTION = 1,
  RoadAttribute_TollDir_TOLL_DIR_NEGATIVE_DIRECTION = 2,
  RoadAttribute_TollDir_TOLL_DIR_BI_DIRECTION = 3,
  RoadAttribute_TollDir_TOLL_DIR_NON_TOOL_BOOTH = 4
};
bool RoadAttribute_TollDir_IsValid(int value);
const RoadAttribute_TollDir RoadAttribute_TollDir_TollDir_MIN = RoadAttribute_TollDir_TOLL_DIR_UNDEFINED;
const RoadAttribute_TollDir RoadAttribute_TollDir_TollDir_MAX = RoadAttribute_TollDir_TOLL_DIR_NON_TOOL_BOOTH;
const int RoadAttribute_TollDir_TollDir_ARRAYSIZE = RoadAttribute_TollDir_TollDir_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadAttribute_TollDir_descriptor();
inline const ::std::string& RoadAttribute_TollDir_Name(RoadAttribute_TollDir value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoadAttribute_TollDir_descriptor(), value);
}
inline bool RoadAttribute_TollDir_Parse(
    const ::std::string& name, RoadAttribute_TollDir* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoadAttribute_TollDir>(
    RoadAttribute_TollDir_descriptor(), name, value);
}
// ===================================================================

class RoadAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.RoadAttribute) */ {
 public:
  RoadAttribute();
  virtual ~RoadAttribute();

  RoadAttribute(const RoadAttribute& from);

  inline RoadAttribute& operator=(const RoadAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoadAttribute(RoadAttribute&& from) noexcept
    : RoadAttribute() {
    *this = ::std::move(from);
  }

  inline RoadAttribute& operator=(RoadAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadAttribute* internal_default_instance() {
    return reinterpret_cast<const RoadAttribute*>(
               &_RoadAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RoadAttribute* other);
  friend void swap(RoadAttribute& a, RoadAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoadAttribute* New() const final {
    return CreateMaybeMessage<RoadAttribute>(NULL);
  }

  RoadAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoadAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoadAttribute& from);
  void MergeFrom(const RoadAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RoadAttribute_TollDir TollDir;
  static const TollDir TOLL_DIR_UNDEFINED =
    RoadAttribute_TollDir_TOLL_DIR_UNDEFINED;
  static const TollDir TOLL_DIR_POSITIVE_DIRECTION =
    RoadAttribute_TollDir_TOLL_DIR_POSITIVE_DIRECTION;
  static const TollDir TOLL_DIR_NEGATIVE_DIRECTION =
    RoadAttribute_TollDir_TOLL_DIR_NEGATIVE_DIRECTION;
  static const TollDir TOLL_DIR_BI_DIRECTION =
    RoadAttribute_TollDir_TOLL_DIR_BI_DIRECTION;
  static const TollDir TOLL_DIR_NON_TOOL_BOOTH =
    RoadAttribute_TollDir_TOLL_DIR_NON_TOOL_BOOTH;
  static inline bool TollDir_IsValid(int value) {
    return RoadAttribute_TollDir_IsValid(value);
  }
  static const TollDir TollDir_MIN =
    RoadAttribute_TollDir_TollDir_MIN;
  static const TollDir TollDir_MAX =
    RoadAttribute_TollDir_TollDir_MAX;
  static const int TollDir_ARRAYSIZE =
    RoadAttribute_TollDir_TollDir_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TollDir_descriptor() {
    return RoadAttribute_TollDir_descriptor();
  }
  static inline const ::std::string& TollDir_Name(TollDir value) {
    return RoadAttribute_TollDir_Name(value);
  }
  static inline bool TollDir_Parse(const ::std::string& name,
      TollDir* value) {
    return RoadAttribute_TollDir_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 start_pos = 1;
  bool has_start_pos() const;
  void clear_start_pos();
  static const int kStartPosFieldNumber = 1;
  ::google::protobuf::uint64 start_pos() const;
  void set_start_pos(::google::protobuf::uint64 value);

  // optional uint64 end_pos = 2;
  bool has_end_pos() const;
  void clear_end_pos();
  static const int kEndPosFieldNumber = 2;
  ::google::protobuf::uint64 end_pos() const;
  void set_end_pos(::google::protobuf::uint64 value);

  // optional bool bridge_flag = 3;
  bool has_bridge_flag() const;
  void clear_bridge_flag();
  static const int kBridgeFlagFieldNumber = 3;
  bool bridge_flag() const;
  void set_bridge_flag(bool value);

  // optional bool tunnel_flag = 4;
  bool has_tunnel_flag() const;
  void clear_tunnel_flag();
  static const int kTunnelFlagFieldNumber = 4;
  bool tunnel_flag() const;
  void set_tunnel_flag(bool value);

  // optional bool urban_flag = 5;
  bool has_urban_flag() const;
  void clear_urban_flag();
  static const int kUrbanFlagFieldNumber = 5;
  bool urban_flag() const;
  void set_urban_flag(bool value);

  // optional bool motorway_flag = 6;
  bool has_motorway_flag() const;
  void clear_motorway_flag();
  static const int kMotorwayFlagFieldNumber = 6;
  bool motorway_flag() const;
  void set_motorway_flag(bool value);

  // optional bool servicearea_flag = 7;
  bool has_servicearea_flag() const;
  void clear_servicearea_flag();
  static const int kServiceareaFlagFieldNumber = 7;
  bool servicearea_flag() const;
  void set_servicearea_flag(bool value);

  // optional bool ferry_flag = 8;
  bool has_ferry_flag() const;
  void clear_ferry_flag();
  static const int kFerryFlagFieldNumber = 8;
  bool ferry_flag() const;
  void set_ferry_flag(bool value);

  // optional bool controlled_access_flag = 11;
  bool has_controlled_access_flag() const;
  void clear_controlled_access_flag();
  static const int kControlledAccessFlagFieldNumber = 11;
  bool controlled_access_flag() const;
  void set_controlled_access_flag(bool value);

  // optional bool complex_intersection_flag = 12;
  bool has_complex_intersection_flag() const;
  void clear_complex_intersection_flag();
  static const int kComplexIntersectionFlagFieldNumber = 12;
  bool complex_intersection_flag() const;
  void set_complex_intersection_flag(bool value);

  // optional uint64 road_id = 9;
  bool has_road_id() const;
  void clear_road_id();
  static const int kRoadIdFieldNumber = 9;
  ::google::protobuf::uint64 road_id() const;
  void set_road_id(::google::protobuf::uint64 value);

  // optional .holo.map.proto.base.RoadAttribute.TollDir toll_dir = 10;
  bool has_toll_dir() const;
  void clear_toll_dir();
  static const int kTollDirFieldNumber = 10;
  ::holo::map::proto::base::RoadAttribute_TollDir toll_dir() const;
  void set_toll_dir(::holo::map::proto::base::RoadAttribute_TollDir value);

  // optional uint32 high_limit_cm = 13;
  bool has_high_limit_cm() const;
  void clear_high_limit_cm();
  static const int kHighLimitCmFieldNumber = 13;
  ::google::protobuf::uint32 high_limit_cm() const;
  void set_high_limit_cm(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.RoadAttribute)
 private:
  void set_has_start_pos();
  void clear_has_start_pos();
  void set_has_end_pos();
  void clear_has_end_pos();
  void set_has_bridge_flag();
  void clear_has_bridge_flag();
  void set_has_tunnel_flag();
  void clear_has_tunnel_flag();
  void set_has_urban_flag();
  void clear_has_urban_flag();
  void set_has_motorway_flag();
  void clear_has_motorway_flag();
  void set_has_servicearea_flag();
  void clear_has_servicearea_flag();
  void set_has_ferry_flag();
  void clear_has_ferry_flag();
  void set_has_road_id();
  void clear_has_road_id();
  void set_has_toll_dir();
  void clear_has_toll_dir();
  void set_has_controlled_access_flag();
  void clear_has_controlled_access_flag();
  void set_has_complex_intersection_flag();
  void clear_has_complex_intersection_flag();
  void set_has_high_limit_cm();
  void clear_has_high_limit_cm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 start_pos_;
  ::google::protobuf::uint64 end_pos_;
  bool bridge_flag_;
  bool tunnel_flag_;
  bool urban_flag_;
  bool motorway_flag_;
  bool servicearea_flag_;
  bool ferry_flag_;
  bool controlled_access_flag_;
  bool complex_intersection_flag_;
  ::google::protobuf::uint64 road_id_;
  int toll_dir_;
  ::google::protobuf::uint32 high_limit_cm_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2froad_5fattribute_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoadAttribute

// optional uint64 start_pos = 1;
inline bool RoadAttribute::has_start_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadAttribute::set_has_start_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadAttribute::clear_has_start_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadAttribute::clear_start_pos() {
  start_pos_ = GOOGLE_ULONGLONG(0);
  clear_has_start_pos();
}
inline ::google::protobuf::uint64 RoadAttribute::start_pos() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.start_pos)
  return start_pos_;
}
inline void RoadAttribute::set_start_pos(::google::protobuf::uint64 value) {
  set_has_start_pos();
  start_pos_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.start_pos)
}

// optional uint64 end_pos = 2;
inline bool RoadAttribute::has_end_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadAttribute::set_has_end_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadAttribute::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadAttribute::clear_end_pos() {
  end_pos_ = GOOGLE_ULONGLONG(0);
  clear_has_end_pos();
}
inline ::google::protobuf::uint64 RoadAttribute::end_pos() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.end_pos)
  return end_pos_;
}
inline void RoadAttribute::set_end_pos(::google::protobuf::uint64 value) {
  set_has_end_pos();
  end_pos_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.end_pos)
}

// optional bool bridge_flag = 3;
inline bool RoadAttribute::has_bridge_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoadAttribute::set_has_bridge_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoadAttribute::clear_has_bridge_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoadAttribute::clear_bridge_flag() {
  bridge_flag_ = false;
  clear_has_bridge_flag();
}
inline bool RoadAttribute::bridge_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.bridge_flag)
  return bridge_flag_;
}
inline void RoadAttribute::set_bridge_flag(bool value) {
  set_has_bridge_flag();
  bridge_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.bridge_flag)
}

// optional bool tunnel_flag = 4;
inline bool RoadAttribute::has_tunnel_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoadAttribute::set_has_tunnel_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoadAttribute::clear_has_tunnel_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoadAttribute::clear_tunnel_flag() {
  tunnel_flag_ = false;
  clear_has_tunnel_flag();
}
inline bool RoadAttribute::tunnel_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.tunnel_flag)
  return tunnel_flag_;
}
inline void RoadAttribute::set_tunnel_flag(bool value) {
  set_has_tunnel_flag();
  tunnel_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.tunnel_flag)
}

// optional bool urban_flag = 5;
inline bool RoadAttribute::has_urban_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoadAttribute::set_has_urban_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoadAttribute::clear_has_urban_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoadAttribute::clear_urban_flag() {
  urban_flag_ = false;
  clear_has_urban_flag();
}
inline bool RoadAttribute::urban_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.urban_flag)
  return urban_flag_;
}
inline void RoadAttribute::set_urban_flag(bool value) {
  set_has_urban_flag();
  urban_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.urban_flag)
}

// optional bool motorway_flag = 6;
inline bool RoadAttribute::has_motorway_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoadAttribute::set_has_motorway_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoadAttribute::clear_has_motorway_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoadAttribute::clear_motorway_flag() {
  motorway_flag_ = false;
  clear_has_motorway_flag();
}
inline bool RoadAttribute::motorway_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.motorway_flag)
  return motorway_flag_;
}
inline void RoadAttribute::set_motorway_flag(bool value) {
  set_has_motorway_flag();
  motorway_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.motorway_flag)
}

// optional bool servicearea_flag = 7;
inline bool RoadAttribute::has_servicearea_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoadAttribute::set_has_servicearea_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoadAttribute::clear_has_servicearea_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoadAttribute::clear_servicearea_flag() {
  servicearea_flag_ = false;
  clear_has_servicearea_flag();
}
inline bool RoadAttribute::servicearea_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.servicearea_flag)
  return servicearea_flag_;
}
inline void RoadAttribute::set_servicearea_flag(bool value) {
  set_has_servicearea_flag();
  servicearea_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.servicearea_flag)
}

// optional bool ferry_flag = 8;
inline bool RoadAttribute::has_ferry_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoadAttribute::set_has_ferry_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoadAttribute::clear_has_ferry_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoadAttribute::clear_ferry_flag() {
  ferry_flag_ = false;
  clear_has_ferry_flag();
}
inline bool RoadAttribute::ferry_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.ferry_flag)
  return ferry_flag_;
}
inline void RoadAttribute::set_ferry_flag(bool value) {
  set_has_ferry_flag();
  ferry_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.ferry_flag)
}

// optional uint64 road_id = 9;
inline bool RoadAttribute::has_road_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoadAttribute::set_has_road_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoadAttribute::clear_has_road_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoadAttribute::clear_road_id() {
  road_id_ = GOOGLE_ULONGLONG(0);
  clear_has_road_id();
}
inline ::google::protobuf::uint64 RoadAttribute::road_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.road_id)
  return road_id_;
}
inline void RoadAttribute::set_road_id(::google::protobuf::uint64 value) {
  set_has_road_id();
  road_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.road_id)
}

// optional .holo.map.proto.base.RoadAttribute.TollDir toll_dir = 10;
inline bool RoadAttribute::has_toll_dir() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoadAttribute::set_has_toll_dir() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoadAttribute::clear_has_toll_dir() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoadAttribute::clear_toll_dir() {
  toll_dir_ = 0;
  clear_has_toll_dir();
}
inline ::holo::map::proto::base::RoadAttribute_TollDir RoadAttribute::toll_dir() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.toll_dir)
  return static_cast< ::holo::map::proto::base::RoadAttribute_TollDir >(toll_dir_);
}
inline void RoadAttribute::set_toll_dir(::holo::map::proto::base::RoadAttribute_TollDir value) {
  assert(::holo::map::proto::base::RoadAttribute_TollDir_IsValid(value));
  set_has_toll_dir();
  toll_dir_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.toll_dir)
}

// optional bool controlled_access_flag = 11;
inline bool RoadAttribute::has_controlled_access_flag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoadAttribute::set_has_controlled_access_flag() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoadAttribute::clear_has_controlled_access_flag() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoadAttribute::clear_controlled_access_flag() {
  controlled_access_flag_ = false;
  clear_has_controlled_access_flag();
}
inline bool RoadAttribute::controlled_access_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.controlled_access_flag)
  return controlled_access_flag_;
}
inline void RoadAttribute::set_controlled_access_flag(bool value) {
  set_has_controlled_access_flag();
  controlled_access_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.controlled_access_flag)
}

// optional bool complex_intersection_flag = 12;
inline bool RoadAttribute::has_complex_intersection_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoadAttribute::set_has_complex_intersection_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoadAttribute::clear_has_complex_intersection_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoadAttribute::clear_complex_intersection_flag() {
  complex_intersection_flag_ = false;
  clear_has_complex_intersection_flag();
}
inline bool RoadAttribute::complex_intersection_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.complex_intersection_flag)
  return complex_intersection_flag_;
}
inline void RoadAttribute::set_complex_intersection_flag(bool value) {
  set_has_complex_intersection_flag();
  complex_intersection_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.complex_intersection_flag)
}

// optional uint32 high_limit_cm = 13;
inline bool RoadAttribute::has_high_limit_cm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoadAttribute::set_has_high_limit_cm() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoadAttribute::clear_has_high_limit_cm() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoadAttribute::clear_high_limit_cm() {
  high_limit_cm_ = 0u;
  clear_has_high_limit_cm();
}
inline ::google::protobuf::uint32 RoadAttribute::high_limit_cm() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.RoadAttribute.high_limit_cm)
  return high_limit_cm_;
}
inline void RoadAttribute::set_high_limit_cm(::google::protobuf::uint32 value) {
  set_has_high_limit_cm();
  high_limit_cm_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.RoadAttribute.high_limit_cm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::base::RoadAttribute_TollDir> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::RoadAttribute_TollDir>() {
  return ::holo::map::proto::base::RoadAttribute_TollDir_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2froad_5fattribute_2eproto
