// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/header.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fheader_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fheader_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/geo_box.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2fheader_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2fheader_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2fheader_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::Header* Arena::CreateMaybeMessage<::holo::map::proto::base::Header>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

enum Header_Endianness {
  Header_Endianness_ENDIANNESS_UNDEFINED = 0,
  Header_Endianness_ENDIANNESS_LITTLE_ENDIAN = 1,
  Header_Endianness_ENDIANNESS_BIG_ENDIAN = 2
};
bool Header_Endianness_IsValid(int value);
const Header_Endianness Header_Endianness_Endianness_MIN = Header_Endianness_ENDIANNESS_UNDEFINED;
const Header_Endianness Header_Endianness_Endianness_MAX = Header_Endianness_ENDIANNESS_BIG_ENDIAN;
const int Header_Endianness_Endianness_ARRAYSIZE = Header_Endianness_Endianness_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Endianness_descriptor();
inline const ::std::string& Header_Endianness_Name(Header_Endianness value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Endianness_descriptor(), value);
}
inline bool Header_Endianness_Parse(
    const ::std::string& name, Header_Endianness* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Endianness>(
    Header_Endianness_descriptor(), name, value);
}
enum Header_CoordinateReferenceSystem {
  Header_CoordinateReferenceSystem_COORDINATE_REFERENCE_SYSTEM_UNDEFINED = 0,
  Header_CoordinateReferenceSystem_COORDINATE_REFERENCE_SYSTEM_GEOGRAPHICAL_COORDINATE_SYSTEM = 1,
  Header_CoordinateReferenceSystem_COORDINATE_REFERENCE_SYSTEM_PROJECT_COORDINATE_SYSTEM = 2
};
bool Header_CoordinateReferenceSystem_IsValid(int value);
const Header_CoordinateReferenceSystem Header_CoordinateReferenceSystem_CoordinateReferenceSystem_MIN = Header_CoordinateReferenceSystem_COORDINATE_REFERENCE_SYSTEM_UNDEFINED;
const Header_CoordinateReferenceSystem Header_CoordinateReferenceSystem_CoordinateReferenceSystem_MAX = Header_CoordinateReferenceSystem_COORDINATE_REFERENCE_SYSTEM_PROJECT_COORDINATE_SYSTEM;
const int Header_CoordinateReferenceSystem_CoordinateReferenceSystem_ARRAYSIZE = Header_CoordinateReferenceSystem_CoordinateReferenceSystem_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_CoordinateReferenceSystem_descriptor();
inline const ::std::string& Header_CoordinateReferenceSystem_Name(Header_CoordinateReferenceSystem value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_CoordinateReferenceSystem_descriptor(), value);
}
inline bool Header_CoordinateReferenceSystem_Parse(
    const ::std::string& name, Header_CoordinateReferenceSystem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_CoordinateReferenceSystem>(
    Header_CoordinateReferenceSystem_descriptor(), name, value);
}
enum Header_DataSource {
  Header_DataSource_DATA_SOURCE_UNDEFINED = 0,
  Header_DataSource_DATA_SOURCE_SHAPEFILE = 1,
  Header_DataSource_DATA_SOURCE_NAVINFO_PILOT = 2,
  Header_DataSource_DATA_SOURCE_BOTH = 3
};
bool Header_DataSource_IsValid(int value);
const Header_DataSource Header_DataSource_DataSource_MIN = Header_DataSource_DATA_SOURCE_UNDEFINED;
const Header_DataSource Header_DataSource_DataSource_MAX = Header_DataSource_DATA_SOURCE_BOTH;
const int Header_DataSource_DataSource_ARRAYSIZE = Header_DataSource_DataSource_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_DataSource_descriptor();
inline const ::std::string& Header_DataSource_Name(Header_DataSource value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_DataSource_descriptor(), value);
}
inline bool Header_DataSource_Parse(
    const ::std::string& name, Header_DataSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_DataSource>(
    Header_DataSource_descriptor(), name, value);
}
// ===================================================================

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.Header) */ {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(Header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Header* other);
  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(NULL);
  }

  Header* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Header_Endianness Endianness;
  static const Endianness ENDIANNESS_UNDEFINED =
    Header_Endianness_ENDIANNESS_UNDEFINED;
  static const Endianness ENDIANNESS_LITTLE_ENDIAN =
    Header_Endianness_ENDIANNESS_LITTLE_ENDIAN;
  static const Endianness ENDIANNESS_BIG_ENDIAN =
    Header_Endianness_ENDIANNESS_BIG_ENDIAN;
  static inline bool Endianness_IsValid(int value) {
    return Header_Endianness_IsValid(value);
  }
  static const Endianness Endianness_MIN =
    Header_Endianness_Endianness_MIN;
  static const Endianness Endianness_MAX =
    Header_Endianness_Endianness_MAX;
  static const int Endianness_ARRAYSIZE =
    Header_Endianness_Endianness_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Endianness_descriptor() {
    return Header_Endianness_descriptor();
  }
  static inline const ::std::string& Endianness_Name(Endianness value) {
    return Header_Endianness_Name(value);
  }
  static inline bool Endianness_Parse(const ::std::string& name,
      Endianness* value) {
    return Header_Endianness_Parse(name, value);
  }

  typedef Header_CoordinateReferenceSystem CoordinateReferenceSystem;
  static const CoordinateReferenceSystem COORDINATE_REFERENCE_SYSTEM_UNDEFINED =
    Header_CoordinateReferenceSystem_COORDINATE_REFERENCE_SYSTEM_UNDEFINED;
  static const CoordinateReferenceSystem COORDINATE_REFERENCE_SYSTEM_GEOGRAPHICAL_COORDINATE_SYSTEM =
    Header_CoordinateReferenceSystem_COORDINATE_REFERENCE_SYSTEM_GEOGRAPHICAL_COORDINATE_SYSTEM;
  static const CoordinateReferenceSystem COORDINATE_REFERENCE_SYSTEM_PROJECT_COORDINATE_SYSTEM =
    Header_CoordinateReferenceSystem_COORDINATE_REFERENCE_SYSTEM_PROJECT_COORDINATE_SYSTEM;
  static inline bool CoordinateReferenceSystem_IsValid(int value) {
    return Header_CoordinateReferenceSystem_IsValid(value);
  }
  static const CoordinateReferenceSystem CoordinateReferenceSystem_MIN =
    Header_CoordinateReferenceSystem_CoordinateReferenceSystem_MIN;
  static const CoordinateReferenceSystem CoordinateReferenceSystem_MAX =
    Header_CoordinateReferenceSystem_CoordinateReferenceSystem_MAX;
  static const int CoordinateReferenceSystem_ARRAYSIZE =
    Header_CoordinateReferenceSystem_CoordinateReferenceSystem_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CoordinateReferenceSystem_descriptor() {
    return Header_CoordinateReferenceSystem_descriptor();
  }
  static inline const ::std::string& CoordinateReferenceSystem_Name(CoordinateReferenceSystem value) {
    return Header_CoordinateReferenceSystem_Name(value);
  }
  static inline bool CoordinateReferenceSystem_Parse(const ::std::string& name,
      CoordinateReferenceSystem* value) {
    return Header_CoordinateReferenceSystem_Parse(name, value);
  }

  typedef Header_DataSource DataSource;
  static const DataSource DATA_SOURCE_UNDEFINED =
    Header_DataSource_DATA_SOURCE_UNDEFINED;
  static const DataSource DATA_SOURCE_SHAPEFILE =
    Header_DataSource_DATA_SOURCE_SHAPEFILE;
  static const DataSource DATA_SOURCE_NAVINFO_PILOT =
    Header_DataSource_DATA_SOURCE_NAVINFO_PILOT;
  static const DataSource DATA_SOURCE_BOTH =
    Header_DataSource_DATA_SOURCE_BOTH;
  static inline bool DataSource_IsValid(int value) {
    return Header_DataSource_IsValid(value);
  }
  static const DataSource DataSource_MIN =
    Header_DataSource_DataSource_MIN;
  static const DataSource DataSource_MAX =
    Header_DataSource_DataSource_MAX;
  static const int DataSource_ARRAYSIZE =
    Header_DataSource_DataSource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataSource_descriptor() {
    return Header_DataSource_descriptor();
  }
  static inline const ::std::string& DataSource_Name(DataSource value) {
    return Header_DataSource_Name(value);
  }
  static inline bool DataSource_Parse(const ::std::string& name,
      DataSource* value) {
    return Header_DataSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 tile_ids = 8 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 8;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string date = 3;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 3;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // optional uint64 version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // optional .holo.map.proto.base.Header.Endianness endianness = 4;
  bool has_endianness() const;
  void clear_endianness();
  static const int kEndiannessFieldNumber = 4;
  ::holo::map::proto::base::Header_Endianness endianness() const;
  void set_endianness(::holo::map::proto::base::Header_Endianness value);

  // optional .holo.map.proto.base.Header.CoordinateReferenceSystem coordinate_reference_system = 5;
  bool has_coordinate_reference_system() const;
  void clear_coordinate_reference_system();
  static const int kCoordinateReferenceSystemFieldNumber = 5;
  ::holo::map::proto::base::Header_CoordinateReferenceSystem coordinate_reference_system() const;
  void set_coordinate_reference_system(::holo::map::proto::base::Header_CoordinateReferenceSystem value);

  // optional .holo.map.proto.base.Header.DataSource data_source = 6;
  bool has_data_source() const;
  void clear_data_source();
  static const int kDataSourceFieldNumber = 6;
  ::holo::map::proto::base::Header_DataSource data_source() const;
  void set_data_source(::holo::map::proto::base::Header_DataSource value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.Header)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_version();
  void clear_has_version();
  void set_has_date();
  void clear_has_date();
  void set_has_endianness();
  void clear_has_endianness();
  void set_has_coordinate_reference_system();
  void clear_has_coordinate_reference_system();
  void set_has_data_source();
  void clear_has_data_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::uint64 version_;
  int endianness_;
  int coordinate_reference_system_;
  int data_source_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2fheader_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// optional string name = 1;
inline bool Header::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Header::name() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Header.name)
  return name_.GetNoArena();
}
inline void Header::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Header.name)
}
#if LANG_CXX11
inline void Header::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.map.proto.base.Header.name)
}
#endif
inline void Header::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.map.proto.base.Header.name)
}
inline void Header::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.map.proto.base.Header.name)
}
inline ::std::string* Header::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Header.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_name() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.Header.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.Header.name)
}

// optional uint64 version = 2;
inline bool Header::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
  clear_has_version();
}
inline ::google::protobuf::uint64 Header::version() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Header.version)
  return version_;
}
inline void Header::set_version(::google::protobuf::uint64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Header.version)
}

// optional string date = 3;
inline bool Header::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
inline const ::std::string& Header::date() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Header.date)
  return date_.GetNoArena();
}
inline void Header::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Header.date)
}
#if LANG_CXX11
inline void Header::set_date(::std::string&& value) {
  set_has_date();
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.map.proto.base.Header.date)
}
#endif
inline void Header::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.map.proto.base.Header.date)
}
inline void Header::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.map.proto.base.Header.date)
}
inline ::std::string* Header::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Header.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_date() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.Header.date)
  if (!has_date()) {
    return NULL;
  }
  clear_has_date();
  return date_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.Header.date)
}

// optional .holo.map.proto.base.Header.Endianness endianness = 4;
inline bool Header::has_endianness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_endianness() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_endianness() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_endianness() {
  endianness_ = 0;
  clear_has_endianness();
}
inline ::holo::map::proto::base::Header_Endianness Header::endianness() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Header.endianness)
  return static_cast< ::holo::map::proto::base::Header_Endianness >(endianness_);
}
inline void Header::set_endianness(::holo::map::proto::base::Header_Endianness value) {
  assert(::holo::map::proto::base::Header_Endianness_IsValid(value));
  set_has_endianness();
  endianness_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Header.endianness)
}

// optional .holo.map.proto.base.Header.CoordinateReferenceSystem coordinate_reference_system = 5;
inline bool Header::has_coordinate_reference_system() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_coordinate_reference_system() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_coordinate_reference_system() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_coordinate_reference_system() {
  coordinate_reference_system_ = 0;
  clear_has_coordinate_reference_system();
}
inline ::holo::map::proto::base::Header_CoordinateReferenceSystem Header::coordinate_reference_system() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Header.coordinate_reference_system)
  return static_cast< ::holo::map::proto::base::Header_CoordinateReferenceSystem >(coordinate_reference_system_);
}
inline void Header::set_coordinate_reference_system(::holo::map::proto::base::Header_CoordinateReferenceSystem value) {
  assert(::holo::map::proto::base::Header_CoordinateReferenceSystem_IsValid(value));
  set_has_coordinate_reference_system();
  coordinate_reference_system_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Header.coordinate_reference_system)
}

// optional .holo.map.proto.base.Header.DataSource data_source = 6;
inline bool Header::has_data_source() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Header::set_has_data_source() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Header::clear_has_data_source() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Header::clear_data_source() {
  data_source_ = 0;
  clear_has_data_source();
}
inline ::holo::map::proto::base::Header_DataSource Header::data_source() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Header.data_source)
  return static_cast< ::holo::map::proto::base::Header_DataSource >(data_source_);
}
inline void Header::set_data_source(::holo::map::proto::base::Header_DataSource value) {
  assert(::holo::map::proto::base::Header_DataSource_IsValid(value));
  set_has_data_source();
  data_source_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Header.data_source)
}

// repeated uint64 tile_ids = 8 [packed = true];
inline int Header::tile_ids_size() const {
  return tile_ids_.size();
}
inline void Header::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 Header::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Header.tile_ids)
  return tile_ids_.Get(index);
}
inline void Header::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Header.tile_ids)
}
inline void Header::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Header.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Header::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Header.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Header::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Header.tile_ids)
  return &tile_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::base::Header_Endianness> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Header_Endianness>() {
  return ::holo::map::proto::base::Header_Endianness_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::Header_CoordinateReferenceSystem> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Header_CoordinateReferenceSystem>() {
  return ::holo::map::proto::base::Header_CoordinateReferenceSystem_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::Header_DataSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Header_DataSource>() {
  return ::holo::map::proto::base::Header_DataSource_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fheader_2eproto
