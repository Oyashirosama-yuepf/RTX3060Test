// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/intersection.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fintersection_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fintersection_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/connection_v2.pb.h"
#include "holo/map/proto/common/geo_polygon.pb.h"
#include "holo/map/proto/common/coordinate.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2fintersection_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2fintersection_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2fintersection_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class Intersection;
class IntersectionDefaultTypeInternal;
extern IntersectionDefaultTypeInternal _Intersection_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::Intersection* Arena::CreateMaybeMessage<::holo::map::proto::base::Intersection>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

enum Intersection_Type {
  Intersection_Type_TYPE_UNDEFINED = 0,
  Intersection_Type_TYPE_CROSSROAD = 1,
  Intersection_Type_TYPE_T_JUNCTION = 2,
  Intersection_Type_TYPE_Y_JUNCTION = 3,
  Intersection_Type_TYPE_MULTI_FORK_JUNCTION = 4,
  Intersection_Type_TYPE_ROUNDABOUT = 5,
  Intersection_Type_TYPE_RESERVE_1 = 250,
  Intersection_Type_TYPE_RESERVE_2 = 251,
  Intersection_Type_TYPE_RESERVE_3 = 252,
  Intersection_Type_TYPE_RESERVE_4 = 253,
  Intersection_Type_TYPE_RESERVE_5 = 254,
  Intersection_Type_TYPE_OTHERS = 255
};
bool Intersection_Type_IsValid(int value);
const Intersection_Type Intersection_Type_Type_MIN = Intersection_Type_TYPE_UNDEFINED;
const Intersection_Type Intersection_Type_Type_MAX = Intersection_Type_TYPE_OTHERS;
const int Intersection_Type_Type_ARRAYSIZE = Intersection_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Intersection_Type_descriptor();
inline const ::std::string& Intersection_Type_Name(Intersection_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Intersection_Type_descriptor(), value);
}
inline bool Intersection_Type_Parse(
    const ::std::string& name, Intersection_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Intersection_Type>(
    Intersection_Type_descriptor(), name, value);
}
// ===================================================================

class Intersection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.Intersection) */ {
 public:
  Intersection();
  virtual ~Intersection();

  Intersection(const Intersection& from);

  inline Intersection& operator=(const Intersection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Intersection(Intersection&& from) noexcept
    : Intersection() {
    *this = ::std::move(from);
  }

  inline Intersection& operator=(Intersection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Intersection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Intersection* internal_default_instance() {
    return reinterpret_cast<const Intersection*>(
               &_Intersection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Intersection* other);
  friend void swap(Intersection& a, Intersection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Intersection* New() const final {
    return CreateMaybeMessage<Intersection>(NULL);
  }

  Intersection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Intersection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Intersection& from);
  void MergeFrom(const Intersection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Intersection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Intersection_Type Type;
  static const Type TYPE_UNDEFINED =
    Intersection_Type_TYPE_UNDEFINED;
  static const Type TYPE_CROSSROAD =
    Intersection_Type_TYPE_CROSSROAD;
  static const Type TYPE_T_JUNCTION =
    Intersection_Type_TYPE_T_JUNCTION;
  static const Type TYPE_Y_JUNCTION =
    Intersection_Type_TYPE_Y_JUNCTION;
  static const Type TYPE_MULTI_FORK_JUNCTION =
    Intersection_Type_TYPE_MULTI_FORK_JUNCTION;
  static const Type TYPE_ROUNDABOUT =
    Intersection_Type_TYPE_ROUNDABOUT;
  static const Type TYPE_RESERVE_1 =
    Intersection_Type_TYPE_RESERVE_1;
  static const Type TYPE_RESERVE_2 =
    Intersection_Type_TYPE_RESERVE_2;
  static const Type TYPE_RESERVE_3 =
    Intersection_Type_TYPE_RESERVE_3;
  static const Type TYPE_RESERVE_4 =
    Intersection_Type_TYPE_RESERVE_4;
  static const Type TYPE_RESERVE_5 =
    Intersection_Type_TYPE_RESERVE_5;
  static const Type TYPE_OTHERS =
    Intersection_Type_TYPE_OTHERS;
  static inline bool Type_IsValid(int value) {
    return Intersection_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Intersection_Type_Type_MIN;
  static const Type Type_MAX =
    Intersection_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Intersection_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Intersection_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Intersection_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Intersection_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .holo.map.proto.common.ConnectionV2 lane_connections = 11;
  int lane_connections_size() const;
  void clear_lane_connections();
  static const int kLaneConnectionsFieldNumber = 11;
  ::holo::map::proto::common::ConnectionV2* mutable_lane_connections(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::ConnectionV2 >*
      mutable_lane_connections();
  const ::holo::map::proto::common::ConnectionV2& lane_connections(int index) const;
  ::holo::map::proto::common::ConnectionV2* add_lane_connections();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::ConnectionV2 >&
      lane_connections() const;

  // repeated .holo.map.proto.common.ConnectionV2 link_connections = 12;
  int link_connections_size() const;
  void clear_link_connections();
  static const int kLinkConnectionsFieldNumber = 12;
  ::holo::map::proto::common::ConnectionV2* mutable_link_connections(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::ConnectionV2 >*
      mutable_link_connections();
  const ::holo::map::proto::common::ConnectionV2& link_connections(int index) const;
  ::holo::map::proto::common::ConnectionV2* add_link_connections();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::ConnectionV2 >&
      link_connections() const;

  // repeated uint64 tile_ids = 30 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 30;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // repeated uint64 associated_stop_lines = 40 [packed = true];
  int associated_stop_lines_size() const;
  void clear_associated_stop_lines();
  static const int kAssociatedStopLinesFieldNumber = 40;
  ::google::protobuf::uint64 associated_stop_lines(int index) const;
  void set_associated_stop_lines(int index, ::google::protobuf::uint64 value);
  void add_associated_stop_lines(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_stop_lines() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_stop_lines();

  // repeated uint64 associated_traffic_lights = 41 [packed = true];
  int associated_traffic_lights_size() const;
  void clear_associated_traffic_lights();
  static const int kAssociatedTrafficLightsFieldNumber = 41;
  ::google::protobuf::uint64 associated_traffic_lights(int index) const;
  void set_associated_traffic_lights(int index, ::google::protobuf::uint64 value);
  void add_associated_traffic_lights(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_traffic_lights() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_traffic_lights();

  // repeated uint64 associated_safe_islands = 42 [packed = true];
  int associated_safe_islands_size() const;
  void clear_associated_safe_islands();
  static const int kAssociatedSafeIslandsFieldNumber = 42;
  ::google::protobuf::uint64 associated_safe_islands(int index) const;
  void set_associated_safe_islands(int index, ::google::protobuf::uint64 value);
  void add_associated_safe_islands(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_safe_islands() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_safe_islands();

  // repeated uint64 associated_pedestrian_crosswalk = 43 [packed = true];
  int associated_pedestrian_crosswalk_size() const;
  void clear_associated_pedestrian_crosswalk();
  static const int kAssociatedPedestrianCrosswalkFieldNumber = 43;
  ::google::protobuf::uint64 associated_pedestrian_crosswalk(int index) const;
  void set_associated_pedestrian_crosswalk(int index, ::google::protobuf::uint64 value);
  void add_associated_pedestrian_crosswalk(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_pedestrian_crosswalk() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_pedestrian_crosswalk();

  // repeated uint64 associated_parking_space = 44 [packed = true];
  int associated_parking_space_size() const;
  void clear_associated_parking_space();
  static const int kAssociatedParkingSpaceFieldNumber = 44;
  ::google::protobuf::uint64 associated_parking_space(int index) const;
  void set_associated_parking_space(int index, ::google::protobuf::uint64 value);
  void add_associated_parking_space(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_parking_space() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_parking_space();

  // optional .holo.map.proto.common.GeoPolygon geometry_points = 21;
  bool has_geometry_points() const;
  void clear_geometry_points();
  static const int kGeometryPointsFieldNumber = 21;
  private:
  const ::holo::map::proto::common::GeoPolygon& _internal_geometry_points() const;
  public:
  const ::holo::map::proto::common::GeoPolygon& geometry_points() const;
  ::holo::map::proto::common::GeoPolygon* release_geometry_points();
  ::holo::map::proto::common::GeoPolygon* mutable_geometry_points();
  void set_allocated_geometry_points(::holo::map::proto::common::GeoPolygon* geometry_points);

  // optional .holo.map.proto.common.Coordinate coordinate = 22;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 22;
  private:
  const ::holo::map::proto::common::Coordinate& _internal_coordinate() const;
  public:
  const ::holo::map::proto::common::Coordinate& coordinate() const;
  ::holo::map::proto::common::Coordinate* release_coordinate();
  ::holo::map::proto::common::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate);

  // optional uint64 intersection_id = 1;
  bool has_intersection_id() const;
  void clear_intersection_id();
  static const int kIntersectionIdFieldNumber = 1;
  ::google::protobuf::uint64 intersection_id() const;
  void set_intersection_id(::google::protobuf::uint64 value);

  // optional bool has_geometry = 2;
  bool has_has_geometry() const;
  void clear_has_geometry();
  static const int kHasGeometryFieldNumber = 2;
  bool has_geometry() const;
  void set_has_geometry(bool value);

  // optional .holo.map.proto.base.Intersection.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::holo::map::proto::base::Intersection_Type type() const;
  void set_type(::holo::map::proto::base::Intersection_Type value);

  // optional uint64 intersection_group_id = 4;
  bool has_intersection_group_id() const;
  void clear_intersection_group_id();
  static const int kIntersectionGroupIdFieldNumber = 4;
  ::google::protobuf::uint64 intersection_group_id() const;
  void set_intersection_group_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.Intersection)
 private:
  void set_has_intersection_id();
  void clear_has_intersection_id();
  void set_has_has_geometry();
  void clear_has_has_geometry();
  void set_has_type();
  void clear_has_type();
  void set_has_intersection_group_id();
  void clear_has_intersection_group_id();
  void set_has_geometry_points();
  void clear_has_geometry_points();
  void set_has_coordinate();
  void clear_has_coordinate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::ConnectionV2 > lane_connections_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::ConnectionV2 > link_connections_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_stop_lines_;
  mutable int _associated_stop_lines_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_traffic_lights_;
  mutable int _associated_traffic_lights_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_safe_islands_;
  mutable int _associated_safe_islands_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_pedestrian_crosswalk_;
  mutable int _associated_pedestrian_crosswalk_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_parking_space_;
  mutable int _associated_parking_space_cached_byte_size_;
  ::holo::map::proto::common::GeoPolygon* geometry_points_;
  ::holo::map::proto::common::Coordinate* coordinate_;
  ::google::protobuf::uint64 intersection_id_;
  bool has_geometry_;
  int type_;
  ::google::protobuf::uint64 intersection_group_id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2fintersection_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Intersection

// optional uint64 intersection_id = 1;
inline bool Intersection::has_intersection_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Intersection::set_has_intersection_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Intersection::clear_has_intersection_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Intersection::clear_intersection_id() {
  intersection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_intersection_id();
}
inline ::google::protobuf::uint64 Intersection::intersection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.intersection_id)
  return intersection_id_;
}
inline void Intersection::set_intersection_id(::google::protobuf::uint64 value) {
  set_has_intersection_id();
  intersection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Intersection.intersection_id)
}

// optional bool has_geometry = 2;
inline bool Intersection::has_has_geometry() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Intersection::set_has_has_geometry() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Intersection::clear_has_has_geometry() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Intersection::clear_has_geometry() {
  has_geometry_ = false;
  clear_has_has_geometry();
}
inline bool Intersection::has_geometry() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.has_geometry)
  return has_geometry_;
}
inline void Intersection::set_has_geometry(bool value) {
  set_has_has_geometry();
  has_geometry_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Intersection.has_geometry)
}

// optional .holo.map.proto.base.Intersection.Type type = 3;
inline bool Intersection::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Intersection::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Intersection::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Intersection::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::holo::map::proto::base::Intersection_Type Intersection::type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.type)
  return static_cast< ::holo::map::proto::base::Intersection_Type >(type_);
}
inline void Intersection::set_type(::holo::map::proto::base::Intersection_Type value) {
  assert(::holo::map::proto::base::Intersection_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Intersection.type)
}

// optional uint64 intersection_group_id = 4;
inline bool Intersection::has_intersection_group_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Intersection::set_has_intersection_group_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Intersection::clear_has_intersection_group_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Intersection::clear_intersection_group_id() {
  intersection_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_intersection_group_id();
}
inline ::google::protobuf::uint64 Intersection::intersection_group_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.intersection_group_id)
  return intersection_group_id_;
}
inline void Intersection::set_intersection_group_id(::google::protobuf::uint64 value) {
  set_has_intersection_group_id();
  intersection_group_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Intersection.intersection_group_id)
}

// repeated .holo.map.proto.common.ConnectionV2 lane_connections = 11;
inline int Intersection::lane_connections_size() const {
  return lane_connections_.size();
}
inline ::holo::map::proto::common::ConnectionV2* Intersection::mutable_lane_connections(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Intersection.lane_connections)
  return lane_connections_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::ConnectionV2 >*
Intersection::mutable_lane_connections() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Intersection.lane_connections)
  return &lane_connections_;
}
inline const ::holo::map::proto::common::ConnectionV2& Intersection::lane_connections(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.lane_connections)
  return lane_connections_.Get(index);
}
inline ::holo::map::proto::common::ConnectionV2* Intersection::add_lane_connections() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Intersection.lane_connections)
  return lane_connections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::ConnectionV2 >&
Intersection::lane_connections() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Intersection.lane_connections)
  return lane_connections_;
}

// repeated .holo.map.proto.common.ConnectionV2 link_connections = 12;
inline int Intersection::link_connections_size() const {
  return link_connections_.size();
}
inline ::holo::map::proto::common::ConnectionV2* Intersection::mutable_link_connections(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Intersection.link_connections)
  return link_connections_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::ConnectionV2 >*
Intersection::mutable_link_connections() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Intersection.link_connections)
  return &link_connections_;
}
inline const ::holo::map::proto::common::ConnectionV2& Intersection::link_connections(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.link_connections)
  return link_connections_.Get(index);
}
inline ::holo::map::proto::common::ConnectionV2* Intersection::add_link_connections() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Intersection.link_connections)
  return link_connections_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::ConnectionV2 >&
Intersection::link_connections() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Intersection.link_connections)
  return link_connections_;
}

// optional .holo.map.proto.common.GeoPolygon geometry_points = 21;
inline bool Intersection::has_geometry_points() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Intersection::set_has_geometry_points() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Intersection::clear_has_geometry_points() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::GeoPolygon& Intersection::_internal_geometry_points() const {
  return *geometry_points_;
}
inline const ::holo::map::proto::common::GeoPolygon& Intersection::geometry_points() const {
  const ::holo::map::proto::common::GeoPolygon* p = geometry_points_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.geometry_points)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPolygon*>(
      &::holo::map::proto::common::_GeoPolygon_default_instance_);
}
inline ::holo::map::proto::common::GeoPolygon* Intersection::release_geometry_points() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.Intersection.geometry_points)
  clear_has_geometry_points();
  ::holo::map::proto::common::GeoPolygon* temp = geometry_points_;
  geometry_points_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPolygon* Intersection::mutable_geometry_points() {
  set_has_geometry_points();
  if (geometry_points_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPolygon>(GetArenaNoVirtual());
    geometry_points_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Intersection.geometry_points)
  return geometry_points_;
}
inline void Intersection::set_allocated_geometry_points(::holo::map::proto::common::GeoPolygon* geometry_points) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geometry_points_);
  }
  if (geometry_points) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geometry_points = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geometry_points, submessage_arena);
    }
    set_has_geometry_points();
  } else {
    clear_has_geometry_points();
  }
  geometry_points_ = geometry_points;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.Intersection.geometry_points)
}

// optional .holo.map.proto.common.Coordinate coordinate = 22;
inline bool Intersection::has_coordinate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Intersection::set_has_coordinate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Intersection::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::Coordinate& Intersection::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::holo::map::proto::common::Coordinate& Intersection::coordinate() const {
  const ::holo::map::proto::common::Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::Coordinate*>(
      &::holo::map::proto::common::_Coordinate_default_instance_);
}
inline ::holo::map::proto::common::Coordinate* Intersection::release_coordinate() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.Intersection.coordinate)
  clear_has_coordinate();
  ::holo::map::proto::common::Coordinate* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::Coordinate* Intersection::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Intersection.coordinate)
  return coordinate_;
}
inline void Intersection::set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.Intersection.coordinate)
}

// repeated uint64 tile_ids = 30 [packed = true];
inline int Intersection::tile_ids_size() const {
  return tile_ids_.size();
}
inline void Intersection::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 Intersection::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.tile_ids)
  return tile_ids_.Get(index);
}
inline void Intersection::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Intersection.tile_ids)
}
inline void Intersection::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Intersection.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Intersection::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Intersection.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Intersection::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Intersection.tile_ids)
  return &tile_ids_;
}

// repeated uint64 associated_stop_lines = 40 [packed = true];
inline int Intersection::associated_stop_lines_size() const {
  return associated_stop_lines_.size();
}
inline void Intersection::clear_associated_stop_lines() {
  associated_stop_lines_.Clear();
}
inline ::google::protobuf::uint64 Intersection::associated_stop_lines(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.associated_stop_lines)
  return associated_stop_lines_.Get(index);
}
inline void Intersection::set_associated_stop_lines(int index, ::google::protobuf::uint64 value) {
  associated_stop_lines_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Intersection.associated_stop_lines)
}
inline void Intersection::add_associated_stop_lines(::google::protobuf::uint64 value) {
  associated_stop_lines_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Intersection.associated_stop_lines)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Intersection::associated_stop_lines() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Intersection.associated_stop_lines)
  return associated_stop_lines_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Intersection::mutable_associated_stop_lines() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Intersection.associated_stop_lines)
  return &associated_stop_lines_;
}

// repeated uint64 associated_traffic_lights = 41 [packed = true];
inline int Intersection::associated_traffic_lights_size() const {
  return associated_traffic_lights_.size();
}
inline void Intersection::clear_associated_traffic_lights() {
  associated_traffic_lights_.Clear();
}
inline ::google::protobuf::uint64 Intersection::associated_traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.associated_traffic_lights)
  return associated_traffic_lights_.Get(index);
}
inline void Intersection::set_associated_traffic_lights(int index, ::google::protobuf::uint64 value) {
  associated_traffic_lights_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Intersection.associated_traffic_lights)
}
inline void Intersection::add_associated_traffic_lights(::google::protobuf::uint64 value) {
  associated_traffic_lights_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Intersection.associated_traffic_lights)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Intersection::associated_traffic_lights() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Intersection.associated_traffic_lights)
  return associated_traffic_lights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Intersection::mutable_associated_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Intersection.associated_traffic_lights)
  return &associated_traffic_lights_;
}

// repeated uint64 associated_safe_islands = 42 [packed = true];
inline int Intersection::associated_safe_islands_size() const {
  return associated_safe_islands_.size();
}
inline void Intersection::clear_associated_safe_islands() {
  associated_safe_islands_.Clear();
}
inline ::google::protobuf::uint64 Intersection::associated_safe_islands(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.associated_safe_islands)
  return associated_safe_islands_.Get(index);
}
inline void Intersection::set_associated_safe_islands(int index, ::google::protobuf::uint64 value) {
  associated_safe_islands_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Intersection.associated_safe_islands)
}
inline void Intersection::add_associated_safe_islands(::google::protobuf::uint64 value) {
  associated_safe_islands_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Intersection.associated_safe_islands)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Intersection::associated_safe_islands() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Intersection.associated_safe_islands)
  return associated_safe_islands_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Intersection::mutable_associated_safe_islands() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Intersection.associated_safe_islands)
  return &associated_safe_islands_;
}

// repeated uint64 associated_pedestrian_crosswalk = 43 [packed = true];
inline int Intersection::associated_pedestrian_crosswalk_size() const {
  return associated_pedestrian_crosswalk_.size();
}
inline void Intersection::clear_associated_pedestrian_crosswalk() {
  associated_pedestrian_crosswalk_.Clear();
}
inline ::google::protobuf::uint64 Intersection::associated_pedestrian_crosswalk(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.associated_pedestrian_crosswalk)
  return associated_pedestrian_crosswalk_.Get(index);
}
inline void Intersection::set_associated_pedestrian_crosswalk(int index, ::google::protobuf::uint64 value) {
  associated_pedestrian_crosswalk_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Intersection.associated_pedestrian_crosswalk)
}
inline void Intersection::add_associated_pedestrian_crosswalk(::google::protobuf::uint64 value) {
  associated_pedestrian_crosswalk_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Intersection.associated_pedestrian_crosswalk)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Intersection::associated_pedestrian_crosswalk() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Intersection.associated_pedestrian_crosswalk)
  return associated_pedestrian_crosswalk_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Intersection::mutable_associated_pedestrian_crosswalk() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Intersection.associated_pedestrian_crosswalk)
  return &associated_pedestrian_crosswalk_;
}

// repeated uint64 associated_parking_space = 44 [packed = true];
inline int Intersection::associated_parking_space_size() const {
  return associated_parking_space_.size();
}
inline void Intersection::clear_associated_parking_space() {
  associated_parking_space_.Clear();
}
inline ::google::protobuf::uint64 Intersection::associated_parking_space(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Intersection.associated_parking_space)
  return associated_parking_space_.Get(index);
}
inline void Intersection::set_associated_parking_space(int index, ::google::protobuf::uint64 value) {
  associated_parking_space_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Intersection.associated_parking_space)
}
inline void Intersection::add_associated_parking_space(::google::protobuf::uint64 value) {
  associated_parking_space_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Intersection.associated_parking_space)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Intersection::associated_parking_space() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Intersection.associated_parking_space)
  return associated_parking_space_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Intersection::mutable_associated_parking_space() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Intersection.associated_parking_space)
  return &associated_parking_space_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::base::Intersection_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Intersection_Type>() {
  return ::holo::map::proto::base::Intersection_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fintersection_2eproto
