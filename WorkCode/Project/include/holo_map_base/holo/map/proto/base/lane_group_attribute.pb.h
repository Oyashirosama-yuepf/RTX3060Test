// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/lane_group_attribute.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2flane_5fgroup_5fattribute_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2flane_5fgroup_5fattribute_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/interval_float64.pb.h"
#include "holo/map/proto/common/interval_type.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2flane_5fgroup_5fattribute_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2flane_5fgroup_5fattribute_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2flane_5fgroup_5fattribute_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class LaneGroupAttribute;
class LaneGroupAttributeDefaultTypeInternal;
extern LaneGroupAttributeDefaultTypeInternal _LaneGroupAttribute_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::LaneGroupAttribute* Arena::CreateMaybeMessage<::holo::map::proto::base::LaneGroupAttribute>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

enum LaneGroupAttribute_Type {
  LaneGroupAttribute_Type_TYPE_UNKNOWN = 0,
  LaneGroupAttribute_Type_TYPE_TUNNEL = 1,
  LaneGroupAttribute_Type_TYPE_BRIDGE = 2,
  LaneGroupAttribute_Type_TYPE_VIADUCT = 3,
  LaneGroupAttribute_Type_TYPE_TOLL_BOOTH = 4,
  LaneGroupAttribute_Type_TYPE_TOLL_ENTRY = 5,
  LaneGroupAttribute_Type_TYPE_TOLL_EXIT = 6,
  LaneGroupAttribute_Type_TYPE_BREAK_UP = 7,
  LaneGroupAttribute_Type_TYPE_RESERVED_1 = 250,
  LaneGroupAttribute_Type_TYPE_RESERVED_2 = 251,
  LaneGroupAttribute_Type_TYPE_RESERVED_3 = 252,
  LaneGroupAttribute_Type_TYPE_RESERVED_4 = 253,
  LaneGroupAttribute_Type_TYPE_RESERVED_5 = 254,
  LaneGroupAttribute_Type_TYPE_OTHERS = 255
};
bool LaneGroupAttribute_Type_IsValid(int value);
const LaneGroupAttribute_Type LaneGroupAttribute_Type_Type_MIN = LaneGroupAttribute_Type_TYPE_UNKNOWN;
const LaneGroupAttribute_Type LaneGroupAttribute_Type_Type_MAX = LaneGroupAttribute_Type_TYPE_OTHERS;
const int LaneGroupAttribute_Type_Type_ARRAYSIZE = LaneGroupAttribute_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneGroupAttribute_Type_descriptor();
inline const ::std::string& LaneGroupAttribute_Type_Name(LaneGroupAttribute_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneGroupAttribute_Type_descriptor(), value);
}
inline bool LaneGroupAttribute_Type_Parse(
    const ::std::string& name, LaneGroupAttribute_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneGroupAttribute_Type>(
    LaneGroupAttribute_Type_descriptor(), name, value);
}
// ===================================================================

class LaneGroupAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.LaneGroupAttribute) */ {
 public:
  LaneGroupAttribute();
  virtual ~LaneGroupAttribute();

  LaneGroupAttribute(const LaneGroupAttribute& from);

  inline LaneGroupAttribute& operator=(const LaneGroupAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LaneGroupAttribute(LaneGroupAttribute&& from) noexcept
    : LaneGroupAttribute() {
    *this = ::std::move(from);
  }

  inline LaneGroupAttribute& operator=(LaneGroupAttribute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneGroupAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneGroupAttribute* internal_default_instance() {
    return reinterpret_cast<const LaneGroupAttribute*>(
               &_LaneGroupAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LaneGroupAttribute* other);
  friend void swap(LaneGroupAttribute& a, LaneGroupAttribute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LaneGroupAttribute* New() const final {
    return CreateMaybeMessage<LaneGroupAttribute>(NULL);
  }

  LaneGroupAttribute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LaneGroupAttribute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LaneGroupAttribute& from);
  void MergeFrom(const LaneGroupAttribute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneGroupAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LaneGroupAttribute_Type Type;
  static const Type TYPE_UNKNOWN =
    LaneGroupAttribute_Type_TYPE_UNKNOWN;
  static const Type TYPE_TUNNEL =
    LaneGroupAttribute_Type_TYPE_TUNNEL;
  static const Type TYPE_BRIDGE =
    LaneGroupAttribute_Type_TYPE_BRIDGE;
  static const Type TYPE_VIADUCT =
    LaneGroupAttribute_Type_TYPE_VIADUCT;
  static const Type TYPE_TOLL_BOOTH =
    LaneGroupAttribute_Type_TYPE_TOLL_BOOTH;
  static const Type TYPE_TOLL_ENTRY =
    LaneGroupAttribute_Type_TYPE_TOLL_ENTRY;
  static const Type TYPE_TOLL_EXIT =
    LaneGroupAttribute_Type_TYPE_TOLL_EXIT;
  static const Type TYPE_BREAK_UP =
    LaneGroupAttribute_Type_TYPE_BREAK_UP;
  static const Type TYPE_RESERVED_1 =
    LaneGroupAttribute_Type_TYPE_RESERVED_1;
  static const Type TYPE_RESERVED_2 =
    LaneGroupAttribute_Type_TYPE_RESERVED_2;
  static const Type TYPE_RESERVED_3 =
    LaneGroupAttribute_Type_TYPE_RESERVED_3;
  static const Type TYPE_RESERVED_4 =
    LaneGroupAttribute_Type_TYPE_RESERVED_4;
  static const Type TYPE_RESERVED_5 =
    LaneGroupAttribute_Type_TYPE_RESERVED_5;
  static const Type TYPE_OTHERS =
    LaneGroupAttribute_Type_TYPE_OTHERS;
  static inline bool Type_IsValid(int value) {
    return LaneGroupAttribute_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LaneGroupAttribute_Type_Type_MIN;
  static const Type Type_MAX =
    LaneGroupAttribute_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LaneGroupAttribute_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LaneGroupAttribute_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LaneGroupAttribute_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LaneGroupAttribute_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .holo.map.proto.common.IntervalType offset_type = 2;
  bool has_offset_type() const;
  void clear_offset_type();
  static const int kOffsetTypeFieldNumber = 2;
  private:
  const ::holo::map::proto::common::IntervalType& _internal_offset_type() const;
  public:
  const ::holo::map::proto::common::IntervalType& offset_type() const;
  ::holo::map::proto::common::IntervalType* release_offset_type();
  ::holo::map::proto::common::IntervalType* mutable_offset_type();
  void set_allocated_offset_type(::holo::map::proto::common::IntervalType* offset_type);

  // optional .holo.map.proto.common.IntervalFloat64 offset = 3;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  private:
  const ::holo::map::proto::common::IntervalFloat64& _internal_offset() const;
  public:
  const ::holo::map::proto::common::IntervalFloat64& offset() const;
  ::holo::map::proto::common::IntervalFloat64* release_offset();
  ::holo::map::proto::common::IntervalFloat64* mutable_offset();
  void set_allocated_offset(::holo::map::proto::common::IntervalFloat64* offset);

  // optional .holo.map.proto.base.LaneGroupAttribute.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::holo::map::proto::base::LaneGroupAttribute_Type type() const;
  void set_type(::holo::map::proto::base::LaneGroupAttribute_Type value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.LaneGroupAttribute)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_offset_type();
  void clear_has_offset_type();
  void set_has_offset();
  void clear_has_offset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::holo::map::proto::common::IntervalType* offset_type_;
  ::holo::map::proto::common::IntervalFloat64* offset_;
  int type_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2flane_5fgroup_5fattribute_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaneGroupAttribute

// optional .holo.map.proto.base.LaneGroupAttribute.Type type = 1;
inline bool LaneGroupAttribute::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneGroupAttribute::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneGroupAttribute::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneGroupAttribute::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::holo::map::proto::base::LaneGroupAttribute_Type LaneGroupAttribute::type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroupAttribute.type)
  return static_cast< ::holo::map::proto::base::LaneGroupAttribute_Type >(type_);
}
inline void LaneGroupAttribute::set_type(::holo::map::proto::base::LaneGroupAttribute_Type value) {
  assert(::holo::map::proto::base::LaneGroupAttribute_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.LaneGroupAttribute.type)
}

// optional .holo.map.proto.common.IntervalType offset_type = 2;
inline bool LaneGroupAttribute::has_offset_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneGroupAttribute::set_has_offset_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneGroupAttribute::clear_has_offset_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::IntervalType& LaneGroupAttribute::_internal_offset_type() const {
  return *offset_type_;
}
inline const ::holo::map::proto::common::IntervalType& LaneGroupAttribute::offset_type() const {
  const ::holo::map::proto::common::IntervalType* p = offset_type_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroupAttribute.offset_type)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::IntervalType*>(
      &::holo::map::proto::common::_IntervalType_default_instance_);
}
inline ::holo::map::proto::common::IntervalType* LaneGroupAttribute::release_offset_type() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.LaneGroupAttribute.offset_type)
  clear_has_offset_type();
  ::holo::map::proto::common::IntervalType* temp = offset_type_;
  offset_type_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::IntervalType* LaneGroupAttribute::mutable_offset_type() {
  set_has_offset_type();
  if (offset_type_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::IntervalType>(GetArenaNoVirtual());
    offset_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.LaneGroupAttribute.offset_type)
  return offset_type_;
}
inline void LaneGroupAttribute::set_allocated_offset_type(::holo::map::proto::common::IntervalType* offset_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(offset_type_);
  }
  if (offset_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      offset_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, offset_type, submessage_arena);
    }
    set_has_offset_type();
  } else {
    clear_has_offset_type();
  }
  offset_type_ = offset_type;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.LaneGroupAttribute.offset_type)
}

// optional .holo.map.proto.common.IntervalFloat64 offset = 3;
inline bool LaneGroupAttribute::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneGroupAttribute::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneGroupAttribute::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::IntervalFloat64& LaneGroupAttribute::_internal_offset() const {
  return *offset_;
}
inline const ::holo::map::proto::common::IntervalFloat64& LaneGroupAttribute::offset() const {
  const ::holo::map::proto::common::IntervalFloat64* p = offset_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.LaneGroupAttribute.offset)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::IntervalFloat64*>(
      &::holo::map::proto::common::_IntervalFloat64_default_instance_);
}
inline ::holo::map::proto::common::IntervalFloat64* LaneGroupAttribute::release_offset() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.LaneGroupAttribute.offset)
  clear_has_offset();
  ::holo::map::proto::common::IntervalFloat64* temp = offset_;
  offset_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::IntervalFloat64* LaneGroupAttribute::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::IntervalFloat64>(GetArenaNoVirtual());
    offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.LaneGroupAttribute.offset)
  return offset_;
}
inline void LaneGroupAttribute::set_allocated_offset(::holo::map::proto::common::IntervalFloat64* offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(offset_);
  }
  if (offset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    set_has_offset();
  } else {
    clear_has_offset();
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.LaneGroupAttribute.offset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::base::LaneGroupAttribute_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::LaneGroupAttribute_Type>() {
  return ::holo::map::proto::base::LaneGroupAttribute_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2flane_5fgroup_5fattribute_2eproto
