// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/object_traffic_light.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/coordinate.pb.h"
#include "holo/map/proto/common/geo_box.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class ObjectTrafficLight;
class ObjectTrafficLightDefaultTypeInternal;
extern ObjectTrafficLightDefaultTypeInternal _ObjectTrafficLight_default_instance_;
class ObjectTrafficLight_ExtraGeometryEntry_DoNotUse;
class ObjectTrafficLight_ExtraGeometryEntry_DoNotUseDefaultTypeInternal;
extern ObjectTrafficLight_ExtraGeometryEntry_DoNotUseDefaultTypeInternal _ObjectTrafficLight_ExtraGeometryEntry_DoNotUse_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::ObjectTrafficLight* Arena::CreateMaybeMessage<::holo::map::proto::base::ObjectTrafficLight>(Arena*);
template<> ::holo::map::proto::base::ObjectTrafficLight_ExtraGeometryEntry_DoNotUse* Arena::CreateMaybeMessage<::holo::map::proto::base::ObjectTrafficLight_ExtraGeometryEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

enum ObjectTrafficLight_TrafficLightState {
  ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_UNKNOWN = 0,
  ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_INVALID = 1,
  ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_GREEN = 2,
  ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_YELLOW = 3,
  ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_RED = 4
};
bool ObjectTrafficLight_TrafficLightState_IsValid(int value);
const ObjectTrafficLight_TrafficLightState ObjectTrafficLight_TrafficLightState_TrafficLightState_MIN = ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_UNKNOWN;
const ObjectTrafficLight_TrafficLightState ObjectTrafficLight_TrafficLightState_TrafficLightState_MAX = ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_RED;
const int ObjectTrafficLight_TrafficLightState_TrafficLightState_ARRAYSIZE = ObjectTrafficLight_TrafficLightState_TrafficLightState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectTrafficLight_TrafficLightState_descriptor();
inline const ::std::string& ObjectTrafficLight_TrafficLightState_Name(ObjectTrafficLight_TrafficLightState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectTrafficLight_TrafficLightState_descriptor(), value);
}
inline bool ObjectTrafficLight_TrafficLightState_Parse(
    const ::std::string& name, ObjectTrafficLight_TrafficLightState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectTrafficLight_TrafficLightState>(
    ObjectTrafficLight_TrafficLightState_descriptor(), name, value);
}
enum ObjectTrafficLight_TrafficLightLongitudinalPosition {
  ObjectTrafficLight_TrafficLightLongitudinalPosition_TRAFFIC_LIGHT_LONGITUDINAL_POSITION_UNKNOWN = 0,
  ObjectTrafficLight_TrafficLightLongitudinalPosition_TRAFFIC_LIGHT_LONGITUDINAL_POSITION_BEFORE_INTERSECTION = 1,
  ObjectTrafficLight_TrafficLightLongitudinalPosition_TRAFFIC_LIGHT_LONGITUDINAL_POSITION_CENTER_INTERSECTION = 2,
  ObjectTrafficLight_TrafficLightLongitudinalPosition_TRAFFIC_LIGHT_LONGITUDINAL_POSITION_AFTER_INTERSECTION = 3
};
bool ObjectTrafficLight_TrafficLightLongitudinalPosition_IsValid(int value);
const ObjectTrafficLight_TrafficLightLongitudinalPosition ObjectTrafficLight_TrafficLightLongitudinalPosition_TrafficLightLongitudinalPosition_MIN = ObjectTrafficLight_TrafficLightLongitudinalPosition_TRAFFIC_LIGHT_LONGITUDINAL_POSITION_UNKNOWN;
const ObjectTrafficLight_TrafficLightLongitudinalPosition ObjectTrafficLight_TrafficLightLongitudinalPosition_TrafficLightLongitudinalPosition_MAX = ObjectTrafficLight_TrafficLightLongitudinalPosition_TRAFFIC_LIGHT_LONGITUDINAL_POSITION_AFTER_INTERSECTION;
const int ObjectTrafficLight_TrafficLightLongitudinalPosition_TrafficLightLongitudinalPosition_ARRAYSIZE = ObjectTrafficLight_TrafficLightLongitudinalPosition_TrafficLightLongitudinalPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectTrafficLight_TrafficLightLongitudinalPosition_descriptor();
inline const ::std::string& ObjectTrafficLight_TrafficLightLongitudinalPosition_Name(ObjectTrafficLight_TrafficLightLongitudinalPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectTrafficLight_TrafficLightLongitudinalPosition_descriptor(), value);
}
inline bool ObjectTrafficLight_TrafficLightLongitudinalPosition_Parse(
    const ::std::string& name, ObjectTrafficLight_TrafficLightLongitudinalPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectTrafficLight_TrafficLightLongitudinalPosition>(
    ObjectTrafficLight_TrafficLightLongitudinalPosition_descriptor(), name, value);
}
enum ObjectTrafficLight_TrafficLightLateralPosition {
  ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_UNKNOWN = 0,
  ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_LEFT = 1,
  ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_RIGHT = 2,
  ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_ABOVE = 3,
  ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_SURFACE = 4,
  ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_LEFT_ABOVE = 5,
  ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_RIGHT_ABOVE = 6
};
bool ObjectTrafficLight_TrafficLightLateralPosition_IsValid(int value);
const ObjectTrafficLight_TrafficLightLateralPosition ObjectTrafficLight_TrafficLightLateralPosition_TrafficLightLateralPosition_MIN = ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_UNKNOWN;
const ObjectTrafficLight_TrafficLightLateralPosition ObjectTrafficLight_TrafficLightLateralPosition_TrafficLightLateralPosition_MAX = ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_RIGHT_ABOVE;
const int ObjectTrafficLight_TrafficLightLateralPosition_TrafficLightLateralPosition_ARRAYSIZE = ObjectTrafficLight_TrafficLightLateralPosition_TrafficLightLateralPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectTrafficLight_TrafficLightLateralPosition_descriptor();
inline const ::std::string& ObjectTrafficLight_TrafficLightLateralPosition_Name(ObjectTrafficLight_TrafficLightLateralPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectTrafficLight_TrafficLightLateralPosition_descriptor(), value);
}
inline bool ObjectTrafficLight_TrafficLightLateralPosition_Parse(
    const ::std::string& name, ObjectTrafficLight_TrafficLightLateralPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectTrafficLight_TrafficLightLateralPosition>(
    ObjectTrafficLight_TrafficLightLateralPosition_descriptor(), name, value);
}
enum ObjectTrafficLight_TrafficLightContentType {
  ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_UNKNOWN = 0,
  ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_NONE = 1,
  ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_ARROW = 2,
  ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_DIGITS = 3,
  ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_CHARACTERS = 4,
  ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_ADMIXTURE = 5,
  ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_OTHERS = 6
};
bool ObjectTrafficLight_TrafficLightContentType_IsValid(int value);
const ObjectTrafficLight_TrafficLightContentType ObjectTrafficLight_TrafficLightContentType_TrafficLightContentType_MIN = ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_UNKNOWN;
const ObjectTrafficLight_TrafficLightContentType ObjectTrafficLight_TrafficLightContentType_TrafficLightContentType_MAX = ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_OTHERS;
const int ObjectTrafficLight_TrafficLightContentType_TrafficLightContentType_ARRAYSIZE = ObjectTrafficLight_TrafficLightContentType_TrafficLightContentType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectTrafficLight_TrafficLightContentType_descriptor();
inline const ::std::string& ObjectTrafficLight_TrafficLightContentType_Name(ObjectTrafficLight_TrafficLightContentType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectTrafficLight_TrafficLightContentType_descriptor(), value);
}
inline bool ObjectTrafficLight_TrafficLightContentType_Parse(
    const ::std::string& name, ObjectTrafficLight_TrafficLightContentType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectTrafficLight_TrafficLightContentType>(
    ObjectTrafficLight_TrafficLightContentType_descriptor(), name, value);
}
enum ObjectTrafficLight_TrafficLightOrientation {
  ObjectTrafficLight_TrafficLightOrientation_TRAFFIC_LIGHT_ORIENTATION_UNKNOWN = 0,
  ObjectTrafficLight_TrafficLightOrientation_TRAFFIC_LIGHT_ORIENTATION_SINGLE = 1,
  ObjectTrafficLight_TrafficLightOrientation_TRAFFIC_LIGHT_ORIENTATION_HORIZONTAL = 2,
  ObjectTrafficLight_TrafficLightOrientation_TRAFFIC_LIGHT_ORIENTATION_VERTICAL = 3
};
bool ObjectTrafficLight_TrafficLightOrientation_IsValid(int value);
const ObjectTrafficLight_TrafficLightOrientation ObjectTrafficLight_TrafficLightOrientation_TrafficLightOrientation_MIN = ObjectTrafficLight_TrafficLightOrientation_TRAFFIC_LIGHT_ORIENTATION_UNKNOWN;
const ObjectTrafficLight_TrafficLightOrientation ObjectTrafficLight_TrafficLightOrientation_TrafficLightOrientation_MAX = ObjectTrafficLight_TrafficLightOrientation_TRAFFIC_LIGHT_ORIENTATION_VERTICAL;
const int ObjectTrafficLight_TrafficLightOrientation_TrafficLightOrientation_ARRAYSIZE = ObjectTrafficLight_TrafficLightOrientation_TrafficLightOrientation_MAX + 1;

const ::google::protobuf::EnumDescriptor* ObjectTrafficLight_TrafficLightOrientation_descriptor();
inline const ::std::string& ObjectTrafficLight_TrafficLightOrientation_Name(ObjectTrafficLight_TrafficLightOrientation value) {
  return ::google::protobuf::internal::NameOfEnum(
    ObjectTrafficLight_TrafficLightOrientation_descriptor(), value);
}
inline bool ObjectTrafficLight_TrafficLightOrientation_Parse(
    const ::std::string& name, ObjectTrafficLight_TrafficLightOrientation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ObjectTrafficLight_TrafficLightOrientation>(
    ObjectTrafficLight_TrafficLightOrientation_descriptor(), name, value);
}
// ===================================================================

class ObjectTrafficLight_ExtraGeometryEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ObjectTrafficLight_ExtraGeometryEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ObjectTrafficLight_ExtraGeometryEntry_DoNotUse, 
    ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ObjectTrafficLight_ExtraGeometryEntry_DoNotUse();
  ObjectTrafficLight_ExtraGeometryEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ObjectTrafficLight_ExtraGeometryEntry_DoNotUse& other);
  static const ObjectTrafficLight_ExtraGeometryEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ObjectTrafficLight_ExtraGeometryEntry_DoNotUse*>(&_ObjectTrafficLight_ExtraGeometryEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ObjectTrafficLight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.ObjectTrafficLight) */ {
 public:
  ObjectTrafficLight();
  virtual ~ObjectTrafficLight();

  ObjectTrafficLight(const ObjectTrafficLight& from);

  inline ObjectTrafficLight& operator=(const ObjectTrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectTrafficLight(ObjectTrafficLight&& from) noexcept
    : ObjectTrafficLight() {
    *this = ::std::move(from);
  }

  inline ObjectTrafficLight& operator=(ObjectTrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectTrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectTrafficLight* internal_default_instance() {
    return reinterpret_cast<const ObjectTrafficLight*>(
               &_ObjectTrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ObjectTrafficLight* other);
  friend void swap(ObjectTrafficLight& a, ObjectTrafficLight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectTrafficLight* New() const final {
    return CreateMaybeMessage<ObjectTrafficLight>(NULL);
  }

  ObjectTrafficLight* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObjectTrafficLight>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObjectTrafficLight& from);
  void MergeFrom(const ObjectTrafficLight& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectTrafficLight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef ObjectTrafficLight_TrafficLightState TrafficLightState;
  static const TrafficLightState TRAFFIC_LIGHT_STATE_UNKNOWN =
    ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_UNKNOWN;
  static const TrafficLightState TRAFFIC_LIGHT_STATE_INVALID =
    ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_INVALID;
  static const TrafficLightState TRAFFIC_LIGHT_STATE_GREEN =
    ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_GREEN;
  static const TrafficLightState TRAFFIC_LIGHT_STATE_YELLOW =
    ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_YELLOW;
  static const TrafficLightState TRAFFIC_LIGHT_STATE_RED =
    ObjectTrafficLight_TrafficLightState_TRAFFIC_LIGHT_STATE_RED;
  static inline bool TrafficLightState_IsValid(int value) {
    return ObjectTrafficLight_TrafficLightState_IsValid(value);
  }
  static const TrafficLightState TrafficLightState_MIN =
    ObjectTrafficLight_TrafficLightState_TrafficLightState_MIN;
  static const TrafficLightState TrafficLightState_MAX =
    ObjectTrafficLight_TrafficLightState_TrafficLightState_MAX;
  static const int TrafficLightState_ARRAYSIZE =
    ObjectTrafficLight_TrafficLightState_TrafficLightState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficLightState_descriptor() {
    return ObjectTrafficLight_TrafficLightState_descriptor();
  }
  static inline const ::std::string& TrafficLightState_Name(TrafficLightState value) {
    return ObjectTrafficLight_TrafficLightState_Name(value);
  }
  static inline bool TrafficLightState_Parse(const ::std::string& name,
      TrafficLightState* value) {
    return ObjectTrafficLight_TrafficLightState_Parse(name, value);
  }

  typedef ObjectTrafficLight_TrafficLightLongitudinalPosition TrafficLightLongitudinalPosition;
  static const TrafficLightLongitudinalPosition TRAFFIC_LIGHT_LONGITUDINAL_POSITION_UNKNOWN =
    ObjectTrafficLight_TrafficLightLongitudinalPosition_TRAFFIC_LIGHT_LONGITUDINAL_POSITION_UNKNOWN;
  static const TrafficLightLongitudinalPosition TRAFFIC_LIGHT_LONGITUDINAL_POSITION_BEFORE_INTERSECTION =
    ObjectTrafficLight_TrafficLightLongitudinalPosition_TRAFFIC_LIGHT_LONGITUDINAL_POSITION_BEFORE_INTERSECTION;
  static const TrafficLightLongitudinalPosition TRAFFIC_LIGHT_LONGITUDINAL_POSITION_CENTER_INTERSECTION =
    ObjectTrafficLight_TrafficLightLongitudinalPosition_TRAFFIC_LIGHT_LONGITUDINAL_POSITION_CENTER_INTERSECTION;
  static const TrafficLightLongitudinalPosition TRAFFIC_LIGHT_LONGITUDINAL_POSITION_AFTER_INTERSECTION =
    ObjectTrafficLight_TrafficLightLongitudinalPosition_TRAFFIC_LIGHT_LONGITUDINAL_POSITION_AFTER_INTERSECTION;
  static inline bool TrafficLightLongitudinalPosition_IsValid(int value) {
    return ObjectTrafficLight_TrafficLightLongitudinalPosition_IsValid(value);
  }
  static const TrafficLightLongitudinalPosition TrafficLightLongitudinalPosition_MIN =
    ObjectTrafficLight_TrafficLightLongitudinalPosition_TrafficLightLongitudinalPosition_MIN;
  static const TrafficLightLongitudinalPosition TrafficLightLongitudinalPosition_MAX =
    ObjectTrafficLight_TrafficLightLongitudinalPosition_TrafficLightLongitudinalPosition_MAX;
  static const int TrafficLightLongitudinalPosition_ARRAYSIZE =
    ObjectTrafficLight_TrafficLightLongitudinalPosition_TrafficLightLongitudinalPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficLightLongitudinalPosition_descriptor() {
    return ObjectTrafficLight_TrafficLightLongitudinalPosition_descriptor();
  }
  static inline const ::std::string& TrafficLightLongitudinalPosition_Name(TrafficLightLongitudinalPosition value) {
    return ObjectTrafficLight_TrafficLightLongitudinalPosition_Name(value);
  }
  static inline bool TrafficLightLongitudinalPosition_Parse(const ::std::string& name,
      TrafficLightLongitudinalPosition* value) {
    return ObjectTrafficLight_TrafficLightLongitudinalPosition_Parse(name, value);
  }

  typedef ObjectTrafficLight_TrafficLightLateralPosition TrafficLightLateralPosition;
  static const TrafficLightLateralPosition TRAFFIC_LIGHT_LATERAL_POSITION_UNKNOWN =
    ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_UNKNOWN;
  static const TrafficLightLateralPosition TRAFFIC_LIGHT_LATERAL_POSITION_LEFT =
    ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_LEFT;
  static const TrafficLightLateralPosition TRAFFIC_LIGHT_LATERAL_POSITION_RIGHT =
    ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_RIGHT;
  static const TrafficLightLateralPosition TRAFFIC_LIGHT_LATERAL_POSITION_ABOVE =
    ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_ABOVE;
  static const TrafficLightLateralPosition TRAFFIC_LIGHT_LATERAL_POSITION_SURFACE =
    ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_SURFACE;
  static const TrafficLightLateralPosition TRAFFIC_LIGHT_LATERAL_POSITION_LEFT_ABOVE =
    ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_LEFT_ABOVE;
  static const TrafficLightLateralPosition TRAFFIC_LIGHT_LATERAL_POSITION_RIGHT_ABOVE =
    ObjectTrafficLight_TrafficLightLateralPosition_TRAFFIC_LIGHT_LATERAL_POSITION_RIGHT_ABOVE;
  static inline bool TrafficLightLateralPosition_IsValid(int value) {
    return ObjectTrafficLight_TrafficLightLateralPosition_IsValid(value);
  }
  static const TrafficLightLateralPosition TrafficLightLateralPosition_MIN =
    ObjectTrafficLight_TrafficLightLateralPosition_TrafficLightLateralPosition_MIN;
  static const TrafficLightLateralPosition TrafficLightLateralPosition_MAX =
    ObjectTrafficLight_TrafficLightLateralPosition_TrafficLightLateralPosition_MAX;
  static const int TrafficLightLateralPosition_ARRAYSIZE =
    ObjectTrafficLight_TrafficLightLateralPosition_TrafficLightLateralPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficLightLateralPosition_descriptor() {
    return ObjectTrafficLight_TrafficLightLateralPosition_descriptor();
  }
  static inline const ::std::string& TrafficLightLateralPosition_Name(TrafficLightLateralPosition value) {
    return ObjectTrafficLight_TrafficLightLateralPosition_Name(value);
  }
  static inline bool TrafficLightLateralPosition_Parse(const ::std::string& name,
      TrafficLightLateralPosition* value) {
    return ObjectTrafficLight_TrafficLightLateralPosition_Parse(name, value);
  }

  typedef ObjectTrafficLight_TrafficLightContentType TrafficLightContentType;
  static const TrafficLightContentType TRAFFIC_LIGHT_CONTENT_TYPE_UNKNOWN =
    ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_UNKNOWN;
  static const TrafficLightContentType TRAFFIC_LIGHT_CONTENT_TYPE_NONE =
    ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_NONE;
  static const TrafficLightContentType TRAFFIC_LIGHT_CONTENT_TYPE_ARROW =
    ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_ARROW;
  static const TrafficLightContentType TRAFFIC_LIGHT_CONTENT_TYPE_DIGITS =
    ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_DIGITS;
  static const TrafficLightContentType TRAFFIC_LIGHT_CONTENT_TYPE_CHARACTERS =
    ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_CHARACTERS;
  static const TrafficLightContentType TRAFFIC_LIGHT_CONTENT_TYPE_ADMIXTURE =
    ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_ADMIXTURE;
  static const TrafficLightContentType TRAFFIC_LIGHT_CONTENT_TYPE_OTHERS =
    ObjectTrafficLight_TrafficLightContentType_TRAFFIC_LIGHT_CONTENT_TYPE_OTHERS;
  static inline bool TrafficLightContentType_IsValid(int value) {
    return ObjectTrafficLight_TrafficLightContentType_IsValid(value);
  }
  static const TrafficLightContentType TrafficLightContentType_MIN =
    ObjectTrafficLight_TrafficLightContentType_TrafficLightContentType_MIN;
  static const TrafficLightContentType TrafficLightContentType_MAX =
    ObjectTrafficLight_TrafficLightContentType_TrafficLightContentType_MAX;
  static const int TrafficLightContentType_ARRAYSIZE =
    ObjectTrafficLight_TrafficLightContentType_TrafficLightContentType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficLightContentType_descriptor() {
    return ObjectTrafficLight_TrafficLightContentType_descriptor();
  }
  static inline const ::std::string& TrafficLightContentType_Name(TrafficLightContentType value) {
    return ObjectTrafficLight_TrafficLightContentType_Name(value);
  }
  static inline bool TrafficLightContentType_Parse(const ::std::string& name,
      TrafficLightContentType* value) {
    return ObjectTrafficLight_TrafficLightContentType_Parse(name, value);
  }

  typedef ObjectTrafficLight_TrafficLightOrientation TrafficLightOrientation;
  static const TrafficLightOrientation TRAFFIC_LIGHT_ORIENTATION_UNKNOWN =
    ObjectTrafficLight_TrafficLightOrientation_TRAFFIC_LIGHT_ORIENTATION_UNKNOWN;
  static const TrafficLightOrientation TRAFFIC_LIGHT_ORIENTATION_SINGLE =
    ObjectTrafficLight_TrafficLightOrientation_TRAFFIC_LIGHT_ORIENTATION_SINGLE;
  static const TrafficLightOrientation TRAFFIC_LIGHT_ORIENTATION_HORIZONTAL =
    ObjectTrafficLight_TrafficLightOrientation_TRAFFIC_LIGHT_ORIENTATION_HORIZONTAL;
  static const TrafficLightOrientation TRAFFIC_LIGHT_ORIENTATION_VERTICAL =
    ObjectTrafficLight_TrafficLightOrientation_TRAFFIC_LIGHT_ORIENTATION_VERTICAL;
  static inline bool TrafficLightOrientation_IsValid(int value) {
    return ObjectTrafficLight_TrafficLightOrientation_IsValid(value);
  }
  static const TrafficLightOrientation TrafficLightOrientation_MIN =
    ObjectTrafficLight_TrafficLightOrientation_TrafficLightOrientation_MIN;
  static const TrafficLightOrientation TrafficLightOrientation_MAX =
    ObjectTrafficLight_TrafficLightOrientation_TrafficLightOrientation_MAX;
  static const int TrafficLightOrientation_ARRAYSIZE =
    ObjectTrafficLight_TrafficLightOrientation_TrafficLightOrientation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficLightOrientation_descriptor() {
    return ObjectTrafficLight_TrafficLightOrientation_descriptor();
  }
  static inline const ::std::string& TrafficLightOrientation_Name(TrafficLightOrientation value) {
    return ObjectTrafficLight_TrafficLightOrientation_Name(value);
  }
  static inline bool TrafficLightOrientation_Parse(const ::std::string& name,
      TrafficLightOrientation* value) {
    return ObjectTrafficLight_TrafficLightOrientation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 tile_ids = 20 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 20;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // repeated uint64 associated_lane_ids = 21 [packed = true];
  int associated_lane_ids_size() const;
  void clear_associated_lane_ids();
  static const int kAssociatedLaneIdsFieldNumber = 21;
  ::google::protobuf::uint64 associated_lane_ids(int index) const;
  void set_associated_lane_ids(int index, ::google::protobuf::uint64 value);
  void add_associated_lane_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_lane_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_lane_ids();

  // repeated uint64 associated_lane_group_ids = 22 [packed = true];
  int associated_lane_group_ids_size() const;
  void clear_associated_lane_group_ids();
  static const int kAssociatedLaneGroupIdsFieldNumber = 22;
  ::google::protobuf::uint64 associated_lane_group_ids(int index) const;
  void set_associated_lane_group_ids(int index, ::google::protobuf::uint64 value);
  void add_associated_lane_group_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      associated_lane_group_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_associated_lane_group_ids();

  // map<uint32, .holo.map.proto.common.GeoBox> extra_geometry = 34;
  int extra_geometry_size() const;
  void clear_extra_geometry();
  static const int kExtraGeometryFieldNumber = 34;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >&
      extra_geometry() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >*
      mutable_extra_geometry();

  // optional .holo.map.proto.common.GeoBox geometry = 33;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 33;
  private:
  const ::holo::map::proto::common::GeoBox& _internal_geometry() const;
  public:
  const ::holo::map::proto::common::GeoBox& geometry() const;
  ::holo::map::proto::common::GeoBox* release_geometry();
  ::holo::map::proto::common::GeoBox* mutable_geometry();
  void set_allocated_geometry(::holo::map::proto::common::GeoBox* geometry);

  // optional .holo.map.proto.common.Coordinate coordinate = 35;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 35;
  private:
  const ::holo::map::proto::common::Coordinate& _internal_coordinate() const;
  public:
  const ::holo::map::proto::common::Coordinate& coordinate() const;
  ::holo::map::proto::common::Coordinate* release_coordinate();
  ::holo::map::proto::common::Coordinate* mutable_coordinate();
  void set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate);

  // optional uint64 object_traffic_light_id = 1;
  bool has_object_traffic_light_id() const;
  void clear_object_traffic_light_id();
  static const int kObjectTrafficLightIdFieldNumber = 1;
  ::google::protobuf::uint64 object_traffic_light_id() const;
  void set_object_traffic_light_id(::google::protobuf::uint64 value);

  // optional uint64 traffic_light_group_id = 2;
  bool has_traffic_light_group_id() const;
  void clear_traffic_light_group_id();
  static const int kTrafficLightGroupIdFieldNumber = 2;
  ::google::protobuf::uint64 traffic_light_group_id() const;
  void set_traffic_light_group_id(::google::protobuf::uint64 value);

  // optional .holo.map.proto.base.ObjectTrafficLight.TrafficLightState traffic_light_state = 3;
  bool has_traffic_light_state() const;
  void clear_traffic_light_state();
  static const int kTrafficLightStateFieldNumber = 3;
  ::holo::map::proto::base::ObjectTrafficLight_TrafficLightState traffic_light_state() const;
  void set_traffic_light_state(::holo::map::proto::base::ObjectTrafficLight_TrafficLightState value);

  // optional .holo.map.proto.base.ObjectTrafficLight.TrafficLightLongitudinalPosition traffic_light_longitudinal_position = 4;
  bool has_traffic_light_longitudinal_position() const;
  void clear_traffic_light_longitudinal_position();
  static const int kTrafficLightLongitudinalPositionFieldNumber = 4;
  ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLongitudinalPosition traffic_light_longitudinal_position() const;
  void set_traffic_light_longitudinal_position(::holo::map::proto::base::ObjectTrafficLight_TrafficLightLongitudinalPosition value);

  // optional .holo.map.proto.base.ObjectTrafficLight.TrafficLightLateralPosition traffic_light_lateral_position = 5;
  bool has_traffic_light_lateral_position() const;
  void clear_traffic_light_lateral_position();
  static const int kTrafficLightLateralPositionFieldNumber = 5;
  ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLateralPosition traffic_light_lateral_position() const;
  void set_traffic_light_lateral_position(::holo::map::proto::base::ObjectTrafficLight_TrafficLightLateralPosition value);

  // optional .holo.map.proto.base.ObjectTrafficLight.TrafficLightContentType traffic_light_content_type = 6;
  bool has_traffic_light_content_type() const;
  void clear_traffic_light_content_type();
  static const int kTrafficLightContentTypeFieldNumber = 6;
  ::holo::map::proto::base::ObjectTrafficLight_TrafficLightContentType traffic_light_content_type() const;
  void set_traffic_light_content_type(::holo::map::proto::base::ObjectTrafficLight_TrafficLightContentType value);

  // optional .holo.map.proto.base.ObjectTrafficLight.TrafficLightOrientation traffic_light_orientation = 7;
  bool has_traffic_light_orientation() const;
  void clear_traffic_light_orientation();
  static const int kTrafficLightOrientationFieldNumber = 7;
  ::holo::map::proto::base::ObjectTrafficLight_TrafficLightOrientation traffic_light_orientation() const;
  void set_traffic_light_orientation(::holo::map::proto::base::ObjectTrafficLight_TrafficLightOrientation value);

  // optional uint32 traffic_light_row_count = 8;
  bool has_traffic_light_row_count() const;
  void clear_traffic_light_row_count();
  static const int kTrafficLightRowCountFieldNumber = 8;
  ::google::protobuf::uint32 traffic_light_row_count() const;
  void set_traffic_light_row_count(::google::protobuf::uint32 value);

  // optional uint64 intersection_id = 10;
  bool has_intersection_id() const;
  void clear_intersection_id();
  static const int kIntersectionIdFieldNumber = 10;
  ::google::protobuf::uint64 intersection_id() const;
  void set_intersection_id(::google::protobuf::uint64 value);

  // optional uint32 traffic_light_column_count = 9;
  bool has_traffic_light_column_count() const;
  void clear_traffic_light_column_count();
  static const int kTrafficLightColumnCountFieldNumber = 9;
  ::google::protobuf::uint32 traffic_light_column_count() const;
  void set_traffic_light_column_count(::google::protobuf::uint32 value);

  // optional uint32 zone_id = 30;
  bool has_zone_id() const;
  void clear_zone_id();
  static const int kZoneIdFieldNumber = 30;
  ::google::protobuf::uint32 zone_id() const;
  void set_zone_id(::google::protobuf::uint32 value);

  // optional uint32 extra_zone_id = 31;
  bool has_extra_zone_id() const;
  void clear_extra_zone_id();
  static const int kExtraZoneIdFieldNumber = 31;
  ::google::protobuf::uint32 extra_zone_id() const;
  void set_extra_zone_id(::google::protobuf::uint32 value);

  // optional bool south_flag = 32;
  bool has_south_flag() const;
  void clear_south_flag();
  static const int kSouthFlagFieldNumber = 32;
  bool south_flag() const;
  void set_south_flag(bool value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.ObjectTrafficLight)
 private:
  void set_has_object_traffic_light_id();
  void clear_has_object_traffic_light_id();
  void set_has_traffic_light_group_id();
  void clear_has_traffic_light_group_id();
  void set_has_traffic_light_state();
  void clear_has_traffic_light_state();
  void set_has_traffic_light_longitudinal_position();
  void clear_has_traffic_light_longitudinal_position();
  void set_has_traffic_light_lateral_position();
  void clear_has_traffic_light_lateral_position();
  void set_has_traffic_light_content_type();
  void clear_has_traffic_light_content_type();
  void set_has_traffic_light_orientation();
  void clear_has_traffic_light_orientation();
  void set_has_traffic_light_row_count();
  void clear_has_traffic_light_row_count();
  void set_has_traffic_light_column_count();
  void clear_has_traffic_light_column_count();
  void set_has_intersection_id();
  void clear_has_intersection_id();
  void set_has_zone_id();
  void clear_has_zone_id();
  void set_has_extra_zone_id();
  void clear_has_extra_zone_id();
  void set_has_south_flag();
  void clear_has_south_flag();
  void set_has_geometry();
  void clear_has_geometry();
  void set_has_coordinate();
  void clear_has_coordinate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_lane_ids_;
  mutable int _associated_lane_ids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > associated_lane_group_ids_;
  mutable int _associated_lane_group_ids_cached_byte_size_;
  ::google::protobuf::internal::MapField<
      ObjectTrafficLight_ExtraGeometryEntry_DoNotUse,
      ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > extra_geometry_;
  ::holo::map::proto::common::GeoBox* geometry_;
  ::holo::map::proto::common::Coordinate* coordinate_;
  ::google::protobuf::uint64 object_traffic_light_id_;
  ::google::protobuf::uint64 traffic_light_group_id_;
  int traffic_light_state_;
  int traffic_light_longitudinal_position_;
  int traffic_light_lateral_position_;
  int traffic_light_content_type_;
  int traffic_light_orientation_;
  ::google::protobuf::uint32 traffic_light_row_count_;
  ::google::protobuf::uint64 intersection_id_;
  ::google::protobuf::uint32 traffic_light_column_count_;
  ::google::protobuf::uint32 zone_id_;
  ::google::protobuf::uint32 extra_zone_id_;
  bool south_flag_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ObjectTrafficLight

// optional uint64 object_traffic_light_id = 1;
inline bool ObjectTrafficLight::has_object_traffic_light_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjectTrafficLight::set_has_object_traffic_light_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjectTrafficLight::clear_has_object_traffic_light_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjectTrafficLight::clear_object_traffic_light_id() {
  object_traffic_light_id_ = GOOGLE_ULONGLONG(0);
  clear_has_object_traffic_light_id();
}
inline ::google::protobuf::uint64 ObjectTrafficLight::object_traffic_light_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.object_traffic_light_id)
  return object_traffic_light_id_;
}
inline void ObjectTrafficLight::set_object_traffic_light_id(::google::protobuf::uint64 value) {
  set_has_object_traffic_light_id();
  object_traffic_light_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.object_traffic_light_id)
}

// optional uint64 traffic_light_group_id = 2;
inline bool ObjectTrafficLight::has_traffic_light_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjectTrafficLight::set_has_traffic_light_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjectTrafficLight::clear_has_traffic_light_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjectTrafficLight::clear_traffic_light_group_id() {
  traffic_light_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_traffic_light_group_id();
}
inline ::google::protobuf::uint64 ObjectTrafficLight::traffic_light_group_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.traffic_light_group_id)
  return traffic_light_group_id_;
}
inline void ObjectTrafficLight::set_traffic_light_group_id(::google::protobuf::uint64 value) {
  set_has_traffic_light_group_id();
  traffic_light_group_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.traffic_light_group_id)
}

// optional .holo.map.proto.base.ObjectTrafficLight.TrafficLightState traffic_light_state = 3;
inline bool ObjectTrafficLight::has_traffic_light_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObjectTrafficLight::set_has_traffic_light_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObjectTrafficLight::clear_has_traffic_light_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObjectTrafficLight::clear_traffic_light_state() {
  traffic_light_state_ = 0;
  clear_has_traffic_light_state();
}
inline ::holo::map::proto::base::ObjectTrafficLight_TrafficLightState ObjectTrafficLight::traffic_light_state() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.traffic_light_state)
  return static_cast< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightState >(traffic_light_state_);
}
inline void ObjectTrafficLight::set_traffic_light_state(::holo::map::proto::base::ObjectTrafficLight_TrafficLightState value) {
  assert(::holo::map::proto::base::ObjectTrafficLight_TrafficLightState_IsValid(value));
  set_has_traffic_light_state();
  traffic_light_state_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.traffic_light_state)
}

// optional .holo.map.proto.base.ObjectTrafficLight.TrafficLightLongitudinalPosition traffic_light_longitudinal_position = 4;
inline bool ObjectTrafficLight::has_traffic_light_longitudinal_position() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObjectTrafficLight::set_has_traffic_light_longitudinal_position() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObjectTrafficLight::clear_has_traffic_light_longitudinal_position() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObjectTrafficLight::clear_traffic_light_longitudinal_position() {
  traffic_light_longitudinal_position_ = 0;
  clear_has_traffic_light_longitudinal_position();
}
inline ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLongitudinalPosition ObjectTrafficLight::traffic_light_longitudinal_position() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.traffic_light_longitudinal_position)
  return static_cast< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLongitudinalPosition >(traffic_light_longitudinal_position_);
}
inline void ObjectTrafficLight::set_traffic_light_longitudinal_position(::holo::map::proto::base::ObjectTrafficLight_TrafficLightLongitudinalPosition value) {
  assert(::holo::map::proto::base::ObjectTrafficLight_TrafficLightLongitudinalPosition_IsValid(value));
  set_has_traffic_light_longitudinal_position();
  traffic_light_longitudinal_position_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.traffic_light_longitudinal_position)
}

// optional .holo.map.proto.base.ObjectTrafficLight.TrafficLightLateralPosition traffic_light_lateral_position = 5;
inline bool ObjectTrafficLight::has_traffic_light_lateral_position() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObjectTrafficLight::set_has_traffic_light_lateral_position() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ObjectTrafficLight::clear_has_traffic_light_lateral_position() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ObjectTrafficLight::clear_traffic_light_lateral_position() {
  traffic_light_lateral_position_ = 0;
  clear_has_traffic_light_lateral_position();
}
inline ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLateralPosition ObjectTrafficLight::traffic_light_lateral_position() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.traffic_light_lateral_position)
  return static_cast< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLateralPosition >(traffic_light_lateral_position_);
}
inline void ObjectTrafficLight::set_traffic_light_lateral_position(::holo::map::proto::base::ObjectTrafficLight_TrafficLightLateralPosition value) {
  assert(::holo::map::proto::base::ObjectTrafficLight_TrafficLightLateralPosition_IsValid(value));
  set_has_traffic_light_lateral_position();
  traffic_light_lateral_position_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.traffic_light_lateral_position)
}

// optional .holo.map.proto.base.ObjectTrafficLight.TrafficLightContentType traffic_light_content_type = 6;
inline bool ObjectTrafficLight::has_traffic_light_content_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ObjectTrafficLight::set_has_traffic_light_content_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ObjectTrafficLight::clear_has_traffic_light_content_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ObjectTrafficLight::clear_traffic_light_content_type() {
  traffic_light_content_type_ = 0;
  clear_has_traffic_light_content_type();
}
inline ::holo::map::proto::base::ObjectTrafficLight_TrafficLightContentType ObjectTrafficLight::traffic_light_content_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.traffic_light_content_type)
  return static_cast< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightContentType >(traffic_light_content_type_);
}
inline void ObjectTrafficLight::set_traffic_light_content_type(::holo::map::proto::base::ObjectTrafficLight_TrafficLightContentType value) {
  assert(::holo::map::proto::base::ObjectTrafficLight_TrafficLightContentType_IsValid(value));
  set_has_traffic_light_content_type();
  traffic_light_content_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.traffic_light_content_type)
}

// optional .holo.map.proto.base.ObjectTrafficLight.TrafficLightOrientation traffic_light_orientation = 7;
inline bool ObjectTrafficLight::has_traffic_light_orientation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ObjectTrafficLight::set_has_traffic_light_orientation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ObjectTrafficLight::clear_has_traffic_light_orientation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ObjectTrafficLight::clear_traffic_light_orientation() {
  traffic_light_orientation_ = 0;
  clear_has_traffic_light_orientation();
}
inline ::holo::map::proto::base::ObjectTrafficLight_TrafficLightOrientation ObjectTrafficLight::traffic_light_orientation() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.traffic_light_orientation)
  return static_cast< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightOrientation >(traffic_light_orientation_);
}
inline void ObjectTrafficLight::set_traffic_light_orientation(::holo::map::proto::base::ObjectTrafficLight_TrafficLightOrientation value) {
  assert(::holo::map::proto::base::ObjectTrafficLight_TrafficLightOrientation_IsValid(value));
  set_has_traffic_light_orientation();
  traffic_light_orientation_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.traffic_light_orientation)
}

// optional uint32 traffic_light_row_count = 8;
inline bool ObjectTrafficLight::has_traffic_light_row_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ObjectTrafficLight::set_has_traffic_light_row_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ObjectTrafficLight::clear_has_traffic_light_row_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ObjectTrafficLight::clear_traffic_light_row_count() {
  traffic_light_row_count_ = 0u;
  clear_has_traffic_light_row_count();
}
inline ::google::protobuf::uint32 ObjectTrafficLight::traffic_light_row_count() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.traffic_light_row_count)
  return traffic_light_row_count_;
}
inline void ObjectTrafficLight::set_traffic_light_row_count(::google::protobuf::uint32 value) {
  set_has_traffic_light_row_count();
  traffic_light_row_count_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.traffic_light_row_count)
}

// optional uint32 traffic_light_column_count = 9;
inline bool ObjectTrafficLight::has_traffic_light_column_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ObjectTrafficLight::set_has_traffic_light_column_count() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ObjectTrafficLight::clear_has_traffic_light_column_count() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ObjectTrafficLight::clear_traffic_light_column_count() {
  traffic_light_column_count_ = 0u;
  clear_has_traffic_light_column_count();
}
inline ::google::protobuf::uint32 ObjectTrafficLight::traffic_light_column_count() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.traffic_light_column_count)
  return traffic_light_column_count_;
}
inline void ObjectTrafficLight::set_traffic_light_column_count(::google::protobuf::uint32 value) {
  set_has_traffic_light_column_count();
  traffic_light_column_count_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.traffic_light_column_count)
}

// optional uint64 intersection_id = 10;
inline bool ObjectTrafficLight::has_intersection_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ObjectTrafficLight::set_has_intersection_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ObjectTrafficLight::clear_has_intersection_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ObjectTrafficLight::clear_intersection_id() {
  intersection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_intersection_id();
}
inline ::google::protobuf::uint64 ObjectTrafficLight::intersection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.intersection_id)
  return intersection_id_;
}
inline void ObjectTrafficLight::set_intersection_id(::google::protobuf::uint64 value) {
  set_has_intersection_id();
  intersection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.intersection_id)
}

// repeated uint64 tile_ids = 20 [packed = true];
inline int ObjectTrafficLight::tile_ids_size() const {
  return tile_ids_.size();
}
inline void ObjectTrafficLight::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectTrafficLight::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.tile_ids)
  return tile_ids_.Get(index);
}
inline void ObjectTrafficLight::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.tile_ids)
}
inline void ObjectTrafficLight::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectTrafficLight.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectTrafficLight::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectTrafficLight.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectTrafficLight::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectTrafficLight.tile_ids)
  return &tile_ids_;
}

// repeated uint64 associated_lane_ids = 21 [packed = true];
inline int ObjectTrafficLight::associated_lane_ids_size() const {
  return associated_lane_ids_.size();
}
inline void ObjectTrafficLight::clear_associated_lane_ids() {
  associated_lane_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectTrafficLight::associated_lane_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.associated_lane_ids)
  return associated_lane_ids_.Get(index);
}
inline void ObjectTrafficLight::set_associated_lane_ids(int index, ::google::protobuf::uint64 value) {
  associated_lane_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.associated_lane_ids)
}
inline void ObjectTrafficLight::add_associated_lane_ids(::google::protobuf::uint64 value) {
  associated_lane_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectTrafficLight.associated_lane_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectTrafficLight::associated_lane_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectTrafficLight.associated_lane_ids)
  return associated_lane_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectTrafficLight::mutable_associated_lane_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectTrafficLight.associated_lane_ids)
  return &associated_lane_ids_;
}

// repeated uint64 associated_lane_group_ids = 22 [packed = true];
inline int ObjectTrafficLight::associated_lane_group_ids_size() const {
  return associated_lane_group_ids_.size();
}
inline void ObjectTrafficLight::clear_associated_lane_group_ids() {
  associated_lane_group_ids_.Clear();
}
inline ::google::protobuf::uint64 ObjectTrafficLight::associated_lane_group_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.associated_lane_group_ids)
  return associated_lane_group_ids_.Get(index);
}
inline void ObjectTrafficLight::set_associated_lane_group_ids(int index, ::google::protobuf::uint64 value) {
  associated_lane_group_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.associated_lane_group_ids)
}
inline void ObjectTrafficLight::add_associated_lane_group_ids(::google::protobuf::uint64 value) {
  associated_lane_group_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.ObjectTrafficLight.associated_lane_group_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ObjectTrafficLight::associated_lane_group_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.ObjectTrafficLight.associated_lane_group_ids)
  return associated_lane_group_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ObjectTrafficLight::mutable_associated_lane_group_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.ObjectTrafficLight.associated_lane_group_ids)
  return &associated_lane_group_ids_;
}

// optional uint32 zone_id = 30;
inline bool ObjectTrafficLight::has_zone_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ObjectTrafficLight::set_has_zone_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ObjectTrafficLight::clear_has_zone_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ObjectTrafficLight::clear_zone_id() {
  zone_id_ = 0u;
  clear_has_zone_id();
}
inline ::google::protobuf::uint32 ObjectTrafficLight::zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.zone_id)
  return zone_id_;
}
inline void ObjectTrafficLight::set_zone_id(::google::protobuf::uint32 value) {
  set_has_zone_id();
  zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.zone_id)
}

// optional uint32 extra_zone_id = 31;
inline bool ObjectTrafficLight::has_extra_zone_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ObjectTrafficLight::set_has_extra_zone_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ObjectTrafficLight::clear_has_extra_zone_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ObjectTrafficLight::clear_extra_zone_id() {
  extra_zone_id_ = 0u;
  clear_has_extra_zone_id();
}
inline ::google::protobuf::uint32 ObjectTrafficLight::extra_zone_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.extra_zone_id)
  return extra_zone_id_;
}
inline void ObjectTrafficLight::set_extra_zone_id(::google::protobuf::uint32 value) {
  set_has_extra_zone_id();
  extra_zone_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.extra_zone_id)
}

// optional bool south_flag = 32;
inline bool ObjectTrafficLight::has_south_flag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ObjectTrafficLight::set_has_south_flag() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ObjectTrafficLight::clear_has_south_flag() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ObjectTrafficLight::clear_south_flag() {
  south_flag_ = false;
  clear_has_south_flag();
}
inline bool ObjectTrafficLight::south_flag() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.south_flag)
  return south_flag_;
}
inline void ObjectTrafficLight::set_south_flag(bool value) {
  set_has_south_flag();
  south_flag_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.ObjectTrafficLight.south_flag)
}

// optional .holo.map.proto.common.GeoBox geometry = 33;
inline bool ObjectTrafficLight::has_geometry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjectTrafficLight::set_has_geometry() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjectTrafficLight::clear_has_geometry() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::GeoBox& ObjectTrafficLight::_internal_geometry() const {
  return *geometry_;
}
inline const ::holo::map::proto::common::GeoBox& ObjectTrafficLight::geometry() const {
  const ::holo::map::proto::common::GeoBox* p = geometry_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.geometry)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoBox*>(
      &::holo::map::proto::common::_GeoBox_default_instance_);
}
inline ::holo::map::proto::common::GeoBox* ObjectTrafficLight::release_geometry() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.ObjectTrafficLight.geometry)
  clear_has_geometry();
  ::holo::map::proto::common::GeoBox* temp = geometry_;
  geometry_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoBox* ObjectTrafficLight::mutable_geometry() {
  set_has_geometry();
  if (geometry_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoBox>(GetArenaNoVirtual());
    geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.ObjectTrafficLight.geometry)
  return geometry_;
}
inline void ObjectTrafficLight::set_allocated_geometry(::holo::map::proto::common::GeoBox* geometry) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(geometry_);
  }
  if (geometry) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      geometry = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    set_has_geometry();
  } else {
    clear_has_geometry();
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.ObjectTrafficLight.geometry)
}

// map<uint32, .holo.map.proto.common.GeoBox> extra_geometry = 34;
inline int ObjectTrafficLight::extra_geometry_size() const {
  return extra_geometry_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >&
ObjectTrafficLight::extra_geometry() const {
  // @@protoc_insertion_point(field_map:holo.map.proto.base.ObjectTrafficLight.extra_geometry)
  return extra_geometry_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::holo::map::proto::common::GeoBox >*
ObjectTrafficLight::mutable_extra_geometry() {
  // @@protoc_insertion_point(field_mutable_map:holo.map.proto.base.ObjectTrafficLight.extra_geometry)
  return extra_geometry_.MutableMap();
}

// optional .holo.map.proto.common.Coordinate coordinate = 35;
inline bool ObjectTrafficLight::has_coordinate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjectTrafficLight::set_has_coordinate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjectTrafficLight::clear_has_coordinate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::Coordinate& ObjectTrafficLight::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::holo::map::proto::common::Coordinate& ObjectTrafficLight::coordinate() const {
  const ::holo::map::proto::common::Coordinate* p = coordinate_;
  // @@protoc_insertion_point(field_get:holo.map.proto.base.ObjectTrafficLight.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::Coordinate*>(
      &::holo::map::proto::common::_Coordinate_default_instance_);
}
inline ::holo::map::proto::common::Coordinate* ObjectTrafficLight::release_coordinate() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.ObjectTrafficLight.coordinate)
  clear_has_coordinate();
  ::holo::map::proto::common::Coordinate* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::Coordinate* ObjectTrafficLight::mutable_coordinate() {
  set_has_coordinate();
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::Coordinate>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.ObjectTrafficLight.coordinate)
  return coordinate_;
}
inline void ObjectTrafficLight::set_allocated_coordinate(::holo::map::proto::common::Coordinate* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    set_has_coordinate();
  } else {
    clear_has_coordinate();
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.ObjectTrafficLight.coordinate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightState>() {
  return ::holo::map::proto::base::ObjectTrafficLight_TrafficLightState_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLongitudinalPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLongitudinalPosition>() {
  return ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLongitudinalPosition_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLateralPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLateralPosition>() {
  return ::holo::map::proto::base::ObjectTrafficLight_TrafficLightLateralPosition_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightContentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightContentType>() {
  return ::holo::map::proto::base::ObjectTrafficLight_TrafficLightContentType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightOrientation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::ObjectTrafficLight_TrafficLightOrientation>() {
  return ::holo::map::proto::base::ObjectTrafficLight_TrafficLightOrientation_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fobject_5ftraffic_5flight_2eproto
