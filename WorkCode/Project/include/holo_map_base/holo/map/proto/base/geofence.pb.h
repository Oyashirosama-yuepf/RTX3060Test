// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/base/geofence.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fgeofence_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fgeofence_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/interval_uint64.pb.h"
#include "holo/map/proto/base/geofence_feature_info.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fbase_2fgeofence_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fbase_2fgeofence_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fbase_2fgeofence_2eproto
namespace holo {
namespace map {
namespace proto {
namespace base {
class Geofence;
class GeofenceDefaultTypeInternal;
extern GeofenceDefaultTypeInternal _Geofence_default_instance_;
}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::base::Geofence* Arena::CreateMaybeMessage<::holo::map::proto::base::Geofence>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace base {

enum Geofence_Type {
  Geofence_Type_TYPE_UNKNOWN = 0,
  Geofence_Type_TYPE_REGION_COMMON = 1,
  Geofence_Type_TYPE_REGION_COUNTRY = 2,
  Geofence_Type_TYPE_REGION_PROVINCE = 3,
  Geofence_Type_TYPE_REGION_CITY = 4,
  Geofence_Type_TYPE_REGION_COUNTY = 5,
  Geofence_Type_TYPE_INTERVAL_COMMON = 6
};
bool Geofence_Type_IsValid(int value);
const Geofence_Type Geofence_Type_Type_MIN = Geofence_Type_TYPE_UNKNOWN;
const Geofence_Type Geofence_Type_Type_MAX = Geofence_Type_TYPE_INTERVAL_COMMON;
const int Geofence_Type_Type_ARRAYSIZE = Geofence_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Geofence_Type_descriptor();
inline const ::std::string& Geofence_Type_Name(Geofence_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Geofence_Type_descriptor(), value);
}
inline bool Geofence_Type_Parse(
    const ::std::string& name, Geofence_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Geofence_Type>(
    Geofence_Type_descriptor(), name, value);
}
enum Geofence_Geotype {
  Geofence_Geotype_GEOTYPE_UNKNOWN = 0,
  Geofence_Geotype_GEOTYPE_POLYLINE = 1,
  Geofence_Geotype_GEOTYPE_POLYGON = 2
};
bool Geofence_Geotype_IsValid(int value);
const Geofence_Geotype Geofence_Geotype_Geotype_MIN = Geofence_Geotype_GEOTYPE_UNKNOWN;
const Geofence_Geotype Geofence_Geotype_Geotype_MAX = Geofence_Geotype_GEOTYPE_POLYGON;
const int Geofence_Geotype_Geotype_ARRAYSIZE = Geofence_Geotype_Geotype_MAX + 1;

const ::google::protobuf::EnumDescriptor* Geofence_Geotype_descriptor();
inline const ::std::string& Geofence_Geotype_Name(Geofence_Geotype value) {
  return ::google::protobuf::internal::NameOfEnum(
    Geofence_Geotype_descriptor(), value);
}
inline bool Geofence_Geotype_Parse(
    const ::std::string& name, Geofence_Geotype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Geofence_Geotype>(
    Geofence_Geotype_descriptor(), name, value);
}
enum Geofence_FeatureType {
  Geofence_FeatureType_FEATURE_TYPE_LANE = 1,
  Geofence_FeatureType_FEATURE_TYPE_LINK = 2,
  Geofence_FeatureType_FEATURE_TYPE_ROAD = 3
};
bool Geofence_FeatureType_IsValid(int value);
const Geofence_FeatureType Geofence_FeatureType_FeatureType_MIN = Geofence_FeatureType_FEATURE_TYPE_LANE;
const Geofence_FeatureType Geofence_FeatureType_FeatureType_MAX = Geofence_FeatureType_FEATURE_TYPE_ROAD;
const int Geofence_FeatureType_FeatureType_ARRAYSIZE = Geofence_FeatureType_FeatureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Geofence_FeatureType_descriptor();
inline const ::std::string& Geofence_FeatureType_Name(Geofence_FeatureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Geofence_FeatureType_descriptor(), value);
}
inline bool Geofence_FeatureType_Parse(
    const ::std::string& name, Geofence_FeatureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Geofence_FeatureType>(
    Geofence_FeatureType_descriptor(), name, value);
}
enum Geofence_ValidType {
  Geofence_ValidType_VALID_TYPE_UNKNOWN = 0,
  Geofence_ValidType_VALID_TYPE_PERMANENT = 1,
  Geofence_ValidType_VALID_TYPE_FROM_A_CERTAIN_POINT = 2,
  Geofence_ValidType_VALID_TYPE_INTERMITTENT = 3,
  Geofence_ValidType_VALID_TYPE_PERIODIC = 4
};
bool Geofence_ValidType_IsValid(int value);
const Geofence_ValidType Geofence_ValidType_ValidType_MIN = Geofence_ValidType_VALID_TYPE_UNKNOWN;
const Geofence_ValidType Geofence_ValidType_ValidType_MAX = Geofence_ValidType_VALID_TYPE_PERIODIC;
const int Geofence_ValidType_ValidType_ARRAYSIZE = Geofence_ValidType_ValidType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Geofence_ValidType_descriptor();
inline const ::std::string& Geofence_ValidType_Name(Geofence_ValidType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Geofence_ValidType_descriptor(), value);
}
inline bool Geofence_ValidType_Parse(
    const ::std::string& name, Geofence_ValidType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Geofence_ValidType>(
    Geofence_ValidType_descriptor(), name, value);
}
// ===================================================================

class Geofence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.base.Geofence) */ {
 public:
  Geofence();
  virtual ~Geofence();

  Geofence(const Geofence& from);

  inline Geofence& operator=(const Geofence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Geofence(Geofence&& from) noexcept
    : Geofence() {
    *this = ::std::move(from);
  }

  inline Geofence& operator=(Geofence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geofence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geofence* internal_default_instance() {
    return reinterpret_cast<const Geofence*>(
               &_Geofence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Geofence* other);
  friend void swap(Geofence& a, Geofence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Geofence* New() const final {
    return CreateMaybeMessage<Geofence>(NULL);
  }

  Geofence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Geofence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Geofence& from);
  void MergeFrom(const Geofence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geofence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Geofence_Type Type;
  static const Type TYPE_UNKNOWN =
    Geofence_Type_TYPE_UNKNOWN;
  static const Type TYPE_REGION_COMMON =
    Geofence_Type_TYPE_REGION_COMMON;
  static const Type TYPE_REGION_COUNTRY =
    Geofence_Type_TYPE_REGION_COUNTRY;
  static const Type TYPE_REGION_PROVINCE =
    Geofence_Type_TYPE_REGION_PROVINCE;
  static const Type TYPE_REGION_CITY =
    Geofence_Type_TYPE_REGION_CITY;
  static const Type TYPE_REGION_COUNTY =
    Geofence_Type_TYPE_REGION_COUNTY;
  static const Type TYPE_INTERVAL_COMMON =
    Geofence_Type_TYPE_INTERVAL_COMMON;
  static inline bool Type_IsValid(int value) {
    return Geofence_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Geofence_Type_Type_MIN;
  static const Type Type_MAX =
    Geofence_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Geofence_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Geofence_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Geofence_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Geofence_Type_Parse(name, value);
  }

  typedef Geofence_Geotype Geotype;
  static const Geotype GEOTYPE_UNKNOWN =
    Geofence_Geotype_GEOTYPE_UNKNOWN;
  static const Geotype GEOTYPE_POLYLINE =
    Geofence_Geotype_GEOTYPE_POLYLINE;
  static const Geotype GEOTYPE_POLYGON =
    Geofence_Geotype_GEOTYPE_POLYGON;
  static inline bool Geotype_IsValid(int value) {
    return Geofence_Geotype_IsValid(value);
  }
  static const Geotype Geotype_MIN =
    Geofence_Geotype_Geotype_MIN;
  static const Geotype Geotype_MAX =
    Geofence_Geotype_Geotype_MAX;
  static const int Geotype_ARRAYSIZE =
    Geofence_Geotype_Geotype_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Geotype_descriptor() {
    return Geofence_Geotype_descriptor();
  }
  static inline const ::std::string& Geotype_Name(Geotype value) {
    return Geofence_Geotype_Name(value);
  }
  static inline bool Geotype_Parse(const ::std::string& name,
      Geotype* value) {
    return Geofence_Geotype_Parse(name, value);
  }

  typedef Geofence_FeatureType FeatureType;
  static const FeatureType FEATURE_TYPE_LANE =
    Geofence_FeatureType_FEATURE_TYPE_LANE;
  static const FeatureType FEATURE_TYPE_LINK =
    Geofence_FeatureType_FEATURE_TYPE_LINK;
  static const FeatureType FEATURE_TYPE_ROAD =
    Geofence_FeatureType_FEATURE_TYPE_ROAD;
  static inline bool FeatureType_IsValid(int value) {
    return Geofence_FeatureType_IsValid(value);
  }
  static const FeatureType FeatureType_MIN =
    Geofence_FeatureType_FeatureType_MIN;
  static const FeatureType FeatureType_MAX =
    Geofence_FeatureType_FeatureType_MAX;
  static const int FeatureType_ARRAYSIZE =
    Geofence_FeatureType_FeatureType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FeatureType_descriptor() {
    return Geofence_FeatureType_descriptor();
  }
  static inline const ::std::string& FeatureType_Name(FeatureType value) {
    return Geofence_FeatureType_Name(value);
  }
  static inline bool FeatureType_Parse(const ::std::string& name,
      FeatureType* value) {
    return Geofence_FeatureType_Parse(name, value);
  }

  typedef Geofence_ValidType ValidType;
  static const ValidType VALID_TYPE_UNKNOWN =
    Geofence_ValidType_VALID_TYPE_UNKNOWN;
  static const ValidType VALID_TYPE_PERMANENT =
    Geofence_ValidType_VALID_TYPE_PERMANENT;
  static const ValidType VALID_TYPE_FROM_A_CERTAIN_POINT =
    Geofence_ValidType_VALID_TYPE_FROM_A_CERTAIN_POINT;
  static const ValidType VALID_TYPE_INTERMITTENT =
    Geofence_ValidType_VALID_TYPE_INTERMITTENT;
  static const ValidType VALID_TYPE_PERIODIC =
    Geofence_ValidType_VALID_TYPE_PERIODIC;
  static inline bool ValidType_IsValid(int value) {
    return Geofence_ValidType_IsValid(value);
  }
  static const ValidType ValidType_MIN =
    Geofence_ValidType_ValidType_MIN;
  static const ValidType ValidType_MAX =
    Geofence_ValidType_ValidType_MAX;
  static const int ValidType_ARRAYSIZE =
    Geofence_ValidType_ValidType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValidType_descriptor() {
    return Geofence_ValidType_descriptor();
  }
  static inline const ::std::string& ValidType_Name(ValidType value) {
    return Geofence_ValidType_Name(value);
  }
  static inline bool ValidType_Parse(const ::std::string& name,
      ValidType* value) {
    return Geofence_ValidType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 tile_ids = 12 [packed = true];
  int tile_ids_size() const;
  void clear_tile_ids();
  static const int kTileIdsFieldNumber = 12;
  ::google::protobuf::uint64 tile_ids(int index) const;
  void set_tile_ids(int index, ::google::protobuf::uint64 value);
  void add_tile_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tile_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tile_ids();

  // repeated .holo.map.proto.base.GeofenceFeatureInfo feature_infos = 14;
  int feature_infos_size() const;
  void clear_feature_infos();
  static const int kFeatureInfosFieldNumber = 14;
  ::holo::map::proto::base::GeofenceFeatureInfo* mutable_feature_infos(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::GeofenceFeatureInfo >*
      mutable_feature_infos();
  const ::holo::map::proto::base::GeofenceFeatureInfo& feature_infos(int index) const;
  ::holo::map::proto::base::GeofenceFeatureInfo* add_feature_infos();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::GeofenceFeatureInfo >&
      feature_infos() const;

  // repeated .holo.map.proto.common.IntervalUint64 valid_time = 17;
  int valid_time_size() const;
  void clear_valid_time();
  static const int kValidTimeFieldNumber = 17;
  ::holo::map::proto::common::IntervalUint64* mutable_valid_time(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >*
      mutable_valid_time();
  const ::holo::map::proto::common::IntervalUint64& valid_time(int index) const;
  ::holo::map::proto::common::IntervalUint64* add_valid_time();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >&
      valid_time() const;

  // optional string version = 4;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional string geometry = 10;
  bool has_geometry() const;
  void clear_geometry();
  static const int kGeometryFieldNumber = 10;
  const ::std::string& geometry() const;
  void set_geometry(const ::std::string& value);
  #if LANG_CXX11
  void set_geometry(::std::string&& value);
  #endif
  void set_geometry(const char* value);
  void set_geometry(const char* value, size_t size);
  ::std::string* mutable_geometry();
  ::std::string* release_geometry();
  void set_allocated_geometry(::std::string* geometry);

  // optional uint64 geofence_id = 1;
  bool has_geofence_id() const;
  void clear_geofence_id();
  static const int kGeofenceIdFieldNumber = 1;
  ::google::protobuf::uint64 geofence_id() const;
  void set_geofence_id(::google::protobuf::uint64 value);

  // optional uint32 function = 2;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 2;
  ::google::protobuf::uint32 function() const;
  void set_function(::google::protobuf::uint32 value);

  // optional .holo.map.proto.base.Geofence.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::holo::map::proto::base::Geofence_Type type() const;
  void set_type(::holo::map::proto::base::Geofence_Type value);

  // optional uint32 country = 5;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 5;
  ::google::protobuf::uint32 country() const;
  void set_country(::google::protobuf::uint32 value);

  // optional uint32 province = 6;
  bool has_province() const;
  void clear_province();
  static const int kProvinceFieldNumber = 6;
  ::google::protobuf::uint32 province() const;
  void set_province(::google::protobuf::uint32 value);

  // optional uint32 city = 7;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 7;
  ::google::protobuf::uint32 city() const;
  void set_city(::google::protobuf::uint32 value);

  // optional uint32 county = 8;
  bool has_county() const;
  void clear_county();
  static const int kCountyFieldNumber = 8;
  ::google::protobuf::uint32 county() const;
  void set_county(::google::protobuf::uint32 value);

  // optional .holo.map.proto.base.Geofence.Geotype geotype = 9;
  bool has_geotype() const;
  void clear_geotype();
  static const int kGeotypeFieldNumber = 9;
  ::holo::map::proto::base::Geofence_Geotype geotype() const;
  void set_geotype(::holo::map::proto::base::Geofence_Geotype value);

  // optional uint32 level = 11;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 11;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional bool enable = 15;
  bool has_enable() const;
  void clear_enable();
  static const int kEnableFieldNumber = 15;
  bool enable() const;
  void set_enable(bool value);

  // optional .holo.map.proto.base.Geofence.ValidType valid_type = 16;
  bool has_valid_type() const;
  void clear_valid_type();
  static const int kValidTypeFieldNumber = 16;
  ::holo::map::proto::base::Geofence_ValidType valid_type() const;
  void set_valid_type(::holo::map::proto::base::Geofence_ValidType value);

  // optional uint64 create_timestamp = 18;
  bool has_create_timestamp() const;
  void clear_create_timestamp();
  static const int kCreateTimestampFieldNumber = 18;
  ::google::protobuf::uint64 create_timestamp() const;
  void set_create_timestamp(::google::protobuf::uint64 value);

  // optional uint64 update_timestamp = 19;
  bool has_update_timestamp() const;
  void clear_update_timestamp();
  static const int kUpdateTimestampFieldNumber = 19;
  ::google::protobuf::uint64 update_timestamp() const;
  void set_update_timestamp(::google::protobuf::uint64 value);

  // optional .holo.map.proto.base.Geofence.FeatureType feature_type = 13;
  bool has_feature_type() const;
  void clear_feature_type();
  static const int kFeatureTypeFieldNumber = 13;
  ::holo::map::proto::base::Geofence_FeatureType feature_type() const;
  void set_feature_type(::holo::map::proto::base::Geofence_FeatureType value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.base.Geofence)
 private:
  void set_has_geofence_id();
  void clear_has_geofence_id();
  void set_has_function();
  void clear_has_function();
  void set_has_type();
  void clear_has_type();
  void set_has_version();
  void clear_has_version();
  void set_has_country();
  void clear_has_country();
  void set_has_province();
  void clear_has_province();
  void set_has_city();
  void clear_has_city();
  void set_has_county();
  void clear_has_county();
  void set_has_geotype();
  void clear_has_geotype();
  void set_has_geometry();
  void clear_has_geometry();
  void set_has_level();
  void clear_has_level();
  void set_has_feature_type();
  void clear_has_feature_type();
  void set_has_enable();
  void clear_has_enable();
  void set_has_valid_type();
  void clear_has_valid_type();
  void set_has_create_timestamp();
  void clear_has_create_timestamp();
  void set_has_update_timestamp();
  void clear_has_update_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tile_ids_;
  mutable int _tile_ids_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::GeofenceFeatureInfo > feature_infos_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 > valid_time_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr geometry_;
  ::google::protobuf::uint64 geofence_id_;
  ::google::protobuf::uint32 function_;
  int type_;
  ::google::protobuf::uint32 country_;
  ::google::protobuf::uint32 province_;
  ::google::protobuf::uint32 city_;
  ::google::protobuf::uint32 county_;
  int geotype_;
  ::google::protobuf::uint32 level_;
  bool enable_;
  int valid_type_;
  ::google::protobuf::uint64 create_timestamp_;
  ::google::protobuf::uint64 update_timestamp_;
  int feature_type_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fbase_2fgeofence_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Geofence

// optional uint64 geofence_id = 1;
inline bool Geofence::has_geofence_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Geofence::set_has_geofence_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Geofence::clear_has_geofence_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Geofence::clear_geofence_id() {
  geofence_id_ = GOOGLE_ULONGLONG(0);
  clear_has_geofence_id();
}
inline ::google::protobuf::uint64 Geofence::geofence_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.geofence_id)
  return geofence_id_;
}
inline void Geofence::set_geofence_id(::google::protobuf::uint64 value) {
  set_has_geofence_id();
  geofence_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.geofence_id)
}

// optional uint32 function = 2;
inline bool Geofence::has_function() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Geofence::set_has_function() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Geofence::clear_has_function() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Geofence::clear_function() {
  function_ = 0u;
  clear_has_function();
}
inline ::google::protobuf::uint32 Geofence::function() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.function)
  return function_;
}
inline void Geofence::set_function(::google::protobuf::uint32 value) {
  set_has_function();
  function_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.function)
}

// optional .holo.map.proto.base.Geofence.Type type = 3;
inline bool Geofence::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Geofence::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Geofence::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Geofence::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::holo::map::proto::base::Geofence_Type Geofence::type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.type)
  return static_cast< ::holo::map::proto::base::Geofence_Type >(type_);
}
inline void Geofence::set_type(::holo::map::proto::base::Geofence_Type value) {
  assert(::holo::map::proto::base::Geofence_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.type)
}

// optional string version = 4;
inline bool Geofence::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geofence::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geofence::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geofence::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& Geofence::version() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.version)
  return version_.GetNoArena();
}
inline void Geofence::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.version)
}
#if LANG_CXX11
inline void Geofence::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.map.proto.base.Geofence.version)
}
#endif
inline void Geofence::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.map.proto.base.Geofence.version)
}
inline void Geofence::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.map.proto.base.Geofence.version)
}
inline ::std::string* Geofence::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Geofence.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geofence::release_version() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.Geofence.version)
  if (!has_version()) {
    return NULL;
  }
  clear_has_version();
  return version_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geofence::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.Geofence.version)
}

// optional uint32 country = 5;
inline bool Geofence::has_country() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Geofence::set_has_country() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Geofence::clear_has_country() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Geofence::clear_country() {
  country_ = 0u;
  clear_has_country();
}
inline ::google::protobuf::uint32 Geofence::country() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.country)
  return country_;
}
inline void Geofence::set_country(::google::protobuf::uint32 value) {
  set_has_country();
  country_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.country)
}

// optional uint32 province = 6;
inline bool Geofence::has_province() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Geofence::set_has_province() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Geofence::clear_has_province() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Geofence::clear_province() {
  province_ = 0u;
  clear_has_province();
}
inline ::google::protobuf::uint32 Geofence::province() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.province)
  return province_;
}
inline void Geofence::set_province(::google::protobuf::uint32 value) {
  set_has_province();
  province_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.province)
}

// optional uint32 city = 7;
inline bool Geofence::has_city() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Geofence::set_has_city() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Geofence::clear_has_city() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Geofence::clear_city() {
  city_ = 0u;
  clear_has_city();
}
inline ::google::protobuf::uint32 Geofence::city() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.city)
  return city_;
}
inline void Geofence::set_city(::google::protobuf::uint32 value) {
  set_has_city();
  city_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.city)
}

// optional uint32 county = 8;
inline bool Geofence::has_county() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Geofence::set_has_county() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Geofence::clear_has_county() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Geofence::clear_county() {
  county_ = 0u;
  clear_has_county();
}
inline ::google::protobuf::uint32 Geofence::county() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.county)
  return county_;
}
inline void Geofence::set_county(::google::protobuf::uint32 value) {
  set_has_county();
  county_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.county)
}

// optional .holo.map.proto.base.Geofence.Geotype geotype = 9;
inline bool Geofence::has_geotype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Geofence::set_has_geotype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Geofence::clear_has_geotype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Geofence::clear_geotype() {
  geotype_ = 0;
  clear_has_geotype();
}
inline ::holo::map::proto::base::Geofence_Geotype Geofence::geotype() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.geotype)
  return static_cast< ::holo::map::proto::base::Geofence_Geotype >(geotype_);
}
inline void Geofence::set_geotype(::holo::map::proto::base::Geofence_Geotype value) {
  assert(::holo::map::proto::base::Geofence_Geotype_IsValid(value));
  set_has_geotype();
  geotype_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.geotype)
}

// optional string geometry = 10;
inline bool Geofence::has_geometry() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geofence::set_has_geometry() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geofence::clear_has_geometry() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geofence::clear_geometry() {
  geometry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_geometry();
}
inline const ::std::string& Geofence::geometry() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.geometry)
  return geometry_.GetNoArena();
}
inline void Geofence::set_geometry(const ::std::string& value) {
  set_has_geometry();
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.geometry)
}
#if LANG_CXX11
inline void Geofence::set_geometry(::std::string&& value) {
  set_has_geometry();
  geometry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.map.proto.base.Geofence.geometry)
}
#endif
inline void Geofence::set_geometry(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_geometry();
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.map.proto.base.Geofence.geometry)
}
inline void Geofence::set_geometry(const char* value, size_t size) {
  set_has_geometry();
  geometry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.map.proto.base.Geofence.geometry)
}
inline ::std::string* Geofence::mutable_geometry() {
  set_has_geometry();
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Geofence.geometry)
  return geometry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Geofence::release_geometry() {
  // @@protoc_insertion_point(field_release:holo.map.proto.base.Geofence.geometry)
  if (!has_geometry()) {
    return NULL;
  }
  clear_has_geometry();
  return geometry_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Geofence::set_allocated_geometry(::std::string* geometry) {
  if (geometry != NULL) {
    set_has_geometry();
  } else {
    clear_has_geometry();
  }
  geometry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geometry);
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.base.Geofence.geometry)
}

// optional uint32 level = 11;
inline bool Geofence::has_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Geofence::set_has_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Geofence::clear_has_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Geofence::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Geofence::level() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.level)
  return level_;
}
inline void Geofence::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.level)
}

// repeated uint64 tile_ids = 12 [packed = true];
inline int Geofence::tile_ids_size() const {
  return tile_ids_.size();
}
inline void Geofence::clear_tile_ids() {
  tile_ids_.Clear();
}
inline ::google::protobuf::uint64 Geofence::tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.tile_ids)
  return tile_ids_.Get(index);
}
inline void Geofence::set_tile_ids(int index, ::google::protobuf::uint64 value) {
  tile_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.tile_ids)
}
inline void Geofence::add_tile_ids(::google::protobuf::uint64 value) {
  tile_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Geofence.tile_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Geofence::tile_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Geofence.tile_ids)
  return tile_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Geofence::mutable_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Geofence.tile_ids)
  return &tile_ids_;
}

// optional .holo.map.proto.base.Geofence.FeatureType feature_type = 13;
inline bool Geofence::has_feature_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Geofence::set_has_feature_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Geofence::clear_has_feature_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Geofence::clear_feature_type() {
  feature_type_ = 1;
  clear_has_feature_type();
}
inline ::holo::map::proto::base::Geofence_FeatureType Geofence::feature_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.feature_type)
  return static_cast< ::holo::map::proto::base::Geofence_FeatureType >(feature_type_);
}
inline void Geofence::set_feature_type(::holo::map::proto::base::Geofence_FeatureType value) {
  assert(::holo::map::proto::base::Geofence_FeatureType_IsValid(value));
  set_has_feature_type();
  feature_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.feature_type)
}

// repeated .holo.map.proto.base.GeofenceFeatureInfo feature_infos = 14;
inline int Geofence::feature_infos_size() const {
  return feature_infos_.size();
}
inline ::holo::map::proto::base::GeofenceFeatureInfo* Geofence::mutable_feature_infos(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Geofence.feature_infos)
  return feature_infos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::GeofenceFeatureInfo >*
Geofence::mutable_feature_infos() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Geofence.feature_infos)
  return &feature_infos_;
}
inline const ::holo::map::proto::base::GeofenceFeatureInfo& Geofence::feature_infos(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.feature_infos)
  return feature_infos_.Get(index);
}
inline ::holo::map::proto::base::GeofenceFeatureInfo* Geofence::add_feature_infos() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Geofence.feature_infos)
  return feature_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::base::GeofenceFeatureInfo >&
Geofence::feature_infos() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Geofence.feature_infos)
  return feature_infos_;
}

// optional bool enable = 15;
inline bool Geofence::has_enable() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Geofence::set_has_enable() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Geofence::clear_has_enable() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Geofence::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool Geofence::enable() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.enable)
  return enable_;
}
inline void Geofence::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.enable)
}

// optional .holo.map.proto.base.Geofence.ValidType valid_type = 16;
inline bool Geofence::has_valid_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Geofence::set_has_valid_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Geofence::clear_has_valid_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Geofence::clear_valid_type() {
  valid_type_ = 0;
  clear_has_valid_type();
}
inline ::holo::map::proto::base::Geofence_ValidType Geofence::valid_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.valid_type)
  return static_cast< ::holo::map::proto::base::Geofence_ValidType >(valid_type_);
}
inline void Geofence::set_valid_type(::holo::map::proto::base::Geofence_ValidType value) {
  assert(::holo::map::proto::base::Geofence_ValidType_IsValid(value));
  set_has_valid_type();
  valid_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.valid_type)
}

// repeated .holo.map.proto.common.IntervalUint64 valid_time = 17;
inline int Geofence::valid_time_size() const {
  return valid_time_.size();
}
inline ::holo::map::proto::common::IntervalUint64* Geofence::mutable_valid_time(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.base.Geofence.valid_time)
  return valid_time_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >*
Geofence::mutable_valid_time() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.base.Geofence.valid_time)
  return &valid_time_;
}
inline const ::holo::map::proto::common::IntervalUint64& Geofence::valid_time(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.valid_time)
  return valid_time_.Get(index);
}
inline ::holo::map::proto::common::IntervalUint64* Geofence::add_valid_time() {
  // @@protoc_insertion_point(field_add:holo.map.proto.base.Geofence.valid_time)
  return valid_time_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IntervalUint64 >&
Geofence::valid_time() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.base.Geofence.valid_time)
  return valid_time_;
}

// optional uint64 create_timestamp = 18;
inline bool Geofence::has_create_timestamp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Geofence::set_has_create_timestamp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Geofence::clear_has_create_timestamp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Geofence::clear_create_timestamp() {
  create_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_create_timestamp();
}
inline ::google::protobuf::uint64 Geofence::create_timestamp() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.create_timestamp)
  return create_timestamp_;
}
inline void Geofence::set_create_timestamp(::google::protobuf::uint64 value) {
  set_has_create_timestamp();
  create_timestamp_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.create_timestamp)
}

// optional uint64 update_timestamp = 19;
inline bool Geofence::has_update_timestamp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Geofence::set_has_update_timestamp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Geofence::clear_has_update_timestamp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Geofence::clear_update_timestamp() {
  update_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_update_timestamp();
}
inline ::google::protobuf::uint64 Geofence::update_timestamp() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.base.Geofence.update_timestamp)
  return update_timestamp_;
}
inline void Geofence::set_update_timestamp(::google::protobuf::uint64 value) {
  set_has_update_timestamp();
  update_timestamp_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.base.Geofence.update_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::base::Geofence_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Geofence_Type>() {
  return ::holo::map::proto::base::Geofence_Type_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::Geofence_Geotype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Geofence_Geotype>() {
  return ::holo::map::proto::base::Geofence_Geotype_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::Geofence_FeatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Geofence_FeatureType>() {
  return ::holo::map::proto::base::Geofence_FeatureType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::base::Geofence_ValidType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::base::Geofence_ValidType>() {
  return ::holo::map::proto::base::Geofence_ValidType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fbase_2fgeofence_2eproto
