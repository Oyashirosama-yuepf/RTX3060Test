// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/common/connection_v2.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fconnection_5fv2_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fconnection_5fv2_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/geo_point.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fcommon_2fconnection_5fv2_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fcommon_2fconnection_5fv2_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fcommon_2fconnection_5fv2_2eproto
namespace holo {
namespace map {
namespace proto {
namespace common {
class ConnectionV2;
class ConnectionV2DefaultTypeInternal;
extern ConnectionV2DefaultTypeInternal _ConnectionV2_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::common::ConnectionV2* Arena::CreateMaybeMessage<::holo::map::proto::common::ConnectionV2>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace common {

enum ConnectionV2_ConnectedLevel {
  ConnectionV2_ConnectedLevel_CONNECTED_LEVEL_LANE = 0,
  ConnectionV2_ConnectedLevel_CONNECTED_LEVEL_LINK = 1
};
bool ConnectionV2_ConnectedLevel_IsValid(int value);
const ConnectionV2_ConnectedLevel ConnectionV2_ConnectedLevel_ConnectedLevel_MIN = ConnectionV2_ConnectedLevel_CONNECTED_LEVEL_LANE;
const ConnectionV2_ConnectedLevel ConnectionV2_ConnectedLevel_ConnectedLevel_MAX = ConnectionV2_ConnectedLevel_CONNECTED_LEVEL_LINK;
const int ConnectionV2_ConnectedLevel_ConnectedLevel_ARRAYSIZE = ConnectionV2_ConnectedLevel_ConnectedLevel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConnectionV2_ConnectedLevel_descriptor();
inline const ::std::string& ConnectionV2_ConnectedLevel_Name(ConnectionV2_ConnectedLevel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConnectionV2_ConnectedLevel_descriptor(), value);
}
inline bool ConnectionV2_ConnectedLevel_Parse(
    const ::std::string& name, ConnectionV2_ConnectedLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionV2_ConnectedLevel>(
    ConnectionV2_ConnectedLevel_descriptor(), name, value);
}
enum ConnectionV2_ContractPointType {
  ConnectionV2_ContractPointType_CONTRACT_POINT_TYPE_START = 0,
  ConnectionV2_ContractPointType_CONTRACT_POINT_TYPE_END = 1
};
bool ConnectionV2_ContractPointType_IsValid(int value);
const ConnectionV2_ContractPointType ConnectionV2_ContractPointType_ContractPointType_MIN = ConnectionV2_ContractPointType_CONTRACT_POINT_TYPE_START;
const ConnectionV2_ContractPointType ConnectionV2_ContractPointType_ContractPointType_MAX = ConnectionV2_ContractPointType_CONTRACT_POINT_TYPE_END;
const int ConnectionV2_ContractPointType_ContractPointType_ARRAYSIZE = ConnectionV2_ContractPointType_ContractPointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConnectionV2_ContractPointType_descriptor();
inline const ::std::string& ConnectionV2_ContractPointType_Name(ConnectionV2_ContractPointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConnectionV2_ContractPointType_descriptor(), value);
}
inline bool ConnectionV2_ContractPointType_Parse(
    const ::std::string& name, ConnectionV2_ContractPointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionV2_ContractPointType>(
    ConnectionV2_ContractPointType_descriptor(), name, value);
}
enum ConnectionV2_ConnectType {
  ConnectionV2_ConnectType_CONNECT_TYPE_DEFAULT = 0,
  ConnectionV2_ConnectType_CONNECT_TYPE_VIRTUAL = 1,
  ConnectionV2_ConnectType_CONNECT_TYPE_DIRECT = 2
};
bool ConnectionV2_ConnectType_IsValid(int value);
const ConnectionV2_ConnectType ConnectionV2_ConnectType_ConnectType_MIN = ConnectionV2_ConnectType_CONNECT_TYPE_DEFAULT;
const ConnectionV2_ConnectType ConnectionV2_ConnectType_ConnectType_MAX = ConnectionV2_ConnectType_CONNECT_TYPE_DIRECT;
const int ConnectionV2_ConnectType_ConnectType_ARRAYSIZE = ConnectionV2_ConnectType_ConnectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConnectionV2_ConnectType_descriptor();
inline const ::std::string& ConnectionV2_ConnectType_Name(ConnectionV2_ConnectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConnectionV2_ConnectType_descriptor(), value);
}
inline bool ConnectionV2_ConnectType_Parse(
    const ::std::string& name, ConnectionV2_ConnectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConnectionV2_ConnectType>(
    ConnectionV2_ConnectType_descriptor(), name, value);
}
// ===================================================================

class ConnectionV2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.common.ConnectionV2) */ {
 public:
  ConnectionV2();
  virtual ~ConnectionV2();

  ConnectionV2(const ConnectionV2& from);

  inline ConnectionV2& operator=(const ConnectionV2& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionV2(ConnectionV2&& from) noexcept
    : ConnectionV2() {
    *this = ::std::move(from);
  }

  inline ConnectionV2& operator=(ConnectionV2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionV2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionV2* internal_default_instance() {
    return reinterpret_cast<const ConnectionV2*>(
               &_ConnectionV2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ConnectionV2* other);
  friend void swap(ConnectionV2& a, ConnectionV2& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionV2* New() const final {
    return CreateMaybeMessage<ConnectionV2>(NULL);
  }

  ConnectionV2* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectionV2>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectionV2& from);
  void MergeFrom(const ConnectionV2& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionV2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConnectionV2_ConnectedLevel ConnectedLevel;
  static const ConnectedLevel CONNECTED_LEVEL_LANE =
    ConnectionV2_ConnectedLevel_CONNECTED_LEVEL_LANE;
  static const ConnectedLevel CONNECTED_LEVEL_LINK =
    ConnectionV2_ConnectedLevel_CONNECTED_LEVEL_LINK;
  static inline bool ConnectedLevel_IsValid(int value) {
    return ConnectionV2_ConnectedLevel_IsValid(value);
  }
  static const ConnectedLevel ConnectedLevel_MIN =
    ConnectionV2_ConnectedLevel_ConnectedLevel_MIN;
  static const ConnectedLevel ConnectedLevel_MAX =
    ConnectionV2_ConnectedLevel_ConnectedLevel_MAX;
  static const int ConnectedLevel_ARRAYSIZE =
    ConnectionV2_ConnectedLevel_ConnectedLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectedLevel_descriptor() {
    return ConnectionV2_ConnectedLevel_descriptor();
  }
  static inline const ::std::string& ConnectedLevel_Name(ConnectedLevel value) {
    return ConnectionV2_ConnectedLevel_Name(value);
  }
  static inline bool ConnectedLevel_Parse(const ::std::string& name,
      ConnectedLevel* value) {
    return ConnectionV2_ConnectedLevel_Parse(name, value);
  }

  typedef ConnectionV2_ContractPointType ContractPointType;
  static const ContractPointType CONTRACT_POINT_TYPE_START =
    ConnectionV2_ContractPointType_CONTRACT_POINT_TYPE_START;
  static const ContractPointType CONTRACT_POINT_TYPE_END =
    ConnectionV2_ContractPointType_CONTRACT_POINT_TYPE_END;
  static inline bool ContractPointType_IsValid(int value) {
    return ConnectionV2_ContractPointType_IsValid(value);
  }
  static const ContractPointType ContractPointType_MIN =
    ConnectionV2_ContractPointType_ContractPointType_MIN;
  static const ContractPointType ContractPointType_MAX =
    ConnectionV2_ContractPointType_ContractPointType_MAX;
  static const int ContractPointType_ARRAYSIZE =
    ConnectionV2_ContractPointType_ContractPointType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContractPointType_descriptor() {
    return ConnectionV2_ContractPointType_descriptor();
  }
  static inline const ::std::string& ContractPointType_Name(ContractPointType value) {
    return ConnectionV2_ContractPointType_Name(value);
  }
  static inline bool ContractPointType_Parse(const ::std::string& name,
      ContractPointType* value) {
    return ConnectionV2_ContractPointType_Parse(name, value);
  }

  typedef ConnectionV2_ConnectType ConnectType;
  static const ConnectType CONNECT_TYPE_DEFAULT =
    ConnectionV2_ConnectType_CONNECT_TYPE_DEFAULT;
  static const ConnectType CONNECT_TYPE_VIRTUAL =
    ConnectionV2_ConnectType_CONNECT_TYPE_VIRTUAL;
  static const ConnectType CONNECT_TYPE_DIRECT =
    ConnectionV2_ConnectType_CONNECT_TYPE_DIRECT;
  static inline bool ConnectType_IsValid(int value) {
    return ConnectionV2_ConnectType_IsValid(value);
  }
  static const ConnectType ConnectType_MIN =
    ConnectionV2_ConnectType_ConnectType_MIN;
  static const ConnectType ConnectType_MAX =
    ConnectionV2_ConnectType_ConnectType_MAX;
  static const int ConnectType_ARRAYSIZE =
    ConnectionV2_ConnectType_ConnectType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConnectType_descriptor() {
    return ConnectionV2_ConnectType_descriptor();
  }
  static inline const ::std::string& ConnectType_Name(ConnectType value) {
    return ConnectionV2_ConnectType_Name(value);
  }
  static inline bool ConnectType_Parse(const ::std::string& name,
      ConnectType* value) {
    return ConnectionV2_ConnectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint64 connected_ids = 1 [packed = true];
  int connected_ids_size() const;
  void clear_connected_ids();
  static const int kConnectedIdsFieldNumber = 1;
  ::google::protobuf::uint64 connected_ids(int index) const;
  void set_connected_ids(int index, ::google::protobuf::uint64 value);
  void add_connected_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      connected_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_connected_ids();

  // optional .holo.map.proto.common.GeoPoint incoming_node = 13;
  bool has_incoming_node() const;
  void clear_incoming_node();
  static const int kIncomingNodeFieldNumber = 13;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_incoming_node() const;
  public:
  const ::holo::map::proto::common::GeoPoint& incoming_node() const;
  ::holo::map::proto::common::GeoPoint* release_incoming_node();
  ::holo::map::proto::common::GeoPoint* mutable_incoming_node();
  void set_allocated_incoming_node(::holo::map::proto::common::GeoPoint* incoming_node);

  // optional .holo.map.proto.common.GeoPoint outgoing_node = 14;
  bool has_outgoing_node() const;
  void clear_outgoing_node();
  static const int kOutgoingNodeFieldNumber = 14;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_outgoing_node() const;
  public:
  const ::holo::map::proto::common::GeoPoint& outgoing_node() const;
  ::holo::map::proto::common::GeoPoint* release_outgoing_node();
  ::holo::map::proto::common::GeoPoint* mutable_outgoing_node();
  void set_allocated_outgoing_node(::holo::map::proto::common::GeoPoint* outgoing_node);

  // optional .holo.map.proto.common.ConnectionV2.ConnectedLevel connected_level = 2;
  bool has_connected_level() const;
  void clear_connected_level();
  static const int kConnectedLevelFieldNumber = 2;
  ::holo::map::proto::common::ConnectionV2_ConnectedLevel connected_level() const;
  void set_connected_level(::holo::map::proto::common::ConnectionV2_ConnectedLevel value);

  // optional .holo.map.proto.common.ConnectionV2.ContractPointType contract_point_type = 3;
  bool has_contract_point_type() const;
  void clear_contract_point_type();
  static const int kContractPointTypeFieldNumber = 3;
  ::holo::map::proto::common::ConnectionV2_ContractPointType contract_point_type() const;
  void set_contract_point_type(::holo::map::proto::common::ConnectionV2_ContractPointType value);

  // optional .holo.map.proto.common.ConnectionV2.ConnectType connect_type = 4;
  bool has_connect_type() const;
  void clear_connect_type();
  static const int kConnectTypeFieldNumber = 4;
  ::holo::map::proto::common::ConnectionV2_ConnectType connect_type() const;
  void set_connect_type(::holo::map::proto::common::ConnectionV2_ConnectType value);

  // optional uint64 incoming_id = 11;
  bool has_incoming_id() const;
  void clear_incoming_id();
  static const int kIncomingIdFieldNumber = 11;
  ::google::protobuf::uint64 incoming_id() const;
  void set_incoming_id(::google::protobuf::uint64 value);

  // optional uint64 outgoing_id = 12;
  bool has_outgoing_id() const;
  void clear_outgoing_id();
  static const int kOutgoingIdFieldNumber = 12;
  ::google::protobuf::uint64 outgoing_id() const;
  void set_outgoing_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.common.ConnectionV2)
 private:
  void set_has_connected_level();
  void clear_has_connected_level();
  void set_has_contract_point_type();
  void clear_has_contract_point_type();
  void set_has_connect_type();
  void clear_has_connect_type();
  void set_has_incoming_id();
  void clear_has_incoming_id();
  void set_has_outgoing_id();
  void clear_has_outgoing_id();
  void set_has_incoming_node();
  void clear_has_incoming_node();
  void set_has_outgoing_node();
  void clear_has_outgoing_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > connected_ids_;
  mutable int _connected_ids_cached_byte_size_;
  ::holo::map::proto::common::GeoPoint* incoming_node_;
  ::holo::map::proto::common::GeoPoint* outgoing_node_;
  int connected_level_;
  int contract_point_type_;
  int connect_type_;
  ::google::protobuf::uint64 incoming_id_;
  ::google::protobuf::uint64 outgoing_id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fcommon_2fconnection_5fv2_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionV2

// repeated uint64 connected_ids = 1 [packed = true];
inline int ConnectionV2::connected_ids_size() const {
  return connected_ids_.size();
}
inline void ConnectionV2::clear_connected_ids() {
  connected_ids_.Clear();
}
inline ::google::protobuf::uint64 ConnectionV2::connected_ids(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.ConnectionV2.connected_ids)
  return connected_ids_.Get(index);
}
inline void ConnectionV2::set_connected_ids(int index, ::google::protobuf::uint64 value) {
  connected_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:holo.map.proto.common.ConnectionV2.connected_ids)
}
inline void ConnectionV2::add_connected_ids(::google::protobuf::uint64 value) {
  connected_ids_.Add(value);
  // @@protoc_insertion_point(field_add:holo.map.proto.common.ConnectionV2.connected_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ConnectionV2::connected_ids() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.ConnectionV2.connected_ids)
  return connected_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ConnectionV2::mutable_connected_ids() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.ConnectionV2.connected_ids)
  return &connected_ids_;
}

// optional .holo.map.proto.common.ConnectionV2.ConnectedLevel connected_level = 2;
inline bool ConnectionV2::has_connected_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectionV2::set_has_connected_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectionV2::clear_has_connected_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectionV2::clear_connected_level() {
  connected_level_ = 0;
  clear_has_connected_level();
}
inline ::holo::map::proto::common::ConnectionV2_ConnectedLevel ConnectionV2::connected_level() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.ConnectionV2.connected_level)
  return static_cast< ::holo::map::proto::common::ConnectionV2_ConnectedLevel >(connected_level_);
}
inline void ConnectionV2::set_connected_level(::holo::map::proto::common::ConnectionV2_ConnectedLevel value) {
  assert(::holo::map::proto::common::ConnectionV2_ConnectedLevel_IsValid(value));
  set_has_connected_level();
  connected_level_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.ConnectionV2.connected_level)
}

// optional .holo.map.proto.common.ConnectionV2.ContractPointType contract_point_type = 3;
inline bool ConnectionV2::has_contract_point_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectionV2::set_has_contract_point_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectionV2::clear_has_contract_point_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectionV2::clear_contract_point_type() {
  contract_point_type_ = 0;
  clear_has_contract_point_type();
}
inline ::holo::map::proto::common::ConnectionV2_ContractPointType ConnectionV2::contract_point_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.ConnectionV2.contract_point_type)
  return static_cast< ::holo::map::proto::common::ConnectionV2_ContractPointType >(contract_point_type_);
}
inline void ConnectionV2::set_contract_point_type(::holo::map::proto::common::ConnectionV2_ContractPointType value) {
  assert(::holo::map::proto::common::ConnectionV2_ContractPointType_IsValid(value));
  set_has_contract_point_type();
  contract_point_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.ConnectionV2.contract_point_type)
}

// optional .holo.map.proto.common.ConnectionV2.ConnectType connect_type = 4;
inline bool ConnectionV2::has_connect_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConnectionV2::set_has_connect_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConnectionV2::clear_has_connect_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConnectionV2::clear_connect_type() {
  connect_type_ = 0;
  clear_has_connect_type();
}
inline ::holo::map::proto::common::ConnectionV2_ConnectType ConnectionV2::connect_type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.ConnectionV2.connect_type)
  return static_cast< ::holo::map::proto::common::ConnectionV2_ConnectType >(connect_type_);
}
inline void ConnectionV2::set_connect_type(::holo::map::proto::common::ConnectionV2_ConnectType value) {
  assert(::holo::map::proto::common::ConnectionV2_ConnectType_IsValid(value));
  set_has_connect_type();
  connect_type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.ConnectionV2.connect_type)
}

// optional uint64 incoming_id = 11;
inline bool ConnectionV2::has_incoming_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConnectionV2::set_has_incoming_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConnectionV2::clear_has_incoming_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConnectionV2::clear_incoming_id() {
  incoming_id_ = GOOGLE_ULONGLONG(0);
  clear_has_incoming_id();
}
inline ::google::protobuf::uint64 ConnectionV2::incoming_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.ConnectionV2.incoming_id)
  return incoming_id_;
}
inline void ConnectionV2::set_incoming_id(::google::protobuf::uint64 value) {
  set_has_incoming_id();
  incoming_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.ConnectionV2.incoming_id)
}

// optional uint64 outgoing_id = 12;
inline bool ConnectionV2::has_outgoing_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConnectionV2::set_has_outgoing_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConnectionV2::clear_has_outgoing_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConnectionV2::clear_outgoing_id() {
  outgoing_id_ = GOOGLE_ULONGLONG(0);
  clear_has_outgoing_id();
}
inline ::google::protobuf::uint64 ConnectionV2::outgoing_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.ConnectionV2.outgoing_id)
  return outgoing_id_;
}
inline void ConnectionV2::set_outgoing_id(::google::protobuf::uint64 value) {
  set_has_outgoing_id();
  outgoing_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.ConnectionV2.outgoing_id)
}

// optional .holo.map.proto.common.GeoPoint incoming_node = 13;
inline bool ConnectionV2::has_incoming_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectionV2::set_has_incoming_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectionV2::clear_has_incoming_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::GeoPoint& ConnectionV2::_internal_incoming_node() const {
  return *incoming_node_;
}
inline const ::holo::map::proto::common::GeoPoint& ConnectionV2::incoming_node() const {
  const ::holo::map::proto::common::GeoPoint* p = incoming_node_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.ConnectionV2.incoming_node)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* ConnectionV2::release_incoming_node() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.ConnectionV2.incoming_node)
  clear_has_incoming_node();
  ::holo::map::proto::common::GeoPoint* temp = incoming_node_;
  incoming_node_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* ConnectionV2::mutable_incoming_node() {
  set_has_incoming_node();
  if (incoming_node_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    incoming_node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.ConnectionV2.incoming_node)
  return incoming_node_;
}
inline void ConnectionV2::set_allocated_incoming_node(::holo::map::proto::common::GeoPoint* incoming_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(incoming_node_);
  }
  if (incoming_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      incoming_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, incoming_node, submessage_arena);
    }
    set_has_incoming_node();
  } else {
    clear_has_incoming_node();
  }
  incoming_node_ = incoming_node;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.ConnectionV2.incoming_node)
}

// optional .holo.map.proto.common.GeoPoint outgoing_node = 14;
inline bool ConnectionV2::has_outgoing_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectionV2::set_has_outgoing_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectionV2::clear_has_outgoing_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::GeoPoint& ConnectionV2::_internal_outgoing_node() const {
  return *outgoing_node_;
}
inline const ::holo::map::proto::common::GeoPoint& ConnectionV2::outgoing_node() const {
  const ::holo::map::proto::common::GeoPoint* p = outgoing_node_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.ConnectionV2.outgoing_node)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* ConnectionV2::release_outgoing_node() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.ConnectionV2.outgoing_node)
  clear_has_outgoing_node();
  ::holo::map::proto::common::GeoPoint* temp = outgoing_node_;
  outgoing_node_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* ConnectionV2::mutable_outgoing_node() {
  set_has_outgoing_node();
  if (outgoing_node_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    outgoing_node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.ConnectionV2.outgoing_node)
  return outgoing_node_;
}
inline void ConnectionV2::set_allocated_outgoing_node(::holo::map::proto::common::GeoPoint* outgoing_node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(outgoing_node_);
  }
  if (outgoing_node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      outgoing_node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, outgoing_node, submessage_arena);
    }
    set_has_outgoing_node();
  } else {
    clear_has_outgoing_node();
  }
  outgoing_node_ = outgoing_node;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.ConnectionV2.outgoing_node)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::common::ConnectionV2_ConnectedLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::common::ConnectionV2_ConnectedLevel>() {
  return ::holo::map::proto::common::ConnectionV2_ConnectedLevel_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::common::ConnectionV2_ContractPointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::common::ConnectionV2_ContractPointType>() {
  return ::holo::map::proto::common::ConnectionV2_ContractPointType_descriptor();
}
template <> struct is_proto_enum< ::holo::map::proto::common::ConnectionV2_ConnectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::common::ConnectionV2_ConnectType>() {
  return ::holo::map::proto::common::ConnectionV2_ConnectType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fconnection_5fv2_2eproto
