// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/common/geo_circle.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fgeo_5fcircle_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fgeo_5fcircle_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/geo_point.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fcircle_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fcircle_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fcircle_2eproto
namespace holo {
namespace map {
namespace proto {
namespace common {
class GeoCircle;
class GeoCircleDefaultTypeInternal;
extern GeoCircleDefaultTypeInternal _GeoCircle_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::common::GeoCircle* Arena::CreateMaybeMessage<::holo::map::proto::common::GeoCircle>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace common {

// ===================================================================

class GeoCircle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.common.GeoCircle) */ {
 public:
  GeoCircle();
  virtual ~GeoCircle();

  GeoCircle(const GeoCircle& from);

  inline GeoCircle& operator=(const GeoCircle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoCircle(GeoCircle&& from) noexcept
    : GeoCircle() {
    *this = ::std::move(from);
  }

  inline GeoCircle& operator=(GeoCircle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoCircle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoCircle* internal_default_instance() {
    return reinterpret_cast<const GeoCircle*>(
               &_GeoCircle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GeoCircle* other);
  friend void swap(GeoCircle& a, GeoCircle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoCircle* New() const final {
    return CreateMaybeMessage<GeoCircle>(NULL);
  }

  GeoCircle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoCircle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoCircle& from);
  void MergeFrom(const GeoCircle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoCircle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .holo.map.proto.common.GeoPoint center_point = 1;
  bool has_center_point() const;
  void clear_center_point();
  static const int kCenterPointFieldNumber = 1;
  private:
  const ::holo::map::proto::common::GeoPoint& _internal_center_point() const;
  public:
  const ::holo::map::proto::common::GeoPoint& center_point() const;
  ::holo::map::proto::common::GeoPoint* release_center_point();
  ::holo::map::proto::common::GeoPoint* mutable_center_point();
  void set_allocated_center_point(::holo::map::proto::common::GeoPoint* center_point);

  // optional double range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  double range() const;
  void set_range(double value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.common.GeoCircle)
 private:
  void set_has_center_point();
  void clear_has_center_point();
  void set_has_range();
  void clear_has_range();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::holo::map::proto::common::GeoPoint* center_point_;
  double range_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fcircle_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeoCircle

// optional .holo.map.proto.common.GeoPoint center_point = 1;
inline bool GeoCircle::has_center_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeoCircle::set_has_center_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeoCircle::clear_has_center_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::GeoPoint& GeoCircle::_internal_center_point() const {
  return *center_point_;
}
inline const ::holo::map::proto::common::GeoPoint& GeoCircle::center_point() const {
  const ::holo::map::proto::common::GeoPoint* p = center_point_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoCircle.center_point)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::GeoPoint*>(
      &::holo::map::proto::common::_GeoPoint_default_instance_);
}
inline ::holo::map::proto::common::GeoPoint* GeoCircle::release_center_point() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.GeoCircle.center_point)
  clear_has_center_point();
  ::holo::map::proto::common::GeoPoint* temp = center_point_;
  center_point_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::GeoPoint* GeoCircle::mutable_center_point() {
  set_has_center_point();
  if (center_point_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::GeoPoint>(GetArenaNoVirtual());
    center_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoCircle.center_point)
  return center_point_;
}
inline void GeoCircle::set_allocated_center_point(::holo::map::proto::common::GeoPoint* center_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(center_point_);
  }
  if (center_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center_point, submessage_arena);
    }
    set_has_center_point();
  } else {
    clear_has_center_point();
  }
  center_point_ = center_point;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.GeoCircle.center_point)
}

// optional double range = 2;
inline bool GeoCircle::has_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeoCircle::set_has_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeoCircle::clear_has_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeoCircle::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline double GeoCircle::range() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoCircle.range)
  return range_;
}
inline void GeoCircle::set_range(double value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.GeoCircle.range)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fgeo_5fcircle_2eproto
