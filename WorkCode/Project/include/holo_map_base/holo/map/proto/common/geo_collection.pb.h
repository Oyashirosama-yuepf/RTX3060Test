// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/common/geo_collection.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fgeo_5fcollection_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fgeo_5fcollection_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/geo_point.pb.h"
#include "holo/map/proto/common/geo_line.pb.h"
#include "holo/map/proto/common/geo_polygon.pb.h"
#include "holo/map/proto/common/geo_box.pb.h"
#include "holo/map/proto/common/geo_circle.pb.h"
#include "holo/map/proto/common/geo_multi_point.pb.h"
#include "holo/map/proto/common/geo_multi_line.pb.h"
#include "holo/map/proto/common/geo_multi_polygon.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fcollection_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fcollection_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fcollection_2eproto
namespace holo {
namespace map {
namespace proto {
namespace common {
class GeoCollection;
class GeoCollectionDefaultTypeInternal;
extern GeoCollectionDefaultTypeInternal _GeoCollection_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::common::GeoCollection* Arena::CreateMaybeMessage<::holo::map::proto::common::GeoCollection>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace common {

// ===================================================================

class GeoCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.common.GeoCollection) */ {
 public:
  GeoCollection();
  virtual ~GeoCollection();

  GeoCollection(const GeoCollection& from);

  inline GeoCollection& operator=(const GeoCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeoCollection(GeoCollection&& from) noexcept
    : GeoCollection() {
    *this = ::std::move(from);
  }

  inline GeoCollection& operator=(GeoCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeoCollection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoCollection* internal_default_instance() {
    return reinterpret_cast<const GeoCollection*>(
               &_GeoCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GeoCollection* other);
  friend void swap(GeoCollection& a, GeoCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeoCollection* New() const final {
    return CreateMaybeMessage<GeoCollection>(NULL);
  }

  GeoCollection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeoCollection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeoCollection& from);
  void MergeFrom(const GeoCollection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .holo.map.proto.common.GeoPoint points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::holo::map::proto::common::GeoPoint* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
      mutable_points();
  const ::holo::map::proto::common::GeoPoint& points(int index) const;
  ::holo::map::proto::common::GeoPoint* add_points();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
      points() const;

  // repeated .holo.map.proto.common.GeoLine lines = 2;
  int lines_size() const;
  void clear_lines();
  static const int kLinesFieldNumber = 2;
  ::holo::map::proto::common::GeoLine* mutable_lines(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoLine >*
      mutable_lines();
  const ::holo::map::proto::common::GeoLine& lines(int index) const;
  ::holo::map::proto::common::GeoLine* add_lines();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoLine >&
      lines() const;

  // repeated .holo.map.proto.common.GeoPolygon polygons = 3;
  int polygons_size() const;
  void clear_polygons();
  static const int kPolygonsFieldNumber = 3;
  ::holo::map::proto::common::GeoPolygon* mutable_polygons(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPolygon >*
      mutable_polygons();
  const ::holo::map::proto::common::GeoPolygon& polygons(int index) const;
  ::holo::map::proto::common::GeoPolygon* add_polygons();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPolygon >&
      polygons() const;

  // repeated .holo.map.proto.common.GeoBox boxes = 4;
  int boxes_size() const;
  void clear_boxes();
  static const int kBoxesFieldNumber = 4;
  ::holo::map::proto::common::GeoBox* mutable_boxes(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoBox >*
      mutable_boxes();
  const ::holo::map::proto::common::GeoBox& boxes(int index) const;
  ::holo::map::proto::common::GeoBox* add_boxes();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoBox >&
      boxes() const;

  // repeated .holo.map.proto.common.GeoCircle circles = 5;
  int circles_size() const;
  void clear_circles();
  static const int kCirclesFieldNumber = 5;
  ::holo::map::proto::common::GeoCircle* mutable_circles(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoCircle >*
      mutable_circles();
  const ::holo::map::proto::common::GeoCircle& circles(int index) const;
  ::holo::map::proto::common::GeoCircle* add_circles();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoCircle >&
      circles() const;

  // repeated .holo.map.proto.common.GeoMultiPoint multi_points = 6;
  int multi_points_size() const;
  void clear_multi_points();
  static const int kMultiPointsFieldNumber = 6;
  ::holo::map::proto::common::GeoMultiPoint* mutable_multi_points(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiPoint >*
      mutable_multi_points();
  const ::holo::map::proto::common::GeoMultiPoint& multi_points(int index) const;
  ::holo::map::proto::common::GeoMultiPoint* add_multi_points();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiPoint >&
      multi_points() const;

  // repeated .holo.map.proto.common.GeoMultiLine multi_lines = 7;
  int multi_lines_size() const;
  void clear_multi_lines();
  static const int kMultiLinesFieldNumber = 7;
  ::holo::map::proto::common::GeoMultiLine* mutable_multi_lines(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiLine >*
      mutable_multi_lines();
  const ::holo::map::proto::common::GeoMultiLine& multi_lines(int index) const;
  ::holo::map::proto::common::GeoMultiLine* add_multi_lines();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiLine >&
      multi_lines() const;

  // repeated .holo.map.proto.common.GeoMultiPolygon multi_polygons = 8;
  int multi_polygons_size() const;
  void clear_multi_polygons();
  static const int kMultiPolygonsFieldNumber = 8;
  ::holo::map::proto::common::GeoMultiPolygon* mutable_multi_polygons(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiPolygon >*
      mutable_multi_polygons();
  const ::holo::map::proto::common::GeoMultiPolygon& multi_polygons(int index) const;
  ::holo::map::proto::common::GeoMultiPolygon* add_multi_polygons();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiPolygon >&
      multi_polygons() const;

  // @@protoc_insertion_point(class_scope:holo.map.proto.common.GeoCollection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint > points_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoLine > lines_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPolygon > polygons_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoBox > boxes_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoCircle > circles_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiPoint > multi_points_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiLine > multi_lines_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiPolygon > multi_polygons_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fcommon_2fgeo_5fcollection_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeoCollection

// repeated .holo.map.proto.common.GeoPoint points = 1;
inline int GeoCollection::points_size() const {
  return points_.size();
}
inline ::holo::map::proto::common::GeoPoint* GeoCollection::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoCollection.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >*
GeoCollection::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.GeoCollection.points)
  return &points_;
}
inline const ::holo::map::proto::common::GeoPoint& GeoCollection::points(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoCollection.points)
  return points_.Get(index);
}
inline ::holo::map::proto::common::GeoPoint* GeoCollection::add_points() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.GeoCollection.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPoint >&
GeoCollection::points() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.GeoCollection.points)
  return points_;
}

// repeated .holo.map.proto.common.GeoLine lines = 2;
inline int GeoCollection::lines_size() const {
  return lines_.size();
}
inline ::holo::map::proto::common::GeoLine* GeoCollection::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoCollection.lines)
  return lines_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoLine >*
GeoCollection::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.GeoCollection.lines)
  return &lines_;
}
inline const ::holo::map::proto::common::GeoLine& GeoCollection::lines(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoCollection.lines)
  return lines_.Get(index);
}
inline ::holo::map::proto::common::GeoLine* GeoCollection::add_lines() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.GeoCollection.lines)
  return lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoLine >&
GeoCollection::lines() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.GeoCollection.lines)
  return lines_;
}

// repeated .holo.map.proto.common.GeoPolygon polygons = 3;
inline int GeoCollection::polygons_size() const {
  return polygons_.size();
}
inline ::holo::map::proto::common::GeoPolygon* GeoCollection::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoCollection.polygons)
  return polygons_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPolygon >*
GeoCollection::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.GeoCollection.polygons)
  return &polygons_;
}
inline const ::holo::map::proto::common::GeoPolygon& GeoCollection::polygons(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoCollection.polygons)
  return polygons_.Get(index);
}
inline ::holo::map::proto::common::GeoPolygon* GeoCollection::add_polygons() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.GeoCollection.polygons)
  return polygons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoPolygon >&
GeoCollection::polygons() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.GeoCollection.polygons)
  return polygons_;
}

// repeated .holo.map.proto.common.GeoBox boxes = 4;
inline int GeoCollection::boxes_size() const {
  return boxes_.size();
}
inline ::holo::map::proto::common::GeoBox* GeoCollection::mutable_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoCollection.boxes)
  return boxes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoBox >*
GeoCollection::mutable_boxes() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.GeoCollection.boxes)
  return &boxes_;
}
inline const ::holo::map::proto::common::GeoBox& GeoCollection::boxes(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoCollection.boxes)
  return boxes_.Get(index);
}
inline ::holo::map::proto::common::GeoBox* GeoCollection::add_boxes() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.GeoCollection.boxes)
  return boxes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoBox >&
GeoCollection::boxes() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.GeoCollection.boxes)
  return boxes_;
}

// repeated .holo.map.proto.common.GeoCircle circles = 5;
inline int GeoCollection::circles_size() const {
  return circles_.size();
}
inline ::holo::map::proto::common::GeoCircle* GeoCollection::mutable_circles(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoCollection.circles)
  return circles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoCircle >*
GeoCollection::mutable_circles() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.GeoCollection.circles)
  return &circles_;
}
inline const ::holo::map::proto::common::GeoCircle& GeoCollection::circles(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoCollection.circles)
  return circles_.Get(index);
}
inline ::holo::map::proto::common::GeoCircle* GeoCollection::add_circles() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.GeoCollection.circles)
  return circles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoCircle >&
GeoCollection::circles() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.GeoCollection.circles)
  return circles_;
}

// repeated .holo.map.proto.common.GeoMultiPoint multi_points = 6;
inline int GeoCollection::multi_points_size() const {
  return multi_points_.size();
}
inline ::holo::map::proto::common::GeoMultiPoint* GeoCollection::mutable_multi_points(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoCollection.multi_points)
  return multi_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiPoint >*
GeoCollection::mutable_multi_points() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.GeoCollection.multi_points)
  return &multi_points_;
}
inline const ::holo::map::proto::common::GeoMultiPoint& GeoCollection::multi_points(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoCollection.multi_points)
  return multi_points_.Get(index);
}
inline ::holo::map::proto::common::GeoMultiPoint* GeoCollection::add_multi_points() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.GeoCollection.multi_points)
  return multi_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiPoint >&
GeoCollection::multi_points() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.GeoCollection.multi_points)
  return multi_points_;
}

// repeated .holo.map.proto.common.GeoMultiLine multi_lines = 7;
inline int GeoCollection::multi_lines_size() const {
  return multi_lines_.size();
}
inline ::holo::map::proto::common::GeoMultiLine* GeoCollection::mutable_multi_lines(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoCollection.multi_lines)
  return multi_lines_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiLine >*
GeoCollection::mutable_multi_lines() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.GeoCollection.multi_lines)
  return &multi_lines_;
}
inline const ::holo::map::proto::common::GeoMultiLine& GeoCollection::multi_lines(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoCollection.multi_lines)
  return multi_lines_.Get(index);
}
inline ::holo::map::proto::common::GeoMultiLine* GeoCollection::add_multi_lines() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.GeoCollection.multi_lines)
  return multi_lines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiLine >&
GeoCollection::multi_lines() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.GeoCollection.multi_lines)
  return multi_lines_;
}

// repeated .holo.map.proto.common.GeoMultiPolygon multi_polygons = 8;
inline int GeoCollection::multi_polygons_size() const {
  return multi_polygons_.size();
}
inline ::holo::map::proto::common::GeoMultiPolygon* GeoCollection::mutable_multi_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.GeoCollection.multi_polygons)
  return multi_polygons_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiPolygon >*
GeoCollection::mutable_multi_polygons() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.common.GeoCollection.multi_polygons)
  return &multi_polygons_;
}
inline const ::holo::map::proto::common::GeoMultiPolygon& GeoCollection::multi_polygons(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.GeoCollection.multi_polygons)
  return multi_polygons_.Get(index);
}
inline ::holo::map::proto::common::GeoMultiPolygon* GeoCollection::add_multi_polygons() {
  // @@protoc_insertion_point(field_add:holo.map.proto.common.GeoCollection.multi_polygons)
  return multi_polygons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::GeoMultiPolygon >&
GeoCollection::multi_polygons() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.common.GeoCollection.multi_polygons)
  return multi_polygons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fgeo_5fcollection_2eproto
