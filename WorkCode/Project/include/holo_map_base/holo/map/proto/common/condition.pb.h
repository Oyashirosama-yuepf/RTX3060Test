// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/common/condition.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fcondition_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fcondition_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/interval_float64.pb.h"
#include "holo/map/proto/common/date_time_cycle.pb.h"
#include "holo/map/proto/common/interval_type.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fcommon_2fcondition_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fcommon_2fcondition_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fcommon_2fcondition_2eproto
namespace holo {
namespace map {
namespace proto {
namespace common {
class Condition;
class ConditionDefaultTypeInternal;
extern ConditionDefaultTypeInternal _Condition_default_instance_;
}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::common::Condition* Arena::CreateMaybeMessage<::holo::map::proto::common::Condition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace common {

enum Condition_Type {
  Condition_Type_TYPE_UNKNOWN = 0,
  Condition_Type_TYPE_DEDICATED_BUS = 1,
  Condition_Type_TYPE_DEDICATED_TURN_LEFT = 2,
  Condition_Type_TYPE_DEDICATED_TURN_RIGHT = 3,
  Condition_Type_TYPE_LOAD = 4
};
bool Condition_Type_IsValid(int value);
const Condition_Type Condition_Type_Type_MIN = Condition_Type_TYPE_UNKNOWN;
const Condition_Type Condition_Type_Type_MAX = Condition_Type_TYPE_LOAD;
const int Condition_Type_Type_ARRAYSIZE = Condition_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Condition_Type_descriptor();
inline const ::std::string& Condition_Type_Name(Condition_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Condition_Type_descriptor(), value);
}
inline bool Condition_Type_Parse(
    const ::std::string& name, Condition_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Condition_Type>(
    Condition_Type_descriptor(), name, value);
}
// ===================================================================

class Condition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.common.Condition) */ {
 public:
  Condition();
  virtual ~Condition();

  Condition(const Condition& from);

  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Condition(Condition&& from) noexcept
    : Condition() {
    *this = ::std::move(from);
  }

  inline Condition& operator=(Condition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Condition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Condition* internal_default_instance() {
    return reinterpret_cast<const Condition*>(
               &_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Condition* other);
  friend void swap(Condition& a, Condition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Condition* New() const final {
    return CreateMaybeMessage<Condition>(NULL);
  }

  Condition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Condition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Condition& from);
  void MergeFrom(const Condition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Condition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Condition_Type Type;
  static const Type TYPE_UNKNOWN =
    Condition_Type_TYPE_UNKNOWN;
  static const Type TYPE_DEDICATED_BUS =
    Condition_Type_TYPE_DEDICATED_BUS;
  static const Type TYPE_DEDICATED_TURN_LEFT =
    Condition_Type_TYPE_DEDICATED_TURN_LEFT;
  static const Type TYPE_DEDICATED_TURN_RIGHT =
    Condition_Type_TYPE_DEDICATED_TURN_RIGHT;
  static const Type TYPE_LOAD =
    Condition_Type_TYPE_LOAD;
  static inline bool Type_IsValid(int value) {
    return Condition_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Condition_Type_Type_MIN;
  static const Type Type_MAX =
    Condition_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Condition_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Condition_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Condition_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Condition_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .holo.map.proto.common.DateTimeCycle con_time = 11;
  bool has_con_time() const;
  void clear_con_time();
  static const int kConTimeFieldNumber = 11;
  private:
  const ::holo::map::proto::common::DateTimeCycle& _internal_con_time() const;
  public:
  const ::holo::map::proto::common::DateTimeCycle& con_time() const;
  ::holo::map::proto::common::DateTimeCycle* release_con_time();
  ::holo::map::proto::common::DateTimeCycle* mutable_con_time();
  void set_allocated_con_time(::holo::map::proto::common::DateTimeCycle* con_time);

  // optional .holo.map.proto.common.IntervalType offset_type = 21;
  bool has_offset_type() const;
  void clear_offset_type();
  static const int kOffsetTypeFieldNumber = 21;
  private:
  const ::holo::map::proto::common::IntervalType& _internal_offset_type() const;
  public:
  const ::holo::map::proto::common::IntervalType& offset_type() const;
  ::holo::map::proto::common::IntervalType* release_offset_type();
  ::holo::map::proto::common::IntervalType* mutable_offset_type();
  void set_allocated_offset_type(::holo::map::proto::common::IntervalType* offset_type);

  // optional .holo.map.proto.common.IntervalFloat64 offset = 22;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 22;
  private:
  const ::holo::map::proto::common::IntervalFloat64& _internal_offset() const;
  public:
  const ::holo::map::proto::common::IntervalFloat64& offset() const;
  ::holo::map::proto::common::IntervalFloat64* release_offset();
  ::holo::map::proto::common::IntervalFloat64* mutable_offset();
  void set_allocated_offset(::holo::map::proto::common::IntervalFloat64* offset);

  // optional .holo.map.proto.common.Condition.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::holo::map::proto::common::Condition_Type type() const;
  void set_type(::holo::map::proto::common::Condition_Type value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.common.Condition)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_con_time();
  void clear_has_con_time();
  void set_has_offset_type();
  void clear_has_offset_type();
  void set_has_offset();
  void clear_has_offset();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::holo::map::proto::common::DateTimeCycle* con_time_;
  ::holo::map::proto::common::IntervalType* offset_type_;
  ::holo::map::proto::common::IntervalFloat64* offset_;
  int type_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fcommon_2fcondition_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Condition

// optional .holo.map.proto.common.Condition.Type type = 1;
inline bool Condition::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Condition::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Condition::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Condition::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::holo::map::proto::common::Condition_Type Condition::type() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.common.Condition.type)
  return static_cast< ::holo::map::proto::common::Condition_Type >(type_);
}
inline void Condition::set_type(::holo::map::proto::common::Condition_Type value) {
  assert(::holo::map::proto::common::Condition_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.common.Condition.type)
}

// optional .holo.map.proto.common.DateTimeCycle con_time = 11;
inline bool Condition::has_con_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Condition::set_has_con_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Condition::clear_has_con_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::common::DateTimeCycle& Condition::_internal_con_time() const {
  return *con_time_;
}
inline const ::holo::map::proto::common::DateTimeCycle& Condition::con_time() const {
  const ::holo::map::proto::common::DateTimeCycle* p = con_time_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.Condition.con_time)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::DateTimeCycle*>(
      &::holo::map::proto::common::_DateTimeCycle_default_instance_);
}
inline ::holo::map::proto::common::DateTimeCycle* Condition::release_con_time() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.Condition.con_time)
  clear_has_con_time();
  ::holo::map::proto::common::DateTimeCycle* temp = con_time_;
  con_time_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::DateTimeCycle* Condition::mutable_con_time() {
  set_has_con_time();
  if (con_time_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::DateTimeCycle>(GetArenaNoVirtual());
    con_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.Condition.con_time)
  return con_time_;
}
inline void Condition::set_allocated_con_time(::holo::map::proto::common::DateTimeCycle* con_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(con_time_);
  }
  if (con_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      con_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, con_time, submessage_arena);
    }
    set_has_con_time();
  } else {
    clear_has_con_time();
  }
  con_time_ = con_time;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.Condition.con_time)
}

// optional .holo.map.proto.common.IntervalType offset_type = 21;
inline bool Condition::has_offset_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Condition::set_has_offset_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Condition::clear_has_offset_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::holo::map::proto::common::IntervalType& Condition::_internal_offset_type() const {
  return *offset_type_;
}
inline const ::holo::map::proto::common::IntervalType& Condition::offset_type() const {
  const ::holo::map::proto::common::IntervalType* p = offset_type_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.Condition.offset_type)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::IntervalType*>(
      &::holo::map::proto::common::_IntervalType_default_instance_);
}
inline ::holo::map::proto::common::IntervalType* Condition::release_offset_type() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.Condition.offset_type)
  clear_has_offset_type();
  ::holo::map::proto::common::IntervalType* temp = offset_type_;
  offset_type_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::IntervalType* Condition::mutable_offset_type() {
  set_has_offset_type();
  if (offset_type_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::IntervalType>(GetArenaNoVirtual());
    offset_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.Condition.offset_type)
  return offset_type_;
}
inline void Condition::set_allocated_offset_type(::holo::map::proto::common::IntervalType* offset_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(offset_type_);
  }
  if (offset_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      offset_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, offset_type, submessage_arena);
    }
    set_has_offset_type();
  } else {
    clear_has_offset_type();
  }
  offset_type_ = offset_type;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.Condition.offset_type)
}

// optional .holo.map.proto.common.IntervalFloat64 offset = 22;
inline bool Condition::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Condition::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Condition::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::holo::map::proto::common::IntervalFloat64& Condition::_internal_offset() const {
  return *offset_;
}
inline const ::holo::map::proto::common::IntervalFloat64& Condition::offset() const {
  const ::holo::map::proto::common::IntervalFloat64* p = offset_;
  // @@protoc_insertion_point(field_get:holo.map.proto.common.Condition.offset)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::common::IntervalFloat64*>(
      &::holo::map::proto::common::_IntervalFloat64_default_instance_);
}
inline ::holo::map::proto::common::IntervalFloat64* Condition::release_offset() {
  // @@protoc_insertion_point(field_release:holo.map.proto.common.Condition.offset)
  clear_has_offset();
  ::holo::map::proto::common::IntervalFloat64* temp = offset_;
  offset_ = NULL;
  return temp;
}
inline ::holo::map::proto::common::IntervalFloat64* Condition::mutable_offset() {
  set_has_offset();
  if (offset_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::common::IntervalFloat64>(GetArenaNoVirtual());
    offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.common.Condition.offset)
  return offset_;
}
inline void Condition::set_allocated_offset(::holo::map::proto::common::IntervalFloat64* offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(offset_);
  }
  if (offset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    set_has_offset();
  } else {
    clear_has_offset();
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.common.Condition.offset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace proto
}  // namespace map
}  // namespace holo

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::holo::map::proto::common::Condition_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::holo::map::proto::common::Condition_Type>() {
  return ::holo::map::proto::common::Condition_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fcommon_2fcondition_2eproto
