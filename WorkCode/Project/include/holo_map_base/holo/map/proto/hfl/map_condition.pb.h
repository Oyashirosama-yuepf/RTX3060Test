// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: holo/map/proto/hfl/map_condition.proto

#ifndef PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fmap_5fcondition_2eproto
#define PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fmap_5fcondition_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "holo/map/proto/common/id_interval_float64.pb.h"
#include "holo/map/proto/hfl/map_reason.pb.h"
#include "holo/map/proto/hfl/speed_limit_condition.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_holo_2fmap_2fproto_2fhfl_2fmap_5fcondition_2eproto 

namespace protobuf_holo_2fmap_2fproto_2fhfl_2fmap_5fcondition_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_holo_2fmap_2fproto_2fhfl_2fmap_5fcondition_2eproto
namespace holo {
namespace map {
namespace proto {
namespace hfl {
class MapCondition;
class MapConditionDefaultTypeInternal;
extern MapConditionDefaultTypeInternal _MapCondition_default_instance_;
}  // namespace hfl
}  // namespace proto
}  // namespace map
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::map::proto::hfl::MapCondition* Arena::CreateMaybeMessage<::holo::map::proto::hfl::MapCondition>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace map {
namespace proto {
namespace hfl {

// ===================================================================

class MapCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.map.proto.hfl.MapCondition) */ {
 public:
  MapCondition();
  virtual ~MapCondition();

  MapCondition(const MapCondition& from);

  inline MapCondition& operator=(const MapCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapCondition(MapCondition&& from) noexcept
    : MapCondition() {
    *this = ::std::move(from);
  }

  inline MapCondition& operator=(MapCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapCondition* internal_default_instance() {
    return reinterpret_cast<const MapCondition*>(
               &_MapCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MapCondition* other);
  friend void swap(MapCondition& a, MapCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapCondition* New() const final {
    return CreateMaybeMessage<MapCondition>(NULL);
  }

  MapCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapCondition& from);
  void MergeFrom(const MapCondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .holo.map.proto.hfl.SpeedLimitCondition speed_limit_info = 7;
  int speed_limit_info_size() const;
  void clear_speed_limit_info();
  static const int kSpeedLimitInfoFieldNumber = 7;
  ::holo::map::proto::hfl::SpeedLimitCondition* mutable_speed_limit_info(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::SpeedLimitCondition >*
      mutable_speed_limit_info();
  const ::holo::map::proto::hfl::SpeedLimitCondition& speed_limit_info(int index) const;
  ::holo::map::proto::hfl::SpeedLimitCondition* add_speed_limit_info();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::SpeedLimitCondition >&
      speed_limit_info() const;

  // repeated .holo.map.proto.common.IdIntervalFloat64 associated_traffic_lights = 22;
  int associated_traffic_lights_size() const;
  void clear_associated_traffic_lights();
  static const int kAssociatedTrafficLightsFieldNumber = 22;
  ::holo::map::proto::common::IdIntervalFloat64* mutable_associated_traffic_lights(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IdIntervalFloat64 >*
      mutable_associated_traffic_lights();
  const ::holo::map::proto::common::IdIntervalFloat64& associated_traffic_lights(int index) const;
  ::holo::map::proto::common::IdIntervalFloat64* add_associated_traffic_lights();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IdIntervalFloat64 >&
      associated_traffic_lights() const;

  // repeated .holo.map.proto.hfl.MapReason associated_traffic_lights_reasons = 24;
  int associated_traffic_lights_reasons_size() const;
  void clear_associated_traffic_lights_reasons();
  static const int kAssociatedTrafficLightsReasonsFieldNumber = 24;
  ::holo::map::proto::hfl::MapReason* mutable_associated_traffic_lights_reasons(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::MapReason >*
      mutable_associated_traffic_lights_reasons();
  const ::holo::map::proto::hfl::MapReason& associated_traffic_lights_reasons(int index) const;
  ::holo::map::proto::hfl::MapReason* add_associated_traffic_lights_reasons();
  const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::MapReason >&
      associated_traffic_lights_reasons() const;

  // optional .holo.map.proto.hfl.MapReason associated_intersection_id_reason = 21;
  bool has_associated_intersection_id_reason() const;
  void clear_associated_intersection_id_reason();
  static const int kAssociatedIntersectionIdReasonFieldNumber = 21;
  private:
  const ::holo::map::proto::hfl::MapReason& _internal_associated_intersection_id_reason() const;
  public:
  const ::holo::map::proto::hfl::MapReason& associated_intersection_id_reason() const;
  ::holo::map::proto::hfl::MapReason* release_associated_intersection_id_reason();
  ::holo::map::proto::hfl::MapReason* mutable_associated_intersection_id_reason();
  void set_allocated_associated_intersection_id_reason(::holo::map::proto::hfl::MapReason* associated_intersection_id_reason);

  // optional uint64 map_condition_id = 1;
  bool has_map_condition_id() const;
  void clear_map_condition_id();
  static const int kMapConditionIdFieldNumber = 1;
  ::google::protobuf::uint64 map_condition_id() const;
  void set_map_condition_id(::google::protobuf::uint64 value);

  // optional uint64 lastest_update_timestamp = 3;
  bool has_lastest_update_timestamp() const;
  void clear_lastest_update_timestamp();
  static const int kLastestUpdateTimestampFieldNumber = 3;
  ::google::protobuf::uint64 lastest_update_timestamp() const;
  void set_lastest_update_timestamp(::google::protobuf::uint64 value);

  // optional uint64 estimated_invalid_timestamp = 4;
  bool has_estimated_invalid_timestamp() const;
  void clear_estimated_invalid_timestamp();
  static const int kEstimatedInvalidTimestampFieldNumber = 4;
  ::google::protobuf::uint64 estimated_invalid_timestamp() const;
  void set_estimated_invalid_timestamp(::google::protobuf::uint64 value);

  // optional uint64 create_timestamp = 5;
  bool has_create_timestamp() const;
  void clear_create_timestamp();
  static const int kCreateTimestampFieldNumber = 5;
  ::google::protobuf::uint64 create_timestamp() const;
  void set_create_timestamp(::google::protobuf::uint64 value);

  // optional uint64 update_timestamp = 6;
  bool has_update_timestamp() const;
  void clear_update_timestamp();
  static const int kUpdateTimestampFieldNumber = 6;
  ::google::protobuf::uint64 update_timestamp() const;
  void set_update_timestamp(::google::protobuf::uint64 value);

  // optional bool is_map_expire = 2;
  bool has_is_map_expire() const;
  void clear_is_map_expire();
  static const int kIsMapExpireFieldNumber = 2;
  bool is_map_expire() const;
  void set_is_map_expire(bool value);

  // optional uint64 associated_intersection_id = 20;
  bool has_associated_intersection_id() const;
  void clear_associated_intersection_id();
  static const int kAssociatedIntersectionIdFieldNumber = 20;
  ::google::protobuf::uint64 associated_intersection_id() const;
  void set_associated_intersection_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:holo.map.proto.hfl.MapCondition)
 private:
  void set_has_map_condition_id();
  void clear_has_map_condition_id();
  void set_has_is_map_expire();
  void clear_has_is_map_expire();
  void set_has_lastest_update_timestamp();
  void clear_has_lastest_update_timestamp();
  void set_has_estimated_invalid_timestamp();
  void clear_has_estimated_invalid_timestamp();
  void set_has_create_timestamp();
  void clear_has_create_timestamp();
  void set_has_update_timestamp();
  void clear_has_update_timestamp();
  void set_has_associated_intersection_id();
  void clear_has_associated_intersection_id();
  void set_has_associated_intersection_id_reason();
  void clear_has_associated_intersection_id_reason();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::SpeedLimitCondition > speed_limit_info_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IdIntervalFloat64 > associated_traffic_lights_;
  ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::MapReason > associated_traffic_lights_reasons_;
  ::holo::map::proto::hfl::MapReason* associated_intersection_id_reason_;
  ::google::protobuf::uint64 map_condition_id_;
  ::google::protobuf::uint64 lastest_update_timestamp_;
  ::google::protobuf::uint64 estimated_invalid_timestamp_;
  ::google::protobuf::uint64 create_timestamp_;
  ::google::protobuf::uint64 update_timestamp_;
  bool is_map_expire_;
  ::google::protobuf::uint64 associated_intersection_id_;
  friend struct ::protobuf_holo_2fmap_2fproto_2fhfl_2fmap_5fcondition_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapCondition

// optional uint64 map_condition_id = 1;
inline bool MapCondition::has_map_condition_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapCondition::set_has_map_condition_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapCondition::clear_has_map_condition_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapCondition::clear_map_condition_id() {
  map_condition_id_ = GOOGLE_ULONGLONG(0);
  clear_has_map_condition_id();
}
inline ::google::protobuf::uint64 MapCondition::map_condition_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.map_condition_id)
  return map_condition_id_;
}
inline void MapCondition::set_map_condition_id(::google::protobuf::uint64 value) {
  set_has_map_condition_id();
  map_condition_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.MapCondition.map_condition_id)
}

// optional bool is_map_expire = 2;
inline bool MapCondition::has_is_map_expire() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MapCondition::set_has_is_map_expire() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MapCondition::clear_has_is_map_expire() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MapCondition::clear_is_map_expire() {
  is_map_expire_ = false;
  clear_has_is_map_expire();
}
inline bool MapCondition::is_map_expire() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.is_map_expire)
  return is_map_expire_;
}
inline void MapCondition::set_is_map_expire(bool value) {
  set_has_is_map_expire();
  is_map_expire_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.MapCondition.is_map_expire)
}

// optional uint64 lastest_update_timestamp = 3;
inline bool MapCondition::has_lastest_update_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapCondition::set_has_lastest_update_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapCondition::clear_has_lastest_update_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapCondition::clear_lastest_update_timestamp() {
  lastest_update_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_lastest_update_timestamp();
}
inline ::google::protobuf::uint64 MapCondition::lastest_update_timestamp() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.lastest_update_timestamp)
  return lastest_update_timestamp_;
}
inline void MapCondition::set_lastest_update_timestamp(::google::protobuf::uint64 value) {
  set_has_lastest_update_timestamp();
  lastest_update_timestamp_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.MapCondition.lastest_update_timestamp)
}

// optional uint64 estimated_invalid_timestamp = 4;
inline bool MapCondition::has_estimated_invalid_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapCondition::set_has_estimated_invalid_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapCondition::clear_has_estimated_invalid_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapCondition::clear_estimated_invalid_timestamp() {
  estimated_invalid_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_estimated_invalid_timestamp();
}
inline ::google::protobuf::uint64 MapCondition::estimated_invalid_timestamp() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.estimated_invalid_timestamp)
  return estimated_invalid_timestamp_;
}
inline void MapCondition::set_estimated_invalid_timestamp(::google::protobuf::uint64 value) {
  set_has_estimated_invalid_timestamp();
  estimated_invalid_timestamp_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.MapCondition.estimated_invalid_timestamp)
}

// optional uint64 create_timestamp = 5;
inline bool MapCondition::has_create_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapCondition::set_has_create_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapCondition::clear_has_create_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapCondition::clear_create_timestamp() {
  create_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_create_timestamp();
}
inline ::google::protobuf::uint64 MapCondition::create_timestamp() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.create_timestamp)
  return create_timestamp_;
}
inline void MapCondition::set_create_timestamp(::google::protobuf::uint64 value) {
  set_has_create_timestamp();
  create_timestamp_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.MapCondition.create_timestamp)
}

// optional uint64 update_timestamp = 6;
inline bool MapCondition::has_update_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MapCondition::set_has_update_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MapCondition::clear_has_update_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MapCondition::clear_update_timestamp() {
  update_timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_update_timestamp();
}
inline ::google::protobuf::uint64 MapCondition::update_timestamp() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.update_timestamp)
  return update_timestamp_;
}
inline void MapCondition::set_update_timestamp(::google::protobuf::uint64 value) {
  set_has_update_timestamp();
  update_timestamp_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.MapCondition.update_timestamp)
}

// repeated .holo.map.proto.hfl.SpeedLimitCondition speed_limit_info = 7;
inline int MapCondition::speed_limit_info_size() const {
  return speed_limit_info_.size();
}
inline ::holo::map::proto::hfl::SpeedLimitCondition* MapCondition::mutable_speed_limit_info(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.MapCondition.speed_limit_info)
  return speed_limit_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::SpeedLimitCondition >*
MapCondition::mutable_speed_limit_info() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.MapCondition.speed_limit_info)
  return &speed_limit_info_;
}
inline const ::holo::map::proto::hfl::SpeedLimitCondition& MapCondition::speed_limit_info(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.speed_limit_info)
  return speed_limit_info_.Get(index);
}
inline ::holo::map::proto::hfl::SpeedLimitCondition* MapCondition::add_speed_limit_info() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.MapCondition.speed_limit_info)
  return speed_limit_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::SpeedLimitCondition >&
MapCondition::speed_limit_info() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.MapCondition.speed_limit_info)
  return speed_limit_info_;
}

// optional uint64 associated_intersection_id = 20;
inline bool MapCondition::has_associated_intersection_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MapCondition::set_has_associated_intersection_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MapCondition::clear_has_associated_intersection_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MapCondition::clear_associated_intersection_id() {
  associated_intersection_id_ = GOOGLE_ULONGLONG(0);
  clear_has_associated_intersection_id();
}
inline ::google::protobuf::uint64 MapCondition::associated_intersection_id() const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.associated_intersection_id)
  return associated_intersection_id_;
}
inline void MapCondition::set_associated_intersection_id(::google::protobuf::uint64 value) {
  set_has_associated_intersection_id();
  associated_intersection_id_ = value;
  // @@protoc_insertion_point(field_set:holo.map.proto.hfl.MapCondition.associated_intersection_id)
}

// optional .holo.map.proto.hfl.MapReason associated_intersection_id_reason = 21;
inline bool MapCondition::has_associated_intersection_id_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapCondition::set_has_associated_intersection_id_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapCondition::clear_has_associated_intersection_id_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::holo::map::proto::hfl::MapReason& MapCondition::_internal_associated_intersection_id_reason() const {
  return *associated_intersection_id_reason_;
}
inline const ::holo::map::proto::hfl::MapReason& MapCondition::associated_intersection_id_reason() const {
  const ::holo::map::proto::hfl::MapReason* p = associated_intersection_id_reason_;
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.associated_intersection_id_reason)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::map::proto::hfl::MapReason*>(
      &::holo::map::proto::hfl::_MapReason_default_instance_);
}
inline ::holo::map::proto::hfl::MapReason* MapCondition::release_associated_intersection_id_reason() {
  // @@protoc_insertion_point(field_release:holo.map.proto.hfl.MapCondition.associated_intersection_id_reason)
  clear_has_associated_intersection_id_reason();
  ::holo::map::proto::hfl::MapReason* temp = associated_intersection_id_reason_;
  associated_intersection_id_reason_ = NULL;
  return temp;
}
inline ::holo::map::proto::hfl::MapReason* MapCondition::mutable_associated_intersection_id_reason() {
  set_has_associated_intersection_id_reason();
  if (associated_intersection_id_reason_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::map::proto::hfl::MapReason>(GetArenaNoVirtual());
    associated_intersection_id_reason_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.MapCondition.associated_intersection_id_reason)
  return associated_intersection_id_reason_;
}
inline void MapCondition::set_allocated_associated_intersection_id_reason(::holo::map::proto::hfl::MapReason* associated_intersection_id_reason) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(associated_intersection_id_reason_);
  }
  if (associated_intersection_id_reason) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      associated_intersection_id_reason = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, associated_intersection_id_reason, submessage_arena);
    }
    set_has_associated_intersection_id_reason();
  } else {
    clear_has_associated_intersection_id_reason();
  }
  associated_intersection_id_reason_ = associated_intersection_id_reason;
  // @@protoc_insertion_point(field_set_allocated:holo.map.proto.hfl.MapCondition.associated_intersection_id_reason)
}

// repeated .holo.map.proto.common.IdIntervalFloat64 associated_traffic_lights = 22;
inline int MapCondition::associated_traffic_lights_size() const {
  return associated_traffic_lights_.size();
}
inline ::holo::map::proto::common::IdIntervalFloat64* MapCondition::mutable_associated_traffic_lights(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.MapCondition.associated_traffic_lights)
  return associated_traffic_lights_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IdIntervalFloat64 >*
MapCondition::mutable_associated_traffic_lights() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.MapCondition.associated_traffic_lights)
  return &associated_traffic_lights_;
}
inline const ::holo::map::proto::common::IdIntervalFloat64& MapCondition::associated_traffic_lights(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.associated_traffic_lights)
  return associated_traffic_lights_.Get(index);
}
inline ::holo::map::proto::common::IdIntervalFloat64* MapCondition::add_associated_traffic_lights() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.MapCondition.associated_traffic_lights)
  return associated_traffic_lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::common::IdIntervalFloat64 >&
MapCondition::associated_traffic_lights() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.MapCondition.associated_traffic_lights)
  return associated_traffic_lights_;
}

// repeated .holo.map.proto.hfl.MapReason associated_traffic_lights_reasons = 24;
inline int MapCondition::associated_traffic_lights_reasons_size() const {
  return associated_traffic_lights_reasons_.size();
}
inline ::holo::map::proto::hfl::MapReason* MapCondition::mutable_associated_traffic_lights_reasons(int index) {
  // @@protoc_insertion_point(field_mutable:holo.map.proto.hfl.MapCondition.associated_traffic_lights_reasons)
  return associated_traffic_lights_reasons_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::MapReason >*
MapCondition::mutable_associated_traffic_lights_reasons() {
  // @@protoc_insertion_point(field_mutable_list:holo.map.proto.hfl.MapCondition.associated_traffic_lights_reasons)
  return &associated_traffic_lights_reasons_;
}
inline const ::holo::map::proto::hfl::MapReason& MapCondition::associated_traffic_lights_reasons(int index) const {
  // @@protoc_insertion_point(field_get:holo.map.proto.hfl.MapCondition.associated_traffic_lights_reasons)
  return associated_traffic_lights_reasons_.Get(index);
}
inline ::holo::map::proto::hfl::MapReason* MapCondition::add_associated_traffic_lights_reasons() {
  // @@protoc_insertion_point(field_add:holo.map.proto.hfl.MapCondition.associated_traffic_lights_reasons)
  return associated_traffic_lights_reasons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::map::proto::hfl::MapReason >&
MapCondition::associated_traffic_lights_reasons() const {
  // @@protoc_insertion_point(field_list:holo.map.proto.hfl.MapCondition.associated_traffic_lights_reasons)
  return associated_traffic_lights_reasons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hfl
}  // namespace proto
}  // namespace map
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_holo_2fmap_2fproto_2fhfl_2fmap_5fcondition_2eproto
