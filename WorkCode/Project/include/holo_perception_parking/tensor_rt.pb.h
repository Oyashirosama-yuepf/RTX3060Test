// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensor_rt.proto

#ifndef PROTOBUF_INCLUDED_tensor_5frt_2eproto
#define PROTOBUF_INCLUDED_tensor_5frt_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_tensor_5frt_2eproto 

namespace protobuf_tensor_5frt_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_tensor_5frt_2eproto
namespace holo {
namespace perception {
class CalibrationConfig;
class CalibrationConfigDefaultTypeInternal;
extern CalibrationConfigDefaultTypeInternal _CalibrationConfig_default_instance_;
class TensorConfig;
class TensorConfigDefaultTypeInternal;
extern TensorConfigDefaultTypeInternal _TensorConfig_default_instance_;
class TensorRTConfig;
class TensorRTConfigDefaultTypeInternal;
extern TensorRTConfigDefaultTypeInternal _TensorRTConfig_default_instance_;
}  // namespace perception
}  // namespace holo
namespace google {
namespace protobuf {
template<> ::holo::perception::CalibrationConfig* Arena::CreateMaybeMessage<::holo::perception::CalibrationConfig>(Arena*);
template<> ::holo::perception::TensorConfig* Arena::CreateMaybeMessage<::holo::perception::TensorConfig>(Arena*);
template<> ::holo::perception::TensorRTConfig* Arena::CreateMaybeMessage<::holo::perception::TensorRTConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace holo {
namespace perception {

// ===================================================================

class TensorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.perception.TensorConfig) */ {
 public:
  TensorConfig();
  virtual ~TensorConfig();

  TensorConfig(const TensorConfig& from);

  inline TensorConfig& operator=(const TensorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorConfig(TensorConfig&& from) noexcept
    : TensorConfig() {
    *this = ::std::move(from);
  }

  inline TensorConfig& operator=(TensorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorConfig* internal_default_instance() {
    return reinterpret_cast<const TensorConfig*>(
               &_TensorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TensorConfig* other);
  friend void swap(TensorConfig& a, TensorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorConfig* New() const final {
    return CreateMaybeMessage<TensorConfig>(NULL);
  }

  TensorConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TensorConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TensorConfig& from);
  void MergeFrom(const TensorConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint64 channel = 2;
  bool has_channel() const;
  void clear_channel();
  static const int kChannelFieldNumber = 2;
  ::google::protobuf::uint64 channel() const;
  void set_channel(::google::protobuf::uint64 value);

  // optional uint64 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // optional uint64 width = 4;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint64 width() const;
  void set_width(::google::protobuf::uint64 value);

  // optional bool is_output = 5;
  bool has_is_output() const;
  void clear_is_output();
  static const int kIsOutputFieldNumber = 5;
  bool is_output() const;
  void set_is_output(bool value);

  // @@protoc_insertion_point(class_scope:holo.perception.TensorConfig)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_channel();
  void clear_has_channel();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_is_output();
  void clear_has_is_output();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 channel_;
  ::google::protobuf::uint64 height_;
  ::google::protobuf::uint64 width_;
  bool is_output_;
  friend struct ::protobuf_tensor_5frt_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CalibrationConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.perception.CalibrationConfig) */ {
 public:
  CalibrationConfig();
  virtual ~CalibrationConfig();

  CalibrationConfig(const CalibrationConfig& from);

  inline CalibrationConfig& operator=(const CalibrationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalibrationConfig(CalibrationConfig&& from) noexcept
    : CalibrationConfig() {
    *this = ::std::move(from);
  }

  inline CalibrationConfig& operator=(CalibrationConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CalibrationConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalibrationConfig* internal_default_instance() {
    return reinterpret_cast<const CalibrationConfig*>(
               &_CalibrationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CalibrationConfig* other);
  friend void swap(CalibrationConfig& a, CalibrationConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalibrationConfig* New() const final {
    return CreateMaybeMessage<CalibrationConfig>(NULL);
  }

  CalibrationConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CalibrationConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CalibrationConfig& from);
  void MergeFrom(const CalibrationConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file = 1;
  bool has_file() const;
  void clear_file();
  static const int kFileFieldNumber = 1;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // optional string calibration_list = 3;
  bool has_calibration_list() const;
  void clear_calibration_list();
  static const int kCalibrationListFieldNumber = 3;
  const ::std::string& calibration_list() const;
  void set_calibration_list(const ::std::string& value);
  #if LANG_CXX11
  void set_calibration_list(::std::string&& value);
  #endif
  void set_calibration_list(const char* value);
  void set_calibration_list(const char* value, size_t size);
  ::std::string* mutable_calibration_list();
  ::std::string* release_calibration_list();
  void set_allocated_calibration_list(::std::string* calibration_list);

  // optional string mean = 10;
  bool has_mean() const;
  void clear_mean();
  static const int kMeanFieldNumber = 10;
  const ::std::string& mean() const;
  void set_mean(const ::std::string& value);
  #if LANG_CXX11
  void set_mean(::std::string&& value);
  #endif
  void set_mean(const char* value);
  void set_mean(const char* value, size_t size);
  ::std::string* mutable_mean();
  ::std::string* release_mean();
  void set_allocated_mean(::std::string* mean);

  // optional string dev = 11;
  bool has_dev() const;
  void clear_dev();
  static const int kDevFieldNumber = 11;
  const ::std::string& dev() const;
  void set_dev(const ::std::string& value);
  #if LANG_CXX11
  void set_dev(::std::string&& value);
  #endif
  void set_dev(const char* value);
  void set_dev(const char* value, size_t size);
  ::std::string* mutable_dev();
  ::std::string* release_dev();
  void set_allocated_dev(::std::string* dev);

  // optional uint64 first_batch = 4;
  bool has_first_batch() const;
  void clear_first_batch();
  static const int kFirstBatchFieldNumber = 4;
  ::google::protobuf::uint64 first_batch() const;
  void set_first_batch(::google::protobuf::uint64 value);

  // optional uint64 batch_size = 5;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 5;
  ::google::protobuf::uint64 batch_size() const;
  void set_batch_size(::google::protobuf::uint64 value);

  // optional bool read_calibration_table_only = 2;
  bool has_read_calibration_table_only() const;
  void clear_read_calibration_table_only();
  static const int kReadCalibrationTableOnlyFieldNumber = 2;
  bool read_calibration_table_only() const;
  void set_read_calibration_table_only(bool value);

  // optional float scale = 9;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 9;
  float scale() const;
  void set_scale(float value);

  // optional uint64 num_batches = 6;
  bool has_num_batches() const;
  void clear_num_batches();
  static const int kNumBatchesFieldNumber = 6;
  ::google::protobuf::uint64 num_batches() const;
  void set_num_batches(::google::protobuf::uint64 value);

  // optional uint64 height = 7;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 7;
  ::google::protobuf::uint64 height() const;
  void set_height(::google::protobuf::uint64 value);

  // optional uint64 width = 8;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 8;
  ::google::protobuf::uint64 width() const;
  void set_width(::google::protobuf::uint64 value);

  // optional float padding_with = 12;
  bool has_padding_with() const;
  void clear_padding_with();
  static const int kPaddingWithFieldNumber = 12;
  float padding_with() const;
  void set_padding_with(float value);

  // @@protoc_insertion_point(class_scope:holo.perception.CalibrationConfig)
 private:
  void set_has_file();
  void clear_has_file();
  void set_has_read_calibration_table_only();
  void clear_has_read_calibration_table_only();
  void set_has_calibration_list();
  void clear_has_calibration_list();
  void set_has_first_batch();
  void clear_has_first_batch();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_num_batches();
  void clear_has_num_batches();
  void set_has_height();
  void clear_has_height();
  void set_has_width();
  void clear_has_width();
  void set_has_scale();
  void clear_has_scale();
  void set_has_mean();
  void clear_has_mean();
  void set_has_dev();
  void clear_has_dev();
  void set_has_padding_with();
  void clear_has_padding_with();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::internal::ArenaStringPtr calibration_list_;
  ::google::protobuf::internal::ArenaStringPtr mean_;
  ::google::protobuf::internal::ArenaStringPtr dev_;
  ::google::protobuf::uint64 first_batch_;
  ::google::protobuf::uint64 batch_size_;
  bool read_calibration_table_only_;
  float scale_;
  ::google::protobuf::uint64 num_batches_;
  ::google::protobuf::uint64 height_;
  ::google::protobuf::uint64 width_;
  float padding_with_;
  friend struct ::protobuf_tensor_5frt_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TensorRTConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:holo.perception.TensorRTConfig) */ {
 public:
  TensorRTConfig();
  virtual ~TensorRTConfig();

  TensorRTConfig(const TensorRTConfig& from);

  inline TensorRTConfig& operator=(const TensorRTConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TensorRTConfig(TensorRTConfig&& from) noexcept
    : TensorRTConfig() {
    *this = ::std::move(from);
  }

  inline TensorRTConfig& operator=(TensorRTConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TensorRTConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorRTConfig* internal_default_instance() {
    return reinterpret_cast<const TensorRTConfig*>(
               &_TensorRTConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TensorRTConfig* other);
  friend void swap(TensorRTConfig& a, TensorRTConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TensorRTConfig* New() const final {
    return CreateMaybeMessage<TensorRTConfig>(NULL);
  }

  TensorRTConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TensorRTConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TensorRTConfig& from);
  void MergeFrom(const TensorRTConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorRTConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .holo.perception.TensorConfig tensor_config = 10;
  int tensor_config_size() const;
  void clear_tensor_config();
  static const int kTensorConfigFieldNumber = 10;
  ::holo::perception::TensorConfig* mutable_tensor_config(int index);
  ::google::protobuf::RepeatedPtrField< ::holo::perception::TensorConfig >*
      mutable_tensor_config();
  const ::holo::perception::TensorConfig& tensor_config(int index) const;
  ::holo::perception::TensorConfig* add_tensor_config();
  const ::google::protobuf::RepeatedPtrField< ::holo::perception::TensorConfig >&
      tensor_config() const;

  // optional string network_name = 1;
  bool has_network_name() const;
  void clear_network_name();
  static const int kNetworkNameFieldNumber = 1;
  const ::std::string& network_name() const;
  void set_network_name(const ::std::string& value);
  #if LANG_CXX11
  void set_network_name(::std::string&& value);
  #endif
  void set_network_name(const char* value);
  void set_network_name(const char* value, size_t size);
  ::std::string* mutable_network_name();
  ::std::string* release_network_name();
  void set_allocated_network_name(::std::string* network_name);

  // optional string model_type = 3;
  bool has_model_type() const;
  void clear_model_type();
  static const int kModelTypeFieldNumber = 3;
  const ::std::string& model_type() const;
  void set_model_type(const ::std::string& value);
  #if LANG_CXX11
  void set_model_type(::std::string&& value);
  #endif
  void set_model_type(const char* value);
  void set_model_type(const char* value, size_t size);
  ::std::string* mutable_model_type();
  ::std::string* release_model_type();
  void set_allocated_model_type(::std::string* model_type);

  // optional string caffe_deploy_file = 4;
  bool has_caffe_deploy_file() const;
  void clear_caffe_deploy_file();
  static const int kCaffeDeployFileFieldNumber = 4;
  const ::std::string& caffe_deploy_file() const;
  void set_caffe_deploy_file(const ::std::string& value);
  #if LANG_CXX11
  void set_caffe_deploy_file(::std::string&& value);
  #endif
  void set_caffe_deploy_file(const char* value);
  void set_caffe_deploy_file(const char* value, size_t size);
  ::std::string* mutable_caffe_deploy_file();
  ::std::string* release_caffe_deploy_file();
  void set_allocated_caffe_deploy_file(::std::string* caffe_deploy_file);

  // optional string caffe_model_file = 5;
  bool has_caffe_model_file() const;
  void clear_caffe_model_file();
  static const int kCaffeModelFileFieldNumber = 5;
  const ::std::string& caffe_model_file() const;
  void set_caffe_model_file(const ::std::string& value);
  #if LANG_CXX11
  void set_caffe_model_file(::std::string&& value);
  #endif
  void set_caffe_model_file(const char* value);
  void set_caffe_model_file(const char* value, size_t size);
  ::std::string* mutable_caffe_model_file();
  ::std::string* release_caffe_model_file();
  void set_allocated_caffe_model_file(::std::string* caffe_model_file);

  // optional string onnx_model_file = 6;
  bool has_onnx_model_file() const;
  void clear_onnx_model_file();
  static const int kOnnxModelFileFieldNumber = 6;
  const ::std::string& onnx_model_file() const;
  void set_onnx_model_file(const ::std::string& value);
  #if LANG_CXX11
  void set_onnx_model_file(::std::string&& value);
  #endif
  void set_onnx_model_file(const char* value);
  void set_onnx_model_file(const char* value, size_t size);
  ::std::string* mutable_onnx_model_file();
  ::std::string* release_onnx_model_file();
  void set_allocated_onnx_model_file(::std::string* onnx_model_file);

  // optional string serialize_model_name = 12;
  bool has_serialize_model_name() const;
  void clear_serialize_model_name();
  static const int kSerializeModelNameFieldNumber = 12;
  const ::std::string& serialize_model_name() const;
  void set_serialize_model_name(const ::std::string& value);
  #if LANG_CXX11
  void set_serialize_model_name(::std::string&& value);
  #endif
  void set_serialize_model_name(const char* value);
  void set_serialize_model_name(const char* value, size_t size);
  ::std::string* mutable_serialize_model_name();
  ::std::string* release_serialize_model_name();
  void set_allocated_serialize_model_name(::std::string* serialize_model_name);

  // optional .holo.perception.CalibrationConfig calibration_config = 13;
  bool has_calibration_config() const;
  void clear_calibration_config();
  static const int kCalibrationConfigFieldNumber = 13;
  private:
  const ::holo::perception::CalibrationConfig& _internal_calibration_config() const;
  public:
  const ::holo::perception::CalibrationConfig& calibration_config() const;
  ::holo::perception::CalibrationConfig* release_calibration_config();
  ::holo::perception::CalibrationConfig* mutable_calibration_config();
  void set_allocated_calibration_config(::holo::perception::CalibrationConfig* calibration_config);

  // optional uint64 gpu_id = 2;
  bool has_gpu_id() const;
  void clear_gpu_id();
  static const int kGpuIdFieldNumber = 2;
  ::google::protobuf::uint64 gpu_id() const;
  void set_gpu_id(::google::protobuf::uint64 value);

  // optional uint64 batch_size = 7;
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 7;
  ::google::protobuf::uint64 batch_size() const;
  void set_batch_size(::google::protobuf::uint64 value);

  // optional uint64 tensor_type = 8;
  bool has_tensor_type() const;
  void clear_tensor_type();
  static const int kTensorTypeFieldNumber = 8;
  ::google::protobuf::uint64 tensor_type() const;
  void set_tensor_type(::google::protobuf::uint64 value);

  // optional uint64 work_space = 9;
  bool has_work_space() const;
  void clear_work_space();
  static const int kWorkSpaceFieldNumber = 9;
  ::google::protobuf::uint64 work_space() const;
  void set_work_space(::google::protobuf::uint64 value);

  // optional bool serialize_model = 11;
  bool has_serialize_model() const;
  void clear_serialize_model();
  static const int kSerializeModelFieldNumber = 11;
  bool serialize_model() const;
  void set_serialize_model(bool value);

  // optional bool run_with_dla = 14;
  bool has_run_with_dla() const;
  void clear_run_with_dla();
  static const int kRunWithDlaFieldNumber = 14;
  bool run_with_dla() const;
  void set_run_with_dla(bool value);

  // @@protoc_insertion_point(class_scope:holo.perception.TensorRTConfig)
 private:
  void set_has_network_name();
  void clear_has_network_name();
  void set_has_gpu_id();
  void clear_has_gpu_id();
  void set_has_model_type();
  void clear_has_model_type();
  void set_has_caffe_deploy_file();
  void clear_has_caffe_deploy_file();
  void set_has_caffe_model_file();
  void clear_has_caffe_model_file();
  void set_has_onnx_model_file();
  void clear_has_onnx_model_file();
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_tensor_type();
  void clear_has_tensor_type();
  void set_has_work_space();
  void clear_has_work_space();
  void set_has_serialize_model();
  void clear_has_serialize_model();
  void set_has_serialize_model_name();
  void clear_has_serialize_model_name();
  void set_has_calibration_config();
  void clear_has_calibration_config();
  void set_has_run_with_dla();
  void clear_has_run_with_dla();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::holo::perception::TensorConfig > tensor_config_;
  ::google::protobuf::internal::ArenaStringPtr network_name_;
  ::google::protobuf::internal::ArenaStringPtr model_type_;
  ::google::protobuf::internal::ArenaStringPtr caffe_deploy_file_;
  ::google::protobuf::internal::ArenaStringPtr caffe_model_file_;
  ::google::protobuf::internal::ArenaStringPtr onnx_model_file_;
  ::google::protobuf::internal::ArenaStringPtr serialize_model_name_;
  ::holo::perception::CalibrationConfig* calibration_config_;
  ::google::protobuf::uint64 gpu_id_;
  ::google::protobuf::uint64 batch_size_;
  ::google::protobuf::uint64 tensor_type_;
  ::google::protobuf::uint64 work_space_;
  bool serialize_model_;
  bool run_with_dla_;
  friend struct ::protobuf_tensor_5frt_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorConfig

// optional string name = 1;
inline bool TensorConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TensorConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TensorConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TensorConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TensorConfig::name() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorConfig.name)
  return name_.GetNoArena();
}
inline void TensorConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.TensorConfig.name)
}
#if LANG_CXX11
inline void TensorConfig::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.TensorConfig.name)
}
#endif
inline void TensorConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.TensorConfig.name)
}
inline void TensorConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.TensorConfig.name)
}
inline ::std::string* TensorConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:holo.perception.TensorConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorConfig::release_name() {
  // @@protoc_insertion_point(field_release:holo.perception.TensorConfig.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.TensorConfig.name)
}

// optional uint64 channel = 2;
inline bool TensorConfig::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorConfig::set_has_channel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorConfig::clear_has_channel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorConfig::clear_channel() {
  channel_ = GOOGLE_ULONGLONG(0);
  clear_has_channel();
}
inline ::google::protobuf::uint64 TensorConfig::channel() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorConfig.channel)
  return channel_;
}
inline void TensorConfig::set_channel(::google::protobuf::uint64 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.TensorConfig.channel)
}

// optional uint64 height = 3;
inline bool TensorConfig::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TensorConfig::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TensorConfig::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TensorConfig::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 TensorConfig::height() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorConfig.height)
  return height_;
}
inline void TensorConfig::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.TensorConfig.height)
}

// optional uint64 width = 4;
inline bool TensorConfig::has_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TensorConfig::set_has_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TensorConfig::clear_has_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TensorConfig::clear_width() {
  width_ = GOOGLE_ULONGLONG(0);
  clear_has_width();
}
inline ::google::protobuf::uint64 TensorConfig::width() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorConfig.width)
  return width_;
}
inline void TensorConfig::set_width(::google::protobuf::uint64 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.TensorConfig.width)
}

// optional bool is_output = 5;
inline bool TensorConfig::has_is_output() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TensorConfig::set_has_is_output() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TensorConfig::clear_has_is_output() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TensorConfig::clear_is_output() {
  is_output_ = false;
  clear_has_is_output();
}
inline bool TensorConfig::is_output() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorConfig.is_output)
  return is_output_;
}
inline void TensorConfig::set_is_output(bool value) {
  set_has_is_output();
  is_output_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.TensorConfig.is_output)
}

// -------------------------------------------------------------------

// CalibrationConfig

// optional string file = 1;
inline bool CalibrationConfig::has_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CalibrationConfig::set_has_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CalibrationConfig::clear_has_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CalibrationConfig::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file();
}
inline const ::std::string& CalibrationConfig::file() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.file)
  return file_.GetNoArena();
}
inline void CalibrationConfig::set_file(const ::std::string& value) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.file)
}
#if LANG_CXX11
inline void CalibrationConfig::set_file(::std::string&& value) {
  set_has_file();
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.CalibrationConfig.file)
}
#endif
inline void CalibrationConfig::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.CalibrationConfig.file)
}
inline void CalibrationConfig::set_file(const char* value, size_t size) {
  set_has_file();
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.CalibrationConfig.file)
}
inline ::std::string* CalibrationConfig::mutable_file() {
  set_has_file();
  // @@protoc_insertion_point(field_mutable:holo.perception.CalibrationConfig.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalibrationConfig::release_file() {
  // @@protoc_insertion_point(field_release:holo.perception.CalibrationConfig.file)
  if (!has_file()) {
    return NULL;
  }
  clear_has_file();
  return file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalibrationConfig::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    set_has_file();
  } else {
    clear_has_file();
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.CalibrationConfig.file)
}

// optional bool read_calibration_table_only = 2;
inline bool CalibrationConfig::has_read_calibration_table_only() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CalibrationConfig::set_has_read_calibration_table_only() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CalibrationConfig::clear_has_read_calibration_table_only() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CalibrationConfig::clear_read_calibration_table_only() {
  read_calibration_table_only_ = false;
  clear_has_read_calibration_table_only();
}
inline bool CalibrationConfig::read_calibration_table_only() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.read_calibration_table_only)
  return read_calibration_table_only_;
}
inline void CalibrationConfig::set_read_calibration_table_only(bool value) {
  set_has_read_calibration_table_only();
  read_calibration_table_only_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.read_calibration_table_only)
}

// optional string calibration_list = 3;
inline bool CalibrationConfig::has_calibration_list() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CalibrationConfig::set_has_calibration_list() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CalibrationConfig::clear_has_calibration_list() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CalibrationConfig::clear_calibration_list() {
  calibration_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_calibration_list();
}
inline const ::std::string& CalibrationConfig::calibration_list() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.calibration_list)
  return calibration_list_.GetNoArena();
}
inline void CalibrationConfig::set_calibration_list(const ::std::string& value) {
  set_has_calibration_list();
  calibration_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.calibration_list)
}
#if LANG_CXX11
inline void CalibrationConfig::set_calibration_list(::std::string&& value) {
  set_has_calibration_list();
  calibration_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.CalibrationConfig.calibration_list)
}
#endif
inline void CalibrationConfig::set_calibration_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_calibration_list();
  calibration_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.CalibrationConfig.calibration_list)
}
inline void CalibrationConfig::set_calibration_list(const char* value, size_t size) {
  set_has_calibration_list();
  calibration_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.CalibrationConfig.calibration_list)
}
inline ::std::string* CalibrationConfig::mutable_calibration_list() {
  set_has_calibration_list();
  // @@protoc_insertion_point(field_mutable:holo.perception.CalibrationConfig.calibration_list)
  return calibration_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalibrationConfig::release_calibration_list() {
  // @@protoc_insertion_point(field_release:holo.perception.CalibrationConfig.calibration_list)
  if (!has_calibration_list()) {
    return NULL;
  }
  clear_has_calibration_list();
  return calibration_list_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalibrationConfig::set_allocated_calibration_list(::std::string* calibration_list) {
  if (calibration_list != NULL) {
    set_has_calibration_list();
  } else {
    clear_has_calibration_list();
  }
  calibration_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), calibration_list);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.CalibrationConfig.calibration_list)
}

// optional uint64 first_batch = 4;
inline bool CalibrationConfig::has_first_batch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CalibrationConfig::set_has_first_batch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CalibrationConfig::clear_has_first_batch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CalibrationConfig::clear_first_batch() {
  first_batch_ = GOOGLE_ULONGLONG(0);
  clear_has_first_batch();
}
inline ::google::protobuf::uint64 CalibrationConfig::first_batch() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.first_batch)
  return first_batch_;
}
inline void CalibrationConfig::set_first_batch(::google::protobuf::uint64 value) {
  set_has_first_batch();
  first_batch_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.first_batch)
}

// optional uint64 batch_size = 5;
inline bool CalibrationConfig::has_batch_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CalibrationConfig::set_has_batch_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CalibrationConfig::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CalibrationConfig::clear_batch_size() {
  batch_size_ = GOOGLE_ULONGLONG(0);
  clear_has_batch_size();
}
inline ::google::protobuf::uint64 CalibrationConfig::batch_size() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.batch_size)
  return batch_size_;
}
inline void CalibrationConfig::set_batch_size(::google::protobuf::uint64 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.batch_size)
}

// optional uint64 num_batches = 6;
inline bool CalibrationConfig::has_num_batches() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CalibrationConfig::set_has_num_batches() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CalibrationConfig::clear_has_num_batches() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CalibrationConfig::clear_num_batches() {
  num_batches_ = GOOGLE_ULONGLONG(0);
  clear_has_num_batches();
}
inline ::google::protobuf::uint64 CalibrationConfig::num_batches() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.num_batches)
  return num_batches_;
}
inline void CalibrationConfig::set_num_batches(::google::protobuf::uint64 value) {
  set_has_num_batches();
  num_batches_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.num_batches)
}

// optional uint64 height = 7;
inline bool CalibrationConfig::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CalibrationConfig::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CalibrationConfig::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CalibrationConfig::clear_height() {
  height_ = GOOGLE_ULONGLONG(0);
  clear_has_height();
}
inline ::google::protobuf::uint64 CalibrationConfig::height() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.height)
  return height_;
}
inline void CalibrationConfig::set_height(::google::protobuf::uint64 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.height)
}

// optional uint64 width = 8;
inline bool CalibrationConfig::has_width() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CalibrationConfig::set_has_width() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CalibrationConfig::clear_has_width() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CalibrationConfig::clear_width() {
  width_ = GOOGLE_ULONGLONG(0);
  clear_has_width();
}
inline ::google::protobuf::uint64 CalibrationConfig::width() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.width)
  return width_;
}
inline void CalibrationConfig::set_width(::google::protobuf::uint64 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.width)
}

// optional float scale = 9;
inline bool CalibrationConfig::has_scale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CalibrationConfig::set_has_scale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CalibrationConfig::clear_has_scale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CalibrationConfig::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float CalibrationConfig::scale() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.scale)
  return scale_;
}
inline void CalibrationConfig::set_scale(float value) {
  set_has_scale();
  scale_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.scale)
}

// optional string mean = 10;
inline bool CalibrationConfig::has_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CalibrationConfig::set_has_mean() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CalibrationConfig::clear_has_mean() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CalibrationConfig::clear_mean() {
  mean_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean();
}
inline const ::std::string& CalibrationConfig::mean() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.mean)
  return mean_.GetNoArena();
}
inline void CalibrationConfig::set_mean(const ::std::string& value) {
  set_has_mean();
  mean_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.mean)
}
#if LANG_CXX11
inline void CalibrationConfig::set_mean(::std::string&& value) {
  set_has_mean();
  mean_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.CalibrationConfig.mean)
}
#endif
inline void CalibrationConfig::set_mean(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mean();
  mean_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.CalibrationConfig.mean)
}
inline void CalibrationConfig::set_mean(const char* value, size_t size) {
  set_has_mean();
  mean_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.CalibrationConfig.mean)
}
inline ::std::string* CalibrationConfig::mutable_mean() {
  set_has_mean();
  // @@protoc_insertion_point(field_mutable:holo.perception.CalibrationConfig.mean)
  return mean_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalibrationConfig::release_mean() {
  // @@protoc_insertion_point(field_release:holo.perception.CalibrationConfig.mean)
  if (!has_mean()) {
    return NULL;
  }
  clear_has_mean();
  return mean_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalibrationConfig::set_allocated_mean(::std::string* mean) {
  if (mean != NULL) {
    set_has_mean();
  } else {
    clear_has_mean();
  }
  mean_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.CalibrationConfig.mean)
}

// optional string dev = 11;
inline bool CalibrationConfig::has_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CalibrationConfig::set_has_dev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CalibrationConfig::clear_has_dev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CalibrationConfig::clear_dev() {
  dev_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dev();
}
inline const ::std::string& CalibrationConfig::dev() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.dev)
  return dev_.GetNoArena();
}
inline void CalibrationConfig::set_dev(const ::std::string& value) {
  set_has_dev();
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.dev)
}
#if LANG_CXX11
inline void CalibrationConfig::set_dev(::std::string&& value) {
  set_has_dev();
  dev_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.CalibrationConfig.dev)
}
#endif
inline void CalibrationConfig::set_dev(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dev();
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.CalibrationConfig.dev)
}
inline void CalibrationConfig::set_dev(const char* value, size_t size) {
  set_has_dev();
  dev_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.CalibrationConfig.dev)
}
inline ::std::string* CalibrationConfig::mutable_dev() {
  set_has_dev();
  // @@protoc_insertion_point(field_mutable:holo.perception.CalibrationConfig.dev)
  return dev_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CalibrationConfig::release_dev() {
  // @@protoc_insertion_point(field_release:holo.perception.CalibrationConfig.dev)
  if (!has_dev()) {
    return NULL;
  }
  clear_has_dev();
  return dev_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CalibrationConfig::set_allocated_dev(::std::string* dev) {
  if (dev != NULL) {
    set_has_dev();
  } else {
    clear_has_dev();
  }
  dev_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.CalibrationConfig.dev)
}

// optional float padding_with = 12;
inline bool CalibrationConfig::has_padding_with() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CalibrationConfig::set_has_padding_with() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CalibrationConfig::clear_has_padding_with() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CalibrationConfig::clear_padding_with() {
  padding_with_ = 0;
  clear_has_padding_with();
}
inline float CalibrationConfig::padding_with() const {
  // @@protoc_insertion_point(field_get:holo.perception.CalibrationConfig.padding_with)
  return padding_with_;
}
inline void CalibrationConfig::set_padding_with(float value) {
  set_has_padding_with();
  padding_with_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.CalibrationConfig.padding_with)
}

// -------------------------------------------------------------------

// TensorRTConfig

// optional string network_name = 1;
inline bool TensorRTConfig::has_network_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TensorRTConfig::set_has_network_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TensorRTConfig::clear_has_network_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TensorRTConfig::clear_network_name() {
  network_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_network_name();
}
inline const ::std::string& TensorRTConfig::network_name() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.network_name)
  return network_name_.GetNoArena();
}
inline void TensorRTConfig::set_network_name(const ::std::string& value) {
  set_has_network_name();
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.network_name)
}
#if LANG_CXX11
inline void TensorRTConfig::set_network_name(::std::string&& value) {
  set_has_network_name();
  network_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.TensorRTConfig.network_name)
}
#endif
inline void TensorRTConfig::set_network_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_network_name();
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.TensorRTConfig.network_name)
}
inline void TensorRTConfig::set_network_name(const char* value, size_t size) {
  set_has_network_name();
  network_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.TensorRTConfig.network_name)
}
inline ::std::string* TensorRTConfig::mutable_network_name() {
  set_has_network_name();
  // @@protoc_insertion_point(field_mutable:holo.perception.TensorRTConfig.network_name)
  return network_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorRTConfig::release_network_name() {
  // @@protoc_insertion_point(field_release:holo.perception.TensorRTConfig.network_name)
  if (!has_network_name()) {
    return NULL;
  }
  clear_has_network_name();
  return network_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorRTConfig::set_allocated_network_name(::std::string* network_name) {
  if (network_name != NULL) {
    set_has_network_name();
  } else {
    clear_has_network_name();
  }
  network_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network_name);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.TensorRTConfig.network_name)
}

// optional uint64 gpu_id = 2;
inline bool TensorRTConfig::has_gpu_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TensorRTConfig::set_has_gpu_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TensorRTConfig::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TensorRTConfig::clear_gpu_id() {
  gpu_id_ = GOOGLE_ULONGLONG(0);
  clear_has_gpu_id();
}
inline ::google::protobuf::uint64 TensorRTConfig::gpu_id() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.gpu_id)
  return gpu_id_;
}
inline void TensorRTConfig::set_gpu_id(::google::protobuf::uint64 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.gpu_id)
}

// optional string model_type = 3;
inline bool TensorRTConfig::has_model_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TensorRTConfig::set_has_model_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TensorRTConfig::clear_has_model_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TensorRTConfig::clear_model_type() {
  model_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_type();
}
inline const ::std::string& TensorRTConfig::model_type() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.model_type)
  return model_type_.GetNoArena();
}
inline void TensorRTConfig::set_model_type(const ::std::string& value) {
  set_has_model_type();
  model_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.model_type)
}
#if LANG_CXX11
inline void TensorRTConfig::set_model_type(::std::string&& value) {
  set_has_model_type();
  model_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.TensorRTConfig.model_type)
}
#endif
inline void TensorRTConfig::set_model_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_model_type();
  model_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.TensorRTConfig.model_type)
}
inline void TensorRTConfig::set_model_type(const char* value, size_t size) {
  set_has_model_type();
  model_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.TensorRTConfig.model_type)
}
inline ::std::string* TensorRTConfig::mutable_model_type() {
  set_has_model_type();
  // @@protoc_insertion_point(field_mutable:holo.perception.TensorRTConfig.model_type)
  return model_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorRTConfig::release_model_type() {
  // @@protoc_insertion_point(field_release:holo.perception.TensorRTConfig.model_type)
  if (!has_model_type()) {
    return NULL;
  }
  clear_has_model_type();
  return model_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorRTConfig::set_allocated_model_type(::std::string* model_type) {
  if (model_type != NULL) {
    set_has_model_type();
  } else {
    clear_has_model_type();
  }
  model_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_type);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.TensorRTConfig.model_type)
}

// optional string caffe_deploy_file = 4;
inline bool TensorRTConfig::has_caffe_deploy_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TensorRTConfig::set_has_caffe_deploy_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TensorRTConfig::clear_has_caffe_deploy_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TensorRTConfig::clear_caffe_deploy_file() {
  caffe_deploy_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caffe_deploy_file();
}
inline const ::std::string& TensorRTConfig::caffe_deploy_file() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.caffe_deploy_file)
  return caffe_deploy_file_.GetNoArena();
}
inline void TensorRTConfig::set_caffe_deploy_file(const ::std::string& value) {
  set_has_caffe_deploy_file();
  caffe_deploy_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.caffe_deploy_file)
}
#if LANG_CXX11
inline void TensorRTConfig::set_caffe_deploy_file(::std::string&& value) {
  set_has_caffe_deploy_file();
  caffe_deploy_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.TensorRTConfig.caffe_deploy_file)
}
#endif
inline void TensorRTConfig::set_caffe_deploy_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caffe_deploy_file();
  caffe_deploy_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.TensorRTConfig.caffe_deploy_file)
}
inline void TensorRTConfig::set_caffe_deploy_file(const char* value, size_t size) {
  set_has_caffe_deploy_file();
  caffe_deploy_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.TensorRTConfig.caffe_deploy_file)
}
inline ::std::string* TensorRTConfig::mutable_caffe_deploy_file() {
  set_has_caffe_deploy_file();
  // @@protoc_insertion_point(field_mutable:holo.perception.TensorRTConfig.caffe_deploy_file)
  return caffe_deploy_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorRTConfig::release_caffe_deploy_file() {
  // @@protoc_insertion_point(field_release:holo.perception.TensorRTConfig.caffe_deploy_file)
  if (!has_caffe_deploy_file()) {
    return NULL;
  }
  clear_has_caffe_deploy_file();
  return caffe_deploy_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorRTConfig::set_allocated_caffe_deploy_file(::std::string* caffe_deploy_file) {
  if (caffe_deploy_file != NULL) {
    set_has_caffe_deploy_file();
  } else {
    clear_has_caffe_deploy_file();
  }
  caffe_deploy_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caffe_deploy_file);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.TensorRTConfig.caffe_deploy_file)
}

// optional string caffe_model_file = 5;
inline bool TensorRTConfig::has_caffe_model_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TensorRTConfig::set_has_caffe_model_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TensorRTConfig::clear_has_caffe_model_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TensorRTConfig::clear_caffe_model_file() {
  caffe_model_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_caffe_model_file();
}
inline const ::std::string& TensorRTConfig::caffe_model_file() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.caffe_model_file)
  return caffe_model_file_.GetNoArena();
}
inline void TensorRTConfig::set_caffe_model_file(const ::std::string& value) {
  set_has_caffe_model_file();
  caffe_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.caffe_model_file)
}
#if LANG_CXX11
inline void TensorRTConfig::set_caffe_model_file(::std::string&& value) {
  set_has_caffe_model_file();
  caffe_model_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.TensorRTConfig.caffe_model_file)
}
#endif
inline void TensorRTConfig::set_caffe_model_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_caffe_model_file();
  caffe_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.TensorRTConfig.caffe_model_file)
}
inline void TensorRTConfig::set_caffe_model_file(const char* value, size_t size) {
  set_has_caffe_model_file();
  caffe_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.TensorRTConfig.caffe_model_file)
}
inline ::std::string* TensorRTConfig::mutable_caffe_model_file() {
  set_has_caffe_model_file();
  // @@protoc_insertion_point(field_mutable:holo.perception.TensorRTConfig.caffe_model_file)
  return caffe_model_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorRTConfig::release_caffe_model_file() {
  // @@protoc_insertion_point(field_release:holo.perception.TensorRTConfig.caffe_model_file)
  if (!has_caffe_model_file()) {
    return NULL;
  }
  clear_has_caffe_model_file();
  return caffe_model_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorRTConfig::set_allocated_caffe_model_file(::std::string* caffe_model_file) {
  if (caffe_model_file != NULL) {
    set_has_caffe_model_file();
  } else {
    clear_has_caffe_model_file();
  }
  caffe_model_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caffe_model_file);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.TensorRTConfig.caffe_model_file)
}

// optional string onnx_model_file = 6;
inline bool TensorRTConfig::has_onnx_model_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TensorRTConfig::set_has_onnx_model_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TensorRTConfig::clear_has_onnx_model_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TensorRTConfig::clear_onnx_model_file() {
  onnx_model_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_onnx_model_file();
}
inline const ::std::string& TensorRTConfig::onnx_model_file() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.onnx_model_file)
  return onnx_model_file_.GetNoArena();
}
inline void TensorRTConfig::set_onnx_model_file(const ::std::string& value) {
  set_has_onnx_model_file();
  onnx_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.onnx_model_file)
}
#if LANG_CXX11
inline void TensorRTConfig::set_onnx_model_file(::std::string&& value) {
  set_has_onnx_model_file();
  onnx_model_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.TensorRTConfig.onnx_model_file)
}
#endif
inline void TensorRTConfig::set_onnx_model_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_onnx_model_file();
  onnx_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.TensorRTConfig.onnx_model_file)
}
inline void TensorRTConfig::set_onnx_model_file(const char* value, size_t size) {
  set_has_onnx_model_file();
  onnx_model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.TensorRTConfig.onnx_model_file)
}
inline ::std::string* TensorRTConfig::mutable_onnx_model_file() {
  set_has_onnx_model_file();
  // @@protoc_insertion_point(field_mutable:holo.perception.TensorRTConfig.onnx_model_file)
  return onnx_model_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorRTConfig::release_onnx_model_file() {
  // @@protoc_insertion_point(field_release:holo.perception.TensorRTConfig.onnx_model_file)
  if (!has_onnx_model_file()) {
    return NULL;
  }
  clear_has_onnx_model_file();
  return onnx_model_file_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorRTConfig::set_allocated_onnx_model_file(::std::string* onnx_model_file) {
  if (onnx_model_file != NULL) {
    set_has_onnx_model_file();
  } else {
    clear_has_onnx_model_file();
  }
  onnx_model_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), onnx_model_file);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.TensorRTConfig.onnx_model_file)
}

// optional uint64 batch_size = 7;
inline bool TensorRTConfig::has_batch_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TensorRTConfig::set_has_batch_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TensorRTConfig::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TensorRTConfig::clear_batch_size() {
  batch_size_ = GOOGLE_ULONGLONG(0);
  clear_has_batch_size();
}
inline ::google::protobuf::uint64 TensorRTConfig::batch_size() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.batch_size)
  return batch_size_;
}
inline void TensorRTConfig::set_batch_size(::google::protobuf::uint64 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.batch_size)
}

// optional uint64 tensor_type = 8;
inline bool TensorRTConfig::has_tensor_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TensorRTConfig::set_has_tensor_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TensorRTConfig::clear_has_tensor_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TensorRTConfig::clear_tensor_type() {
  tensor_type_ = GOOGLE_ULONGLONG(0);
  clear_has_tensor_type();
}
inline ::google::protobuf::uint64 TensorRTConfig::tensor_type() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.tensor_type)
  return tensor_type_;
}
inline void TensorRTConfig::set_tensor_type(::google::protobuf::uint64 value) {
  set_has_tensor_type();
  tensor_type_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.tensor_type)
}

// optional uint64 work_space = 9;
inline bool TensorRTConfig::has_work_space() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TensorRTConfig::set_has_work_space() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TensorRTConfig::clear_has_work_space() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TensorRTConfig::clear_work_space() {
  work_space_ = GOOGLE_ULONGLONG(0);
  clear_has_work_space();
}
inline ::google::protobuf::uint64 TensorRTConfig::work_space() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.work_space)
  return work_space_;
}
inline void TensorRTConfig::set_work_space(::google::protobuf::uint64 value) {
  set_has_work_space();
  work_space_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.work_space)
}

// repeated .holo.perception.TensorConfig tensor_config = 10;
inline int TensorRTConfig::tensor_config_size() const {
  return tensor_config_.size();
}
inline void TensorRTConfig::clear_tensor_config() {
  tensor_config_.Clear();
}
inline ::holo::perception::TensorConfig* TensorRTConfig::mutable_tensor_config(int index) {
  // @@protoc_insertion_point(field_mutable:holo.perception.TensorRTConfig.tensor_config)
  return tensor_config_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::holo::perception::TensorConfig >*
TensorRTConfig::mutable_tensor_config() {
  // @@protoc_insertion_point(field_mutable_list:holo.perception.TensorRTConfig.tensor_config)
  return &tensor_config_;
}
inline const ::holo::perception::TensorConfig& TensorRTConfig::tensor_config(int index) const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.tensor_config)
  return tensor_config_.Get(index);
}
inline ::holo::perception::TensorConfig* TensorRTConfig::add_tensor_config() {
  // @@protoc_insertion_point(field_add:holo.perception.TensorRTConfig.tensor_config)
  return tensor_config_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::holo::perception::TensorConfig >&
TensorRTConfig::tensor_config() const {
  // @@protoc_insertion_point(field_list:holo.perception.TensorRTConfig.tensor_config)
  return tensor_config_;
}

// optional bool serialize_model = 11;
inline bool TensorRTConfig::has_serialize_model() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TensorRTConfig::set_has_serialize_model() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TensorRTConfig::clear_has_serialize_model() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TensorRTConfig::clear_serialize_model() {
  serialize_model_ = false;
  clear_has_serialize_model();
}
inline bool TensorRTConfig::serialize_model() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.serialize_model)
  return serialize_model_;
}
inline void TensorRTConfig::set_serialize_model(bool value) {
  set_has_serialize_model();
  serialize_model_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.serialize_model)
}

// optional string serialize_model_name = 12;
inline bool TensorRTConfig::has_serialize_model_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TensorRTConfig::set_has_serialize_model_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TensorRTConfig::clear_has_serialize_model_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TensorRTConfig::clear_serialize_model_name() {
  serialize_model_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialize_model_name();
}
inline const ::std::string& TensorRTConfig::serialize_model_name() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.serialize_model_name)
  return serialize_model_name_.GetNoArena();
}
inline void TensorRTConfig::set_serialize_model_name(const ::std::string& value) {
  set_has_serialize_model_name();
  serialize_model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.serialize_model_name)
}
#if LANG_CXX11
inline void TensorRTConfig::set_serialize_model_name(::std::string&& value) {
  set_has_serialize_model_name();
  serialize_model_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:holo.perception.TensorRTConfig.serialize_model_name)
}
#endif
inline void TensorRTConfig::set_serialize_model_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialize_model_name();
  serialize_model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:holo.perception.TensorRTConfig.serialize_model_name)
}
inline void TensorRTConfig::set_serialize_model_name(const char* value, size_t size) {
  set_has_serialize_model_name();
  serialize_model_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:holo.perception.TensorRTConfig.serialize_model_name)
}
inline ::std::string* TensorRTConfig::mutable_serialize_model_name() {
  set_has_serialize_model_name();
  // @@protoc_insertion_point(field_mutable:holo.perception.TensorRTConfig.serialize_model_name)
  return serialize_model_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TensorRTConfig::release_serialize_model_name() {
  // @@protoc_insertion_point(field_release:holo.perception.TensorRTConfig.serialize_model_name)
  if (!has_serialize_model_name()) {
    return NULL;
  }
  clear_has_serialize_model_name();
  return serialize_model_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TensorRTConfig::set_allocated_serialize_model_name(::std::string* serialize_model_name) {
  if (serialize_model_name != NULL) {
    set_has_serialize_model_name();
  } else {
    clear_has_serialize_model_name();
  }
  serialize_model_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialize_model_name);
  // @@protoc_insertion_point(field_set_allocated:holo.perception.TensorRTConfig.serialize_model_name)
}

// optional .holo.perception.CalibrationConfig calibration_config = 13;
inline bool TensorRTConfig::has_calibration_config() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TensorRTConfig::set_has_calibration_config() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TensorRTConfig::clear_has_calibration_config() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TensorRTConfig::clear_calibration_config() {
  if (calibration_config_ != NULL) calibration_config_->Clear();
  clear_has_calibration_config();
}
inline const ::holo::perception::CalibrationConfig& TensorRTConfig::_internal_calibration_config() const {
  return *calibration_config_;
}
inline const ::holo::perception::CalibrationConfig& TensorRTConfig::calibration_config() const {
  const ::holo::perception::CalibrationConfig* p = calibration_config_;
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.calibration_config)
  return p != NULL ? *p : *reinterpret_cast<const ::holo::perception::CalibrationConfig*>(
      &::holo::perception::_CalibrationConfig_default_instance_);
}
inline ::holo::perception::CalibrationConfig* TensorRTConfig::release_calibration_config() {
  // @@protoc_insertion_point(field_release:holo.perception.TensorRTConfig.calibration_config)
  clear_has_calibration_config();
  ::holo::perception::CalibrationConfig* temp = calibration_config_;
  calibration_config_ = NULL;
  return temp;
}
inline ::holo::perception::CalibrationConfig* TensorRTConfig::mutable_calibration_config() {
  set_has_calibration_config();
  if (calibration_config_ == NULL) {
    auto* p = CreateMaybeMessage<::holo::perception::CalibrationConfig>(GetArenaNoVirtual());
    calibration_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:holo.perception.TensorRTConfig.calibration_config)
  return calibration_config_;
}
inline void TensorRTConfig::set_allocated_calibration_config(::holo::perception::CalibrationConfig* calibration_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete calibration_config_;
  }
  if (calibration_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      calibration_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, calibration_config, submessage_arena);
    }
    set_has_calibration_config();
  } else {
    clear_has_calibration_config();
  }
  calibration_config_ = calibration_config;
  // @@protoc_insertion_point(field_set_allocated:holo.perception.TensorRTConfig.calibration_config)
}

// optional bool run_with_dla = 14;
inline bool TensorRTConfig::has_run_with_dla() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TensorRTConfig::set_has_run_with_dla() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TensorRTConfig::clear_has_run_with_dla() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TensorRTConfig::clear_run_with_dla() {
  run_with_dla_ = false;
  clear_has_run_with_dla();
}
inline bool TensorRTConfig::run_with_dla() const {
  // @@protoc_insertion_point(field_get:holo.perception.TensorRTConfig.run_with_dla)
  return run_with_dla_;
}
inline void TensorRTConfig::set_run_with_dla(bool value) {
  set_has_run_with_dla();
  run_with_dla_ = value;
  // @@protoc_insertion_point(field_set:holo.perception.TensorRTConfig.run_with_dla)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace holo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_tensor_5frt_2eproto
