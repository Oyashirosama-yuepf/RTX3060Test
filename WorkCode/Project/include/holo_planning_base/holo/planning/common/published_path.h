/*
 * Copyright (C) HoloMatic Technology(Beijing) Co., Ltd. - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

/**
 * @file published_path.h
 * @brief the header of published path
 * @author wangchantong(wangchantong@holomatic.com)
 * @date 2021-04-10
 */
#ifndef _HOLO_PLANNING_PUBLISHED_PATH_H_
#define _HOLO_PLANNING_PUBLISHED_PATH_H_

#include <holo/common/path.h>
#include <holo/container/details/fixed_size_vector.h>
#include <holo/container/details/vector.h>
#include <holo/core/types.h>
#include <holo/geometry/pose3.h>

namespace holo
{
namespace planning
{
/**
 * @brief Class for published path point.
 */
class PublishedPathPoint : public common::PathPoint
{
public:
    /**
     * @brief Construct an PublishedPathPoint object.
     */
    PublishedPathPoint() = default;

    /**
     * @brief Construct an PublishedPathPoint object.
     *
     * @param pt The path point object of Base class.
     */
    PublishedPathPoint(common::PathPoint const& pt) : common::PathPoint(pt){};

    /**
     * @brief Get Base elements of path point from Derived class.
     *
     * @return The path point object of Base class.
     */
    common::PathPoint GetPathPoint() const
    {
        common::PathPoint pt;
        pt.SetX(this->GetX());
        pt.SetY(this->GetY());
        pt.SetZ(this->GetZ());
        pt.SetAcceleration(this->GetAcceleration());
        pt.SetCurvature(this->GetCurvature());
        pt.SetSpeed(this->GetSpeed());
        pt.SetTheta(this->GetTheta());

        return pt;
    }

    /**
     * @brief Set relative time of path point according to header time of the PublishedPath.
     *
     * @param relative_time The relative time of header time.
     */
    void SetRelativeTime(float64_t relative_time)
    {
        relative_time_ = relative_time;
    }

    /**
     * @brief Get relative time of path point according to header time of the PublishedPath.
     *
     * @return The relative time of header time.
     */
    float64_t GetRelativeTime() const
    {
        return relative_time_;
    }

private:
    ///< The relative time to header time of the PublishedPath.
    float64_t relative_time_ = 0.0;
};

/**
 * @brief Class for published path.
 */
class PublishedPath : public holo::container::details::VectorBase<PublishedPathPoint, 256U>
{
    using Base = holo::container::details::VectorBase<PublishedPathPoint, 256U>;

public:
    /**
     * @brief Construct an PublishedPath object.
     */
    PublishedPath() : Base(), header_time_(std::numeric_limits<float64_t>::max()){};

    /**
     * @brief Construct an PublishedPath object.
     *
     * @param initial_time The initial relative time of the path.
     *                     Attention : initial_time), [planned_path.begin, planned_path.end]
     * @param planned_path The Path generated by planner.
     * @param time_interval The time interval between neighbor path point.
     */
    PublishedPath(float64_t initial_time, common::Path const& planned_path, float64_t time_interval = 0.1);

    /**
     * @brief Construct an PublishedPath object.
     *
     * @param published_path The PublishedPath object.
     */
    PublishedPath(PublishedPath const& published_path) : Base(), header_time_(std::numeric_limits<float64_t>::max())
    {
        if (this != &published_path)
        {
            this->assign(published_path.begin(), published_path.end());
            this->header_time_ = published_path.header_time_;
        }
    }

    /**
     * @brief Operator=
     *
     * @param published_path The PublishedPath object.
     */
    PublishedPath& operator=(PublishedPath const& published_path)
    {
        if (this != &published_path)
        {
            this->assign(published_path.begin(), published_path.end());
            this->header_time_ = published_path.header_time_;
        }

        return *this;
    }

    /**
     * @brief Prepend a PublishedPath into another.
     *
     * @param stitching_path The PublishedPath object.
     */
    void PrependPushlishedPath(PublishedPath& stitching_path);

    /**
     * @brief Refining PublishedPoints relative time by using current timestamp.
     *
     * @param current_time Current time stamp.
     */
    void RefineRelativeTime(float64_t current_time);

    /**
     * @brief Slicing a range [match point of stitcher, end) of PublishedPath.
     *        match point of stitcher = initial_time index - forward_points_num.
     *
     * @param initial_time The relative time.
     * @param forward_points_num The forward number of stitcher.
     *
     * @return The slicing path.
     */
    common::Path SliceToPath(float64_t initial_time, uint32_t forward_points_num) const;

    /**
     * @brief Check the relative time order of points in PublishedPath.
     *
     * @return True if the PublishedPathPoint in order.
     */
    bool_t CheckPublishedPointOrder() const;

    /**
     * @brief Set the header time of the PublishedPath.
     *
     * @param header_time The header time of the PublishedPath.
     */
    void SetHeaderTime(float64_t header_time)
    {
        header_time_ = header_time;
    }

    /**
     * @brief Get the header time of the PublishedPath.
     *
     * @return header_time The header time of the PublishedPath.
     */
    float64_t GetHeaderTime() const
    {
        return header_time_;
    }

    /**
     * @brief Query lower bound point's index.
     *
     * @param relative_time The relative time.
     * @param epsilon The tiny bias.
     *
     * @return The index which matches lower bound point.
     */
    uint32_t QueryLowerBoundPoint(float64_t relative_time, float64_t epsilon = 0.05) const;

    /**
     * @brief Query nearest point's index.
     *
     * @param pose The pose in odometry.
     *
     * @return The index which matches nearest point.
     */
    uint32_t QueryNearestPoint(holo::geometry::Pose3d const& pose) const;

private:
    ///< The header time of the PublishedPath.
    float64_t header_time_;
};

}  // namespace planning
}  // namespace holo

#endif
