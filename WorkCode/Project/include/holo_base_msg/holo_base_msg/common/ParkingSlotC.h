// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p19
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL__HOME_HOLO_WORKSPACE_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_BASE_MSG_INCLUDE_HOLO_BASE_MSG_COMMON_PARKINGSLOTC_AYAKDL_H_
#define _TAO_IDL__HOME_HOLO_WORKSPACE_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_BASE_MSG_INCLUDE_HOLO_BASE_MSG_COMMON_PARKINGSLOTC_AYAKDL_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "holo_base_msg/common/CommonC.h"
#include "holo_base_msg/core/TypesC.h"
#include "holo_base_msg/geometry/PointC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace holo_base_msg
{

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:38

  namespace common
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ParkingSlotf;

    typedef
      ::TAO_Var_Var_T<
          ParkingSlotf
        >
      ParkingSlotf_var;

    typedef
      ::TAO_Out_T<
          ParkingSlotf
        >
      ParkingSlotf_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ParkingSlotf
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ParkingSlotf_var _var_type;
      typedef ParkingSlotf_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::core::uint64_t id;
      holo_base_msg::core::bool_t is_valid;
      holo_base_msg::core::uint32_t type;
      holo_base_msg::core::uint32_t position;
      holo_base_msg::core::uint32_t status;
      holo_base_msg::core::float32_t width;
      holo_base_msg::core::float32_t height;
      holo_base_msg::core::float32_t angle;
      holo_base_msg::core::float32_t confidence;
      holo_base_msg::core::bool_t is_rear_vertex_available;
      holo_base_msg::geometry::Point3fSequence vertices;
      holo_base_msg::core::bool_t is_center_vertex_available;
      holo_base_msg::geometry::Point3f center_vertex;
      holo_base_msg::core::bool_t is_stopper_available;
      holo_base_msg::geometry::Point3fSequence stopper_vertices;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ParkingSlotf;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_COMMON_PARKINGSLOTFSEQUENCE_CH_)
#define _HOLO_BASE_MSG_COMMON_PARKINGSLOTFSEQUENCE_CH_

    class ParkingSlotfSequence;

    typedef
      ::TAO_VarSeq_Var_T<
          ParkingSlotfSequence
        >
      ParkingSlotfSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          ParkingSlotfSequence
        >
      ParkingSlotfSequence_out;

    class  ParkingSlotfSequence
      : public
          ::TAO::unbounded_value_sequence<
              ParkingSlotf
            >
    {
    public:
      ParkingSlotfSequence (void);
      ParkingSlotfSequence ( ::CORBA::ULong max);
      ParkingSlotfSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ParkingSlotf* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      ParkingSlotfSequence (const ParkingSlotfSequence &) = default;
      ParkingSlotfSequence (ParkingSlotfSequence &&) = default;
      ParkingSlotfSequence& operator= (const ParkingSlotfSequence &) = default;
      ParkingSlotfSequence& operator= (ParkingSlotfSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~ParkingSlotfSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ParkingSlotfSequence_var _var_type;
      typedef ParkingSlotfSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ParkingSlotfSequence;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ParkingSlotd;

    typedef
      ::TAO_Var_Var_T<
          ParkingSlotd
        >
      ParkingSlotd_var;

    typedef
      ::TAO_Out_T<
          ParkingSlotd
        >
      ParkingSlotd_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ParkingSlotd
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ParkingSlotd_var _var_type;
      typedef ParkingSlotd_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::core::uint64_t id;
      holo_base_msg::core::bool_t is_valid;
      holo_base_msg::core::uint32_t type;
      holo_base_msg::core::uint32_t position;
      holo_base_msg::core::uint32_t status;
      holo_base_msg::core::float64_t width;
      holo_base_msg::core::float64_t height;
      holo_base_msg::core::float64_t angle;
      holo_base_msg::core::float64_t confidence;
      holo_base_msg::core::bool_t is_rear_vertex_available;
      holo_base_msg::geometry::Point3dSequence vertices;
      holo_base_msg::core::bool_t is_center_vertex_available;
      holo_base_msg::geometry::Point3d center_vertex;
      holo_base_msg::core::bool_t is_stopper_available;
      holo_base_msg::geometry::Point3dSequence stopper_vertices;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ParkingSlotd;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_COMMON_PARKINGSLOTDSEQUENCE_CH_)
#define _HOLO_BASE_MSG_COMMON_PARKINGSLOTDSEQUENCE_CH_

    class ParkingSlotdSequence;

    typedef
      ::TAO_VarSeq_Var_T<
          ParkingSlotdSequence
        >
      ParkingSlotdSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          ParkingSlotdSequence
        >
      ParkingSlotdSequence_out;

    class  ParkingSlotdSequence
      : public
          ::TAO::unbounded_value_sequence<
              ParkingSlotd
            >
    {
    public:
      ParkingSlotdSequence (void);
      ParkingSlotdSequence ( ::CORBA::ULong max);
      ParkingSlotdSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ParkingSlotd* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      ParkingSlotdSequence (const ParkingSlotdSequence &) = default;
      ParkingSlotdSequence (ParkingSlotdSequence &&) = default;
      ParkingSlotdSequence& operator= (const ParkingSlotdSequence &) = default;
      ParkingSlotdSequence& operator= (ParkingSlotdSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~ParkingSlotdSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ParkingSlotdSequence_var _var_type;
      typedef ParkingSlotdSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ParkingSlotdSequence;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ParkingSlotFramef;

    typedef
      ::TAO_Var_Var_T<
          ParkingSlotFramef
        >
      ParkingSlotFramef_var;

    typedef
      ::TAO_Out_T<
          ParkingSlotFramef
        >
      ParkingSlotFramef_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ParkingSlotFramef
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ParkingSlotFramef_var _var_type;
      typedef ParkingSlotFramef_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::common::ParkingSlotfSequence point_list;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ParkingSlotFramef;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ParkingSlotFramed;

    typedef
      ::TAO_Var_Var_T<
          ParkingSlotFramed
        >
      ParkingSlotFramed_var;

    typedef
      ::TAO_Out_T<
          ParkingSlotFramed
        >
      ParkingSlotFramed_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ParkingSlotFramed
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ParkingSlotFramed_var _var_type;
      typedef ParkingSlotFramed_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::common::ParkingSlotdSequence point_list;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ParkingSlotFramed;
  
  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:67
  
  } // module holo_base_msg::common

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module holo_base_msg

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::common::ParkingSlotf>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::common::ParkingSlotf,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::common::ParkingSlotfSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::common::ParkingSlotfSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::common::ParkingSlotd>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::common::ParkingSlotd,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::common::ParkingSlotdSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::common::ParkingSlotdSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::common::ParkingSlotFramef>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::common::ParkingSlotFramef,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::common::ParkingSlotFramed>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::common::ParkingSlotFramed,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotf &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::common::ParkingSlotf*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::ParkingSlotf *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotf *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::common::ParkingSlotf &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::common::ParkingSlotf*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::ParkingSlotf *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::ParkingSlotf *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotfSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::common::ParkingSlotfSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::ParkingSlotfSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotfSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::common::ParkingSlotfSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::common::ParkingSlotfSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::ParkingSlotfSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::ParkingSlotfSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotd &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::common::ParkingSlotd*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::ParkingSlotd *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotd *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::common::ParkingSlotd &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::common::ParkingSlotd*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::ParkingSlotd *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::ParkingSlotd *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotdSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::common::ParkingSlotdSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::ParkingSlotdSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotdSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::common::ParkingSlotdSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::common::ParkingSlotdSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::ParkingSlotdSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::ParkingSlotdSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotFramef &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::common::ParkingSlotFramef*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::ParkingSlotFramef *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotFramef *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::common::ParkingSlotFramef &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::common::ParkingSlotFramef*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::ParkingSlotFramef *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::ParkingSlotFramef *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace common
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotFramed &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::common::ParkingSlotFramed*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::common::ParkingSlotFramed *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::common::ParkingSlotFramed *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::common::ParkingSlotFramed &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::common::ParkingSlotFramed*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::common::ParkingSlotFramed *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::common::ParkingSlotFramed *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::common::ParkingSlotf &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::common::ParkingSlotf &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_common_ParkingSlotfSequence_H_
#define _TAO_CDR_OP_holo_base_msg_common_ParkingSlotfSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::common::ParkingSlotfSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::common::ParkingSlotfSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_common_ParkingSlotfSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::common::ParkingSlotd &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::common::ParkingSlotd &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_common_ParkingSlotdSequence_H_
#define _TAO_CDR_OP_holo_base_msg_common_ParkingSlotdSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::common::ParkingSlotdSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::common::ParkingSlotdSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_common_ParkingSlotdSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::common::ParkingSlotFramef &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::common::ParkingSlotFramef &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::common::ParkingSlotFramed &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::common::ParkingSlotFramed &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "ParkingSlotC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

