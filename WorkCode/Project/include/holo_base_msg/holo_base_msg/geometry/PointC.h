// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p19
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL__HOME_HOLO_WORKSPACE_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_BASE_MSG_INCLUDE_HOLO_BASE_MSG_GEOMETRY_POINTC_TRXOPY_H_
#define _TAO_IDL__HOME_HOLO_WORKSPACE_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_BASE_MSG_INCLUDE_HOLO_BASE_MSG_GEOMETRY_POINTC_TRXOPY_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "holo_base_msg/core/TypesC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace holo_base_msg
{

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:38

  namespace geometry
  {

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct Point3f;

    typedef
      ::TAO_Fixed_Var_T<
          Point3f
        >
      Point3f_var;

    typedef
      Point3f &
      Point3f_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  Point3f
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Point3f_var _var_type;
      typedef Point3f_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::core::float32_t x;
      holo_base_msg::core::float32_t y;
      holo_base_msg::core::float32_t z;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Point3f;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_GEOMETRY_POINT3FSEQUENCE_CH_)
#define _HOLO_BASE_MSG_GEOMETRY_POINT3FSEQUENCE_CH_

    class Point3fSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Point3fSequence
        >
      Point3fSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Point3fSequence
        >
      Point3fSequence_out;

    class  Point3fSequence
      : public
          ::TAO::unbounded_value_sequence<
              Point3f
            >
    {
    public:
      Point3fSequence (void);
      Point3fSequence ( ::CORBA::ULong max);
      Point3fSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Point3f* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Point3fSequence (const Point3fSequence &) = default;
      Point3fSequence (Point3fSequence &&) = default;
      Point3fSequence& operator= (const Point3fSequence &) = default;
      Point3fSequence& operator= (Point3fSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Point3fSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Point3fSequence_var _var_type;
      typedef Point3fSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Point3fSequence;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct Point3d;

    typedef
      ::TAO_Fixed_Var_T<
          Point3d
        >
      Point3d_var;

    typedef
      Point3d &
      Point3d_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  Point3d
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Point3d_var _var_type;
      typedef Point3d_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::core::float64_t x;
      holo_base_msg::core::float64_t y;
      holo_base_msg::core::float64_t z;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Point3d;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_GEOMETRY_POINT3DSEQUENCE_CH_)
#define _HOLO_BASE_MSG_GEOMETRY_POINT3DSEQUENCE_CH_

    class Point3dSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Point3dSequence
        >
      Point3dSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Point3dSequence
        >
      Point3dSequence_out;

    class  Point3dSequence
      : public
          ::TAO::unbounded_value_sequence<
              Point3d
            >
    {
    public:
      Point3dSequence (void);
      Point3dSequence ( ::CORBA::ULong max);
      Point3dSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Point3d* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Point3dSequence (const Point3dSequence &) = default;
      Point3dSequence (Point3dSequence &&) = default;
      Point3dSequence& operator= (const Point3dSequence &) = default;
      Point3dSequence& operator= (Point3dSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Point3dSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Point3dSequence_var _var_type;
      typedef Point3dSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Point3dSequence;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct Point2f;

    typedef
      ::TAO_Fixed_Var_T<
          Point2f
        >
      Point2f_var;

    typedef
      Point2f &
      Point2f_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  Point2f
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Point2f_var _var_type;
      typedef Point2f_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::core::float32_t x;
      holo_base_msg::core::float32_t y;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Point2f;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_GEOMETRY_POINT2FSEQUENCE_CH_)
#define _HOLO_BASE_MSG_GEOMETRY_POINT2FSEQUENCE_CH_

    class Point2fSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Point2fSequence
        >
      Point2fSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Point2fSequence
        >
      Point2fSequence_out;

    class  Point2fSequence
      : public
          ::TAO::unbounded_value_sequence<
              Point2f
            >
    {
    public:
      Point2fSequence (void);
      Point2fSequence ( ::CORBA::ULong max);
      Point2fSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Point2f* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Point2fSequence (const Point2fSequence &) = default;
      Point2fSequence (Point2fSequence &&) = default;
      Point2fSequence& operator= (const Point2fSequence &) = default;
      Point2fSequence& operator= (Point2fSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Point2fSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Point2fSequence_var _var_type;
      typedef Point2fSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Point2fSequence;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct Point2d;

    typedef
      ::TAO_Fixed_Var_T<
          Point2d
        >
      Point2d_var;

    typedef
      Point2d &
      Point2d_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  Point2d
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Point2d_var _var_type;
      typedef Point2d_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::core::float64_t x;
      holo_base_msg::core::float64_t y;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Point2d;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_GEOMETRY_POINT2DSEQUENCE_CH_)
#define _HOLO_BASE_MSG_GEOMETRY_POINT2DSEQUENCE_CH_

    class Point2dSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          Point2dSequence
        >
      Point2dSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          Point2dSequence
        >
      Point2dSequence_out;

    class  Point2dSequence
      : public
          ::TAO::unbounded_value_sequence<
              Point2d
            >
    {
    public:
      Point2dSequence (void);
      Point2dSequence ( ::CORBA::ULong max);
      Point2dSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        Point2d* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      Point2dSequence (const Point2dSequence &) = default;
      Point2dSequence (Point2dSequence &&) = default;
      Point2dSequence& operator= (const Point2dSequence &) = default;
      Point2dSequence& operator= (Point2dSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~Point2dSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef Point2dSequence_var _var_type;
      typedef Point2dSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_Point2dSequence;
  
  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:67
  
  } // module holo_base_msg::geometry

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module holo_base_msg

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::geometry::Point3f>
    : public
        Fixed_Size_Arg_Traits_T<
            ::holo_base_msg::geometry::Point3f,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::geometry::Point3fSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::geometry::Point3fSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::geometry::Point3d>
    : public
        Fixed_Size_Arg_Traits_T<
            ::holo_base_msg::geometry::Point3d,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::geometry::Point3dSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::geometry::Point3dSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::geometry::Point2f>
    : public
        Fixed_Size_Arg_Traits_T<
            ::holo_base_msg::geometry::Point2f,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::geometry::Point2fSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::geometry::Point2fSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::geometry::Point2d>
    : public
        Fixed_Size_Arg_Traits_T<
            ::holo_base_msg::geometry::Point2d,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::geometry::Point2dSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::geometry::Point2dSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace geometry
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::geometry::Point3f &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::geometry::Point3f*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::geometry::Point3f *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::geometry::Point3f *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::geometry::Point3f &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::geometry::Point3f*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::geometry::Point3f *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::geometry::Point3f *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace geometry
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::geometry::Point3fSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::geometry::Point3fSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::geometry::Point3fSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::geometry::Point3fSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::geometry::Point3fSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::geometry::Point3fSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::geometry::Point3fSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::geometry::Point3fSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace geometry
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::geometry::Point3d &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::geometry::Point3d*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::geometry::Point3d *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::geometry::Point3d *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::geometry::Point3d &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::geometry::Point3d*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::geometry::Point3d *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::geometry::Point3d *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace geometry
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::geometry::Point3dSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::geometry::Point3dSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::geometry::Point3dSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::geometry::Point3dSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::geometry::Point3dSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::geometry::Point3dSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::geometry::Point3dSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::geometry::Point3dSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace geometry
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::geometry::Point2f &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::geometry::Point2f*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::geometry::Point2f *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::geometry::Point2f *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::geometry::Point2f &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::geometry::Point2f*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::geometry::Point2f *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::geometry::Point2f *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace geometry
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::geometry::Point2fSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::geometry::Point2fSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::geometry::Point2fSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::geometry::Point2fSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::geometry::Point2fSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::geometry::Point2fSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::geometry::Point2fSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::geometry::Point2fSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace geometry
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::geometry::Point2d &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::geometry::Point2d*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::geometry::Point2d *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::geometry::Point2d *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::geometry::Point2d &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::geometry::Point2d*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::geometry::Point2d *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::geometry::Point2d *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace geometry
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::geometry::Point2dSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::geometry::Point2dSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::geometry::Point2dSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::geometry::Point2dSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::geometry::Point2dSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::geometry::Point2dSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::geometry::Point2dSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::geometry::Point2dSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::geometry::Point3f &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::geometry::Point3f &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_geometry_Point3fSequence_H_
#define _TAO_CDR_OP_holo_base_msg_geometry_Point3fSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::geometry::Point3fSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::geometry::Point3fSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_geometry_Point3fSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::geometry::Point3d &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::geometry::Point3d &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_geometry_Point3dSequence_H_
#define _TAO_CDR_OP_holo_base_msg_geometry_Point3dSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::geometry::Point3dSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::geometry::Point3dSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_geometry_Point3dSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::geometry::Point2f &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::geometry::Point2f &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_geometry_Point2fSequence_H_
#define _TAO_CDR_OP_holo_base_msg_geometry_Point2fSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::geometry::Point2fSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::geometry::Point2fSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_geometry_Point2fSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::geometry::Point2d &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::geometry::Point2d &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_geometry_Point2dSequence_H_
#define _TAO_CDR_OP_holo_base_msg_geometry_Point2dSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::geometry::Point2dSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::geometry::Point2dSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_geometry_Point2dSequence_H_ */

// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "PointC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

