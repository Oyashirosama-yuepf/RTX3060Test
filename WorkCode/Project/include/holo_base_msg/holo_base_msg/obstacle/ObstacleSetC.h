// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p19
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL__HOME_HOLO_WORKSPACE_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_BASE_MSG_INCLUDE_HOLO_BASE_MSG_OBSTACLE_OBSTACLESETC_0QH5M2_H_
#define _TAO_IDL__HOME_HOLO_WORKSPACE_BUILD_TDA4_UBUNTU_18_04_DEBUG_HOLO_BASE_MSG_INCLUDE_HOLO_BASE_MSG_OBSTACLE_OBSTACLESETC_0QH5M2_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/Basic_Types.h"
#include "tao/Sequence_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#include "holo_base_msg/core/TypesC.h"
#include "holo_base_msg/common/CommonC.h"
#include "holo_base_msg/geometry/BoxC.h"
#include "holo_base_msg/geometry/PointC.h"
#include "holo_base_msg/numerics/VectorC.h"
#include "holo_base_msg/vision/ImageObjectsC.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 0
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace holo_base_msg
{

  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:38

  namespace obstacle
  {

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef holo_base_msg::core::uint8_t CutInCutOut;
    typedef holo_base_msg::core::uint8_t_out CutInCutOut_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_CutInCutOut;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef holo_base_msg::core::uint8_t MotionStatus;
    typedef holo_base_msg::core::uint8_t_out MotionStatus_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_MotionStatus;

    // TAO_IDL - Generated from
    // be/be_visitor_typedef/typedef_ch.cpp:373

    typedef holo_base_msg::core::uint32_t PerceptionAbility;
    typedef holo_base_msg::core::uint32_t_out PerceptionAbility_out;

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_PerceptionAbility;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ObstacleGeneral;

    typedef
      ::TAO_Var_Var_T<
          ObstacleGeneral
        >
      ObstacleGeneral_var;

    typedef
      ::TAO_Out_T<
          ObstacleGeneral
        >
      ObstacleGeneral_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ObstacleGeneral
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleGeneral_var _var_type;
      typedef ObstacleGeneral_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::core::uint32_t obstacle_id;
      holo_base_msg::common::SensorId sensor_id;
      holo_base_msg::common::Classification classification;
      holo_base_msg::core::float32_t obstacle_exist_score;
      holo_base_msg::geometry::Point3f position;
      holo_base_msg::numerics::Vector3f relative_velocity;
      holo_base_msg::numerics::Vector3f absolute_velocity;
      holo_base_msg::numerics::Vector3f acceleration;
      holo_base_msg::obstacle::MotionStatus motion_status;
      holo_base_msg::geometry::Box3f bounding_box3;
      holo_base_msg::obstacle::CutInCutOut cut_in_cut_out;
      holo_base_msg::geometry::Point3fSequence contour_points;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleGeneral;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_OBSTACLE_OBSTACLEGENERALSEQUENCE_CH_)
#define _HOLO_BASE_MSG_OBSTACLE_OBSTACLEGENERALSEQUENCE_CH_

    class ObstacleGeneralSequence;

    typedef
      ::TAO_VarSeq_Var_T<
          ObstacleGeneralSequence
        >
      ObstacleGeneralSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          ObstacleGeneralSequence
        >
      ObstacleGeneralSequence_out;

    class  ObstacleGeneralSequence
      : public
          ::TAO::unbounded_value_sequence<
              ObstacleGeneral
            >
    {
    public:
      ObstacleGeneralSequence (void);
      ObstacleGeneralSequence ( ::CORBA::ULong max);
      ObstacleGeneralSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ObstacleGeneral* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      ObstacleGeneralSequence (const ObstacleGeneralSequence &) = default;
      ObstacleGeneralSequence (ObstacleGeneralSequence &&) = default;
      ObstacleGeneralSequence& operator= (const ObstacleGeneralSequence &) = default;
      ObstacleGeneralSequence& operator= (ObstacleGeneralSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~ObstacleGeneralSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleGeneralSequence_var _var_type;
      typedef ObstacleGeneralSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleGeneralSequence;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ObstacleGeneralList;

    typedef
      ::TAO_Var_Var_T<
          ObstacleGeneralList
        >
      ObstacleGeneralList_var;

    typedef
      ::TAO_Out_T<
          ObstacleGeneralList
        >
      ObstacleGeneralList_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ObstacleGeneralList
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleGeneralList_var _var_type;
      typedef ObstacleGeneralList_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::common::SensorId sensor_id;
      holo_base_msg::obstacle::PerceptionAbility perception_ability;
      holo_base_msg::obstacle::ObstacleGeneralSequence obstacles;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleGeneralList;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ObstacleRadar;

    typedef
      ::TAO_Fixed_Var_T<
          ObstacleRadar
        >
      ObstacleRadar_var;

    typedef
      ObstacleRadar &
      ObstacleRadar_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ObstacleRadar
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleRadar_var _var_type;
      typedef ObstacleRadar_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::core::uint32_t obstacle_id;
      holo_base_msg::common::SensorId sensor_id;
      holo_base_msg::common::Classification classification;
      holo_base_msg::core::float32_t obstacle_exist_score;
      holo_base_msg::geometry::Point3f position;
      holo_base_msg::geometry::Point3f position_sigma;
      holo_base_msg::numerics::Vector3f relative_velocity;
      holo_base_msg::numerics::Vector3f relative_velocity_sigma;
      holo_base_msg::numerics::Vector3f acceleration;
      holo_base_msg::numerics::Vector3f acceleration_sigma;
      holo_base_msg::obstacle::MotionStatus motion_status;
      holo_base_msg::numerics::Vector3f shape;
      holo_base_msg::core::float32_t obstacle_rcs;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleRadar;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_OBSTACLE_OBSTACLERADARSEQUENCE_CH_)
#define _HOLO_BASE_MSG_OBSTACLE_OBSTACLERADARSEQUENCE_CH_

    class ObstacleRadarSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          ObstacleRadarSequence
        >
      ObstacleRadarSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          ObstacleRadarSequence
        >
      ObstacleRadarSequence_out;

    class  ObstacleRadarSequence
      : public
          ::TAO::unbounded_value_sequence<
              ObstacleRadar
            >
    {
    public:
      ObstacleRadarSequence (void);
      ObstacleRadarSequence ( ::CORBA::ULong max);
      ObstacleRadarSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ObstacleRadar* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      ObstacleRadarSequence (const ObstacleRadarSequence &) = default;
      ObstacleRadarSequence (ObstacleRadarSequence &&) = default;
      ObstacleRadarSequence& operator= (const ObstacleRadarSequence &) = default;
      ObstacleRadarSequence& operator= (ObstacleRadarSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~ObstacleRadarSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleRadarSequence_var _var_type;
      typedef ObstacleRadarSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleRadarSequence;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ObstacleRadarList;

    typedef
      ::TAO_Var_Var_T<
          ObstacleRadarList
        >
      ObstacleRadarList_var;

    typedef
      ::TAO_Out_T<
          ObstacleRadarList
        >
      ObstacleRadarList_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ObstacleRadarList
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleRadarList_var _var_type;
      typedef ObstacleRadarList_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::common::SensorId sensor_id;
      holo_base_msg::obstacle::PerceptionAbility perception_ability;
      holo_base_msg::obstacle::ObstacleRadarSequence obstacles;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleRadarList;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ObstacleUss;

    typedef
      ::TAO_Fixed_Var_T<
          ObstacleUss
        >
      ObstacleUss_var;

    typedef
      ObstacleUss &
      ObstacleUss_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ObstacleUss
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleUss_var _var_type;
      typedef ObstacleUss_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::core::uint32_t obstacle_id;
      holo_base_msg::common::SensorId sensor_id;
      holo_base_msg::common::Classification classification;
      holo_base_msg::core::float32_t obstacle_exist_score;
      holo_base_msg::geometry::Point3f position;
      holo_base_msg::geometry::Point3f position_sigma;
      holo_base_msg::core::float32_t fov;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleUss;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_OBSTACLE_OBSTACLEUSSSEQUENCE_CH_)
#define _HOLO_BASE_MSG_OBSTACLE_OBSTACLEUSSSEQUENCE_CH_

    class ObstacleUssSequence;

    typedef
      ::TAO_FixedSeq_Var_T<
          ObstacleUssSequence
        >
      ObstacleUssSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          ObstacleUssSequence
        >
      ObstacleUssSequence_out;

    class  ObstacleUssSequence
      : public
          ::TAO::unbounded_value_sequence<
              ObstacleUss
            >
    {
    public:
      ObstacleUssSequence (void);
      ObstacleUssSequence ( ::CORBA::ULong max);
      ObstacleUssSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ObstacleUss* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      ObstacleUssSequence (const ObstacleUssSequence &) = default;
      ObstacleUssSequence (ObstacleUssSequence &&) = default;
      ObstacleUssSequence& operator= (const ObstacleUssSequence &) = default;
      ObstacleUssSequence& operator= (ObstacleUssSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~ObstacleUssSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleUssSequence_var _var_type;
      typedef ObstacleUssSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleUssSequence;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ObstacleUssList;

    typedef
      ::TAO_Var_Var_T<
          ObstacleUssList
        >
      ObstacleUssList_var;

    typedef
      ::TAO_Out_T<
          ObstacleUssList
        >
      ObstacleUssList_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ObstacleUssList
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleUssList_var _var_type;
      typedef ObstacleUssList_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::common::SensorId sensor_id;
      holo_base_msg::obstacle::PerceptionAbility perception_ability;
      holo_base_msg::obstacle::ObstacleUssSequence obstacles;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleUssList;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ObstacleVision;

    typedef
      ::TAO_Var_Var_T<
          ObstacleVision
        >
      ObstacleVision_var;

    typedef
      ::TAO_Out_T<
          ObstacleVision
        >
      ObstacleVision_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ObstacleVision
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleVision_var _var_type;
      typedef ObstacleVision_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::core::uint32_t obstacle_id;
      holo_base_msg::common::SensorId sensor_id;
      holo_base_msg::common::Classification classification;
      holo_base_msg::core::float32_t obstacle_exist_score;
      holo_base_msg::geometry::Point3f position;
      holo_base_msg::geometry::Point3f position_sigma;
      holo_base_msg::numerics::Vector3f relative_velocity;
      holo_base_msg::numerics::Vector3f relative_velocity_sigma;
      holo_base_msg::numerics::Vector3f acceleration;
      holo_base_msg::numerics::Vector3f acceleration_sigma;
      holo_base_msg::obstacle::MotionStatus motion_status;
      holo_base_msg::geometry::Box2f bounding_box2;
      holo_base_msg::geometry::Box3f bounding_box3;
      holo_base_msg::obstacle::CutInCutOut cut_in_cut_out;
      holo_base_msg::vision::KeyPoint2fSequence key_points;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleVision;

    // TAO_IDL - Generated from
    // be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_HOLO_BASE_MSG_OBSTACLE_OBSTACLEVISIONSEQUENCE_CH_)
#define _HOLO_BASE_MSG_OBSTACLE_OBSTACLEVISIONSEQUENCE_CH_

    class ObstacleVisionSequence;

    typedef
      ::TAO_VarSeq_Var_T<
          ObstacleVisionSequence
        >
      ObstacleVisionSequence_var;

    typedef
      ::TAO_Seq_Out_T<
          ObstacleVisionSequence
        >
      ObstacleVisionSequence_out;

    class  ObstacleVisionSequence
      : public
          ::TAO::unbounded_value_sequence<
              ObstacleVision
            >
    {
    public:
      ObstacleVisionSequence (void);
      ObstacleVisionSequence ( ::CORBA::ULong max);
      ObstacleVisionSequence (
        ::CORBA::ULong max,
        ::CORBA::ULong length,
        ObstacleVision* buffer,
        ::CORBA::Boolean release = false);
#if defined (ACE_HAS_CPP11)
      ObstacleVisionSequence (const ObstacleVisionSequence &) = default;
      ObstacleVisionSequence (ObstacleVisionSequence &&) = default;
      ObstacleVisionSequence& operator= (const ObstacleVisionSequence &) = default;
      ObstacleVisionSequence& operator= (ObstacleVisionSequence &&) = default;
#endif /* ACE_HAS_CPP11 */
      virtual ~ObstacleVisionSequence (void);
      

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleVisionSequence_var _var_type;
      typedef ObstacleVisionSequence_out _out_type;

      static void _tao_any_destructor (void *);
    };

#endif /* end #if !defined */

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleVisionSequence;

    // TAO_IDL - Generated from
    // be/be_type.cpp:261

    struct ObstacleVisionList;

    typedef
      ::TAO_Var_Var_T<
          ObstacleVisionList
        >
      ObstacleVisionList_var;

    typedef
      ::TAO_Out_T<
          ObstacleVisionList
        >
      ObstacleVisionList_out;

    // TAO_IDL - Generated from
    // be/be_visitor_structure/structure_ch.cpp:51

    struct  ObstacleVisionList
    {

      // TAO_IDL - Generated from
      // be/be_type.cpp:307

      
      typedef ObstacleVisionList_var _var_type;
      typedef ObstacleVisionList_out _out_type;

      static void _tao_any_destructor (void *);
      
      holo_base_msg::common::Timestamp stamp;
      holo_base_msg::common::Coordinate coord;
      holo_base_msg::common::SensorId sensor_id;
      holo_base_msg::obstacle::PerceptionAbility perception_ability;
      holo_base_msg::obstacle::ObstacleVisionSequence obstacles;
    };

    // TAO_IDL - Generated from
    // be/be_visitor_typecode/typecode_decl.cpp:37

    extern  ::CORBA::TypeCode_ptr const _tc_ObstacleVisionList;
  
  // TAO_IDL - Generated from
  // be/be_visitor_module/module_ch.cpp:67
  
  } // module holo_base_msg::obstacle

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module holo_base_msg

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleGeneral>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleGeneral,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleGeneralSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleGeneralSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleGeneralList>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleGeneralList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleRadar>
    : public
        Fixed_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleRadar,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleRadarSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleRadarSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleRadarList>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleRadarList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleUss>
    : public
        Fixed_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleUss,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleUssSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleUssSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleUssList>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleUssList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleVision>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleVision,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleVisionSequence>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleVisionSequence,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::holo_base_msg::obstacle::ObstacleVisionList>
    : public
        Var_Size_Arg_Traits_T<
            ::holo_base_msg::obstacle::ObstacleVisionList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleGeneral &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleGeneral*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleGeneral *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleGeneral *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::obstacle::ObstacleGeneral &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::obstacle::ObstacleGeneral*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleGeneral *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleGeneral *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleGeneralSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleGeneralSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleGeneralSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleGeneralSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleGeneralSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::obstacle::ObstacleGeneralSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleGeneralSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleGeneralSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleGeneralList &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleGeneralList*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleGeneralList *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleGeneralList *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::obstacle::ObstacleGeneralList &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::obstacle::ObstacleGeneralList*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleGeneralList *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleGeneralList *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleRadar &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleRadar*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleRadar *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleRadar *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::obstacle::ObstacleRadar &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::obstacle::ObstacleRadar*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleRadar *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleRadar *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleRadarSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleRadarSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleRadarSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleRadarSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleRadarSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::obstacle::ObstacleRadarSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleRadarSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleRadarSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleRadarList &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleRadarList*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleRadarList *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleRadarList *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::obstacle::ObstacleRadarList &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::obstacle::ObstacleRadarList*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleRadarList *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleRadarList *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleUss &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleUss*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleUss *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleUss *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::obstacle::ObstacleUss &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::obstacle::ObstacleUss*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleUss *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleUss *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleUssSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleUssSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleUssSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleUssSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleUssSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::obstacle::ObstacleUssSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleUssSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleUssSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleUssList &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleUssList*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleUssList *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleUssList *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::obstacle::ObstacleUssList &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::obstacle::ObstacleUssList*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleUssList *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleUssList *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleVision &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleVision*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleVision *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleVision *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::obstacle::ObstacleVision &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::obstacle::ObstacleVision*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleVision *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleVision *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= ( ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleVisionSequence &); // copying version
     void operator<<= ( ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleVisionSequence*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleVisionSequence *&); // deprecated
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleVisionSequence *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleVisionSequence &); // copying version
 void operator<<= ( ::CORBA::Any &, holo_base_msg::obstacle::ObstacleVisionSequence*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleVisionSequence *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleVisionSequence *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace holo_base_msg
{
  
  namespace obstacle
  {
     void operator<<= (::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleVisionList &); // copying version
     void operator<<= (::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleVisionList*); // noncopying version
     ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::holo_base_msg::obstacle::ObstacleVisionList *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::holo_base_msg::obstacle::ObstacleVisionList *&);
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const holo_base_msg::obstacle::ObstacleVisionList &); // copying version
 void operator<<= (::CORBA::Any &, holo_base_msg::obstacle::ObstacleVisionList*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, holo_base_msg::obstacle::ObstacleVisionList *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const holo_base_msg::obstacle::ObstacleVisionList *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::obstacle::ObstacleGeneral &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::obstacle::ObstacleGeneral &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleGeneralSequence_H_
#define _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleGeneralSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::obstacle::ObstacleGeneralSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::obstacle::ObstacleGeneralSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleGeneralSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::obstacle::ObstacleGeneralList &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::obstacle::ObstacleGeneralList &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::obstacle::ObstacleRadar &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::obstacle::ObstacleRadar &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleRadarSequence_H_
#define _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleRadarSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::obstacle::ObstacleRadarSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::obstacle::ObstacleRadarSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleRadarSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::obstacle::ObstacleRadarList &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::obstacle::ObstacleRadarList &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::obstacle::ObstacleUss &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::obstacle::ObstacleUss &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleUssSequence_H_
#define _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleUssSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::obstacle::ObstacleUssSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::obstacle::ObstacleUssSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleUssSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::obstacle::ObstacleUssList &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::obstacle::ObstacleUssList &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::obstacle::ObstacleVision &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::obstacle::ObstacleVision &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleVisionSequence_H_
#define _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleVisionSequence_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const holo_base_msg::obstacle::ObstacleVisionSequence &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    holo_base_msg::obstacle::ObstacleVisionSequence &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_holo_base_msg_obstacle_ObstacleVisionSequence_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const holo_base_msg::obstacle::ObstacleVisionList &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, holo_base_msg::obstacle::ObstacleVisionList &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "ObstacleSetC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

