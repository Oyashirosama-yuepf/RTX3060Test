/* -*- C++ -*- */
/* Generated by /home/holo/workspace/output/tda4_ubuntu-18.04/debug/host/bin/opendds_idl version 3.16 (ACE version 6.2a_p19) running on input file /home/holo/workspace/src/holo_base_msg/opendds_msg/message/holo_base_msg/numerics/Matrix.idl */
#ifndef OPENDDS_IDL_GENERATED_MATRIXTYPESUPPORTIMPL_H_1G5CY9
#define OPENDDS_IDL_GENERATED_MATRIXTYPESUPPORTIMPL_H_1G5CY9
#include "MatrixC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "dds/Version.h"
#if DDS_MAJOR_VERSION != 3 || DDS_MINOR_VERSION != 16 || DDS_MICRO_VERSION != 0
#error This file should be regenerated with opendds_idl
#endif
#include "MatrixTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/TypeObject.h"
#include "holo_base_msg/core/TypesC.h"
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL



/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: holo_base_msg */



/* Begin MODULE: core */



/* Begin TYPEDEF: bool_t */


/* End TYPEDEF: bool_t */


/* Begin TYPEDEF: char_t */


/* End TYPEDEF: char_t */


/* Begin TYPEDEF: _cxx_wchar_t */


/* End TYPEDEF: _cxx_wchar_t */


/* Begin TYPEDEF: int8_t */


/* End TYPEDEF: int8_t */


/* Begin TYPEDEF: uint8_t */


/* End TYPEDEF: uint8_t */


/* Begin TYPEDEF: int16_t */


/* End TYPEDEF: int16_t */


/* Begin TYPEDEF: uint16_t */


/* End TYPEDEF: uint16_t */


/* Begin TYPEDEF: int32_t */


/* End TYPEDEF: int32_t */


/* Begin TYPEDEF: uint32_t */


/* End TYPEDEF: uint32_t */


/* Begin TYPEDEF: int64_t */


/* End TYPEDEF: int64_t */


/* Begin TYPEDEF: uint64_t */


/* End TYPEDEF: uint64_t */


/* Begin TYPEDEF: float32_t */


/* End TYPEDEF: float32_t */


/* Begin TYPEDEF: float64_t */


/* End TYPEDEF: float64_t */


/* Begin TYPEDEF: BoolSequence */


/* End TYPEDEF: BoolSequence */


/* Begin TYPEDEF: CharSequence */


/* End TYPEDEF: CharSequence */


/* Begin TYPEDEF: WcharSequence */


/* End TYPEDEF: WcharSequence */


/* Begin TYPEDEF: Int8Sequence */


/* End TYPEDEF: Int8Sequence */


/* Begin TYPEDEF: Uint8Sequence */


/* End TYPEDEF: Uint8Sequence */


/* Begin TYPEDEF: Int16Sequence */


/* End TYPEDEF: Int16Sequence */


/* Begin TYPEDEF: Uint16Sequence */


/* End TYPEDEF: Uint16Sequence */


/* Begin TYPEDEF: Int32Sequence */


/* End TYPEDEF: Int32Sequence */


/* Begin TYPEDEF: Uint32Sequence */


/* End TYPEDEF: Uint32Sequence */


/* Begin TYPEDEF: Int64Sequence */


/* End TYPEDEF: Int64Sequence */


/* Begin TYPEDEF: Uint64Sequence */


/* End TYPEDEF: Uint64Sequence */


/* Begin TYPEDEF: Float32Sequence */


/* End TYPEDEF: Float32Sequence */


/* Begin TYPEDEF: Float64Sequence */


/* End TYPEDEF: Float64Sequence */

/* End MODULE: core */

/* End MODULE: holo_base_msg */


/* Begin MODULE: holo_base_msg */



/* Begin MODULE: numerics */



/* Begin TYPEDEF: MatrixdData */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::MatrixdData& seq);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::MatrixdData& seq);

bool operator>>(Serializer& strm, holo_base_msg::numerics::MatrixdData& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::MatrixdData*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_MatrixdData_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_MatrixdData_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_MatrixdData_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: MatrixdData */


/* Begin STRUCT: Matrixd */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrixd& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrixd& stru);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrixd& stru);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrixd& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::numerics::Matrixd>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::numerics::Matrixd>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::numerics::Matrixd>& stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::numerics::Matrixd& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<holo_base_msg::numerics::Matrixd>();
bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrixd*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrixd_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrixd_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrixd_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Matrixd */


/* Begin TYPEDEF: Matrix22d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrix22d_forany& arr);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrix22d_forany& arr);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrix22d_forany& arr);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrix22d_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrix22d_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrix22d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrix22d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrix22d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Matrix22d */


/* Begin TYPEDEF: Matrix33d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrix33d_forany& arr);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrix33d_forany& arr);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrix33d_forany& arr);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrix33d_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrix33d_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrix33d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrix33d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrix33d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Matrix33d */


/* Begin TYPEDEF: Matrix44d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrix44d_forany& arr);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrix44d_forany& arr);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrix44d_forany& arr);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrix44d_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrix44d_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrix44d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrix44d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrix44d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Matrix44d */


/* Begin TYPEDEF: Matrix55d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrix55d_forany& arr);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrix55d_forany& arr);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrix55d_forany& arr);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrix55d_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrix55d_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrix55d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrix55d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrix55d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Matrix55d */


/* Begin TYPEDEF: Matrix66d */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrix66d_forany& arr);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrix66d_forany& arr);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrix66d_forany& arr);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrix66d_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrix66d_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrix66d_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrix66d_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrix66d_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Matrix66d */


/* Begin TYPEDEF: MatrixfData */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::MatrixfData& seq);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::MatrixfData& seq);

bool operator>>(Serializer& strm, holo_base_msg::numerics::MatrixfData& seq);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::MatrixfData*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_MatrixfData_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_MatrixfData_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_MatrixfData_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: MatrixfData */


/* Begin STRUCT: Matrixf */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrixf& stru);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrixf& stru);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrixf& stru);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrixf& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const holo_base_msg::numerics::Matrixf>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const holo_base_msg::numerics::Matrixf>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly<holo_base_msg::numerics::Matrixf>& stru);

template <>
struct MarshalTraits<holo_base_msg::numerics::Matrixf> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(3);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const holo_base_msg::numerics::Matrixf&) { return false; }
  static bool from_message_block(holo_base_msg::numerics::Matrixf&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return APPENDABLE; }
  static Extensibility max_extensibility_level() { return APPENDABLE; }
};
void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const holo_base_msg::numerics::Matrixf> stru);

bool operator<<(Serializer& strm, KeyOnly<const holo_base_msg::numerics::Matrixf> stru);

bool operator>>(Serializer& strm, KeyOnly<holo_base_msg::numerics::Matrixf> stru);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace numerics {
/// This structure supports use of std::map with one or more keys.
struct  Matrixf_OpenDDS_KeyLessThan {
  bool operator()(const holo_base_msg::numerics::Matrixf&, const holo_base_msg::numerics::Matrixf&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const holo_base_msg::numerics::Matrixf& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace numerics {
class MatrixfTypeSupportImpl;
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits<holo_base_msg::numerics::Matrixf> {
  typedef holo_base_msg::numerics::Matrixf MessageType;
  typedef holo_base_msg::numerics::MatrixfSeq MessageSequenceType;
  typedef holo_base_msg::numerics::MatrixfTypeSupport TypeSupportType;
  typedef holo_base_msg::numerics::MatrixfTypeSupportImpl TypeSupportTypeImpl;
  typedef holo_base_msg::numerics::MatrixfDataWriter DataWriterType;
  typedef holo_base_msg::numerics::MatrixfDataReader DataReaderType;
  typedef holo_base_msg::numerics::Matrixf_OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const holo_base_msg::numerics::Matrixf> KeyOnlyType;

  static const char* type_name() { return "holo_base_msg::numerics::Matrixf"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace holo_base_msg {
namespace numerics {
class  MatrixfTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<MatrixfTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<Matrixf> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<Matrixf> MarshalTraitsType;
  typedef MatrixfTypeSupport TypeSupportType;
  typedef MatrixfTypeSupport::_var_type _var_type;
  typedef MatrixfTypeSupport::_ptr_type _ptr_type;

  MatrixfTypeSupportImpl() {}
  virtual ~MatrixfTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static MatrixfTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
const MetaStruct& getMetaStruct<holo_base_msg::numerics::Matrixf>();
bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrixf*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrixf_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrixf_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrixf_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End STRUCT: Matrixf */


/* Begin TYPEDEF: Matrix22f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrix22f_forany& arr);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrix22f_forany& arr);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrix22f_forany& arr);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrix22f_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrix22f_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrix22f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrix22f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrix22f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Matrix22f */


/* Begin TYPEDEF: Matrix33f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrix33f_forany& arr);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrix33f_forany& arr);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrix33f_forany& arr);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrix33f_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrix33f_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrix33f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrix33f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrix33f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Matrix33f */


/* Begin TYPEDEF: Matrix44f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrix44f_forany& arr);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrix44f_forany& arr);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrix44f_forany& arr);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrix44f_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrix44f_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrix44f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrix44f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrix44f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Matrix44f */


/* Begin TYPEDEF: Matrix55f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrix55f_forany& arr);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrix55f_forany& arr);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrix55f_forany& arr);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrix55f_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrix55f_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrix55f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrix55f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrix55f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Matrix55f */


/* Begin TYPEDEF: Matrix66f */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void set_default(holo_base_msg::numerics::Matrix66f_forany& arr);

void serialized_size(const Encoding& encoding, size_t& size, const holo_base_msg::numerics::Matrix66f_forany& arr);

bool operator<<(Serializer& strm, const holo_base_msg::numerics::Matrix66f_forany& arr);

bool operator>>(Serializer& strm, holo_base_msg::numerics::Matrix66f_forany& arr);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool gen_skip_over(Serializer& ser, holo_base_msg::numerics::Matrix66f_forany*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct holo_base_msg_numerics_Matrix66f_xtag {};
template<> const XTypes::TypeIdentifier & getMinimalTypeIdentifier<holo_base_msg_numerics_Matrix66f_xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<holo_base_msg_numerics_Matrix66f_xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End TYPEDEF: Matrix66f */

/* End MODULE: numerics */

/* End MODULE: holo_base_msg */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_MATRIXTYPESUPPORTIMPL_H_1G5CY9 */
