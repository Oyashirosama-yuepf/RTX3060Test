/*
 * Copyright (C) HoloMatic Technology(Beijing) Co., Ltd. - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 */

/**
 * @file plucker_line.h
 * @brief This file defines header of plucker line.
 * @author MaYufei(mayufei@holomatic.com)
 * @date "2021-12-03"
 * @ref  "Structure-from-motion using lines: Representation, triangulation,and bundle adjustment"
 *       "Multiple View Geometry in Computer Vision"
 */
#ifndef HOLO_LOCALIZATION_SAM_VISION_LINE_PLUCKER_LINE_H_
#define HOLO_LOCALIZATION_SAM_VISION_LINE_PLUCKER_LINE_H_

#include <gtsam/base/Matrix.h>
#include <gtsam/base/Vector.h>
#include <gtsam/geometry/Pose3.h>

namespace holo
{
namespace localization
{
/**
 * @addtogroup sam
 * @{
 *
 */

class PluckerLine
{
public:
    using GTVector2  = gtsam::Vector2;
    using GTVector3  = gtsam::Vector3;
    using GTVector4  = gtsam::Vector4;
    using GTVector6  = gtsam::Vector6;
    using GTMatrix3  = gtsam::Matrix3;
    using GTMatrix36 = gtsam::Matrix36;
    using GTMatrix4  = gtsam::Matrix4;
    using GTMatrix6  = gtsam::Matrix6;
    using GTRot3     = gtsam::Rot3;
    using GTPose3    = gtsam::Pose3;

    /**
     * @brief Construct a new Plucker Line object
     *
     * @param[in] plucker_line plucker line in 6 dimentional vector form
     * @details this 6 dimentional vector consist of normal vector(first 3 dimentional) and direction vector(last 3
     * dimentional)
     */
    PluckerLine(GTVector6 const& plucker_line);

    /**
     * @brief Construct a new Plucker Line object
     *
     * @param[in] n normal vector of plucker line
     * @param[in] d direction vector of plucker line
     */
    PluckerLine(GTVector3 const& n, GTVector3 const& d);

    /**
     * @brief Construct a new Plucker Line object
     *
     * @param[in] dual_plucker_matrix dual plucker matrix of the space line which is defined by two space planes
     * @details the dual_plucker_matrix can be represented as
     * L* = [ [d]^ n ], the d[direction vector] and n[normal vector] can be extract from this matrix
     *      [ -n'  0 ]
     */
    PluckerLine(GTMatrix4 const& dual_plucker_matrix);

    /**
     * @brief Construct a new Plucker Line object
     *
     * @param[in] plane1 left plane include the target plucker line, with plane equation plane1[0] * x + plane1[1] * y
     * + plane1[2] * z + plane1[3] = 0
     * @param[in] plane2 right plane include the target plucker line, with plane equation plane2[0] * x + plane2[1] *
     * y + plane2[2] * z + plane2[3] = 0
     * @details the dual plucker matrix of the plucker line can be calculated by L= plane1*plane2'-plane2*plane1'
     */
    PluckerLine(GTVector4 const& plane1, GTVector4 const& plane2);

    /**
     * @brief Destroy the Plucker Line object
     *
     */
    ~PluckerLine() noexcept;

    /**
     * @brief Get the Direction Vector object
     *
     * @param[in] Dplucker Jacobian of direction vector to plucker line, d(output) / d(*this)
     * @return GTVector3 direction vector
     */
    GTVector3 getDirectionVector(gtsam::OptionalJacobian<3u, 6u> Dplucker = boost::none) const;

    /**
     * @brief Get the Normal Vector object
     *
     * @param[in] Dplucker Jacobian of normal vector to plucker line, d(output) / d(*this)
     * @return GTVector3 normal vector
     */
    GTVector3 getNormalVector(gtsam::OptionalJacobian<3u, 6u> Dplucker = boost::none) const;

    /**
     * @brief transform from this plucker line to output plucker line
     *
     * @param[in] tTs pose from source coordinate to target coordinate, output = tTs * (*this)
     * @param[in] Dpose Jacobian of output plucker line to pose, d(output) / d(tTs)
     * @param[in] Dplucker Jacobian of output plucker line to this plucker line, d(output) / d(*this)
     * @note the analytical derivated jacobian Dpose is not correct, it is temporarily generated by
     * transformTo interface.
     * @return PluckerLine
     */
    PluckerLine transformFrom(GTPose3 const& tTs, gtsam::OptionalJacobian<6u, 6u> Dpose = boost::none,
                              gtsam::OptionalJacobian<6u, 6u> Dplucker = boost::none) const;

    /**
     * @brief transform from output plucker line to this plucker line
     *
     * @param[in] tTs pose from source coordinate to target coordinate, output = tTs.inverse() * (*this)
     * @param[in] Dpose Jacobian of output plucker line to pose, d(output) / d(tTs)
     * @param[in] Dplucker Jacobian of output plucker line to this plucker line, d(output) / d(*this)
     * @return PluckerLine
     */
    PluckerLine transformTo(GTPose3 const& tTs, gtsam::OptionalJacobian<6u, 6u> Dpose,
                            gtsam::OptionalJacobian<6u, 6u> Dplucker) const;

private:
    GTVector6 plucker_line_;  ///< plucker line represented by 6 dimensional vector, which consist of normal
                              ///< vector(first 3 dimentional) and direction vector(last 3 dimentional)
};                            // class PluckerLine

using GTPluckerLine = PluckerLine;

/**
 * @}
 *
 */
}  // namespace localization
}  // namespace holo

#endif  // HOLO_LOCALIZATION_SAM_VISION_LINE_PLUCKER_LINE_H_
