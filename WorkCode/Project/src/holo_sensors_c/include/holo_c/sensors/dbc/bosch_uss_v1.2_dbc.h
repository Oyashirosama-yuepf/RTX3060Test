/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2022年 04月 24日 星期日 17:21:08 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_bosch_uss_v1.2
 */

/**
 * @defgroup DB_bosch_uss_v1.2 CAN Database bosch_uss_v1.2
 *
 * Path to file: output/bosch_uss_v1.2.dbc
 *
 * Provides the following ECUs:
 * - \ref ECU_RPC
 * - \ref ECU_ADC
 */

/**
 * @defgroup ECU_RPC Electronics Control Unit RPC
 *
 * This ECU was defined in \ref DB_bosch_uss_v1.2.
 *
 * TX messages:
 * - \ref MSG_Map_Objects_Signals_1
 * - \ref MSG_Map_Objects_Signals_2
 * - \ref MSG_Map_Objects_Signals_3
 * - \ref MSG_PAS_APASlotInfo1
 * - \ref MSG_PAS_APASlotInfo2
 * - \ref MSG_PAS_APASlotInfo3
 * - \ref MSG_PAS_USSInfo1
 * - \ref MSG_PAS_USSTraceIDInfo1
 * - \ref MSG_PAS_USSCodeIDInfo1
 * - \ref MSG_PAS_USSInfo2
 * - \ref MSG_PAS_USSTraceIDInfo2_1
 * - \ref MSG_PAS_USSTraceIDInfo2_2
 * - \ref MSG_PAS_Map_PsolObj_Info1
 * - \ref MSG_PAS_Map_PsolObj_Info2
 * - \ref MSG_PAS_Map_PsolObj_Info3
 * - \ref MSG_PAS_Map_PsolObj_Info4
 * - \ref MSG_PAS_Map_PsolObj_Info5
 * - \ref MSG_PAS_ODO_Info6
 *
 * RX signals:
 * - \ref SIG_ADAS_APA_PAS_ADAS_APA_PAS_Checksum
 * - \ref SIG_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter
 * - \ref SIG_ADAS_APA_PAS_PASFunctionRequest
 * - \ref SIG_ADAS_APA_PAS_PSLFunctionRequest
 * - \ref SIG_ADAS_APA_PAS_ParkingSlotIDSelected
 * - \ref SIG_ADAS_APA_PAS_ADASInfoAPAFunctionSt
 * - \ref SIG_ESP_SpdInfoF_ESP_SpdInfoF_Checksum
 * - \ref SIG_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter
 * - \ref SIG_ESP_SpdInfoF_ESP_FLWheelSpd
 * - \ref SIG_ESP_SpdInfoF_ESP_FLWheelSpdVD
 * - \ref SIG_ESP_SpdInfoF_ESP_FRWheelSpd
 * - \ref SIG_ESP_SpdInfoF_ESP_FRWheelSpdVD
 * - \ref SIG_ESP_SpdInfoF_ESP_VehSpd
 * - \ref SIG_ESP_SpdInfoF_ESP_VheSpdVD
 * - \ref SIG_ESP_SpdInfoR_ESP_SpdInfoR_Checksum
 * - \ref SIG_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter
 * - \ref SIG_ESP_SpdInfoR_ESP_RLWheelSpd
 * - \ref SIG_ESP_SpdInfoR_ESP_RLWheelSpdVD
 * - \ref SIG_ESP_SpdInfoR_ESP_RRWheelSpd
 * - \ref SIG_ESP_SpdInfoR_ESP_RRWheelSpdVD
 * - \ref SIG_ESP_SpdEdges_ESP_SpdEdges_Checksum
 * - \ref SIG_ESP_SpdEdges_ESP_SpdEdges_MsgCounter
 * - \ref SIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum
 * - \ref SIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum
 * - \ref SIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum
 * - \ref SIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum
 * - \ref SIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD
 * - \ref SIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD
 * - \ref SIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD
 * - \ref SIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD
 * - \ref SIG_ESP_Accel_ESP_Accel_Checksum
 * - \ref SIG_ESP_Accel_ESP_Accel_MsgCounter
 * - \ref SIG_ESP_Accel_ESP_VehLongAccel
 * - \ref SIG_ESP_Accel_ESP_VehLateralAccel
 * - \ref SIG_ESP_Accel_ESP_VehLongAccelVD
 * - \ref SIG_ESP_Accel_ESP_VehLateralAccelVD
 * - \ref SIG_ESP_Accel_ESP_YAWRate
 * - \ref SIG_ESP_Accel_ESP_FLWheelRotatedDirectionVD
 * - \ref SIG_ESP_Accel_ESP_FRWheelRotatedDirection
 * - \ref SIG_ESP_Accel_ESP_FRWheelRotatedDirectionVD
 * - \ref SIG_ESP_Accel_ESP_RLWheelRotatedDirection
 * - \ref SIG_ESP_Accel_ESP_RLWheelRotatedDirectionVD
 * - \ref SIG_ESP_Accel_ESP_RRWheelRotatedDirection
 * - \ref SIG_ESP_Accel_ESP_RRWheelRotatedDirectionVD
 * - \ref SIG_ESP_Accel_ESP_YAWRateVD
 * - \ref SIG_ESP_Accel_ESP_FLWheelRotationDirection
 * - \ref SIG_EPS_SASInfo_EPS_SASInfo_Checksum
 * - \ref SIG_EPS_SASInfo_EPS_SASInfo_MsgCounter
 * - \ref SIG_EPS_SASInfo_EPS_SteeringAngleVD
 * - \ref SIG_EPS_SASInfo_EPS_SteeringAngle
 * - \ref SIG_EPS_SASInfo_EPS_SteeringAngleSpd
 * - \ref SIG_VCU_SysSt_VCU_SysSt_Checksum
 * - \ref SIG_VCU_SysSt_VCU_SysSt_MsgCounter
 * - \ref SIG_VCU_SysSt_VCU_EVSysReadySt
 * - \ref SIG_VCU_SysSt_VCU_CurrentGearLev
 * - \ref SIG_VCU_SysSt_VCU_ExterTemp
 * - \ref SIG_VCU_SysSt_VCU_ExterTempVD
 * - \ref SIG_iBCM_PowerMode_BCM_KeySt
 * - \ref SIG_FR_TimeSync_SYNC_FC_Type
 * - \ref SIG_FR_TimeSync_SYNC_FC_CRC
 * - \ref SIG_FR_TimeSync_SYNC_FC_Sequencecnt
 * - \ref SIG_FR_TimeSync_SYNC_FC_TimeDomain
 * - \ref SIG_FR_TimeSync_SYNC_FC_OVS
 * - \ref SIG_FR_TimeSync_SYNC_FC_SGW
 * - \ref SIG_FR_TimeSync_SYNC_FC_Reserved
 * - \ref SIG_FR_TimeSync_SYNC_FC_SyncTime
 *
 * @ingroup DB_bosch_uss_v1.2
 */

/**
 * @defgroup ECU_ADC Electronics Control Unit ADC
 *
 * This ECU was defined in \ref DB_bosch_uss_v1.2.
 *
 * TX messages:
 * - \ref MSG_ADAS_APA_PAS
 * - \ref MSG_ESP_SpdInfoF
 * - \ref MSG_ESP_SpdInfoR
 * - \ref MSG_ESP_SpdEdges
 * - \ref MSG_ESP_Accel
 * - \ref MSG_EPS_SASInfo
 * - \ref MSG_VCU_SysSt
 * - \ref MSG_iBCM_PowerMode
 * - \ref MSG_FR_TimeSync
 *
 * RX signals:
 *
 * @ingroup DB_bosch_uss_v1.2
 */

/**
 * @defgroup MSG_Map_Objects_Signals_1 Message Map_Objects_Signals_1 (0x191)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum
 * - \ref SIG_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter
 * - \ref SIG_Map_Objects_Signals_1_MapObj01P1X
 * - \ref SIG_Map_Objects_Signals_1_MapObj01P1Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj01P2X
 * - \ref SIG_Map_Objects_Signals_1_MapObj01P2Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj01Prob
 * - \ref SIG_Map_Objects_Signals_1_MapObj01Type
 * - \ref SIG_Map_Objects_Signals_1_MapObj01Height_Brake
 * - \ref SIG_Map_Objects_Signals_1_MapObj01Height_Warn
 * - \ref SIG_Map_Objects_Signals_1_MapObj01HeightProb
 * - \ref SIG_Map_Objects_Signals_1_MapObj02P1X
 * - \ref SIG_Map_Objects_Signals_1_MapObj02P1Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj02P2X
 * - \ref SIG_Map_Objects_Signals_1_MapObj02P2Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj02Prob
 * - \ref SIG_Map_Objects_Signals_1_MapObj02Type
 * - \ref SIG_Map_Objects_Signals_1_MapObj02Height_Brake
 * - \ref SIG_Map_Objects_Signals_1_MapObj02Height_Warn
 * - \ref SIG_Map_Objects_Signals_1_MapObj02HeightProb
 * - \ref SIG_Map_Objects_Signals_1_MapObj03P1X
 * - \ref SIG_Map_Objects_Signals_1_MapObj03P1Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj03P2X
 * - \ref SIG_Map_Objects_Signals_1_MapObj03P2Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj03Prob
 * - \ref SIG_Map_Objects_Signals_1_MapObj03Type
 * - \ref SIG_Map_Objects_Signals_1_MapObj03Height_Brake
 * - \ref SIG_Map_Objects_Signals_1_MapObj03Height_Warn
 * - \ref SIG_Map_Objects_Signals_1_MapObj03HeightProb
 * - \ref SIG_Map_Objects_Signals_1_MapObj04P1X
 * - \ref SIG_Map_Objects_Signals_1_MapObj04P1Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj04P2X
 * - \ref SIG_Map_Objects_Signals_1_MapObj04P2Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj04Prob
 * - \ref SIG_Map_Objects_Signals_1_MapObj04Type
 * - \ref SIG_Map_Objects_Signals_1_MapObj04Height_Brake
 * - \ref SIG_Map_Objects_Signals_1_MapObj04Height_Warn
 * - \ref SIG_Map_Objects_Signals_1_MapObj04HeightProb
 * - \ref SIG_Map_Objects_Signals_1_MapObj05P1X
 * - \ref SIG_Map_Objects_Signals_1_MapObj05P1Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj05P2X
 * - \ref SIG_Map_Objects_Signals_1_MapObj05P2Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj05Prob
 * - \ref SIG_Map_Objects_Signals_1_MapObj05Type
 * - \ref SIG_Map_Objects_Signals_1_MapObj05Height_Brake
 * - \ref SIG_Map_Objects_Signals_1_MapObj05Height_Warn
 * - \ref SIG_Map_Objects_Signals_1_MapObj05HeightProb
 * - \ref SIG_Map_Objects_Signals_1_MapObj06P1X
 * - \ref SIG_Map_Objects_Signals_1_MapObj06P1Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj06P2X
 * - \ref SIG_Map_Objects_Signals_1_MapObj06P2Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj06Prob
 * - \ref SIG_Map_Objects_Signals_1_MapObj06Type
 * - \ref SIG_Map_Objects_Signals_1_MapObj06Height_Brake
 * - \ref SIG_Map_Objects_Signals_1_MapObj06Height_Warn
 * - \ref SIG_Map_Objects_Signals_1_MapObj06HeightProb
 * - \ref SIG_Map_Objects_Signals_1_MapObj07P1X
 * - \ref SIG_Map_Objects_Signals_1_MapObj07P1Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj07P2X
 * - \ref SIG_Map_Objects_Signals_1_MapObj07P2Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj07Prob
 * - \ref SIG_Map_Objects_Signals_1_MapObj07Type
 * - \ref SIG_Map_Objects_Signals_1_MapObj07Height_Brake
 * - \ref SIG_Map_Objects_Signals_1_MapObj07Height_Warn
 * - \ref SIG_Map_Objects_Signals_1_MapObj07HeightProb
 * - \ref SIG_Map_Objects_Signals_1_MapObj08P1X
 * - \ref SIG_Map_Objects_Signals_1_MapObj08P1Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj08P2X
 * - \ref SIG_Map_Objects_Signals_1_MapObj08P2Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj08Prob
 * - \ref SIG_Map_Objects_Signals_1_MapObj08Type
 * - \ref SIG_Map_Objects_Signals_1_MapObj08Height_Brake
 * - \ref SIG_Map_Objects_Signals_1_MapObj08Height_Warn
 * - \ref SIG_Map_Objects_Signals_1_MapObj08HeightProb
 * - \ref SIG_Map_Objects_Signals_1_MapObj09P1X
 * - \ref SIG_Map_Objects_Signals_1_MapObj09P1Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj09P2X
 * - \ref SIG_Map_Objects_Signals_1_MapObj09P2Y
 * - \ref SIG_Map_Objects_Signals_1_MapObj09Prob
 * - \ref SIG_Map_Objects_Signals_1_MapObj09Type
 * - \ref SIG_Map_Objects_Signals_1_MapObj09Height_Brake
 * - \ref SIG_Map_Objects_Signals_1_MapObj09Height_Warn
 * - \ref SIG_Map_Objects_Signals_1_MapObj09HeightProb
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message Map_Objects_Signals_1 configuration tuple.
 */
#define MSG_Map_Objects_Signals_1                   0x191, 0, 64

/**
 * Message Map_Objects_Signals_1 id.
 */
#define ID_Map_Objects_Signals_1                    0x191

/**
 * Message Map_Objects_Signals_1 extended id bit.
 */
#define EXT_Map_Objects_Signals_1                   0

/**
 * Message Map_Objects_Signals_1 Data Length Count.
 */
#define DLC_Map_Objects_Signals_1                   64

/**
 * Message Map_Objects_Signals_1 cycle time.
 */
#define CYCLE_Map_Objects_Signals_1                 20

/**
 * Message Map_Objects_Signals_1 fast cycle time.
 */
#define FAST_Map_Objects_Signals_1                  0

/**
 * Initialise message Map_Objects_Signals_1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Map_Objects_Signals_1(buf) { \
	INITSIG_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum(buf); \
	INITSIG_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj01P1X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj01P1Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj01P2X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj01P2Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj01Prob(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj01Type(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj01Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj01Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj01HeightProb(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj02P1X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj02P1Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj02P2X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj02P2Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj02Prob(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj02Type(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj02Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj02Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj02HeightProb(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj03P1X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj03P1Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj03P2X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj03P2Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj03Prob(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj03Type(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj03Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj03Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj03HeightProb(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj04P1X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj04P1Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj04P2X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj04P2Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj04Prob(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj04Type(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj04Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj04Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj04HeightProb(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj05P1X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj05P1Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj05P2X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj05P2Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj05Prob(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj05Type(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj05Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj05Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj05HeightProb(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj06P1X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj06P1Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj06P2X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj06P2Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj06Prob(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj06Type(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj06Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj06Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj06HeightProb(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj07P1X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj07P1Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj07P2X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj07P2Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj07Prob(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj07Type(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj07Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj07Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj07HeightProb(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj08P1X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj08P1Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj08P2X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj08P2Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj08Prob(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj08Type(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj08Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj08Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj08HeightProb(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj09P1X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj09P1Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj09P2X(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj09P2Y(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj09Prob(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj09Type(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj09Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj09Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_1_MapObj09HeightProb(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Map_Objects_Signals_2 Message Map_Objects_Signals_2 (0x192)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum
 * - \ref SIG_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter
 * - \ref SIG_Map_Objects_Signals_2_MapObj10P1X
 * - \ref SIG_Map_Objects_Signals_2_MapObj10P1Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj10P2X
 * - \ref SIG_Map_Objects_Signals_2_MapObj10P2Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj10Prob
 * - \ref SIG_Map_Objects_Signals_2_MapObj10Type
 * - \ref SIG_Map_Objects_Signals_2_MapObj10Height_Brake
 * - \ref SIG_Map_Objects_Signals_2_MapObj10Height_Warn
 * - \ref SIG_Map_Objects_Signals_2_MapObj10HeightProb
 * - \ref SIG_Map_Objects_Signals_2_MapObj11P1X
 * - \ref SIG_Map_Objects_Signals_2_MapObj11P1Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj11P2X
 * - \ref SIG_Map_Objects_Signals_2_MapObj11P2Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj11Prob
 * - \ref SIG_Map_Objects_Signals_2_MapObj11Type
 * - \ref SIG_Map_Objects_Signals_2_MapObj11Height_Brake
 * - \ref SIG_Map_Objects_Signals_2_MapObj11Height_Warn
 * - \ref SIG_Map_Objects_Signals_2_MapObj11HeightProb
 * - \ref SIG_Map_Objects_Signals_2_MapObj12P1X
 * - \ref SIG_Map_Objects_Signals_2_MapObj12P1Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj12P2X
 * - \ref SIG_Map_Objects_Signals_2_MapObj12P2Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj12Prob
 * - \ref SIG_Map_Objects_Signals_2_MapObj12Type
 * - \ref SIG_Map_Objects_Signals_2_MapObj12Height_Brake
 * - \ref SIG_Map_Objects_Signals_2_MapObj12Height_Warn
 * - \ref SIG_Map_Objects_Signals_2_MapObj12HeightProb
 * - \ref SIG_Map_Objects_Signals_2_MapObj13P1X
 * - \ref SIG_Map_Objects_Signals_2_MapObj13P1Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj13P2X
 * - \ref SIG_Map_Objects_Signals_2_MapObj13P2Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj13Prob
 * - \ref SIG_Map_Objects_Signals_2_MapObj13Type
 * - \ref SIG_Map_Objects_Signals_2_MapObj13Height_Brake
 * - \ref SIG_Map_Objects_Signals_2_MapObj13Height_Warn
 * - \ref SIG_Map_Objects_Signals_2_MapObj13HeightProb
 * - \ref SIG_Map_Objects_Signals_2_MapObj14P1X
 * - \ref SIG_Map_Objects_Signals_2_MapObj14P1Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj14P2X
 * - \ref SIG_Map_Objects_Signals_2_MapObj14P2Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj14Prob
 * - \ref SIG_Map_Objects_Signals_2_MapObj14Type
 * - \ref SIG_Map_Objects_Signals_2_MapObj14Height_Brake
 * - \ref SIG_Map_Objects_Signals_2_MapObj14Height_Warn
 * - \ref SIG_Map_Objects_Signals_2_MapObj14HeightProb
 * - \ref SIG_Map_Objects_Signals_2_MapObj15P1X
 * - \ref SIG_Map_Objects_Signals_2_MapObj15P1Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj15P2X
 * - \ref SIG_Map_Objects_Signals_2_MapObj15P2Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj15Prob
 * - \ref SIG_Map_Objects_Signals_2_MapObj15Type
 * - \ref SIG_Map_Objects_Signals_2_MapObj15Height_Brake
 * - \ref SIG_Map_Objects_Signals_2_MapObj15Height_Warn
 * - \ref SIG_Map_Objects_Signals_2_MapObj15HeightProb
 * - \ref SIG_Map_Objects_Signals_2_MapObj16P1X
 * - \ref SIG_Map_Objects_Signals_2_MapObj16P1Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj16P2X
 * - \ref SIG_Map_Objects_Signals_2_MapObj16P2Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj16Prob
 * - \ref SIG_Map_Objects_Signals_2_MapObj16Type
 * - \ref SIG_Map_Objects_Signals_2_MapObj16Height_Brake
 * - \ref SIG_Map_Objects_Signals_2_MapObj16Height_Warn
 * - \ref SIG_Map_Objects_Signals_2_MapObj16HeightProb
 * - \ref SIG_Map_Objects_Signals_2_MapObj17P1X
 * - \ref SIG_Map_Objects_Signals_2_MapObj17P1Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj17P2X
 * - \ref SIG_Map_Objects_Signals_2_MapObj17P2Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj17Prob
 * - \ref SIG_Map_Objects_Signals_2_MapObj17Type
 * - \ref SIG_Map_Objects_Signals_2_MapObj17Height_Brake
 * - \ref SIG_Map_Objects_Signals_2_MapObj17Height_Warn
 * - \ref SIG_Map_Objects_Signals_2_MapObj17HeightProb
 * - \ref SIG_Map_Objects_Signals_2_MapObj18P1X
 * - \ref SIG_Map_Objects_Signals_2_MapObj18P1Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj18P2X
 * - \ref SIG_Map_Objects_Signals_2_MapObj18P2Y
 * - \ref SIG_Map_Objects_Signals_2_MapObj18Prob
 * - \ref SIG_Map_Objects_Signals_2_MapObj18Type
 * - \ref SIG_Map_Objects_Signals_2_MapObj18Height_Brake
 * - \ref SIG_Map_Objects_Signals_2_MapObj18Height_Warn
 * - \ref SIG_Map_Objects_Signals_2_MapObj18HeightProb
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message Map_Objects_Signals_2 configuration tuple.
 */
#define MSG_Map_Objects_Signals_2                   0x192, 0, 64

/**
 * Message Map_Objects_Signals_2 id.
 */
#define ID_Map_Objects_Signals_2                    0x192

/**
 * Message Map_Objects_Signals_2 extended id bit.
 */
#define EXT_Map_Objects_Signals_2                   0

/**
 * Message Map_Objects_Signals_2 Data Length Count.
 */
#define DLC_Map_Objects_Signals_2                   64

/**
 * Message Map_Objects_Signals_2 cycle time.
 */
#define CYCLE_Map_Objects_Signals_2                 20

/**
 * Message Map_Objects_Signals_2 fast cycle time.
 */
#define FAST_Map_Objects_Signals_2                  0

/**
 * Initialise message Map_Objects_Signals_2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Map_Objects_Signals_2(buf) { \
	INITSIG_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum(buf); \
	INITSIG_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj10P1X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj10P1Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj10P2X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj10P2Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj10Prob(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj10Type(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj10Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj10Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj10HeightProb(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj11P1X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj11P1Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj11P2X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj11P2Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj11Prob(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj11Type(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj11Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj11Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj11HeightProb(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj12P1X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj12P1Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj12P2X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj12P2Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj12Prob(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj12Type(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj12Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj12Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj12HeightProb(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj13P1X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj13P1Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj13P2X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj13P2Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj13Prob(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj13Type(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj13Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj13Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj13HeightProb(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj14P1X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj14P1Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj14P2X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj14P2Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj14Prob(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj14Type(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj14Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj14Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj14HeightProb(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj15P1X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj15P1Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj15P2X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj15P2Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj15Prob(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj15Type(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj15Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj15Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj15HeightProb(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj16P1X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj16P1Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj16P2X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj16P2Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj16Prob(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj16Type(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj16Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj16Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj16HeightProb(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj17P1X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj17P1Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj17P2X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj17P2Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj17Prob(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj17Type(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj17Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj17Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj17HeightProb(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj18P1X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj18P1Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj18P2X(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj18P2Y(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj18Prob(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj18Type(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj18Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj18Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_2_MapObj18HeightProb(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Map_Objects_Signals_3 Message Map_Objects_Signals_3 (0x193)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum
 * - \ref SIG_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter
 * - \ref SIG_Map_Objects_Signals_3_MapObj19P1X
 * - \ref SIG_Map_Objects_Signals_3_MapObj19P1Y
 * - \ref SIG_Map_Objects_Signals_3_MapObj19P2X
 * - \ref SIG_Map_Objects_Signals_3_MapObj19P2Y
 * - \ref SIG_Map_Objects_Signals_3_MapObj19Prob
 * - \ref SIG_Map_Objects_Signals_3_MapObj19Type
 * - \ref SIG_Map_Objects_Signals_3_MapObj19Height_Brake
 * - \ref SIG_Map_Objects_Signals_3_MapObj19Height_Warn
 * - \ref SIG_Map_Objects_Signals_3_MapObj19HeightProb
 * - \ref SIG_Map_Objects_Signals_3_MapObj20P1X
 * - \ref SIG_Map_Objects_Signals_3_MapObj20P1Y
 * - \ref SIG_Map_Objects_Signals_3_MapObj20P2X
 * - \ref SIG_Map_Objects_Signals_3_MapObj20P2Y
 * - \ref SIG_Map_Objects_Signals_3_MapObj20Prob
 * - \ref SIG_Map_Objects_Signals_3_MapObj20Type
 * - \ref SIG_Map_Objects_Signals_3_MapObj20Height_Brake
 * - \ref SIG_Map_Objects_Signals_3_MapObj20Height_Warn
 * - \ref SIG_Map_Objects_Signals_3_MapObj20HeightProb
 * - \ref SIG_Map_Objects_Signals_3_PSL_Status
 * - \ref SIG_Map_Objects_Signals_3_PAS_Status
 * - \ref SIG_Map_Objects_Signals_3_PAS_MapObj_TimeStamp
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message Map_Objects_Signals_3 configuration tuple.
 */
#define MSG_Map_Objects_Signals_3                   0x193, 0, 32

/**
 * Message Map_Objects_Signals_3 id.
 */
#define ID_Map_Objects_Signals_3                    0x193

/**
 * Message Map_Objects_Signals_3 extended id bit.
 */
#define EXT_Map_Objects_Signals_3                   0

/**
 * Message Map_Objects_Signals_3 Data Length Count.
 */
#define DLC_Map_Objects_Signals_3                   32

/**
 * Message Map_Objects_Signals_3 cycle time.
 */
#define CYCLE_Map_Objects_Signals_3                 20

/**
 * Message Map_Objects_Signals_3 fast cycle time.
 */
#define FAST_Map_Objects_Signals_3                  0

/**
 * Initialise message Map_Objects_Signals_3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Map_Objects_Signals_3(buf) { \
	INITSIG_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum(buf); \
	INITSIG_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj19P1X(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj19P1Y(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj19P2X(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj19P2Y(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj19Prob(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj19Type(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj19Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj19Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj19HeightProb(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj20P1X(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj20P1Y(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj20P2X(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj20P2Y(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj20Prob(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj20Type(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj20Height_Brake(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj20Height_Warn(buf); \
	INITSIG_Map_Objects_Signals_3_MapObj20HeightProb(buf); \
	INITSIG_Map_Objects_Signals_3_PSL_Status(buf); \
	INITSIG_Map_Objects_Signals_3_PAS_Status(buf); \
	INITSIG_Map_Objects_Signals_3_PAS_MapObj_TimeStamp(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_APASlotInfo1 Message PAS_APASlotInfo1 (0x194)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum
 * - \ref SIG_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1ID
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Status
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Type
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1DepethReferance
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Obj1X
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Obj1Y
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Obj1Type
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Obj1Alpha
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Obj2X
 * - \ref SIG_PAS_APASlotInfo1_ApatSlot1Obj2Y
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Obj2Type
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Obj2Alpha
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Length
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot1Depth
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2ID
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Status
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Type
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2DepethReferance
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Obj1X
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Obj1Y
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Obj1Type
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Obj1Alpha
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Obj2X
 * - \ref SIG_PAS_APASlotInfo1_ApatSlot2Obj2Y
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Obj2Type
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Obj2Alpha
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Length
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot2Depth
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3ID
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Status
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Type
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3DepethReferance
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Obj1X
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Obj1Y
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Obj1Type
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Obj1Alpha
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Obj2X
 * - \ref SIG_PAS_APASlotInfo1_ApatSlot3Obj2Y
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Obj2Type
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Obj2Alpha
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Length
 * - \ref SIG_PAS_APASlotInfo1_ApaSlot3Depth
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_APASlotInfo1 configuration tuple.
 */
#define MSG_PAS_APASlotInfo1                        0x194, 0, 64

/**
 * Message PAS_APASlotInfo1 id.
 */
#define ID_PAS_APASlotInfo1                         0x194

/**
 * Message PAS_APASlotInfo1 extended id bit.
 */
#define EXT_PAS_APASlotInfo1                        0

/**
 * Message PAS_APASlotInfo1 Data Length Count.
 */
#define DLC_PAS_APASlotInfo1                        64

/**
 * Message PAS_APASlotInfo1 cycle time.
 */
#define CYCLE_PAS_APASlotInfo1                      20

/**
 * Message PAS_APASlotInfo1 fast cycle time.
 */
#define FAST_PAS_APASlotInfo1                       0

/**
 * Initialise message PAS_APASlotInfo1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_APASlotInfo1(buf) { \
	INITSIG_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum(buf); \
	INITSIG_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1ID(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Status(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Type(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1DepethReferance(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1X(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1Y(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1Type(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1Alpha(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Obj2X(buf); \
	INITSIG_PAS_APASlotInfo1_ApatSlot1Obj2Y(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Obj2Type(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Obj2Alpha(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Length(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot1Depth(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2ID(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Status(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Type(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2DepethReferance(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1X(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1Y(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1Type(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1Alpha(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Obj2X(buf); \
	INITSIG_PAS_APASlotInfo1_ApatSlot2Obj2Y(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Obj2Type(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Obj2Alpha(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Length(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot2Depth(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3ID(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Status(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Type(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3DepethReferance(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1X(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1Y(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1Type(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1Alpha(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Obj2X(buf); \
	INITSIG_PAS_APASlotInfo1_ApatSlot3Obj2Y(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Obj2Type(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Obj2Alpha(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Length(buf); \
	INITSIG_PAS_APASlotInfo1_ApaSlot3Depth(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_APASlotInfo2 Message PAS_APASlotInfo2 (0x195)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum
 * - \ref SIG_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4ID
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Status
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Type
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4DepethReferance
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Obj1X
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Obj1Y
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Obj1Type
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Obj1Alpha
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Obj2X
 * - \ref SIG_PAS_APASlotInfo2_ApatSlot4Obj2Y
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Obj2Type
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Obj2Alpha
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Length
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot4Depth
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5ID
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Status
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Type
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5DepethReferance
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Obj1X
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Obj1Y
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Obj1Type
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Obj1Alpha
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Obj2X
 * - \ref SIG_PAS_APASlotInfo2_ApatSlot5Obj2Y
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Obj2Type
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Obj2Alpha
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Length
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot5Depth
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6ID
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Status
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Type
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6DepethReferance
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Obj1X
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Obj1Y
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Obj1Type
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Obj1Alpha
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Obj2X
 * - \ref SIG_PAS_APASlotInfo2_ApatSlot6Obj2Y
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Obj2Type
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Obj2Alpha
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Length
 * - \ref SIG_PAS_APASlotInfo2_ApaSlot6Depth
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_APASlotInfo2 configuration tuple.
 */
#define MSG_PAS_APASlotInfo2                        0x195, 0, 64

/**
 * Message PAS_APASlotInfo2 id.
 */
#define ID_PAS_APASlotInfo2                         0x195

/**
 * Message PAS_APASlotInfo2 extended id bit.
 */
#define EXT_PAS_APASlotInfo2                        0

/**
 * Message PAS_APASlotInfo2 Data Length Count.
 */
#define DLC_PAS_APASlotInfo2                        64

/**
 * Message PAS_APASlotInfo2 cycle time.
 */
#define CYCLE_PAS_APASlotInfo2                      20

/**
 * Message PAS_APASlotInfo2 fast cycle time.
 */
#define FAST_PAS_APASlotInfo2                       0

/**
 * Initialise message PAS_APASlotInfo2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_APASlotInfo2(buf) { \
	INITSIG_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum(buf); \
	INITSIG_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4ID(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Status(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Type(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4DepethReferance(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1X(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1Y(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1Type(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1Alpha(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Obj2X(buf); \
	INITSIG_PAS_APASlotInfo2_ApatSlot4Obj2Y(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Obj2Type(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Obj2Alpha(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Length(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot4Depth(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5ID(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Status(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Type(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5DepethReferance(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1X(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1Y(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1Type(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1Alpha(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Obj2X(buf); \
	INITSIG_PAS_APASlotInfo2_ApatSlot5Obj2Y(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Obj2Type(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Obj2Alpha(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Length(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot5Depth(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6ID(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Status(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Type(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6DepethReferance(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1X(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1Y(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1Type(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1Alpha(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Obj2X(buf); \
	INITSIG_PAS_APASlotInfo2_ApatSlot6Obj2Y(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Obj2Type(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Obj2Alpha(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Length(buf); \
	INITSIG_PAS_APASlotInfo2_ApaSlot6Depth(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_APASlotInfo3 Message PAS_APASlotInfo3 (0x196)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum
 * - \ref SIG_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7ID
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Status
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Type
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7DepethReferance
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Obj1X
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Obj1Y
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Obj1Type
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Obj1Alpha
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Obj2X
 * - \ref SIG_PAS_APASlotInfo3_ApatSlot7Obj2Y
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Obj2Type
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Obj2Alpha
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Length
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot7Depth
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8ID
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Status
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Type
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8DepethReferance
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Obj1X
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Obj1Y
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Obj1Type
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Obj1Alpha
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Obj2X
 * - \ref SIG_PAS_APASlotInfo3_ApatSlot8Obj2Y
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Obj2Type
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Obj2Alpha
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Length
 * - \ref SIG_PAS_APASlotInfo3_ApaSlot8Depth
 * - \ref SIG_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_APASlotInfo3 configuration tuple.
 */
#define MSG_PAS_APASlotInfo3                        0x196, 0, 64

/**
 * Message PAS_APASlotInfo3 id.
 */
#define ID_PAS_APASlotInfo3                         0x196

/**
 * Message PAS_APASlotInfo3 extended id bit.
 */
#define EXT_PAS_APASlotInfo3                        0

/**
 * Message PAS_APASlotInfo3 Data Length Count.
 */
#define DLC_PAS_APASlotInfo3                        64

/**
 * Message PAS_APASlotInfo3 cycle time.
 */
#define CYCLE_PAS_APASlotInfo3                      20

/**
 * Message PAS_APASlotInfo3 fast cycle time.
 */
#define FAST_PAS_APASlotInfo3                       0

/**
 * Initialise message PAS_APASlotInfo3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_APASlotInfo3(buf) { \
	INITSIG_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum(buf); \
	INITSIG_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7ID(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Status(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Type(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7DepethReferance(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1X(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1Y(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1Type(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1Alpha(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Obj2X(buf); \
	INITSIG_PAS_APASlotInfo3_ApatSlot7Obj2Y(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Obj2Type(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Obj2Alpha(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Length(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot7Depth(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8ID(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Status(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Type(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8DepethReferance(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1X(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1Y(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1Type(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1Alpha(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Obj2X(buf); \
	INITSIG_PAS_APASlotInfo3_ApatSlot8Obj2Y(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Obj2Type(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Obj2Alpha(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Length(buf); \
	INITSIG_PAS_APASlotInfo3_ApaSlot8Depth(buf); \
	INITSIG_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_USSInfo1 Message PAS_USSInfo1 (0x197)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_USSInfo1_PAS_USSInfo1_Checksum
 * - \ref SIG_PAS_USSInfo1_PAS_USSInfo1_MsgCounter
 * - \ref SIG_PAS_USSInfo1_USS_DE_1_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_2_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_3_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_4_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_5_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_6_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_7_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_8_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_9_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_10_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_11_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_12_1
 * - \ref SIG_PAS_USSInfo1_USS_DE_1_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_2_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_3_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_4_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_5_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_6_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_7_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_8_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_9_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_10_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_11_2
 * - \ref SIG_PAS_USSInfo1_USS_DE_12_2
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_USSInfo1 configuration tuple.
 */
#define MSG_PAS_USSInfo1                            0x197, 0, 32

/**
 * Message PAS_USSInfo1 id.
 */
#define ID_PAS_USSInfo1                             0x197

/**
 * Message PAS_USSInfo1 extended id bit.
 */
#define EXT_PAS_USSInfo1                            0

/**
 * Message PAS_USSInfo1 Data Length Count.
 */
#define DLC_PAS_USSInfo1                            32

/**
 * Message PAS_USSInfo1 cycle time.
 */
#define CYCLE_PAS_USSInfo1                          20

/**
 * Message PAS_USSInfo1 fast cycle time.
 */
#define FAST_PAS_USSInfo1                           0

/**
 * Initialise message PAS_USSInfo1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_USSInfo1(buf) { \
	INITSIG_PAS_USSInfo1_PAS_USSInfo1_Checksum(buf); \
	INITSIG_PAS_USSInfo1_PAS_USSInfo1_MsgCounter(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_1_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_2_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_3_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_4_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_5_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_6_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_7_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_8_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_9_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_10_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_11_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_12_1(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_1_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_2_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_3_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_4_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_5_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_6_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_7_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_8_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_9_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_10_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_11_2(buf); \
	INITSIG_PAS_USSInfo1_USS_DE_12_2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_USSTraceIDInfo1 Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum
 * - \ref SIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_USSTraceIDInfo1 configuration tuple.
 */
#define MSG_PAS_USSTraceIDInfo1                     0x1a1, 0, 64

/**
 * Message PAS_USSTraceIDInfo1 id.
 */
#define ID_PAS_USSTraceIDInfo1                      0x1a1

/**
 * Message PAS_USSTraceIDInfo1 extended id bit.
 */
#define EXT_PAS_USSTraceIDInfo1                     0

/**
 * Message PAS_USSTraceIDInfo1 Data Length Count.
 */
#define DLC_PAS_USSTraceIDInfo1                     64

/**
 * Message PAS_USSTraceIDInfo1 cycle time.
 */
#define CYCLE_PAS_USSTraceIDInfo1                   20

/**
 * Message PAS_USSTraceIDInfo1 fast cycle time.
 */
#define FAST_PAS_USSTraceIDInfo1                    0

/**
 * Initialise message PAS_USSTraceIDInfo1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_USSTraceIDInfo1(buf) { \
	INITSIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum(buf); \
	INITSIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_USSCodeIDInfo1 Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum
 * - \ref SIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID
 * - \ref SIG_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_USSCodeIDInfo1 configuration tuple.
 */
#define MSG_PAS_USSCodeIDInfo1                      0x1a2, 0, 16

/**
 * Message PAS_USSCodeIDInfo1 id.
 */
#define ID_PAS_USSCodeIDInfo1                       0x1a2

/**
 * Message PAS_USSCodeIDInfo1 extended id bit.
 */
#define EXT_PAS_USSCodeIDInfo1                      0

/**
 * Message PAS_USSCodeIDInfo1 Data Length Count.
 */
#define DLC_PAS_USSCodeIDInfo1                      16

/**
 * Message PAS_USSCodeIDInfo1 cycle time.
 */
#define CYCLE_PAS_USSCodeIDInfo1                    20

/**
 * Message PAS_USSCodeIDInfo1 fast cycle time.
 */
#define FAST_PAS_USSCodeIDInfo1                     0

/**
 * Initialise message PAS_USSCodeIDInfo1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_USSCodeIDInfo1(buf) { \
	INITSIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum(buf); \
	INITSIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID(buf); \
	INITSIG_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_USSInfo2 Message PAS_USSInfo2 (0x198)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_USSInfo2_PAS_USSInfo2_Checksum
 * - \ref SIG_PAS_USSInfo2_PAS_USSInfo2_MsgCounter
 * - \ref SIG_PAS_USSInfo2_USS_CE_1_Right_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_2_Left_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_2_Right_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_3_Left_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_3_Right_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_4_Left_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_4_Right_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_5_Left_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_5_Right_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_6_Left_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_7_Right_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_8_Left_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_8_Right_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_9_Left_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_9_Right_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_10_Left_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_10_Right_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_11_Left_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_11_Right_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_12_Left_1
 * - \ref SIG_PAS_USSInfo2_USS_CE_1_Right_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_2_Left_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_2_Right_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_3_Left_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_3_Right_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_4_Left_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_4_Right_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_5_Left_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_5_Right_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_6_Left_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_7_Right_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_8_Left_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_8_Right_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_9_Left_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_9_Right_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_10_Left_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_10_Right_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_11_Left_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_11_Right_2
 * - \ref SIG_PAS_USSInfo2_USS_CE_12_Left_2
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_USSInfo2 configuration tuple.
 */
#define MSG_PAS_USSInfo2                            0x198, 0, 64

/**
 * Message PAS_USSInfo2 id.
 */
#define ID_PAS_USSInfo2                             0x198

/**
 * Message PAS_USSInfo2 extended id bit.
 */
#define EXT_PAS_USSInfo2                            0

/**
 * Message PAS_USSInfo2 Data Length Count.
 */
#define DLC_PAS_USSInfo2                            64

/**
 * Message PAS_USSInfo2 cycle time.
 */
#define CYCLE_PAS_USSInfo2                          20

/**
 * Message PAS_USSInfo2 fast cycle time.
 */
#define FAST_PAS_USSInfo2                           0

/**
 * Initialise message PAS_USSInfo2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_USSInfo2(buf) { \
	INITSIG_PAS_USSInfo2_PAS_USSInfo2_Checksum(buf); \
	INITSIG_PAS_USSInfo2_PAS_USSInfo2_MsgCounter(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_1_Right_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_2_Left_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_2_Right_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_3_Left_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_3_Right_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_4_Left_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_4_Right_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_5_Left_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_5_Right_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_6_Left_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_7_Right_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_8_Left_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_8_Right_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_9_Left_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_9_Right_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_10_Left_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_10_Right_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_11_Left_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_11_Right_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_12_Left_1(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_1_Right_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_2_Left_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_2_Right_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_3_Left_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_3_Right_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_4_Left_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_4_Right_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_5_Left_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_5_Right_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_6_Left_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_7_Right_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_8_Left_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_8_Right_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_9_Left_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_9_Right_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_10_Left_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_10_Right_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_11_Left_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_11_Right_2(buf); \
	INITSIG_PAS_USSInfo2_USS_CE_12_Left_2(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_USSTraceIDInfo2_1 Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum
 * - \ref SIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_USSTraceIDInfo2_1 configuration tuple.
 */
#define MSG_PAS_USSTraceIDInfo2_1                   0x1a3, 0, 64

/**
 * Message PAS_USSTraceIDInfo2_1 id.
 */
#define ID_PAS_USSTraceIDInfo2_1                    0x1a3

/**
 * Message PAS_USSTraceIDInfo2_1 extended id bit.
 */
#define EXT_PAS_USSTraceIDInfo2_1                   0

/**
 * Message PAS_USSTraceIDInfo2_1 Data Length Count.
 */
#define DLC_PAS_USSTraceIDInfo2_1                   64

/**
 * Message PAS_USSTraceIDInfo2_1 cycle time.
 */
#define CYCLE_PAS_USSTraceIDInfo2_1                 20

/**
 * Message PAS_USSTraceIDInfo2_1 fast cycle time.
 */
#define FAST_PAS_USSTraceIDInfo2_1                  0

/**
 * Initialise message PAS_USSTraceIDInfo2_1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_USSTraceIDInfo2_1(buf) { \
	INITSIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_USSTraceIDInfo2_2 Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum
 * - \ref SIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID
 * - \ref SIG_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_USSTraceIDInfo2_2 configuration tuple.
 */
#define MSG_PAS_USSTraceIDInfo2_2                   0x1a4, 0, 48

/**
 * Message PAS_USSTraceIDInfo2_2 id.
 */
#define ID_PAS_USSTraceIDInfo2_2                    0x1a4

/**
 * Message PAS_USSTraceIDInfo2_2 extended id bit.
 */
#define EXT_PAS_USSTraceIDInfo2_2                   0

/**
 * Message PAS_USSTraceIDInfo2_2 Data Length Count.
 */
#define DLC_PAS_USSTraceIDInfo2_2                   48

/**
 * Message PAS_USSTraceIDInfo2_2 cycle time.
 */
#define CYCLE_PAS_USSTraceIDInfo2_2                 20

/**
 * Message PAS_USSTraceIDInfo2_2 fast cycle time.
 */
#define FAST_PAS_USSTraceIDInfo2_2                  0

/**
 * Initialise message PAS_USSTraceIDInfo2_2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_USSTraceIDInfo2_2(buf) { \
	INITSIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID(buf); \
	INITSIG_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_Map_PsolObj_Info1 Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum
 * - \ref SIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_Map_PsolObj_Info1 configuration tuple.
 */
#define MSG_PAS_Map_PsolObj_Info1                   0x19c, 0, 64

/**
 * Message PAS_Map_PsolObj_Info1 id.
 */
#define ID_PAS_Map_PsolObj_Info1                    0x19c

/**
 * Message PAS_Map_PsolObj_Info1 extended id bit.
 */
#define EXT_PAS_Map_PsolObj_Info1                   0

/**
 * Message PAS_Map_PsolObj_Info1 Data Length Count.
 */
#define DLC_PAS_Map_PsolObj_Info1                   64

/**
 * Message PAS_Map_PsolObj_Info1 cycle time.
 */
#define CYCLE_PAS_Map_PsolObj_Info1                 20

/**
 * Message PAS_Map_PsolObj_Info1 fast cycle time.
 */
#define FAST_PAS_Map_PsolObj_Info1                  0

/**
 * Initialise message PAS_Map_PsolObj_Info1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_Map_PsolObj_Info1(buf) { \
	INITSIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_Map_PsolObj_Info2 Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum
 * - \ref SIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_Map_PsolObj_Info2 configuration tuple.
 */
#define MSG_PAS_Map_PsolObj_Info2                   0x19d, 0, 64

/**
 * Message PAS_Map_PsolObj_Info2 id.
 */
#define ID_PAS_Map_PsolObj_Info2                    0x19d

/**
 * Message PAS_Map_PsolObj_Info2 extended id bit.
 */
#define EXT_PAS_Map_PsolObj_Info2                   0

/**
 * Message PAS_Map_PsolObj_Info2 Data Length Count.
 */
#define DLC_PAS_Map_PsolObj_Info2                   64

/**
 * Message PAS_Map_PsolObj_Info2 cycle time.
 */
#define CYCLE_PAS_Map_PsolObj_Info2                 20

/**
 * Message PAS_Map_PsolObj_Info2 fast cycle time.
 */
#define FAST_PAS_Map_PsolObj_Info2                  0

/**
 * Initialise message PAS_Map_PsolObj_Info2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_Map_PsolObj_Info2(buf) { \
	INITSIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_Map_PsolObj_Info3 Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum
 * - \ref SIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_Map_PsolObj_Info3 configuration tuple.
 */
#define MSG_PAS_Map_PsolObj_Info3                   0x19e, 0, 64

/**
 * Message PAS_Map_PsolObj_Info3 id.
 */
#define ID_PAS_Map_PsolObj_Info3                    0x19e

/**
 * Message PAS_Map_PsolObj_Info3 extended id bit.
 */
#define EXT_PAS_Map_PsolObj_Info3                   0

/**
 * Message PAS_Map_PsolObj_Info3 Data Length Count.
 */
#define DLC_PAS_Map_PsolObj_Info3                   64

/**
 * Message PAS_Map_PsolObj_Info3 cycle time.
 */
#define CYCLE_PAS_Map_PsolObj_Info3                 20

/**
 * Message PAS_Map_PsolObj_Info3 fast cycle time.
 */
#define FAST_PAS_Map_PsolObj_Info3                  0

/**
 * Initialise message PAS_Map_PsolObj_Info3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_Map_PsolObj_Info3(buf) { \
	INITSIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_Map_PsolObj_Info4 Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum
 * - \ref SIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_Map_PsolObj_Info4 configuration tuple.
 */
#define MSG_PAS_Map_PsolObj_Info4                   0x19f, 0, 64

/**
 * Message PAS_Map_PsolObj_Info4 id.
 */
#define ID_PAS_Map_PsolObj_Info4                    0x19f

/**
 * Message PAS_Map_PsolObj_Info4 extended id bit.
 */
#define EXT_PAS_Map_PsolObj_Info4                   0

/**
 * Message PAS_Map_PsolObj_Info4 Data Length Count.
 */
#define DLC_PAS_Map_PsolObj_Info4                   64

/**
 * Message PAS_Map_PsolObj_Info4 cycle time.
 */
#define CYCLE_PAS_Map_PsolObj_Info4                 20

/**
 * Message PAS_Map_PsolObj_Info4 fast cycle time.
 */
#define FAST_PAS_Map_PsolObj_Info4                  0

/**
 * Initialise message PAS_Map_PsolObj_Info4 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_Map_PsolObj_Info4(buf) { \
	INITSIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_Map_PsolObj_Info5 Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum
 * - \ref SIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus
 * - \ref SIG_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_Map_PsolObj_Info5 configuration tuple.
 */
#define MSG_PAS_Map_PsolObj_Info5                   0x1a0, 0, 32

/**
 * Message PAS_Map_PsolObj_Info5 id.
 */
#define ID_PAS_Map_PsolObj_Info5                    0x1a0

/**
 * Message PAS_Map_PsolObj_Info5 extended id bit.
 */
#define EXT_PAS_Map_PsolObj_Info5                   0

/**
 * Message PAS_Map_PsolObj_Info5 Data Length Count.
 */
#define DLC_PAS_Map_PsolObj_Info5                   32

/**
 * Message PAS_Map_PsolObj_Info5 cycle time.
 */
#define CYCLE_PAS_Map_PsolObj_Info5                 20

/**
 * Message PAS_Map_PsolObj_Info5 fast cycle time.
 */
#define FAST_PAS_Map_PsolObj_Info5                  0

/**
 * Initialise message PAS_Map_PsolObj_Info5 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_Map_PsolObj_Info5(buf) { \
	INITSIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus(buf); \
	INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_PAS_ODO_Info6 Message PAS_ODO_Info6 (0x1a5)
 *
 * Sent by \ref ECU_RPC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_PAS_ODO_Info6_PAS_ODO_Info6_Checksum
 * - \ref SIG_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter
 * - \ref SIG_PAS_ODO_Info6_ODO_Kappa
 * - \ref SIG_PAS_ODO_Info6_ODO_sHA
 * - \ref SIG_PAS_ODO_Info6_ODO_X
 * - \ref SIG_PAS_ODO_Info6_ODO_YawAngle
 * - \ref SIG_PAS_ODO_Info6_PAS_ODO_TimeStamp
 * - \ref SIG_PAS_ODO_Info6_PAS_ODO_Y
 *
 * @ingroup ECU_RPC
 * @{
 */

/**
 * Message PAS_ODO_Info6 configuration tuple.
 */
#define MSG_PAS_ODO_Info6                           0x1a5, 0, 32

/**
 * Message PAS_ODO_Info6 id.
 */
#define ID_PAS_ODO_Info6                            0x1a5

/**
 * Message PAS_ODO_Info6 extended id bit.
 */
#define EXT_PAS_ODO_Info6                           0

/**
 * Message PAS_ODO_Info6 Data Length Count.
 */
#define DLC_PAS_ODO_Info6                           32

/**
 * Message PAS_ODO_Info6 cycle time.
 */
#define CYCLE_PAS_ODO_Info6                         20

/**
 * Message PAS_ODO_Info6 fast cycle time.
 */
#define FAST_PAS_ODO_Info6                          0

/**
 * Initialise message PAS_ODO_Info6 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_PAS_ODO_Info6(buf) { \
	INITSIG_PAS_ODO_Info6_PAS_ODO_Info6_Checksum(buf); \
	INITSIG_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter(buf); \
	INITSIG_PAS_ODO_Info6_ODO_Kappa(buf); \
	INITSIG_PAS_ODO_Info6_ODO_sHA(buf); \
	INITSIG_PAS_ODO_Info6_ODO_X(buf); \
	INITSIG_PAS_ODO_Info6_ODO_YawAngle(buf); \
	INITSIG_PAS_ODO_Info6_PAS_ODO_TimeStamp(buf); \
	INITSIG_PAS_ODO_Info6_PAS_ODO_Y(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_ADAS_APA_PAS Message ADAS_APA_PAS (0x2e0)
 *
 * Sent by \ref ECU_ADC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ADAS_APA_PAS_ADAS_APA_PAS_Checksum
 * - \ref SIG_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter
 * - \ref SIG_ADAS_APA_PAS_PASFunctionRequest
 * - \ref SIG_ADAS_APA_PAS_PSLFunctionRequest
 * - \ref SIG_ADAS_APA_PAS_ParkingSlotIDSelected
 * - \ref SIG_ADAS_APA_PAS_ADASInfoAPAFunctionSt
 *
 * @ingroup ECU_ADC
 * @{
 */

/**
 * Message ADAS_APA_PAS configuration tuple.
 */
#define MSG_ADAS_APA_PAS                            0x2e0, 0, 16

/**
 * Message ADAS_APA_PAS id.
 */
#define ID_ADAS_APA_PAS                             0x2e0

/**
 * Message ADAS_APA_PAS extended id bit.
 */
#define EXT_ADAS_APA_PAS                            0

/**
 * Message ADAS_APA_PAS Data Length Count.
 */
#define DLC_ADAS_APA_PAS                            16

/**
 * Message ADAS_APA_PAS cycle time.
 */
#define CYCLE_ADAS_APA_PAS                          100

/**
 * Message ADAS_APA_PAS fast cycle time.
 */
#define FAST_ADAS_APA_PAS                           0

/**
 * Initialise message ADAS_APA_PAS buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ADAS_APA_PAS(buf) { \
	INITSIG_ADAS_APA_PAS_ADAS_APA_PAS_Checksum(buf); \
	INITSIG_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter(buf); \
	INITSIG_ADAS_APA_PAS_PASFunctionRequest(buf); \
	INITSIG_ADAS_APA_PAS_PSLFunctionRequest(buf); \
	INITSIG_ADAS_APA_PAS_ParkingSlotIDSelected(buf); \
	INITSIG_ADAS_APA_PAS_ADASInfoAPAFunctionSt(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_ESP_SpdInfoF Message ESP_SpdInfoF (0x127)
 *
 * Sent by \ref ECU_ADC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ESP_SpdInfoF_ESP_SpdInfoF_Checksum
 * - \ref SIG_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter
 * - \ref SIG_ESP_SpdInfoF_ESP_FLWheelSpd
 * - \ref SIG_ESP_SpdInfoF_ESP_FLWheelSpdVD
 * - \ref SIG_ESP_SpdInfoF_ESP_FRWheelSpd
 * - \ref SIG_ESP_SpdInfoF_ESP_FRWheelSpdVD
 * - \ref SIG_ESP_SpdInfoF_ESP_VehSpd
 * - \ref SIG_ESP_SpdInfoF_ESP_VheSpdVD
 *
 * @ingroup ECU_ADC
 * @{
 */

/**
 * Message ESP_SpdInfoF configuration tuple.
 */
#define MSG_ESP_SpdInfoF                            0x127, 0, 16

/**
 * Message ESP_SpdInfoF id.
 */
#define ID_ESP_SpdInfoF                             0x127

/**
 * Message ESP_SpdInfoF extended id bit.
 */
#define EXT_ESP_SpdInfoF                            0

/**
 * Message ESP_SpdInfoF Data Length Count.
 */
#define DLC_ESP_SpdInfoF                            16

/**
 * Message ESP_SpdInfoF cycle time.
 */
#define CYCLE_ESP_SpdInfoF                          10

/**
 * Message ESP_SpdInfoF fast cycle time.
 */
#define FAST_ESP_SpdInfoF                           0

/**
 * Initialise message ESP_SpdInfoF buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ESP_SpdInfoF(buf) { \
	INITSIG_ESP_SpdInfoF_ESP_SpdInfoF_Checksum(buf); \
	INITSIG_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter(buf); \
	INITSIG_ESP_SpdInfoF_ESP_FLWheelSpd(buf); \
	INITSIG_ESP_SpdInfoF_ESP_FLWheelSpdVD(buf); \
	INITSIG_ESP_SpdInfoF_ESP_FRWheelSpd(buf); \
	INITSIG_ESP_SpdInfoF_ESP_FRWheelSpdVD(buf); \
	INITSIG_ESP_SpdInfoF_ESP_VehSpd(buf); \
	INITSIG_ESP_SpdInfoF_ESP_VheSpdVD(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_ESP_SpdInfoR Message ESP_SpdInfoR (0x128)
 *
 * Sent by \ref ECU_ADC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ESP_SpdInfoR_ESP_SpdInfoR_Checksum
 * - \ref SIG_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter
 * - \ref SIG_ESP_SpdInfoR_ESP_RLWheelSpd
 * - \ref SIG_ESP_SpdInfoR_ESP_RLWheelSpdVD
 * - \ref SIG_ESP_SpdInfoR_ESP_RRWheelSpd
 * - \ref SIG_ESP_SpdInfoR_ESP_RRWheelSpdVD
 *
 * @ingroup ECU_ADC
 * @{
 */

/**
 * Message ESP_SpdInfoR configuration tuple.
 */
#define MSG_ESP_SpdInfoR                            0x128, 0, 16

/**
 * Message ESP_SpdInfoR id.
 */
#define ID_ESP_SpdInfoR                             0x128

/**
 * Message ESP_SpdInfoR extended id bit.
 */
#define EXT_ESP_SpdInfoR                            0

/**
 * Message ESP_SpdInfoR Data Length Count.
 */
#define DLC_ESP_SpdInfoR                            16

/**
 * Message ESP_SpdInfoR cycle time.
 */
#define CYCLE_ESP_SpdInfoR                          10

/**
 * Message ESP_SpdInfoR fast cycle time.
 */
#define FAST_ESP_SpdInfoR                           0

/**
 * Initialise message ESP_SpdInfoR buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ESP_SpdInfoR(buf) { \
	INITSIG_ESP_SpdInfoR_ESP_SpdInfoR_Checksum(buf); \
	INITSIG_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter(buf); \
	INITSIG_ESP_SpdInfoR_ESP_RLWheelSpd(buf); \
	INITSIG_ESP_SpdInfoR_ESP_RLWheelSpdVD(buf); \
	INITSIG_ESP_SpdInfoR_ESP_RRWheelSpd(buf); \
	INITSIG_ESP_SpdInfoR_ESP_RRWheelSpdVD(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_ESP_SpdEdges Message ESP_SpdEdges (0x12a)
 *
 * Sent by \ref ECU_ADC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ESP_SpdEdges_ESP_SpdEdges_Checksum
 * - \ref SIG_ESP_SpdEdges_ESP_SpdEdges_MsgCounter
 * - \ref SIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum
 * - \ref SIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum
 * - \ref SIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum
 * - \ref SIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum
 * - \ref SIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD
 * - \ref SIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD
 * - \ref SIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD
 * - \ref SIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD
 *
 * @ingroup ECU_ADC
 * @{
 */

/**
 * Message ESP_SpdEdges configuration tuple.
 */
#define MSG_ESP_SpdEdges                            0x12a, 0, 16

/**
 * Message ESP_SpdEdges id.
 */
#define ID_ESP_SpdEdges                             0x12a

/**
 * Message ESP_SpdEdges extended id bit.
 */
#define EXT_ESP_SpdEdges                            0

/**
 * Message ESP_SpdEdges Data Length Count.
 */
#define DLC_ESP_SpdEdges                            16

/**
 * Message ESP_SpdEdges cycle time.
 */
#define CYCLE_ESP_SpdEdges                          10

/**
 * Message ESP_SpdEdges fast cycle time.
 */
#define FAST_ESP_SpdEdges                           0

/**
 * Initialise message ESP_SpdEdges buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ESP_SpdEdges(buf) { \
	INITSIG_ESP_SpdEdges_ESP_SpdEdges_Checksum(buf); \
	INITSIG_ESP_SpdEdges_ESP_SpdEdges_MsgCounter(buf); \
	INITSIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum(buf); \
	INITSIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum(buf); \
	INITSIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum(buf); \
	INITSIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum(buf); \
	INITSIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD(buf); \
	INITSIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD(buf); \
	INITSIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD(buf); \
	INITSIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_ESP_Accel Message ESP_Accel (0x1a8)
 *
 * Sent by \ref ECU_ADC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_ESP_Accel_ESP_Accel_Checksum
 * - \ref SIG_ESP_Accel_ESP_Accel_MsgCounter
 * - \ref SIG_ESP_Accel_ESP_VehLongAccel
 * - \ref SIG_ESP_Accel_ESP_VehLateralAccel
 * - \ref SIG_ESP_Accel_ESP_VehLongAccelVD
 * - \ref SIG_ESP_Accel_ESP_VehLateralAccelVD
 * - \ref SIG_ESP_Accel_ESP_YAWRate
 * - \ref SIG_ESP_Accel_ESP_FLWheelRotatedDirectionVD
 * - \ref SIG_ESP_Accel_ESP_FRWheelRotatedDirection
 * - \ref SIG_ESP_Accel_ESP_FRWheelRotatedDirectionVD
 * - \ref SIG_ESP_Accel_ESP_RLWheelRotatedDirection
 * - \ref SIG_ESP_Accel_ESP_RLWheelRotatedDirectionVD
 * - \ref SIG_ESP_Accel_ESP_RRWheelRotatedDirection
 * - \ref SIG_ESP_Accel_ESP_RRWheelRotatedDirectionVD
 * - \ref SIG_ESP_Accel_ESP_YAWRateVD
 * - \ref SIG_ESP_Accel_ESP_FLWheelRotationDirection
 *
 * @ingroup ECU_ADC
 * @{
 */

/**
 * Message ESP_Accel configuration tuple.
 */
#define MSG_ESP_Accel                               0x1a8, 0, 16

/**
 * Message ESP_Accel id.
 */
#define ID_ESP_Accel                                0x1a8

/**
 * Message ESP_Accel extended id bit.
 */
#define EXT_ESP_Accel                               0

/**
 * Message ESP_Accel Data Length Count.
 */
#define DLC_ESP_Accel                               16

/**
 * Message ESP_Accel cycle time.
 */
#define CYCLE_ESP_Accel                             20

/**
 * Message ESP_Accel fast cycle time.
 */
#define FAST_ESP_Accel                              0

/**
 * Initialise message ESP_Accel buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_ESP_Accel(buf) { \
	INITSIG_ESP_Accel_ESP_Accel_Checksum(buf); \
	INITSIG_ESP_Accel_ESP_Accel_MsgCounter(buf); \
	INITSIG_ESP_Accel_ESP_VehLongAccel(buf); \
	INITSIG_ESP_Accel_ESP_VehLateralAccel(buf); \
	INITSIG_ESP_Accel_ESP_VehLongAccelVD(buf); \
	INITSIG_ESP_Accel_ESP_VehLateralAccelVD(buf); \
	INITSIG_ESP_Accel_ESP_YAWRate(buf); \
	INITSIG_ESP_Accel_ESP_FLWheelRotatedDirectionVD(buf); \
	INITSIG_ESP_Accel_ESP_FRWheelRotatedDirection(buf); \
	INITSIG_ESP_Accel_ESP_FRWheelRotatedDirectionVD(buf); \
	INITSIG_ESP_Accel_ESP_RLWheelRotatedDirection(buf); \
	INITSIG_ESP_Accel_ESP_RLWheelRotatedDirectionVD(buf); \
	INITSIG_ESP_Accel_ESP_RRWheelRotatedDirection(buf); \
	INITSIG_ESP_Accel_ESP_RRWheelRotatedDirectionVD(buf); \
	INITSIG_ESP_Accel_ESP_YAWRateVD(buf); \
	INITSIG_ESP_Accel_ESP_FLWheelRotationDirection(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_EPS_SASInfo Message EPS_SASInfo (0x115)
 *
 * Sent by \ref ECU_ADC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_EPS_SASInfo_EPS_SASInfo_Checksum
 * - \ref SIG_EPS_SASInfo_EPS_SASInfo_MsgCounter
 * - \ref SIG_EPS_SASInfo_EPS_SteeringAngleVD
 * - \ref SIG_EPS_SASInfo_EPS_SteeringAngle
 * - \ref SIG_EPS_SASInfo_EPS_SteeringAngleSpd
 *
 * @ingroup ECU_ADC
 * @{
 */

/**
 * Message EPS_SASInfo configuration tuple.
 */
#define MSG_EPS_SASInfo                             0x115, 0, 16

/**
 * Message EPS_SASInfo id.
 */
#define ID_EPS_SASInfo                              0x115

/**
 * Message EPS_SASInfo extended id bit.
 */
#define EXT_EPS_SASInfo                             0

/**
 * Message EPS_SASInfo Data Length Count.
 */
#define DLC_EPS_SASInfo                             16

/**
 * Message EPS_SASInfo cycle time.
 */
#define CYCLE_EPS_SASInfo                           10

/**
 * Message EPS_SASInfo fast cycle time.
 */
#define FAST_EPS_SASInfo                            0

/**
 * Initialise message EPS_SASInfo buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_EPS_SASInfo(buf) { \
	INITSIG_EPS_SASInfo_EPS_SASInfo_Checksum(buf); \
	INITSIG_EPS_SASInfo_EPS_SASInfo_MsgCounter(buf); \
	INITSIG_EPS_SASInfo_EPS_SteeringAngleVD(buf); \
	INITSIG_EPS_SASInfo_EPS_SteeringAngle(buf); \
	INITSIG_EPS_SASInfo_EPS_SteeringAngleSpd(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_VCU_SysSt Message VCU_SysSt (0x117)
 *
 * Sent by \ref ECU_ADC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_VCU_SysSt_VCU_SysSt_Checksum
 * - \ref SIG_VCU_SysSt_VCU_SysSt_MsgCounter
 * - \ref SIG_VCU_SysSt_VCU_EVSysReadySt
 * - \ref SIG_VCU_SysSt_VCU_CurrentGearLev
 * - \ref SIG_VCU_SysSt_VCU_ExterTemp
 * - \ref SIG_VCU_SysSt_VCU_ExterTempVD
 *
 * @ingroup ECU_ADC
 * @{
 */

/**
 * Message VCU_SysSt configuration tuple.
 */
#define MSG_VCU_SysSt                               0x117, 0, 16

/**
 * Message VCU_SysSt id.
 */
#define ID_VCU_SysSt                                0x117

/**
 * Message VCU_SysSt extended id bit.
 */
#define EXT_VCU_SysSt                               0

/**
 * Message VCU_SysSt Data Length Count.
 */
#define DLC_VCU_SysSt                               16

/**
 * Message VCU_SysSt cycle time.
 */
#define CYCLE_VCU_SysSt                             10

/**
 * Message VCU_SysSt fast cycle time.
 */
#define FAST_VCU_SysSt                              0

/**
 * Initialise message VCU_SysSt buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_VCU_SysSt(buf) { \
	INITSIG_VCU_SysSt_VCU_SysSt_Checksum(buf); \
	INITSIG_VCU_SysSt_VCU_SysSt_MsgCounter(buf); \
	INITSIG_VCU_SysSt_VCU_EVSysReadySt(buf); \
	INITSIG_VCU_SysSt_VCU_CurrentGearLev(buf); \
	INITSIG_VCU_SysSt_VCU_ExterTemp(buf); \
	INITSIG_VCU_SysSt_VCU_ExterTempVD(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_iBCM_PowerMode Message iBCM_PowerMode (0x224)
 *
 * Sent by \ref ECU_ADC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_iBCM_PowerMode_BCM_KeySt
 *
 * @ingroup ECU_ADC
 * @{
 */

/**
 * Message iBCM_PowerMode configuration tuple.
 */
#define MSG_iBCM_PowerMode                          0x224, 0, 8

/**
 * Message iBCM_PowerMode id.
 */
#define ID_iBCM_PowerMode                           0x224

/**
 * Message iBCM_PowerMode extended id bit.
 */
#define EXT_iBCM_PowerMode                          0

/**
 * Message iBCM_PowerMode Data Length Count.
 */
#define DLC_iBCM_PowerMode                          8

/**
 * Message iBCM_PowerMode cycle time.
 */
#define CYCLE_iBCM_PowerMode                        40

/**
 * Message iBCM_PowerMode fast cycle time.
 */
#define FAST_iBCM_PowerMode                         0

/**
 * Initialise message iBCM_PowerMode buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_iBCM_PowerMode(buf) { \
	INITSIG_iBCM_PowerMode_BCM_KeySt(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_FR_TimeSync Message FR_TimeSync (0x300)
 *
 * Sent by \ref ECU_ADC.
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_FR_TimeSync_SYNC_FC_Type
 * - \ref SIG_FR_TimeSync_SYNC_FC_CRC
 * - \ref SIG_FR_TimeSync_SYNC_FC_Sequencecnt
 * - \ref SIG_FR_TimeSync_SYNC_FC_TimeDomain
 * - \ref SIG_FR_TimeSync_SYNC_FC_OVS
 * - \ref SIG_FR_TimeSync_SYNC_FC_SGW
 * - \ref SIG_FR_TimeSync_SYNC_FC_Reserved
 * - \ref SIG_FR_TimeSync_SYNC_FC_SyncTime
 *
 * @ingroup ECU_ADC
 * @{
 */

/**
 * Message FR_TimeSync configuration tuple.
 */
#define MSG_FR_TimeSync                             0x300, 0, 8

/**
 * Message FR_TimeSync id.
 */
#define ID_FR_TimeSync                              0x300

/**
 * Message FR_TimeSync extended id bit.
 */
#define EXT_FR_TimeSync                             0

/**
 * Message FR_TimeSync Data Length Count.
 */
#define DLC_FR_TimeSync                             8

/**
 * Message FR_TimeSync cycle time.
 */
#define CYCLE_FR_TimeSync                           500

/**
 * Message FR_TimeSync fast cycle time.
 */
#define FAST_FR_TimeSync                            0

/**
 * Initialise message FR_TimeSync buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_FR_TimeSync(buf) { \
	INITSIG_FR_TimeSync_SYNC_FC_Type(buf); \
	INITSIG_FR_TimeSync_SYNC_FC_CRC(buf); \
	INITSIG_FR_TimeSync_SYNC_FC_Sequencecnt(buf); \
	INITSIG_FR_TimeSync_SYNC_FC_TimeDomain(buf); \
	INITSIG_FR_TimeSync_SYNC_FC_OVS(buf); \
	INITSIG_FR_TimeSync_SYNC_FC_SGW(buf); \
	INITSIG_FR_TimeSync_SYNC_FC_Reserved(buf); \
	INITSIG_FR_TimeSync_SYNC_FC_SyncTime(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum Signal Map_Objects_Signals_1_Checksum of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal Map_Objects_Signals_1_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum and \ref GET_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum instead.
 */
#define SIG_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum        1, 0, 7, 8

/**
 * Signal Map_Objects_Signals_1_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum      1, 0, 7, 8, 0

/**
 * Get signal Map_Objects_Signals_1_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_Objects_Signals_1_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_Objects_Signals_1_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum(buf) \
	SET_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum(buf, 0)

/**
 * Signal Map_Objects_Signals_1_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_Objects_Signals_1_Checksum raw initial value.
 */
#define START_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum      0

/**
 * Signal Map_Objects_Signals_1_Checksum raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum        0

/**
 * Signal Map_Objects_Signals_1_Checksum raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum        255

/**
 * Signal Map_Objects_Signals_1_Checksum raw offset value.
 */
#define OFF_Map_Objects_Signals_1_Map_Objects_Signals_1_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter Signal Map_Objects_Signals_1_MsgCounter of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal Map_Objects_Signals_1_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter and \ref GET_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter instead.
 */
#define SIG_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter        1, 0, 11, 4

/**
 * Signal Map_Objects_Signals_1_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal Map_Objects_Signals_1_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Map_Objects_Signals_1_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Map_Objects_Signals_1_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter(buf) \
	SET_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter(buf, 0)

/**
 * Signal Map_Objects_Signals_1_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_Objects_Signals_1_MsgCounter raw initial value.
 */
#define START_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter      0

/**
 * Signal Map_Objects_Signals_1_MsgCounter raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter        0

/**
 * Signal Map_Objects_Signals_1_MsgCounter raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter        15

/**
 * Signal Map_Objects_Signals_1_MsgCounter raw offset value.
 */
#define OFF_Map_Objects_Signals_1_Map_Objects_Signals_1_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj01P1X Signal MapObj01P1X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj01P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj01P1X and \ref GET_Map_Objects_Signals_1_MapObj01P1X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj01P1X        1, 0, 23, 10

/**
 * Signal MapObj01P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj01P1X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj01P1X      1, 0, 23, 10, 0

/**
 * Get signal MapObj01P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj01P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj01P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj01P1X(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj01P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj01P1X(buf) \
	SET_Map_Objects_Signals_1_MapObj01P1X(buf, 0)

/**
 * Signal MapObj01P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj01P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj01P1X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj01P1X      0

/**
 * Signal MapObj01P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj01P1X        0

/**
 * Signal MapObj01P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj01P1X        1022

/**
 * Signal MapObj01P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj01P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj01P1Y Signal MapObj01P1Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj01P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj01P1Y and \ref GET_Map_Objects_Signals_1_MapObj01P1Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj01P1Y        1, 0, 29, 10

/**
 * Signal MapObj01P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj01P1Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj01P1Y      1, 0, 29, 10, 0

/**
 * Get signal MapObj01P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj01P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj01P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj01P1Y(buf, val) { \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj01P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj01P1Y(buf) \
	SET_Map_Objects_Signals_1_MapObj01P1Y(buf, 0)

/**
 * Signal MapObj01P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj01P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj01P1Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj01P1Y      0

/**
 * Signal MapObj01P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj01P1Y        0

/**
 * Signal MapObj01P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj01P1Y        1022

/**
 * Signal MapObj01P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj01P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj01P2X Signal MapObj01P2X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj01P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj01P2X and \ref GET_Map_Objects_Signals_1_MapObj01P2X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj01P2X        1, 0, 35, 10

/**
 * Signal MapObj01P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj01P2X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj01P2X      1, 0, 35, 10, 0

/**
 * Get signal MapObj01P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj01P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj01P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj01P2X(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj01P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj01P2X(buf) \
	SET_Map_Objects_Signals_1_MapObj01P2X(buf, 0)

/**
 * Signal MapObj01P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj01P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj01P2X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj01P2X      0

/**
 * Signal MapObj01P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj01P2X        0

/**
 * Signal MapObj01P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj01P2X        1022

/**
 * Signal MapObj01P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj01P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj01P2Y Signal MapObj01P2Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj01P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj01P2Y and \ref GET_Map_Objects_Signals_1_MapObj01P2Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj01P2Y        1, 0, 41, 10

/**
 * Signal MapObj01P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj01P2Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj01P2Y      1, 0, 41, 10, 0

/**
 * Get signal MapObj01P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj01P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj01P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj01P2Y(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj01P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj01P2Y(buf) \
	SET_Map_Objects_Signals_1_MapObj01P2Y(buf, 0)

/**
 * Signal MapObj01P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj01P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj01P2Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj01P2Y      0

/**
 * Signal MapObj01P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj01P2Y        0

/**
 * Signal MapObj01P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj01P2Y        1022

/**
 * Signal MapObj01P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj01P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj01Prob Signal MapObj01Prob of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj01Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj01Prob and \ref GET_Map_Objects_Signals_1_MapObj01Prob instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj01Prob        1, 0, 63, 3

/**
 * Signal MapObj01Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj01Prob or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj01Prob      1, 0, 63, 3, 0

/**
 * Get signal MapObj01Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj01Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj01Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj01Prob(buf, val) { \
	buf[7] &= ~(0x07 << 5); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj01Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj01Prob(buf) \
	SET_Map_Objects_Signals_1_MapObj01Prob(buf, 0)

/**
 * Signal MapObj01Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj01Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj01Prob raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj01Prob      0

/**
 * Signal MapObj01Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj01Prob        0

/**
 * Signal MapObj01Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj01Prob        5

/**
 * Signal MapObj01Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj01Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj01Type Signal MapObj01Type of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj01Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj01Type and \ref GET_Map_Objects_Signals_1_MapObj01Type instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj01Type        1, 0, 60, 3

/**
 * Signal MapObj01Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj01Type or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj01Type      1, 0, 60, 3, 0

/**
 * Get signal MapObj01Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj01Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0) \
)

/**
 * Set signal MapObj01Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj01Type(buf, val) { \
	buf[7] &= ~(0x07 << 2); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal MapObj01Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj01Type(buf) \
	SET_Map_Objects_Signals_1_MapObj01Type(buf, 0)

/**
 * Signal MapObj01Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj01Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj01Type raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj01Type      0

/**
 * Signal MapObj01Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj01Type        0

/**
 * Signal MapObj01Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj01Type        7

/**
 * Signal MapObj01Type raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj01Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj01Height_Brake Signal MapObj01Height_Brake of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj01Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj01Height_Brake and \ref GET_Map_Objects_Signals_1_MapObj01Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj01Height_Brake        1, 0, 57, 2

/**
 * Signal MapObj01Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj01Height_Brake or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj01Height_Brake      1, 0, 57, 2, 0

/**
 * Get signal MapObj01Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj01Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 0) \
)

/**
 * Set signal MapObj01Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj01Height_Brake(buf, val) { \
	buf[7] &= ~(0x03 << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal MapObj01Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj01Height_Brake(buf) \
	SET_Map_Objects_Signals_1_MapObj01Height_Brake(buf, 0)

/**
 * Signal MapObj01Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj01Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj01Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj01Height_Brake      0

/**
 * Signal MapObj01Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj01Height_Brake        0

/**
 * Signal MapObj01Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj01Height_Brake        3

/**
 * Signal MapObj01Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj01Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj01Height_Warn Signal MapObj01Height_Warn of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj01Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj01Height_Warn and \ref GET_Map_Objects_Signals_1_MapObj01Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj01Height_Warn        1, 0, 71, 2

/**
 * Signal MapObj01Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj01Height_Warn or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj01Height_Warn      1, 0, 71, 2, 0

/**
 * Get signal MapObj01Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj01Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj01Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj01Height_Warn(buf, val) { \
	buf[8] &= ~(0x03 << 6); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj01Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj01Height_Warn(buf) \
	SET_Map_Objects_Signals_1_MapObj01Height_Warn(buf, 0)

/**
 * Signal MapObj01Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj01Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj01Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj01Height_Warn      0

/**
 * Signal MapObj01Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj01Height_Warn        0

/**
 * Signal MapObj01Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj01Height_Warn        3

/**
 * Signal MapObj01Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj01Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj01HeightProb Signal MapObj01HeightProb of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj01HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj01HeightProb and \ref GET_Map_Objects_Signals_1_MapObj01HeightProb instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj01HeightProb        1, 0, 69, 3

/**
 * Signal MapObj01HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj01HeightProb or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj01HeightProb      1, 0, 69, 3, 0

/**
 * Get signal MapObj01HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj01HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 3) & 0x07) << 0) \
)

/**
 * Set signal MapObj01HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj01HeightProb(buf, val) { \
	buf[8] &= ~(0x07 << 3); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal MapObj01HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj01HeightProb(buf) \
	SET_Map_Objects_Signals_1_MapObj01HeightProb(buf, 0)

/**
 * Signal MapObj01HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj01HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj01HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj01HeightProb      0

/**
 * Signal MapObj01HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj01HeightProb        0

/**
 * Signal MapObj01HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj01HeightProb        5

/**
 * Signal MapObj01HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj01HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj02P1X Signal MapObj02P1X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj02P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj02P1X and \ref GET_Map_Objects_Signals_1_MapObj02P1X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj02P1X        1, 0, 66, 10

/**
 * Signal MapObj02P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj02P1X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj02P1X      1, 0, 66, 10, 0

/**
 * Get signal MapObj02P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj02P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal MapObj02P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj02P1X(buf, val) { \
	buf[8] &= ~(0x07 << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[9] &= ~(0x7f << 1); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal MapObj02P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj02P1X(buf) \
	SET_Map_Objects_Signals_1_MapObj02P1X(buf, 0)

/**
 * Signal MapObj02P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj02P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj02P1X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj02P1X      0

/**
 * Signal MapObj02P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj02P1X        0

/**
 * Signal MapObj02P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj02P1X        1022

/**
 * Signal MapObj02P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj02P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj02P1Y Signal MapObj02P1Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj02P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj02P1Y and \ref GET_Map_Objects_Signals_1_MapObj02P1Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj02P1Y        1, 0, 72, 10

/**
 * Signal MapObj02P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj02P1Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj02P1Y      1, 0, 72, 10, 0

/**
 * Get signal MapObj02P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj02P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x01) << 9) \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj02P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj02P1Y(buf, val) { \
	buf[9] &= ~(0x01 << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x01) << 0; \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[11] &= ~(0x01 << 7); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj02P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj02P1Y(buf) \
	SET_Map_Objects_Signals_1_MapObj02P1Y(buf, 0)

/**
 * Signal MapObj02P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj02P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj02P1Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj02P1Y      0

/**
 * Signal MapObj02P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj02P1Y        0

/**
 * Signal MapObj02P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj02P1Y        1022

/**
 * Signal MapObj02P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj02P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj02P2X Signal MapObj02P2X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj02P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj02P2X and \ref GET_Map_Objects_Signals_1_MapObj02P2X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj02P2X        1, 0, 94, 10

/**
 * Signal MapObj02P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj02P2X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj02P2X      1, 0, 94, 10, 0

/**
 * Get signal MapObj02P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj02P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[11] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[12] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj02P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj02P2X(buf, val) { \
	buf[11] &= ~(0x7f << 0); \
	buf[11] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[12] &= ~(0x07 << 5); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj02P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj02P2X(buf) \
	SET_Map_Objects_Signals_1_MapObj02P2X(buf, 0)

/**
 * Signal MapObj02P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj02P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj02P2X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj02P2X      0

/**
 * Signal MapObj02P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj02P2X        0

/**
 * Signal MapObj02P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj02P2X        1022

/**
 * Signal MapObj02P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj02P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj02P2Y Signal MapObj02P2Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj02P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj02P2Y and \ref GET_Map_Objects_Signals_1_MapObj02P2Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj02P2Y        1, 0, 100, 10

/**
 * Signal MapObj02P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj02P2Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj02P2Y      1, 0, 100, 10, 0

/**
 * Get signal MapObj02P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj02P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal MapObj02P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj02P2Y(buf, val) { \
	buf[12] &= ~(0x1f << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[13] &= ~(0x1f << 3); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal MapObj02P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj02P2Y(buf) \
	SET_Map_Objects_Signals_1_MapObj02P2Y(buf, 0)

/**
 * Signal MapObj02P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj02P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj02P2Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj02P2Y      0

/**
 * Signal MapObj02P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj02P2Y        0

/**
 * Signal MapObj02P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj02P2Y        1022

/**
 * Signal MapObj02P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj02P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj02Prob Signal MapObj02Prob of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj02Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj02Prob and \ref GET_Map_Objects_Signals_1_MapObj02Prob instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj02Prob        1, 0, 106, 3

/**
 * Signal MapObj02Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj02Prob or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj02Prob      1, 0, 106, 3, 0

/**
 * Get signal MapObj02Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj02Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[13] >> 0) & 0x07) << 0) \
)

/**
 * Set signal MapObj02Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj02Prob(buf, val) { \
	buf[13] &= ~(0x07 << 0); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal MapObj02Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj02Prob(buf) \
	SET_Map_Objects_Signals_1_MapObj02Prob(buf, 0)

/**
 * Signal MapObj02Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj02Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj02Prob raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj02Prob      0

/**
 * Signal MapObj02Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj02Prob        0

/**
 * Signal MapObj02Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj02Prob        5

/**
 * Signal MapObj02Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj02Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj02Type Signal MapObj02Type of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj02Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj02Type and \ref GET_Map_Objects_Signals_1_MapObj02Type instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj02Type        1, 0, 119, 3

/**
 * Signal MapObj02Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj02Type or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj02Type      1, 0, 119, 3, 0

/**
 * Get signal MapObj02Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj02Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj02Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj02Type(buf, val) { \
	buf[14] &= ~(0x07 << 5); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj02Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj02Type(buf) \
	SET_Map_Objects_Signals_1_MapObj02Type(buf, 0)

/**
 * Signal MapObj02Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj02Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj02Type raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj02Type      0

/**
 * Signal MapObj02Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj02Type        0

/**
 * Signal MapObj02Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj02Type        7

/**
 * Signal MapObj02Type raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj02Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj02Height_Brake Signal MapObj02Height_Brake of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj02Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj02Height_Brake and \ref GET_Map_Objects_Signals_1_MapObj02Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj02Height_Brake        1, 0, 116, 2

/**
 * Signal MapObj02Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj02Height_Brake or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj02Height_Brake      1, 0, 116, 2, 0

/**
 * Get signal MapObj02Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj02Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 3) & 0x03) << 0) \
)

/**
 * Set signal MapObj02Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj02Height_Brake(buf, val) { \
	buf[14] &= ~(0x03 << 3); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal MapObj02Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj02Height_Brake(buf) \
	SET_Map_Objects_Signals_1_MapObj02Height_Brake(buf, 0)

/**
 * Signal MapObj02Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj02Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj02Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj02Height_Brake      0

/**
 * Signal MapObj02Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj02Height_Brake        0

/**
 * Signal MapObj02Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj02Height_Brake        3

/**
 * Signal MapObj02Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj02Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj02Height_Warn Signal MapObj02Height_Warn of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj02Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj02Height_Warn and \ref GET_Map_Objects_Signals_1_MapObj02Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj02Height_Warn        1, 0, 114, 2

/**
 * Signal MapObj02Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj02Height_Warn or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj02Height_Warn      1, 0, 114, 2, 0

/**
 * Get signal MapObj02Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj02Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 1) & 0x03) << 0) \
)

/**
 * Set signal MapObj02Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj02Height_Warn(buf, val) { \
	buf[14] &= ~(0x03 << 1); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal MapObj02Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj02Height_Warn(buf) \
	SET_Map_Objects_Signals_1_MapObj02Height_Warn(buf, 0)

/**
 * Signal MapObj02Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj02Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj02Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj02Height_Warn      0

/**
 * Signal MapObj02Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj02Height_Warn        0

/**
 * Signal MapObj02Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj02Height_Warn        3

/**
 * Signal MapObj02Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj02Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj02HeightProb Signal MapObj02HeightProb of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj02HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj02HeightProb and \ref GET_Map_Objects_Signals_1_MapObj02HeightProb instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj02HeightProb        1, 0, 112, 3

/**
 * Signal MapObj02HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj02HeightProb or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj02HeightProb      1, 0, 112, 3, 0

/**
 * Get signal MapObj02HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj02HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj02HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj02HeightProb(buf, val) { \
	buf[14] &= ~(0x01 << 0); \
	buf[14] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[15] &= ~(0x03 << 6); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj02HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj02HeightProb(buf) \
	SET_Map_Objects_Signals_1_MapObj02HeightProb(buf, 0)

/**
 * Signal MapObj02HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj02HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj02HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj02HeightProb      0

/**
 * Signal MapObj02HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj02HeightProb        0

/**
 * Signal MapObj02HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj02HeightProb        5

/**
 * Signal MapObj02HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj02HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj03P1X Signal MapObj03P1X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj03P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj03P1X and \ref GET_Map_Objects_Signals_1_MapObj03P1X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj03P1X        1, 0, 125, 10

/**
 * Signal MapObj03P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj03P1X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj03P1X      1, 0, 125, 10, 0

/**
 * Get signal MapObj03P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj03P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[15] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[16] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj03P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj03P1X(buf, val) { \
	buf[15] &= ~(0x3f << 0); \
	buf[15] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[16] &= ~(0x0f << 4); \
	buf[16] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj03P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj03P1X(buf) \
	SET_Map_Objects_Signals_1_MapObj03P1X(buf, 0)

/**
 * Signal MapObj03P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj03P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj03P1X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj03P1X      0

/**
 * Signal MapObj03P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj03P1X        0

/**
 * Signal MapObj03P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj03P1X        1022

/**
 * Signal MapObj03P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj03P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj03P1Y Signal MapObj03P1Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj03P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj03P1Y and \ref GET_Map_Objects_Signals_1_MapObj03P1Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj03P1Y        1, 0, 131, 10

/**
 * Signal MapObj03P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj03P1Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj03P1Y      1, 0, 131, 10, 0

/**
 * Get signal MapObj03P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj03P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[16] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[17] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj03P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj03P1Y(buf, val) { \
	buf[16] &= ~(0x0f << 0); \
	buf[16] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[17] &= ~(0x3f << 2); \
	buf[17] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj03P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj03P1Y(buf) \
	SET_Map_Objects_Signals_1_MapObj03P1Y(buf, 0)

/**
 * Signal MapObj03P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj03P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj03P1Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj03P1Y      0

/**
 * Signal MapObj03P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj03P1Y        0

/**
 * Signal MapObj03P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj03P1Y        1022

/**
 * Signal MapObj03P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj03P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj03P2X Signal MapObj03P2X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj03P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj03P2X and \ref GET_Map_Objects_Signals_1_MapObj03P2X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj03P2X        1, 0, 137, 10

/**
 * Signal MapObj03P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj03P2X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj03P2X      1, 0, 137, 10, 0

/**
 * Get signal MapObj03P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj03P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[17] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[18] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj03P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj03P2X(buf, val) { \
	buf[17] &= ~(0x03 << 0); \
	buf[17] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[18] &= ~(0xff << 0); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj03P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj03P2X(buf) \
	SET_Map_Objects_Signals_1_MapObj03P2X(buf, 0)

/**
 * Signal MapObj03P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj03P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj03P2X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj03P2X      0

/**
 * Signal MapObj03P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj03P2X        0

/**
 * Signal MapObj03P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj03P2X        1022

/**
 * Signal MapObj03P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj03P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj03P2Y Signal MapObj03P2Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj03P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj03P2Y and \ref GET_Map_Objects_Signals_1_MapObj03P2Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj03P2Y        1, 0, 159, 10

/**
 * Signal MapObj03P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj03P2Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj03P2Y      1, 0, 159, 10, 0

/**
 * Get signal MapObj03P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj03P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[19] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj03P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj03P2Y(buf, val) { \
	buf[19] &= ~(0xff << 0); \
	buf[19] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[20] &= ~(0x03 << 6); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj03P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj03P2Y(buf) \
	SET_Map_Objects_Signals_1_MapObj03P2Y(buf, 0)

/**
 * Signal MapObj03P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj03P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj03P2Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj03P2Y      0

/**
 * Signal MapObj03P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj03P2Y        0

/**
 * Signal MapObj03P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj03P2Y        1022

/**
 * Signal MapObj03P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj03P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj03Prob Signal MapObj03Prob of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj03Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj03Prob and \ref GET_Map_Objects_Signals_1_MapObj03Prob instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj03Prob        1, 0, 165, 3

/**
 * Signal MapObj03Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj03Prob or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj03Prob      1, 0, 165, 3, 0

/**
 * Get signal MapObj03Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj03Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[20] >> 3) & 0x07) << 0) \
)

/**
 * Set signal MapObj03Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj03Prob(buf, val) { \
	buf[20] &= ~(0x07 << 3); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal MapObj03Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj03Prob(buf) \
	SET_Map_Objects_Signals_1_MapObj03Prob(buf, 0)

/**
 * Signal MapObj03Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj03Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj03Prob raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj03Prob      0

/**
 * Signal MapObj03Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj03Prob        0

/**
 * Signal MapObj03Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj03Prob        5

/**
 * Signal MapObj03Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj03Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj03Type Signal MapObj03Type of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj03Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj03Type and \ref GET_Map_Objects_Signals_1_MapObj03Type instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj03Type        1, 0, 162, 3

/**
 * Signal MapObj03Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj03Type or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj03Type      1, 0, 162, 3, 0

/**
 * Get signal MapObj03Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj03Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[20] >> 0) & 0x07) << 0) \
)

/**
 * Set signal MapObj03Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj03Type(buf, val) { \
	buf[20] &= ~(0x07 << 0); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal MapObj03Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj03Type(buf) \
	SET_Map_Objects_Signals_1_MapObj03Type(buf, 0)

/**
 * Signal MapObj03Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj03Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj03Type raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj03Type      0

/**
 * Signal MapObj03Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj03Type        0

/**
 * Signal MapObj03Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj03Type        7

/**
 * Signal MapObj03Type raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj03Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj03Height_Brake Signal MapObj03Height_Brake of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj03Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj03Height_Brake and \ref GET_Map_Objects_Signals_1_MapObj03Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj03Height_Brake        1, 0, 175, 2

/**
 * Signal MapObj03Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj03Height_Brake or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj03Height_Brake      1, 0, 175, 2, 0

/**
 * Get signal MapObj03Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj03Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj03Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj03Height_Brake(buf, val) { \
	buf[21] &= ~(0x03 << 6); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj03Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj03Height_Brake(buf) \
	SET_Map_Objects_Signals_1_MapObj03Height_Brake(buf, 0)

/**
 * Signal MapObj03Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj03Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj03Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj03Height_Brake      0

/**
 * Signal MapObj03Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj03Height_Brake        0

/**
 * Signal MapObj03Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj03Height_Brake        3

/**
 * Signal MapObj03Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj03Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj03Height_Warn Signal MapObj03Height_Warn of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj03Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj03Height_Warn and \ref GET_Map_Objects_Signals_1_MapObj03Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj03Height_Warn        1, 0, 173, 2

/**
 * Signal MapObj03Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj03Height_Warn or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj03Height_Warn      1, 0, 173, 2, 0

/**
 * Get signal MapObj03Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj03Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 4) & 0x03) << 0) \
)

/**
 * Set signal MapObj03Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj03Height_Warn(buf, val) { \
	buf[21] &= ~(0x03 << 4); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal MapObj03Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj03Height_Warn(buf) \
	SET_Map_Objects_Signals_1_MapObj03Height_Warn(buf, 0)

/**
 * Signal MapObj03Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj03Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj03Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj03Height_Warn      0

/**
 * Signal MapObj03Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj03Height_Warn        0

/**
 * Signal MapObj03Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj03Height_Warn        3

/**
 * Signal MapObj03Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj03Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj03HeightProb Signal MapObj03HeightProb of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj03HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj03HeightProb and \ref GET_Map_Objects_Signals_1_MapObj03HeightProb instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj03HeightProb        1, 0, 171, 3

/**
 * Signal MapObj03HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj03HeightProb or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj03HeightProb      1, 0, 171, 3, 0

/**
 * Get signal MapObj03HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj03HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 1) & 0x07) << 0) \
)

/**
 * Set signal MapObj03HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj03HeightProb(buf, val) { \
	buf[21] &= ~(0x07 << 1); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal MapObj03HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj03HeightProb(buf) \
	SET_Map_Objects_Signals_1_MapObj03HeightProb(buf, 0)

/**
 * Signal MapObj03HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj03HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj03HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj03HeightProb      0

/**
 * Signal MapObj03HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj03HeightProb        0

/**
 * Signal MapObj03HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj03HeightProb        5

/**
 * Signal MapObj03HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj03HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj04P1X Signal MapObj04P1X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj04P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj04P1X and \ref GET_Map_Objects_Signals_1_MapObj04P1X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj04P1X        1, 0, 168, 10

/**
 * Signal MapObj04P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj04P1X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj04P1X      1, 0, 168, 10, 0

/**
 * Get signal MapObj04P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj04P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[21] >> 0) & 0x01) << 9) \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj04P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj04P1X(buf, val) { \
	buf[21] &= ~(0x01 << 0); \
	buf[21] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x01) << 0; \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[23] &= ~(0x01 << 7); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj04P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj04P1X(buf) \
	SET_Map_Objects_Signals_1_MapObj04P1X(buf, 0)

/**
 * Signal MapObj04P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj04P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj04P1X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj04P1X      0

/**
 * Signal MapObj04P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj04P1X        0

/**
 * Signal MapObj04P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj04P1X        1022

/**
 * Signal MapObj04P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj04P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj04P1Y Signal MapObj04P1Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj04P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj04P1Y and \ref GET_Map_Objects_Signals_1_MapObj04P1Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj04P1Y        1, 0, 190, 10

/**
 * Signal MapObj04P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj04P1Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj04P1Y      1, 0, 190, 10, 0

/**
 * Get signal MapObj04P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj04P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[23] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[24] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj04P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj04P1Y(buf, val) { \
	buf[23] &= ~(0x7f << 0); \
	buf[23] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[24] &= ~(0x07 << 5); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj04P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj04P1Y(buf) \
	SET_Map_Objects_Signals_1_MapObj04P1Y(buf, 0)

/**
 * Signal MapObj04P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj04P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj04P1Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj04P1Y      0

/**
 * Signal MapObj04P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj04P1Y        0

/**
 * Signal MapObj04P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj04P1Y        1022

/**
 * Signal MapObj04P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj04P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj04P2X Signal MapObj04P2X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj04P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj04P2X and \ref GET_Map_Objects_Signals_1_MapObj04P2X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj04P2X        1, 0, 196, 10

/**
 * Signal MapObj04P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj04P2X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj04P2X      1, 0, 196, 10, 0

/**
 * Get signal MapObj04P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj04P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[24] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[25] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal MapObj04P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj04P2X(buf, val) { \
	buf[24] &= ~(0x1f << 0); \
	buf[24] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[25] &= ~(0x1f << 3); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal MapObj04P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj04P2X(buf) \
	SET_Map_Objects_Signals_1_MapObj04P2X(buf, 0)

/**
 * Signal MapObj04P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj04P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj04P2X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj04P2X      0

/**
 * Signal MapObj04P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj04P2X        0

/**
 * Signal MapObj04P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj04P2X        1022

/**
 * Signal MapObj04P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj04P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj04P2Y Signal MapObj04P2Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj04P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj04P2Y and \ref GET_Map_Objects_Signals_1_MapObj04P2Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj04P2Y        1, 0, 202, 10

/**
 * Signal MapObj04P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj04P2Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj04P2Y      1, 0, 202, 10, 0

/**
 * Get signal MapObj04P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj04P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[26] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal MapObj04P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj04P2Y(buf, val) { \
	buf[25] &= ~(0x07 << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[26] &= ~(0x7f << 1); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal MapObj04P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj04P2Y(buf) \
	SET_Map_Objects_Signals_1_MapObj04P2Y(buf, 0)

/**
 * Signal MapObj04P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj04P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj04P2Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj04P2Y      0

/**
 * Signal MapObj04P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj04P2Y        0

/**
 * Signal MapObj04P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj04P2Y        1022

/**
 * Signal MapObj04P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj04P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj04Prob Signal MapObj04Prob of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj04Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj04Prob and \ref GET_Map_Objects_Signals_1_MapObj04Prob instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj04Prob        1, 0, 208, 3

/**
 * Signal MapObj04Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj04Prob or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj04Prob      1, 0, 208, 3, 0

/**
 * Get signal MapObj04Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj04Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[26] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[27] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj04Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj04Prob(buf, val) { \
	buf[26] &= ~(0x01 << 0); \
	buf[26] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[27] &= ~(0x03 << 6); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj04Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj04Prob(buf) \
	SET_Map_Objects_Signals_1_MapObj04Prob(buf, 0)

/**
 * Signal MapObj04Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj04Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj04Prob raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj04Prob      0

/**
 * Signal MapObj04Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj04Prob        0

/**
 * Signal MapObj04Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj04Prob        5

/**
 * Signal MapObj04Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj04Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj04Type Signal MapObj04Type of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj04Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj04Type and \ref GET_Map_Objects_Signals_1_MapObj04Type instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj04Type        1, 0, 221, 3

/**
 * Signal MapObj04Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj04Type or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj04Type      1, 0, 221, 3, 0

/**
 * Get signal MapObj04Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj04Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[27] >> 3) & 0x07) << 0) \
)

/**
 * Set signal MapObj04Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj04Type(buf, val) { \
	buf[27] &= ~(0x07 << 3); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal MapObj04Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj04Type(buf) \
	SET_Map_Objects_Signals_1_MapObj04Type(buf, 0)

/**
 * Signal MapObj04Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj04Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj04Type raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj04Type      0

/**
 * Signal MapObj04Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj04Type        0

/**
 * Signal MapObj04Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj04Type        7

/**
 * Signal MapObj04Type raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj04Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj04Height_Brake Signal MapObj04Height_Brake of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj04Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj04Height_Brake and \ref GET_Map_Objects_Signals_1_MapObj04Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj04Height_Brake        1, 0, 218, 2

/**
 * Signal MapObj04Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj04Height_Brake or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj04Height_Brake      1, 0, 218, 2, 0

/**
 * Get signal MapObj04Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj04Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[27] >> 1) & 0x03) << 0) \
)

/**
 * Set signal MapObj04Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj04Height_Brake(buf, val) { \
	buf[27] &= ~(0x03 << 1); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal MapObj04Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj04Height_Brake(buf) \
	SET_Map_Objects_Signals_1_MapObj04Height_Brake(buf, 0)

/**
 * Signal MapObj04Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj04Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj04Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj04Height_Brake      0

/**
 * Signal MapObj04Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj04Height_Brake        0

/**
 * Signal MapObj04Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj04Height_Brake        3

/**
 * Signal MapObj04Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj04Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj04Height_Warn Signal MapObj04Height_Warn of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj04Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj04Height_Warn and \ref GET_Map_Objects_Signals_1_MapObj04Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj04Height_Warn        1, 0, 216, 2

/**
 * Signal MapObj04Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj04Height_Warn or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj04Height_Warn      1, 0, 216, 2, 0

/**
 * Get signal MapObj04Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj04Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[27] >> 0) & 0x01) << 1) \
	| (uint8_t)(+(uint8_t)((buf[28] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj04Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj04Height_Warn(buf, val) { \
	buf[27] &= ~(0x01 << 0); \
	buf[27] |= (((uint8_t)(val) >> 1) & 0x01) << 0; \
	buf[28] &= ~(0x01 << 7); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj04Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj04Height_Warn(buf) \
	SET_Map_Objects_Signals_1_MapObj04Height_Warn(buf, 0)

/**
 * Signal MapObj04Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj04Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj04Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj04Height_Warn      0

/**
 * Signal MapObj04Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj04Height_Warn        0

/**
 * Signal MapObj04Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj04Height_Warn        3

/**
 * Signal MapObj04Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj04Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj04HeightProb Signal MapObj04HeightProb of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj04HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj04HeightProb and \ref GET_Map_Objects_Signals_1_MapObj04HeightProb instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj04HeightProb        1, 0, 230, 3

/**
 * Signal MapObj04HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj04HeightProb or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj04HeightProb      1, 0, 230, 3, 0

/**
 * Get signal MapObj04HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj04HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[28] >> 4) & 0x07) << 0) \
)

/**
 * Set signal MapObj04HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj04HeightProb(buf, val) { \
	buf[28] &= ~(0x07 << 4); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal MapObj04HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj04HeightProb(buf) \
	SET_Map_Objects_Signals_1_MapObj04HeightProb(buf, 0)

/**
 * Signal MapObj04HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj04HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj04HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj04HeightProb      0

/**
 * Signal MapObj04HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj04HeightProb        0

/**
 * Signal MapObj04HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj04HeightProb        5

/**
 * Signal MapObj04HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj04HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj05P1X Signal MapObj05P1X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj05P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj05P1X and \ref GET_Map_Objects_Signals_1_MapObj05P1X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj05P1X        1, 0, 227, 10

/**
 * Signal MapObj05P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj05P1X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj05P1X      1, 0, 227, 10, 0

/**
 * Get signal MapObj05P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj05P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[28] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj05P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj05P1X(buf, val) { \
	buf[28] &= ~(0x0f << 0); \
	buf[28] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[29] &= ~(0x3f << 2); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj05P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj05P1X(buf) \
	SET_Map_Objects_Signals_1_MapObj05P1X(buf, 0)

/**
 * Signal MapObj05P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj05P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj05P1X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj05P1X      0

/**
 * Signal MapObj05P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj05P1X        0

/**
 * Signal MapObj05P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj05P1X        1022

/**
 * Signal MapObj05P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj05P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj05P1Y Signal MapObj05P1Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj05P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj05P1Y and \ref GET_Map_Objects_Signals_1_MapObj05P1Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj05P1Y        1, 0, 233, 10

/**
 * Signal MapObj05P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj05P1Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj05P1Y      1, 0, 233, 10, 0

/**
 * Get signal MapObj05P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj05P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[29] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[30] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj05P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj05P1Y(buf, val) { \
	buf[29] &= ~(0x03 << 0); \
	buf[29] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[30] &= ~(0xff << 0); \
	buf[30] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj05P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj05P1Y(buf) \
	SET_Map_Objects_Signals_1_MapObj05P1Y(buf, 0)

/**
 * Signal MapObj05P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj05P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj05P1Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj05P1Y      0

/**
 * Signal MapObj05P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj05P1Y        0

/**
 * Signal MapObj05P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj05P1Y        1022

/**
 * Signal MapObj05P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj05P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj05P2X Signal MapObj05P2X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj05P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj05P2X and \ref GET_Map_Objects_Signals_1_MapObj05P2X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj05P2X        1, 0, 255, 10

/**
 * Signal MapObj05P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj05P2X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj05P2X      1, 0, 255, 10, 0

/**
 * Get signal MapObj05P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj05P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[31] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[32] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj05P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj05P2X(buf, val) { \
	buf[31] &= ~(0xff << 0); \
	buf[31] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[32] &= ~(0x03 << 6); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj05P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj05P2X(buf) \
	SET_Map_Objects_Signals_1_MapObj05P2X(buf, 0)

/**
 * Signal MapObj05P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj05P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj05P2X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj05P2X      0

/**
 * Signal MapObj05P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj05P2X        0

/**
 * Signal MapObj05P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj05P2X        1022

/**
 * Signal MapObj05P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj05P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj05P2Y Signal MapObj05P2Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj05P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj05P2Y and \ref GET_Map_Objects_Signals_1_MapObj05P2Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj05P2Y        1, 0, 261, 10

/**
 * Signal MapObj05P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj05P2Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj05P2Y      1, 0, 261, 10, 0

/**
 * Get signal MapObj05P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj05P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[32] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[33] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj05P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj05P2Y(buf, val) { \
	buf[32] &= ~(0x3f << 0); \
	buf[32] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[33] &= ~(0x0f << 4); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj05P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj05P2Y(buf) \
	SET_Map_Objects_Signals_1_MapObj05P2Y(buf, 0)

/**
 * Signal MapObj05P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj05P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj05P2Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj05P2Y      0

/**
 * Signal MapObj05P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj05P2Y        0

/**
 * Signal MapObj05P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj05P2Y        1022

/**
 * Signal MapObj05P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj05P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj05Prob Signal MapObj05Prob of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj05Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj05Prob and \ref GET_Map_Objects_Signals_1_MapObj05Prob instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj05Prob        1, 0, 267, 3

/**
 * Signal MapObj05Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj05Prob or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj05Prob      1, 0, 267, 3, 0

/**
 * Get signal MapObj05Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj05Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[33] >> 1) & 0x07) << 0) \
)

/**
 * Set signal MapObj05Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj05Prob(buf, val) { \
	buf[33] &= ~(0x07 << 1); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal MapObj05Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj05Prob(buf) \
	SET_Map_Objects_Signals_1_MapObj05Prob(buf, 0)

/**
 * Signal MapObj05Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj05Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj05Prob raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj05Prob      0

/**
 * Signal MapObj05Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj05Prob        0

/**
 * Signal MapObj05Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj05Prob        5

/**
 * Signal MapObj05Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj05Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj05Type Signal MapObj05Type of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj05Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj05Type and \ref GET_Map_Objects_Signals_1_MapObj05Type instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj05Type        1, 0, 264, 3

/**
 * Signal MapObj05Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj05Type or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj05Type      1, 0, 264, 3, 0

/**
 * Get signal MapObj05Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj05Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[33] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[34] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj05Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj05Type(buf, val) { \
	buf[33] &= ~(0x01 << 0); \
	buf[33] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[34] &= ~(0x03 << 6); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj05Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj05Type(buf) \
	SET_Map_Objects_Signals_1_MapObj05Type(buf, 0)

/**
 * Signal MapObj05Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj05Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj05Type raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj05Type      0

/**
 * Signal MapObj05Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj05Type        0

/**
 * Signal MapObj05Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj05Type        7

/**
 * Signal MapObj05Type raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj05Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj05Height_Brake Signal MapObj05Height_Brake of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj05Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj05Height_Brake and \ref GET_Map_Objects_Signals_1_MapObj05Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj05Height_Brake        1, 0, 277, 2

/**
 * Signal MapObj05Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj05Height_Brake or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj05Height_Brake      1, 0, 277, 2, 0

/**
 * Get signal MapObj05Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj05Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[34] >> 4) & 0x03) << 0) \
)

/**
 * Set signal MapObj05Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj05Height_Brake(buf, val) { \
	buf[34] &= ~(0x03 << 4); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal MapObj05Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj05Height_Brake(buf) \
	SET_Map_Objects_Signals_1_MapObj05Height_Brake(buf, 0)

/**
 * Signal MapObj05Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj05Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj05Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj05Height_Brake      0

/**
 * Signal MapObj05Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj05Height_Brake        0

/**
 * Signal MapObj05Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj05Height_Brake        3

/**
 * Signal MapObj05Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj05Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj05Height_Warn Signal MapObj05Height_Warn of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj05Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj05Height_Warn and \ref GET_Map_Objects_Signals_1_MapObj05Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj05Height_Warn        1, 0, 275, 2

/**
 * Signal MapObj05Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj05Height_Warn or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj05Height_Warn      1, 0, 275, 2, 0

/**
 * Get signal MapObj05Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj05Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[34] >> 2) & 0x03) << 0) \
)

/**
 * Set signal MapObj05Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj05Height_Warn(buf, val) { \
	buf[34] &= ~(0x03 << 2); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal MapObj05Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj05Height_Warn(buf) \
	SET_Map_Objects_Signals_1_MapObj05Height_Warn(buf, 0)

/**
 * Signal MapObj05Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj05Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj05Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj05Height_Warn      0

/**
 * Signal MapObj05Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj05Height_Warn        0

/**
 * Signal MapObj05Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj05Height_Warn        3

/**
 * Signal MapObj05Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj05Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj05HeightProb Signal MapObj05HeightProb of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj05HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj05HeightProb and \ref GET_Map_Objects_Signals_1_MapObj05HeightProb instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj05HeightProb        1, 0, 273, 3

/**
 * Signal MapObj05HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj05HeightProb or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj05HeightProb      1, 0, 273, 3, 0

/**
 * Get signal MapObj05HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj05HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[34] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[35] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj05HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj05HeightProb(buf, val) { \
	buf[34] &= ~(0x03 << 0); \
	buf[34] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[35] &= ~(0x01 << 7); \
	buf[35] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj05HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj05HeightProb(buf) \
	SET_Map_Objects_Signals_1_MapObj05HeightProb(buf, 0)

/**
 * Signal MapObj05HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj05HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj05HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj05HeightProb      0

/**
 * Signal MapObj05HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj05HeightProb        0

/**
 * Signal MapObj05HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj05HeightProb        5

/**
 * Signal MapObj05HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj05HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj06P1X Signal MapObj06P1X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj06P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj06P1X and \ref GET_Map_Objects_Signals_1_MapObj06P1X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj06P1X        1, 0, 286, 10

/**
 * Signal MapObj06P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj06P1X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj06P1X      1, 0, 286, 10, 0

/**
 * Get signal MapObj06P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj06P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[35] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[36] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj06P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj06P1X(buf, val) { \
	buf[35] &= ~(0x7f << 0); \
	buf[35] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[36] &= ~(0x07 << 5); \
	buf[36] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj06P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj06P1X(buf) \
	SET_Map_Objects_Signals_1_MapObj06P1X(buf, 0)

/**
 * Signal MapObj06P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj06P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj06P1X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj06P1X      0

/**
 * Signal MapObj06P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj06P1X        0

/**
 * Signal MapObj06P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj06P1X        1022

/**
 * Signal MapObj06P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj06P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj06P1Y Signal MapObj06P1Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj06P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj06P1Y and \ref GET_Map_Objects_Signals_1_MapObj06P1Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj06P1Y        1, 0, 292, 10

/**
 * Signal MapObj06P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj06P1Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj06P1Y      1, 0, 292, 10, 0

/**
 * Get signal MapObj06P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj06P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[36] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[37] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal MapObj06P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj06P1Y(buf, val) { \
	buf[36] &= ~(0x1f << 0); \
	buf[36] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[37] &= ~(0x1f << 3); \
	buf[37] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal MapObj06P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj06P1Y(buf) \
	SET_Map_Objects_Signals_1_MapObj06P1Y(buf, 0)

/**
 * Signal MapObj06P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj06P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj06P1Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj06P1Y      0

/**
 * Signal MapObj06P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj06P1Y        0

/**
 * Signal MapObj06P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj06P1Y        1022

/**
 * Signal MapObj06P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj06P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj06P2X Signal MapObj06P2X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj06P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj06P2X and \ref GET_Map_Objects_Signals_1_MapObj06P2X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj06P2X        1, 0, 298, 10

/**
 * Signal MapObj06P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj06P2X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj06P2X      1, 0, 298, 10, 0

/**
 * Get signal MapObj06P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj06P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[37] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[38] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal MapObj06P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj06P2X(buf, val) { \
	buf[37] &= ~(0x07 << 0); \
	buf[37] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[38] &= ~(0x7f << 1); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal MapObj06P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj06P2X(buf) \
	SET_Map_Objects_Signals_1_MapObj06P2X(buf, 0)

/**
 * Signal MapObj06P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj06P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj06P2X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj06P2X      0

/**
 * Signal MapObj06P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj06P2X        0

/**
 * Signal MapObj06P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj06P2X        1022

/**
 * Signal MapObj06P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj06P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj06P2Y Signal MapObj06P2Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj06P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj06P2Y and \ref GET_Map_Objects_Signals_1_MapObj06P2Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj06P2Y        1, 0, 304, 10

/**
 * Signal MapObj06P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj06P2Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj06P2Y      1, 0, 304, 10, 0

/**
 * Get signal MapObj06P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj06P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[38] >> 0) & 0x01) << 9) \
	| (uint16_t)(+(uint16_t)((buf[39] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[40] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj06P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj06P2Y(buf, val) { \
	buf[38] &= ~(0x01 << 0); \
	buf[38] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x01) << 0; \
	buf[39] &= ~(0xff << 0); \
	buf[39] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[40] &= ~(0x01 << 7); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj06P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj06P2Y(buf) \
	SET_Map_Objects_Signals_1_MapObj06P2Y(buf, 0)

/**
 * Signal MapObj06P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj06P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj06P2Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj06P2Y      0

/**
 * Signal MapObj06P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj06P2Y        0

/**
 * Signal MapObj06P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj06P2Y        1022

/**
 * Signal MapObj06P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj06P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj06Prob Signal MapObj06Prob of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj06Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj06Prob and \ref GET_Map_Objects_Signals_1_MapObj06Prob instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj06Prob        1, 0, 326, 3

/**
 * Signal MapObj06Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj06Prob or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj06Prob      1, 0, 326, 3, 0

/**
 * Get signal MapObj06Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj06Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[40] >> 4) & 0x07) << 0) \
)

/**
 * Set signal MapObj06Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj06Prob(buf, val) { \
	buf[40] &= ~(0x07 << 4); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal MapObj06Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj06Prob(buf) \
	SET_Map_Objects_Signals_1_MapObj06Prob(buf, 0)

/**
 * Signal MapObj06Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj06Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj06Prob raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj06Prob      0

/**
 * Signal MapObj06Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj06Prob        0

/**
 * Signal MapObj06Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj06Prob        5

/**
 * Signal MapObj06Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj06Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj06Type Signal MapObj06Type of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj06Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj06Type and \ref GET_Map_Objects_Signals_1_MapObj06Type instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj06Type        1, 0, 323, 3

/**
 * Signal MapObj06Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj06Type or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj06Type      1, 0, 323, 3, 0

/**
 * Get signal MapObj06Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj06Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[40] >> 1) & 0x07) << 0) \
)

/**
 * Set signal MapObj06Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj06Type(buf, val) { \
	buf[40] &= ~(0x07 << 1); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal MapObj06Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj06Type(buf) \
	SET_Map_Objects_Signals_1_MapObj06Type(buf, 0)

/**
 * Signal MapObj06Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj06Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj06Type raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj06Type      0

/**
 * Signal MapObj06Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj06Type        0

/**
 * Signal MapObj06Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj06Type        7

/**
 * Signal MapObj06Type raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj06Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj06Height_Brake Signal MapObj06Height_Brake of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj06Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj06Height_Brake and \ref GET_Map_Objects_Signals_1_MapObj06Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj06Height_Brake        1, 0, 320, 2

/**
 * Signal MapObj06Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj06Height_Brake or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj06Height_Brake      1, 0, 320, 2, 0

/**
 * Get signal MapObj06Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj06Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[40] >> 0) & 0x01) << 1) \
	| (uint8_t)(+(uint8_t)((buf[41] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj06Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj06Height_Brake(buf, val) { \
	buf[40] &= ~(0x01 << 0); \
	buf[40] |= (((uint8_t)(val) >> 1) & 0x01) << 0; \
	buf[41] &= ~(0x01 << 7); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj06Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj06Height_Brake(buf) \
	SET_Map_Objects_Signals_1_MapObj06Height_Brake(buf, 0)

/**
 * Signal MapObj06Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj06Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj06Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj06Height_Brake      0

/**
 * Signal MapObj06Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj06Height_Brake        0

/**
 * Signal MapObj06Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj06Height_Brake        3

/**
 * Signal MapObj06Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj06Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj06Height_Warn Signal MapObj06Height_Warn of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj06Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj06Height_Warn and \ref GET_Map_Objects_Signals_1_MapObj06Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj06Height_Warn        1, 0, 334, 2

/**
 * Signal MapObj06Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj06Height_Warn or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj06Height_Warn      1, 0, 334, 2, 0

/**
 * Get signal MapObj06Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj06Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[41] >> 5) & 0x03) << 0) \
)

/**
 * Set signal MapObj06Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj06Height_Warn(buf, val) { \
	buf[41] &= ~(0x03 << 5); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0x03) << 5; \
}

/**
 * Set signal MapObj06Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj06Height_Warn(buf) \
	SET_Map_Objects_Signals_1_MapObj06Height_Warn(buf, 0)

/**
 * Signal MapObj06Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj06Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj06Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj06Height_Warn      0

/**
 * Signal MapObj06Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj06Height_Warn        0

/**
 * Signal MapObj06Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj06Height_Warn        3

/**
 * Signal MapObj06Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj06Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj06HeightProb Signal MapObj06HeightProb of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj06HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj06HeightProb and \ref GET_Map_Objects_Signals_1_MapObj06HeightProb instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj06HeightProb        1, 0, 332, 3

/**
 * Signal MapObj06HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj06HeightProb or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj06HeightProb      1, 0, 332, 3, 0

/**
 * Get signal MapObj06HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj06HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[41] >> 2) & 0x07) << 0) \
)

/**
 * Set signal MapObj06HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj06HeightProb(buf, val) { \
	buf[41] &= ~(0x07 << 2); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal MapObj06HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj06HeightProb(buf) \
	SET_Map_Objects_Signals_1_MapObj06HeightProb(buf, 0)

/**
 * Signal MapObj06HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj06HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj06HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj06HeightProb      0

/**
 * Signal MapObj06HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj06HeightProb        0

/**
 * Signal MapObj06HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj06HeightProb        5

/**
 * Signal MapObj06HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj06HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj07P1X Signal MapObj07P1X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj07P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj07P1X and \ref GET_Map_Objects_Signals_1_MapObj07P1X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj07P1X        1, 0, 329, 10

/**
 * Signal MapObj07P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj07P1X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj07P1X      1, 0, 329, 10, 0

/**
 * Get signal MapObj07P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj07P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[41] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[42] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj07P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj07P1X(buf, val) { \
	buf[41] &= ~(0x03 << 0); \
	buf[41] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[42] &= ~(0xff << 0); \
	buf[42] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj07P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj07P1X(buf) \
	SET_Map_Objects_Signals_1_MapObj07P1X(buf, 0)

/**
 * Signal MapObj07P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj07P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj07P1X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj07P1X      0

/**
 * Signal MapObj07P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj07P1X        0

/**
 * Signal MapObj07P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj07P1X        1022

/**
 * Signal MapObj07P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj07P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj07P1Y Signal MapObj07P1Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj07P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj07P1Y and \ref GET_Map_Objects_Signals_1_MapObj07P1Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj07P1Y        1, 0, 351, 10

/**
 * Signal MapObj07P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj07P1Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj07P1Y      1, 0, 351, 10, 0

/**
 * Get signal MapObj07P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj07P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[43] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[44] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj07P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj07P1Y(buf, val) { \
	buf[43] &= ~(0xff << 0); \
	buf[43] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[44] &= ~(0x03 << 6); \
	buf[44] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj07P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj07P1Y(buf) \
	SET_Map_Objects_Signals_1_MapObj07P1Y(buf, 0)

/**
 * Signal MapObj07P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj07P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj07P1Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj07P1Y      0

/**
 * Signal MapObj07P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj07P1Y        0

/**
 * Signal MapObj07P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj07P1Y        1022

/**
 * Signal MapObj07P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj07P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj07P2X Signal MapObj07P2X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj07P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj07P2X and \ref GET_Map_Objects_Signals_1_MapObj07P2X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj07P2X        1, 0, 357, 10

/**
 * Signal MapObj07P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj07P2X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj07P2X      1, 0, 357, 10, 0

/**
 * Get signal MapObj07P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj07P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[44] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[45] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj07P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj07P2X(buf, val) { \
	buf[44] &= ~(0x3f << 0); \
	buf[44] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[45] &= ~(0x0f << 4); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj07P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj07P2X(buf) \
	SET_Map_Objects_Signals_1_MapObj07P2X(buf, 0)

/**
 * Signal MapObj07P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj07P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj07P2X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj07P2X      0

/**
 * Signal MapObj07P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj07P2X        0

/**
 * Signal MapObj07P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj07P2X        1022

/**
 * Signal MapObj07P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj07P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj07P2Y Signal MapObj07P2Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj07P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj07P2Y and \ref GET_Map_Objects_Signals_1_MapObj07P2Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj07P2Y        1, 0, 363, 10

/**
 * Signal MapObj07P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj07P2Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj07P2Y      1, 0, 363, 10, 0

/**
 * Get signal MapObj07P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj07P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[45] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[46] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj07P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj07P2Y(buf, val) { \
	buf[45] &= ~(0x0f << 0); \
	buf[45] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[46] &= ~(0x3f << 2); \
	buf[46] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj07P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj07P2Y(buf) \
	SET_Map_Objects_Signals_1_MapObj07P2Y(buf, 0)

/**
 * Signal MapObj07P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj07P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj07P2Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj07P2Y      0

/**
 * Signal MapObj07P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj07P2Y        0

/**
 * Signal MapObj07P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj07P2Y        1022

/**
 * Signal MapObj07P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj07P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj07Prob Signal MapObj07Prob of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj07Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj07Prob and \ref GET_Map_Objects_Signals_1_MapObj07Prob instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj07Prob        1, 0, 369, 3

/**
 * Signal MapObj07Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj07Prob or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj07Prob      1, 0, 369, 3, 0

/**
 * Get signal MapObj07Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj07Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[46] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[47] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj07Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj07Prob(buf, val) { \
	buf[46] &= ~(0x03 << 0); \
	buf[46] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[47] &= ~(0x01 << 7); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj07Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj07Prob(buf) \
	SET_Map_Objects_Signals_1_MapObj07Prob(buf, 0)

/**
 * Signal MapObj07Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj07Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj07Prob raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj07Prob      0

/**
 * Signal MapObj07Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj07Prob        0

/**
 * Signal MapObj07Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj07Prob        5

/**
 * Signal MapObj07Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj07Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj07Type Signal MapObj07Type of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj07Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj07Type and \ref GET_Map_Objects_Signals_1_MapObj07Type instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj07Type        1, 0, 382, 3

/**
 * Signal MapObj07Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj07Type or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj07Type      1, 0, 382, 3, 0

/**
 * Get signal MapObj07Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj07Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[47] >> 4) & 0x07) << 0) \
)

/**
 * Set signal MapObj07Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj07Type(buf, val) { \
	buf[47] &= ~(0x07 << 4); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal MapObj07Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj07Type(buf) \
	SET_Map_Objects_Signals_1_MapObj07Type(buf, 0)

/**
 * Signal MapObj07Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj07Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj07Type raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj07Type      0

/**
 * Signal MapObj07Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj07Type        0

/**
 * Signal MapObj07Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj07Type        7

/**
 * Signal MapObj07Type raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj07Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj07Height_Brake Signal MapObj07Height_Brake of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj07Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj07Height_Brake and \ref GET_Map_Objects_Signals_1_MapObj07Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj07Height_Brake        1, 0, 379, 2

/**
 * Signal MapObj07Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj07Height_Brake or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj07Height_Brake      1, 0, 379, 2, 0

/**
 * Get signal MapObj07Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj07Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[47] >> 2) & 0x03) << 0) \
)

/**
 * Set signal MapObj07Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj07Height_Brake(buf, val) { \
	buf[47] &= ~(0x03 << 2); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal MapObj07Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj07Height_Brake(buf) \
	SET_Map_Objects_Signals_1_MapObj07Height_Brake(buf, 0)

/**
 * Signal MapObj07Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj07Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj07Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj07Height_Brake      0

/**
 * Signal MapObj07Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj07Height_Brake        0

/**
 * Signal MapObj07Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj07Height_Brake        3

/**
 * Signal MapObj07Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj07Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj07Height_Warn Signal MapObj07Height_Warn of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj07Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj07Height_Warn and \ref GET_Map_Objects_Signals_1_MapObj07Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj07Height_Warn        1, 0, 377, 2

/**
 * Signal MapObj07Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj07Height_Warn or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj07Height_Warn      1, 0, 377, 2, 0

/**
 * Get signal MapObj07Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj07Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[47] >> 0) & 0x03) << 0) \
)

/**
 * Set signal MapObj07Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj07Height_Warn(buf, val) { \
	buf[47] &= ~(0x03 << 0); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal MapObj07Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj07Height_Warn(buf) \
	SET_Map_Objects_Signals_1_MapObj07Height_Warn(buf, 0)

/**
 * Signal MapObj07Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj07Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj07Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj07Height_Warn      0

/**
 * Signal MapObj07Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj07Height_Warn        0

/**
 * Signal MapObj07Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj07Height_Warn        3

/**
 * Signal MapObj07Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj07Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj07HeightProb Signal MapObj07HeightProb of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj07HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj07HeightProb and \ref GET_Map_Objects_Signals_1_MapObj07HeightProb instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj07HeightProb        1, 0, 391, 3

/**
 * Signal MapObj07HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj07HeightProb or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj07HeightProb      1, 0, 391, 3, 0

/**
 * Get signal MapObj07HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj07HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[48] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj07HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj07HeightProb(buf, val) { \
	buf[48] &= ~(0x07 << 5); \
	buf[48] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj07HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj07HeightProb(buf) \
	SET_Map_Objects_Signals_1_MapObj07HeightProb(buf, 0)

/**
 * Signal MapObj07HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj07HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj07HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj07HeightProb      0

/**
 * Signal MapObj07HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj07HeightProb        0

/**
 * Signal MapObj07HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj07HeightProb        5

/**
 * Signal MapObj07HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj07HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj08P1X Signal MapObj08P1X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj08P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj08P1X and \ref GET_Map_Objects_Signals_1_MapObj08P1X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj08P1X        1, 0, 388, 10

/**
 * Signal MapObj08P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj08P1X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj08P1X      1, 0, 388, 10, 0

/**
 * Get signal MapObj08P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj08P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[48] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[49] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal MapObj08P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj08P1X(buf, val) { \
	buf[48] &= ~(0x1f << 0); \
	buf[48] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[49] &= ~(0x1f << 3); \
	buf[49] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal MapObj08P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj08P1X(buf) \
	SET_Map_Objects_Signals_1_MapObj08P1X(buf, 0)

/**
 * Signal MapObj08P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj08P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj08P1X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj08P1X      0

/**
 * Signal MapObj08P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj08P1X        0

/**
 * Signal MapObj08P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj08P1X        1022

/**
 * Signal MapObj08P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj08P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj08P1Y Signal MapObj08P1Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj08P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj08P1Y and \ref GET_Map_Objects_Signals_1_MapObj08P1Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj08P1Y        1, 0, 394, 10

/**
 * Signal MapObj08P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj08P1Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj08P1Y      1, 0, 394, 10, 0

/**
 * Get signal MapObj08P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj08P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[49] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[50] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal MapObj08P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj08P1Y(buf, val) { \
	buf[49] &= ~(0x07 << 0); \
	buf[49] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[50] &= ~(0x7f << 1); \
	buf[50] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal MapObj08P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj08P1Y(buf) \
	SET_Map_Objects_Signals_1_MapObj08P1Y(buf, 0)

/**
 * Signal MapObj08P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj08P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj08P1Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj08P1Y      0

/**
 * Signal MapObj08P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj08P1Y        0

/**
 * Signal MapObj08P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj08P1Y        1022

/**
 * Signal MapObj08P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj08P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj08P2X Signal MapObj08P2X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj08P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj08P2X and \ref GET_Map_Objects_Signals_1_MapObj08P2X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj08P2X        1, 0, 400, 10

/**
 * Signal MapObj08P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj08P2X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj08P2X      1, 0, 400, 10, 0

/**
 * Get signal MapObj08P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj08P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[50] >> 0) & 0x01) << 9) \
	| (uint16_t)(+(uint16_t)((buf[51] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[52] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj08P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj08P2X(buf, val) { \
	buf[50] &= ~(0x01 << 0); \
	buf[50] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x01) << 0; \
	buf[51] &= ~(0xff << 0); \
	buf[51] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[52] &= ~(0x01 << 7); \
	buf[52] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj08P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj08P2X(buf) \
	SET_Map_Objects_Signals_1_MapObj08P2X(buf, 0)

/**
 * Signal MapObj08P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj08P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj08P2X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj08P2X      0

/**
 * Signal MapObj08P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj08P2X        0

/**
 * Signal MapObj08P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj08P2X        1022

/**
 * Signal MapObj08P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj08P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj08P2Y Signal MapObj08P2Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj08P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj08P2Y and \ref GET_Map_Objects_Signals_1_MapObj08P2Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj08P2Y        1, 0, 422, 10

/**
 * Signal MapObj08P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj08P2Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj08P2Y      1, 0, 422, 10, 0

/**
 * Get signal MapObj08P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj08P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[52] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[53] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj08P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj08P2Y(buf, val) { \
	buf[52] &= ~(0x7f << 0); \
	buf[52] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[53] &= ~(0x07 << 5); \
	buf[53] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj08P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj08P2Y(buf) \
	SET_Map_Objects_Signals_1_MapObj08P2Y(buf, 0)

/**
 * Signal MapObj08P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj08P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj08P2Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj08P2Y      0

/**
 * Signal MapObj08P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj08P2Y        0

/**
 * Signal MapObj08P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj08P2Y        1022

/**
 * Signal MapObj08P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj08P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj08Prob Signal MapObj08Prob of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj08Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj08Prob and \ref GET_Map_Objects_Signals_1_MapObj08Prob instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj08Prob        1, 0, 428, 3

/**
 * Signal MapObj08Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj08Prob or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj08Prob      1, 0, 428, 3, 0

/**
 * Get signal MapObj08Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj08Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[53] >> 2) & 0x07) << 0) \
)

/**
 * Set signal MapObj08Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj08Prob(buf, val) { \
	buf[53] &= ~(0x07 << 2); \
	buf[53] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal MapObj08Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj08Prob(buf) \
	SET_Map_Objects_Signals_1_MapObj08Prob(buf, 0)

/**
 * Signal MapObj08Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj08Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj08Prob raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj08Prob      0

/**
 * Signal MapObj08Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj08Prob        0

/**
 * Signal MapObj08Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj08Prob        5

/**
 * Signal MapObj08Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj08Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj08Type Signal MapObj08Type of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj08Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj08Type and \ref GET_Map_Objects_Signals_1_MapObj08Type instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj08Type        1, 0, 425, 3

/**
 * Signal MapObj08Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj08Type or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj08Type      1, 0, 425, 3, 0

/**
 * Get signal MapObj08Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj08Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[53] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[54] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj08Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj08Type(buf, val) { \
	buf[53] &= ~(0x03 << 0); \
	buf[53] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[54] &= ~(0x01 << 7); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj08Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj08Type(buf) \
	SET_Map_Objects_Signals_1_MapObj08Type(buf, 0)

/**
 * Signal MapObj08Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj08Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj08Type raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj08Type      0

/**
 * Signal MapObj08Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj08Type        0

/**
 * Signal MapObj08Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj08Type        7

/**
 * Signal MapObj08Type raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj08Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj08Height_Brake Signal MapObj08Height_Brake of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj08Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj08Height_Brake and \ref GET_Map_Objects_Signals_1_MapObj08Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj08Height_Brake        1, 0, 438, 2

/**
 * Signal MapObj08Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj08Height_Brake or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj08Height_Brake      1, 0, 438, 2, 0

/**
 * Get signal MapObj08Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj08Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[54] >> 5) & 0x03) << 0) \
)

/**
 * Set signal MapObj08Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj08Height_Brake(buf, val) { \
	buf[54] &= ~(0x03 << 5); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x03) << 5; \
}

/**
 * Set signal MapObj08Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj08Height_Brake(buf) \
	SET_Map_Objects_Signals_1_MapObj08Height_Brake(buf, 0)

/**
 * Signal MapObj08Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj08Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj08Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj08Height_Brake      0

/**
 * Signal MapObj08Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj08Height_Brake        0

/**
 * Signal MapObj08Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj08Height_Brake        3

/**
 * Signal MapObj08Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj08Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj08Height_Warn Signal MapObj08Height_Warn of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj08Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj08Height_Warn and \ref GET_Map_Objects_Signals_1_MapObj08Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj08Height_Warn        1, 0, 436, 2

/**
 * Signal MapObj08Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj08Height_Warn or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj08Height_Warn      1, 0, 436, 2, 0

/**
 * Get signal MapObj08Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj08Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[54] >> 3) & 0x03) << 0) \
)

/**
 * Set signal MapObj08Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj08Height_Warn(buf, val) { \
	buf[54] &= ~(0x03 << 3); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal MapObj08Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj08Height_Warn(buf) \
	SET_Map_Objects_Signals_1_MapObj08Height_Warn(buf, 0)

/**
 * Signal MapObj08Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj08Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj08Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj08Height_Warn      0

/**
 * Signal MapObj08Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj08Height_Warn        0

/**
 * Signal MapObj08Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj08Height_Warn        3

/**
 * Signal MapObj08Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj08Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj08HeightProb Signal MapObj08HeightProb of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj08HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj08HeightProb and \ref GET_Map_Objects_Signals_1_MapObj08HeightProb instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj08HeightProb        1, 0, 434, 3

/**
 * Signal MapObj08HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj08HeightProb or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj08HeightProb      1, 0, 434, 3, 0

/**
 * Get signal MapObj08HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj08HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[54] >> 0) & 0x07) << 0) \
)

/**
 * Set signal MapObj08HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj08HeightProb(buf, val) { \
	buf[54] &= ~(0x07 << 0); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal MapObj08HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj08HeightProb(buf) \
	SET_Map_Objects_Signals_1_MapObj08HeightProb(buf, 0)

/**
 * Signal MapObj08HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj08HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj08HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj08HeightProb      0

/**
 * Signal MapObj08HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj08HeightProb        0

/**
 * Signal MapObj08HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj08HeightProb        5

/**
 * Signal MapObj08HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj08HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj09P1X Signal MapObj09P1X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj09P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj09P1X and \ref GET_Map_Objects_Signals_1_MapObj09P1X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj09P1X        1, 0, 447, 10

/**
 * Signal MapObj09P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj09P1X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj09P1X      1, 0, 447, 10, 0

/**
 * Get signal MapObj09P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj09P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[55] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[56] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj09P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj09P1X(buf, val) { \
	buf[55] &= ~(0xff << 0); \
	buf[55] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[56] &= ~(0x03 << 6); \
	buf[56] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj09P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj09P1X(buf) \
	SET_Map_Objects_Signals_1_MapObj09P1X(buf, 0)

/**
 * Signal MapObj09P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj09P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj09P1X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj09P1X      0

/**
 * Signal MapObj09P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj09P1X        0

/**
 * Signal MapObj09P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj09P1X        1022

/**
 * Signal MapObj09P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj09P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj09P1Y Signal MapObj09P1Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj09P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj09P1Y and \ref GET_Map_Objects_Signals_1_MapObj09P1Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj09P1Y        1, 0, 453, 10

/**
 * Signal MapObj09P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj09P1Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj09P1Y      1, 0, 453, 10, 0

/**
 * Get signal MapObj09P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj09P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[56] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[57] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj09P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj09P1Y(buf, val) { \
	buf[56] &= ~(0x3f << 0); \
	buf[56] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[57] &= ~(0x0f << 4); \
	buf[57] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj09P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj09P1Y(buf) \
	SET_Map_Objects_Signals_1_MapObj09P1Y(buf, 0)

/**
 * Signal MapObj09P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj09P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj09P1Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj09P1Y      0

/**
 * Signal MapObj09P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj09P1Y        0

/**
 * Signal MapObj09P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj09P1Y        1022

/**
 * Signal MapObj09P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj09P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj09P2X Signal MapObj09P2X of Message Map_Objects_Signals_1 (0x191)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj09P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj09P2X and \ref GET_Map_Objects_Signals_1_MapObj09P2X instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj09P2X        1, 0, 459, 10

/**
 * Signal MapObj09P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj09P2X or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj09P2X      1, 0, 459, 10, 0

/**
 * Get signal MapObj09P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj09P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[57] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[58] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj09P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj09P2X(buf, val) { \
	buf[57] &= ~(0x0f << 0); \
	buf[57] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[58] &= ~(0x3f << 2); \
	buf[58] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj09P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj09P2X(buf) \
	SET_Map_Objects_Signals_1_MapObj09P2X(buf, 0)

/**
 * Signal MapObj09P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj09P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj09P2X raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj09P2X      0

/**
 * Signal MapObj09P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj09P2X        0

/**
 * Signal MapObj09P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj09P2X        1022

/**
 * Signal MapObj09P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj09P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj09P2Y Signal MapObj09P2Y of Message Map_Objects_Signals_1 (0x191)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj09P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj09P2Y and \ref GET_Map_Objects_Signals_1_MapObj09P2Y instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj09P2Y        1, 0, 465, 10

/**
 * Signal MapObj09P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj09P2Y or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj09P2Y      1, 0, 465, 10, 0

/**
 * Get signal MapObj09P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj09P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[58] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[59] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj09P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj09P2Y(buf, val) { \
	buf[58] &= ~(0x03 << 0); \
	buf[58] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[59] &= ~(0xff << 0); \
	buf[59] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj09P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj09P2Y(buf) \
	SET_Map_Objects_Signals_1_MapObj09P2Y(buf, 0)

/**
 * Signal MapObj09P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj09P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj09P2Y raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj09P2Y      0

/**
 * Signal MapObj09P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj09P2Y        0

/**
 * Signal MapObj09P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj09P2Y        1022

/**
 * Signal MapObj09P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj09P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj09Prob Signal MapObj09Prob of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj09Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj09Prob and \ref GET_Map_Objects_Signals_1_MapObj09Prob instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj09Prob        1, 0, 487, 3

/**
 * Signal MapObj09Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj09Prob or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj09Prob      1, 0, 487, 3, 0

/**
 * Get signal MapObj09Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj09Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[60] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj09Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj09Prob(buf, val) { \
	buf[60] &= ~(0x07 << 5); \
	buf[60] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj09Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj09Prob(buf) \
	SET_Map_Objects_Signals_1_MapObj09Prob(buf, 0)

/**
 * Signal MapObj09Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj09Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj09Prob raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj09Prob      0

/**
 * Signal MapObj09Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj09Prob        0

/**
 * Signal MapObj09Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj09Prob        5

/**
 * Signal MapObj09Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj09Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj09Type Signal MapObj09Type of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj09Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj09Type and \ref GET_Map_Objects_Signals_1_MapObj09Type instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj09Type        1, 0, 484, 3

/**
 * Signal MapObj09Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj09Type or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj09Type      1, 0, 484, 3, 0

/**
 * Get signal MapObj09Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj09Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[60] >> 2) & 0x07) << 0) \
)

/**
 * Set signal MapObj09Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj09Type(buf, val) { \
	buf[60] &= ~(0x07 << 2); \
	buf[60] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal MapObj09Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj09Type(buf) \
	SET_Map_Objects_Signals_1_MapObj09Type(buf, 0)

/**
 * Signal MapObj09Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj09Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj09Type raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj09Type      0

/**
 * Signal MapObj09Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj09Type        0

/**
 * Signal MapObj09Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj09Type        7

/**
 * Signal MapObj09Type raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj09Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj09Height_Brake Signal MapObj09Height_Brake of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj09Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj09Height_Brake and \ref GET_Map_Objects_Signals_1_MapObj09Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj09Height_Brake        1, 0, 481, 2

/**
 * Signal MapObj09Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj09Height_Brake or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj09Height_Brake      1, 0, 481, 2, 0

/**
 * Get signal MapObj09Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj09Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[60] >> 0) & 0x03) << 0) \
)

/**
 * Set signal MapObj09Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj09Height_Brake(buf, val) { \
	buf[60] &= ~(0x03 << 0); \
	buf[60] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal MapObj09Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj09Height_Brake(buf) \
	SET_Map_Objects_Signals_1_MapObj09Height_Brake(buf, 0)

/**
 * Signal MapObj09Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj09Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj09Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj09Height_Brake      0

/**
 * Signal MapObj09Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj09Height_Brake        0

/**
 * Signal MapObj09Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj09Height_Brake        3

/**
 * Signal MapObj09Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj09Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj09Height_Warn Signal MapObj09Height_Warn of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj09Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj09Height_Warn and \ref GET_Map_Objects_Signals_1_MapObj09Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj09Height_Warn        1, 0, 495, 2

/**
 * Signal MapObj09Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj09Height_Warn or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj09Height_Warn      1, 0, 495, 2, 0

/**
 * Get signal MapObj09Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj09Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[61] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj09Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj09Height_Warn(buf, val) { \
	buf[61] &= ~(0x03 << 6); \
	buf[61] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj09Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj09Height_Warn(buf) \
	SET_Map_Objects_Signals_1_MapObj09Height_Warn(buf, 0)

/**
 * Signal MapObj09Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj09Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj09Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj09Height_Warn      0

/**
 * Signal MapObj09Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj09Height_Warn        0

/**
 * Signal MapObj09Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj09Height_Warn        3

/**
 * Signal MapObj09Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj09Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_1_MapObj09HeightProb Signal MapObj09HeightProb of Message Map_Objects_Signals_1 (0x191)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_1
 * @{
 */

/**
 * Signal MapObj09HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_1_MapObj09HeightProb and \ref GET_Map_Objects_Signals_1_MapObj09HeightProb instead.
 */
#define SIG_Map_Objects_Signals_1_MapObj09HeightProb        1, 0, 493, 3

/**
 * Signal MapObj09HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_1_MapObj09HeightProb or \ref INIT_Map_Objects_Signals_1 instead.
 */
#define SETUP_Map_Objects_Signals_1_MapObj09HeightProb      1, 0, 493, 3, 0

/**
 * Get signal MapObj09HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_1_MapObj09HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[61] >> 3) & 0x07) << 0) \
)

/**
 * Set signal MapObj09HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_1_MapObj09HeightProb(buf, val) { \
	buf[61] &= ~(0x07 << 3); \
	buf[61] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal MapObj09HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_1_MapObj09HeightProb(buf) \
	SET_Map_Objects_Signals_1_MapObj09HeightProb(buf, 0)

/**
 * Signal MapObj09HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_1_MapObj09HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj09HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_1_MapObj09HeightProb      0

/**
 * Signal MapObj09HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_1_MapObj09HeightProb        0

/**
 * Signal MapObj09HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_1_MapObj09HeightProb        5

/**
 * Signal MapObj09HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_1_MapObj09HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum Signal Map_Objects_Signals_2_Checksum of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal Map_Objects_Signals_2_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum and \ref GET_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum instead.
 */
#define SIG_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum        1, 0, 7, 8

/**
 * Signal Map_Objects_Signals_2_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum      1, 0, 7, 8, 0

/**
 * Get signal Map_Objects_Signals_2_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_Objects_Signals_2_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_Objects_Signals_2_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum(buf) \
	SET_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum(buf, 0)

/**
 * Signal Map_Objects_Signals_2_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_Objects_Signals_2_Checksum raw initial value.
 */
#define START_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum      0

/**
 * Signal Map_Objects_Signals_2_Checksum raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum        0

/**
 * Signal Map_Objects_Signals_2_Checksum raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum        255

/**
 * Signal Map_Objects_Signals_2_Checksum raw offset value.
 */
#define OFF_Map_Objects_Signals_2_Map_Objects_Signals_2_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter Signal Map_Objects_Signals_2_MsgCounter of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal Map_Objects_Signals_2_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter and \ref GET_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter instead.
 */
#define SIG_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter        1, 0, 11, 4

/**
 * Signal Map_Objects_Signals_2_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal Map_Objects_Signals_2_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Map_Objects_Signals_2_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Map_Objects_Signals_2_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter(buf) \
	SET_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter(buf, 0)

/**
 * Signal Map_Objects_Signals_2_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_Objects_Signals_2_MsgCounter raw initial value.
 */
#define START_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter      0

/**
 * Signal Map_Objects_Signals_2_MsgCounter raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter        0

/**
 * Signal Map_Objects_Signals_2_MsgCounter raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter        15

/**
 * Signal Map_Objects_Signals_2_MsgCounter raw offset value.
 */
#define OFF_Map_Objects_Signals_2_Map_Objects_Signals_2_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj10P1X Signal MapObj10P1X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj10P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj10P1X and \ref GET_Map_Objects_Signals_2_MapObj10P1X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj10P1X        1, 0, 23, 10

/**
 * Signal MapObj10P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj10P1X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj10P1X      1, 0, 23, 10, 0

/**
 * Get signal MapObj10P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj10P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj10P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj10P1X(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj10P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj10P1X(buf) \
	SET_Map_Objects_Signals_2_MapObj10P1X(buf, 0)

/**
 * Signal MapObj10P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj10P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj10P1X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj10P1X      0

/**
 * Signal MapObj10P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj10P1X        0

/**
 * Signal MapObj10P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj10P1X        1022

/**
 * Signal MapObj10P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj10P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj10P1Y Signal MapObj10P1Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj10P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj10P1Y and \ref GET_Map_Objects_Signals_2_MapObj10P1Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj10P1Y        1, 0, 29, 10

/**
 * Signal MapObj10P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj10P1Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj10P1Y      1, 0, 29, 10, 0

/**
 * Get signal MapObj10P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj10P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj10P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj10P1Y(buf, val) { \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj10P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj10P1Y(buf) \
	SET_Map_Objects_Signals_2_MapObj10P1Y(buf, 0)

/**
 * Signal MapObj10P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj10P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj10P1Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj10P1Y      0

/**
 * Signal MapObj10P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj10P1Y        0

/**
 * Signal MapObj10P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj10P1Y        1022

/**
 * Signal MapObj10P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj10P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj10P2X Signal MapObj10P2X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj10P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj10P2X and \ref GET_Map_Objects_Signals_2_MapObj10P2X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj10P2X        1, 0, 35, 10

/**
 * Signal MapObj10P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj10P2X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj10P2X      1, 0, 35, 10, 0

/**
 * Get signal MapObj10P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj10P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj10P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj10P2X(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj10P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj10P2X(buf) \
	SET_Map_Objects_Signals_2_MapObj10P2X(buf, 0)

/**
 * Signal MapObj10P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj10P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj10P2X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj10P2X      0

/**
 * Signal MapObj10P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj10P2X        0

/**
 * Signal MapObj10P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj10P2X        1022

/**
 * Signal MapObj10P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj10P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj10P2Y Signal MapObj10P2Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj10P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj10P2Y and \ref GET_Map_Objects_Signals_2_MapObj10P2Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj10P2Y        1, 0, 41, 10

/**
 * Signal MapObj10P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj10P2Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj10P2Y      1, 0, 41, 10, 0

/**
 * Get signal MapObj10P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj10P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj10P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj10P2Y(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj10P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj10P2Y(buf) \
	SET_Map_Objects_Signals_2_MapObj10P2Y(buf, 0)

/**
 * Signal MapObj10P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj10P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj10P2Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj10P2Y      0

/**
 * Signal MapObj10P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj10P2Y        0

/**
 * Signal MapObj10P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj10P2Y        1022

/**
 * Signal MapObj10P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj10P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj10Prob Signal MapObj10Prob of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj10Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj10Prob and \ref GET_Map_Objects_Signals_2_MapObj10Prob instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj10Prob        1, 0, 63, 3

/**
 * Signal MapObj10Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj10Prob or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj10Prob      1, 0, 63, 3, 0

/**
 * Get signal MapObj10Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj10Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj10Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj10Prob(buf, val) { \
	buf[7] &= ~(0x07 << 5); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj10Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj10Prob(buf) \
	SET_Map_Objects_Signals_2_MapObj10Prob(buf, 0)

/**
 * Signal MapObj10Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj10Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj10Prob raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj10Prob      0

/**
 * Signal MapObj10Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj10Prob        0

/**
 * Signal MapObj10Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj10Prob        5

/**
 * Signal MapObj10Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj10Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj10Type Signal MapObj10Type of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj10Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj10Type and \ref GET_Map_Objects_Signals_2_MapObj10Type instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj10Type        1, 0, 60, 3

/**
 * Signal MapObj10Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj10Type or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj10Type      1, 0, 60, 3, 0

/**
 * Get signal MapObj10Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj10Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0) \
)

/**
 * Set signal MapObj10Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj10Type(buf, val) { \
	buf[7] &= ~(0x07 << 2); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal MapObj10Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj10Type(buf) \
	SET_Map_Objects_Signals_2_MapObj10Type(buf, 0)

/**
 * Signal MapObj10Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj10Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj10Type raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj10Type      0

/**
 * Signal MapObj10Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj10Type        0

/**
 * Signal MapObj10Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj10Type        7

/**
 * Signal MapObj10Type raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj10Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj10Height_Brake Signal MapObj10Height_Brake of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj10Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj10Height_Brake and \ref GET_Map_Objects_Signals_2_MapObj10Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj10Height_Brake        1, 0, 57, 2

/**
 * Signal MapObj10Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj10Height_Brake or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj10Height_Brake      1, 0, 57, 2, 0

/**
 * Get signal MapObj10Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj10Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 0) \
)

/**
 * Set signal MapObj10Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj10Height_Brake(buf, val) { \
	buf[7] &= ~(0x03 << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal MapObj10Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj10Height_Brake(buf) \
	SET_Map_Objects_Signals_2_MapObj10Height_Brake(buf, 0)

/**
 * Signal MapObj10Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj10Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj10Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj10Height_Brake      0

/**
 * Signal MapObj10Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj10Height_Brake        0

/**
 * Signal MapObj10Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj10Height_Brake        3

/**
 * Signal MapObj10Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj10Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj10Height_Warn Signal MapObj10Height_Warn of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj10Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj10Height_Warn and \ref GET_Map_Objects_Signals_2_MapObj10Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj10Height_Warn        1, 0, 71, 2

/**
 * Signal MapObj10Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj10Height_Warn or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj10Height_Warn      1, 0, 71, 2, 0

/**
 * Get signal MapObj10Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj10Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj10Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj10Height_Warn(buf, val) { \
	buf[8] &= ~(0x03 << 6); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj10Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj10Height_Warn(buf) \
	SET_Map_Objects_Signals_2_MapObj10Height_Warn(buf, 0)

/**
 * Signal MapObj10Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj10Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj10Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj10Height_Warn      0

/**
 * Signal MapObj10Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj10Height_Warn        0

/**
 * Signal MapObj10Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj10Height_Warn        3

/**
 * Signal MapObj10Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj10Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj10HeightProb Signal MapObj10HeightProb of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj10HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj10HeightProb and \ref GET_Map_Objects_Signals_2_MapObj10HeightProb instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj10HeightProb        1, 0, 69, 3

/**
 * Signal MapObj10HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj10HeightProb or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj10HeightProb      1, 0, 69, 3, 0

/**
 * Get signal MapObj10HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj10HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 3) & 0x07) << 0) \
)

/**
 * Set signal MapObj10HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj10HeightProb(buf, val) { \
	buf[8] &= ~(0x07 << 3); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal MapObj10HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj10HeightProb(buf) \
	SET_Map_Objects_Signals_2_MapObj10HeightProb(buf, 0)

/**
 * Signal MapObj10HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj10HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj10HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj10HeightProb      0

/**
 * Signal MapObj10HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj10HeightProb        0

/**
 * Signal MapObj10HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj10HeightProb        5

/**
 * Signal MapObj10HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj10HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj11P1X Signal MapObj11P1X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj11P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj11P1X and \ref GET_Map_Objects_Signals_2_MapObj11P1X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj11P1X        1, 0, 66, 10

/**
 * Signal MapObj11P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj11P1X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj11P1X      1, 0, 66, 10, 0

/**
 * Get signal MapObj11P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj11P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal MapObj11P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj11P1X(buf, val) { \
	buf[8] &= ~(0x07 << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[9] &= ~(0x7f << 1); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal MapObj11P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj11P1X(buf) \
	SET_Map_Objects_Signals_2_MapObj11P1X(buf, 0)

/**
 * Signal MapObj11P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj11P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj11P1X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj11P1X      0

/**
 * Signal MapObj11P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj11P1X        0

/**
 * Signal MapObj11P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj11P1X        1022

/**
 * Signal MapObj11P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj11P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj11P1Y Signal MapObj11P1Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj11P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj11P1Y and \ref GET_Map_Objects_Signals_2_MapObj11P1Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj11P1Y        1, 0, 72, 10

/**
 * Signal MapObj11P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj11P1Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj11P1Y      1, 0, 72, 10, 0

/**
 * Get signal MapObj11P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj11P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x01) << 9) \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj11P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj11P1Y(buf, val) { \
	buf[9] &= ~(0x01 << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x01) << 0; \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[11] &= ~(0x01 << 7); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj11P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj11P1Y(buf) \
	SET_Map_Objects_Signals_2_MapObj11P1Y(buf, 0)

/**
 * Signal MapObj11P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj11P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj11P1Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj11P1Y      0

/**
 * Signal MapObj11P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj11P1Y        0

/**
 * Signal MapObj11P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj11P1Y        1022

/**
 * Signal MapObj11P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj11P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj11P2X Signal MapObj11P2X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj11P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj11P2X and \ref GET_Map_Objects_Signals_2_MapObj11P2X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj11P2X        1, 0, 94, 10

/**
 * Signal MapObj11P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj11P2X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj11P2X      1, 0, 94, 10, 0

/**
 * Get signal MapObj11P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj11P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[11] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[12] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj11P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj11P2X(buf, val) { \
	buf[11] &= ~(0x7f << 0); \
	buf[11] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[12] &= ~(0x07 << 5); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj11P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj11P2X(buf) \
	SET_Map_Objects_Signals_2_MapObj11P2X(buf, 0)

/**
 * Signal MapObj11P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj11P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj11P2X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj11P2X      0

/**
 * Signal MapObj11P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj11P2X        0

/**
 * Signal MapObj11P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj11P2X        1022

/**
 * Signal MapObj11P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj11P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj11P2Y Signal MapObj11P2Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj11P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj11P2Y and \ref GET_Map_Objects_Signals_2_MapObj11P2Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj11P2Y        1, 0, 100, 10

/**
 * Signal MapObj11P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj11P2Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj11P2Y      1, 0, 100, 10, 0

/**
 * Get signal MapObj11P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj11P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal MapObj11P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj11P2Y(buf, val) { \
	buf[12] &= ~(0x1f << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[13] &= ~(0x1f << 3); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal MapObj11P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj11P2Y(buf) \
	SET_Map_Objects_Signals_2_MapObj11P2Y(buf, 0)

/**
 * Signal MapObj11P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj11P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj11P2Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj11P2Y      0

/**
 * Signal MapObj11P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj11P2Y        0

/**
 * Signal MapObj11P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj11P2Y        1022

/**
 * Signal MapObj11P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj11P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj11Prob Signal MapObj11Prob of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj11Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj11Prob and \ref GET_Map_Objects_Signals_2_MapObj11Prob instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj11Prob        1, 0, 106, 3

/**
 * Signal MapObj11Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj11Prob or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj11Prob      1, 0, 106, 3, 0

/**
 * Get signal MapObj11Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj11Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[13] >> 0) & 0x07) << 0) \
)

/**
 * Set signal MapObj11Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj11Prob(buf, val) { \
	buf[13] &= ~(0x07 << 0); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal MapObj11Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj11Prob(buf) \
	SET_Map_Objects_Signals_2_MapObj11Prob(buf, 0)

/**
 * Signal MapObj11Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj11Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj11Prob raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj11Prob      0

/**
 * Signal MapObj11Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj11Prob        0

/**
 * Signal MapObj11Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj11Prob        5

/**
 * Signal MapObj11Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj11Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj11Type Signal MapObj11Type of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj11Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj11Type and \ref GET_Map_Objects_Signals_2_MapObj11Type instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj11Type        1, 0, 119, 3

/**
 * Signal MapObj11Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj11Type or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj11Type      1, 0, 119, 3, 0

/**
 * Get signal MapObj11Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj11Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj11Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj11Type(buf, val) { \
	buf[14] &= ~(0x07 << 5); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj11Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj11Type(buf) \
	SET_Map_Objects_Signals_2_MapObj11Type(buf, 0)

/**
 * Signal MapObj11Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj11Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj11Type raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj11Type      0

/**
 * Signal MapObj11Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj11Type        0

/**
 * Signal MapObj11Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj11Type        7

/**
 * Signal MapObj11Type raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj11Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj11Height_Brake Signal MapObj11Height_Brake of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj11Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj11Height_Brake and \ref GET_Map_Objects_Signals_2_MapObj11Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj11Height_Brake        1, 0, 116, 2

/**
 * Signal MapObj11Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj11Height_Brake or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj11Height_Brake      1, 0, 116, 2, 0

/**
 * Get signal MapObj11Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj11Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 3) & 0x03) << 0) \
)

/**
 * Set signal MapObj11Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj11Height_Brake(buf, val) { \
	buf[14] &= ~(0x03 << 3); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal MapObj11Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj11Height_Brake(buf) \
	SET_Map_Objects_Signals_2_MapObj11Height_Brake(buf, 0)

/**
 * Signal MapObj11Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj11Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj11Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj11Height_Brake      0

/**
 * Signal MapObj11Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj11Height_Brake        0

/**
 * Signal MapObj11Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj11Height_Brake        3

/**
 * Signal MapObj11Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj11Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj11Height_Warn Signal MapObj11Height_Warn of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj11Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj11Height_Warn and \ref GET_Map_Objects_Signals_2_MapObj11Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj11Height_Warn        1, 0, 114, 2

/**
 * Signal MapObj11Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj11Height_Warn or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj11Height_Warn      1, 0, 114, 2, 0

/**
 * Get signal MapObj11Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj11Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 1) & 0x03) << 0) \
)

/**
 * Set signal MapObj11Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj11Height_Warn(buf, val) { \
	buf[14] &= ~(0x03 << 1); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal MapObj11Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj11Height_Warn(buf) \
	SET_Map_Objects_Signals_2_MapObj11Height_Warn(buf, 0)

/**
 * Signal MapObj11Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj11Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj11Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj11Height_Warn      0

/**
 * Signal MapObj11Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj11Height_Warn        0

/**
 * Signal MapObj11Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj11Height_Warn        3

/**
 * Signal MapObj11Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj11Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj11HeightProb Signal MapObj11HeightProb of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj11HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj11HeightProb and \ref GET_Map_Objects_Signals_2_MapObj11HeightProb instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj11HeightProb        1, 0, 112, 3

/**
 * Signal MapObj11HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj11HeightProb or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj11HeightProb      1, 0, 112, 3, 0

/**
 * Get signal MapObj11HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj11HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj11HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj11HeightProb(buf, val) { \
	buf[14] &= ~(0x01 << 0); \
	buf[14] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[15] &= ~(0x03 << 6); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj11HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj11HeightProb(buf) \
	SET_Map_Objects_Signals_2_MapObj11HeightProb(buf, 0)

/**
 * Signal MapObj11HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj11HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj11HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj11HeightProb      0

/**
 * Signal MapObj11HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj11HeightProb        0

/**
 * Signal MapObj11HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj11HeightProb        5

/**
 * Signal MapObj11HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj11HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj12P1X Signal MapObj12P1X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj12P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj12P1X and \ref GET_Map_Objects_Signals_2_MapObj12P1X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj12P1X        1, 0, 125, 10

/**
 * Signal MapObj12P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj12P1X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj12P1X      1, 0, 125, 10, 0

/**
 * Get signal MapObj12P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj12P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[15] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[16] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj12P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj12P1X(buf, val) { \
	buf[15] &= ~(0x3f << 0); \
	buf[15] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[16] &= ~(0x0f << 4); \
	buf[16] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj12P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj12P1X(buf) \
	SET_Map_Objects_Signals_2_MapObj12P1X(buf, 0)

/**
 * Signal MapObj12P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj12P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj12P1X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj12P1X      0

/**
 * Signal MapObj12P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj12P1X        0

/**
 * Signal MapObj12P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj12P1X        1022

/**
 * Signal MapObj12P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj12P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj12P1Y Signal MapObj12P1Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj12P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj12P1Y and \ref GET_Map_Objects_Signals_2_MapObj12P1Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj12P1Y        1, 0, 131, 10

/**
 * Signal MapObj12P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj12P1Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj12P1Y      1, 0, 131, 10, 0

/**
 * Get signal MapObj12P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj12P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[16] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[17] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj12P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj12P1Y(buf, val) { \
	buf[16] &= ~(0x0f << 0); \
	buf[16] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[17] &= ~(0x3f << 2); \
	buf[17] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj12P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj12P1Y(buf) \
	SET_Map_Objects_Signals_2_MapObj12P1Y(buf, 0)

/**
 * Signal MapObj12P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj12P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj12P1Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj12P1Y      0

/**
 * Signal MapObj12P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj12P1Y        0

/**
 * Signal MapObj12P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj12P1Y        1022

/**
 * Signal MapObj12P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj12P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj12P2X Signal MapObj12P2X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj12P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj12P2X and \ref GET_Map_Objects_Signals_2_MapObj12P2X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj12P2X        1, 0, 137, 10

/**
 * Signal MapObj12P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj12P2X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj12P2X      1, 0, 137, 10, 0

/**
 * Get signal MapObj12P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj12P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[17] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[18] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj12P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj12P2X(buf, val) { \
	buf[17] &= ~(0x03 << 0); \
	buf[17] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[18] &= ~(0xff << 0); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj12P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj12P2X(buf) \
	SET_Map_Objects_Signals_2_MapObj12P2X(buf, 0)

/**
 * Signal MapObj12P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj12P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj12P2X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj12P2X      0

/**
 * Signal MapObj12P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj12P2X        0

/**
 * Signal MapObj12P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj12P2X        1022

/**
 * Signal MapObj12P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj12P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj12P2Y Signal MapObj12P2Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj12P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj12P2Y and \ref GET_Map_Objects_Signals_2_MapObj12P2Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj12P2Y        1, 0, 159, 10

/**
 * Signal MapObj12P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj12P2Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj12P2Y      1, 0, 159, 10, 0

/**
 * Get signal MapObj12P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj12P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[19] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj12P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj12P2Y(buf, val) { \
	buf[19] &= ~(0xff << 0); \
	buf[19] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[20] &= ~(0x03 << 6); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj12P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj12P2Y(buf) \
	SET_Map_Objects_Signals_2_MapObj12P2Y(buf, 0)

/**
 * Signal MapObj12P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj12P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj12P2Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj12P2Y      0

/**
 * Signal MapObj12P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj12P2Y        0

/**
 * Signal MapObj12P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj12P2Y        1022

/**
 * Signal MapObj12P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj12P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj12Prob Signal MapObj12Prob of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj12Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj12Prob and \ref GET_Map_Objects_Signals_2_MapObj12Prob instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj12Prob        1, 0, 165, 3

/**
 * Signal MapObj12Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj12Prob or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj12Prob      1, 0, 165, 3, 0

/**
 * Get signal MapObj12Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj12Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[20] >> 3) & 0x07) << 0) \
)

/**
 * Set signal MapObj12Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj12Prob(buf, val) { \
	buf[20] &= ~(0x07 << 3); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal MapObj12Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj12Prob(buf) \
	SET_Map_Objects_Signals_2_MapObj12Prob(buf, 0)

/**
 * Signal MapObj12Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj12Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj12Prob raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj12Prob      0

/**
 * Signal MapObj12Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj12Prob        0

/**
 * Signal MapObj12Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj12Prob        5

/**
 * Signal MapObj12Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj12Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj12Type Signal MapObj12Type of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj12Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj12Type and \ref GET_Map_Objects_Signals_2_MapObj12Type instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj12Type        1, 0, 162, 3

/**
 * Signal MapObj12Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj12Type or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj12Type      1, 0, 162, 3, 0

/**
 * Get signal MapObj12Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj12Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[20] >> 0) & 0x07) << 0) \
)

/**
 * Set signal MapObj12Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj12Type(buf, val) { \
	buf[20] &= ~(0x07 << 0); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal MapObj12Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj12Type(buf) \
	SET_Map_Objects_Signals_2_MapObj12Type(buf, 0)

/**
 * Signal MapObj12Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj12Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj12Type raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj12Type      0

/**
 * Signal MapObj12Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj12Type        0

/**
 * Signal MapObj12Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj12Type        7

/**
 * Signal MapObj12Type raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj12Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj12Height_Brake Signal MapObj12Height_Brake of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj12Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj12Height_Brake and \ref GET_Map_Objects_Signals_2_MapObj12Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj12Height_Brake        1, 0, 175, 2

/**
 * Signal MapObj12Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj12Height_Brake or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj12Height_Brake      1, 0, 175, 2, 0

/**
 * Get signal MapObj12Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj12Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj12Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj12Height_Brake(buf, val) { \
	buf[21] &= ~(0x03 << 6); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj12Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj12Height_Brake(buf) \
	SET_Map_Objects_Signals_2_MapObj12Height_Brake(buf, 0)

/**
 * Signal MapObj12Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj12Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj12Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj12Height_Brake      0

/**
 * Signal MapObj12Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj12Height_Brake        0

/**
 * Signal MapObj12Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj12Height_Brake        3

/**
 * Signal MapObj12Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj12Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj12Height_Warn Signal MapObj12Height_Warn of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj12Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj12Height_Warn and \ref GET_Map_Objects_Signals_2_MapObj12Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj12Height_Warn        1, 0, 173, 2

/**
 * Signal MapObj12Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj12Height_Warn or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj12Height_Warn      1, 0, 173, 2, 0

/**
 * Get signal MapObj12Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj12Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 4) & 0x03) << 0) \
)

/**
 * Set signal MapObj12Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj12Height_Warn(buf, val) { \
	buf[21] &= ~(0x03 << 4); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal MapObj12Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj12Height_Warn(buf) \
	SET_Map_Objects_Signals_2_MapObj12Height_Warn(buf, 0)

/**
 * Signal MapObj12Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj12Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj12Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj12Height_Warn      0

/**
 * Signal MapObj12Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj12Height_Warn        0

/**
 * Signal MapObj12Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj12Height_Warn        3

/**
 * Signal MapObj12Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj12Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj12HeightProb Signal MapObj12HeightProb of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj12HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj12HeightProb and \ref GET_Map_Objects_Signals_2_MapObj12HeightProb instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj12HeightProb        1, 0, 171, 3

/**
 * Signal MapObj12HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj12HeightProb or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj12HeightProb      1, 0, 171, 3, 0

/**
 * Get signal MapObj12HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj12HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 1) & 0x07) << 0) \
)

/**
 * Set signal MapObj12HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj12HeightProb(buf, val) { \
	buf[21] &= ~(0x07 << 1); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal MapObj12HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj12HeightProb(buf) \
	SET_Map_Objects_Signals_2_MapObj12HeightProb(buf, 0)

/**
 * Signal MapObj12HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj12HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj12HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj12HeightProb      0

/**
 * Signal MapObj12HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj12HeightProb        0

/**
 * Signal MapObj12HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj12HeightProb        5

/**
 * Signal MapObj12HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj12HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj13P1X Signal MapObj13P1X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj13P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj13P1X and \ref GET_Map_Objects_Signals_2_MapObj13P1X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj13P1X        1, 0, 168, 10

/**
 * Signal MapObj13P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj13P1X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj13P1X      1, 0, 168, 10, 0

/**
 * Get signal MapObj13P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj13P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[21] >> 0) & 0x01) << 9) \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj13P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj13P1X(buf, val) { \
	buf[21] &= ~(0x01 << 0); \
	buf[21] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x01) << 0; \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[23] &= ~(0x01 << 7); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj13P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj13P1X(buf) \
	SET_Map_Objects_Signals_2_MapObj13P1X(buf, 0)

/**
 * Signal MapObj13P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj13P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj13P1X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj13P1X      0

/**
 * Signal MapObj13P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj13P1X        0

/**
 * Signal MapObj13P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj13P1X        1022

/**
 * Signal MapObj13P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj13P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj13P1Y Signal MapObj13P1Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj13P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj13P1Y and \ref GET_Map_Objects_Signals_2_MapObj13P1Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj13P1Y        1, 0, 190, 10

/**
 * Signal MapObj13P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj13P1Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj13P1Y      1, 0, 190, 10, 0

/**
 * Get signal MapObj13P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj13P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[23] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[24] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj13P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj13P1Y(buf, val) { \
	buf[23] &= ~(0x7f << 0); \
	buf[23] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[24] &= ~(0x07 << 5); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj13P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj13P1Y(buf) \
	SET_Map_Objects_Signals_2_MapObj13P1Y(buf, 0)

/**
 * Signal MapObj13P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj13P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj13P1Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj13P1Y      0

/**
 * Signal MapObj13P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj13P1Y        0

/**
 * Signal MapObj13P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj13P1Y        1022

/**
 * Signal MapObj13P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj13P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj13P2X Signal MapObj13P2X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj13P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj13P2X and \ref GET_Map_Objects_Signals_2_MapObj13P2X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj13P2X        1, 0, 196, 10

/**
 * Signal MapObj13P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj13P2X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj13P2X      1, 0, 196, 10, 0

/**
 * Get signal MapObj13P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj13P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[24] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[25] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal MapObj13P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj13P2X(buf, val) { \
	buf[24] &= ~(0x1f << 0); \
	buf[24] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[25] &= ~(0x1f << 3); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal MapObj13P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj13P2X(buf) \
	SET_Map_Objects_Signals_2_MapObj13P2X(buf, 0)

/**
 * Signal MapObj13P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj13P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj13P2X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj13P2X      0

/**
 * Signal MapObj13P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj13P2X        0

/**
 * Signal MapObj13P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj13P2X        1022

/**
 * Signal MapObj13P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj13P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj13P2Y Signal MapObj13P2Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj13P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj13P2Y and \ref GET_Map_Objects_Signals_2_MapObj13P2Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj13P2Y        1, 0, 202, 10

/**
 * Signal MapObj13P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj13P2Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj13P2Y      1, 0, 202, 10, 0

/**
 * Get signal MapObj13P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj13P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[26] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal MapObj13P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj13P2Y(buf, val) { \
	buf[25] &= ~(0x07 << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[26] &= ~(0x7f << 1); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal MapObj13P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj13P2Y(buf) \
	SET_Map_Objects_Signals_2_MapObj13P2Y(buf, 0)

/**
 * Signal MapObj13P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj13P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj13P2Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj13P2Y      0

/**
 * Signal MapObj13P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj13P2Y        0

/**
 * Signal MapObj13P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj13P2Y        1022

/**
 * Signal MapObj13P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj13P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj13Prob Signal MapObj13Prob of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj13Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj13Prob and \ref GET_Map_Objects_Signals_2_MapObj13Prob instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj13Prob        1, 0, 208, 3

/**
 * Signal MapObj13Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj13Prob or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj13Prob      1, 0, 208, 3, 0

/**
 * Get signal MapObj13Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj13Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[26] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[27] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj13Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj13Prob(buf, val) { \
	buf[26] &= ~(0x01 << 0); \
	buf[26] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[27] &= ~(0x03 << 6); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj13Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj13Prob(buf) \
	SET_Map_Objects_Signals_2_MapObj13Prob(buf, 0)

/**
 * Signal MapObj13Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj13Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj13Prob raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj13Prob      0

/**
 * Signal MapObj13Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj13Prob        0

/**
 * Signal MapObj13Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj13Prob        5

/**
 * Signal MapObj13Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj13Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj13Type Signal MapObj13Type of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj13Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj13Type and \ref GET_Map_Objects_Signals_2_MapObj13Type instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj13Type        1, 0, 221, 3

/**
 * Signal MapObj13Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj13Type or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj13Type      1, 0, 221, 3, 0

/**
 * Get signal MapObj13Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj13Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[27] >> 3) & 0x07) << 0) \
)

/**
 * Set signal MapObj13Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj13Type(buf, val) { \
	buf[27] &= ~(0x07 << 3); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal MapObj13Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj13Type(buf) \
	SET_Map_Objects_Signals_2_MapObj13Type(buf, 0)

/**
 * Signal MapObj13Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj13Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj13Type raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj13Type      0

/**
 * Signal MapObj13Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj13Type        0

/**
 * Signal MapObj13Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj13Type        7

/**
 * Signal MapObj13Type raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj13Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj13Height_Brake Signal MapObj13Height_Brake of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj13Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj13Height_Brake and \ref GET_Map_Objects_Signals_2_MapObj13Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj13Height_Brake        1, 0, 218, 2

/**
 * Signal MapObj13Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj13Height_Brake or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj13Height_Brake      1, 0, 218, 2, 0

/**
 * Get signal MapObj13Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj13Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[27] >> 1) & 0x03) << 0) \
)

/**
 * Set signal MapObj13Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj13Height_Brake(buf, val) { \
	buf[27] &= ~(0x03 << 1); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal MapObj13Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj13Height_Brake(buf) \
	SET_Map_Objects_Signals_2_MapObj13Height_Brake(buf, 0)

/**
 * Signal MapObj13Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj13Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj13Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj13Height_Brake      0

/**
 * Signal MapObj13Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj13Height_Brake        0

/**
 * Signal MapObj13Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj13Height_Brake        3

/**
 * Signal MapObj13Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj13Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj13Height_Warn Signal MapObj13Height_Warn of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj13Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj13Height_Warn and \ref GET_Map_Objects_Signals_2_MapObj13Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj13Height_Warn        1, 0, 216, 2

/**
 * Signal MapObj13Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj13Height_Warn or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj13Height_Warn      1, 0, 216, 2, 0

/**
 * Get signal MapObj13Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj13Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[27] >> 0) & 0x01) << 1) \
	| (uint8_t)(+(uint8_t)((buf[28] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj13Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj13Height_Warn(buf, val) { \
	buf[27] &= ~(0x01 << 0); \
	buf[27] |= (((uint8_t)(val) >> 1) & 0x01) << 0; \
	buf[28] &= ~(0x01 << 7); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj13Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj13Height_Warn(buf) \
	SET_Map_Objects_Signals_2_MapObj13Height_Warn(buf, 0)

/**
 * Signal MapObj13Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj13Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj13Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj13Height_Warn      0

/**
 * Signal MapObj13Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj13Height_Warn        0

/**
 * Signal MapObj13Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj13Height_Warn        3

/**
 * Signal MapObj13Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj13Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj13HeightProb Signal MapObj13HeightProb of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj13HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj13HeightProb and \ref GET_Map_Objects_Signals_2_MapObj13HeightProb instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj13HeightProb        1, 0, 230, 3

/**
 * Signal MapObj13HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj13HeightProb or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj13HeightProb      1, 0, 230, 3, 0

/**
 * Get signal MapObj13HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj13HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[28] >> 4) & 0x07) << 0) \
)

/**
 * Set signal MapObj13HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj13HeightProb(buf, val) { \
	buf[28] &= ~(0x07 << 4); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal MapObj13HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj13HeightProb(buf) \
	SET_Map_Objects_Signals_2_MapObj13HeightProb(buf, 0)

/**
 * Signal MapObj13HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj13HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj13HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj13HeightProb      0

/**
 * Signal MapObj13HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj13HeightProb        0

/**
 * Signal MapObj13HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj13HeightProb        5

/**
 * Signal MapObj13HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj13HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj14P1X Signal MapObj14P1X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj14P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj14P1X and \ref GET_Map_Objects_Signals_2_MapObj14P1X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj14P1X        1, 0, 227, 10

/**
 * Signal MapObj14P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj14P1X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj14P1X      1, 0, 227, 10, 0

/**
 * Get signal MapObj14P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj14P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[28] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj14P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj14P1X(buf, val) { \
	buf[28] &= ~(0x0f << 0); \
	buf[28] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[29] &= ~(0x3f << 2); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj14P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj14P1X(buf) \
	SET_Map_Objects_Signals_2_MapObj14P1X(buf, 0)

/**
 * Signal MapObj14P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj14P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj14P1X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj14P1X      0

/**
 * Signal MapObj14P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj14P1X        0

/**
 * Signal MapObj14P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj14P1X        1022

/**
 * Signal MapObj14P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj14P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj14P1Y Signal MapObj14P1Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj14P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj14P1Y and \ref GET_Map_Objects_Signals_2_MapObj14P1Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj14P1Y        1, 0, 233, 10

/**
 * Signal MapObj14P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj14P1Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj14P1Y      1, 0, 233, 10, 0

/**
 * Get signal MapObj14P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj14P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[29] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[30] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj14P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj14P1Y(buf, val) { \
	buf[29] &= ~(0x03 << 0); \
	buf[29] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[30] &= ~(0xff << 0); \
	buf[30] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj14P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj14P1Y(buf) \
	SET_Map_Objects_Signals_2_MapObj14P1Y(buf, 0)

/**
 * Signal MapObj14P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj14P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj14P1Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj14P1Y      0

/**
 * Signal MapObj14P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj14P1Y        0

/**
 * Signal MapObj14P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj14P1Y        1022

/**
 * Signal MapObj14P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj14P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj14P2X Signal MapObj14P2X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj14P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj14P2X and \ref GET_Map_Objects_Signals_2_MapObj14P2X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj14P2X        1, 0, 255, 10

/**
 * Signal MapObj14P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj14P2X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj14P2X      1, 0, 255, 10, 0

/**
 * Get signal MapObj14P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj14P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[31] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[32] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj14P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj14P2X(buf, val) { \
	buf[31] &= ~(0xff << 0); \
	buf[31] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[32] &= ~(0x03 << 6); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj14P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj14P2X(buf) \
	SET_Map_Objects_Signals_2_MapObj14P2X(buf, 0)

/**
 * Signal MapObj14P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj14P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj14P2X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj14P2X      0

/**
 * Signal MapObj14P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj14P2X        0

/**
 * Signal MapObj14P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj14P2X        1022

/**
 * Signal MapObj14P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj14P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj14P2Y Signal MapObj14P2Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj14P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj14P2Y and \ref GET_Map_Objects_Signals_2_MapObj14P2Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj14P2Y        1, 0, 261, 10

/**
 * Signal MapObj14P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj14P2Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj14P2Y      1, 0, 261, 10, 0

/**
 * Get signal MapObj14P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj14P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[32] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[33] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj14P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj14P2Y(buf, val) { \
	buf[32] &= ~(0x3f << 0); \
	buf[32] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[33] &= ~(0x0f << 4); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj14P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj14P2Y(buf) \
	SET_Map_Objects_Signals_2_MapObj14P2Y(buf, 0)

/**
 * Signal MapObj14P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj14P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj14P2Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj14P2Y      0

/**
 * Signal MapObj14P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj14P2Y        0

/**
 * Signal MapObj14P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj14P2Y        1022

/**
 * Signal MapObj14P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj14P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj14Prob Signal MapObj14Prob of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj14Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj14Prob and \ref GET_Map_Objects_Signals_2_MapObj14Prob instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj14Prob        1, 0, 267, 3

/**
 * Signal MapObj14Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj14Prob or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj14Prob      1, 0, 267, 3, 0

/**
 * Get signal MapObj14Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj14Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[33] >> 1) & 0x07) << 0) \
)

/**
 * Set signal MapObj14Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj14Prob(buf, val) { \
	buf[33] &= ~(0x07 << 1); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal MapObj14Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj14Prob(buf) \
	SET_Map_Objects_Signals_2_MapObj14Prob(buf, 0)

/**
 * Signal MapObj14Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj14Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj14Prob raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj14Prob      0

/**
 * Signal MapObj14Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj14Prob        0

/**
 * Signal MapObj14Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj14Prob        5

/**
 * Signal MapObj14Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj14Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj14Type Signal MapObj14Type of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj14Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj14Type and \ref GET_Map_Objects_Signals_2_MapObj14Type instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj14Type        1, 0, 264, 3

/**
 * Signal MapObj14Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj14Type or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj14Type      1, 0, 264, 3, 0

/**
 * Get signal MapObj14Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj14Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[33] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[34] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj14Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj14Type(buf, val) { \
	buf[33] &= ~(0x01 << 0); \
	buf[33] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[34] &= ~(0x03 << 6); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj14Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj14Type(buf) \
	SET_Map_Objects_Signals_2_MapObj14Type(buf, 0)

/**
 * Signal MapObj14Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj14Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj14Type raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj14Type      0

/**
 * Signal MapObj14Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj14Type        0

/**
 * Signal MapObj14Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj14Type        7

/**
 * Signal MapObj14Type raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj14Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj14Height_Brake Signal MapObj14Height_Brake of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj14Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj14Height_Brake and \ref GET_Map_Objects_Signals_2_MapObj14Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj14Height_Brake        1, 0, 277, 2

/**
 * Signal MapObj14Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj14Height_Brake or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj14Height_Brake      1, 0, 277, 2, 0

/**
 * Get signal MapObj14Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj14Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[34] >> 4) & 0x03) << 0) \
)

/**
 * Set signal MapObj14Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj14Height_Brake(buf, val) { \
	buf[34] &= ~(0x03 << 4); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal MapObj14Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj14Height_Brake(buf) \
	SET_Map_Objects_Signals_2_MapObj14Height_Brake(buf, 0)

/**
 * Signal MapObj14Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj14Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj14Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj14Height_Brake      0

/**
 * Signal MapObj14Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj14Height_Brake        0

/**
 * Signal MapObj14Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj14Height_Brake        3

/**
 * Signal MapObj14Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj14Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj14Height_Warn Signal MapObj14Height_Warn of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj14Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj14Height_Warn and \ref GET_Map_Objects_Signals_2_MapObj14Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj14Height_Warn        1, 0, 275, 2

/**
 * Signal MapObj14Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj14Height_Warn or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj14Height_Warn      1, 0, 275, 2, 0

/**
 * Get signal MapObj14Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj14Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[34] >> 2) & 0x03) << 0) \
)

/**
 * Set signal MapObj14Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj14Height_Warn(buf, val) { \
	buf[34] &= ~(0x03 << 2); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal MapObj14Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj14Height_Warn(buf) \
	SET_Map_Objects_Signals_2_MapObj14Height_Warn(buf, 0)

/**
 * Signal MapObj14Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj14Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj14Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj14Height_Warn      0

/**
 * Signal MapObj14Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj14Height_Warn        0

/**
 * Signal MapObj14Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj14Height_Warn        3

/**
 * Signal MapObj14Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj14Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj14HeightProb Signal MapObj14HeightProb of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj14HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj14HeightProb and \ref GET_Map_Objects_Signals_2_MapObj14HeightProb instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj14HeightProb        1, 0, 273, 3

/**
 * Signal MapObj14HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj14HeightProb or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj14HeightProb      1, 0, 273, 3, 0

/**
 * Get signal MapObj14HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj14HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[34] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[35] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj14HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj14HeightProb(buf, val) { \
	buf[34] &= ~(0x03 << 0); \
	buf[34] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[35] &= ~(0x01 << 7); \
	buf[35] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj14HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj14HeightProb(buf) \
	SET_Map_Objects_Signals_2_MapObj14HeightProb(buf, 0)

/**
 * Signal MapObj14HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj14HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj14HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj14HeightProb      0

/**
 * Signal MapObj14HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj14HeightProb        0

/**
 * Signal MapObj14HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj14HeightProb        5

/**
 * Signal MapObj14HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj14HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj15P1X Signal MapObj15P1X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj15P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj15P1X and \ref GET_Map_Objects_Signals_2_MapObj15P1X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj15P1X        1, 0, 286, 10

/**
 * Signal MapObj15P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj15P1X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj15P1X      1, 0, 286, 10, 0

/**
 * Get signal MapObj15P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj15P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[35] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[36] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj15P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj15P1X(buf, val) { \
	buf[35] &= ~(0x7f << 0); \
	buf[35] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[36] &= ~(0x07 << 5); \
	buf[36] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj15P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj15P1X(buf) \
	SET_Map_Objects_Signals_2_MapObj15P1X(buf, 0)

/**
 * Signal MapObj15P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj15P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj15P1X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj15P1X      0

/**
 * Signal MapObj15P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj15P1X        0

/**
 * Signal MapObj15P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj15P1X        1022

/**
 * Signal MapObj15P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj15P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj15P1Y Signal MapObj15P1Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj15P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj15P1Y and \ref GET_Map_Objects_Signals_2_MapObj15P1Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj15P1Y        1, 0, 292, 10

/**
 * Signal MapObj15P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj15P1Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj15P1Y      1, 0, 292, 10, 0

/**
 * Get signal MapObj15P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj15P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[36] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[37] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal MapObj15P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj15P1Y(buf, val) { \
	buf[36] &= ~(0x1f << 0); \
	buf[36] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[37] &= ~(0x1f << 3); \
	buf[37] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal MapObj15P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj15P1Y(buf) \
	SET_Map_Objects_Signals_2_MapObj15P1Y(buf, 0)

/**
 * Signal MapObj15P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj15P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj15P1Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj15P1Y      0

/**
 * Signal MapObj15P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj15P1Y        0

/**
 * Signal MapObj15P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj15P1Y        1022

/**
 * Signal MapObj15P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj15P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj15P2X Signal MapObj15P2X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj15P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj15P2X and \ref GET_Map_Objects_Signals_2_MapObj15P2X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj15P2X        1, 0, 298, 10

/**
 * Signal MapObj15P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj15P2X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj15P2X      1, 0, 298, 10, 0

/**
 * Get signal MapObj15P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj15P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[37] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[38] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal MapObj15P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj15P2X(buf, val) { \
	buf[37] &= ~(0x07 << 0); \
	buf[37] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[38] &= ~(0x7f << 1); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal MapObj15P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj15P2X(buf) \
	SET_Map_Objects_Signals_2_MapObj15P2X(buf, 0)

/**
 * Signal MapObj15P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj15P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj15P2X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj15P2X      0

/**
 * Signal MapObj15P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj15P2X        0

/**
 * Signal MapObj15P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj15P2X        1022

/**
 * Signal MapObj15P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj15P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj15P2Y Signal MapObj15P2Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj15P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj15P2Y and \ref GET_Map_Objects_Signals_2_MapObj15P2Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj15P2Y        1, 0, 304, 10

/**
 * Signal MapObj15P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj15P2Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj15P2Y      1, 0, 304, 10, 0

/**
 * Get signal MapObj15P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj15P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[38] >> 0) & 0x01) << 9) \
	| (uint16_t)(+(uint16_t)((buf[39] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[40] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj15P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj15P2Y(buf, val) { \
	buf[38] &= ~(0x01 << 0); \
	buf[38] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x01) << 0; \
	buf[39] &= ~(0xff << 0); \
	buf[39] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[40] &= ~(0x01 << 7); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj15P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj15P2Y(buf) \
	SET_Map_Objects_Signals_2_MapObj15P2Y(buf, 0)

/**
 * Signal MapObj15P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj15P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj15P2Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj15P2Y      0

/**
 * Signal MapObj15P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj15P2Y        0

/**
 * Signal MapObj15P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj15P2Y        1022

/**
 * Signal MapObj15P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj15P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj15Prob Signal MapObj15Prob of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj15Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj15Prob and \ref GET_Map_Objects_Signals_2_MapObj15Prob instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj15Prob        1, 0, 326, 3

/**
 * Signal MapObj15Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj15Prob or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj15Prob      1, 0, 326, 3, 0

/**
 * Get signal MapObj15Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj15Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[40] >> 4) & 0x07) << 0) \
)

/**
 * Set signal MapObj15Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj15Prob(buf, val) { \
	buf[40] &= ~(0x07 << 4); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal MapObj15Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj15Prob(buf) \
	SET_Map_Objects_Signals_2_MapObj15Prob(buf, 0)

/**
 * Signal MapObj15Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj15Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj15Prob raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj15Prob      0

/**
 * Signal MapObj15Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj15Prob        0

/**
 * Signal MapObj15Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj15Prob        5

/**
 * Signal MapObj15Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj15Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj15Type Signal MapObj15Type of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj15Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj15Type and \ref GET_Map_Objects_Signals_2_MapObj15Type instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj15Type        1, 0, 323, 3

/**
 * Signal MapObj15Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj15Type or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj15Type      1, 0, 323, 3, 0

/**
 * Get signal MapObj15Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj15Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[40] >> 1) & 0x07) << 0) \
)

/**
 * Set signal MapObj15Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj15Type(buf, val) { \
	buf[40] &= ~(0x07 << 1); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal MapObj15Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj15Type(buf) \
	SET_Map_Objects_Signals_2_MapObj15Type(buf, 0)

/**
 * Signal MapObj15Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj15Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj15Type raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj15Type      0

/**
 * Signal MapObj15Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj15Type        0

/**
 * Signal MapObj15Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj15Type        7

/**
 * Signal MapObj15Type raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj15Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj15Height_Brake Signal MapObj15Height_Brake of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj15Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj15Height_Brake and \ref GET_Map_Objects_Signals_2_MapObj15Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj15Height_Brake        1, 0, 320, 2

/**
 * Signal MapObj15Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj15Height_Brake or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj15Height_Brake      1, 0, 320, 2, 0

/**
 * Get signal MapObj15Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj15Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[40] >> 0) & 0x01) << 1) \
	| (uint8_t)(+(uint8_t)((buf[41] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj15Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj15Height_Brake(buf, val) { \
	buf[40] &= ~(0x01 << 0); \
	buf[40] |= (((uint8_t)(val) >> 1) & 0x01) << 0; \
	buf[41] &= ~(0x01 << 7); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj15Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj15Height_Brake(buf) \
	SET_Map_Objects_Signals_2_MapObj15Height_Brake(buf, 0)

/**
 * Signal MapObj15Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj15Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj15Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj15Height_Brake      0

/**
 * Signal MapObj15Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj15Height_Brake        0

/**
 * Signal MapObj15Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj15Height_Brake        3

/**
 * Signal MapObj15Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj15Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj15Height_Warn Signal MapObj15Height_Warn of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj15Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj15Height_Warn and \ref GET_Map_Objects_Signals_2_MapObj15Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj15Height_Warn        1, 0, 334, 2

/**
 * Signal MapObj15Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj15Height_Warn or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj15Height_Warn      1, 0, 334, 2, 0

/**
 * Get signal MapObj15Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj15Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[41] >> 5) & 0x03) << 0) \
)

/**
 * Set signal MapObj15Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj15Height_Warn(buf, val) { \
	buf[41] &= ~(0x03 << 5); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0x03) << 5; \
}

/**
 * Set signal MapObj15Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj15Height_Warn(buf) \
	SET_Map_Objects_Signals_2_MapObj15Height_Warn(buf, 0)

/**
 * Signal MapObj15Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj15Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj15Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj15Height_Warn      0

/**
 * Signal MapObj15Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj15Height_Warn        0

/**
 * Signal MapObj15Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj15Height_Warn        3

/**
 * Signal MapObj15Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj15Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj15HeightProb Signal MapObj15HeightProb of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj15HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj15HeightProb and \ref GET_Map_Objects_Signals_2_MapObj15HeightProb instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj15HeightProb        1, 0, 332, 3

/**
 * Signal MapObj15HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj15HeightProb or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj15HeightProb      1, 0, 332, 3, 0

/**
 * Get signal MapObj15HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj15HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[41] >> 2) & 0x07) << 0) \
)

/**
 * Set signal MapObj15HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj15HeightProb(buf, val) { \
	buf[41] &= ~(0x07 << 2); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal MapObj15HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj15HeightProb(buf) \
	SET_Map_Objects_Signals_2_MapObj15HeightProb(buf, 0)

/**
 * Signal MapObj15HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj15HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj15HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj15HeightProb      0

/**
 * Signal MapObj15HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj15HeightProb        0

/**
 * Signal MapObj15HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj15HeightProb        5

/**
 * Signal MapObj15HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj15HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj16P1X Signal MapObj16P1X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj16P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj16P1X and \ref GET_Map_Objects_Signals_2_MapObj16P1X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj16P1X        1, 0, 329, 10

/**
 * Signal MapObj16P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj16P1X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj16P1X      1, 0, 329, 10, 0

/**
 * Get signal MapObj16P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj16P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[41] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[42] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj16P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj16P1X(buf, val) { \
	buf[41] &= ~(0x03 << 0); \
	buf[41] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[42] &= ~(0xff << 0); \
	buf[42] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj16P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj16P1X(buf) \
	SET_Map_Objects_Signals_2_MapObj16P1X(buf, 0)

/**
 * Signal MapObj16P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj16P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj16P1X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj16P1X      0

/**
 * Signal MapObj16P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj16P1X        0

/**
 * Signal MapObj16P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj16P1X        1022

/**
 * Signal MapObj16P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj16P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj16P1Y Signal MapObj16P1Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj16P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj16P1Y and \ref GET_Map_Objects_Signals_2_MapObj16P1Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj16P1Y        1, 0, 351, 10

/**
 * Signal MapObj16P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj16P1Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj16P1Y      1, 0, 351, 10, 0

/**
 * Get signal MapObj16P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj16P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[43] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[44] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj16P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj16P1Y(buf, val) { \
	buf[43] &= ~(0xff << 0); \
	buf[43] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[44] &= ~(0x03 << 6); \
	buf[44] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj16P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj16P1Y(buf) \
	SET_Map_Objects_Signals_2_MapObj16P1Y(buf, 0)

/**
 * Signal MapObj16P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj16P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj16P1Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj16P1Y      0

/**
 * Signal MapObj16P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj16P1Y        0

/**
 * Signal MapObj16P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj16P1Y        1022

/**
 * Signal MapObj16P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj16P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj16P2X Signal MapObj16P2X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj16P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj16P2X and \ref GET_Map_Objects_Signals_2_MapObj16P2X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj16P2X        1, 0, 357, 10

/**
 * Signal MapObj16P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj16P2X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj16P2X      1, 0, 357, 10, 0

/**
 * Get signal MapObj16P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj16P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[44] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[45] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj16P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj16P2X(buf, val) { \
	buf[44] &= ~(0x3f << 0); \
	buf[44] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[45] &= ~(0x0f << 4); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj16P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj16P2X(buf) \
	SET_Map_Objects_Signals_2_MapObj16P2X(buf, 0)

/**
 * Signal MapObj16P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj16P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj16P2X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj16P2X      0

/**
 * Signal MapObj16P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj16P2X        0

/**
 * Signal MapObj16P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj16P2X        1022

/**
 * Signal MapObj16P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj16P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj16P2Y Signal MapObj16P2Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj16P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj16P2Y and \ref GET_Map_Objects_Signals_2_MapObj16P2Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj16P2Y        1, 0, 363, 10

/**
 * Signal MapObj16P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj16P2Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj16P2Y      1, 0, 363, 10, 0

/**
 * Get signal MapObj16P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj16P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[45] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[46] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj16P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj16P2Y(buf, val) { \
	buf[45] &= ~(0x0f << 0); \
	buf[45] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[46] &= ~(0x3f << 2); \
	buf[46] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj16P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj16P2Y(buf) \
	SET_Map_Objects_Signals_2_MapObj16P2Y(buf, 0)

/**
 * Signal MapObj16P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj16P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj16P2Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj16P2Y      0

/**
 * Signal MapObj16P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj16P2Y        0

/**
 * Signal MapObj16P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj16P2Y        1022

/**
 * Signal MapObj16P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj16P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj16Prob Signal MapObj16Prob of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj16Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj16Prob and \ref GET_Map_Objects_Signals_2_MapObj16Prob instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj16Prob        1, 0, 369, 3

/**
 * Signal MapObj16Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj16Prob or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj16Prob      1, 0, 369, 3, 0

/**
 * Get signal MapObj16Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj16Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[46] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[47] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj16Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj16Prob(buf, val) { \
	buf[46] &= ~(0x03 << 0); \
	buf[46] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[47] &= ~(0x01 << 7); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj16Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj16Prob(buf) \
	SET_Map_Objects_Signals_2_MapObj16Prob(buf, 0)

/**
 * Signal MapObj16Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj16Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj16Prob raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj16Prob      0

/**
 * Signal MapObj16Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj16Prob        0

/**
 * Signal MapObj16Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj16Prob        5

/**
 * Signal MapObj16Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj16Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj16Type Signal MapObj16Type of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj16Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj16Type and \ref GET_Map_Objects_Signals_2_MapObj16Type instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj16Type        1, 0, 382, 3

/**
 * Signal MapObj16Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj16Type or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj16Type      1, 0, 382, 3, 0

/**
 * Get signal MapObj16Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj16Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[47] >> 4) & 0x07) << 0) \
)

/**
 * Set signal MapObj16Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj16Type(buf, val) { \
	buf[47] &= ~(0x07 << 4); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal MapObj16Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj16Type(buf) \
	SET_Map_Objects_Signals_2_MapObj16Type(buf, 0)

/**
 * Signal MapObj16Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj16Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj16Type raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj16Type      0

/**
 * Signal MapObj16Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj16Type        0

/**
 * Signal MapObj16Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj16Type        7

/**
 * Signal MapObj16Type raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj16Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj16Height_Brake Signal MapObj16Height_Brake of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj16Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj16Height_Brake and \ref GET_Map_Objects_Signals_2_MapObj16Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj16Height_Brake        1, 0, 379, 2

/**
 * Signal MapObj16Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj16Height_Brake or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj16Height_Brake      1, 0, 379, 2, 0

/**
 * Get signal MapObj16Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj16Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[47] >> 2) & 0x03) << 0) \
)

/**
 * Set signal MapObj16Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj16Height_Brake(buf, val) { \
	buf[47] &= ~(0x03 << 2); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal MapObj16Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj16Height_Brake(buf) \
	SET_Map_Objects_Signals_2_MapObj16Height_Brake(buf, 0)

/**
 * Signal MapObj16Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj16Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj16Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj16Height_Brake      0

/**
 * Signal MapObj16Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj16Height_Brake        0

/**
 * Signal MapObj16Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj16Height_Brake        3

/**
 * Signal MapObj16Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj16Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj16Height_Warn Signal MapObj16Height_Warn of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj16Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj16Height_Warn and \ref GET_Map_Objects_Signals_2_MapObj16Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj16Height_Warn        1, 0, 377, 2

/**
 * Signal MapObj16Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj16Height_Warn or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj16Height_Warn      1, 0, 377, 2, 0

/**
 * Get signal MapObj16Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj16Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[47] >> 0) & 0x03) << 0) \
)

/**
 * Set signal MapObj16Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj16Height_Warn(buf, val) { \
	buf[47] &= ~(0x03 << 0); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal MapObj16Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj16Height_Warn(buf) \
	SET_Map_Objects_Signals_2_MapObj16Height_Warn(buf, 0)

/**
 * Signal MapObj16Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj16Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj16Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj16Height_Warn      0

/**
 * Signal MapObj16Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj16Height_Warn        0

/**
 * Signal MapObj16Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj16Height_Warn        3

/**
 * Signal MapObj16Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj16Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj16HeightProb Signal MapObj16HeightProb of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj16HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj16HeightProb and \ref GET_Map_Objects_Signals_2_MapObj16HeightProb instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj16HeightProb        1, 0, 391, 3

/**
 * Signal MapObj16HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj16HeightProb or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj16HeightProb      1, 0, 391, 3, 0

/**
 * Get signal MapObj16HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj16HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[48] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj16HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj16HeightProb(buf, val) { \
	buf[48] &= ~(0x07 << 5); \
	buf[48] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj16HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj16HeightProb(buf) \
	SET_Map_Objects_Signals_2_MapObj16HeightProb(buf, 0)

/**
 * Signal MapObj16HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj16HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj16HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj16HeightProb      0

/**
 * Signal MapObj16HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj16HeightProb        0

/**
 * Signal MapObj16HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj16HeightProb        5

/**
 * Signal MapObj16HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj16HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj17P1X Signal MapObj17P1X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj17P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj17P1X and \ref GET_Map_Objects_Signals_2_MapObj17P1X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj17P1X        1, 0, 388, 10

/**
 * Signal MapObj17P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj17P1X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj17P1X      1, 0, 388, 10, 0

/**
 * Get signal MapObj17P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj17P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[48] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[49] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal MapObj17P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj17P1X(buf, val) { \
	buf[48] &= ~(0x1f << 0); \
	buf[48] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[49] &= ~(0x1f << 3); \
	buf[49] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal MapObj17P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj17P1X(buf) \
	SET_Map_Objects_Signals_2_MapObj17P1X(buf, 0)

/**
 * Signal MapObj17P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj17P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj17P1X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj17P1X      0

/**
 * Signal MapObj17P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj17P1X        0

/**
 * Signal MapObj17P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj17P1X        1022

/**
 * Signal MapObj17P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj17P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj17P1Y Signal MapObj17P1Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj17P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj17P1Y and \ref GET_Map_Objects_Signals_2_MapObj17P1Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj17P1Y        1, 0, 394, 10

/**
 * Signal MapObj17P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj17P1Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj17P1Y      1, 0, 394, 10, 0

/**
 * Get signal MapObj17P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj17P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[49] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[50] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal MapObj17P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj17P1Y(buf, val) { \
	buf[49] &= ~(0x07 << 0); \
	buf[49] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[50] &= ~(0x7f << 1); \
	buf[50] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal MapObj17P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj17P1Y(buf) \
	SET_Map_Objects_Signals_2_MapObj17P1Y(buf, 0)

/**
 * Signal MapObj17P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj17P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj17P1Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj17P1Y      0

/**
 * Signal MapObj17P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj17P1Y        0

/**
 * Signal MapObj17P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj17P1Y        1022

/**
 * Signal MapObj17P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj17P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj17P2X Signal MapObj17P2X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj17P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj17P2X and \ref GET_Map_Objects_Signals_2_MapObj17P2X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj17P2X        1, 0, 400, 10

/**
 * Signal MapObj17P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj17P2X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj17P2X      1, 0, 400, 10, 0

/**
 * Get signal MapObj17P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj17P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[50] >> 0) & 0x01) << 9) \
	| (uint16_t)(+(uint16_t)((buf[51] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[52] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj17P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj17P2X(buf, val) { \
	buf[50] &= ~(0x01 << 0); \
	buf[50] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x01) << 0; \
	buf[51] &= ~(0xff << 0); \
	buf[51] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[52] &= ~(0x01 << 7); \
	buf[52] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj17P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj17P2X(buf) \
	SET_Map_Objects_Signals_2_MapObj17P2X(buf, 0)

/**
 * Signal MapObj17P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj17P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj17P2X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj17P2X      0

/**
 * Signal MapObj17P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj17P2X        0

/**
 * Signal MapObj17P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj17P2X        1022

/**
 * Signal MapObj17P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj17P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj17P2Y Signal MapObj17P2Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj17P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj17P2Y and \ref GET_Map_Objects_Signals_2_MapObj17P2Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj17P2Y        1, 0, 422, 10

/**
 * Signal MapObj17P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj17P2Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj17P2Y      1, 0, 422, 10, 0

/**
 * Get signal MapObj17P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj17P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[52] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[53] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj17P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj17P2Y(buf, val) { \
	buf[52] &= ~(0x7f << 0); \
	buf[52] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[53] &= ~(0x07 << 5); \
	buf[53] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj17P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj17P2Y(buf) \
	SET_Map_Objects_Signals_2_MapObj17P2Y(buf, 0)

/**
 * Signal MapObj17P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj17P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj17P2Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj17P2Y      0

/**
 * Signal MapObj17P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj17P2Y        0

/**
 * Signal MapObj17P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj17P2Y        1022

/**
 * Signal MapObj17P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj17P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj17Prob Signal MapObj17Prob of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj17Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj17Prob and \ref GET_Map_Objects_Signals_2_MapObj17Prob instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj17Prob        1, 0, 428, 3

/**
 * Signal MapObj17Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj17Prob or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj17Prob      1, 0, 428, 3, 0

/**
 * Get signal MapObj17Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj17Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[53] >> 2) & 0x07) << 0) \
)

/**
 * Set signal MapObj17Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj17Prob(buf, val) { \
	buf[53] &= ~(0x07 << 2); \
	buf[53] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal MapObj17Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj17Prob(buf) \
	SET_Map_Objects_Signals_2_MapObj17Prob(buf, 0)

/**
 * Signal MapObj17Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj17Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj17Prob raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj17Prob      0

/**
 * Signal MapObj17Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj17Prob        0

/**
 * Signal MapObj17Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj17Prob        5

/**
 * Signal MapObj17Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj17Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj17Type Signal MapObj17Type of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj17Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj17Type and \ref GET_Map_Objects_Signals_2_MapObj17Type instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj17Type        1, 0, 425, 3

/**
 * Signal MapObj17Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj17Type or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj17Type      1, 0, 425, 3, 0

/**
 * Get signal MapObj17Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj17Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[53] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[54] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj17Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj17Type(buf, val) { \
	buf[53] &= ~(0x03 << 0); \
	buf[53] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[54] &= ~(0x01 << 7); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj17Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj17Type(buf) \
	SET_Map_Objects_Signals_2_MapObj17Type(buf, 0)

/**
 * Signal MapObj17Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj17Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj17Type raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj17Type      0

/**
 * Signal MapObj17Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj17Type        0

/**
 * Signal MapObj17Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj17Type        7

/**
 * Signal MapObj17Type raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj17Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj17Height_Brake Signal MapObj17Height_Brake of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj17Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj17Height_Brake and \ref GET_Map_Objects_Signals_2_MapObj17Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj17Height_Brake        1, 0, 438, 2

/**
 * Signal MapObj17Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj17Height_Brake or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj17Height_Brake      1, 0, 438, 2, 0

/**
 * Get signal MapObj17Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj17Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[54] >> 5) & 0x03) << 0) \
)

/**
 * Set signal MapObj17Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj17Height_Brake(buf, val) { \
	buf[54] &= ~(0x03 << 5); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x03) << 5; \
}

/**
 * Set signal MapObj17Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj17Height_Brake(buf) \
	SET_Map_Objects_Signals_2_MapObj17Height_Brake(buf, 0)

/**
 * Signal MapObj17Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj17Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj17Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj17Height_Brake      0

/**
 * Signal MapObj17Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj17Height_Brake        0

/**
 * Signal MapObj17Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj17Height_Brake        3

/**
 * Signal MapObj17Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj17Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj17Height_Warn Signal MapObj17Height_Warn of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj17Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj17Height_Warn and \ref GET_Map_Objects_Signals_2_MapObj17Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj17Height_Warn        1, 0, 436, 2

/**
 * Signal MapObj17Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj17Height_Warn or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj17Height_Warn      1, 0, 436, 2, 0

/**
 * Get signal MapObj17Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj17Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[54] >> 3) & 0x03) << 0) \
)

/**
 * Set signal MapObj17Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj17Height_Warn(buf, val) { \
	buf[54] &= ~(0x03 << 3); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal MapObj17Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj17Height_Warn(buf) \
	SET_Map_Objects_Signals_2_MapObj17Height_Warn(buf, 0)

/**
 * Signal MapObj17Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj17Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj17Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj17Height_Warn      0

/**
 * Signal MapObj17Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj17Height_Warn        0

/**
 * Signal MapObj17Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj17Height_Warn        3

/**
 * Signal MapObj17Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj17Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj17HeightProb Signal MapObj17HeightProb of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj17HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj17HeightProb and \ref GET_Map_Objects_Signals_2_MapObj17HeightProb instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj17HeightProb        1, 0, 434, 3

/**
 * Signal MapObj17HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj17HeightProb or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj17HeightProb      1, 0, 434, 3, 0

/**
 * Get signal MapObj17HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj17HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[54] >> 0) & 0x07) << 0) \
)

/**
 * Set signal MapObj17HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj17HeightProb(buf, val) { \
	buf[54] &= ~(0x07 << 0); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal MapObj17HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj17HeightProb(buf) \
	SET_Map_Objects_Signals_2_MapObj17HeightProb(buf, 0)

/**
 * Signal MapObj17HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj17HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj17HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj17HeightProb      0

/**
 * Signal MapObj17HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj17HeightProb        0

/**
 * Signal MapObj17HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj17HeightProb        5

/**
 * Signal MapObj17HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj17HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj18P1X Signal MapObj18P1X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj18P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj18P1X and \ref GET_Map_Objects_Signals_2_MapObj18P1X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj18P1X        1, 0, 447, 10

/**
 * Signal MapObj18P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj18P1X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj18P1X      1, 0, 447, 10, 0

/**
 * Get signal MapObj18P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj18P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[55] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[56] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj18P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj18P1X(buf, val) { \
	buf[55] &= ~(0xff << 0); \
	buf[55] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[56] &= ~(0x03 << 6); \
	buf[56] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj18P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj18P1X(buf) \
	SET_Map_Objects_Signals_2_MapObj18P1X(buf, 0)

/**
 * Signal MapObj18P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj18P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj18P1X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj18P1X      0

/**
 * Signal MapObj18P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj18P1X        0

/**
 * Signal MapObj18P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj18P1X        1022

/**
 * Signal MapObj18P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj18P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj18P1Y Signal MapObj18P1Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj18P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj18P1Y and \ref GET_Map_Objects_Signals_2_MapObj18P1Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj18P1Y        1, 0, 453, 10

/**
 * Signal MapObj18P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj18P1Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj18P1Y      1, 0, 453, 10, 0

/**
 * Get signal MapObj18P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj18P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[56] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[57] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj18P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj18P1Y(buf, val) { \
	buf[56] &= ~(0x3f << 0); \
	buf[56] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[57] &= ~(0x0f << 4); \
	buf[57] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj18P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj18P1Y(buf) \
	SET_Map_Objects_Signals_2_MapObj18P1Y(buf, 0)

/**
 * Signal MapObj18P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj18P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj18P1Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj18P1Y      0

/**
 * Signal MapObj18P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj18P1Y        0

/**
 * Signal MapObj18P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj18P1Y        1022

/**
 * Signal MapObj18P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj18P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj18P2X Signal MapObj18P2X of Message Map_Objects_Signals_2 (0x192)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj18P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj18P2X and \ref GET_Map_Objects_Signals_2_MapObj18P2X instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj18P2X        1, 0, 459, 10

/**
 * Signal MapObj18P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj18P2X or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj18P2X      1, 0, 459, 10, 0

/**
 * Get signal MapObj18P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj18P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[57] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[58] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj18P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj18P2X(buf, val) { \
	buf[57] &= ~(0x0f << 0); \
	buf[57] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[58] &= ~(0x3f << 2); \
	buf[58] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj18P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj18P2X(buf) \
	SET_Map_Objects_Signals_2_MapObj18P2X(buf, 0)

/**
 * Signal MapObj18P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj18P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj18P2X raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj18P2X      0

/**
 * Signal MapObj18P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj18P2X        0

/**
 * Signal MapObj18P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj18P2X        1022

/**
 * Signal MapObj18P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj18P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj18P2Y Signal MapObj18P2Y of Message Map_Objects_Signals_2 (0x192)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj18P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj18P2Y and \ref GET_Map_Objects_Signals_2_MapObj18P2Y instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj18P2Y        1, 0, 465, 10

/**
 * Signal MapObj18P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj18P2Y or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj18P2Y      1, 0, 465, 10, 0

/**
 * Get signal MapObj18P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj18P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[58] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[59] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj18P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj18P2Y(buf, val) { \
	buf[58] &= ~(0x03 << 0); \
	buf[58] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[59] &= ~(0xff << 0); \
	buf[59] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj18P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj18P2Y(buf) \
	SET_Map_Objects_Signals_2_MapObj18P2Y(buf, 0)

/**
 * Signal MapObj18P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj18P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj18P2Y raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj18P2Y      0

/**
 * Signal MapObj18P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj18P2Y        0

/**
 * Signal MapObj18P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj18P2Y        1022

/**
 * Signal MapObj18P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj18P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj18Prob Signal MapObj18Prob of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj18Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj18Prob and \ref GET_Map_Objects_Signals_2_MapObj18Prob instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj18Prob        1, 0, 487, 3

/**
 * Signal MapObj18Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj18Prob or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj18Prob      1, 0, 487, 3, 0

/**
 * Get signal MapObj18Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj18Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[60] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj18Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj18Prob(buf, val) { \
	buf[60] &= ~(0x07 << 5); \
	buf[60] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj18Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj18Prob(buf) \
	SET_Map_Objects_Signals_2_MapObj18Prob(buf, 0)

/**
 * Signal MapObj18Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj18Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj18Prob raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj18Prob      0

/**
 * Signal MapObj18Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj18Prob        0

/**
 * Signal MapObj18Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj18Prob        5

/**
 * Signal MapObj18Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj18Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj18Type Signal MapObj18Type of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj18Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj18Type and \ref GET_Map_Objects_Signals_2_MapObj18Type instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj18Type        1, 0, 484, 3

/**
 * Signal MapObj18Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj18Type or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj18Type      1, 0, 484, 3, 0

/**
 * Get signal MapObj18Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj18Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[60] >> 2) & 0x07) << 0) \
)

/**
 * Set signal MapObj18Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj18Type(buf, val) { \
	buf[60] &= ~(0x07 << 2); \
	buf[60] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal MapObj18Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj18Type(buf) \
	SET_Map_Objects_Signals_2_MapObj18Type(buf, 0)

/**
 * Signal MapObj18Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj18Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj18Type raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj18Type      0

/**
 * Signal MapObj18Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj18Type        0

/**
 * Signal MapObj18Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj18Type        7

/**
 * Signal MapObj18Type raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj18Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj18Height_Brake Signal MapObj18Height_Brake of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj18Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj18Height_Brake and \ref GET_Map_Objects_Signals_2_MapObj18Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj18Height_Brake        1, 0, 481, 2

/**
 * Signal MapObj18Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj18Height_Brake or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj18Height_Brake      1, 0, 481, 2, 0

/**
 * Get signal MapObj18Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj18Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[60] >> 0) & 0x03) << 0) \
)

/**
 * Set signal MapObj18Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj18Height_Brake(buf, val) { \
	buf[60] &= ~(0x03 << 0); \
	buf[60] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal MapObj18Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj18Height_Brake(buf) \
	SET_Map_Objects_Signals_2_MapObj18Height_Brake(buf, 0)

/**
 * Signal MapObj18Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj18Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj18Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj18Height_Brake      0

/**
 * Signal MapObj18Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj18Height_Brake        0

/**
 * Signal MapObj18Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj18Height_Brake        3

/**
 * Signal MapObj18Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj18Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj18Height_Warn Signal MapObj18Height_Warn of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj18Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj18Height_Warn and \ref GET_Map_Objects_Signals_2_MapObj18Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj18Height_Warn        1, 0, 495, 2

/**
 * Signal MapObj18Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj18Height_Warn or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj18Height_Warn      1, 0, 495, 2, 0

/**
 * Get signal MapObj18Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj18Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[61] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj18Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj18Height_Warn(buf, val) { \
	buf[61] &= ~(0x03 << 6); \
	buf[61] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj18Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj18Height_Warn(buf) \
	SET_Map_Objects_Signals_2_MapObj18Height_Warn(buf, 0)

/**
 * Signal MapObj18Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj18Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj18Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj18Height_Warn      0

/**
 * Signal MapObj18Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj18Height_Warn        0

/**
 * Signal MapObj18Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj18Height_Warn        3

/**
 * Signal MapObj18Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj18Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_2_MapObj18HeightProb Signal MapObj18HeightProb of Message Map_Objects_Signals_2 (0x192)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_2
 * @{
 */

/**
 * Signal MapObj18HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_2_MapObj18HeightProb and \ref GET_Map_Objects_Signals_2_MapObj18HeightProb instead.
 */
#define SIG_Map_Objects_Signals_2_MapObj18HeightProb        1, 0, 493, 3

/**
 * Signal MapObj18HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_2_MapObj18HeightProb or \ref INIT_Map_Objects_Signals_2 instead.
 */
#define SETUP_Map_Objects_Signals_2_MapObj18HeightProb      1, 0, 493, 3, 0

/**
 * Get signal MapObj18HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_2_MapObj18HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[61] >> 3) & 0x07) << 0) \
)

/**
 * Set signal MapObj18HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_2_MapObj18HeightProb(buf, val) { \
	buf[61] &= ~(0x07 << 3); \
	buf[61] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal MapObj18HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_2_MapObj18HeightProb(buf) \
	SET_Map_Objects_Signals_2_MapObj18HeightProb(buf, 0)

/**
 * Signal MapObj18HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_2_MapObj18HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj18HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_2_MapObj18HeightProb      0

/**
 * Signal MapObj18HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_2_MapObj18HeightProb        0

/**
 * Signal MapObj18HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_2_MapObj18HeightProb        5

/**
 * Signal MapObj18HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_2_MapObj18HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum Signal Map_Objects_Signals_3_Checksum of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal Map_Objects_Signals_3_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum and \ref GET_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum instead.
 */
#define SIG_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum        1, 0, 7, 8

/**
 * Signal Map_Objects_Signals_3_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum      1, 0, 7, 8, 0

/**
 * Get signal Map_Objects_Signals_3_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_Objects_Signals_3_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_Objects_Signals_3_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum(buf) \
	SET_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum(buf, 0)

/**
 * Signal Map_Objects_Signals_3_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_Objects_Signals_3_Checksum raw initial value.
 */
#define START_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum      0

/**
 * Signal Map_Objects_Signals_3_Checksum raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum        0

/**
 * Signal Map_Objects_Signals_3_Checksum raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum        255

/**
 * Signal Map_Objects_Signals_3_Checksum raw offset value.
 */
#define OFF_Map_Objects_Signals_3_Map_Objects_Signals_3_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter Signal Map_Objects_Signals_3_MsgCounter of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal Map_Objects_Signals_3_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter and \ref GET_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter instead.
 */
#define SIG_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter        1, 0, 11, 4

/**
 * Signal Map_Objects_Signals_3_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal Map_Objects_Signals_3_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal Map_Objects_Signals_3_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal Map_Objects_Signals_3_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter(buf) \
	SET_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter(buf, 0)

/**
 * Signal Map_Objects_Signals_3_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_Objects_Signals_3_MsgCounter raw initial value.
 */
#define START_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter      0

/**
 * Signal Map_Objects_Signals_3_MsgCounter raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter        0

/**
 * Signal Map_Objects_Signals_3_MsgCounter raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter        15

/**
 * Signal Map_Objects_Signals_3_MsgCounter raw offset value.
 */
#define OFF_Map_Objects_Signals_3_Map_Objects_Signals_3_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj19P1X Signal MapObj19P1X of Message Map_Objects_Signals_3 (0x193)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj19P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj19P1X and \ref GET_Map_Objects_Signals_3_MapObj19P1X instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj19P1X        1, 0, 23, 10

/**
 * Signal MapObj19P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj19P1X or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj19P1X      1, 0, 23, 10, 0

/**
 * Get signal MapObj19P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj19P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj19P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj19P1X(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj19P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj19P1X(buf) \
	SET_Map_Objects_Signals_3_MapObj19P1X(buf, 0)

/**
 * Signal MapObj19P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj19P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj19P1X raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj19P1X      0

/**
 * Signal MapObj19P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj19P1X        0

/**
 * Signal MapObj19P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj19P1X        1022

/**
 * Signal MapObj19P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj19P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj19P1Y Signal MapObj19P1Y of Message Map_Objects_Signals_3 (0x193)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj19P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj19P1Y and \ref GET_Map_Objects_Signals_3_MapObj19P1Y instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj19P1Y        1, 0, 29, 10

/**
 * Signal MapObj19P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj19P1Y or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj19P1Y      1, 0, 29, 10, 0

/**
 * Get signal MapObj19P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj19P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal MapObj19P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj19P1Y(buf, val) { \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal MapObj19P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj19P1Y(buf) \
	SET_Map_Objects_Signals_3_MapObj19P1Y(buf, 0)

/**
 * Signal MapObj19P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj19P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj19P1Y raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj19P1Y      0

/**
 * Signal MapObj19P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj19P1Y        0

/**
 * Signal MapObj19P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj19P1Y        1022

/**
 * Signal MapObj19P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj19P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj19P2X Signal MapObj19P2X of Message Map_Objects_Signals_3 (0x193)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj19P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj19P2X and \ref GET_Map_Objects_Signals_3_MapObj19P2X instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj19P2X        1, 0, 35, 10

/**
 * Signal MapObj19P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj19P2X or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj19P2X      1, 0, 35, 10, 0

/**
 * Get signal MapObj19P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj19P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal MapObj19P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj19P2X(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal MapObj19P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj19P2X(buf) \
	SET_Map_Objects_Signals_3_MapObj19P2X(buf, 0)

/**
 * Signal MapObj19P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj19P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj19P2X raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj19P2X      0

/**
 * Signal MapObj19P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj19P2X        0

/**
 * Signal MapObj19P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj19P2X        1022

/**
 * Signal MapObj19P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj19P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj19P2Y Signal MapObj19P2Y of Message Map_Objects_Signals_3 (0x193)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj19P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj19P2Y and \ref GET_Map_Objects_Signals_3_MapObj19P2Y instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj19P2Y        1, 0, 41, 10

/**
 * Signal MapObj19P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj19P2Y or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj19P2Y      1, 0, 41, 10, 0

/**
 * Get signal MapObj19P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj19P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal MapObj19P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj19P2Y(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal MapObj19P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj19P2Y(buf) \
	SET_Map_Objects_Signals_3_MapObj19P2Y(buf, 0)

/**
 * Signal MapObj19P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj19P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj19P2Y raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj19P2Y      0

/**
 * Signal MapObj19P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj19P2Y        0

/**
 * Signal MapObj19P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj19P2Y        1022

/**
 * Signal MapObj19P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj19P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj19Prob Signal MapObj19Prob of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj19Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj19Prob and \ref GET_Map_Objects_Signals_3_MapObj19Prob instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj19Prob        1, 0, 63, 3

/**
 * Signal MapObj19Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj19Prob or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj19Prob      1, 0, 63, 3, 0

/**
 * Get signal MapObj19Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj19Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj19Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj19Prob(buf, val) { \
	buf[7] &= ~(0x07 << 5); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj19Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj19Prob(buf) \
	SET_Map_Objects_Signals_3_MapObj19Prob(buf, 0)

/**
 * Signal MapObj19Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj19Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj19Prob raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj19Prob      0

/**
 * Signal MapObj19Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj19Prob        0

/**
 * Signal MapObj19Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj19Prob        5

/**
 * Signal MapObj19Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj19Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj19Type Signal MapObj19Type of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj19Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj19Type and \ref GET_Map_Objects_Signals_3_MapObj19Type instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj19Type        1, 0, 60, 3

/**
 * Signal MapObj19Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj19Type or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj19Type      1, 0, 60, 3, 0

/**
 * Get signal MapObj19Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj19Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x07) << 0) \
)

/**
 * Set signal MapObj19Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj19Type(buf, val) { \
	buf[7] &= ~(0x07 << 2); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal MapObj19Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj19Type(buf) \
	SET_Map_Objects_Signals_3_MapObj19Type(buf, 0)

/**
 * Signal MapObj19Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj19Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj19Type raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj19Type      0

/**
 * Signal MapObj19Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj19Type        0

/**
 * Signal MapObj19Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj19Type        7

/**
 * Signal MapObj19Type raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj19Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj19Height_Brake Signal MapObj19Height_Brake of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj19Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj19Height_Brake and \ref GET_Map_Objects_Signals_3_MapObj19Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj19Height_Brake        1, 0, 57, 2

/**
 * Signal MapObj19Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj19Height_Brake or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj19Height_Brake      1, 0, 57, 2, 0

/**
 * Get signal MapObj19Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj19Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 0) \
)

/**
 * Set signal MapObj19Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj19Height_Brake(buf, val) { \
	buf[7] &= ~(0x03 << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal MapObj19Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj19Height_Brake(buf) \
	SET_Map_Objects_Signals_3_MapObj19Height_Brake(buf, 0)

/**
 * Signal MapObj19Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj19Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj19Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj19Height_Brake      0

/**
 * Signal MapObj19Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj19Height_Brake        0

/**
 * Signal MapObj19Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj19Height_Brake        3

/**
 * Signal MapObj19Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj19Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj19Height_Warn Signal MapObj19Height_Warn of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj19Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj19Height_Warn and \ref GET_Map_Objects_Signals_3_MapObj19Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj19Height_Warn        1, 0, 71, 2

/**
 * Signal MapObj19Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj19Height_Warn or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj19Height_Warn      1, 0, 71, 2, 0

/**
 * Get signal MapObj19Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj19Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj19Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj19Height_Warn(buf, val) { \
	buf[8] &= ~(0x03 << 6); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj19Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj19Height_Warn(buf) \
	SET_Map_Objects_Signals_3_MapObj19Height_Warn(buf, 0)

/**
 * Signal MapObj19Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj19Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj19Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj19Height_Warn      0

/**
 * Signal MapObj19Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj19Height_Warn        0

/**
 * Signal MapObj19Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj19Height_Warn        3

/**
 * Signal MapObj19Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj19Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj19HeightProb Signal MapObj19HeightProb of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj19HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj19HeightProb and \ref GET_Map_Objects_Signals_3_MapObj19HeightProb instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj19HeightProb        1, 0, 69, 3

/**
 * Signal MapObj19HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj19HeightProb or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj19HeightProb      1, 0, 69, 3, 0

/**
 * Get signal MapObj19HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj19HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 3) & 0x07) << 0) \
)

/**
 * Set signal MapObj19HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj19HeightProb(buf, val) { \
	buf[8] &= ~(0x07 << 3); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal MapObj19HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj19HeightProb(buf) \
	SET_Map_Objects_Signals_3_MapObj19HeightProb(buf, 0)

/**
 * Signal MapObj19HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj19HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj19HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj19HeightProb      0

/**
 * Signal MapObj19HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj19HeightProb        0

/**
 * Signal MapObj19HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj19HeightProb        5

/**
 * Signal MapObj19HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj19HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj20P1X Signal MapObj20P1X of Message Map_Objects_Signals_3 (0x193)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj20P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj20P1X and \ref GET_Map_Objects_Signals_3_MapObj20P1X instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj20P1X        1, 0, 66, 10

/**
 * Signal MapObj20P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj20P1X or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj20P1X      1, 0, 66, 10, 0

/**
 * Get signal MapObj20P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj20P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal MapObj20P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj20P1X(buf, val) { \
	buf[8] &= ~(0x07 << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[9] &= ~(0x7f << 1); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal MapObj20P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj20P1X(buf) \
	SET_Map_Objects_Signals_3_MapObj20P1X(buf, 0)

/**
 * Signal MapObj20P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj20P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj20P1X raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj20P1X      0

/**
 * Signal MapObj20P1X raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj20P1X        0

/**
 * Signal MapObj20P1X raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj20P1X        1022

/**
 * Signal MapObj20P1X raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj20P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj20P1Y Signal MapObj20P1Y of Message Map_Objects_Signals_3 (0x193)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj20P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj20P1Y and \ref GET_Map_Objects_Signals_3_MapObj20P1Y instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj20P1Y        1, 0, 72, 10

/**
 * Signal MapObj20P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj20P1Y or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj20P1Y      1, 0, 72, 10, 0

/**
 * Get signal MapObj20P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj20P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x01) << 9) \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 7) & 0x01) << 0) \
)

/**
 * Set signal MapObj20P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj20P1Y(buf, val) { \
	buf[9] &= ~(0x01 << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x01) << 0; \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[11] &= ~(0x01 << 7); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal MapObj20P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj20P1Y(buf) \
	SET_Map_Objects_Signals_3_MapObj20P1Y(buf, 0)

/**
 * Signal MapObj20P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj20P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj20P1Y raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj20P1Y      0

/**
 * Signal MapObj20P1Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj20P1Y        0

/**
 * Signal MapObj20P1Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj20P1Y        1022

/**
 * Signal MapObj20P1Y raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj20P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj20P2X Signal MapObj20P2X of Message Map_Objects_Signals_3 (0x193)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj20P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj20P2X and \ref GET_Map_Objects_Signals_3_MapObj20P2X instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj20P2X        1, 0, 94, 10

/**
 * Signal MapObj20P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj20P2X or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj20P2X      1, 0, 94, 10, 0

/**
 * Get signal MapObj20P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj20P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[11] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[12] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj20P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj20P2X(buf, val) { \
	buf[11] &= ~(0x7f << 0); \
	buf[11] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[12] &= ~(0x07 << 5); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj20P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj20P2X(buf) \
	SET_Map_Objects_Signals_3_MapObj20P2X(buf, 0)

/**
 * Signal MapObj20P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj20P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj20P2X raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj20P2X      0

/**
 * Signal MapObj20P2X raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj20P2X        0

/**
 * Signal MapObj20P2X raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj20P2X        1022

/**
 * Signal MapObj20P2X raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj20P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj20P2Y Signal MapObj20P2Y of Message Map_Objects_Signals_3 (0x193)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj20P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj20P2Y and \ref GET_Map_Objects_Signals_3_MapObj20P2Y instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj20P2Y        1, 0, 100, 10

/**
 * Signal MapObj20P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj20P2Y or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj20P2Y      1, 0, 100, 10, 0

/**
 * Get signal MapObj20P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj20P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal MapObj20P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj20P2Y(buf, val) { \
	buf[12] &= ~(0x1f << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[13] &= ~(0x1f << 3); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal MapObj20P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj20P2Y(buf) \
	SET_Map_Objects_Signals_3_MapObj20P2Y(buf, 0)

/**
 * Signal MapObj20P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj20P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal MapObj20P2Y raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj20P2Y      0

/**
 * Signal MapObj20P2Y raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj20P2Y        0

/**
 * Signal MapObj20P2Y raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj20P2Y        1022

/**
 * Signal MapObj20P2Y raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj20P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj20Prob Signal MapObj20Prob of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj20Prob configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj20Prob and \ref GET_Map_Objects_Signals_3_MapObj20Prob instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj20Prob        1, 0, 106, 3

/**
 * Signal MapObj20Prob setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj20Prob or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj20Prob      1, 0, 106, 3, 0

/**
 * Get signal MapObj20Prob from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj20Prob(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[13] >> 0) & 0x07) << 0) \
)

/**
 * Set signal MapObj20Prob in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj20Prob(buf, val) { \
	buf[13] &= ~(0x07 << 0); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal MapObj20Prob in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj20Prob(buf) \
	SET_Map_Objects_Signals_3_MapObj20Prob(buf, 0)

/**
 * Signal MapObj20Prob value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj20Prob(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj20Prob raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj20Prob      0

/**
 * Signal MapObj20Prob raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj20Prob        0

/**
 * Signal MapObj20Prob raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj20Prob        5

/**
 * Signal MapObj20Prob raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj20Prob        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj20Type Signal MapObj20Type of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj20Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj20Type and \ref GET_Map_Objects_Signals_3_MapObj20Type instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj20Type        1, 0, 119, 3

/**
 * Signal MapObj20Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj20Type or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj20Type      1, 0, 119, 3, 0

/**
 * Get signal MapObj20Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj20Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 5) & 0x07) << 0) \
)

/**
 * Set signal MapObj20Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj20Type(buf, val) { \
	buf[14] &= ~(0x07 << 5); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal MapObj20Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj20Type(buf) \
	SET_Map_Objects_Signals_3_MapObj20Type(buf, 0)

/**
 * Signal MapObj20Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj20Type(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj20Type raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj20Type      0

/**
 * Signal MapObj20Type raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj20Type        0

/**
 * Signal MapObj20Type raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj20Type        7

/**
 * Signal MapObj20Type raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj20Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj20Height_Brake Signal MapObj20Height_Brake of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj20Height_Brake configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj20Height_Brake and \ref GET_Map_Objects_Signals_3_MapObj20Height_Brake instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj20Height_Brake        1, 0, 116, 2

/**
 * Signal MapObj20Height_Brake setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj20Height_Brake or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj20Height_Brake      1, 0, 116, 2, 0

/**
 * Get signal MapObj20Height_Brake from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj20Height_Brake(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 3) & 0x03) << 0) \
)

/**
 * Set signal MapObj20Height_Brake in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj20Height_Brake(buf, val) { \
	buf[14] &= ~(0x03 << 3); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal MapObj20Height_Brake in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj20Height_Brake(buf) \
	SET_Map_Objects_Signals_3_MapObj20Height_Brake(buf, 0)

/**
 * Signal MapObj20Height_Brake value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj20Height_Brake(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj20Height_Brake raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj20Height_Brake      0

/**
 * Signal MapObj20Height_Brake raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj20Height_Brake        0

/**
 * Signal MapObj20Height_Brake raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj20Height_Brake        3

/**
 * Signal MapObj20Height_Brake raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj20Height_Brake        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj20Height_Warn Signal MapObj20Height_Warn of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj20Height_Warn configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj20Height_Warn and \ref GET_Map_Objects_Signals_3_MapObj20Height_Warn instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj20Height_Warn        1, 0, 114, 2

/**
 * Signal MapObj20Height_Warn setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj20Height_Warn or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj20Height_Warn      1, 0, 114, 2, 0

/**
 * Get signal MapObj20Height_Warn from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj20Height_Warn(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 1) & 0x03) << 0) \
)

/**
 * Set signal MapObj20Height_Warn in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj20Height_Warn(buf, val) { \
	buf[14] &= ~(0x03 << 1); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal MapObj20Height_Warn in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj20Height_Warn(buf) \
	SET_Map_Objects_Signals_3_MapObj20Height_Warn(buf, 0)

/**
 * Signal MapObj20Height_Warn value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj20Height_Warn(x, fmt) \
	((x) * fmt)

/**
 * Signal MapObj20Height_Warn raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj20Height_Warn      0

/**
 * Signal MapObj20Height_Warn raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj20Height_Warn        0

/**
 * Signal MapObj20Height_Warn raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj20Height_Warn        3

/**
 * Signal MapObj20Height_Warn raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj20Height_Warn        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_MapObj20HeightProb Signal MapObj20HeightProb of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal MapObj20HeightProb configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_MapObj20HeightProb and \ref GET_Map_Objects_Signals_3_MapObj20HeightProb instead.
 */
#define SIG_Map_Objects_Signals_3_MapObj20HeightProb        1, 0, 112, 3

/**
 * Signal MapObj20HeightProb setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_MapObj20HeightProb or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_MapObj20HeightProb      1, 0, 112, 3, 0

/**
 * Get signal MapObj20HeightProb from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_MapObj20HeightProb(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 6) & 0x03) << 0) \
)

/**
 * Set signal MapObj20HeightProb in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_MapObj20HeightProb(buf, val) { \
	buf[14] &= ~(0x01 << 0); \
	buf[14] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[15] &= ~(0x03 << 6); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal MapObj20HeightProb in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_MapObj20HeightProb(buf) \
	SET_Map_Objects_Signals_3_MapObj20HeightProb(buf, 0)

/**
 * Signal MapObj20HeightProb value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_MapObj20HeightProb(x, fmt) \
	((x) * fmt * 20)

/**
 * Signal MapObj20HeightProb raw initial value.
 */
#define START_Map_Objects_Signals_3_MapObj20HeightProb      0

/**
 * Signal MapObj20HeightProb raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_MapObj20HeightProb        0

/**
 * Signal MapObj20HeightProb raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_MapObj20HeightProb        5

/**
 * Signal MapObj20HeightProb raw offset value.
 */
#define OFF_Map_Objects_Signals_3_MapObj20HeightProb        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_PSL_Status Signal PSL_Status of Message Map_Objects_Signals_3 (0x193)
 *
 * PSL function status
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal PSL_Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_PSL_Status and \ref GET_Map_Objects_Signals_3_PSL_Status instead.
 */
#define SIG_Map_Objects_Signals_3_PSL_Status        1, 0, 125, 3

/**
 * Signal PSL_Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_PSL_Status or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_PSL_Status      1, 0, 125, 3, 0

/**
 * Get signal PSL_Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_PSL_Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[15] >> 3) & 0x07) << 0) \
)

/**
 * Set signal PSL_Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_PSL_Status(buf, val) { \
	buf[15] &= ~(0x07 << 3); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal PSL_Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_PSL_Status(buf) \
	SET_Map_Objects_Signals_3_PSL_Status(buf, 0)

/**
 * Signal PSL_Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_PSL_Status(x, fmt) \
	((x) * fmt)

/**
 * Signal PSL_Status raw initial value.
 */
#define START_Map_Objects_Signals_3_PSL_Status      0

/**
 * Signal PSL_Status raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_PSL_Status        0

/**
 * Signal PSL_Status raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_PSL_Status        7

/**
 * Signal PSL_Status raw offset value.
 */
#define OFF_Map_Objects_Signals_3_PSL_Status        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_PAS_Status Signal PAS_Status of Message Map_Objects_Signals_3 (0x193)
 *
 * PAS function status
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal PAS_Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_PAS_Status and \ref GET_Map_Objects_Signals_3_PAS_Status instead.
 */
#define SIG_Map_Objects_Signals_3_PAS_Status        1, 0, 122, 3

/**
 * Signal PAS_Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_PAS_Status or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_PAS_Status      1, 0, 122, 3, 0

/**
 * Get signal PAS_Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_PAS_Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[15] >> 0) & 0x07) << 0) \
)

/**
 * Set signal PAS_Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_PAS_Status(buf, val) { \
	buf[15] &= ~(0x07 << 0); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal PAS_Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_PAS_Status(buf) \
	SET_Map_Objects_Signals_3_PAS_Status(buf, 0)

/**
 * Signal PAS_Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_PAS_Status(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Status raw initial value.
 */
#define START_Map_Objects_Signals_3_PAS_Status      0

/**
 * Signal PAS_Status raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_PAS_Status        0

/**
 * Signal PAS_Status raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_PAS_Status        7

/**
 * Signal PAS_Status raw offset value.
 */
#define OFF_Map_Objects_Signals_3_PAS_Status        0

/**
 * @}
 */

/**
 * @defgroup SIG_Map_Objects_Signals_3_PAS_MapObj_TimeStamp Signal PAS_MapObj_TimeStamp of Message Map_Objects_Signals_3 (0x193)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Map_Objects_Signals_3
 * @{
 */

/**
 * Signal PAS_MapObj_TimeStamp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Map_Objects_Signals_3_PAS_MapObj_TimeStamp and \ref GET_Map_Objects_Signals_3_PAS_MapObj_TimeStamp instead.
 */
#define SIG_Map_Objects_Signals_3_PAS_MapObj_TimeStamp        1, 0, 135, 32

/**
 * Signal PAS_MapObj_TimeStamp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Map_Objects_Signals_3_PAS_MapObj_TimeStamp or \ref INIT_Map_Objects_Signals_3 instead.
 */
#define SETUP_Map_Objects_Signals_3_PAS_MapObj_TimeStamp      1, 0, 135, 32, 0

/**
 * Get signal PAS_MapObj_TimeStamp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Map_Objects_Signals_3_PAS_MapObj_TimeStamp(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[16] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[17] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[18] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[19] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_MapObj_TimeStamp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Map_Objects_Signals_3_PAS_MapObj_TimeStamp(buf, val) { \
	buf[16] &= ~(0xff << 0); \
	buf[16] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[17] &= ~(0xff << 0); \
	buf[17] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[18] &= ~(0xff << 0); \
	buf[18] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[19] &= ~(0xff << 0); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_MapObj_TimeStamp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Map_Objects_Signals_3_PAS_MapObj_TimeStamp(buf) \
	SET_Map_Objects_Signals_3_PAS_MapObj_TimeStamp(buf, 0)

/**
 * Signal PAS_MapObj_TimeStamp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Map_Objects_Signals_3_PAS_MapObj_TimeStamp(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_MapObj_TimeStamp raw initial value.
 */
#define START_Map_Objects_Signals_3_PAS_MapObj_TimeStamp      0

/**
 * Signal PAS_MapObj_TimeStamp raw minimum value.
 */
#define MIN_Map_Objects_Signals_3_PAS_MapObj_TimeStamp        0

/**
 * Signal PAS_MapObj_TimeStamp raw maximum value.
 */
#define MAX_Map_Objects_Signals_3_PAS_MapObj_TimeStamp        4294967295

/**
 * Signal PAS_MapObj_TimeStamp raw offset value.
 */
#define OFF_Map_Objects_Signals_3_PAS_MapObj_TimeStamp        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum Signal PAS_APASlotInfo1_Checksum of Message PAS_APASlotInfo1 (0x194)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal PAS_APASlotInfo1_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum and \ref GET_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum instead.
 */
#define SIG_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum        1, 0, 7, 8

/**
 * Signal PAS_APASlotInfo1_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_APASlotInfo1_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_APASlotInfo1_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_APASlotInfo1_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum(buf) \
	SET_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum(buf, 0)

/**
 * Signal PAS_APASlotInfo1_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_APASlotInfo1_Checksum raw initial value.
 */
#define START_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum      0

/**
 * Signal PAS_APASlotInfo1_Checksum raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum        0

/**
 * Signal PAS_APASlotInfo1_Checksum raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum        255

/**
 * Signal PAS_APASlotInfo1_Checksum raw offset value.
 */
#define OFF_PAS_APASlotInfo1_PAS_APASlotInfo1_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter Signal PAS_APASlotInfo1_MsgCounter of Message PAS_APASlotInfo1 (0x194)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal PAS_APASlotInfo1_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter and \ref GET_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter instead.
 */
#define SIG_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_APASlotInfo1_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_APASlotInfo1_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_APASlotInfo1_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_APASlotInfo1_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter(buf) \
	SET_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter(buf, 0)

/**
 * Signal PAS_APASlotInfo1_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_APASlotInfo1_MsgCounter raw initial value.
 */
#define START_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter      0

/**
 * Signal PAS_APASlotInfo1_MsgCounter raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter        0

/**
 * Signal PAS_APASlotInfo1_MsgCounter raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter        15

/**
 * Signal PAS_APASlotInfo1_MsgCounter raw offset value.
 */
#define OFF_PAS_APASlotInfo1_PAS_APASlotInfo1_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1ID Signal ApaSlot1ID of Message PAS_APASlotInfo1 (0x194)
 *
 * Parking ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1ID and \ref GET_PAS_APASlotInfo1_ApaSlot1ID instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1ID             1, 0, 23, 8

/**
 * Signal ApaSlot1ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1ID or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1ID           1, 0, 23, 8, 0

/**
 * Get signal ApaSlot1ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ApaSlot1ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1ID(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ApaSlot1ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1ID(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1ID(buf, 0)

/**
 * Signal ApaSlot1ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1ID(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot1ID raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1ID           0

/**
 * Signal ApaSlot1ID raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1ID             0

/**
 * Signal ApaSlot1ID raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1ID             255

/**
 * Signal ApaSlot1ID raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1ID             0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Status Signal ApaSlot1Status of Message PAS_APASlotInfo1 (0x194)
 *
 * Parking state
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Status and \ref GET_PAS_APASlotInfo1_ApaSlot1Status instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Status         1, 0, 31, 2

/**
 * Signal ApaSlot1Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Status or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Status       1, 0, 31, 2, 0

/**
 * Get signal ApaSlot1Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot1Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Status(buf, val) { \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot1Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Status(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Status(buf, 0)

/**
 * Signal ApaSlot1Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Status(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot1Status raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Status       0

/**
 * Signal ApaSlot1Status raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Status         0

/**
 * Signal ApaSlot1Status raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Status         3

/**
 * Signal ApaSlot1Status raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Status         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Type Signal ApaSlot1Type of Message PAS_APASlotInfo1 (0x194)
 *
 * Types of parking Spaces
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Type and \ref GET_PAS_APASlotInfo1_ApaSlot1Type instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Type           1, 0, 29, 3

/**
 * Signal ApaSlot1Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Type or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Type         1, 0, 29, 3, 0

/**
 * Get signal ApaSlot1Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 3) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot1Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Type(buf, val) { \
	buf[3] &= ~(0x07 << 3); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal ApaSlot1Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Type(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Type(buf, 0)

/**
 * Signal ApaSlot1Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot1Type raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Type         0

/**
 * Signal ApaSlot1Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Type           0

/**
 * Signal ApaSlot1Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Type           7

/**
 * Signal ApaSlot1Type raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Type           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1DepethReferance Signal ApaSlot1DepethReferance of Message PAS_APASlotInfo1 (0x194)
 *
 * Type of obstruction in parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1DepethReferance configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1DepethReferance and \ref GET_PAS_APASlotInfo1_ApaSlot1DepethReferance instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1DepethReferance        1, 0, 26, 3

/**
 * Signal ApaSlot1DepethReferance setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1DepethReferance or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1DepethReferance      1, 0, 26, 3, 0

/**
 * Get signal ApaSlot1DepethReferance from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1DepethReferance(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot1DepethReferance in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1DepethReferance(buf, val) { \
	buf[3] &= ~(0x07 << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal ApaSlot1DepethReferance in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1DepethReferance(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1DepethReferance(buf, 0)

/**
 * Signal ApaSlot1DepethReferance value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1DepethReferance(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot1DepethReferance raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1DepethReferance      0

/**
 * Signal ApaSlot1DepethReferance raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1DepethReferance        0

/**
 * Signal ApaSlot1DepethReferance raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1DepethReferance        7

/**
 * Signal ApaSlot1DepethReferance raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1DepethReferance        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Obj1X Signal ApaSlot1Obj1X of Message PAS_APASlotInfo1 (0x194)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Obj1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Obj1X and \ref GET_PAS_APASlotInfo1_ApaSlot1Obj1X instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Obj1X          1, 0, 39, 12

/**
 * Signal ApaSlot1Obj1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1X or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Obj1X        1, 0, 39, 12, 0

/**
 * Get signal ApaSlot1Obj1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Obj1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 4) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ApaSlot1Obj1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Obj1X(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[5] &= ~(0x0f << 4); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ApaSlot1Obj1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1X(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Obj1X(buf, 0)

/**
 * Signal ApaSlot1Obj1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Obj1X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot1Obj1X raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Obj1X        0

/**
 * Signal ApaSlot1Obj1X raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Obj1X          0

/**
 * Signal ApaSlot1Obj1X raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Obj1X          4094

/**
 * Signal ApaSlot1Obj1X raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Obj1X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Obj1Y Signal ApaSlot1Obj1Y of Message PAS_APASlotInfo1 (0x194)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Obj1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Obj1Y and \ref GET_PAS_APASlotInfo1_ApaSlot1Obj1Y instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Obj1Y          1, 0, 43, 12

/**
 * Signal ApaSlot1Obj1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1Y or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Obj1Y        1, 0, 43, 12, 0

/**
 * Get signal ApaSlot1Obj1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Obj1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x0f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ApaSlot1Obj1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Obj1Y(buf, val) { \
	buf[5] &= ~(0x0f << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ApaSlot1Obj1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1Y(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Obj1Y(buf, 0)

/**
 * Signal ApaSlot1Obj1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Obj1Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot1Obj1Y raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Obj1Y        0

/**
 * Signal ApaSlot1Obj1Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Obj1Y          0

/**
 * Signal ApaSlot1Obj1Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Obj1Y          4094

/**
 * Signal ApaSlot1Obj1Y raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Obj1Y          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Obj1Type Signal ApaSlot1Obj1Type of Message PAS_APASlotInfo1 (0x194)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Obj1Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Obj1Type and \ref GET_PAS_APASlotInfo1_ApaSlot1Obj1Type instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Obj1Type        1, 0, 63, 2

/**
 * Signal ApaSlot1Obj1Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1Type or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Obj1Type      1, 0, 63, 2, 0

/**
 * Get signal ApaSlot1Obj1Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Obj1Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot1Obj1Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Obj1Type(buf, val) { \
	buf[7] &= ~(0x03 << 6); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot1Obj1Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1Type(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Obj1Type(buf, 0)

/**
 * Signal ApaSlot1Obj1Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Obj1Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot1Obj1Type raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Obj1Type      0

/**
 * Signal ApaSlot1Obj1Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Obj1Type        0

/**
 * Signal ApaSlot1Obj1Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Obj1Type        3

/**
 * Signal ApaSlot1Obj1Type raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Obj1Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Obj1Alpha Signal ApaSlot1Obj1Alpha of Message PAS_APASlotInfo1 (0x194)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Obj1Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Obj1Alpha and \ref GET_PAS_APASlotInfo1_ApaSlot1Obj1Alpha instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Obj1Alpha        1, 0, 61, 7

/**
 * Signal ApaSlot1Obj1Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1Alpha or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Obj1Alpha      1, 0, 61, 7, 0

/**
 * Get signal ApaSlot1Obj1Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Obj1Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x3f) << 1) \
	| (uint8_t)(+(uint8_t)((buf[8] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot1Obj1Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Obj1Alpha(buf, val) { \
	buf[7] &= ~(0x3f << 0); \
	buf[7] |= (((uint8_t)(val) >> 1) & 0x3f) << 0; \
	buf[8] &= ~(0x01 << 7); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot1Obj1Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Obj1Alpha(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Obj1Alpha(buf, 0)

/**
 * Signal ApaSlot1Obj1Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Obj1Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot1Obj1Alpha raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Obj1Alpha      0

/**
 * Signal ApaSlot1Obj1Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Obj1Alpha        0

/**
 * Signal ApaSlot1Obj1Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Obj1Alpha        128

/**
 * Signal ApaSlot1Obj1Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Obj1Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Obj2X Signal ApaSlot1Obj2X of Message PAS_APASlotInfo1 (0x194)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Obj2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Obj2X and \ref GET_PAS_APASlotInfo1_ApaSlot1Obj2X instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Obj2X          1, 0, 70, 12

/**
 * Signal ApaSlot1Obj2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Obj2X or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Obj2X        1, 0, 70, 12, 0

/**
 * Get signal ApaSlot1Obj2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Obj2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x7f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot1Obj2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Obj2X(buf, val) { \
	buf[8] &= ~(0x7f << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x7f) << 0; \
	buf[9] &= ~(0x1f << 3); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot1Obj2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Obj2X(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Obj2X(buf, 0)

/**
 * Signal ApaSlot1Obj2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Obj2X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot1Obj2X raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Obj2X        0

/**
 * Signal ApaSlot1Obj2X raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Obj2X          0

/**
 * Signal ApaSlot1Obj2X raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Obj2X          4094

/**
 * Signal ApaSlot1Obj2X raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Obj2X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApatSlot1Obj2Y Signal ApatSlot1Obj2Y of Message PAS_APASlotInfo1 (0x194)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApatSlot1Obj2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApatSlot1Obj2Y and \ref GET_PAS_APASlotInfo1_ApatSlot1Obj2Y instead.
 */
#define SIG_PAS_APASlotInfo1_ApatSlot1Obj2Y         1, 0, 74, 12

/**
 * Signal ApatSlot1Obj2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApatSlot1Obj2Y or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApatSlot1Obj2Y       1, 0, 74, 12, 0

/**
 * Get signal ApatSlot1Obj2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApatSlot1Obj2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x07) << 9) \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApatSlot1Obj2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApatSlot1Obj2Y(buf, val) { \
	buf[9] &= ~(0x07 << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0; \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[11] &= ~(0x01 << 7); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApatSlot1Obj2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApatSlot1Obj2Y(buf) \
	SET_PAS_APASlotInfo1_ApatSlot1Obj2Y(buf, 0)

/**
 * Signal ApatSlot1Obj2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApatSlot1Obj2Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApatSlot1Obj2Y raw initial value.
 */
#define START_PAS_APASlotInfo1_ApatSlot1Obj2Y       0

/**
 * Signal ApatSlot1Obj2Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApatSlot1Obj2Y         0

/**
 * Signal ApatSlot1Obj2Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApatSlot1Obj2Y         4094

/**
 * Signal ApatSlot1Obj2Y raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApatSlot1Obj2Y         -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Obj2Type Signal ApaSlot1Obj2Type of Message PAS_APASlotInfo1 (0x194)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Obj2Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Obj2Type and \ref GET_PAS_APASlotInfo1_ApaSlot1Obj2Type instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Obj2Type        1, 0, 94, 2

/**
 * Signal ApaSlot1Obj2Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Obj2Type or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Obj2Type      1, 0, 94, 2, 0

/**
 * Get signal ApaSlot1Obj2Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Obj2Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[11] >> 5) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot1Obj2Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Obj2Type(buf, val) { \
	buf[11] &= ~(0x03 << 5); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x03) << 5; \
}

/**
 * Set signal ApaSlot1Obj2Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Obj2Type(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Obj2Type(buf, 0)

/**
 * Signal ApaSlot1Obj2Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Obj2Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot1Obj2Type raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Obj2Type      0

/**
 * Signal ApaSlot1Obj2Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Obj2Type        0

/**
 * Signal ApaSlot1Obj2Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Obj2Type        3

/**
 * Signal ApaSlot1Obj2Type raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Obj2Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Obj2Alpha Signal ApaSlot1Obj2Alpha of Message PAS_APASlotInfo1 (0x194)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Obj2Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Obj2Alpha and \ref GET_PAS_APASlotInfo1_ApaSlot1Obj2Alpha instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Obj2Alpha        1, 0, 92, 7

/**
 * Signal ApaSlot1Obj2Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Obj2Alpha or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Obj2Alpha      1, 0, 92, 7, 0

/**
 * Get signal ApaSlot1Obj2Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Obj2Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[11] >> 0) & 0x1f) << 2) \
	| (uint8_t)(+(uint8_t)((buf[12] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot1Obj2Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Obj2Alpha(buf, val) { \
	buf[11] &= ~(0x1f << 0); \
	buf[11] |= (((uint8_t)(val) >> 2) & 0x1f) << 0; \
	buf[12] &= ~(0x03 << 6); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot1Obj2Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Obj2Alpha(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Obj2Alpha(buf, 0)

/**
 * Signal ApaSlot1Obj2Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Obj2Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot1Obj2Alpha raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Obj2Alpha      0

/**
 * Signal ApaSlot1Obj2Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Obj2Alpha        0

/**
 * Signal ApaSlot1Obj2Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Obj2Alpha        128

/**
 * Signal ApaSlot1Obj2Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Obj2Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Length Signal ApaSlot1Length of Message PAS_APASlotInfo1 (0x194)
 *
 * The length of the parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Length configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Length and \ref GET_PAS_APASlotInfo1_ApaSlot1Length instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Length         1, 0, 101, 11

/**
 * Signal ApaSlot1Length setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Length or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Length       1, 0, 101, 11, 0

/**
 * Get signal ApaSlot1Length from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Length(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0x3f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot1Length in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Length(buf, val) { \
	buf[12] &= ~(0x3f << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x3f) << 0; \
	buf[13] &= ~(0x1f << 3); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot1Length in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Length(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Length(buf, 0)

/**
 * Signal ApaSlot1Length value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Length(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot1Length raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Length       0

/**
 * Signal ApaSlot1Length raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Length         0

/**
 * Signal ApaSlot1Length raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Length         2047

/**
 * Signal ApaSlot1Length raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Length         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot1Depth Signal ApaSlot1Depth of Message PAS_APASlotInfo1 (0x194)
 *
 * Depth of parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot1Depth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot1Depth and \ref GET_PAS_APASlotInfo1_ApaSlot1Depth instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot1Depth          1, 0, 106, 10

/**
 * Signal ApaSlot1Depth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot1Depth or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot1Depth        1, 0, 106, 10, 0

/**
 * Get signal ApaSlot1Depth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot1Depth(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal ApaSlot1Depth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot1Depth(buf, val) { \
	buf[13] &= ~(0x07 << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[14] &= ~(0x7f << 1); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal ApaSlot1Depth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot1Depth(buf) \
	SET_PAS_APASlotInfo1_ApaSlot1Depth(buf, 0)

/**
 * Signal ApaSlot1Depth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot1Depth(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot1Depth raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot1Depth        0

/**
 * Signal ApaSlot1Depth raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot1Depth          0

/**
 * Signal ApaSlot1Depth raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot1Depth          1023

/**
 * Signal ApaSlot1Depth raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot1Depth          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2ID Signal ApaSlot2ID of Message PAS_APASlotInfo1 (0x194)
 *
 * Parking ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2ID and \ref GET_PAS_APASlotInfo1_ApaSlot2ID instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2ID             1, 0, 153, 8

/**
 * Signal ApaSlot2ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2ID or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2ID           1, 0, 153, 8, 0

/**
 * Get signal ApaSlot2ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[19] >> 0) & 0x03) << 6) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal ApaSlot2ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2ID(buf, val) { \
	buf[19] &= ~(0x03 << 0); \
	buf[19] |= (((uint8_t)(val) >> 6) & 0x03) << 0; \
	buf[20] &= ~(0x3f << 2); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal ApaSlot2ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2ID(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2ID(buf, 0)

/**
 * Signal ApaSlot2ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2ID(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot2ID raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2ID           0

/**
 * Signal ApaSlot2ID raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2ID             0

/**
 * Signal ApaSlot2ID raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2ID             255

/**
 * Signal ApaSlot2ID raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2ID             0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Status Signal ApaSlot2Status of Message PAS_APASlotInfo1 (0x194)
 *
 * Parking state
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Status and \ref GET_PAS_APASlotInfo1_ApaSlot2Status instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Status         1, 0, 161, 2

/**
 * Signal ApaSlot2Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Status or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Status       1, 0, 161, 2, 0

/**
 * Get signal ApaSlot2Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[20] >> 0) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot2Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Status(buf, val) { \
	buf[20] &= ~(0x03 << 0); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal ApaSlot2Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Status(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Status(buf, 0)

/**
 * Signal ApaSlot2Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Status(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot2Status raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Status       0

/**
 * Signal ApaSlot2Status raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Status         0

/**
 * Signal ApaSlot2Status raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Status         3

/**
 * Signal ApaSlot2Status raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Status         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Type Signal ApaSlot2Type of Message PAS_APASlotInfo1 (0x194)
 *
 * Types of parking Spaces
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Type and \ref GET_PAS_APASlotInfo1_ApaSlot2Type instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Type           1, 0, 175, 3

/**
 * Signal ApaSlot2Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Type or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Type         1, 0, 175, 3, 0

/**
 * Get signal ApaSlot2Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot2Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Type(buf, val) { \
	buf[21] &= ~(0x07 << 5); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot2Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Type(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Type(buf, 0)

/**
 * Signal ApaSlot2Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot2Type raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Type         0

/**
 * Signal ApaSlot2Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Type           0

/**
 * Signal ApaSlot2Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Type           7

/**
 * Signal ApaSlot2Type raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Type           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2DepethReferance Signal ApaSlot2DepethReferance of Message PAS_APASlotInfo1 (0x194)
 *
 * Type of obstruction in parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2DepethReferance configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2DepethReferance and \ref GET_PAS_APASlotInfo1_ApaSlot2DepethReferance instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2DepethReferance        1, 0, 172, 3

/**
 * Signal ApaSlot2DepethReferance setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2DepethReferance or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2DepethReferance      1, 0, 172, 3, 0

/**
 * Get signal ApaSlot2DepethReferance from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2DepethReferance(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 2) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot2DepethReferance in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2DepethReferance(buf, val) { \
	buf[21] &= ~(0x07 << 2); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal ApaSlot2DepethReferance in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2DepethReferance(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2DepethReferance(buf, 0)

/**
 * Signal ApaSlot2DepethReferance value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2DepethReferance(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot2DepethReferance raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2DepethReferance      0

/**
 * Signal ApaSlot2DepethReferance raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2DepethReferance        0

/**
 * Signal ApaSlot2DepethReferance raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2DepethReferance        7

/**
 * Signal ApaSlot2DepethReferance raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2DepethReferance        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Obj1X Signal ApaSlot2Obj1X of Message PAS_APASlotInfo1 (0x194)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Obj1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Obj1X and \ref GET_PAS_APASlotInfo1_ApaSlot2Obj1X instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Obj1X          1, 0, 169, 12

/**
 * Signal ApaSlot2Obj1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1X or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Obj1X        1, 0, 169, 12, 0

/**
 * Get signal ApaSlot2Obj1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Obj1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[21] >> 0) & 0x03) << 10) \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot2Obj1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Obj1X(buf, val) { \
	buf[21] &= ~(0x03 << 0); \
	buf[21] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[23] &= ~(0x03 << 6); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot2Obj1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1X(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Obj1X(buf, 0)

/**
 * Signal ApaSlot2Obj1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Obj1X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot2Obj1X raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Obj1X        0

/**
 * Signal ApaSlot2Obj1X raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Obj1X          0

/**
 * Signal ApaSlot2Obj1X raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Obj1X          4094

/**
 * Signal ApaSlot2Obj1X raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Obj1X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Obj1Y Signal ApaSlot2Obj1Y of Message PAS_APASlotInfo1 (0x194)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Obj1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Obj1Y and \ref GET_PAS_APASlotInfo1_ApaSlot2Obj1Y instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Obj1Y          1, 0, 189, 12

/**
 * Signal ApaSlot2Obj1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1Y or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Obj1Y        1, 0, 189, 12, 0

/**
 * Get signal ApaSlot2Obj1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Obj1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[23] >> 0) & 0x3f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[24] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal ApaSlot2Obj1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Obj1Y(buf, val) { \
	buf[23] &= ~(0x3f << 0); \
	buf[23] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x3f) << 0; \
	buf[24] &= ~(0x3f << 2); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal ApaSlot2Obj1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1Y(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Obj1Y(buf, 0)

/**
 * Signal ApaSlot2Obj1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Obj1Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot2Obj1Y raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Obj1Y        0

/**
 * Signal ApaSlot2Obj1Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Obj1Y          0

/**
 * Signal ApaSlot2Obj1Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Obj1Y          4094

/**
 * Signal ApaSlot2Obj1Y raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Obj1Y          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Obj1Type Signal ApaSlot2Obj1Type of Message PAS_APASlotInfo1 (0x194)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Obj1Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Obj1Type and \ref GET_PAS_APASlotInfo1_ApaSlot2Obj1Type instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Obj1Type        1, 0, 193, 2

/**
 * Signal ApaSlot2Obj1Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1Type or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Obj1Type      1, 0, 193, 2, 0

/**
 * Get signal ApaSlot2Obj1Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Obj1Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[24] >> 0) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot2Obj1Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Obj1Type(buf, val) { \
	buf[24] &= ~(0x03 << 0); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal ApaSlot2Obj1Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1Type(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Obj1Type(buf, 0)

/**
 * Signal ApaSlot2Obj1Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Obj1Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot2Obj1Type raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Obj1Type      0

/**
 * Signal ApaSlot2Obj1Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Obj1Type        0

/**
 * Signal ApaSlot2Obj1Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Obj1Type        3

/**
 * Signal ApaSlot2Obj1Type raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Obj1Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Obj1Alpha Signal ApaSlot2Obj1Alpha of Message PAS_APASlotInfo1 (0x194)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Obj1Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Obj1Alpha and \ref GET_PAS_APASlotInfo1_ApaSlot2Obj1Alpha instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Obj1Alpha        1, 0, 207, 7

/**
 * Signal ApaSlot2Obj1Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1Alpha or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Obj1Alpha      1, 0, 207, 7, 0

/**
 * Get signal ApaSlot2Obj1Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Obj1Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[25] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal ApaSlot2Obj1Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Obj1Alpha(buf, val) { \
	buf[25] &= ~(0x7f << 1); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal ApaSlot2Obj1Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Obj1Alpha(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Obj1Alpha(buf, 0)

/**
 * Signal ApaSlot2Obj1Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Obj1Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot2Obj1Alpha raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Obj1Alpha      0

/**
 * Signal ApaSlot2Obj1Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Obj1Alpha        0

/**
 * Signal ApaSlot2Obj1Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Obj1Alpha        128

/**
 * Signal ApaSlot2Obj1Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Obj1Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Obj2X Signal ApaSlot2Obj2X of Message PAS_APASlotInfo1 (0x194)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Obj2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Obj2X and \ref GET_PAS_APASlotInfo1_ApaSlot2Obj2X instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Obj2X          1, 0, 200, 12

/**
 * Signal ApaSlot2Obj2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Obj2X or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Obj2X        1, 0, 200, 12, 0

/**
 * Get signal ApaSlot2Obj2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Obj2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0x01) << 11) \
	| (uint16_t)(+(uint16_t)((buf[26] >> 0) & 0xff) << 3) \
	| (uint8_t)(+(uint8_t)((buf[27] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot2Obj2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Obj2X(buf, val) { \
	buf[25] &= ~(0x01 << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
	buf[26] &= ~(0xff << 0); \
	buf[26] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[27] &= ~(0x07 << 5); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot2Obj2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Obj2X(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Obj2X(buf, 0)

/**
 * Signal ApaSlot2Obj2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Obj2X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot2Obj2X raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Obj2X        0

/**
 * Signal ApaSlot2Obj2X raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Obj2X          0

/**
 * Signal ApaSlot2Obj2X raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Obj2X          4094

/**
 * Signal ApaSlot2Obj2X raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Obj2X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApatSlot2Obj2Y Signal ApatSlot2Obj2Y of Message PAS_APASlotInfo1 (0x194)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApatSlot2Obj2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApatSlot2Obj2Y and \ref GET_PAS_APASlotInfo1_ApatSlot2Obj2Y instead.
 */
#define SIG_PAS_APASlotInfo1_ApatSlot2Obj2Y         1, 0, 220, 12

/**
 * Signal ApatSlot2Obj2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApatSlot2Obj2Y or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApatSlot2Obj2Y       1, 0, 220, 12, 0

/**
 * Get signal ApatSlot2Obj2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApatSlot2Obj2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[27] >> 0) & 0x1f) << 7) \
	| (uint8_t)(+(uint8_t)((buf[28] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal ApatSlot2Obj2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApatSlot2Obj2Y(buf, val) { \
	buf[27] &= ~(0x1f << 0); \
	buf[27] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x1f) << 0; \
	buf[28] &= ~(0x7f << 1); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal ApatSlot2Obj2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApatSlot2Obj2Y(buf) \
	SET_PAS_APASlotInfo1_ApatSlot2Obj2Y(buf, 0)

/**
 * Signal ApatSlot2Obj2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApatSlot2Obj2Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApatSlot2Obj2Y raw initial value.
 */
#define START_PAS_APASlotInfo1_ApatSlot2Obj2Y       0

/**
 * Signal ApatSlot2Obj2Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApatSlot2Obj2Y         0

/**
 * Signal ApatSlot2Obj2Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApatSlot2Obj2Y         4094

/**
 * Signal ApatSlot2Obj2Y raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApatSlot2Obj2Y         -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Obj2Type Signal ApaSlot2Obj2Type of Message PAS_APASlotInfo1 (0x194)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Obj2Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Obj2Type and \ref GET_PAS_APASlotInfo1_ApaSlot2Obj2Type instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Obj2Type        1, 0, 224, 2

/**
 * Signal ApaSlot2Obj2Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Obj2Type or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Obj2Type      1, 0, 224, 2, 0

/**
 * Get signal ApaSlot2Obj2Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Obj2Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[28] >> 0) & 0x01) << 1) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot2Obj2Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Obj2Type(buf, val) { \
	buf[28] &= ~(0x01 << 0); \
	buf[28] |= (((uint8_t)(val) >> 1) & 0x01) << 0; \
	buf[29] &= ~(0x01 << 7); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot2Obj2Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Obj2Type(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Obj2Type(buf, 0)

/**
 * Signal ApaSlot2Obj2Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Obj2Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot2Obj2Type raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Obj2Type      0

/**
 * Signal ApaSlot2Obj2Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Obj2Type        0

/**
 * Signal ApaSlot2Obj2Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Obj2Type        3

/**
 * Signal ApaSlot2Obj2Type raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Obj2Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Obj2Alpha Signal ApaSlot2Obj2Alpha of Message PAS_APASlotInfo1 (0x194)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Obj2Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Obj2Alpha and \ref GET_PAS_APASlotInfo1_ApaSlot2Obj2Alpha instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Obj2Alpha        1, 0, 238, 7

/**
 * Signal ApaSlot2Obj2Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Obj2Alpha or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Obj2Alpha      1, 0, 238, 7, 0

/**
 * Get signal ApaSlot2Obj2Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Obj2Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[29] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal ApaSlot2Obj2Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Obj2Alpha(buf, val) { \
	buf[29] &= ~(0x7f << 0); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal ApaSlot2Obj2Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Obj2Alpha(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Obj2Alpha(buf, 0)

/**
 * Signal ApaSlot2Obj2Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Obj2Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot2Obj2Alpha raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Obj2Alpha      0

/**
 * Signal ApaSlot2Obj2Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Obj2Alpha        0

/**
 * Signal ApaSlot2Obj2Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Obj2Alpha        128

/**
 * Signal ApaSlot2Obj2Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Obj2Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Length Signal ApaSlot2Length of Message PAS_APASlotInfo1 (0x194)
 *
 * The length of the parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Length configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Length and \ref GET_PAS_APASlotInfo1_ApaSlot2Length instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Length         1, 0, 247, 11

/**
 * Signal ApaSlot2Length setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Length or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Length       1, 0, 247, 11, 0

/**
 * Get signal ApaSlot2Length from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Length(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0xff) << 3) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot2Length in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Length(buf, val) { \
	buf[30] &= ~(0xff << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[31] &= ~(0x07 << 5); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot2Length in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Length(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Length(buf, 0)

/**
 * Signal ApaSlot2Length value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Length(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot2Length raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Length       0

/**
 * Signal ApaSlot2Length raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Length         0

/**
 * Signal ApaSlot2Length raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Length         2047

/**
 * Signal ApaSlot2Length raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Length         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot2Depth Signal ApaSlot2Depth of Message PAS_APASlotInfo1 (0x194)
 *
 * Depth of parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot2Depth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot2Depth and \ref GET_PAS_APASlotInfo1_ApaSlot2Depth instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot2Depth          1, 0, 252, 10

/**
 * Signal ApaSlot2Depth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot2Depth or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot2Depth        1, 0, 252, 10, 0

/**
 * Get signal ApaSlot2Depth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot2Depth(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[31] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[32] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot2Depth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot2Depth(buf, val) { \
	buf[31] &= ~(0x1f << 0); \
	buf[31] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[32] &= ~(0x1f << 3); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot2Depth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot2Depth(buf) \
	SET_PAS_APASlotInfo1_ApaSlot2Depth(buf, 0)

/**
 * Signal ApaSlot2Depth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot2Depth(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot2Depth raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot2Depth        0

/**
 * Signal ApaSlot2Depth raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot2Depth          0

/**
 * Signal ApaSlot2Depth raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot2Depth          1023

/**
 * Signal ApaSlot2Depth raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot2Depth          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3ID Signal ApaSlot3ID of Message PAS_APASlotInfo1 (0x194)
 *
 * Parking ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3ID and \ref GET_PAS_APASlotInfo1_ApaSlot3ID instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3ID             1, 0, 299, 8

/**
 * Signal ApaSlot3ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3ID or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3ID           1, 0, 299, 8, 0

/**
 * Get signal ApaSlot3ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[37] >> 0) & 0x0f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[38] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ApaSlot3ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3ID(buf, val) { \
	buf[37] &= ~(0x0f << 0); \
	buf[37] |= (((uint8_t)(val) >> 4) & 0x0f) << 0; \
	buf[38] &= ~(0x0f << 4); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ApaSlot3ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3ID(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3ID(buf, 0)

/**
 * Signal ApaSlot3ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3ID(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot3ID raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3ID           0

/**
 * Signal ApaSlot3ID raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3ID             0

/**
 * Signal ApaSlot3ID raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3ID             255

/**
 * Signal ApaSlot3ID raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3ID             0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Status Signal ApaSlot3Status of Message PAS_APASlotInfo1 (0x194)
 *
 * Parking state
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Status and \ref GET_PAS_APASlotInfo1_ApaSlot3Status instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Status         1, 0, 307, 2

/**
 * Signal ApaSlot3Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Status or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Status       1, 0, 307, 2, 0

/**
 * Get signal ApaSlot3Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[38] >> 2) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot3Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Status(buf, val) { \
	buf[38] &= ~(0x03 << 2); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal ApaSlot3Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Status(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Status(buf, 0)

/**
 * Signal ApaSlot3Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Status(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot3Status raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Status       0

/**
 * Signal ApaSlot3Status raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Status         0

/**
 * Signal ApaSlot3Status raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Status         3

/**
 * Signal ApaSlot3Status raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Status         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Type Signal ApaSlot3Type of Message PAS_APASlotInfo1 (0x194)
 *
 * Types of parking Spaces
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Type and \ref GET_PAS_APASlotInfo1_ApaSlot3Type instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Type           1, 0, 305, 3

/**
 * Signal ApaSlot3Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Type or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Type         1, 0, 305, 3, 0

/**
 * Get signal ApaSlot3Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[38] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[39] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot3Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Type(buf, val) { \
	buf[38] &= ~(0x03 << 0); \
	buf[38] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[39] &= ~(0x01 << 7); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot3Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Type(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Type(buf, 0)

/**
 * Signal ApaSlot3Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot3Type raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Type         0

/**
 * Signal ApaSlot3Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Type           0

/**
 * Signal ApaSlot3Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Type           7

/**
 * Signal ApaSlot3Type raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Type           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3DepethReferance Signal ApaSlot3DepethReferance of Message PAS_APASlotInfo1 (0x194)
 *
 * Type of obstruction in parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3DepethReferance configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3DepethReferance and \ref GET_PAS_APASlotInfo1_ApaSlot3DepethReferance instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3DepethReferance        1, 0, 318, 3

/**
 * Signal ApaSlot3DepethReferance setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3DepethReferance or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3DepethReferance      1, 0, 318, 3, 0

/**
 * Get signal ApaSlot3DepethReferance from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3DepethReferance(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[39] >> 4) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot3DepethReferance in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3DepethReferance(buf, val) { \
	buf[39] &= ~(0x07 << 4); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal ApaSlot3DepethReferance in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3DepethReferance(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3DepethReferance(buf, 0)

/**
 * Signal ApaSlot3DepethReferance value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3DepethReferance(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot3DepethReferance raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3DepethReferance      0

/**
 * Signal ApaSlot3DepethReferance raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3DepethReferance        0

/**
 * Signal ApaSlot3DepethReferance raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3DepethReferance        7

/**
 * Signal ApaSlot3DepethReferance raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3DepethReferance        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Obj1X Signal ApaSlot3Obj1X of Message PAS_APASlotInfo1 (0x194)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Obj1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Obj1X and \ref GET_PAS_APASlotInfo1_ApaSlot3Obj1X instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Obj1X          1, 0, 315, 12

/**
 * Signal ApaSlot3Obj1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1X or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Obj1X        1, 0, 315, 12, 0

/**
 * Get signal ApaSlot3Obj1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Obj1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[39] >> 0) & 0x0f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[40] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ApaSlot3Obj1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Obj1X(buf, val) { \
	buf[39] &= ~(0x0f << 0); \
	buf[39] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
	buf[40] &= ~(0xff << 0); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ApaSlot3Obj1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1X(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Obj1X(buf, 0)

/**
 * Signal ApaSlot3Obj1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Obj1X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot3Obj1X raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Obj1X        0

/**
 * Signal ApaSlot3Obj1X raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Obj1X          0

/**
 * Signal ApaSlot3Obj1X raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Obj1X          4094

/**
 * Signal ApaSlot3Obj1X raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Obj1X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Obj1Y Signal ApaSlot3Obj1Y of Message PAS_APASlotInfo1 (0x194)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Obj1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Obj1Y and \ref GET_PAS_APASlotInfo1_ApaSlot3Obj1Y instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Obj1Y          1, 0, 335, 12

/**
 * Signal ApaSlot3Obj1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1Y or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Obj1Y        1, 0, 335, 12, 0

/**
 * Get signal ApaSlot3Obj1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Obj1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[41] >> 0) & 0xff) << 4) \
	| (uint8_t)(+(uint8_t)((buf[42] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ApaSlot3Obj1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Obj1Y(buf, val) { \
	buf[41] &= ~(0xff << 0); \
	buf[41] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[42] &= ~(0x0f << 4); \
	buf[42] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ApaSlot3Obj1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1Y(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Obj1Y(buf, 0)

/**
 * Signal ApaSlot3Obj1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Obj1Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot3Obj1Y raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Obj1Y        0

/**
 * Signal ApaSlot3Obj1Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Obj1Y          0

/**
 * Signal ApaSlot3Obj1Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Obj1Y          4094

/**
 * Signal ApaSlot3Obj1Y raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Obj1Y          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Obj1Type Signal ApaSlot3Obj1Type of Message PAS_APASlotInfo1 (0x194)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Obj1Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Obj1Type and \ref GET_PAS_APASlotInfo1_ApaSlot3Obj1Type instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Obj1Type        1, 0, 339, 2

/**
 * Signal ApaSlot3Obj1Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1Type or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Obj1Type      1, 0, 339, 2, 0

/**
 * Get signal ApaSlot3Obj1Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Obj1Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[42] >> 2) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot3Obj1Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Obj1Type(buf, val) { \
	buf[42] &= ~(0x03 << 2); \
	buf[42] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal ApaSlot3Obj1Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1Type(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Obj1Type(buf, 0)

/**
 * Signal ApaSlot3Obj1Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Obj1Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot3Obj1Type raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Obj1Type      0

/**
 * Signal ApaSlot3Obj1Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Obj1Type        0

/**
 * Signal ApaSlot3Obj1Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Obj1Type        3

/**
 * Signal ApaSlot3Obj1Type raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Obj1Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Obj1Alpha Signal ApaSlot3Obj1Alpha of Message PAS_APASlotInfo1 (0x194)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Obj1Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Obj1Alpha and \ref GET_PAS_APASlotInfo1_ApaSlot3Obj1Alpha instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Obj1Alpha        1, 0, 337, 7

/**
 * Signal ApaSlot3Obj1Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1Alpha or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Obj1Alpha      1, 0, 337, 7, 0

/**
 * Get signal ApaSlot3Obj1Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Obj1Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[42] >> 0) & 0x03) << 5) \
	| (uint8_t)(+(uint8_t)((buf[43] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot3Obj1Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Obj1Alpha(buf, val) { \
	buf[42] &= ~(0x03 << 0); \
	buf[42] |= (((uint8_t)(val) >> 5) & 0x03) << 0; \
	buf[43] &= ~(0x1f << 3); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot3Obj1Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Obj1Alpha(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Obj1Alpha(buf, 0)

/**
 * Signal ApaSlot3Obj1Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Obj1Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot3Obj1Alpha raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Obj1Alpha      0

/**
 * Signal ApaSlot3Obj1Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Obj1Alpha        0

/**
 * Signal ApaSlot3Obj1Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Obj1Alpha        128

/**
 * Signal ApaSlot3Obj1Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Obj1Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Obj2X Signal ApaSlot3Obj2X of Message PAS_APASlotInfo1 (0x194)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Obj2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Obj2X and \ref GET_PAS_APASlotInfo1_ApaSlot3Obj2X instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Obj2X          1, 0, 346, 12

/**
 * Signal ApaSlot3Obj2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Obj2X or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Obj2X        1, 0, 346, 12, 0

/**
 * Get signal ApaSlot3Obj2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Obj2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[43] >> 0) & 0x07) << 9) \
	| (uint16_t)(+(uint16_t)((buf[44] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[45] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot3Obj2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Obj2X(buf, val) { \
	buf[43] &= ~(0x07 << 0); \
	buf[43] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0; \
	buf[44] &= ~(0xff << 0); \
	buf[44] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[45] &= ~(0x01 << 7); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot3Obj2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Obj2X(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Obj2X(buf, 0)

/**
 * Signal ApaSlot3Obj2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Obj2X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot3Obj2X raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Obj2X        0

/**
 * Signal ApaSlot3Obj2X raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Obj2X          0

/**
 * Signal ApaSlot3Obj2X raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Obj2X          4094

/**
 * Signal ApaSlot3Obj2X raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Obj2X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApatSlot3Obj2Y Signal ApatSlot3Obj2Y of Message PAS_APASlotInfo1 (0x194)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApatSlot3Obj2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApatSlot3Obj2Y and \ref GET_PAS_APASlotInfo1_ApatSlot3Obj2Y instead.
 */
#define SIG_PAS_APASlotInfo1_ApatSlot3Obj2Y         1, 0, 366, 12

/**
 * Signal ApatSlot3Obj2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApatSlot3Obj2Y or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApatSlot3Obj2Y       1, 0, 366, 12, 0

/**
 * Get signal ApatSlot3Obj2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApatSlot3Obj2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[45] >> 0) & 0x7f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[46] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApatSlot3Obj2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApatSlot3Obj2Y(buf, val) { \
	buf[45] &= ~(0x7f << 0); \
	buf[45] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x7f) << 0; \
	buf[46] &= ~(0x1f << 3); \
	buf[46] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApatSlot3Obj2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApatSlot3Obj2Y(buf) \
	SET_PAS_APASlotInfo1_ApatSlot3Obj2Y(buf, 0)

/**
 * Signal ApatSlot3Obj2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApatSlot3Obj2Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApatSlot3Obj2Y raw initial value.
 */
#define START_PAS_APASlotInfo1_ApatSlot3Obj2Y       0

/**
 * Signal ApatSlot3Obj2Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApatSlot3Obj2Y         0

/**
 * Signal ApatSlot3Obj2Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApatSlot3Obj2Y         4094

/**
 * Signal ApatSlot3Obj2Y raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApatSlot3Obj2Y         -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Obj2Type Signal ApaSlot3Obj2Type of Message PAS_APASlotInfo1 (0x194)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Obj2Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Obj2Type and \ref GET_PAS_APASlotInfo1_ApaSlot3Obj2Type instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Obj2Type        1, 0, 370, 2

/**
 * Signal ApaSlot3Obj2Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Obj2Type or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Obj2Type      1, 0, 370, 2, 0

/**
 * Get signal ApaSlot3Obj2Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Obj2Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[46] >> 1) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot3Obj2Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Obj2Type(buf, val) { \
	buf[46] &= ~(0x03 << 1); \
	buf[46] |= (((uint8_t)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal ApaSlot3Obj2Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Obj2Type(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Obj2Type(buf, 0)

/**
 * Signal ApaSlot3Obj2Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Obj2Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot3Obj2Type raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Obj2Type      0

/**
 * Signal ApaSlot3Obj2Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Obj2Type        0

/**
 * Signal ApaSlot3Obj2Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Obj2Type        3

/**
 * Signal ApaSlot3Obj2Type raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Obj2Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Obj2Alpha Signal ApaSlot3Obj2Alpha of Message PAS_APASlotInfo1 (0x194)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Obj2Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Obj2Alpha and \ref GET_PAS_APASlotInfo1_ApaSlot3Obj2Alpha instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Obj2Alpha        1, 0, 368, 7

/**
 * Signal ApaSlot3Obj2Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Obj2Alpha or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Obj2Alpha      1, 0, 368, 7, 0

/**
 * Get signal ApaSlot3Obj2Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Obj2Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[46] >> 0) & 0x01) << 6) \
	| (uint8_t)(+(uint8_t)((buf[47] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal ApaSlot3Obj2Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Obj2Alpha(buf, val) { \
	buf[46] &= ~(0x01 << 0); \
	buf[46] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
	buf[47] &= ~(0x3f << 2); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal ApaSlot3Obj2Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Obj2Alpha(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Obj2Alpha(buf, 0)

/**
 * Signal ApaSlot3Obj2Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Obj2Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot3Obj2Alpha raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Obj2Alpha      0

/**
 * Signal ApaSlot3Obj2Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Obj2Alpha        0

/**
 * Signal ApaSlot3Obj2Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Obj2Alpha        128

/**
 * Signal ApaSlot3Obj2Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Obj2Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Length Signal ApaSlot3Length of Message PAS_APASlotInfo1 (0x194)
 *
 * The length of the parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Length configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Length and \ref GET_PAS_APASlotInfo1_ApaSlot3Length instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Length         1, 0, 377, 11

/**
 * Signal ApaSlot3Length setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Length or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Length       1, 0, 377, 11, 0

/**
 * Get signal ApaSlot3Length from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Length(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[47] >> 0) & 0x03) << 9) \
	| (uint16_t)(+(uint16_t)((buf[48] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[49] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot3Length in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Length(buf, val) { \
	buf[47] &= ~(0x03 << 0); \
	buf[47] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x03) << 0; \
	buf[48] &= ~(0xff << 0); \
	buf[48] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[49] &= ~(0x01 << 7); \
	buf[49] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot3Length in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Length(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Length(buf, 0)

/**
 * Signal ApaSlot3Length value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Length(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot3Length raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Length       0

/**
 * Signal ApaSlot3Length raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Length         0

/**
 * Signal ApaSlot3Length raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Length         2047

/**
 * Signal ApaSlot3Length raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Length         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo1_ApaSlot3Depth Signal ApaSlot3Depth of Message PAS_APASlotInfo1 (0x194)
 *
 * Depth of parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo1
 * @{
 */

/**
 * Signal ApaSlot3Depth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo1_ApaSlot3Depth and \ref GET_PAS_APASlotInfo1_ApaSlot3Depth instead.
 */
#define SIG_PAS_APASlotInfo1_ApaSlot3Depth          1, 0, 398, 10

/**
 * Signal ApaSlot3Depth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo1_ApaSlot3Depth or \ref INIT_PAS_APASlotInfo1 instead.
 */
#define SETUP_PAS_APASlotInfo1_ApaSlot3Depth        1, 0, 398, 10, 0

/**
 * Get signal ApaSlot3Depth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo1_ApaSlot3Depth(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[49] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[50] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot3Depth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo1_ApaSlot3Depth(buf, val) { \
	buf[49] &= ~(0x7f << 0); \
	buf[49] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[50] &= ~(0x07 << 5); \
	buf[50] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot3Depth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo1_ApaSlot3Depth(buf) \
	SET_PAS_APASlotInfo1_ApaSlot3Depth(buf, 0)

/**
 * Signal ApaSlot3Depth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo1_ApaSlot3Depth(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot3Depth raw initial value.
 */
#define START_PAS_APASlotInfo1_ApaSlot3Depth        0

/**
 * Signal ApaSlot3Depth raw minimum value.
 */
#define MIN_PAS_APASlotInfo1_ApaSlot3Depth          0

/**
 * Signal ApaSlot3Depth raw maximum value.
 */
#define MAX_PAS_APASlotInfo1_ApaSlot3Depth          1023

/**
 * Signal ApaSlot3Depth raw offset value.
 */
#define OFF_PAS_APASlotInfo1_ApaSlot3Depth          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum Signal PAS_APASlotInfo2_Checksum of Message PAS_APASlotInfo2 (0x195)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal PAS_APASlotInfo2_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum and \ref GET_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum instead.
 */
#define SIG_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum        1, 0, 7, 8

/**
 * Signal PAS_APASlotInfo2_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_APASlotInfo2_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_APASlotInfo2_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_APASlotInfo2_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum(buf) \
	SET_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum(buf, 0)

/**
 * Signal PAS_APASlotInfo2_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_APASlotInfo2_Checksum raw initial value.
 */
#define START_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum      0

/**
 * Signal PAS_APASlotInfo2_Checksum raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum        0

/**
 * Signal PAS_APASlotInfo2_Checksum raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum        255

/**
 * Signal PAS_APASlotInfo2_Checksum raw offset value.
 */
#define OFF_PAS_APASlotInfo2_PAS_APASlotInfo2_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter Signal PAS_APASlotInfo2_MsgCounter of Message PAS_APASlotInfo2 (0x195)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal PAS_APASlotInfo2_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter and \ref GET_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter instead.
 */
#define SIG_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_APASlotInfo2_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_APASlotInfo2_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_APASlotInfo2_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_APASlotInfo2_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter(buf) \
	SET_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter(buf, 0)

/**
 * Signal PAS_APASlotInfo2_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_APASlotInfo2_MsgCounter raw initial value.
 */
#define START_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter      0

/**
 * Signal PAS_APASlotInfo2_MsgCounter raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter        0

/**
 * Signal PAS_APASlotInfo2_MsgCounter raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter        15

/**
 * Signal PAS_APASlotInfo2_MsgCounter raw offset value.
 */
#define OFF_PAS_APASlotInfo2_PAS_APASlotInfo2_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4ID Signal ApaSlot4ID of Message PAS_APASlotInfo2 (0x195)
 *
 * Parking ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4ID and \ref GET_PAS_APASlotInfo2_ApaSlot4ID instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4ID             1, 0, 23, 8

/**
 * Signal ApaSlot4ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4ID or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4ID           1, 0, 23, 8, 0

/**
 * Get signal ApaSlot4ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ApaSlot4ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4ID(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ApaSlot4ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4ID(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4ID(buf, 0)

/**
 * Signal ApaSlot4ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4ID(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot4ID raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4ID           0

/**
 * Signal ApaSlot4ID raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4ID             0

/**
 * Signal ApaSlot4ID raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4ID             255

/**
 * Signal ApaSlot4ID raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4ID             0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Status Signal ApaSlot4Status of Message PAS_APASlotInfo2 (0x195)
 *
 * Parking state
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Status and \ref GET_PAS_APASlotInfo2_ApaSlot4Status instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Status         1, 0, 31, 2

/**
 * Signal ApaSlot4Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Status or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Status       1, 0, 31, 2, 0

/**
 * Get signal ApaSlot4Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot4Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Status(buf, val) { \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot4Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Status(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Status(buf, 0)

/**
 * Signal ApaSlot4Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Status(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot4Status raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Status       0

/**
 * Signal ApaSlot4Status raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Status         0

/**
 * Signal ApaSlot4Status raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Status         3

/**
 * Signal ApaSlot4Status raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Status         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Type Signal ApaSlot4Type of Message PAS_APASlotInfo2 (0x195)
 *
 * Types of parking Spaces
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Type and \ref GET_PAS_APASlotInfo2_ApaSlot4Type instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Type           1, 0, 29, 3

/**
 * Signal ApaSlot4Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Type or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Type         1, 0, 29, 3, 0

/**
 * Get signal ApaSlot4Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 3) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot4Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Type(buf, val) { \
	buf[3] &= ~(0x07 << 3); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal ApaSlot4Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Type(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Type(buf, 0)

/**
 * Signal ApaSlot4Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot4Type raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Type         0

/**
 * Signal ApaSlot4Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Type           0

/**
 * Signal ApaSlot4Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Type           7

/**
 * Signal ApaSlot4Type raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Type           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4DepethReferance Signal ApaSlot4DepethReferance of Message PAS_APASlotInfo2 (0x195)
 *
 * Type of obstruction in parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4DepethReferance configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4DepethReferance and \ref GET_PAS_APASlotInfo2_ApaSlot4DepethReferance instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4DepethReferance        1, 0, 26, 3

/**
 * Signal ApaSlot4DepethReferance setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4DepethReferance or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4DepethReferance      1, 0, 26, 3, 0

/**
 * Get signal ApaSlot4DepethReferance from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4DepethReferance(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot4DepethReferance in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4DepethReferance(buf, val) { \
	buf[3] &= ~(0x07 << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal ApaSlot4DepethReferance in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4DepethReferance(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4DepethReferance(buf, 0)

/**
 * Signal ApaSlot4DepethReferance value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4DepethReferance(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot4DepethReferance raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4DepethReferance      0

/**
 * Signal ApaSlot4DepethReferance raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4DepethReferance        0

/**
 * Signal ApaSlot4DepethReferance raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4DepethReferance        7

/**
 * Signal ApaSlot4DepethReferance raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4DepethReferance        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Obj1X Signal ApaSlot4Obj1X of Message PAS_APASlotInfo2 (0x195)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Obj1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Obj1X and \ref GET_PAS_APASlotInfo2_ApaSlot4Obj1X instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Obj1X          1, 0, 39, 12

/**
 * Signal ApaSlot4Obj1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1X or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Obj1X        1, 0, 39, 12, 0

/**
 * Get signal ApaSlot4Obj1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Obj1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 4) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ApaSlot4Obj1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Obj1X(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[5] &= ~(0x0f << 4); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ApaSlot4Obj1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1X(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Obj1X(buf, 0)

/**
 * Signal ApaSlot4Obj1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Obj1X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot4Obj1X raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Obj1X        0

/**
 * Signal ApaSlot4Obj1X raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Obj1X          0

/**
 * Signal ApaSlot4Obj1X raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Obj1X          4094

/**
 * Signal ApaSlot4Obj1X raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Obj1X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Obj1Y Signal ApaSlot4Obj1Y of Message PAS_APASlotInfo2 (0x195)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Obj1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Obj1Y and \ref GET_PAS_APASlotInfo2_ApaSlot4Obj1Y instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Obj1Y          1, 0, 43, 12

/**
 * Signal ApaSlot4Obj1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1Y or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Obj1Y        1, 0, 43, 12, 0

/**
 * Get signal ApaSlot4Obj1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Obj1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x0f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ApaSlot4Obj1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Obj1Y(buf, val) { \
	buf[5] &= ~(0x0f << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ApaSlot4Obj1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1Y(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Obj1Y(buf, 0)

/**
 * Signal ApaSlot4Obj1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Obj1Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot4Obj1Y raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Obj1Y        0

/**
 * Signal ApaSlot4Obj1Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Obj1Y          0

/**
 * Signal ApaSlot4Obj1Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Obj1Y          4094

/**
 * Signal ApaSlot4Obj1Y raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Obj1Y          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Obj1Type Signal ApaSlot4Obj1Type of Message PAS_APASlotInfo2 (0x195)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Obj1Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Obj1Type and \ref GET_PAS_APASlotInfo2_ApaSlot4Obj1Type instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Obj1Type        1, 0, 63, 2

/**
 * Signal ApaSlot4Obj1Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1Type or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Obj1Type      1, 0, 63, 2, 0

/**
 * Get signal ApaSlot4Obj1Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Obj1Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot4Obj1Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Obj1Type(buf, val) { \
	buf[7] &= ~(0x03 << 6); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot4Obj1Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1Type(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Obj1Type(buf, 0)

/**
 * Signal ApaSlot4Obj1Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Obj1Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot4Obj1Type raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Obj1Type      0

/**
 * Signal ApaSlot4Obj1Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Obj1Type        0

/**
 * Signal ApaSlot4Obj1Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Obj1Type        3

/**
 * Signal ApaSlot4Obj1Type raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Obj1Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Obj1Alpha Signal ApaSlot4Obj1Alpha of Message PAS_APASlotInfo2 (0x195)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Obj1Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Obj1Alpha and \ref GET_PAS_APASlotInfo2_ApaSlot4Obj1Alpha instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Obj1Alpha        1, 0, 61, 7

/**
 * Signal ApaSlot4Obj1Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1Alpha or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Obj1Alpha      1, 0, 61, 7, 0

/**
 * Get signal ApaSlot4Obj1Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Obj1Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x3f) << 1) \
	| (uint8_t)(+(uint8_t)((buf[8] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot4Obj1Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Obj1Alpha(buf, val) { \
	buf[7] &= ~(0x3f << 0); \
	buf[7] |= (((uint8_t)(val) >> 1) & 0x3f) << 0; \
	buf[8] &= ~(0x01 << 7); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot4Obj1Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Obj1Alpha(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Obj1Alpha(buf, 0)

/**
 * Signal ApaSlot4Obj1Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Obj1Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot4Obj1Alpha raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Obj1Alpha      0

/**
 * Signal ApaSlot4Obj1Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Obj1Alpha        0

/**
 * Signal ApaSlot4Obj1Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Obj1Alpha        128

/**
 * Signal ApaSlot4Obj1Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Obj1Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Obj2X Signal ApaSlot4Obj2X of Message PAS_APASlotInfo2 (0x195)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Obj2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Obj2X and \ref GET_PAS_APASlotInfo2_ApaSlot4Obj2X instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Obj2X          1, 0, 70, 12

/**
 * Signal ApaSlot4Obj2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Obj2X or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Obj2X        1, 0, 70, 12, 0

/**
 * Get signal ApaSlot4Obj2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Obj2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x7f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot4Obj2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Obj2X(buf, val) { \
	buf[8] &= ~(0x7f << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x7f) << 0; \
	buf[9] &= ~(0x1f << 3); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot4Obj2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Obj2X(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Obj2X(buf, 0)

/**
 * Signal ApaSlot4Obj2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Obj2X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot4Obj2X raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Obj2X        0

/**
 * Signal ApaSlot4Obj2X raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Obj2X          0

/**
 * Signal ApaSlot4Obj2X raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Obj2X          4094

/**
 * Signal ApaSlot4Obj2X raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Obj2X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApatSlot4Obj2Y Signal ApatSlot4Obj2Y of Message PAS_APASlotInfo2 (0x195)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApatSlot4Obj2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApatSlot4Obj2Y and \ref GET_PAS_APASlotInfo2_ApatSlot4Obj2Y instead.
 */
#define SIG_PAS_APASlotInfo2_ApatSlot4Obj2Y         1, 0, 74, 12

/**
 * Signal ApatSlot4Obj2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApatSlot4Obj2Y or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApatSlot4Obj2Y       1, 0, 74, 12, 0

/**
 * Get signal ApatSlot4Obj2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApatSlot4Obj2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x07) << 9) \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApatSlot4Obj2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApatSlot4Obj2Y(buf, val) { \
	buf[9] &= ~(0x07 << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0; \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[11] &= ~(0x01 << 7); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApatSlot4Obj2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApatSlot4Obj2Y(buf) \
	SET_PAS_APASlotInfo2_ApatSlot4Obj2Y(buf, 0)

/**
 * Signal ApatSlot4Obj2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApatSlot4Obj2Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApatSlot4Obj2Y raw initial value.
 */
#define START_PAS_APASlotInfo2_ApatSlot4Obj2Y       0

/**
 * Signal ApatSlot4Obj2Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApatSlot4Obj2Y         0

/**
 * Signal ApatSlot4Obj2Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApatSlot4Obj2Y         4094

/**
 * Signal ApatSlot4Obj2Y raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApatSlot4Obj2Y         -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Obj2Type Signal ApaSlot4Obj2Type of Message PAS_APASlotInfo2 (0x195)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Obj2Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Obj2Type and \ref GET_PAS_APASlotInfo2_ApaSlot4Obj2Type instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Obj2Type        1, 0, 94, 2

/**
 * Signal ApaSlot4Obj2Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Obj2Type or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Obj2Type      1, 0, 94, 2, 0

/**
 * Get signal ApaSlot4Obj2Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Obj2Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[11] >> 5) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot4Obj2Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Obj2Type(buf, val) { \
	buf[11] &= ~(0x03 << 5); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x03) << 5; \
}

/**
 * Set signal ApaSlot4Obj2Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Obj2Type(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Obj2Type(buf, 0)

/**
 * Signal ApaSlot4Obj2Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Obj2Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot4Obj2Type raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Obj2Type      0

/**
 * Signal ApaSlot4Obj2Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Obj2Type        0

/**
 * Signal ApaSlot4Obj2Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Obj2Type        3

/**
 * Signal ApaSlot4Obj2Type raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Obj2Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Obj2Alpha Signal ApaSlot4Obj2Alpha of Message PAS_APASlotInfo2 (0x195)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Obj2Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Obj2Alpha and \ref GET_PAS_APASlotInfo2_ApaSlot4Obj2Alpha instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Obj2Alpha        1, 0, 92, 7

/**
 * Signal ApaSlot4Obj2Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Obj2Alpha or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Obj2Alpha      1, 0, 92, 7, 0

/**
 * Get signal ApaSlot4Obj2Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Obj2Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[11] >> 0) & 0x1f) << 2) \
	| (uint8_t)(+(uint8_t)((buf[12] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot4Obj2Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Obj2Alpha(buf, val) { \
	buf[11] &= ~(0x1f << 0); \
	buf[11] |= (((uint8_t)(val) >> 2) & 0x1f) << 0; \
	buf[12] &= ~(0x03 << 6); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot4Obj2Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Obj2Alpha(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Obj2Alpha(buf, 0)

/**
 * Signal ApaSlot4Obj2Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Obj2Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot4Obj2Alpha raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Obj2Alpha      0

/**
 * Signal ApaSlot4Obj2Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Obj2Alpha        0

/**
 * Signal ApaSlot4Obj2Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Obj2Alpha        128

/**
 * Signal ApaSlot4Obj2Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Obj2Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Length Signal ApaSlot4Length of Message PAS_APASlotInfo2 (0x195)
 *
 * The length of the parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Length configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Length and \ref GET_PAS_APASlotInfo2_ApaSlot4Length instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Length         1, 0, 101, 11

/**
 * Signal ApaSlot4Length setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Length or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Length       1, 0, 101, 11, 0

/**
 * Get signal ApaSlot4Length from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Length(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0x3f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot4Length in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Length(buf, val) { \
	buf[12] &= ~(0x3f << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x3f) << 0; \
	buf[13] &= ~(0x1f << 3); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot4Length in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Length(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Length(buf, 0)

/**
 * Signal ApaSlot4Length value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Length(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot4Length raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Length       0

/**
 * Signal ApaSlot4Length raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Length         0

/**
 * Signal ApaSlot4Length raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Length         2047

/**
 * Signal ApaSlot4Length raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Length         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot4Depth Signal ApaSlot4Depth of Message PAS_APASlotInfo2 (0x195)
 *
 * Depth of parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot4Depth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot4Depth and \ref GET_PAS_APASlotInfo2_ApaSlot4Depth instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot4Depth          1, 0, 106, 10

/**
 * Signal ApaSlot4Depth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot4Depth or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot4Depth        1, 0, 106, 10, 0

/**
 * Get signal ApaSlot4Depth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot4Depth(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal ApaSlot4Depth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot4Depth(buf, val) { \
	buf[13] &= ~(0x07 << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[14] &= ~(0x7f << 1); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal ApaSlot4Depth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot4Depth(buf) \
	SET_PAS_APASlotInfo2_ApaSlot4Depth(buf, 0)

/**
 * Signal ApaSlot4Depth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot4Depth(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot4Depth raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot4Depth        0

/**
 * Signal ApaSlot4Depth raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot4Depth          0

/**
 * Signal ApaSlot4Depth raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot4Depth          1023

/**
 * Signal ApaSlot4Depth raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot4Depth          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5ID Signal ApaSlot5ID of Message PAS_APASlotInfo2 (0x195)
 *
 * Parking ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5ID and \ref GET_PAS_APASlotInfo2_ApaSlot5ID instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5ID             1, 0, 153, 8

/**
 * Signal ApaSlot5ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5ID or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5ID           1, 0, 153, 8, 0

/**
 * Get signal ApaSlot5ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[19] >> 0) & 0x03) << 6) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal ApaSlot5ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5ID(buf, val) { \
	buf[19] &= ~(0x03 << 0); \
	buf[19] |= (((uint8_t)(val) >> 6) & 0x03) << 0; \
	buf[20] &= ~(0x3f << 2); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal ApaSlot5ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5ID(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5ID(buf, 0)

/**
 * Signal ApaSlot5ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5ID(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot5ID raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5ID           0

/**
 * Signal ApaSlot5ID raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5ID             0

/**
 * Signal ApaSlot5ID raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5ID             255

/**
 * Signal ApaSlot5ID raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5ID             0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Status Signal ApaSlot5Status of Message PAS_APASlotInfo2 (0x195)
 *
 * Parking state
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Status and \ref GET_PAS_APASlotInfo2_ApaSlot5Status instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Status         1, 0, 161, 2

/**
 * Signal ApaSlot5Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Status or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Status       1, 0, 161, 2, 0

/**
 * Get signal ApaSlot5Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[20] >> 0) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot5Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Status(buf, val) { \
	buf[20] &= ~(0x03 << 0); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal ApaSlot5Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Status(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Status(buf, 0)

/**
 * Signal ApaSlot5Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Status(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot5Status raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Status       0

/**
 * Signal ApaSlot5Status raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Status         0

/**
 * Signal ApaSlot5Status raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Status         3

/**
 * Signal ApaSlot5Status raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Status         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Type Signal ApaSlot5Type of Message PAS_APASlotInfo2 (0x195)
 *
 * Types of parking Spaces
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Type and \ref GET_PAS_APASlotInfo2_ApaSlot5Type instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Type           1, 0, 175, 3

/**
 * Signal ApaSlot5Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Type or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Type         1, 0, 175, 3, 0

/**
 * Get signal ApaSlot5Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot5Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Type(buf, val) { \
	buf[21] &= ~(0x07 << 5); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot5Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Type(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Type(buf, 0)

/**
 * Signal ApaSlot5Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot5Type raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Type         0

/**
 * Signal ApaSlot5Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Type           0

/**
 * Signal ApaSlot5Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Type           7

/**
 * Signal ApaSlot5Type raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Type           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5DepethReferance Signal ApaSlot5DepethReferance of Message PAS_APASlotInfo2 (0x195)
 *
 * Type of obstruction in parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5DepethReferance configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5DepethReferance and \ref GET_PAS_APASlotInfo2_ApaSlot5DepethReferance instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5DepethReferance        1, 0, 172, 3

/**
 * Signal ApaSlot5DepethReferance setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5DepethReferance or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5DepethReferance      1, 0, 172, 3, 0

/**
 * Get signal ApaSlot5DepethReferance from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5DepethReferance(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 2) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot5DepethReferance in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5DepethReferance(buf, val) { \
	buf[21] &= ~(0x07 << 2); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal ApaSlot5DepethReferance in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5DepethReferance(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5DepethReferance(buf, 0)

/**
 * Signal ApaSlot5DepethReferance value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5DepethReferance(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot5DepethReferance raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5DepethReferance      0

/**
 * Signal ApaSlot5DepethReferance raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5DepethReferance        0

/**
 * Signal ApaSlot5DepethReferance raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5DepethReferance        7

/**
 * Signal ApaSlot5DepethReferance raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5DepethReferance        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Obj1X Signal ApaSlot5Obj1X of Message PAS_APASlotInfo2 (0x195)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Obj1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Obj1X and \ref GET_PAS_APASlotInfo2_ApaSlot5Obj1X instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Obj1X          1, 0, 169, 12

/**
 * Signal ApaSlot5Obj1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1X or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Obj1X        1, 0, 169, 12, 0

/**
 * Get signal ApaSlot5Obj1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Obj1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[21] >> 0) & 0x03) << 10) \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot5Obj1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Obj1X(buf, val) { \
	buf[21] &= ~(0x03 << 0); \
	buf[21] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[23] &= ~(0x03 << 6); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot5Obj1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1X(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Obj1X(buf, 0)

/**
 * Signal ApaSlot5Obj1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Obj1X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot5Obj1X raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Obj1X        0

/**
 * Signal ApaSlot5Obj1X raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Obj1X          0

/**
 * Signal ApaSlot5Obj1X raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Obj1X          4094

/**
 * Signal ApaSlot5Obj1X raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Obj1X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Obj1Y Signal ApaSlot5Obj1Y of Message PAS_APASlotInfo2 (0x195)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Obj1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Obj1Y and \ref GET_PAS_APASlotInfo2_ApaSlot5Obj1Y instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Obj1Y          1, 0, 189, 12

/**
 * Signal ApaSlot5Obj1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1Y or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Obj1Y        1, 0, 189, 12, 0

/**
 * Get signal ApaSlot5Obj1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Obj1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[23] >> 0) & 0x3f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[24] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal ApaSlot5Obj1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Obj1Y(buf, val) { \
	buf[23] &= ~(0x3f << 0); \
	buf[23] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x3f) << 0; \
	buf[24] &= ~(0x3f << 2); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal ApaSlot5Obj1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1Y(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Obj1Y(buf, 0)

/**
 * Signal ApaSlot5Obj1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Obj1Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot5Obj1Y raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Obj1Y        0

/**
 * Signal ApaSlot5Obj1Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Obj1Y          0

/**
 * Signal ApaSlot5Obj1Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Obj1Y          4094

/**
 * Signal ApaSlot5Obj1Y raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Obj1Y          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Obj1Type Signal ApaSlot5Obj1Type of Message PAS_APASlotInfo2 (0x195)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Obj1Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Obj1Type and \ref GET_PAS_APASlotInfo2_ApaSlot5Obj1Type instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Obj1Type        1, 0, 193, 2

/**
 * Signal ApaSlot5Obj1Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1Type or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Obj1Type      1, 0, 193, 2, 0

/**
 * Get signal ApaSlot5Obj1Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Obj1Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[24] >> 0) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot5Obj1Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Obj1Type(buf, val) { \
	buf[24] &= ~(0x03 << 0); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal ApaSlot5Obj1Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1Type(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Obj1Type(buf, 0)

/**
 * Signal ApaSlot5Obj1Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Obj1Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot5Obj1Type raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Obj1Type      0

/**
 * Signal ApaSlot5Obj1Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Obj1Type        0

/**
 * Signal ApaSlot5Obj1Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Obj1Type        3

/**
 * Signal ApaSlot5Obj1Type raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Obj1Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Obj1Alpha Signal ApaSlot5Obj1Alpha of Message PAS_APASlotInfo2 (0x195)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Obj1Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Obj1Alpha and \ref GET_PAS_APASlotInfo2_ApaSlot5Obj1Alpha instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Obj1Alpha        1, 0, 207, 7

/**
 * Signal ApaSlot5Obj1Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1Alpha or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Obj1Alpha      1, 0, 207, 7, 0

/**
 * Get signal ApaSlot5Obj1Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Obj1Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[25] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal ApaSlot5Obj1Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Obj1Alpha(buf, val) { \
	buf[25] &= ~(0x7f << 1); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal ApaSlot5Obj1Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Obj1Alpha(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Obj1Alpha(buf, 0)

/**
 * Signal ApaSlot5Obj1Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Obj1Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot5Obj1Alpha raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Obj1Alpha      0

/**
 * Signal ApaSlot5Obj1Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Obj1Alpha        0

/**
 * Signal ApaSlot5Obj1Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Obj1Alpha        128

/**
 * Signal ApaSlot5Obj1Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Obj1Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Obj2X Signal ApaSlot5Obj2X of Message PAS_APASlotInfo2 (0x195)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Obj2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Obj2X and \ref GET_PAS_APASlotInfo2_ApaSlot5Obj2X instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Obj2X          1, 0, 200, 12

/**
 * Signal ApaSlot5Obj2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Obj2X or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Obj2X        1, 0, 200, 12, 0

/**
 * Get signal ApaSlot5Obj2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Obj2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0x01) << 11) \
	| (uint16_t)(+(uint16_t)((buf[26] >> 0) & 0xff) << 3) \
	| (uint8_t)(+(uint8_t)((buf[27] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot5Obj2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Obj2X(buf, val) { \
	buf[25] &= ~(0x01 << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
	buf[26] &= ~(0xff << 0); \
	buf[26] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[27] &= ~(0x07 << 5); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot5Obj2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Obj2X(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Obj2X(buf, 0)

/**
 * Signal ApaSlot5Obj2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Obj2X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot5Obj2X raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Obj2X        0

/**
 * Signal ApaSlot5Obj2X raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Obj2X          0

/**
 * Signal ApaSlot5Obj2X raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Obj2X          4094

/**
 * Signal ApaSlot5Obj2X raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Obj2X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApatSlot5Obj2Y Signal ApatSlot5Obj2Y of Message PAS_APASlotInfo2 (0x195)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApatSlot5Obj2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApatSlot5Obj2Y and \ref GET_PAS_APASlotInfo2_ApatSlot5Obj2Y instead.
 */
#define SIG_PAS_APASlotInfo2_ApatSlot5Obj2Y         1, 0, 220, 12

/**
 * Signal ApatSlot5Obj2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApatSlot5Obj2Y or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApatSlot5Obj2Y       1, 0, 220, 12, 0

/**
 * Get signal ApatSlot5Obj2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApatSlot5Obj2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[27] >> 0) & 0x1f) << 7) \
	| (uint8_t)(+(uint8_t)((buf[28] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal ApatSlot5Obj2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApatSlot5Obj2Y(buf, val) { \
	buf[27] &= ~(0x1f << 0); \
	buf[27] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x1f) << 0; \
	buf[28] &= ~(0x7f << 1); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal ApatSlot5Obj2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApatSlot5Obj2Y(buf) \
	SET_PAS_APASlotInfo2_ApatSlot5Obj2Y(buf, 0)

/**
 * Signal ApatSlot5Obj2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApatSlot5Obj2Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApatSlot5Obj2Y raw initial value.
 */
#define START_PAS_APASlotInfo2_ApatSlot5Obj2Y       0

/**
 * Signal ApatSlot5Obj2Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApatSlot5Obj2Y         0

/**
 * Signal ApatSlot5Obj2Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApatSlot5Obj2Y         4094

/**
 * Signal ApatSlot5Obj2Y raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApatSlot5Obj2Y         -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Obj2Type Signal ApaSlot5Obj2Type of Message PAS_APASlotInfo2 (0x195)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Obj2Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Obj2Type and \ref GET_PAS_APASlotInfo2_ApaSlot5Obj2Type instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Obj2Type        1, 0, 224, 2

/**
 * Signal ApaSlot5Obj2Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Obj2Type or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Obj2Type      1, 0, 224, 2, 0

/**
 * Get signal ApaSlot5Obj2Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Obj2Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[28] >> 0) & 0x01) << 1) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot5Obj2Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Obj2Type(buf, val) { \
	buf[28] &= ~(0x01 << 0); \
	buf[28] |= (((uint8_t)(val) >> 1) & 0x01) << 0; \
	buf[29] &= ~(0x01 << 7); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot5Obj2Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Obj2Type(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Obj2Type(buf, 0)

/**
 * Signal ApaSlot5Obj2Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Obj2Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot5Obj2Type raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Obj2Type      0

/**
 * Signal ApaSlot5Obj2Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Obj2Type        0

/**
 * Signal ApaSlot5Obj2Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Obj2Type        3

/**
 * Signal ApaSlot5Obj2Type raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Obj2Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Obj2Alpha Signal ApaSlot5Obj2Alpha of Message PAS_APASlotInfo2 (0x195)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Obj2Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Obj2Alpha and \ref GET_PAS_APASlotInfo2_ApaSlot5Obj2Alpha instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Obj2Alpha        1, 0, 238, 7

/**
 * Signal ApaSlot5Obj2Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Obj2Alpha or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Obj2Alpha      1, 0, 238, 7, 0

/**
 * Get signal ApaSlot5Obj2Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Obj2Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[29] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal ApaSlot5Obj2Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Obj2Alpha(buf, val) { \
	buf[29] &= ~(0x7f << 0); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal ApaSlot5Obj2Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Obj2Alpha(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Obj2Alpha(buf, 0)

/**
 * Signal ApaSlot5Obj2Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Obj2Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot5Obj2Alpha raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Obj2Alpha      0

/**
 * Signal ApaSlot5Obj2Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Obj2Alpha        0

/**
 * Signal ApaSlot5Obj2Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Obj2Alpha        128

/**
 * Signal ApaSlot5Obj2Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Obj2Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Length Signal ApaSlot5Length of Message PAS_APASlotInfo2 (0x195)
 *
 * The length of the parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Length configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Length and \ref GET_PAS_APASlotInfo2_ApaSlot5Length instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Length         1, 0, 247, 11

/**
 * Signal ApaSlot5Length setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Length or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Length       1, 0, 247, 11, 0

/**
 * Get signal ApaSlot5Length from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Length(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0xff) << 3) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot5Length in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Length(buf, val) { \
	buf[30] &= ~(0xff << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[31] &= ~(0x07 << 5); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot5Length in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Length(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Length(buf, 0)

/**
 * Signal ApaSlot5Length value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Length(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot5Length raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Length       0

/**
 * Signal ApaSlot5Length raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Length         0

/**
 * Signal ApaSlot5Length raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Length         2047

/**
 * Signal ApaSlot5Length raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Length         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot5Depth Signal ApaSlot5Depth of Message PAS_APASlotInfo2 (0x195)
 *
 * Depth of parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot5Depth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot5Depth and \ref GET_PAS_APASlotInfo2_ApaSlot5Depth instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot5Depth          1, 0, 252, 10

/**
 * Signal ApaSlot5Depth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot5Depth or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot5Depth        1, 0, 252, 10, 0

/**
 * Get signal ApaSlot5Depth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot5Depth(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[31] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[32] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot5Depth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot5Depth(buf, val) { \
	buf[31] &= ~(0x1f << 0); \
	buf[31] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[32] &= ~(0x1f << 3); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot5Depth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot5Depth(buf) \
	SET_PAS_APASlotInfo2_ApaSlot5Depth(buf, 0)

/**
 * Signal ApaSlot5Depth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot5Depth(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot5Depth raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot5Depth        0

/**
 * Signal ApaSlot5Depth raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot5Depth          0

/**
 * Signal ApaSlot5Depth raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot5Depth          1023

/**
 * Signal ApaSlot5Depth raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot5Depth          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6ID Signal ApaSlot6ID of Message PAS_APASlotInfo2 (0x195)
 *
 * Parking ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6ID and \ref GET_PAS_APASlotInfo2_ApaSlot6ID instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6ID             1, 0, 299, 8

/**
 * Signal ApaSlot6ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6ID or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6ID           1, 0, 299, 8, 0

/**
 * Get signal ApaSlot6ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[37] >> 0) & 0x0f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[38] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ApaSlot6ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6ID(buf, val) { \
	buf[37] &= ~(0x0f << 0); \
	buf[37] |= (((uint8_t)(val) >> 4) & 0x0f) << 0; \
	buf[38] &= ~(0x0f << 4); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ApaSlot6ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6ID(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6ID(buf, 0)

/**
 * Signal ApaSlot6ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6ID(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot6ID raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6ID           0

/**
 * Signal ApaSlot6ID raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6ID             0

/**
 * Signal ApaSlot6ID raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6ID             255

/**
 * Signal ApaSlot6ID raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6ID             0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Status Signal ApaSlot6Status of Message PAS_APASlotInfo2 (0x195)
 *
 * Parking state
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Status and \ref GET_PAS_APASlotInfo2_ApaSlot6Status instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Status         1, 0, 307, 2

/**
 * Signal ApaSlot6Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Status or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Status       1, 0, 307, 2, 0

/**
 * Get signal ApaSlot6Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[38] >> 2) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot6Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Status(buf, val) { \
	buf[38] &= ~(0x03 << 2); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal ApaSlot6Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Status(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Status(buf, 0)

/**
 * Signal ApaSlot6Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Status(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot6Status raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Status       0

/**
 * Signal ApaSlot6Status raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Status         0

/**
 * Signal ApaSlot6Status raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Status         3

/**
 * Signal ApaSlot6Status raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Status         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Type Signal ApaSlot6Type of Message PAS_APASlotInfo2 (0x195)
 *
 * Types of parking Spaces
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Type and \ref GET_PAS_APASlotInfo2_ApaSlot6Type instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Type           1, 0, 305, 3

/**
 * Signal ApaSlot6Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Type or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Type         1, 0, 305, 3, 0

/**
 * Get signal ApaSlot6Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[38] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[39] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot6Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Type(buf, val) { \
	buf[38] &= ~(0x03 << 0); \
	buf[38] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[39] &= ~(0x01 << 7); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot6Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Type(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Type(buf, 0)

/**
 * Signal ApaSlot6Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot6Type raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Type         0

/**
 * Signal ApaSlot6Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Type           0

/**
 * Signal ApaSlot6Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Type           7

/**
 * Signal ApaSlot6Type raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Type           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6DepethReferance Signal ApaSlot6DepethReferance of Message PAS_APASlotInfo2 (0x195)
 *
 * Type of obstruction in parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6DepethReferance configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6DepethReferance and \ref GET_PAS_APASlotInfo2_ApaSlot6DepethReferance instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6DepethReferance        1, 0, 318, 3

/**
 * Signal ApaSlot6DepethReferance setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6DepethReferance or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6DepethReferance      1, 0, 318, 3, 0

/**
 * Get signal ApaSlot6DepethReferance from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6DepethReferance(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[39] >> 4) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot6DepethReferance in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6DepethReferance(buf, val) { \
	buf[39] &= ~(0x07 << 4); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal ApaSlot6DepethReferance in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6DepethReferance(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6DepethReferance(buf, 0)

/**
 * Signal ApaSlot6DepethReferance value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6DepethReferance(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot6DepethReferance raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6DepethReferance      0

/**
 * Signal ApaSlot6DepethReferance raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6DepethReferance        0

/**
 * Signal ApaSlot6DepethReferance raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6DepethReferance        7

/**
 * Signal ApaSlot6DepethReferance raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6DepethReferance        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Obj1X Signal ApaSlot6Obj1X of Message PAS_APASlotInfo2 (0x195)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Obj1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Obj1X and \ref GET_PAS_APASlotInfo2_ApaSlot6Obj1X instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Obj1X          1, 0, 315, 12

/**
 * Signal ApaSlot6Obj1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1X or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Obj1X        1, 0, 315, 12, 0

/**
 * Get signal ApaSlot6Obj1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Obj1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[39] >> 0) & 0x0f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[40] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ApaSlot6Obj1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Obj1X(buf, val) { \
	buf[39] &= ~(0x0f << 0); \
	buf[39] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
	buf[40] &= ~(0xff << 0); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ApaSlot6Obj1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1X(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Obj1X(buf, 0)

/**
 * Signal ApaSlot6Obj1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Obj1X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot6Obj1X raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Obj1X        0

/**
 * Signal ApaSlot6Obj1X raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Obj1X          0

/**
 * Signal ApaSlot6Obj1X raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Obj1X          4094

/**
 * Signal ApaSlot6Obj1X raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Obj1X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Obj1Y Signal ApaSlot6Obj1Y of Message PAS_APASlotInfo2 (0x195)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Obj1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Obj1Y and \ref GET_PAS_APASlotInfo2_ApaSlot6Obj1Y instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Obj1Y          1, 0, 335, 12

/**
 * Signal ApaSlot6Obj1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1Y or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Obj1Y        1, 0, 335, 12, 0

/**
 * Get signal ApaSlot6Obj1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Obj1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[41] >> 0) & 0xff) << 4) \
	| (uint8_t)(+(uint8_t)((buf[42] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ApaSlot6Obj1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Obj1Y(buf, val) { \
	buf[41] &= ~(0xff << 0); \
	buf[41] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[42] &= ~(0x0f << 4); \
	buf[42] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ApaSlot6Obj1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1Y(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Obj1Y(buf, 0)

/**
 * Signal ApaSlot6Obj1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Obj1Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot6Obj1Y raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Obj1Y        0

/**
 * Signal ApaSlot6Obj1Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Obj1Y          0

/**
 * Signal ApaSlot6Obj1Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Obj1Y          4094

/**
 * Signal ApaSlot6Obj1Y raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Obj1Y          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Obj1Type Signal ApaSlot6Obj1Type of Message PAS_APASlotInfo2 (0x195)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Obj1Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Obj1Type and \ref GET_PAS_APASlotInfo2_ApaSlot6Obj1Type instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Obj1Type        1, 0, 339, 2

/**
 * Signal ApaSlot6Obj1Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1Type or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Obj1Type      1, 0, 339, 2, 0

/**
 * Get signal ApaSlot6Obj1Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Obj1Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[42] >> 2) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot6Obj1Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Obj1Type(buf, val) { \
	buf[42] &= ~(0x03 << 2); \
	buf[42] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal ApaSlot6Obj1Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1Type(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Obj1Type(buf, 0)

/**
 * Signal ApaSlot6Obj1Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Obj1Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot6Obj1Type raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Obj1Type      0

/**
 * Signal ApaSlot6Obj1Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Obj1Type        0

/**
 * Signal ApaSlot6Obj1Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Obj1Type        3

/**
 * Signal ApaSlot6Obj1Type raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Obj1Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Obj1Alpha Signal ApaSlot6Obj1Alpha of Message PAS_APASlotInfo2 (0x195)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Obj1Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Obj1Alpha and \ref GET_PAS_APASlotInfo2_ApaSlot6Obj1Alpha instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Obj1Alpha        1, 0, 337, 7

/**
 * Signal ApaSlot6Obj1Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1Alpha or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Obj1Alpha      1, 0, 337, 7, 0

/**
 * Get signal ApaSlot6Obj1Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Obj1Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[42] >> 0) & 0x03) << 5) \
	| (uint8_t)(+(uint8_t)((buf[43] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot6Obj1Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Obj1Alpha(buf, val) { \
	buf[42] &= ~(0x03 << 0); \
	buf[42] |= (((uint8_t)(val) >> 5) & 0x03) << 0; \
	buf[43] &= ~(0x1f << 3); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot6Obj1Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Obj1Alpha(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Obj1Alpha(buf, 0)

/**
 * Signal ApaSlot6Obj1Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Obj1Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot6Obj1Alpha raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Obj1Alpha      0

/**
 * Signal ApaSlot6Obj1Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Obj1Alpha        0

/**
 * Signal ApaSlot6Obj1Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Obj1Alpha        128

/**
 * Signal ApaSlot6Obj1Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Obj1Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Obj2X Signal ApaSlot6Obj2X of Message PAS_APASlotInfo2 (0x195)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Obj2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Obj2X and \ref GET_PAS_APASlotInfo2_ApaSlot6Obj2X instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Obj2X          1, 0, 346, 12

/**
 * Signal ApaSlot6Obj2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Obj2X or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Obj2X        1, 0, 346, 12, 0

/**
 * Get signal ApaSlot6Obj2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Obj2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[43] >> 0) & 0x07) << 9) \
	| (uint16_t)(+(uint16_t)((buf[44] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[45] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot6Obj2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Obj2X(buf, val) { \
	buf[43] &= ~(0x07 << 0); \
	buf[43] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0; \
	buf[44] &= ~(0xff << 0); \
	buf[44] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[45] &= ~(0x01 << 7); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot6Obj2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Obj2X(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Obj2X(buf, 0)

/**
 * Signal ApaSlot6Obj2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Obj2X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot6Obj2X raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Obj2X        0

/**
 * Signal ApaSlot6Obj2X raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Obj2X          0

/**
 * Signal ApaSlot6Obj2X raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Obj2X          4094

/**
 * Signal ApaSlot6Obj2X raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Obj2X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApatSlot6Obj2Y Signal ApatSlot6Obj2Y of Message PAS_APASlotInfo2 (0x195)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApatSlot6Obj2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApatSlot6Obj2Y and \ref GET_PAS_APASlotInfo2_ApatSlot6Obj2Y instead.
 */
#define SIG_PAS_APASlotInfo2_ApatSlot6Obj2Y         1, 0, 366, 12

/**
 * Signal ApatSlot6Obj2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApatSlot6Obj2Y or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApatSlot6Obj2Y       1, 0, 366, 12, 0

/**
 * Get signal ApatSlot6Obj2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApatSlot6Obj2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[45] >> 0) & 0x7f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[46] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApatSlot6Obj2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApatSlot6Obj2Y(buf, val) { \
	buf[45] &= ~(0x7f << 0); \
	buf[45] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x7f) << 0; \
	buf[46] &= ~(0x1f << 3); \
	buf[46] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApatSlot6Obj2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApatSlot6Obj2Y(buf) \
	SET_PAS_APASlotInfo2_ApatSlot6Obj2Y(buf, 0)

/**
 * Signal ApatSlot6Obj2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApatSlot6Obj2Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApatSlot6Obj2Y raw initial value.
 */
#define START_PAS_APASlotInfo2_ApatSlot6Obj2Y       0

/**
 * Signal ApatSlot6Obj2Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApatSlot6Obj2Y         0

/**
 * Signal ApatSlot6Obj2Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApatSlot6Obj2Y         4094

/**
 * Signal ApatSlot6Obj2Y raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApatSlot6Obj2Y         -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Obj2Type Signal ApaSlot6Obj2Type of Message PAS_APASlotInfo2 (0x195)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Obj2Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Obj2Type and \ref GET_PAS_APASlotInfo2_ApaSlot6Obj2Type instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Obj2Type        1, 0, 370, 2

/**
 * Signal ApaSlot6Obj2Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Obj2Type or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Obj2Type      1, 0, 370, 2, 0

/**
 * Get signal ApaSlot6Obj2Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Obj2Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[46] >> 1) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot6Obj2Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Obj2Type(buf, val) { \
	buf[46] &= ~(0x03 << 1); \
	buf[46] |= (((uint8_t)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal ApaSlot6Obj2Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Obj2Type(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Obj2Type(buf, 0)

/**
 * Signal ApaSlot6Obj2Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Obj2Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot6Obj2Type raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Obj2Type      0

/**
 * Signal ApaSlot6Obj2Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Obj2Type        0

/**
 * Signal ApaSlot6Obj2Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Obj2Type        3

/**
 * Signal ApaSlot6Obj2Type raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Obj2Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Obj2Alpha Signal ApaSlot6Obj2Alpha of Message PAS_APASlotInfo2 (0x195)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Obj2Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Obj2Alpha and \ref GET_PAS_APASlotInfo2_ApaSlot6Obj2Alpha instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Obj2Alpha        1, 0, 368, 7

/**
 * Signal ApaSlot6Obj2Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Obj2Alpha or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Obj2Alpha      1, 0, 368, 7, 0

/**
 * Get signal ApaSlot6Obj2Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Obj2Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[46] >> 0) & 0x01) << 6) \
	| (uint8_t)(+(uint8_t)((buf[47] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal ApaSlot6Obj2Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Obj2Alpha(buf, val) { \
	buf[46] &= ~(0x01 << 0); \
	buf[46] |= (((uint8_t)(val) >> 6) & 0x01) << 0; \
	buf[47] &= ~(0x3f << 2); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal ApaSlot6Obj2Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Obj2Alpha(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Obj2Alpha(buf, 0)

/**
 * Signal ApaSlot6Obj2Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Obj2Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot6Obj2Alpha raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Obj2Alpha      0

/**
 * Signal ApaSlot6Obj2Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Obj2Alpha        0

/**
 * Signal ApaSlot6Obj2Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Obj2Alpha        128

/**
 * Signal ApaSlot6Obj2Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Obj2Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Length Signal ApaSlot6Length of Message PAS_APASlotInfo2 (0x195)
 *
 * The length of the parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Length configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Length and \ref GET_PAS_APASlotInfo2_ApaSlot6Length instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Length         1, 0, 377, 11

/**
 * Signal ApaSlot6Length setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Length or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Length       1, 0, 377, 11, 0

/**
 * Get signal ApaSlot6Length from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Length(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[47] >> 0) & 0x03) << 9) \
	| (uint16_t)(+(uint16_t)((buf[48] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[49] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot6Length in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Length(buf, val) { \
	buf[47] &= ~(0x03 << 0); \
	buf[47] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x03) << 0; \
	buf[48] &= ~(0xff << 0); \
	buf[48] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[49] &= ~(0x01 << 7); \
	buf[49] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot6Length in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Length(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Length(buf, 0)

/**
 * Signal ApaSlot6Length value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Length(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot6Length raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Length       0

/**
 * Signal ApaSlot6Length raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Length         0

/**
 * Signal ApaSlot6Length raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Length         2047

/**
 * Signal ApaSlot6Length raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Length         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo2_ApaSlot6Depth Signal ApaSlot6Depth of Message PAS_APASlotInfo2 (0x195)
 *
 * Depth of parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo2
 * @{
 */

/**
 * Signal ApaSlot6Depth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo2_ApaSlot6Depth and \ref GET_PAS_APASlotInfo2_ApaSlot6Depth instead.
 */
#define SIG_PAS_APASlotInfo2_ApaSlot6Depth          1, 0, 398, 10

/**
 * Signal ApaSlot6Depth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo2_ApaSlot6Depth or \ref INIT_PAS_APASlotInfo2 instead.
 */
#define SETUP_PAS_APASlotInfo2_ApaSlot6Depth        1, 0, 398, 10, 0

/**
 * Get signal ApaSlot6Depth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo2_ApaSlot6Depth(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[49] >> 0) & 0x7f) << 3) \
	| (uint8_t)(+(uint8_t)((buf[50] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot6Depth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo2_ApaSlot6Depth(buf, val) { \
	buf[49] &= ~(0x7f << 0); \
	buf[49] |= ((uint8_t)((uint16_t)(val) >> 3) & 0x7f) << 0; \
	buf[50] &= ~(0x07 << 5); \
	buf[50] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot6Depth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo2_ApaSlot6Depth(buf) \
	SET_PAS_APASlotInfo2_ApaSlot6Depth(buf, 0)

/**
 * Signal ApaSlot6Depth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo2_ApaSlot6Depth(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot6Depth raw initial value.
 */
#define START_PAS_APASlotInfo2_ApaSlot6Depth        0

/**
 * Signal ApaSlot6Depth raw minimum value.
 */
#define MIN_PAS_APASlotInfo2_ApaSlot6Depth          0

/**
 * Signal ApaSlot6Depth raw maximum value.
 */
#define MAX_PAS_APASlotInfo2_ApaSlot6Depth          1023

/**
 * Signal ApaSlot6Depth raw offset value.
 */
#define OFF_PAS_APASlotInfo2_ApaSlot6Depth          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum Signal PAS_APASlotInfo3_Checksum of Message PAS_APASlotInfo3 (0x196)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal PAS_APASlotInfo3_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum and \ref GET_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum instead.
 */
#define SIG_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum        1, 0, 7, 8

/**
 * Signal PAS_APASlotInfo3_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_APASlotInfo3_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_APASlotInfo3_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_APASlotInfo3_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum(buf) \
	SET_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum(buf, 0)

/**
 * Signal PAS_APASlotInfo3_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_APASlotInfo3_Checksum raw initial value.
 */
#define START_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum      0

/**
 * Signal PAS_APASlotInfo3_Checksum raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum        0

/**
 * Signal PAS_APASlotInfo3_Checksum raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum        255

/**
 * Signal PAS_APASlotInfo3_Checksum raw offset value.
 */
#define OFF_PAS_APASlotInfo3_PAS_APASlotInfo3_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter Signal PAS_APASlotInfo3_MsgCounter of Message PAS_APASlotInfo3 (0x196)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal PAS_APASlotInfo3_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter and \ref GET_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter instead.
 */
#define SIG_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_APASlotInfo3_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_APASlotInfo3_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_APASlotInfo3_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_APASlotInfo3_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter(buf) \
	SET_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter(buf, 0)

/**
 * Signal PAS_APASlotInfo3_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_APASlotInfo3_MsgCounter raw initial value.
 */
#define START_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter      0

/**
 * Signal PAS_APASlotInfo3_MsgCounter raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter        0

/**
 * Signal PAS_APASlotInfo3_MsgCounter raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter        15

/**
 * Signal PAS_APASlotInfo3_MsgCounter raw offset value.
 */
#define OFF_PAS_APASlotInfo3_PAS_APASlotInfo3_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7ID Signal ApaSlot7ID of Message PAS_APASlotInfo3 (0x196)
 *
 * Parking ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7ID and \ref GET_PAS_APASlotInfo3_ApaSlot7ID instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7ID             1, 0, 23, 8

/**
 * Signal ApaSlot7ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7ID or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7ID           1, 0, 23, 8, 0

/**
 * Get signal ApaSlot7ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ApaSlot7ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7ID(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ApaSlot7ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7ID(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7ID(buf, 0)

/**
 * Signal ApaSlot7ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7ID(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot7ID raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7ID           0

/**
 * Signal ApaSlot7ID raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7ID             0

/**
 * Signal ApaSlot7ID raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7ID             255

/**
 * Signal ApaSlot7ID raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7ID             0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Status Signal ApaSlot7Status of Message PAS_APASlotInfo3 (0x196)
 *
 * Parking state
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Status and \ref GET_PAS_APASlotInfo3_ApaSlot7Status instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Status         1, 0, 31, 2

/**
 * Signal ApaSlot7Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Status or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Status       1, 0, 31, 2, 0

/**
 * Get signal ApaSlot7Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot7Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Status(buf, val) { \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot7Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Status(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Status(buf, 0)

/**
 * Signal ApaSlot7Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Status(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot7Status raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Status       0

/**
 * Signal ApaSlot7Status raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Status         0

/**
 * Signal ApaSlot7Status raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Status         3

/**
 * Signal ApaSlot7Status raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Status         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Type Signal ApaSlot7Type of Message PAS_APASlotInfo3 (0x196)
 *
 * Types of parking Spaces
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Type and \ref GET_PAS_APASlotInfo3_ApaSlot7Type instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Type           1, 0, 29, 3

/**
 * Signal ApaSlot7Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Type or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Type         1, 0, 29, 3, 0

/**
 * Get signal ApaSlot7Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 3) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot7Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Type(buf, val) { \
	buf[3] &= ~(0x07 << 3); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal ApaSlot7Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Type(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Type(buf, 0)

/**
 * Signal ApaSlot7Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot7Type raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Type         0

/**
 * Signal ApaSlot7Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Type           0

/**
 * Signal ApaSlot7Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Type           7

/**
 * Signal ApaSlot7Type raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Type           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7DepethReferance Signal ApaSlot7DepethReferance of Message PAS_APASlotInfo3 (0x196)
 *
 * Type of obstruction in parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7DepethReferance configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7DepethReferance and \ref GET_PAS_APASlotInfo3_ApaSlot7DepethReferance instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7DepethReferance        1, 0, 26, 3

/**
 * Signal ApaSlot7DepethReferance setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7DepethReferance or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7DepethReferance      1, 0, 26, 3, 0

/**
 * Get signal ApaSlot7DepethReferance from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7DepethReferance(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot7DepethReferance in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7DepethReferance(buf, val) { \
	buf[3] &= ~(0x07 << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal ApaSlot7DepethReferance in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7DepethReferance(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7DepethReferance(buf, 0)

/**
 * Signal ApaSlot7DepethReferance value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7DepethReferance(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot7DepethReferance raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7DepethReferance      0

/**
 * Signal ApaSlot7DepethReferance raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7DepethReferance        0

/**
 * Signal ApaSlot7DepethReferance raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7DepethReferance        7

/**
 * Signal ApaSlot7DepethReferance raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7DepethReferance        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Obj1X Signal ApaSlot7Obj1X of Message PAS_APASlotInfo3 (0x196)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Obj1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Obj1X and \ref GET_PAS_APASlotInfo3_ApaSlot7Obj1X instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Obj1X          1, 0, 39, 12

/**
 * Signal ApaSlot7Obj1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1X or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Obj1X        1, 0, 39, 12, 0

/**
 * Get signal ApaSlot7Obj1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Obj1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 4) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ApaSlot7Obj1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Obj1X(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[5] &= ~(0x0f << 4); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ApaSlot7Obj1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1X(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Obj1X(buf, 0)

/**
 * Signal ApaSlot7Obj1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Obj1X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot7Obj1X raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Obj1X        0

/**
 * Signal ApaSlot7Obj1X raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Obj1X          0

/**
 * Signal ApaSlot7Obj1X raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Obj1X          4094

/**
 * Signal ApaSlot7Obj1X raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Obj1X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Obj1Y Signal ApaSlot7Obj1Y of Message PAS_APASlotInfo3 (0x196)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Obj1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Obj1Y and \ref GET_PAS_APASlotInfo3_ApaSlot7Obj1Y instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Obj1Y          1, 0, 43, 12

/**
 * Signal ApaSlot7Obj1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1Y or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Obj1Y        1, 0, 43, 12, 0

/**
 * Get signal ApaSlot7Obj1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Obj1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x0f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ApaSlot7Obj1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Obj1Y(buf, val) { \
	buf[5] &= ~(0x0f << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ApaSlot7Obj1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1Y(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Obj1Y(buf, 0)

/**
 * Signal ApaSlot7Obj1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Obj1Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot7Obj1Y raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Obj1Y        0

/**
 * Signal ApaSlot7Obj1Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Obj1Y          0

/**
 * Signal ApaSlot7Obj1Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Obj1Y          4094

/**
 * Signal ApaSlot7Obj1Y raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Obj1Y          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Obj1Type Signal ApaSlot7Obj1Type of Message PAS_APASlotInfo3 (0x196)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Obj1Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Obj1Type and \ref GET_PAS_APASlotInfo3_ApaSlot7Obj1Type instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Obj1Type        1, 0, 63, 2

/**
 * Signal ApaSlot7Obj1Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1Type or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Obj1Type      1, 0, 63, 2, 0

/**
 * Get signal ApaSlot7Obj1Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Obj1Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot7Obj1Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Obj1Type(buf, val) { \
	buf[7] &= ~(0x03 << 6); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot7Obj1Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1Type(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Obj1Type(buf, 0)

/**
 * Signal ApaSlot7Obj1Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Obj1Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot7Obj1Type raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Obj1Type      0

/**
 * Signal ApaSlot7Obj1Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Obj1Type        0

/**
 * Signal ApaSlot7Obj1Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Obj1Type        3

/**
 * Signal ApaSlot7Obj1Type raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Obj1Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Obj1Alpha Signal ApaSlot7Obj1Alpha of Message PAS_APASlotInfo3 (0x196)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Obj1Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Obj1Alpha and \ref GET_PAS_APASlotInfo3_ApaSlot7Obj1Alpha instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Obj1Alpha        1, 0, 61, 7

/**
 * Signal ApaSlot7Obj1Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1Alpha or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Obj1Alpha      1, 0, 61, 7, 0

/**
 * Get signal ApaSlot7Obj1Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Obj1Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x3f) << 1) \
	| (uint8_t)(+(uint8_t)((buf[8] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot7Obj1Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Obj1Alpha(buf, val) { \
	buf[7] &= ~(0x3f << 0); \
	buf[7] |= (((uint8_t)(val) >> 1) & 0x3f) << 0; \
	buf[8] &= ~(0x01 << 7); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot7Obj1Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Obj1Alpha(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Obj1Alpha(buf, 0)

/**
 * Signal ApaSlot7Obj1Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Obj1Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot7Obj1Alpha raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Obj1Alpha      0

/**
 * Signal ApaSlot7Obj1Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Obj1Alpha        0

/**
 * Signal ApaSlot7Obj1Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Obj1Alpha        128

/**
 * Signal ApaSlot7Obj1Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Obj1Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Obj2X Signal ApaSlot7Obj2X of Message PAS_APASlotInfo3 (0x196)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Obj2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Obj2X and \ref GET_PAS_APASlotInfo3_ApaSlot7Obj2X instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Obj2X          1, 0, 70, 12

/**
 * Signal ApaSlot7Obj2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Obj2X or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Obj2X        1, 0, 70, 12, 0

/**
 * Get signal ApaSlot7Obj2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Obj2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x7f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot7Obj2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Obj2X(buf, val) { \
	buf[8] &= ~(0x7f << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x7f) << 0; \
	buf[9] &= ~(0x1f << 3); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot7Obj2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Obj2X(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Obj2X(buf, 0)

/**
 * Signal ApaSlot7Obj2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Obj2X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot7Obj2X raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Obj2X        0

/**
 * Signal ApaSlot7Obj2X raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Obj2X          0

/**
 * Signal ApaSlot7Obj2X raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Obj2X          4094

/**
 * Signal ApaSlot7Obj2X raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Obj2X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApatSlot7Obj2Y Signal ApatSlot7Obj2Y of Message PAS_APASlotInfo3 (0x196)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApatSlot7Obj2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApatSlot7Obj2Y and \ref GET_PAS_APASlotInfo3_ApatSlot7Obj2Y instead.
 */
#define SIG_PAS_APASlotInfo3_ApatSlot7Obj2Y         1, 0, 74, 12

/**
 * Signal ApatSlot7Obj2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApatSlot7Obj2Y or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApatSlot7Obj2Y       1, 0, 74, 12, 0

/**
 * Get signal ApatSlot7Obj2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApatSlot7Obj2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x07) << 9) \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApatSlot7Obj2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApatSlot7Obj2Y(buf, val) { \
	buf[9] &= ~(0x07 << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x07) << 0; \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[11] &= ~(0x01 << 7); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApatSlot7Obj2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApatSlot7Obj2Y(buf) \
	SET_PAS_APASlotInfo3_ApatSlot7Obj2Y(buf, 0)

/**
 * Signal ApatSlot7Obj2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApatSlot7Obj2Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApatSlot7Obj2Y raw initial value.
 */
#define START_PAS_APASlotInfo3_ApatSlot7Obj2Y       0

/**
 * Signal ApatSlot7Obj2Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApatSlot7Obj2Y         0

/**
 * Signal ApatSlot7Obj2Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApatSlot7Obj2Y         4094

/**
 * Signal ApatSlot7Obj2Y raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApatSlot7Obj2Y         -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Obj2Type Signal ApaSlot7Obj2Type of Message PAS_APASlotInfo3 (0x196)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Obj2Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Obj2Type and \ref GET_PAS_APASlotInfo3_ApaSlot7Obj2Type instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Obj2Type        1, 0, 94, 2

/**
 * Signal ApaSlot7Obj2Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Obj2Type or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Obj2Type      1, 0, 94, 2, 0

/**
 * Get signal ApaSlot7Obj2Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Obj2Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[11] >> 5) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot7Obj2Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Obj2Type(buf, val) { \
	buf[11] &= ~(0x03 << 5); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x03) << 5; \
}

/**
 * Set signal ApaSlot7Obj2Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Obj2Type(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Obj2Type(buf, 0)

/**
 * Signal ApaSlot7Obj2Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Obj2Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot7Obj2Type raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Obj2Type      0

/**
 * Signal ApaSlot7Obj2Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Obj2Type        0

/**
 * Signal ApaSlot7Obj2Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Obj2Type        3

/**
 * Signal ApaSlot7Obj2Type raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Obj2Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Obj2Alpha Signal ApaSlot7Obj2Alpha of Message PAS_APASlotInfo3 (0x196)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Obj2Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Obj2Alpha and \ref GET_PAS_APASlotInfo3_ApaSlot7Obj2Alpha instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Obj2Alpha        1, 0, 92, 7

/**
 * Signal ApaSlot7Obj2Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Obj2Alpha or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Obj2Alpha      1, 0, 92, 7, 0

/**
 * Get signal ApaSlot7Obj2Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Obj2Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[11] >> 0) & 0x1f) << 2) \
	| (uint8_t)(+(uint8_t)((buf[12] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot7Obj2Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Obj2Alpha(buf, val) { \
	buf[11] &= ~(0x1f << 0); \
	buf[11] |= (((uint8_t)(val) >> 2) & 0x1f) << 0; \
	buf[12] &= ~(0x03 << 6); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot7Obj2Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Obj2Alpha(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Obj2Alpha(buf, 0)

/**
 * Signal ApaSlot7Obj2Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Obj2Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot7Obj2Alpha raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Obj2Alpha      0

/**
 * Signal ApaSlot7Obj2Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Obj2Alpha        0

/**
 * Signal ApaSlot7Obj2Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Obj2Alpha        128

/**
 * Signal ApaSlot7Obj2Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Obj2Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Length Signal ApaSlot7Length of Message PAS_APASlotInfo3 (0x196)
 *
 * The length of the parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Length configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Length and \ref GET_PAS_APASlotInfo3_ApaSlot7Length instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Length         1, 0, 101, 11

/**
 * Signal ApaSlot7Length setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Length or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Length       1, 0, 101, 11, 0

/**
 * Get signal ApaSlot7Length from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Length(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0x3f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot7Length in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Length(buf, val) { \
	buf[12] &= ~(0x3f << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x3f) << 0; \
	buf[13] &= ~(0x1f << 3); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot7Length in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Length(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Length(buf, 0)

/**
 * Signal ApaSlot7Length value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Length(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot7Length raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Length       0

/**
 * Signal ApaSlot7Length raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Length         0

/**
 * Signal ApaSlot7Length raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Length         2047

/**
 * Signal ApaSlot7Length raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Length         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot7Depth Signal ApaSlot7Depth of Message PAS_APASlotInfo3 (0x196)
 *
 * Depth of parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot7Depth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot7Depth and \ref GET_PAS_APASlotInfo3_ApaSlot7Depth instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot7Depth          1, 0, 106, 10

/**
 * Signal ApaSlot7Depth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot7Depth or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot7Depth        1, 0, 106, 10, 0

/**
 * Get signal ApaSlot7Depth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot7Depth(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0x07) << 7) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal ApaSlot7Depth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot7Depth(buf, val) { \
	buf[13] &= ~(0x07 << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x07) << 0; \
	buf[14] &= ~(0x7f << 1); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal ApaSlot7Depth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot7Depth(buf) \
	SET_PAS_APASlotInfo3_ApaSlot7Depth(buf, 0)

/**
 * Signal ApaSlot7Depth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot7Depth(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot7Depth raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot7Depth        0

/**
 * Signal ApaSlot7Depth raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot7Depth          0

/**
 * Signal ApaSlot7Depth raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot7Depth          1023

/**
 * Signal ApaSlot7Depth raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot7Depth          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8ID Signal ApaSlot8ID of Message PAS_APASlotInfo3 (0x196)
 *
 * Parking ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8ID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8ID and \ref GET_PAS_APASlotInfo3_ApaSlot8ID instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8ID             1, 0, 153, 8

/**
 * Signal ApaSlot8ID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8ID or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8ID           1, 0, 153, 8, 0

/**
 * Get signal ApaSlot8ID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8ID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[19] >> 0) & 0x03) << 6) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal ApaSlot8ID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8ID(buf, val) { \
	buf[19] &= ~(0x03 << 0); \
	buf[19] |= (((uint8_t)(val) >> 6) & 0x03) << 0; \
	buf[20] &= ~(0x3f << 2); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal ApaSlot8ID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8ID(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8ID(buf, 0)

/**
 * Signal ApaSlot8ID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8ID(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot8ID raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8ID           0

/**
 * Signal ApaSlot8ID raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8ID             0

/**
 * Signal ApaSlot8ID raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8ID             255

/**
 * Signal ApaSlot8ID raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8ID             0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Status Signal ApaSlot8Status of Message PAS_APASlotInfo3 (0x196)
 *
 * Parking state
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Status configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Status and \ref GET_PAS_APASlotInfo3_ApaSlot8Status instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Status         1, 0, 161, 2

/**
 * Signal ApaSlot8Status setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Status or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Status       1, 0, 161, 2, 0

/**
 * Get signal ApaSlot8Status from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Status(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[20] >> 0) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot8Status in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Status(buf, val) { \
	buf[20] &= ~(0x03 << 0); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal ApaSlot8Status in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Status(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Status(buf, 0)

/**
 * Signal ApaSlot8Status value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Status(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot8Status raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Status       0

/**
 * Signal ApaSlot8Status raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Status         0

/**
 * Signal ApaSlot8Status raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Status         3

/**
 * Signal ApaSlot8Status raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Status         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Type Signal ApaSlot8Type of Message PAS_APASlotInfo3 (0x196)
 *
 * Types of parking Spaces
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Type and \ref GET_PAS_APASlotInfo3_ApaSlot8Type instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Type           1, 0, 175, 3

/**
 * Signal ApaSlot8Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Type or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Type         1, 0, 175, 3, 0

/**
 * Get signal ApaSlot8Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot8Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Type(buf, val) { \
	buf[21] &= ~(0x07 << 5); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot8Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Type(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Type(buf, 0)

/**
 * Signal ApaSlot8Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot8Type raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Type         0

/**
 * Signal ApaSlot8Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Type           0

/**
 * Signal ApaSlot8Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Type           7

/**
 * Signal ApaSlot8Type raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Type           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8DepethReferance Signal ApaSlot8DepethReferance of Message PAS_APASlotInfo3 (0x196)
 *
 * Type of obstruction in parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8DepethReferance configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8DepethReferance and \ref GET_PAS_APASlotInfo3_ApaSlot8DepethReferance instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8DepethReferance        1, 0, 172, 3

/**
 * Signal ApaSlot8DepethReferance setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8DepethReferance or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8DepethReferance      1, 0, 172, 3, 0

/**
 * Get signal ApaSlot8DepethReferance from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8DepethReferance(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 2) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot8DepethReferance in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8DepethReferance(buf, val) { \
	buf[21] &= ~(0x07 << 2); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal ApaSlot8DepethReferance in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8DepethReferance(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8DepethReferance(buf, 0)

/**
 * Signal ApaSlot8DepethReferance value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8DepethReferance(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot8DepethReferance raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8DepethReferance      0

/**
 * Signal ApaSlot8DepethReferance raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8DepethReferance        0

/**
 * Signal ApaSlot8DepethReferance raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8DepethReferance        7

/**
 * Signal ApaSlot8DepethReferance raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8DepethReferance        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Obj1X Signal ApaSlot8Obj1X of Message PAS_APASlotInfo3 (0x196)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Obj1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Obj1X and \ref GET_PAS_APASlotInfo3_ApaSlot8Obj1X instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Obj1X          1, 0, 169, 12

/**
 * Signal ApaSlot8Obj1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1X or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Obj1X        1, 0, 169, 12, 0

/**
 * Get signal ApaSlot8Obj1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Obj1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[21] >> 0) & 0x03) << 10) \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 6) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot8Obj1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Obj1X(buf, val) { \
	buf[21] &= ~(0x03 << 0); \
	buf[21] |= ((uint8_t)((uint16_t)(val) >> 10) & 0x03) << 0; \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[23] &= ~(0x03 << 6); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal ApaSlot8Obj1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1X(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Obj1X(buf, 0)

/**
 * Signal ApaSlot8Obj1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Obj1X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot8Obj1X raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Obj1X        0

/**
 * Signal ApaSlot8Obj1X raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Obj1X          0

/**
 * Signal ApaSlot8Obj1X raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Obj1X          4094

/**
 * Signal ApaSlot8Obj1X raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Obj1X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Obj1Y Signal ApaSlot8Obj1Y of Message PAS_APASlotInfo3 (0x196)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Obj1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Obj1Y and \ref GET_PAS_APASlotInfo3_ApaSlot8Obj1Y instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Obj1Y          1, 0, 189, 12

/**
 * Signal ApaSlot8Obj1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1Y or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Obj1Y        1, 0, 189, 12, 0

/**
 * Get signal ApaSlot8Obj1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Obj1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[23] >> 0) & 0x3f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[24] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal ApaSlot8Obj1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Obj1Y(buf, val) { \
	buf[23] &= ~(0x3f << 0); \
	buf[23] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x3f) << 0; \
	buf[24] &= ~(0x3f << 2); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal ApaSlot8Obj1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1Y(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Obj1Y(buf, 0)

/**
 * Signal ApaSlot8Obj1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Obj1Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot8Obj1Y raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Obj1Y        0

/**
 * Signal ApaSlot8Obj1Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Obj1Y          0

/**
 * Signal ApaSlot8Obj1Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Obj1Y          4094

/**
 * Signal ApaSlot8Obj1Y raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Obj1Y          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Obj1Type Signal ApaSlot8Obj1Type of Message PAS_APASlotInfo3 (0x196)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Obj1Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Obj1Type and \ref GET_PAS_APASlotInfo3_ApaSlot8Obj1Type instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Obj1Type        1, 0, 193, 2

/**
 * Signal ApaSlot8Obj1Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1Type or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Obj1Type      1, 0, 193, 2, 0

/**
 * Get signal ApaSlot8Obj1Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Obj1Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[24] >> 0) & 0x03) << 0) \
)

/**
 * Set signal ApaSlot8Obj1Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Obj1Type(buf, val) { \
	buf[24] &= ~(0x03 << 0); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal ApaSlot8Obj1Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1Type(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Obj1Type(buf, 0)

/**
 * Signal ApaSlot8Obj1Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Obj1Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot8Obj1Type raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Obj1Type      0

/**
 * Signal ApaSlot8Obj1Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Obj1Type        0

/**
 * Signal ApaSlot8Obj1Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Obj1Type        3

/**
 * Signal ApaSlot8Obj1Type raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Obj1Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Obj1Alpha Signal ApaSlot8Obj1Alpha of Message PAS_APASlotInfo3 (0x196)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Obj1Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Obj1Alpha and \ref GET_PAS_APASlotInfo3_ApaSlot8Obj1Alpha instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Obj1Alpha        1, 0, 207, 7

/**
 * Signal ApaSlot8Obj1Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1Alpha or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Obj1Alpha      1, 0, 207, 7, 0

/**
 * Get signal ApaSlot8Obj1Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Obj1Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[25] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal ApaSlot8Obj1Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Obj1Alpha(buf, val) { \
	buf[25] &= ~(0x7f << 1); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal ApaSlot8Obj1Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Obj1Alpha(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Obj1Alpha(buf, 0)

/**
 * Signal ApaSlot8Obj1Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Obj1Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot8Obj1Alpha raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Obj1Alpha      0

/**
 * Signal ApaSlot8Obj1Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Obj1Alpha        0

/**
 * Signal ApaSlot8Obj1Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Obj1Alpha        128

/**
 * Signal ApaSlot8Obj1Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Obj1Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Obj2X Signal ApaSlot8Obj2X of Message PAS_APASlotInfo3 (0x196)
 *
 * The x-coordinate starting from the rear axle center of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Obj2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Obj2X and \ref GET_PAS_APASlotInfo3_ApaSlot8Obj2X instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Obj2X          1, 0, 200, 12

/**
 * Signal ApaSlot8Obj2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Obj2X or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Obj2X        1, 0, 200, 12, 0

/**
 * Get signal ApaSlot8Obj2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Obj2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0x01) << 11) \
	| (uint16_t)(+(uint16_t)((buf[26] >> 0) & 0xff) << 3) \
	| (uint8_t)(+(uint8_t)((buf[27] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot8Obj2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Obj2X(buf, val) { \
	buf[25] &= ~(0x01 << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x01) << 0; \
	buf[26] &= ~(0xff << 0); \
	buf[26] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[27] &= ~(0x07 << 5); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot8Obj2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Obj2X(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Obj2X(buf, 0)

/**
 * Signal ApaSlot8Obj2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Obj2X(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApaSlot8Obj2X raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Obj2X        0

/**
 * Signal ApaSlot8Obj2X raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Obj2X          0

/**
 * Signal ApaSlot8Obj2X raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Obj2X          4094

/**
 * Signal ApaSlot8Obj2X raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Obj2X          -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApatSlot8Obj2Y Signal ApatSlot8Obj2Y of Message PAS_APASlotInfo3 (0x196)
 *
 * The y coordinate starting from the center of the rear axle of the vehicle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApatSlot8Obj2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApatSlot8Obj2Y and \ref GET_PAS_APASlotInfo3_ApatSlot8Obj2Y instead.
 */
#define SIG_PAS_APASlotInfo3_ApatSlot8Obj2Y         1, 0, 220, 12

/**
 * Signal ApatSlot8Obj2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApatSlot8Obj2Y or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApatSlot8Obj2Y       1, 0, 220, 12, 0

/**
 * Get signal ApatSlot8Obj2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApatSlot8Obj2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[27] >> 0) & 0x1f) << 7) \
	| (uint8_t)(+(uint8_t)((buf[28] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal ApatSlot8Obj2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApatSlot8Obj2Y(buf, val) { \
	buf[27] &= ~(0x1f << 0); \
	buf[27] |= ((uint8_t)((uint16_t)(val) >> 7) & 0x1f) << 0; \
	buf[28] &= ~(0x7f << 1); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal ApatSlot8Obj2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApatSlot8Obj2Y(buf) \
	SET_PAS_APASlotInfo3_ApatSlot8Obj2Y(buf, 0)

/**
 * Signal ApatSlot8Obj2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApatSlot8Obj2Y(x, fmt) \
	((x) * fmt * 2 + fmt * (-4094))

/**
 * Signal ApatSlot8Obj2Y raw initial value.
 */
#define START_PAS_APASlotInfo3_ApatSlot8Obj2Y       0

/**
 * Signal ApatSlot8Obj2Y raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApatSlot8Obj2Y         0

/**
 * Signal ApatSlot8Obj2Y raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApatSlot8Obj2Y         4094

/**
 * Signal ApatSlot8Obj2Y raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApatSlot8Obj2Y         -2047

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Obj2Type Signal ApaSlot8Obj2Type of Message PAS_APASlotInfo3 (0x196)
 *
 * First vertex obstacle type
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Obj2Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Obj2Type and \ref GET_PAS_APASlotInfo3_ApaSlot8Obj2Type instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Obj2Type        1, 0, 224, 2

/**
 * Signal ApaSlot8Obj2Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Obj2Type or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Obj2Type      1, 0, 224, 2, 0

/**
 * Get signal ApaSlot8Obj2Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Obj2Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[28] >> 0) & 0x01) << 1) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ApaSlot8Obj2Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Obj2Type(buf, val) { \
	buf[28] &= ~(0x01 << 0); \
	buf[28] |= (((uint8_t)(val) >> 1) & 0x01) << 0; \
	buf[29] &= ~(0x01 << 7); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ApaSlot8Obj2Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Obj2Type(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Obj2Type(buf, 0)

/**
 * Signal ApaSlot8Obj2Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Obj2Type(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot8Obj2Type raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Obj2Type      0

/**
 * Signal ApaSlot8Obj2Type raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Obj2Type        0

/**
 * Signal ApaSlot8Obj2Type raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Obj2Type        3

/**
 * Signal ApaSlot8Obj2Type raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Obj2Type        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Obj2Alpha Signal ApaSlot8Obj2Alpha of Message PAS_APASlotInfo3 (0x196)
 *
 * The Angle of the first vertex of the parking space, starting from the center of the rear axle
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Obj2Alpha configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Obj2Alpha and \ref GET_PAS_APASlotInfo3_ApaSlot8Obj2Alpha instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Obj2Alpha        1, 0, 238, 7

/**
 * Signal ApaSlot8Obj2Alpha setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Obj2Alpha or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Obj2Alpha      1, 0, 238, 7, 0

/**
 * Get signal ApaSlot8Obj2Alpha from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Obj2Alpha(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[29] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal ApaSlot8Obj2Alpha in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Obj2Alpha(buf, val) { \
	buf[29] &= ~(0x7f << 0); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal ApaSlot8Obj2Alpha in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Obj2Alpha(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Obj2Alpha(buf, 0)

/**
 * Signal ApaSlot8Obj2Alpha value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Obj2Alpha(x, fmt) \
	((x) * fmt * 2 + fmt * (-128))

/**
 * Signal ApaSlot8Obj2Alpha raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Obj2Alpha      0

/**
 * Signal ApaSlot8Obj2Alpha raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Obj2Alpha        0

/**
 * Signal ApaSlot8Obj2Alpha raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Obj2Alpha        128

/**
 * Signal ApaSlot8Obj2Alpha raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Obj2Alpha        -64

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Length Signal ApaSlot8Length of Message PAS_APASlotInfo3 (0x196)
 *
 * The length of the parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Length configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Length and \ref GET_PAS_APASlotInfo3_ApaSlot8Length instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Length         1, 0, 247, 11

/**
 * Signal ApaSlot8Length setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Length or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Length       1, 0, 247, 11, 0

/**
 * Get signal ApaSlot8Length from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Length(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0xff) << 3) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ApaSlot8Length in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Length(buf, val) { \
	buf[30] &= ~(0xff << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[31] &= ~(0x07 << 5); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ApaSlot8Length in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Length(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Length(buf, 0)

/**
 * Signal ApaSlot8Length value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Length(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot8Length raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Length       0

/**
 * Signal ApaSlot8Length raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Length         0

/**
 * Signal ApaSlot8Length raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Length         2047

/**
 * Signal ApaSlot8Length raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Length         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_ApaSlot8Depth Signal ApaSlot8Depth of Message PAS_APASlotInfo3 (0x196)
 *
 * Depth of parking space
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal ApaSlot8Depth configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_ApaSlot8Depth and \ref GET_PAS_APASlotInfo3_ApaSlot8Depth instead.
 */
#define SIG_PAS_APASlotInfo3_ApaSlot8Depth          1, 0, 252, 10

/**
 * Signal ApaSlot8Depth setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_ApaSlot8Depth or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_ApaSlot8Depth        1, 0, 252, 10, 0

/**
 * Get signal ApaSlot8Depth from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_ApaSlot8Depth(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[31] >> 0) & 0x1f) << 5) \
	| (uint8_t)(+(uint8_t)((buf[32] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ApaSlot8Depth in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_ApaSlot8Depth(buf, val) { \
	buf[31] &= ~(0x1f << 0); \
	buf[31] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
	buf[32] &= ~(0x1f << 3); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ApaSlot8Depth in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_ApaSlot8Depth(buf) \
	SET_PAS_APASlotInfo3_ApaSlot8Depth(buf, 0)

/**
 * Signal ApaSlot8Depth value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_ApaSlot8Depth(x, fmt) \
	((x) * fmt)

/**
 * Signal ApaSlot8Depth raw initial value.
 */
#define START_PAS_APASlotInfo3_ApaSlot8Depth        0

/**
 * Signal ApaSlot8Depth raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_ApaSlot8Depth          0

/**
 * Signal ApaSlot8Depth raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_ApaSlot8Depth          1023

/**
 * Signal ApaSlot8Depth raw offset value.
 */
#define OFF_PAS_APASlotInfo3_ApaSlot8Depth          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp Signal PAS_ApaSlot_TimeStamp of Message PAS_APASlotInfo3 (0x196)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_APASlotInfo3
 * @{
 */

/**
 * Signal PAS_ApaSlot_TimeStamp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp and \ref GET_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp instead.
 */
#define SIG_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp        1, 0, 271, 32

/**
 * Signal PAS_ApaSlot_TimeStamp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp or \ref INIT_PAS_APASlotInfo3 instead.
 */
#define SETUP_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp      1, 0, 271, 32, 0

/**
 * Get signal PAS_ApaSlot_TimeStamp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[33] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[34] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[35] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[36] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_ApaSlot_TimeStamp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp(buf, val) { \
	buf[33] &= ~(0xff << 0); \
	buf[33] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[34] &= ~(0xff << 0); \
	buf[34] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[35] &= ~(0xff << 0); \
	buf[35] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[36] &= ~(0xff << 0); \
	buf[36] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_ApaSlot_TimeStamp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp(buf) \
	SET_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp(buf, 0)

/**
 * Signal PAS_ApaSlot_TimeStamp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_ApaSlot_TimeStamp raw initial value.
 */
#define START_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp      0

/**
 * Signal PAS_ApaSlot_TimeStamp raw minimum value.
 */
#define MIN_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp        0

/**
 * Signal PAS_ApaSlot_TimeStamp raw maximum value.
 */
#define MAX_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp        4294967295

/**
 * Signal PAS_ApaSlot_TimeStamp raw offset value.
 */
#define OFF_PAS_APASlotInfo3_PAS_ApaSlot_TimeStamp        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_PAS_USSInfo1_Checksum Signal PAS_USSInfo1_Checksum of Message PAS_USSInfo1 (0x197)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal PAS_USSInfo1_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_PAS_USSInfo1_Checksum and \ref GET_PAS_USSInfo1_PAS_USSInfo1_Checksum instead.
 */
#define SIG_PAS_USSInfo1_PAS_USSInfo1_Checksum        1, 0, 7, 8

/**
 * Signal PAS_USSInfo1_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_PAS_USSInfo1_Checksum or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_PAS_USSInfo1_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_USSInfo1_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_PAS_USSInfo1_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_USSInfo1_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_PAS_USSInfo1_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_USSInfo1_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_PAS_USSInfo1_Checksum(buf) \
	SET_PAS_USSInfo1_PAS_USSInfo1_Checksum(buf, 0)

/**
 * Signal PAS_USSInfo1_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_PAS_USSInfo1_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSInfo1_Checksum raw initial value.
 */
#define START_PAS_USSInfo1_PAS_USSInfo1_Checksum      0

/**
 * Signal PAS_USSInfo1_Checksum raw minimum value.
 */
#define MIN_PAS_USSInfo1_PAS_USSInfo1_Checksum        0

/**
 * Signal PAS_USSInfo1_Checksum raw maximum value.
 */
#define MAX_PAS_USSInfo1_PAS_USSInfo1_Checksum        255

/**
 * Signal PAS_USSInfo1_Checksum raw offset value.
 */
#define OFF_PAS_USSInfo1_PAS_USSInfo1_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_PAS_USSInfo1_MsgCounter Signal PAS_USSInfo1_MsgCounter of Message PAS_USSInfo1 (0x197)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal PAS_USSInfo1_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_PAS_USSInfo1_MsgCounter and \ref GET_PAS_USSInfo1_PAS_USSInfo1_MsgCounter instead.
 */
#define SIG_PAS_USSInfo1_PAS_USSInfo1_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_USSInfo1_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_PAS_USSInfo1_MsgCounter or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_PAS_USSInfo1_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_USSInfo1_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_PAS_USSInfo1_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_USSInfo1_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_PAS_USSInfo1_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_USSInfo1_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_PAS_USSInfo1_MsgCounter(buf) \
	SET_PAS_USSInfo1_PAS_USSInfo1_MsgCounter(buf, 0)

/**
 * Signal PAS_USSInfo1_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_PAS_USSInfo1_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSInfo1_MsgCounter raw initial value.
 */
#define START_PAS_USSInfo1_PAS_USSInfo1_MsgCounter      0

/**
 * Signal PAS_USSInfo1_MsgCounter raw minimum value.
 */
#define MIN_PAS_USSInfo1_PAS_USSInfo1_MsgCounter        0

/**
 * Signal PAS_USSInfo1_MsgCounter raw maximum value.
 */
#define MAX_PAS_USSInfo1_PAS_USSInfo1_MsgCounter        15

/**
 * Signal PAS_USSInfo1_MsgCounter raw offset value.
 */
#define OFF_PAS_USSInfo1_PAS_USSInfo1_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_1_1 Signal USS_DE_1_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_1_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_1_1 and \ref GET_PAS_USSInfo1_USS_DE_1_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_1_1                 1, 0, 23, 10

/**
 * Signal USS_DE_1_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_1_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_1_1               1, 0, 23, 10, 0

/**
 * Get signal USS_DE_1_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_1_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_DE_1_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_1_1(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_DE_1_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_1_1(buf) \
	SET_PAS_USSInfo1_USS_DE_1_1(buf, 0)

/**
 * Signal USS_DE_1_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_1_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_1_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_1_1               0

/**
 * Signal USS_DE_1_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_1_1                 0

/**
 * Signal USS_DE_1_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_1_1                 551

/**
 * Signal USS_DE_1_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_1_1                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_2_1 Signal USS_DE_2_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_2_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_2_1 and \ref GET_PAS_USSInfo1_USS_DE_2_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_2_1                 1, 0, 29, 10

/**
 * Signal USS_DE_2_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_2_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_2_1               1, 0, 29, 10, 0

/**
 * Get signal USS_DE_2_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_2_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_DE_2_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_2_1(buf, val) { \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_DE_2_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_2_1(buf) \
	SET_PAS_USSInfo1_USS_DE_2_1(buf, 0)

/**
 * Signal USS_DE_2_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_2_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_2_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_2_1               0

/**
 * Signal USS_DE_2_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_2_1                 0

/**
 * Signal USS_DE_2_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_2_1                 551

/**
 * Signal USS_DE_2_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_2_1                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_3_1 Signal USS_DE_3_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_3_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_3_1 and \ref GET_PAS_USSInfo1_USS_DE_3_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_3_1                 1, 0, 35, 10

/**
 * Signal USS_DE_3_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_3_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_3_1               1, 0, 35, 10, 0

/**
 * Get signal USS_DE_3_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_3_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_DE_3_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_3_1(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_DE_3_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_3_1(buf) \
	SET_PAS_USSInfo1_USS_DE_3_1(buf, 0)

/**
 * Signal USS_DE_3_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_3_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_3_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_3_1               0

/**
 * Signal USS_DE_3_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_3_1                 0

/**
 * Signal USS_DE_3_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_3_1                 551

/**
 * Signal USS_DE_3_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_3_1                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_4_1 Signal USS_DE_4_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_4_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_4_1 and \ref GET_PAS_USSInfo1_USS_DE_4_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_4_1                 1, 0, 41, 10

/**
 * Signal USS_DE_4_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_4_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_4_1               1, 0, 41, 10, 0

/**
 * Get signal USS_DE_4_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_4_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_4_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_4_1(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_4_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_4_1(buf) \
	SET_PAS_USSInfo1_USS_DE_4_1(buf, 0)

/**
 * Signal USS_DE_4_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_4_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_4_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_4_1               0

/**
 * Signal USS_DE_4_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_4_1                 0

/**
 * Signal USS_DE_4_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_4_1                 551

/**
 * Signal USS_DE_4_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_4_1                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_5_1 Signal USS_DE_5_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_5_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_5_1 and \ref GET_PAS_USSInfo1_USS_DE_5_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_5_1                 1, 0, 63, 10

/**
 * Signal USS_DE_5_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_5_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_5_1               1, 0, 63, 10, 0

/**
 * Get signal USS_DE_5_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_5_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[8] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_DE_5_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_5_1(buf, val) { \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[8] &= ~(0x03 << 6); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_DE_5_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_5_1(buf) \
	SET_PAS_USSInfo1_USS_DE_5_1(buf, 0)

/**
 * Signal USS_DE_5_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_5_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_5_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_5_1               0

/**
 * Signal USS_DE_5_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_5_1                 0

/**
 * Signal USS_DE_5_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_5_1                 551

/**
 * Signal USS_DE_5_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_5_1                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_6_1 Signal USS_DE_6_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_6_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_6_1 and \ref GET_PAS_USSInfo1_USS_DE_6_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_6_1                 1, 0, 69, 10

/**
 * Signal USS_DE_6_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_6_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_6_1               1, 0, 69, 10, 0

/**
 * Get signal USS_DE_6_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_6_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_DE_6_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_6_1(buf, val) { \
	buf[8] &= ~(0x3f << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[9] &= ~(0x0f << 4); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_DE_6_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_6_1(buf) \
	SET_PAS_USSInfo1_USS_DE_6_1(buf, 0)

/**
 * Signal USS_DE_6_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_6_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_6_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_6_1               0

/**
 * Signal USS_DE_6_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_6_1                 0

/**
 * Signal USS_DE_6_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_6_1                 551

/**
 * Signal USS_DE_6_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_6_1                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_7_1 Signal USS_DE_7_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_7_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_7_1 and \ref GET_PAS_USSInfo1_USS_DE_7_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_7_1                 1, 0, 75, 10

/**
 * Signal USS_DE_7_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_7_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_7_1               1, 0, 75, 10, 0

/**
 * Get signal USS_DE_7_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_7_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[10] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_DE_7_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_7_1(buf, val) { \
	buf[9] &= ~(0x0f << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[10] &= ~(0x3f << 2); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_DE_7_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_7_1(buf) \
	SET_PAS_USSInfo1_USS_DE_7_1(buf, 0)

/**
 * Signal USS_DE_7_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_7_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_7_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_7_1               0

/**
 * Signal USS_DE_7_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_7_1                 0

/**
 * Signal USS_DE_7_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_7_1                 551

/**
 * Signal USS_DE_7_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_7_1                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_8_1 Signal USS_DE_8_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_8_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_8_1 and \ref GET_PAS_USSInfo1_USS_DE_8_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_8_1                 1, 0, 81, 10

/**
 * Signal USS_DE_8_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_8_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_8_1               1, 0, 81, 10, 0

/**
 * Get signal USS_DE_8_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_8_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_8_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_8_1(buf, val) { \
	buf[10] &= ~(0x03 << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[11] &= ~(0xff << 0); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_8_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_8_1(buf) \
	SET_PAS_USSInfo1_USS_DE_8_1(buf, 0)

/**
 * Signal USS_DE_8_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_8_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_8_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_8_1               0

/**
 * Signal USS_DE_8_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_8_1                 0

/**
 * Signal USS_DE_8_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_8_1                 551

/**
 * Signal USS_DE_8_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_8_1                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_9_1 Signal USS_DE_9_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_9_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_9_1 and \ref GET_PAS_USSInfo1_USS_DE_9_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_9_1                 1, 0, 103, 10

/**
 * Signal USS_DE_9_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_9_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_9_1               1, 0, 103, 10, 0

/**
 * Get signal USS_DE_9_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_9_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_DE_9_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_9_1(buf, val) { \
	buf[12] &= ~(0xff << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[13] &= ~(0x03 << 6); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_DE_9_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_9_1(buf) \
	SET_PAS_USSInfo1_USS_DE_9_1(buf, 0)

/**
 * Signal USS_DE_9_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_9_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_9_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_9_1               0

/**
 * Signal USS_DE_9_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_9_1                 0

/**
 * Signal USS_DE_9_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_9_1                 551

/**
 * Signal USS_DE_9_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_9_1                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_10_1 Signal USS_DE_10_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_10_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_10_1 and \ref GET_PAS_USSInfo1_USS_DE_10_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_10_1                1, 0, 109, 10

/**
 * Signal USS_DE_10_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_10_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_10_1              1, 0, 109, 10, 0

/**
 * Get signal USS_DE_10_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_10_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_DE_10_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_10_1(buf, val) { \
	buf[13] &= ~(0x3f << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[14] &= ~(0x0f << 4); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_DE_10_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_10_1(buf) \
	SET_PAS_USSInfo1_USS_DE_10_1(buf, 0)

/**
 * Signal USS_DE_10_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_10_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_10_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_10_1              0

/**
 * Signal USS_DE_10_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_10_1                0

/**
 * Signal USS_DE_10_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_10_1                551

/**
 * Signal USS_DE_10_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_10_1                0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_11_1 Signal USS_DE_11_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_11_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_11_1 and \ref GET_PAS_USSInfo1_USS_DE_11_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_11_1                1, 0, 115, 10

/**
 * Signal USS_DE_11_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_11_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_11_1              1, 0, 115, 10, 0

/**
 * Get signal USS_DE_11_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_11_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[14] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_DE_11_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_11_1(buf, val) { \
	buf[14] &= ~(0x0f << 0); \
	buf[14] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[15] &= ~(0x3f << 2); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_DE_11_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_11_1(buf) \
	SET_PAS_USSInfo1_USS_DE_11_1(buf, 0)

/**
 * Signal USS_DE_11_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_11_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_11_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_11_1              0

/**
 * Signal USS_DE_11_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_11_1                0

/**
 * Signal USS_DE_11_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_11_1                551

/**
 * Signal USS_DE_11_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_11_1                0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_12_1 Signal USS_DE_12_1 of Message PAS_USSInfo1 (0x197)
 *
 * Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_12_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_12_1 and \ref GET_PAS_USSInfo1_USS_DE_12_1 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_12_1                1, 0, 121, 10

/**
 * Signal USS_DE_12_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_12_1 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_12_1              1, 0, 121, 10, 0

/**
 * Get signal USS_DE_12_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_12_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[15] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[16] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_12_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_12_1(buf, val) { \
	buf[15] &= ~(0x03 << 0); \
	buf[15] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[16] &= ~(0xff << 0); \
	buf[16] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_12_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_12_1(buf) \
	SET_PAS_USSInfo1_USS_DE_12_1(buf, 0)

/**
 * Signal USS_DE_12_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_12_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_12_1 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_12_1              0

/**
 * Signal USS_DE_12_1 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_12_1                0

/**
 * Signal USS_DE_12_1 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_12_1                551

/**
 * Signal USS_DE_12_1 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_12_1                0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_1_2 Signal USS_DE_1_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_1_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_1_2 and \ref GET_PAS_USSInfo1_USS_DE_1_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_1_2                 1, 0, 143, 10

/**
 * Signal USS_DE_1_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_1_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_1_2               1, 0, 143, 10, 0

/**
 * Get signal USS_DE_1_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_1_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[17] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[18] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_DE_1_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_1_2(buf, val) { \
	buf[17] &= ~(0xff << 0); \
	buf[17] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[18] &= ~(0x03 << 6); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_DE_1_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_1_2(buf) \
	SET_PAS_USSInfo1_USS_DE_1_2(buf, 0)

/**
 * Signal USS_DE_1_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_1_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_1_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_1_2               0

/**
 * Signal USS_DE_1_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_1_2                 0

/**
 * Signal USS_DE_1_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_1_2                 551

/**
 * Signal USS_DE_1_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_1_2                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_2_2 Signal USS_DE_2_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_2_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_2_2 and \ref GET_PAS_USSInfo1_USS_DE_2_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_2_2                 1, 0, 149, 10

/**
 * Signal USS_DE_2_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_2_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_2_2               1, 0, 149, 10, 0

/**
 * Get signal USS_DE_2_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_2_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[18] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[19] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_DE_2_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_2_2(buf, val) { \
	buf[18] &= ~(0x3f << 0); \
	buf[18] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[19] &= ~(0x0f << 4); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_DE_2_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_2_2(buf) \
	SET_PAS_USSInfo1_USS_DE_2_2(buf, 0)

/**
 * Signal USS_DE_2_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_2_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_2_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_2_2               0

/**
 * Signal USS_DE_2_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_2_2                 0

/**
 * Signal USS_DE_2_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_2_2                 551

/**
 * Signal USS_DE_2_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_2_2                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_3_2 Signal USS_DE_3_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_3_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_3_2 and \ref GET_PAS_USSInfo1_USS_DE_3_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_3_2                 1, 0, 155, 10

/**
 * Signal USS_DE_3_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_3_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_3_2               1, 0, 155, 10, 0

/**
 * Get signal USS_DE_3_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_3_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[19] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_DE_3_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_3_2(buf, val) { \
	buf[19] &= ~(0x0f << 0); \
	buf[19] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[20] &= ~(0x3f << 2); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_DE_3_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_3_2(buf) \
	SET_PAS_USSInfo1_USS_DE_3_2(buf, 0)

/**
 * Signal USS_DE_3_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_3_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_3_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_3_2               0

/**
 * Signal USS_DE_3_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_3_2                 0

/**
 * Signal USS_DE_3_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_3_2                 551

/**
 * Signal USS_DE_3_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_3_2                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_4_2 Signal USS_DE_4_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_4_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_4_2 and \ref GET_PAS_USSInfo1_USS_DE_4_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_4_2                 1, 0, 161, 10

/**
 * Signal USS_DE_4_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_4_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_4_2               1, 0, 161, 10, 0

/**
 * Get signal USS_DE_4_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_4_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[20] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[21] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_4_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_4_2(buf, val) { \
	buf[20] &= ~(0x03 << 0); \
	buf[20] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[21] &= ~(0xff << 0); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_4_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_4_2(buf) \
	SET_PAS_USSInfo1_USS_DE_4_2(buf, 0)

/**
 * Signal USS_DE_4_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_4_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_4_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_4_2               0

/**
 * Signal USS_DE_4_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_4_2                 0

/**
 * Signal USS_DE_4_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_4_2                 551

/**
 * Signal USS_DE_4_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_4_2                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_5_2 Signal USS_DE_5_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_5_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_5_2 and \ref GET_PAS_USSInfo1_USS_DE_5_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_5_2                 1, 0, 183, 10

/**
 * Signal USS_DE_5_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_5_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_5_2               1, 0, 183, 10, 0

/**
 * Get signal USS_DE_5_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_5_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_DE_5_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_5_2(buf, val) { \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[23] &= ~(0x03 << 6); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_DE_5_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_5_2(buf) \
	SET_PAS_USSInfo1_USS_DE_5_2(buf, 0)

/**
 * Signal USS_DE_5_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_5_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_5_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_5_2               0

/**
 * Signal USS_DE_5_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_5_2                 0

/**
 * Signal USS_DE_5_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_5_2                 551

/**
 * Signal USS_DE_5_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_5_2                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_6_2 Signal USS_DE_6_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_6_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_6_2 and \ref GET_PAS_USSInfo1_USS_DE_6_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_6_2                 1, 0, 189, 10

/**
 * Signal USS_DE_6_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_6_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_6_2               1, 0, 189, 10, 0

/**
 * Get signal USS_DE_6_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_6_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[23] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[24] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_DE_6_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_6_2(buf, val) { \
	buf[23] &= ~(0x3f << 0); \
	buf[23] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[24] &= ~(0x0f << 4); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_DE_6_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_6_2(buf) \
	SET_PAS_USSInfo1_USS_DE_6_2(buf, 0)

/**
 * Signal USS_DE_6_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_6_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_6_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_6_2               0

/**
 * Signal USS_DE_6_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_6_2                 0

/**
 * Signal USS_DE_6_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_6_2                 551

/**
 * Signal USS_DE_6_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_6_2                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_7_2 Signal USS_DE_7_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_7_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_7_2 and \ref GET_PAS_USSInfo1_USS_DE_7_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_7_2                 1, 0, 195, 10

/**
 * Signal USS_DE_7_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_7_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_7_2               1, 0, 195, 10, 0

/**
 * Get signal USS_DE_7_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_7_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[24] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[25] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_DE_7_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_7_2(buf, val) { \
	buf[24] &= ~(0x0f << 0); \
	buf[24] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[25] &= ~(0x3f << 2); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_DE_7_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_7_2(buf) \
	SET_PAS_USSInfo1_USS_DE_7_2(buf, 0)

/**
 * Signal USS_DE_7_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_7_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_7_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_7_2               0

/**
 * Signal USS_DE_7_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_7_2                 0

/**
 * Signal USS_DE_7_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_7_2                 551

/**
 * Signal USS_DE_7_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_7_2                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_8_2 Signal USS_DE_8_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_8_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_8_2 and \ref GET_PAS_USSInfo1_USS_DE_8_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_8_2                 1, 0, 201, 10

/**
 * Signal USS_DE_8_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_8_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_8_2               1, 0, 201, 10, 0

/**
 * Get signal USS_DE_8_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_8_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[26] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_8_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_8_2(buf, val) { \
	buf[25] &= ~(0x03 << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[26] &= ~(0xff << 0); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_8_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_8_2(buf) \
	SET_PAS_USSInfo1_USS_DE_8_2(buf, 0)

/**
 * Signal USS_DE_8_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_8_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_8_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_8_2               0

/**
 * Signal USS_DE_8_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_8_2                 0

/**
 * Signal USS_DE_8_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_8_2                 551

/**
 * Signal USS_DE_8_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_8_2                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_9_2 Signal USS_DE_9_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_9_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_9_2 and \ref GET_PAS_USSInfo1_USS_DE_9_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_9_2                 1, 0, 223, 10

/**
 * Signal USS_DE_9_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_9_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_9_2               1, 0, 223, 10, 0

/**
 * Get signal USS_DE_9_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_9_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[27] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[28] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_DE_9_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_9_2(buf, val) { \
	buf[27] &= ~(0xff << 0); \
	buf[27] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[28] &= ~(0x03 << 6); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_DE_9_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_9_2(buf) \
	SET_PAS_USSInfo1_USS_DE_9_2(buf, 0)

/**
 * Signal USS_DE_9_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_9_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_9_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_9_2               0

/**
 * Signal USS_DE_9_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_9_2                 0

/**
 * Signal USS_DE_9_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_9_2                 551

/**
 * Signal USS_DE_9_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_9_2                 0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_10_2 Signal USS_DE_10_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_10_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_10_2 and \ref GET_PAS_USSInfo1_USS_DE_10_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_10_2                1, 0, 229, 10

/**
 * Signal USS_DE_10_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_10_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_10_2              1, 0, 229, 10, 0

/**
 * Get signal USS_DE_10_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_10_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[28] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_DE_10_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_10_2(buf, val) { \
	buf[28] &= ~(0x3f << 0); \
	buf[28] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[29] &= ~(0x0f << 4); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_DE_10_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_10_2(buf) \
	SET_PAS_USSInfo1_USS_DE_10_2(buf, 0)

/**
 * Signal USS_DE_10_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_10_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_10_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_10_2              0

/**
 * Signal USS_DE_10_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_10_2                0

/**
 * Signal USS_DE_10_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_10_2                551

/**
 * Signal USS_DE_10_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_10_2                0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_11_2 Signal USS_DE_11_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_11_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_11_2 and \ref GET_PAS_USSInfo1_USS_DE_11_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_11_2                1, 0, 235, 10

/**
 * Signal USS_DE_11_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_11_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_11_2              1, 0, 235, 10, 0

/**
 * Get signal USS_DE_11_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_11_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[29] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[30] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_DE_11_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_11_2(buf, val) { \
	buf[29] &= ~(0x0f << 0); \
	buf[29] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[30] &= ~(0x3f << 2); \
	buf[30] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_DE_11_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_11_2(buf) \
	SET_PAS_USSInfo1_USS_DE_11_2(buf, 0)

/**
 * Signal USS_DE_11_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_11_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_11_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_11_2              0

/**
 * Signal USS_DE_11_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_11_2                0

/**
 * Signal USS_DE_11_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_11_2                551

/**
 * Signal USS_DE_11_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_11_2                0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo1_USS_DE_12_2 Signal USS_DE_12_2 of Message PAS_USSInfo1 (0x197)
 *
 * Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo1
 * @{
 */

/**
 * Signal USS_DE_12_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo1_USS_DE_12_2 and \ref GET_PAS_USSInfo1_USS_DE_12_2 instead.
 */
#define SIG_PAS_USSInfo1_USS_DE_12_2                1, 0, 241, 10

/**
 * Signal USS_DE_12_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo1_USS_DE_12_2 or \ref INIT_PAS_USSInfo1 instead.
 */
#define SETUP_PAS_USSInfo1_USS_DE_12_2              1, 0, 241, 10, 0

/**
 * Get signal USS_DE_12_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo1_USS_DE_12_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_12_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo1_USS_DE_12_2(buf, val) { \
	buf[30] &= ~(0x03 << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[31] &= ~(0xff << 0); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_12_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo1_USS_DE_12_2(buf) \
	SET_PAS_USSInfo1_USS_DE_12_2(buf, 0)

/**
 * Signal USS_DE_12_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo1_USS_DE_12_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_12_2 raw initial value.
 */
#define START_PAS_USSInfo1_USS_DE_12_2              0

/**
 * Signal USS_DE_12_2 raw minimum value.
 */
#define MIN_PAS_USSInfo1_USS_DE_12_2                0

/**
 * Signal USS_DE_12_2 raw maximum value.
 */
#define MAX_PAS_USSInfo1_USS_DE_12_2                551

/**
 * Signal USS_DE_12_2 raw offset value.
 */
#define OFF_PAS_USSInfo1_USS_DE_12_2                0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum Signal PAS_USSTraceIDInfo1_Checksum of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal PAS_USSTraceIDInfo1_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum and \ref GET_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum instead.
 */
#define SIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum        1, 0, 7, 8

/**
 * Signal PAS_USSTraceIDInfo1_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_USSTraceIDInfo1_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_USSTraceIDInfo1_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_USSTraceIDInfo1_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum(buf) \
	SET_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum(buf, 0)

/**
 * Signal PAS_USSTraceIDInfo1_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSTraceIDInfo1_Checksum raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum      0

/**
 * Signal PAS_USSTraceIDInfo1_Checksum raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum        0

/**
 * Signal PAS_USSTraceIDInfo1_Checksum raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum        255

/**
 * Signal PAS_USSTraceIDInfo1_Checksum raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter Signal PAS_USSTraceIDInfo1_MsgCounter of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal PAS_USSTraceIDInfo1_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter and \ref GET_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter instead.
 */
#define SIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_USSTraceIDInfo1_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_USSTraceIDInfo1_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_USSTraceIDInfo1_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_USSTraceIDInfo1_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter(buf) \
	SET_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter(buf, 0)

/**
 * Signal PAS_USSTraceIDInfo1_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSTraceIDInfo1_MsgCounter raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter      0

/**
 * Signal PAS_USSTraceIDInfo1_MsgCounter raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter        0

/**
 * Signal PAS_USSTraceIDInfo1_MsgCounter raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter        15

/**
 * Signal PAS_USSTraceIDInfo1_MsgCounter raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_PAS_USSTraceIDInfo1_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID Signal USS_DE_1_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_1_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID        1, 0, 23, 16

/**
 * Signal USS_DE_1_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID      1, 0, 23, 16, 0

/**
 * Get signal USS_DE_1_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_1_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_1_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID(buf, 0)

/**
 * Signal USS_DE_1_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_1_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID      0

/**
 * Signal USS_DE_1_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID        0

/**
 * Signal USS_DE_1_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID        32767

/**
 * Signal USS_DE_1_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_1_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID Signal USS_DE_2_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_2_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID        1, 0, 39, 16

/**
 * Signal USS_DE_2_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID      1, 0, 39, 16, 0

/**
 * Get signal USS_DE_2_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_2_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_2_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID(buf, 0)

/**
 * Signal USS_DE_2_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_2_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID      0

/**
 * Signal USS_DE_2_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID        0

/**
 * Signal USS_DE_2_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID        32767

/**
 * Signal USS_DE_2_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_2_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID Signal USS_DE_3_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_3_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID        1, 0, 55, 16

/**
 * Signal USS_DE_3_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID      1, 0, 55, 16, 0

/**
 * Get signal USS_DE_3_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_3_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_3_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID(buf, 0)

/**
 * Signal USS_DE_3_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_3_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID      0

/**
 * Signal USS_DE_3_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID        0

/**
 * Signal USS_DE_3_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID        32767

/**
 * Signal USS_DE_3_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_3_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID Signal USS_DE_4_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_4_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID        1, 0, 71, 16

/**
 * Signal USS_DE_4_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID      1, 0, 71, 16, 0

/**
 * Get signal USS_DE_4_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_4_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID(buf, val) { \
	buf[8] &= ~(0xff << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[9] &= ~(0xff << 0); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_4_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID(buf, 0)

/**
 * Signal USS_DE_4_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_4_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID      0

/**
 * Signal USS_DE_4_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID        0

/**
 * Signal USS_DE_4_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID        32767

/**
 * Signal USS_DE_4_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_4_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID Signal USS_DE_5_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_5_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID        1, 0, 87, 16

/**
 * Signal USS_DE_5_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID      1, 0, 87, 16, 0

/**
 * Get signal USS_DE_5_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_5_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID(buf, val) { \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[11] &= ~(0xff << 0); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_5_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID(buf, 0)

/**
 * Signal USS_DE_5_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_5_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID      0

/**
 * Signal USS_DE_5_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID        0

/**
 * Signal USS_DE_5_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID        32767

/**
 * Signal USS_DE_5_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_5_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID Signal USS_DE_6_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_6_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID        1, 0, 103, 16

/**
 * Signal USS_DE_6_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID      1, 0, 103, 16, 0

/**
 * Get signal USS_DE_6_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_6_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID(buf, val) { \
	buf[12] &= ~(0xff << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[13] &= ~(0xff << 0); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_6_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID(buf, 0)

/**
 * Signal USS_DE_6_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_6_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID      0

/**
 * Signal USS_DE_6_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID        0

/**
 * Signal USS_DE_6_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID        32767

/**
 * Signal USS_DE_6_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_6_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID Signal USS_DE_7_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_7_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID        1, 0, 119, 16

/**
 * Signal USS_DE_7_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID      1, 0, 119, 16, 0

/**
 * Get signal USS_DE_7_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[14] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_7_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID(buf, val) { \
	buf[14] &= ~(0xff << 0); \
	buf[14] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[15] &= ~(0xff << 0); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_7_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID(buf, 0)

/**
 * Signal USS_DE_7_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_7_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID      0

/**
 * Signal USS_DE_7_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID        0

/**
 * Signal USS_DE_7_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID        32767

/**
 * Signal USS_DE_7_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_7_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID Signal USS_DE_8_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_8_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID        1, 0, 135, 16

/**
 * Signal USS_DE_8_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID      1, 0, 135, 16, 0

/**
 * Get signal USS_DE_8_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[16] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[17] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_8_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID(buf, val) { \
	buf[16] &= ~(0xff << 0); \
	buf[16] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[17] &= ~(0xff << 0); \
	buf[17] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_8_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID(buf, 0)

/**
 * Signal USS_DE_8_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_8_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID      0

/**
 * Signal USS_DE_8_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID        0

/**
 * Signal USS_DE_8_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID        32767

/**
 * Signal USS_DE_8_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_8_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID Signal USS_DE_9_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_9_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID        1, 0, 151, 16

/**
 * Signal USS_DE_9_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID      1, 0, 151, 16, 0

/**
 * Get signal USS_DE_9_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[18] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[19] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_9_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID(buf, val) { \
	buf[18] &= ~(0xff << 0); \
	buf[18] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[19] &= ~(0xff << 0); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_9_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID(buf, 0)

/**
 * Signal USS_DE_9_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_9_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID      0

/**
 * Signal USS_DE_9_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID        0

/**
 * Signal USS_DE_9_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID        32767

/**
 * Signal USS_DE_9_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_9_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID Signal USS_DE_10_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_10_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID        1, 0, 167, 16

/**
 * Signal USS_DE_10_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID      1, 0, 167, 16, 0

/**
 * Get signal USS_DE_10_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[20] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[21] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_10_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID(buf, val) { \
	buf[20] &= ~(0xff << 0); \
	buf[20] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[21] &= ~(0xff << 0); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_10_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID(buf, 0)

/**
 * Signal USS_DE_10_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_10_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID      0

/**
 * Signal USS_DE_10_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID        0

/**
 * Signal USS_DE_10_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID        32767

/**
 * Signal USS_DE_10_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_10_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID Signal USS_DE_11_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_11_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID        1, 0, 183, 16

/**
 * Signal USS_DE_11_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID      1, 0, 183, 16, 0

/**
 * Get signal USS_DE_11_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_11_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID(buf, val) { \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[23] &= ~(0xff << 0); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_11_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID(buf, 0)

/**
 * Signal USS_DE_11_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_11_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID      0

/**
 * Signal USS_DE_11_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID        0

/**
 * Signal USS_DE_11_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID        32767

/**
 * Signal USS_DE_11_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_11_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID Signal USS_DE_12_1_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_12_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID        1, 0, 199, 16

/**
 * Signal USS_DE_12_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID      1, 0, 199, 16, 0

/**
 * Get signal USS_DE_12_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[24] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[25] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_12_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID(buf, val) { \
	buf[24] &= ~(0xff << 0); \
	buf[24] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[25] &= ~(0xff << 0); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_12_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID(buf, 0)

/**
 * Signal USS_DE_12_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_12_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID      0

/**
 * Signal USS_DE_12_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID        0

/**
 * Signal USS_DE_12_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID        32767

/**
 * Signal USS_DE_12_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_12_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID Signal USS_DE_1_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_1_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID        1, 0, 215, 16

/**
 * Signal USS_DE_1_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID      1, 0, 215, 16, 0

/**
 * Get signal USS_DE_1_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[26] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[27] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_1_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID(buf, val) { \
	buf[26] &= ~(0xff << 0); \
	buf[26] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[27] &= ~(0xff << 0); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_1_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID(buf, 0)

/**
 * Signal USS_DE_1_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_1_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID      0

/**
 * Signal USS_DE_1_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID        0

/**
 * Signal USS_DE_1_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID        32767

/**
 * Signal USS_DE_1_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_1_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID Signal USS_DE_2_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_2_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID        1, 0, 231, 16

/**
 * Signal USS_DE_2_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID      1, 0, 231, 16, 0

/**
 * Get signal USS_DE_2_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[28] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_2_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID(buf, val) { \
	buf[28] &= ~(0xff << 0); \
	buf[28] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[29] &= ~(0xff << 0); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_2_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID(buf, 0)

/**
 * Signal USS_DE_2_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_2_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID      0

/**
 * Signal USS_DE_2_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID        0

/**
 * Signal USS_DE_2_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID        32767

/**
 * Signal USS_DE_2_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_2_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID Signal USS_DE_3_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_3_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID        1, 0, 247, 16

/**
 * Signal USS_DE_3_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID      1, 0, 247, 16, 0

/**
 * Get signal USS_DE_3_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_3_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID(buf, val) { \
	buf[30] &= ~(0xff << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[31] &= ~(0xff << 0); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_3_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID(buf, 0)

/**
 * Signal USS_DE_3_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_3_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID      0

/**
 * Signal USS_DE_3_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID        0

/**
 * Signal USS_DE_3_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID        32767

/**
 * Signal USS_DE_3_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_3_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID Signal USS_DE_4_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_4_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID        1, 0, 263, 16

/**
 * Signal USS_DE_4_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID      1, 0, 263, 16, 0

/**
 * Get signal USS_DE_4_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[32] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[33] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_4_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID(buf, val) { \
	buf[32] &= ~(0xff << 0); \
	buf[32] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[33] &= ~(0xff << 0); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_4_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID(buf, 0)

/**
 * Signal USS_DE_4_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_4_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID      0

/**
 * Signal USS_DE_4_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID        0

/**
 * Signal USS_DE_4_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID        32767

/**
 * Signal USS_DE_4_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_4_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID Signal USS_DE_5_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_5_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID        1, 0, 279, 16

/**
 * Signal USS_DE_5_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID      1, 0, 279, 16, 0

/**
 * Get signal USS_DE_5_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[34] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[35] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_5_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID(buf, val) { \
	buf[34] &= ~(0xff << 0); \
	buf[34] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[35] &= ~(0xff << 0); \
	buf[35] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_5_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID(buf, 0)

/**
 * Signal USS_DE_5_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_5_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID      0

/**
 * Signal USS_DE_5_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID        0

/**
 * Signal USS_DE_5_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID        32767

/**
 * Signal USS_DE_5_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_5_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID Signal USS_DE_6_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_6_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID        1, 0, 295, 16

/**
 * Signal USS_DE_6_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID      1, 0, 295, 16, 0

/**
 * Get signal USS_DE_6_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[36] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[37] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_6_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID(buf, val) { \
	buf[36] &= ~(0xff << 0); \
	buf[36] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[37] &= ~(0xff << 0); \
	buf[37] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_6_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID(buf, 0)

/**
 * Signal USS_DE_6_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_6_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID      0

/**
 * Signal USS_DE_6_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID        0

/**
 * Signal USS_DE_6_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID        32767

/**
 * Signal USS_DE_6_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_6_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID Signal USS_DE_7_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_7_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID        1, 0, 311, 16

/**
 * Signal USS_DE_7_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID      1, 0, 311, 16, 0

/**
 * Get signal USS_DE_7_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[38] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[39] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_7_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID(buf, val) { \
	buf[38] &= ~(0xff << 0); \
	buf[38] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[39] &= ~(0xff << 0); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_7_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID(buf, 0)

/**
 * Signal USS_DE_7_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_7_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID      0

/**
 * Signal USS_DE_7_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID        0

/**
 * Signal USS_DE_7_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID        32767

/**
 * Signal USS_DE_7_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_7_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID Signal USS_DE_8_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_8_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID        1, 0, 327, 16

/**
 * Signal USS_DE_8_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID      1, 0, 327, 16, 0

/**
 * Get signal USS_DE_8_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[40] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[41] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_8_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID(buf, val) { \
	buf[40] &= ~(0xff << 0); \
	buf[40] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[41] &= ~(0xff << 0); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_8_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID(buf, 0)

/**
 * Signal USS_DE_8_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_8_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID      0

/**
 * Signal USS_DE_8_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID        0

/**
 * Signal USS_DE_8_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID        32767

/**
 * Signal USS_DE_8_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_8_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID Signal USS_DE_9_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_9_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID        1, 0, 343, 16

/**
 * Signal USS_DE_9_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID      1, 0, 343, 16, 0

/**
 * Get signal USS_DE_9_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[42] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[43] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_9_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID(buf, val) { \
	buf[42] &= ~(0xff << 0); \
	buf[42] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[43] &= ~(0xff << 0); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_9_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID(buf, 0)

/**
 * Signal USS_DE_9_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_9_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID      0

/**
 * Signal USS_DE_9_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID        0

/**
 * Signal USS_DE_9_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID        32767

/**
 * Signal USS_DE_9_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_9_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID Signal USS_DE_10_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_10_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID        1, 0, 359, 16

/**
 * Signal USS_DE_10_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID      1, 0, 359, 16, 0

/**
 * Get signal USS_DE_10_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[44] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[45] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_10_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID(buf, val) { \
	buf[44] &= ~(0xff << 0); \
	buf[44] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[45] &= ~(0xff << 0); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_10_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID(buf, 0)

/**
 * Signal USS_DE_10_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_10_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID      0

/**
 * Signal USS_DE_10_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID        0

/**
 * Signal USS_DE_10_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID        32767

/**
 * Signal USS_DE_10_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_10_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID Signal USS_DE_11_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_11_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID        1, 0, 375, 16

/**
 * Signal USS_DE_11_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID      1, 0, 375, 16, 0

/**
 * Get signal USS_DE_11_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[46] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[47] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_11_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID(buf, val) { \
	buf[46] &= ~(0xff << 0); \
	buf[46] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[47] &= ~(0xff << 0); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_11_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID(buf, 0)

/**
 * Signal USS_DE_11_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_11_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID      0

/**
 * Signal USS_DE_11_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID        0

/**
 * Signal USS_DE_11_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID        32767

/**
 * Signal USS_DE_11_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_11_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID Signal USS_DE_12_2_TraceID of Message PAS_USSTraceIDInfo1 (0x1a1)
 *
 * ID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo1
 * @{
 */

/**
 * Signal USS_DE_12_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID and \ref GET_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID        1, 0, 391, 16

/**
 * Signal USS_DE_12_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID or \ref INIT_PAS_USSTraceIDInfo1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID      1, 0, 391, 16, 0

/**
 * Get signal USS_DE_12_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[48] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[49] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_DE_12_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID(buf, val) { \
	buf[48] &= ~(0xff << 0); \
	buf[48] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[49] &= ~(0xff << 0); \
	buf[49] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_DE_12_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID(buf, 0)

/**
 * Signal USS_DE_12_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_12_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID      0

/**
 * Signal USS_DE_12_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID        0

/**
 * Signal USS_DE_12_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID        32767

/**
 * Signal USS_DE_12_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo1_USS_DE_12_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum Signal PAS_USSCodeIDInfo1_Checksum of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal PAS_USSCodeIDInfo1_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum and \ref GET_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum instead.
 */
#define SIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum        1, 0, 7, 8

/**
 * Signal PAS_USSCodeIDInfo1_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_USSCodeIDInfo1_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_USSCodeIDInfo1_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_USSCodeIDInfo1_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum(buf) \
	SET_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum(buf, 0)

/**
 * Signal PAS_USSCodeIDInfo1_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSCodeIDInfo1_Checksum raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum      0

/**
 * Signal PAS_USSCodeIDInfo1_Checksum raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum        0

/**
 * Signal PAS_USSCodeIDInfo1_Checksum raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum        255

/**
 * Signal PAS_USSCodeIDInfo1_Checksum raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter Signal PAS_USSCodeIDInfo1_MsgCounter of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal PAS_USSCodeIDInfo1_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter and \ref GET_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter instead.
 */
#define SIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_USSCodeIDInfo1_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_USSCodeIDInfo1_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_USSCodeIDInfo1_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_USSCodeIDInfo1_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter(buf) \
	SET_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter(buf, 0)

/**
 * Signal PAS_USSCodeIDInfo1_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSCodeIDInfo1_MsgCounter raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter      0

/**
 * Signal PAS_USSCodeIDInfo1_MsgCounter raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter        0

/**
 * Signal PAS_USSCodeIDInfo1_MsgCounter raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter        15

/**
 * Signal PAS_USSCodeIDInfo1_MsgCounter raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_PAS_USSCodeIDInfo1_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID Signal USS_DE_1_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_1_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID        1, 0, 23, 3

/**
 * Signal USS_DE_1_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID      1, 0, 23, 3, 0

/**
 * Get signal USS_DE_1_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_1_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID(buf, val) { \
	buf[2] &= ~(0x07 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal USS_DE_1_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID(buf, 0)

/**
 * Signal USS_DE_1_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_1_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID      0

/**
 * Signal USS_DE_1_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID        0

/**
 * Signal USS_DE_1_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID        4

/**
 * Signal USS_DE_1_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_1_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID Signal USS_DE_2_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_2_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID        1, 0, 20, 3

/**
 * Signal USS_DE_2_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID      1, 0, 20, 3, 0

/**
 * Get signal USS_DE_2_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 2) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_2_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID(buf, val) { \
	buf[2] &= ~(0x07 << 2); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal USS_DE_2_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID(buf, 0)

/**
 * Signal USS_DE_2_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_2_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID      0

/**
 * Signal USS_DE_2_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID        0

/**
 * Signal USS_DE_2_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID        4

/**
 * Signal USS_DE_2_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_2_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID Signal USS_DE_3_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_3_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID        1, 0, 17, 3

/**
 * Signal USS_DE_3_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID      1, 0, 17, 3, 0

/**
 * Get signal USS_DE_3_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 7) & 0x01) << 0) \
)

/**
 * Set signal USS_DE_3_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID(buf, val) { \
	buf[2] &= ~(0x03 << 0); \
	buf[2] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[3] &= ~(0x01 << 7); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal USS_DE_3_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID(buf, 0)

/**
 * Signal USS_DE_3_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_3_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID      0

/**
 * Signal USS_DE_3_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID        0

/**
 * Signal USS_DE_3_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID        4

/**
 * Signal USS_DE_3_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_3_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID Signal USS_DE_4_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_4_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID        1, 0, 30, 3

/**
 * Signal USS_DE_4_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID      1, 0, 30, 3, 0

/**
 * Get signal USS_DE_4_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_4_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID(buf, val) { \
	buf[3] &= ~(0x07 << 4); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal USS_DE_4_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID(buf, 0)

/**
 * Signal USS_DE_4_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_4_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID      0

/**
 * Signal USS_DE_4_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID        0

/**
 * Signal USS_DE_4_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID        4

/**
 * Signal USS_DE_4_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_4_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID Signal USS_DE_5_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_5_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID        1, 0, 27, 3

/**
 * Signal USS_DE_5_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID      1, 0, 27, 3, 0

/**
 * Get signal USS_DE_5_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 1) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_5_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID(buf, val) { \
	buf[3] &= ~(0x07 << 1); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal USS_DE_5_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID(buf, 0)

/**
 * Signal USS_DE_5_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_5_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID      0

/**
 * Signal USS_DE_5_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID        0

/**
 * Signal USS_DE_5_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID        4

/**
 * Signal USS_DE_5_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_5_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID Signal USS_DE_6_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_6_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID        1, 0, 24, 3

/**
 * Signal USS_DE_6_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID      1, 0, 24, 3, 0

/**
 * Get signal USS_DE_6_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_DE_6_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID(buf, val) { \
	buf[3] &= ~(0x01 << 0); \
	buf[3] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[4] &= ~(0x03 << 6); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_DE_6_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID(buf, 0)

/**
 * Signal USS_DE_6_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_6_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID      0

/**
 * Signal USS_DE_6_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID        0

/**
 * Signal USS_DE_6_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID        4

/**
 * Signal USS_DE_6_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_6_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID Signal USS_DE_7_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_7_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID        1, 0, 37, 3

/**
 * Signal USS_DE_7_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID      1, 0, 37, 3, 0

/**
 * Get signal USS_DE_7_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 3) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_7_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID(buf, val) { \
	buf[4] &= ~(0x07 << 3); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal USS_DE_7_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID(buf, 0)

/**
 * Signal USS_DE_7_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_7_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID      0

/**
 * Signal USS_DE_7_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID        0

/**
 * Signal USS_DE_7_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID        4

/**
 * Signal USS_DE_7_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_7_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID Signal USS_DE_8_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_8_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID        1, 0, 34, 3

/**
 * Signal USS_DE_8_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID      1, 0, 34, 3, 0

/**
 * Get signal USS_DE_8_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_8_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID(buf, val) { \
	buf[4] &= ~(0x07 << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal USS_DE_8_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID(buf, 0)

/**
 * Signal USS_DE_8_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_8_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID      0

/**
 * Signal USS_DE_8_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID        0

/**
 * Signal USS_DE_8_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID        4

/**
 * Signal USS_DE_8_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_8_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID Signal USS_DE_9_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_9_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID        1, 0, 47, 3

/**
 * Signal USS_DE_9_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID      1, 0, 47, 3, 0

/**
 * Get signal USS_DE_9_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 5) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_9_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID(buf, val) { \
	buf[5] &= ~(0x07 << 5); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal USS_DE_9_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID(buf, 0)

/**
 * Signal USS_DE_9_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_9_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID      0

/**
 * Signal USS_DE_9_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID        0

/**
 * Signal USS_DE_9_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID        4

/**
 * Signal USS_DE_9_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_9_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID Signal USS_DE_10_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_10_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID        1, 0, 44, 3

/**
 * Signal USS_DE_10_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID      1, 0, 44, 3, 0

/**
 * Get signal USS_DE_10_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_10_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID(buf, val) { \
	buf[5] &= ~(0x07 << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal USS_DE_10_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID(buf, 0)

/**
 * Signal USS_DE_10_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_10_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID      0

/**
 * Signal USS_DE_10_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID        0

/**
 * Signal USS_DE_10_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID        4

/**
 * Signal USS_DE_10_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_10_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID Signal USS_DE_11_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_11_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID        1, 0, 41, 3

/**
 * Signal USS_DE_11_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID      1, 0, 41, 3, 0

/**
 * Get signal USS_DE_11_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 7) & 0x01) << 0) \
)

/**
 * Set signal USS_DE_11_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[6] &= ~(0x01 << 7); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal USS_DE_11_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID(buf, 0)

/**
 * Signal USS_DE_11_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_11_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID      0

/**
 * Signal USS_DE_11_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID        0

/**
 * Signal USS_DE_11_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID        4

/**
 * Signal USS_DE_11_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_11_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID Signal USS_DE_12_1_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Primary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_12_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID        1, 0, 54, 3

/**
 * Signal USS_DE_12_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID      1, 0, 54, 3, 0

/**
 * Get signal USS_DE_12_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_12_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID(buf, val) { \
	buf[6] &= ~(0x07 << 4); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal USS_DE_12_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID(buf, 0)

/**
 * Signal USS_DE_12_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_12_1_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID      0

/**
 * Signal USS_DE_12_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID        0

/**
 * Signal USS_DE_12_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID        4

/**
 * Signal USS_DE_12_1_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_12_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID Signal USS_DE_1_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_1_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID        1, 0, 51, 3

/**
 * Signal USS_DE_1_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID      1, 0, 51, 3, 0

/**
 * Get signal USS_DE_1_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 1) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_1_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID(buf, val) { \
	buf[6] &= ~(0x07 << 1); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal USS_DE_1_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID(buf, 0)

/**
 * Signal USS_DE_1_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_1_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID      0

/**
 * Signal USS_DE_1_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID        0

/**
 * Signal USS_DE_1_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID        4

/**
 * Signal USS_DE_1_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_1_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID Signal USS_DE_2_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_2_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID        1, 0, 48, 3

/**
 * Signal USS_DE_2_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID      1, 0, 48, 3, 0

/**
 * Get signal USS_DE_2_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_DE_2_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID(buf, val) { \
	buf[6] &= ~(0x01 << 0); \
	buf[6] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[7] &= ~(0x03 << 6); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_DE_2_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID(buf, 0)

/**
 * Signal USS_DE_2_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_2_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID      0

/**
 * Signal USS_DE_2_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID        0

/**
 * Signal USS_DE_2_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID        4

/**
 * Signal USS_DE_2_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_2_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID Signal USS_DE_3_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_3_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID        1, 0, 61, 3

/**
 * Signal USS_DE_3_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID      1, 0, 61, 3, 0

/**
 * Get signal USS_DE_3_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_3_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID(buf, val) { \
	buf[7] &= ~(0x07 << 3); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal USS_DE_3_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID(buf, 0)

/**
 * Signal USS_DE_3_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_3_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID      0

/**
 * Signal USS_DE_3_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID        0

/**
 * Signal USS_DE_3_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID        4

/**
 * Signal USS_DE_3_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_3_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID Signal USS_DE_4_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_4_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID        1, 0, 58, 3

/**
 * Signal USS_DE_4_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID      1, 0, 58, 3, 0

/**
 * Get signal USS_DE_4_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_4_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID(buf, val) { \
	buf[7] &= ~(0x07 << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal USS_DE_4_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID(buf, 0)

/**
 * Signal USS_DE_4_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_4_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID      0

/**
 * Signal USS_DE_4_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID        0

/**
 * Signal USS_DE_4_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID        4

/**
 * Signal USS_DE_4_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_4_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID Signal USS_DE_5_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_5_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID        1, 0, 71, 3

/**
 * Signal USS_DE_5_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID      1, 0, 71, 3, 0

/**
 * Get signal USS_DE_5_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 5) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_5_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID(buf, val) { \
	buf[8] &= ~(0x07 << 5); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal USS_DE_5_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID(buf, 0)

/**
 * Signal USS_DE_5_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_5_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID      0

/**
 * Signal USS_DE_5_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID        0

/**
 * Signal USS_DE_5_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID        4

/**
 * Signal USS_DE_5_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_5_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID Signal USS_DE_6_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_6_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID        1, 0, 68, 3

/**
 * Signal USS_DE_6_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID      1, 0, 68, 3, 0

/**
 * Get signal USS_DE_6_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 2) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_6_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID(buf, val) { \
	buf[8] &= ~(0x07 << 2); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal USS_DE_6_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID(buf, 0)

/**
 * Signal USS_DE_6_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_6_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID      0

/**
 * Signal USS_DE_6_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID        0

/**
 * Signal USS_DE_6_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID        4

/**
 * Signal USS_DE_6_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_6_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID Signal USS_DE_7_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_7_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID        1, 0, 65, 3

/**
 * Signal USS_DE_7_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID      1, 0, 65, 3, 0

/**
 * Get signal USS_DE_7_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 7) & 0x01) << 0) \
)

/**
 * Set signal USS_DE_7_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID(buf, val) { \
	buf[8] &= ~(0x03 << 0); \
	buf[8] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[9] &= ~(0x01 << 7); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal USS_DE_7_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID(buf, 0)

/**
 * Signal USS_DE_7_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_7_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID      0

/**
 * Signal USS_DE_7_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID        0

/**
 * Signal USS_DE_7_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID        4

/**
 * Signal USS_DE_7_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_7_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID Signal USS_DE_8_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_8_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID        1, 0, 78, 3

/**
 * Signal USS_DE_8_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID      1, 0, 78, 3, 0

/**
 * Get signal USS_DE_8_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[9] >> 4) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_8_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID(buf, val) { \
	buf[9] &= ~(0x07 << 4); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal USS_DE_8_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID(buf, 0)

/**
 * Signal USS_DE_8_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_8_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID      0

/**
 * Signal USS_DE_8_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID        0

/**
 * Signal USS_DE_8_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID        4

/**
 * Signal USS_DE_8_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_8_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID Signal USS_DE_9_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_9_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID        1, 0, 75, 3

/**
 * Signal USS_DE_9_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID      1, 0, 75, 3, 0

/**
 * Get signal USS_DE_9_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[9] >> 1) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_9_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID(buf, val) { \
	buf[9] &= ~(0x07 << 1); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal USS_DE_9_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID(buf, 0)

/**
 * Signal USS_DE_9_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_9_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID      0

/**
 * Signal USS_DE_9_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID        0

/**
 * Signal USS_DE_9_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID        4

/**
 * Signal USS_DE_9_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_9_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID Signal USS_DE_10_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_10_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID        1, 0, 72, 3

/**
 * Signal USS_DE_10_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID      1, 0, 72, 3, 0

/**
 * Get signal USS_DE_10_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[9] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[10] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_DE_10_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID(buf, val) { \
	buf[9] &= ~(0x01 << 0); \
	buf[9] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[10] &= ~(0x03 << 6); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_DE_10_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID(buf, 0)

/**
 * Signal USS_DE_10_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_10_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID      0

/**
 * Signal USS_DE_10_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID        0

/**
 * Signal USS_DE_10_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID        4

/**
 * Signal USS_DE_10_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_10_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID Signal USS_DE_11_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_11_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID        1, 0, 85, 3

/**
 * Signal USS_DE_11_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID      1, 0, 85, 3, 0

/**
 * Get signal USS_DE_11_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[10] >> 3) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_11_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID(buf, val) { \
	buf[10] &= ~(0x07 << 3); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal USS_DE_11_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID(buf, 0)

/**
 * Signal USS_DE_11_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_11_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID      0

/**
 * Signal USS_DE_11_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID        0

/**
 * Signal USS_DE_11_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID        4

/**
 * Signal USS_DE_11_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_11_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID Signal USS_DE_12_2_CodeID of Message PAS_USSCodeIDInfo1 (0x1a2)
 *
 * CodeID of Secondary echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSCodeIDInfo1
 * @{
 */

/**
 * Signal USS_DE_12_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID and \ref GET_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID instead.
 */
#define SIG_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID        1, 0, 82, 3

/**
 * Signal USS_DE_12_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID or \ref INIT_PAS_USSCodeIDInfo1 instead.
 */
#define SETUP_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID      1, 0, 82, 3, 0

/**
 * Get signal USS_DE_12_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[10] >> 0) & 0x07) << 0) \
)

/**
 * Set signal USS_DE_12_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID(buf, val) { \
	buf[10] &= ~(0x07 << 0); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal USS_DE_12_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID(buf) \
	SET_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID(buf, 0)

/**
 * Signal USS_DE_12_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_DE_12_2_CodeID raw initial value.
 */
#define START_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID      0

/**
 * Signal USS_DE_12_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID        0

/**
 * Signal USS_DE_12_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID        4

/**
 * Signal USS_DE_12_2_CodeID raw offset value.
 */
#define OFF_PAS_USSCodeIDInfo1_USS_DE_12_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_PAS_USSInfo2_Checksum Signal PAS_USSInfo2_Checksum of Message PAS_USSInfo2 (0x198)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal PAS_USSInfo2_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_PAS_USSInfo2_Checksum and \ref GET_PAS_USSInfo2_PAS_USSInfo2_Checksum instead.
 */
#define SIG_PAS_USSInfo2_PAS_USSInfo2_Checksum        1, 0, 7, 8

/**
 * Signal PAS_USSInfo2_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_PAS_USSInfo2_Checksum or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_PAS_USSInfo2_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_USSInfo2_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_PAS_USSInfo2_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_USSInfo2_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_PAS_USSInfo2_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_USSInfo2_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_PAS_USSInfo2_Checksum(buf) \
	SET_PAS_USSInfo2_PAS_USSInfo2_Checksum(buf, 0)

/**
 * Signal PAS_USSInfo2_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_PAS_USSInfo2_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSInfo2_Checksum raw initial value.
 */
#define START_PAS_USSInfo2_PAS_USSInfo2_Checksum      0

/**
 * Signal PAS_USSInfo2_Checksum raw minimum value.
 */
#define MIN_PAS_USSInfo2_PAS_USSInfo2_Checksum        0

/**
 * Signal PAS_USSInfo2_Checksum raw maximum value.
 */
#define MAX_PAS_USSInfo2_PAS_USSInfo2_Checksum        255

/**
 * Signal PAS_USSInfo2_Checksum raw offset value.
 */
#define OFF_PAS_USSInfo2_PAS_USSInfo2_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_PAS_USSInfo2_MsgCounter Signal PAS_USSInfo2_MsgCounter of Message PAS_USSInfo2 (0x198)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal PAS_USSInfo2_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_PAS_USSInfo2_MsgCounter and \ref GET_PAS_USSInfo2_PAS_USSInfo2_MsgCounter instead.
 */
#define SIG_PAS_USSInfo2_PAS_USSInfo2_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_USSInfo2_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_PAS_USSInfo2_MsgCounter or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_PAS_USSInfo2_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_USSInfo2_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_PAS_USSInfo2_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_USSInfo2_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_PAS_USSInfo2_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_USSInfo2_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_PAS_USSInfo2_MsgCounter(buf) \
	SET_PAS_USSInfo2_PAS_USSInfo2_MsgCounter(buf, 0)

/**
 * Signal PAS_USSInfo2_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_PAS_USSInfo2_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSInfo2_MsgCounter raw initial value.
 */
#define START_PAS_USSInfo2_PAS_USSInfo2_MsgCounter      0

/**
 * Signal PAS_USSInfo2_MsgCounter raw minimum value.
 */
#define MIN_PAS_USSInfo2_PAS_USSInfo2_MsgCounter        0

/**
 * Signal PAS_USSInfo2_MsgCounter raw maximum value.
 */
#define MAX_PAS_USSInfo2_PAS_USSInfo2_MsgCounter        15

/**
 * Signal PAS_USSInfo2_MsgCounter raw offset value.
 */
#define OFF_PAS_USSInfo2_PAS_USSInfo2_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_1_Right_1 Signal USS_CE_1_Right_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_1_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_1_Right_1 and \ref GET_PAS_USSInfo2_USS_CE_1_Right_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_1_Right_1           1, 0, 23, 10

/**
 * Signal USS_CE_1_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_1_Right_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_1_Right_1         1, 0, 23, 10, 0

/**
 * Get signal USS_CE_1_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_1_Right_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_1_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_1_Right_1(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_1_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_1_Right_1(buf) \
	SET_PAS_USSInfo2_USS_CE_1_Right_1(buf, 0)

/**
 * Signal USS_CE_1_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_1_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_1_Right_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_1_Right_1         0

/**
 * Signal USS_CE_1_Right_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_1_Right_1           0

/**
 * Signal USS_CE_1_Right_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_1_Right_1           551

/**
 * Signal USS_CE_1_Right_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_1_Right_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_2_Left_1 Signal USS_CE_2_Left_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_2_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_2_Left_1 and \ref GET_PAS_USSInfo2_USS_CE_2_Left_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_2_Left_1            1, 0, 29, 10

/**
 * Signal USS_CE_2_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_2_Left_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_2_Left_1          1, 0, 29, 10, 0

/**
 * Get signal USS_CE_2_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_2_Left_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_CE_2_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_2_Left_1(buf, val) { \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_CE_2_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_2_Left_1(buf) \
	SET_PAS_USSInfo2_USS_CE_2_Left_1(buf, 0)

/**
 * Signal USS_CE_2_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_2_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Left_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_2_Left_1          0

/**
 * Signal USS_CE_2_Left_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_2_Left_1            0

/**
 * Signal USS_CE_2_Left_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_2_Left_1            551

/**
 * Signal USS_CE_2_Left_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_2_Left_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_2_Right_1 Signal USS_CE_2_Right_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_2_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_2_Right_1 and \ref GET_PAS_USSInfo2_USS_CE_2_Right_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_2_Right_1           1, 0, 35, 10

/**
 * Signal USS_CE_2_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_2_Right_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_2_Right_1         1, 0, 35, 10, 0

/**
 * Get signal USS_CE_2_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_2_Right_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_CE_2_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_2_Right_1(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_CE_2_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_2_Right_1(buf) \
	SET_PAS_USSInfo2_USS_CE_2_Right_1(buf, 0)

/**
 * Signal USS_CE_2_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_2_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Right_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_2_Right_1         0

/**
 * Signal USS_CE_2_Right_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_2_Right_1           0

/**
 * Signal USS_CE_2_Right_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_2_Right_1           551

/**
 * Signal USS_CE_2_Right_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_2_Right_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_3_Left_1 Signal USS_CE_3_Left_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_3_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_3_Left_1 and \ref GET_PAS_USSInfo2_USS_CE_3_Left_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_3_Left_1            1, 0, 41, 10

/**
 * Signal USS_CE_3_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_3_Left_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_3_Left_1          1, 0, 41, 10, 0

/**
 * Get signal USS_CE_3_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_3_Left_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_3_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_3_Left_1(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_3_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_3_Left_1(buf) \
	SET_PAS_USSInfo2_USS_CE_3_Left_1(buf, 0)

/**
 * Signal USS_CE_3_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_3_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Left_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_3_Left_1          0

/**
 * Signal USS_CE_3_Left_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_3_Left_1            0

/**
 * Signal USS_CE_3_Left_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_3_Left_1            551

/**
 * Signal USS_CE_3_Left_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_3_Left_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_3_Right_1 Signal USS_CE_3_Right_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_3_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_3_Right_1 and \ref GET_PAS_USSInfo2_USS_CE_3_Right_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_3_Right_1           1, 0, 63, 10

/**
 * Signal USS_CE_3_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_3_Right_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_3_Right_1         1, 0, 63, 10, 0

/**
 * Get signal USS_CE_3_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_3_Right_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[8] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_3_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_3_Right_1(buf, val) { \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[8] &= ~(0x03 << 6); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_3_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_3_Right_1(buf) \
	SET_PAS_USSInfo2_USS_CE_3_Right_1(buf, 0)

/**
 * Signal USS_CE_3_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_3_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Right_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_3_Right_1         0

/**
 * Signal USS_CE_3_Right_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_3_Right_1           0

/**
 * Signal USS_CE_3_Right_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_3_Right_1           551

/**
 * Signal USS_CE_3_Right_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_3_Right_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_4_Left_1 Signal USS_CE_4_Left_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_4_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_4_Left_1 and \ref GET_PAS_USSInfo2_USS_CE_4_Left_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_4_Left_1            1, 0, 69, 10

/**
 * Signal USS_CE_4_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_4_Left_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_4_Left_1          1, 0, 69, 10, 0

/**
 * Get signal USS_CE_4_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_4_Left_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_CE_4_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_4_Left_1(buf, val) { \
	buf[8] &= ~(0x3f << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[9] &= ~(0x0f << 4); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_CE_4_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_4_Left_1(buf) \
	SET_PAS_USSInfo2_USS_CE_4_Left_1(buf, 0)

/**
 * Signal USS_CE_4_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_4_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Left_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_4_Left_1          0

/**
 * Signal USS_CE_4_Left_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_4_Left_1            0

/**
 * Signal USS_CE_4_Left_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_4_Left_1            551

/**
 * Signal USS_CE_4_Left_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_4_Left_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_4_Right_1 Signal USS_CE_4_Right_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_4_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_4_Right_1 and \ref GET_PAS_USSInfo2_USS_CE_4_Right_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_4_Right_1           1, 0, 75, 10

/**
 * Signal USS_CE_4_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_4_Right_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_4_Right_1         1, 0, 75, 10, 0

/**
 * Get signal USS_CE_4_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_4_Right_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[10] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_CE_4_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_4_Right_1(buf, val) { \
	buf[9] &= ~(0x0f << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[10] &= ~(0x3f << 2); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_CE_4_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_4_Right_1(buf) \
	SET_PAS_USSInfo2_USS_CE_4_Right_1(buf, 0)

/**
 * Signal USS_CE_4_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_4_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Right_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_4_Right_1         0

/**
 * Signal USS_CE_4_Right_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_4_Right_1           0

/**
 * Signal USS_CE_4_Right_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_4_Right_1           551

/**
 * Signal USS_CE_4_Right_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_4_Right_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_5_Left_1 Signal USS_CE_5_Left_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_5_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_5_Left_1 and \ref GET_PAS_USSInfo2_USS_CE_5_Left_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_5_Left_1            1, 0, 81, 10

/**
 * Signal USS_CE_5_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_5_Left_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_5_Left_1          1, 0, 81, 10, 0

/**
 * Get signal USS_CE_5_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_5_Left_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_5_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_5_Left_1(buf, val) { \
	buf[10] &= ~(0x03 << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[11] &= ~(0xff << 0); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_5_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_5_Left_1(buf) \
	SET_PAS_USSInfo2_USS_CE_5_Left_1(buf, 0)

/**
 * Signal USS_CE_5_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_5_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Left_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_5_Left_1          0

/**
 * Signal USS_CE_5_Left_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_5_Left_1            0

/**
 * Signal USS_CE_5_Left_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_5_Left_1            551

/**
 * Signal USS_CE_5_Left_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_5_Left_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_5_Right_1 Signal USS_CE_5_Right_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_5_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_5_Right_1 and \ref GET_PAS_USSInfo2_USS_CE_5_Right_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_5_Right_1           1, 0, 103, 10

/**
 * Signal USS_CE_5_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_5_Right_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_5_Right_1         1, 0, 103, 10, 0

/**
 * Get signal USS_CE_5_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_5_Right_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_5_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_5_Right_1(buf, val) { \
	buf[12] &= ~(0xff << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[13] &= ~(0x03 << 6); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_5_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_5_Right_1(buf) \
	SET_PAS_USSInfo2_USS_CE_5_Right_1(buf, 0)

/**
 * Signal USS_CE_5_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_5_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Right_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_5_Right_1         0

/**
 * Signal USS_CE_5_Right_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_5_Right_1           0

/**
 * Signal USS_CE_5_Right_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_5_Right_1           551

/**
 * Signal USS_CE_5_Right_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_5_Right_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_6_Left_1 Signal USS_CE_6_Left_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_6_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_6_Left_1 and \ref GET_PAS_USSInfo2_USS_CE_6_Left_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_6_Left_1            1, 0, 109, 10

/**
 * Signal USS_CE_6_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_6_Left_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_6_Left_1          1, 0, 109, 10, 0

/**
 * Get signal USS_CE_6_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_6_Left_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_CE_6_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_6_Left_1(buf, val) { \
	buf[13] &= ~(0x3f << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[14] &= ~(0x0f << 4); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_CE_6_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_6_Left_1(buf) \
	SET_PAS_USSInfo2_USS_CE_6_Left_1(buf, 0)

/**
 * Signal USS_CE_6_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_6_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_6_Left_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_6_Left_1          0

/**
 * Signal USS_CE_6_Left_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_6_Left_1            0

/**
 * Signal USS_CE_6_Left_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_6_Left_1            551

/**
 * Signal USS_CE_6_Left_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_6_Left_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_7_Right_1 Signal USS_CE_7_Right_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_7_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_7_Right_1 and \ref GET_PAS_USSInfo2_USS_CE_7_Right_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_7_Right_1           1, 0, 115, 10

/**
 * Signal USS_CE_7_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_7_Right_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_7_Right_1         1, 0, 115, 10, 0

/**
 * Get signal USS_CE_7_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_7_Right_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[14] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_CE_7_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_7_Right_1(buf, val) { \
	buf[14] &= ~(0x0f << 0); \
	buf[14] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[15] &= ~(0x3f << 2); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_CE_7_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_7_Right_1(buf) \
	SET_PAS_USSInfo2_USS_CE_7_Right_1(buf, 0)

/**
 * Signal USS_CE_7_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_7_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_7_Right_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_7_Right_1         0

/**
 * Signal USS_CE_7_Right_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_7_Right_1           0

/**
 * Signal USS_CE_7_Right_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_7_Right_1           551

/**
 * Signal USS_CE_7_Right_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_7_Right_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_8_Left_1 Signal USS_CE_8_Left_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_8_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_8_Left_1 and \ref GET_PAS_USSInfo2_USS_CE_8_Left_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_8_Left_1            1, 0, 121, 10

/**
 * Signal USS_CE_8_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_8_Left_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_8_Left_1          1, 0, 121, 10, 0

/**
 * Get signal USS_CE_8_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_8_Left_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[15] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[16] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_8_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_8_Left_1(buf, val) { \
	buf[15] &= ~(0x03 << 0); \
	buf[15] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[16] &= ~(0xff << 0); \
	buf[16] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_8_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_8_Left_1(buf) \
	SET_PAS_USSInfo2_USS_CE_8_Left_1(buf, 0)

/**
 * Signal USS_CE_8_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_8_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Left_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_8_Left_1          0

/**
 * Signal USS_CE_8_Left_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_8_Left_1            0

/**
 * Signal USS_CE_8_Left_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_8_Left_1            551

/**
 * Signal USS_CE_8_Left_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_8_Left_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_8_Right_1 Signal USS_CE_8_Right_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_8_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_8_Right_1 and \ref GET_PAS_USSInfo2_USS_CE_8_Right_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_8_Right_1           1, 0, 143, 10

/**
 * Signal USS_CE_8_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_8_Right_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_8_Right_1         1, 0, 143, 10, 0

/**
 * Get signal USS_CE_8_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_8_Right_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[17] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[18] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_8_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_8_Right_1(buf, val) { \
	buf[17] &= ~(0xff << 0); \
	buf[17] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[18] &= ~(0x03 << 6); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_8_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_8_Right_1(buf) \
	SET_PAS_USSInfo2_USS_CE_8_Right_1(buf, 0)

/**
 * Signal USS_CE_8_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_8_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Right_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_8_Right_1         0

/**
 * Signal USS_CE_8_Right_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_8_Right_1           0

/**
 * Signal USS_CE_8_Right_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_8_Right_1           551

/**
 * Signal USS_CE_8_Right_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_8_Right_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_9_Left_1 Signal USS_CE_9_Left_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_9_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_9_Left_1 and \ref GET_PAS_USSInfo2_USS_CE_9_Left_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_9_Left_1            1, 0, 149, 10

/**
 * Signal USS_CE_9_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_9_Left_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_9_Left_1          1, 0, 149, 10, 0

/**
 * Get signal USS_CE_9_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_9_Left_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[18] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[19] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_CE_9_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_9_Left_1(buf, val) { \
	buf[18] &= ~(0x3f << 0); \
	buf[18] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[19] &= ~(0x0f << 4); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_CE_9_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_9_Left_1(buf) \
	SET_PAS_USSInfo2_USS_CE_9_Left_1(buf, 0)

/**
 * Signal USS_CE_9_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_9_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Left_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_9_Left_1          0

/**
 * Signal USS_CE_9_Left_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_9_Left_1            0

/**
 * Signal USS_CE_9_Left_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_9_Left_1            551

/**
 * Signal USS_CE_9_Left_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_9_Left_1            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_9_Right_1 Signal USS_CE_9_Right_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_9_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_9_Right_1 and \ref GET_PAS_USSInfo2_USS_CE_9_Right_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_9_Right_1           1, 0, 155, 10

/**
 * Signal USS_CE_9_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_9_Right_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_9_Right_1         1, 0, 155, 10, 0

/**
 * Get signal USS_CE_9_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_9_Right_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[19] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_CE_9_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_9_Right_1(buf, val) { \
	buf[19] &= ~(0x0f << 0); \
	buf[19] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[20] &= ~(0x3f << 2); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_CE_9_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_9_Right_1(buf) \
	SET_PAS_USSInfo2_USS_CE_9_Right_1(buf, 0)

/**
 * Signal USS_CE_9_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_9_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Right_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_9_Right_1         0

/**
 * Signal USS_CE_9_Right_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_9_Right_1           0

/**
 * Signal USS_CE_9_Right_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_9_Right_1           551

/**
 * Signal USS_CE_9_Right_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_9_Right_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_10_Left_1 Signal USS_CE_10_Left_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_10_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_10_Left_1 and \ref GET_PAS_USSInfo2_USS_CE_10_Left_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_10_Left_1           1, 0, 161, 10

/**
 * Signal USS_CE_10_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_10_Left_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_10_Left_1         1, 0, 161, 10, 0

/**
 * Get signal USS_CE_10_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_10_Left_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[20] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[21] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_10_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_10_Left_1(buf, val) { \
	buf[20] &= ~(0x03 << 0); \
	buf[20] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[21] &= ~(0xff << 0); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_10_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_10_Left_1(buf) \
	SET_PAS_USSInfo2_USS_CE_10_Left_1(buf, 0)

/**
 * Signal USS_CE_10_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_10_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Left_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_10_Left_1         0

/**
 * Signal USS_CE_10_Left_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_10_Left_1           0

/**
 * Signal USS_CE_10_Left_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_10_Left_1           551

/**
 * Signal USS_CE_10_Left_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_10_Left_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_10_Right_1 Signal USS_CE_10_Right_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_10_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_10_Right_1 and \ref GET_PAS_USSInfo2_USS_CE_10_Right_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_10_Right_1          1, 0, 183, 10

/**
 * Signal USS_CE_10_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_10_Right_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_10_Right_1        1, 0, 183, 10, 0

/**
 * Get signal USS_CE_10_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_10_Right_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_10_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_10_Right_1(buf, val) { \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[23] &= ~(0x03 << 6); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_10_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_10_Right_1(buf) \
	SET_PAS_USSInfo2_USS_CE_10_Right_1(buf, 0)

/**
 * Signal USS_CE_10_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_10_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Right_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_10_Right_1        0

/**
 * Signal USS_CE_10_Right_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_10_Right_1          0

/**
 * Signal USS_CE_10_Right_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_10_Right_1          551

/**
 * Signal USS_CE_10_Right_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_10_Right_1          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_11_Left_1 Signal USS_CE_11_Left_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_11_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_11_Left_1 and \ref GET_PAS_USSInfo2_USS_CE_11_Left_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_11_Left_1           1, 0, 189, 10

/**
 * Signal USS_CE_11_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_11_Left_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_11_Left_1         1, 0, 189, 10, 0

/**
 * Get signal USS_CE_11_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_11_Left_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[23] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[24] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_CE_11_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_11_Left_1(buf, val) { \
	buf[23] &= ~(0x3f << 0); \
	buf[23] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[24] &= ~(0x0f << 4); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_CE_11_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_11_Left_1(buf) \
	SET_PAS_USSInfo2_USS_CE_11_Left_1(buf, 0)

/**
 * Signal USS_CE_11_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_11_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Left_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_11_Left_1         0

/**
 * Signal USS_CE_11_Left_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_11_Left_1           0

/**
 * Signal USS_CE_11_Left_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_11_Left_1           551

/**
 * Signal USS_CE_11_Left_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_11_Left_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_11_Right_1 Signal USS_CE_11_Right_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_11_Right_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_11_Right_1 and \ref GET_PAS_USSInfo2_USS_CE_11_Right_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_11_Right_1          1, 0, 195, 10

/**
 * Signal USS_CE_11_Right_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_11_Right_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_11_Right_1        1, 0, 195, 10, 0

/**
 * Get signal USS_CE_11_Right_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_11_Right_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[24] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[25] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_CE_11_Right_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_11_Right_1(buf, val) { \
	buf[24] &= ~(0x0f << 0); \
	buf[24] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[25] &= ~(0x3f << 2); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_CE_11_Right_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_11_Right_1(buf) \
	SET_PAS_USSInfo2_USS_CE_11_Right_1(buf, 0)

/**
 * Signal USS_CE_11_Right_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_11_Right_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Right_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_11_Right_1        0

/**
 * Signal USS_CE_11_Right_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_11_Right_1          0

/**
 * Signal USS_CE_11_Right_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_11_Right_1          551

/**
 * Signal USS_CE_11_Right_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_11_Right_1          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_12_Left_1 Signal USS_CE_12_Left_1 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_12_Left_1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_12_Left_1 and \ref GET_PAS_USSInfo2_USS_CE_12_Left_1 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_12_Left_1           1, 0, 201, 10

/**
 * Signal USS_CE_12_Left_1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_12_Left_1 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_12_Left_1         1, 0, 201, 10, 0

/**
 * Get signal USS_CE_12_Left_1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_12_Left_1(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[26] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_12_Left_1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_12_Left_1(buf, val) { \
	buf[25] &= ~(0x03 << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[26] &= ~(0xff << 0); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_12_Left_1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_12_Left_1(buf) \
	SET_PAS_USSInfo2_USS_CE_12_Left_1(buf, 0)

/**
 * Signal USS_CE_12_Left_1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_12_Left_1(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_12_Left_1 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_12_Left_1         0

/**
 * Signal USS_CE_12_Left_1 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_12_Left_1           0

/**
 * Signal USS_CE_12_Left_1 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_12_Left_1           551

/**
 * Signal USS_CE_12_Left_1 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_12_Left_1           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_1_Right_2 Signal USS_CE_1_Right_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_1_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_1_Right_2 and \ref GET_PAS_USSInfo2_USS_CE_1_Right_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_1_Right_2           1, 0, 223, 10

/**
 * Signal USS_CE_1_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_1_Right_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_1_Right_2         1, 0, 223, 10, 0

/**
 * Get signal USS_CE_1_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_1_Right_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[27] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[28] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_1_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_1_Right_2(buf, val) { \
	buf[27] &= ~(0xff << 0); \
	buf[27] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[28] &= ~(0x03 << 6); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_1_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_1_Right_2(buf) \
	SET_PAS_USSInfo2_USS_CE_1_Right_2(buf, 0)

/**
 * Signal USS_CE_1_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_1_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_1_Right_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_1_Right_2         0

/**
 * Signal USS_CE_1_Right_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_1_Right_2           0

/**
 * Signal USS_CE_1_Right_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_1_Right_2           551

/**
 * Signal USS_CE_1_Right_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_1_Right_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_2_Left_2 Signal USS_CE_2_Left_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_2_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_2_Left_2 and \ref GET_PAS_USSInfo2_USS_CE_2_Left_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_2_Left_2            1, 0, 229, 10

/**
 * Signal USS_CE_2_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_2_Left_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_2_Left_2          1, 0, 229, 10, 0

/**
 * Get signal USS_CE_2_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_2_Left_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[28] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_CE_2_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_2_Left_2(buf, val) { \
	buf[28] &= ~(0x3f << 0); \
	buf[28] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[29] &= ~(0x0f << 4); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_CE_2_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_2_Left_2(buf) \
	SET_PAS_USSInfo2_USS_CE_2_Left_2(buf, 0)

/**
 * Signal USS_CE_2_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_2_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Left_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_2_Left_2          0

/**
 * Signal USS_CE_2_Left_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_2_Left_2            0

/**
 * Signal USS_CE_2_Left_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_2_Left_2            551

/**
 * Signal USS_CE_2_Left_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_2_Left_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_2_Right_2 Signal USS_CE_2_Right_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_2_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_2_Right_2 and \ref GET_PAS_USSInfo2_USS_CE_2_Right_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_2_Right_2           1, 0, 235, 10

/**
 * Signal USS_CE_2_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_2_Right_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_2_Right_2         1, 0, 235, 10, 0

/**
 * Get signal USS_CE_2_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_2_Right_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[29] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[30] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_CE_2_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_2_Right_2(buf, val) { \
	buf[29] &= ~(0x0f << 0); \
	buf[29] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[30] &= ~(0x3f << 2); \
	buf[30] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_CE_2_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_2_Right_2(buf) \
	SET_PAS_USSInfo2_USS_CE_2_Right_2(buf, 0)

/**
 * Signal USS_CE_2_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_2_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Right_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_2_Right_2         0

/**
 * Signal USS_CE_2_Right_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_2_Right_2           0

/**
 * Signal USS_CE_2_Right_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_2_Right_2           551

/**
 * Signal USS_CE_2_Right_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_2_Right_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_3_Left_2 Signal USS_CE_3_Left_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_3_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_3_Left_2 and \ref GET_PAS_USSInfo2_USS_CE_3_Left_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_3_Left_2            1, 0, 241, 10

/**
 * Signal USS_CE_3_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_3_Left_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_3_Left_2          1, 0, 241, 10, 0

/**
 * Get signal USS_CE_3_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_3_Left_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_3_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_3_Left_2(buf, val) { \
	buf[30] &= ~(0x03 << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[31] &= ~(0xff << 0); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_3_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_3_Left_2(buf) \
	SET_PAS_USSInfo2_USS_CE_3_Left_2(buf, 0)

/**
 * Signal USS_CE_3_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_3_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Left_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_3_Left_2          0

/**
 * Signal USS_CE_3_Left_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_3_Left_2            0

/**
 * Signal USS_CE_3_Left_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_3_Left_2            551

/**
 * Signal USS_CE_3_Left_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_3_Left_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_3_Right_2 Signal USS_CE_3_Right_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_3_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_3_Right_2 and \ref GET_PAS_USSInfo2_USS_CE_3_Right_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_3_Right_2           1, 0, 263, 10

/**
 * Signal USS_CE_3_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_3_Right_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_3_Right_2         1, 0, 263, 10, 0

/**
 * Get signal USS_CE_3_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_3_Right_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[32] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[33] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_3_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_3_Right_2(buf, val) { \
	buf[32] &= ~(0xff << 0); \
	buf[32] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[33] &= ~(0x03 << 6); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_3_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_3_Right_2(buf) \
	SET_PAS_USSInfo2_USS_CE_3_Right_2(buf, 0)

/**
 * Signal USS_CE_3_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_3_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Right_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_3_Right_2         0

/**
 * Signal USS_CE_3_Right_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_3_Right_2           0

/**
 * Signal USS_CE_3_Right_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_3_Right_2           551

/**
 * Signal USS_CE_3_Right_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_3_Right_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_4_Left_2 Signal USS_CE_4_Left_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_4_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_4_Left_2 and \ref GET_PAS_USSInfo2_USS_CE_4_Left_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_4_Left_2            1, 0, 269, 10

/**
 * Signal USS_CE_4_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_4_Left_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_4_Left_2          1, 0, 269, 10, 0

/**
 * Get signal USS_CE_4_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_4_Left_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[33] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[34] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_CE_4_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_4_Left_2(buf, val) { \
	buf[33] &= ~(0x3f << 0); \
	buf[33] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[34] &= ~(0x0f << 4); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_CE_4_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_4_Left_2(buf) \
	SET_PAS_USSInfo2_USS_CE_4_Left_2(buf, 0)

/**
 * Signal USS_CE_4_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_4_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Left_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_4_Left_2          0

/**
 * Signal USS_CE_4_Left_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_4_Left_2            0

/**
 * Signal USS_CE_4_Left_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_4_Left_2            551

/**
 * Signal USS_CE_4_Left_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_4_Left_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_4_Right_2 Signal USS_CE_4_Right_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_4_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_4_Right_2 and \ref GET_PAS_USSInfo2_USS_CE_4_Right_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_4_Right_2           1, 0, 275, 10

/**
 * Signal USS_CE_4_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_4_Right_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_4_Right_2         1, 0, 275, 10, 0

/**
 * Get signal USS_CE_4_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_4_Right_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[34] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[35] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_CE_4_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_4_Right_2(buf, val) { \
	buf[34] &= ~(0x0f << 0); \
	buf[34] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[35] &= ~(0x3f << 2); \
	buf[35] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_CE_4_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_4_Right_2(buf) \
	SET_PAS_USSInfo2_USS_CE_4_Right_2(buf, 0)

/**
 * Signal USS_CE_4_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_4_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Right_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_4_Right_2         0

/**
 * Signal USS_CE_4_Right_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_4_Right_2           0

/**
 * Signal USS_CE_4_Right_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_4_Right_2           551

/**
 * Signal USS_CE_4_Right_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_4_Right_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_5_Left_2 Signal USS_CE_5_Left_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_5_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_5_Left_2 and \ref GET_PAS_USSInfo2_USS_CE_5_Left_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_5_Left_2            1, 0, 281, 10

/**
 * Signal USS_CE_5_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_5_Left_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_5_Left_2          1, 0, 281, 10, 0

/**
 * Get signal USS_CE_5_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_5_Left_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[35] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[36] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_5_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_5_Left_2(buf, val) { \
	buf[35] &= ~(0x03 << 0); \
	buf[35] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[36] &= ~(0xff << 0); \
	buf[36] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_5_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_5_Left_2(buf) \
	SET_PAS_USSInfo2_USS_CE_5_Left_2(buf, 0)

/**
 * Signal USS_CE_5_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_5_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Left_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_5_Left_2          0

/**
 * Signal USS_CE_5_Left_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_5_Left_2            0

/**
 * Signal USS_CE_5_Left_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_5_Left_2            551

/**
 * Signal USS_CE_5_Left_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_5_Left_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_5_Right_2 Signal USS_CE_5_Right_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_5_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_5_Right_2 and \ref GET_PAS_USSInfo2_USS_CE_5_Right_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_5_Right_2           1, 0, 303, 10

/**
 * Signal USS_CE_5_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_5_Right_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_5_Right_2         1, 0, 303, 10, 0

/**
 * Get signal USS_CE_5_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_5_Right_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[37] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[38] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_5_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_5_Right_2(buf, val) { \
	buf[37] &= ~(0xff << 0); \
	buf[37] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[38] &= ~(0x03 << 6); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_5_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_5_Right_2(buf) \
	SET_PAS_USSInfo2_USS_CE_5_Right_2(buf, 0)

/**
 * Signal USS_CE_5_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_5_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Right_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_5_Right_2         0

/**
 * Signal USS_CE_5_Right_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_5_Right_2           0

/**
 * Signal USS_CE_5_Right_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_5_Right_2           551

/**
 * Signal USS_CE_5_Right_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_5_Right_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_6_Left_2 Signal USS_CE_6_Left_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_6_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_6_Left_2 and \ref GET_PAS_USSInfo2_USS_CE_6_Left_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_6_Left_2            1, 0, 309, 10

/**
 * Signal USS_CE_6_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_6_Left_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_6_Left_2          1, 0, 309, 10, 0

/**
 * Get signal USS_CE_6_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_6_Left_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[38] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[39] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_CE_6_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_6_Left_2(buf, val) { \
	buf[38] &= ~(0x3f << 0); \
	buf[38] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[39] &= ~(0x0f << 4); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_CE_6_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_6_Left_2(buf) \
	SET_PAS_USSInfo2_USS_CE_6_Left_2(buf, 0)

/**
 * Signal USS_CE_6_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_6_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_6_Left_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_6_Left_2          0

/**
 * Signal USS_CE_6_Left_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_6_Left_2            0

/**
 * Signal USS_CE_6_Left_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_6_Left_2            551

/**
 * Signal USS_CE_6_Left_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_6_Left_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_7_Right_2 Signal USS_CE_7_Right_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_7_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_7_Right_2 and \ref GET_PAS_USSInfo2_USS_CE_7_Right_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_7_Right_2           1, 0, 315, 10

/**
 * Signal USS_CE_7_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_7_Right_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_7_Right_2         1, 0, 315, 10, 0

/**
 * Get signal USS_CE_7_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_7_Right_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[39] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[40] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_CE_7_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_7_Right_2(buf, val) { \
	buf[39] &= ~(0x0f << 0); \
	buf[39] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[40] &= ~(0x3f << 2); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_CE_7_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_7_Right_2(buf) \
	SET_PAS_USSInfo2_USS_CE_7_Right_2(buf, 0)

/**
 * Signal USS_CE_7_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_7_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_7_Right_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_7_Right_2         0

/**
 * Signal USS_CE_7_Right_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_7_Right_2           0

/**
 * Signal USS_CE_7_Right_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_7_Right_2           551

/**
 * Signal USS_CE_7_Right_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_7_Right_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_8_Left_2 Signal USS_CE_8_Left_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_8_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_8_Left_2 and \ref GET_PAS_USSInfo2_USS_CE_8_Left_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_8_Left_2            1, 0, 321, 10

/**
 * Signal USS_CE_8_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_8_Left_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_8_Left_2          1, 0, 321, 10, 0

/**
 * Get signal USS_CE_8_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_8_Left_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[40] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[41] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_8_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_8_Left_2(buf, val) { \
	buf[40] &= ~(0x03 << 0); \
	buf[40] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[41] &= ~(0xff << 0); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_8_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_8_Left_2(buf) \
	SET_PAS_USSInfo2_USS_CE_8_Left_2(buf, 0)

/**
 * Signal USS_CE_8_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_8_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Left_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_8_Left_2          0

/**
 * Signal USS_CE_8_Left_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_8_Left_2            0

/**
 * Signal USS_CE_8_Left_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_8_Left_2            551

/**
 * Signal USS_CE_8_Left_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_8_Left_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_8_Right_2 Signal USS_CE_8_Right_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_8_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_8_Right_2 and \ref GET_PAS_USSInfo2_USS_CE_8_Right_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_8_Right_2           1, 0, 343, 10

/**
 * Signal USS_CE_8_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_8_Right_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_8_Right_2         1, 0, 343, 10, 0

/**
 * Get signal USS_CE_8_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_8_Right_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[42] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[43] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_8_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_8_Right_2(buf, val) { \
	buf[42] &= ~(0xff << 0); \
	buf[42] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[43] &= ~(0x03 << 6); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_8_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_8_Right_2(buf) \
	SET_PAS_USSInfo2_USS_CE_8_Right_2(buf, 0)

/**
 * Signal USS_CE_8_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_8_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Right_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_8_Right_2         0

/**
 * Signal USS_CE_8_Right_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_8_Right_2           0

/**
 * Signal USS_CE_8_Right_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_8_Right_2           551

/**
 * Signal USS_CE_8_Right_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_8_Right_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_9_Left_2 Signal USS_CE_9_Left_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_9_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_9_Left_2 and \ref GET_PAS_USSInfo2_USS_CE_9_Left_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_9_Left_2            1, 0, 349, 10

/**
 * Signal USS_CE_9_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_9_Left_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_9_Left_2          1, 0, 349, 10, 0

/**
 * Get signal USS_CE_9_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_9_Left_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[43] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[44] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_CE_9_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_9_Left_2(buf, val) { \
	buf[43] &= ~(0x3f << 0); \
	buf[43] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[44] &= ~(0x0f << 4); \
	buf[44] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_CE_9_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_9_Left_2(buf) \
	SET_PAS_USSInfo2_USS_CE_9_Left_2(buf, 0)

/**
 * Signal USS_CE_9_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_9_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Left_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_9_Left_2          0

/**
 * Signal USS_CE_9_Left_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_9_Left_2            0

/**
 * Signal USS_CE_9_Left_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_9_Left_2            551

/**
 * Signal USS_CE_9_Left_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_9_Left_2            0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_9_Right_2 Signal USS_CE_9_Right_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_9_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_9_Right_2 and \ref GET_PAS_USSInfo2_USS_CE_9_Right_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_9_Right_2           1, 0, 355, 10

/**
 * Signal USS_CE_9_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_9_Right_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_9_Right_2         1, 0, 355, 10, 0

/**
 * Get signal USS_CE_9_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_9_Right_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[44] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[45] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_CE_9_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_9_Right_2(buf, val) { \
	buf[44] &= ~(0x0f << 0); \
	buf[44] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[45] &= ~(0x3f << 2); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_CE_9_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_9_Right_2(buf) \
	SET_PAS_USSInfo2_USS_CE_9_Right_2(buf, 0)

/**
 * Signal USS_CE_9_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_9_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Right_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_9_Right_2         0

/**
 * Signal USS_CE_9_Right_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_9_Right_2           0

/**
 * Signal USS_CE_9_Right_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_9_Right_2           551

/**
 * Signal USS_CE_9_Right_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_9_Right_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_10_Left_2 Signal USS_CE_10_Left_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_10_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_10_Left_2 and \ref GET_PAS_USSInfo2_USS_CE_10_Left_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_10_Left_2           1, 0, 361, 10

/**
 * Signal USS_CE_10_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_10_Left_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_10_Left_2         1, 0, 361, 10, 0

/**
 * Get signal USS_CE_10_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_10_Left_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[45] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[46] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_10_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_10_Left_2(buf, val) { \
	buf[45] &= ~(0x03 << 0); \
	buf[45] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[46] &= ~(0xff << 0); \
	buf[46] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_10_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_10_Left_2(buf) \
	SET_PAS_USSInfo2_USS_CE_10_Left_2(buf, 0)

/**
 * Signal USS_CE_10_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_10_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Left_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_10_Left_2         0

/**
 * Signal USS_CE_10_Left_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_10_Left_2           0

/**
 * Signal USS_CE_10_Left_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_10_Left_2           551

/**
 * Signal USS_CE_10_Left_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_10_Left_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_10_Right_2 Signal USS_CE_10_Right_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_10_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_10_Right_2 and \ref GET_PAS_USSInfo2_USS_CE_10_Right_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_10_Right_2          1, 0, 383, 10

/**
 * Signal USS_CE_10_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_10_Right_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_10_Right_2        1, 0, 383, 10, 0

/**
 * Get signal USS_CE_10_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_10_Right_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[47] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[48] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_10_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_10_Right_2(buf, val) { \
	buf[47] &= ~(0xff << 0); \
	buf[47] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[48] &= ~(0x03 << 6); \
	buf[48] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_10_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_10_Right_2(buf) \
	SET_PAS_USSInfo2_USS_CE_10_Right_2(buf, 0)

/**
 * Signal USS_CE_10_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_10_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Right_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_10_Right_2        0

/**
 * Signal USS_CE_10_Right_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_10_Right_2          0

/**
 * Signal USS_CE_10_Right_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_10_Right_2          551

/**
 * Signal USS_CE_10_Right_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_10_Right_2          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_11_Left_2 Signal USS_CE_11_Left_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_11_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_11_Left_2 and \ref GET_PAS_USSInfo2_USS_CE_11_Left_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_11_Left_2           1, 0, 389, 10

/**
 * Signal USS_CE_11_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_11_Left_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_11_Left_2         1, 0, 389, 10, 0

/**
 * Get signal USS_CE_11_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_11_Left_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[48] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[49] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal USS_CE_11_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_11_Left_2(buf, val) { \
	buf[48] &= ~(0x3f << 0); \
	buf[48] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[49] &= ~(0x0f << 4); \
	buf[49] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal USS_CE_11_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_11_Left_2(buf) \
	SET_PAS_USSInfo2_USS_CE_11_Left_2(buf, 0)

/**
 * Signal USS_CE_11_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_11_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Left_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_11_Left_2         0

/**
 * Signal USS_CE_11_Left_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_11_Left_2           0

/**
 * Signal USS_CE_11_Left_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_11_Left_2           551

/**
 * Signal USS_CE_11_Left_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_11_Left_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_11_Right_2 Signal USS_CE_11_Right_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_11_Right_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_11_Right_2 and \ref GET_PAS_USSInfo2_USS_CE_11_Right_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_11_Right_2          1, 0, 395, 10

/**
 * Signal USS_CE_11_Right_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_11_Right_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_11_Right_2        1, 0, 395, 10, 0

/**
 * Get signal USS_CE_11_Right_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_11_Right_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[49] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[50] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal USS_CE_11_Right_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_11_Right_2(buf, val) { \
	buf[49] &= ~(0x0f << 0); \
	buf[49] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[50] &= ~(0x3f << 2); \
	buf[50] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal USS_CE_11_Right_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_11_Right_2(buf) \
	SET_PAS_USSInfo2_USS_CE_11_Right_2(buf, 0)

/**
 * Signal USS_CE_11_Right_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_11_Right_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Right_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_11_Right_2        0

/**
 * Signal USS_CE_11_Right_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_11_Right_2          0

/**
 * Signal USS_CE_11_Right_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_11_Right_2          551

/**
 * Signal USS_CE_11_Right_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_11_Right_2          0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSInfo2_USS_CE_12_Left_2 Signal USS_CE_12_Left_2 of Message PAS_USSInfo2 (0x198)
 *
 * Indirect echo distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSInfo2
 * @{
 */

/**
 * Signal USS_CE_12_Left_2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSInfo2_USS_CE_12_Left_2 and \ref GET_PAS_USSInfo2_USS_CE_12_Left_2 instead.
 */
#define SIG_PAS_USSInfo2_USS_CE_12_Left_2           1, 0, 401, 10

/**
 * Signal USS_CE_12_Left_2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSInfo2_USS_CE_12_Left_2 or \ref INIT_PAS_USSInfo2 instead.
 */
#define SETUP_PAS_USSInfo2_USS_CE_12_Left_2         1, 0, 401, 10, 0

/**
 * Get signal USS_CE_12_Left_2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSInfo2_USS_CE_12_Left_2(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[50] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[51] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_12_Left_2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSInfo2_USS_CE_12_Left_2(buf, val) { \
	buf[50] &= ~(0x03 << 0); \
	buf[50] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[51] &= ~(0xff << 0); \
	buf[51] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_12_Left_2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSInfo2_USS_CE_12_Left_2(buf) \
	SET_PAS_USSInfo2_USS_CE_12_Left_2(buf, 0)

/**
 * Signal USS_CE_12_Left_2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSInfo2_USS_CE_12_Left_2(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_12_Left_2 raw initial value.
 */
#define START_PAS_USSInfo2_USS_CE_12_Left_2         0

/**
 * Signal USS_CE_12_Left_2 raw minimum value.
 */
#define MIN_PAS_USSInfo2_USS_CE_12_Left_2           0

/**
 * Signal USS_CE_12_Left_2 raw maximum value.
 */
#define MAX_PAS_USSInfo2_USS_CE_12_Left_2           551

/**
 * Signal USS_CE_12_Left_2 raw offset value.
 */
#define OFF_PAS_USSInfo2_USS_CE_12_Left_2           0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum Signal PAS_USSTraceIDInfo2_1_Checksum of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal PAS_USSTraceIDInfo2_1_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum and \ref GET_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum        1, 0, 7, 8

/**
 * Signal PAS_USSTraceIDInfo2_1_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_USSTraceIDInfo2_1_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_USSTraceIDInfo2_1_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_USSTraceIDInfo2_1_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum(buf) \
	SET_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum(buf, 0)

/**
 * Signal PAS_USSTraceIDInfo2_1_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSTraceIDInfo2_1_Checksum raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum      0

/**
 * Signal PAS_USSTraceIDInfo2_1_Checksum raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum        0

/**
 * Signal PAS_USSTraceIDInfo2_1_Checksum raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum        255

/**
 * Signal PAS_USSTraceIDInfo2_1_Checksum raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter Signal PAS_USSTraceIDInfo2_1_MsgCounter of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal PAS_USSTraceIDInfo2_1_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter and \ref GET_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_USSTraceIDInfo2_1_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_USSTraceIDInfo2_1_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_USSTraceIDInfo2_1_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_USSTraceIDInfo2_1_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter(buf) \
	SET_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter(buf, 0)

/**
 * Signal PAS_USSTraceIDInfo2_1_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSTraceIDInfo2_1_MsgCounter raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter      0

/**
 * Signal PAS_USSTraceIDInfo2_1_MsgCounter raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter        0

/**
 * Signal PAS_USSTraceIDInfo2_1_MsgCounter raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter        15

/**
 * Signal PAS_USSTraceIDInfo2_1_MsgCounter raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_PAS_USSTraceIDInfo2_1_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID Signal USS_CE_1_Right_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_1_Right_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID        1, 0, 23, 16

/**
 * Signal USS_CE_1_Right_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID      1, 0, 23, 16, 0

/**
 * Get signal USS_CE_1_Right_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_1_Right_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_1_Right_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID(buf, 0)

/**
 * Signal USS_CE_1_Right_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_1_Right_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID      0

/**
 * Signal USS_CE_1_Right_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID        0

/**
 * Signal USS_CE_1_Right_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID        32767

/**
 * Signal USS_CE_1_Right_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID Signal USS_CE_2_Left_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_2_Left_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID        1, 0, 39, 16

/**
 * Signal USS_CE_2_Left_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID      1, 0, 39, 16, 0

/**
 * Get signal USS_CE_2_Left_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_2_Left_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_2_Left_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID(buf, 0)

/**
 * Signal USS_CE_2_Left_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Left_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID      0

/**
 * Signal USS_CE_2_Left_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID        0

/**
 * Signal USS_CE_2_Left_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID        32767

/**
 * Signal USS_CE_2_Left_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID Signal USS_CE_2_Right_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_2_Right_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID        1, 0, 55, 16

/**
 * Signal USS_CE_2_Right_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID      1, 0, 55, 16, 0

/**
 * Get signal USS_CE_2_Right_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_2_Right_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_2_Right_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID(buf, 0)

/**
 * Signal USS_CE_2_Right_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Right_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID      0

/**
 * Signal USS_CE_2_Right_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID        0

/**
 * Signal USS_CE_2_Right_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID        32767

/**
 * Signal USS_CE_2_Right_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID Signal USS_CE_3_Left_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_3_Left_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID        1, 0, 71, 16

/**
 * Signal USS_CE_3_Left_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID      1, 0, 71, 16, 0

/**
 * Get signal USS_CE_3_Left_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_3_Left_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID(buf, val) { \
	buf[8] &= ~(0xff << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[9] &= ~(0xff << 0); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_3_Left_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID(buf, 0)

/**
 * Signal USS_CE_3_Left_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Left_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID      0

/**
 * Signal USS_CE_3_Left_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID        0

/**
 * Signal USS_CE_3_Left_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID        32767

/**
 * Signal USS_CE_3_Left_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID Signal USS_CE_3_Right_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_3_Right_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID        1, 0, 87, 16

/**
 * Signal USS_CE_3_Right_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID      1, 0, 87, 16, 0

/**
 * Get signal USS_CE_3_Right_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_3_Right_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID(buf, val) { \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[11] &= ~(0xff << 0); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_3_Right_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID(buf, 0)

/**
 * Signal USS_CE_3_Right_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Right_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID      0

/**
 * Signal USS_CE_3_Right_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID        0

/**
 * Signal USS_CE_3_Right_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID        32767

/**
 * Signal USS_CE_3_Right_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID Signal USS_CE_4_Left_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_4_Left_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID        1, 0, 103, 16

/**
 * Signal USS_CE_4_Left_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID      1, 0, 103, 16, 0

/**
 * Get signal USS_CE_4_Left_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_4_Left_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID(buf, val) { \
	buf[12] &= ~(0xff << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[13] &= ~(0xff << 0); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_4_Left_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID(buf, 0)

/**
 * Signal USS_CE_4_Left_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Left_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID      0

/**
 * Signal USS_CE_4_Left_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID        0

/**
 * Signal USS_CE_4_Left_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID        32767

/**
 * Signal USS_CE_4_Left_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID Signal USS_CE_4_Right_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_4_Right_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID        1, 0, 119, 16

/**
 * Signal USS_CE_4_Right_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID      1, 0, 119, 16, 0

/**
 * Get signal USS_CE_4_Right_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[14] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_4_Right_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID(buf, val) { \
	buf[14] &= ~(0xff << 0); \
	buf[14] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[15] &= ~(0xff << 0); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_4_Right_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID(buf, 0)

/**
 * Signal USS_CE_4_Right_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Right_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID      0

/**
 * Signal USS_CE_4_Right_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID        0

/**
 * Signal USS_CE_4_Right_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID        32767

/**
 * Signal USS_CE_4_Right_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID Signal USS_CE_5_Left_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_5_Left_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID        1, 0, 135, 16

/**
 * Signal USS_CE_5_Left_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID      1, 0, 135, 16, 0

/**
 * Get signal USS_CE_5_Left_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[16] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[17] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_5_Left_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID(buf, val) { \
	buf[16] &= ~(0xff << 0); \
	buf[16] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[17] &= ~(0xff << 0); \
	buf[17] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_5_Left_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID(buf, 0)

/**
 * Signal USS_CE_5_Left_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Left_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID      0

/**
 * Signal USS_CE_5_Left_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID        0

/**
 * Signal USS_CE_5_Left_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID        32767

/**
 * Signal USS_CE_5_Left_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID Signal USS_CE_5_Right_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_5_Right_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID        1, 0, 151, 16

/**
 * Signal USS_CE_5_Right_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID      1, 0, 151, 16, 0

/**
 * Get signal USS_CE_5_Right_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[18] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[19] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_5_Right_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID(buf, val) { \
	buf[18] &= ~(0xff << 0); \
	buf[18] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[19] &= ~(0xff << 0); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_5_Right_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID(buf, 0)

/**
 * Signal USS_CE_5_Right_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Right_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID      0

/**
 * Signal USS_CE_5_Right_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID        0

/**
 * Signal USS_CE_5_Right_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID        32767

/**
 * Signal USS_CE_5_Right_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID Signal USS_CE_6_Left_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_6_Left_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID        1, 0, 167, 16

/**
 * Signal USS_CE_6_Left_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID      1, 0, 167, 16, 0

/**
 * Get signal USS_CE_6_Left_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[20] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[21] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_6_Left_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID(buf, val) { \
	buf[20] &= ~(0xff << 0); \
	buf[20] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[21] &= ~(0xff << 0); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_6_Left_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID(buf, 0)

/**
 * Signal USS_CE_6_Left_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_6_Left_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID      0

/**
 * Signal USS_CE_6_Left_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID        0

/**
 * Signal USS_CE_6_Left_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID        32767

/**
 * Signal USS_CE_6_Left_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID Signal USS_CE_7_Right_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_7_Right_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID        1, 0, 183, 16

/**
 * Signal USS_CE_7_Right_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID      1, 0, 183, 16, 0

/**
 * Get signal USS_CE_7_Right_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_7_Right_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID(buf, val) { \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[23] &= ~(0xff << 0); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_7_Right_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID(buf, 0)

/**
 * Signal USS_CE_7_Right_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_7_Right_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID      0

/**
 * Signal USS_CE_7_Right_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID        0

/**
 * Signal USS_CE_7_Right_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID        32767

/**
 * Signal USS_CE_7_Right_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID Signal USS_CE_8_Left_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_8_Left_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID        1, 0, 199, 16

/**
 * Signal USS_CE_8_Left_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID      1, 0, 199, 16, 0

/**
 * Get signal USS_CE_8_Left_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[24] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[25] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_8_Left_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID(buf, val) { \
	buf[24] &= ~(0xff << 0); \
	buf[24] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[25] &= ~(0xff << 0); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_8_Left_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID(buf, 0)

/**
 * Signal USS_CE_8_Left_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Left_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID      0

/**
 * Signal USS_CE_8_Left_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID        0

/**
 * Signal USS_CE_8_Left_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID        32767

/**
 * Signal USS_CE_8_Left_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_8_Left_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID Signal USS_CE_8_Right_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_8_Right_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID        1, 0, 215, 16

/**
 * Signal USS_CE_8_Right_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID      1, 0, 215, 16, 0

/**
 * Get signal USS_CE_8_Right_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[26] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[27] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_8_Right_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID(buf, val) { \
	buf[26] &= ~(0xff << 0); \
	buf[26] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[27] &= ~(0xff << 0); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_8_Right_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID(buf, 0)

/**
 * Signal USS_CE_8_Right_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Right_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID      0

/**
 * Signal USS_CE_8_Right_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID        0

/**
 * Signal USS_CE_8_Right_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID        32767

/**
 * Signal USS_CE_8_Right_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_8_Right_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID Signal USS_CE_9_Left_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_9_Left_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID        1, 0, 231, 16

/**
 * Signal USS_CE_9_Left_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID      1, 0, 231, 16, 0

/**
 * Get signal USS_CE_9_Left_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[28] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_9_Left_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID(buf, val) { \
	buf[28] &= ~(0xff << 0); \
	buf[28] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[29] &= ~(0xff << 0); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_9_Left_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID(buf, 0)

/**
 * Signal USS_CE_9_Left_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Left_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID      0

/**
 * Signal USS_CE_9_Left_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID        0

/**
 * Signal USS_CE_9_Left_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID        32767

/**
 * Signal USS_CE_9_Left_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_9_Left_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID Signal USS_CE_9_Right_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_9_Right_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID        1, 0, 247, 16

/**
 * Signal USS_CE_9_Right_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID      1, 0, 247, 16, 0

/**
 * Get signal USS_CE_9_Right_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_9_Right_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID(buf, val) { \
	buf[30] &= ~(0xff << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[31] &= ~(0xff << 0); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_9_Right_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID(buf, 0)

/**
 * Signal USS_CE_9_Right_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Right_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID      0

/**
 * Signal USS_CE_9_Right_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID        0

/**
 * Signal USS_CE_9_Right_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID        32767

/**
 * Signal USS_CE_9_Right_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_9_Right_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID Signal USS_CE_10_Left_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_10_Left_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID        1, 0, 263, 16

/**
 * Signal USS_CE_10_Left_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID      1, 0, 263, 16, 0

/**
 * Get signal USS_CE_10_Left_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[32] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[33] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_10_Left_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID(buf, val) { \
	buf[32] &= ~(0xff << 0); \
	buf[32] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[33] &= ~(0xff << 0); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_10_Left_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID(buf, 0)

/**
 * Signal USS_CE_10_Left_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Left_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID      0

/**
 * Signal USS_CE_10_Left_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID        0

/**
 * Signal USS_CE_10_Left_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID        32767

/**
 * Signal USS_CE_10_Left_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_10_Left_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID Signal USS_CE_10_Right_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_10_Right_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID        1, 0, 279, 16

/**
 * Signal USS_CE_10_Right_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID      1, 0, 279, 16, 0

/**
 * Get signal USS_CE_10_Right_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[34] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[35] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_10_Right_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID(buf, val) { \
	buf[34] &= ~(0xff << 0); \
	buf[34] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[35] &= ~(0xff << 0); \
	buf[35] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_10_Right_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID(buf, 0)

/**
 * Signal USS_CE_10_Right_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Right_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID      0

/**
 * Signal USS_CE_10_Right_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID        0

/**
 * Signal USS_CE_10_Right_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID        32767

/**
 * Signal USS_CE_10_Right_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_10_Right_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID Signal USS_CE_11_Left_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_11_Left_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID        1, 0, 295, 16

/**
 * Signal USS_CE_11_Left_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID      1, 0, 295, 16, 0

/**
 * Get signal USS_CE_11_Left_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[36] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[37] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_11_Left_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID(buf, val) { \
	buf[36] &= ~(0xff << 0); \
	buf[36] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[37] &= ~(0xff << 0); \
	buf[37] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_11_Left_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID(buf, 0)

/**
 * Signal USS_CE_11_Left_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Left_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID      0

/**
 * Signal USS_CE_11_Left_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID        0

/**
 * Signal USS_CE_11_Left_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID        32767

/**
 * Signal USS_CE_11_Left_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_11_Left_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID Signal USS_CE_11_Right_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_11_Right_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID        1, 0, 311, 16

/**
 * Signal USS_CE_11_Right_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID      1, 0, 311, 16, 0

/**
 * Get signal USS_CE_11_Right_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[38] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[39] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_11_Right_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID(buf, val) { \
	buf[38] &= ~(0xff << 0); \
	buf[38] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[39] &= ~(0xff << 0); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_11_Right_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID(buf, 0)

/**
 * Signal USS_CE_11_Right_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Right_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID      0

/**
 * Signal USS_CE_11_Right_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID        0

/**
 * Signal USS_CE_11_Right_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID        32767

/**
 * Signal USS_CE_11_Right_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_11_Right_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID Signal USS_CE_12_Left_1_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_12_Left_1_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID        1, 0, 327, 16

/**
 * Signal USS_CE_12_Left_1_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID      1, 0, 327, 16, 0

/**
 * Get signal USS_CE_12_Left_1_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[40] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[41] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_12_Left_1_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID(buf, val) { \
	buf[40] &= ~(0xff << 0); \
	buf[40] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[41] &= ~(0xff << 0); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_12_Left_1_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID(buf, 0)

/**
 * Signal USS_CE_12_Left_1_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_12_Left_1_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID      0

/**
 * Signal USS_CE_12_Left_1_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID        0

/**
 * Signal USS_CE_12_Left_1_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID        32767

/**
 * Signal USS_CE_12_Left_1_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_12_Left_1_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID Signal USS_CE_1_Right_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_1_Right_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID        1, 0, 343, 16

/**
 * Signal USS_CE_1_Right_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID      1, 0, 343, 16, 0

/**
 * Get signal USS_CE_1_Right_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[42] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[43] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_1_Right_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID(buf, val) { \
	buf[42] &= ~(0xff << 0); \
	buf[42] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[43] &= ~(0xff << 0); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_1_Right_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID(buf, 0)

/**
 * Signal USS_CE_1_Right_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_1_Right_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID      0

/**
 * Signal USS_CE_1_Right_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID        0

/**
 * Signal USS_CE_1_Right_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID        32767

/**
 * Signal USS_CE_1_Right_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_1_Right_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID Signal USS_CE_2_Left_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_2_Left_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID        1, 0, 359, 16

/**
 * Signal USS_CE_2_Left_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID      1, 0, 359, 16, 0

/**
 * Get signal USS_CE_2_Left_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[44] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[45] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_2_Left_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID(buf, val) { \
	buf[44] &= ~(0xff << 0); \
	buf[44] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[45] &= ~(0xff << 0); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_2_Left_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID(buf, 0)

/**
 * Signal USS_CE_2_Left_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Left_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID      0

/**
 * Signal USS_CE_2_Left_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID        0

/**
 * Signal USS_CE_2_Left_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID        32767

/**
 * Signal USS_CE_2_Left_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_2_Left_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID Signal USS_CE_2_Right_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_2_Right_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID        1, 0, 375, 16

/**
 * Signal USS_CE_2_Right_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID      1, 0, 375, 16, 0

/**
 * Get signal USS_CE_2_Right_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[46] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[47] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_2_Right_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID(buf, val) { \
	buf[46] &= ~(0xff << 0); \
	buf[46] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[47] &= ~(0xff << 0); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_2_Right_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID(buf, 0)

/**
 * Signal USS_CE_2_Right_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Right_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID      0

/**
 * Signal USS_CE_2_Right_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID        0

/**
 * Signal USS_CE_2_Right_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID        32767

/**
 * Signal USS_CE_2_Right_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_2_Right_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID Signal USS_CE_3_Left_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_3_Left_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID        1, 0, 391, 16

/**
 * Signal USS_CE_3_Left_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID      1, 0, 391, 16, 0

/**
 * Get signal USS_CE_3_Left_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[48] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[49] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_3_Left_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID(buf, val) { \
	buf[48] &= ~(0xff << 0); \
	buf[48] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[49] &= ~(0xff << 0); \
	buf[49] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_3_Left_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID(buf, 0)

/**
 * Signal USS_CE_3_Left_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Left_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID      0

/**
 * Signal USS_CE_3_Left_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID        0

/**
 * Signal USS_CE_3_Left_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID        32767

/**
 * Signal USS_CE_3_Left_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_3_Left_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID Signal USS_CE_3_Right_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_3_Right_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID        1, 0, 407, 16

/**
 * Signal USS_CE_3_Right_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID      1, 0, 407, 16, 0

/**
 * Get signal USS_CE_3_Right_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[50] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[51] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_3_Right_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID(buf, val) { \
	buf[50] &= ~(0xff << 0); \
	buf[50] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[51] &= ~(0xff << 0); \
	buf[51] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_3_Right_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID(buf, 0)

/**
 * Signal USS_CE_3_Right_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Right_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID      0

/**
 * Signal USS_CE_3_Right_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID        0

/**
 * Signal USS_CE_3_Right_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID        32767

/**
 * Signal USS_CE_3_Right_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_3_Right_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID Signal USS_CE_4_Left_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_4_Left_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID        1, 0, 423, 16

/**
 * Signal USS_CE_4_Left_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID      1, 0, 423, 16, 0

/**
 * Get signal USS_CE_4_Left_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[52] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[53] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_4_Left_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID(buf, val) { \
	buf[52] &= ~(0xff << 0); \
	buf[52] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[53] &= ~(0xff << 0); \
	buf[53] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_4_Left_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID(buf, 0)

/**
 * Signal USS_CE_4_Left_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Left_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID      0

/**
 * Signal USS_CE_4_Left_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID        0

/**
 * Signal USS_CE_4_Left_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID        32767

/**
 * Signal USS_CE_4_Left_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_4_Left_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID Signal USS_CE_4_Right_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_4_Right_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID        1, 0, 439, 16

/**
 * Signal USS_CE_4_Right_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID      1, 0, 439, 16, 0

/**
 * Get signal USS_CE_4_Right_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[54] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[55] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_4_Right_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID(buf, val) { \
	buf[54] &= ~(0xff << 0); \
	buf[54] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[55] &= ~(0xff << 0); \
	buf[55] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_4_Right_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID(buf, 0)

/**
 * Signal USS_CE_4_Right_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Right_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID      0

/**
 * Signal USS_CE_4_Right_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID        0

/**
 * Signal USS_CE_4_Right_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID        32767

/**
 * Signal USS_CE_4_Right_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_4_Right_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID Signal USS_CE_5_Left_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_5_Left_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID        1, 0, 455, 16

/**
 * Signal USS_CE_5_Left_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID      1, 0, 455, 16, 0

/**
 * Get signal USS_CE_5_Left_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[56] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[57] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_5_Left_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID(buf, val) { \
	buf[56] &= ~(0xff << 0); \
	buf[56] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[57] &= ~(0xff << 0); \
	buf[57] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_5_Left_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID(buf, 0)

/**
 * Signal USS_CE_5_Left_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Left_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID      0

/**
 * Signal USS_CE_5_Left_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID        0

/**
 * Signal USS_CE_5_Left_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID        32767

/**
 * Signal USS_CE_5_Left_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_5_Left_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID Signal USS_CE_5_Right_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_5_Right_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID        1, 0, 471, 16

/**
 * Signal USS_CE_5_Right_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID      1, 0, 471, 16, 0

/**
 * Get signal USS_CE_5_Right_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[58] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[59] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_5_Right_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID(buf, val) { \
	buf[58] &= ~(0xff << 0); \
	buf[58] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[59] &= ~(0xff << 0); \
	buf[59] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_5_Right_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID(buf, 0)

/**
 * Signal USS_CE_5_Right_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Right_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID      0

/**
 * Signal USS_CE_5_Right_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID        0

/**
 * Signal USS_CE_5_Right_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID        32767

/**
 * Signal USS_CE_5_Right_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_5_Right_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID Signal USS_CE_6_Left_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_6_Left_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID        1, 0, 487, 16

/**
 * Signal USS_CE_6_Left_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID      1, 0, 487, 16, 0

/**
 * Get signal USS_CE_6_Left_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[60] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[61] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_6_Left_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID(buf, val) { \
	buf[60] &= ~(0xff << 0); \
	buf[60] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[61] &= ~(0xff << 0); \
	buf[61] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_6_Left_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID(buf, 0)

/**
 * Signal USS_CE_6_Left_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_6_Left_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID      0

/**
 * Signal USS_CE_6_Left_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID        0

/**
 * Signal USS_CE_6_Left_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID        32767

/**
 * Signal USS_CE_6_Left_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_6_Left_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID Signal USS_CE_7_Right_2_TraceID of Message PAS_USSTraceIDInfo2_1 (0x1a3)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_1
 * @{
 */

/**
 * Signal USS_CE_7_Right_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID        1, 0, 503, 16

/**
 * Signal USS_CE_7_Right_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_1 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID      1, 0, 503, 16, 0

/**
 * Get signal USS_CE_7_Right_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[62] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[63] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_7_Right_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID(buf, val) { \
	buf[62] &= ~(0xff << 0); \
	buf[62] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[63] &= ~(0xff << 0); \
	buf[63] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_7_Right_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID(buf, 0)

/**
 * Signal USS_CE_7_Right_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_7_Right_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID      0

/**
 * Signal USS_CE_7_Right_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID        0

/**
 * Signal USS_CE_7_Right_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID        32767

/**
 * Signal USS_CE_7_Right_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_1_USS_CE_7_Right_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum Signal PAS_USSTraceIDInfo2_2_Checksum of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal PAS_USSTraceIDInfo2_2_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum and \ref GET_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum        1, 0, 7, 8

/**
 * Signal PAS_USSTraceIDInfo2_2_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_USSTraceIDInfo2_2_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_USSTraceIDInfo2_2_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_USSTraceIDInfo2_2_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum(buf) \
	SET_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum(buf, 0)

/**
 * Signal PAS_USSTraceIDInfo2_2_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSTraceIDInfo2_2_Checksum raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum      0

/**
 * Signal PAS_USSTraceIDInfo2_2_Checksum raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum        0

/**
 * Signal PAS_USSTraceIDInfo2_2_Checksum raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum        255

/**
 * Signal PAS_USSTraceIDInfo2_2_Checksum raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter Signal PAS_USSTraceIDInfo2_2_MsgCounter of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal PAS_USSTraceIDInfo2_2_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter and \ref GET_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_USSTraceIDInfo2_2_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_USSTraceIDInfo2_2_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_USSTraceIDInfo2_2_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_USSTraceIDInfo2_2_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter(buf) \
	SET_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter(buf, 0)

/**
 * Signal PAS_USSTraceIDInfo2_2_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_USSTraceIDInfo2_2_MsgCounter raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter      0

/**
 * Signal PAS_USSTraceIDInfo2_2_MsgCounter raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter        0

/**
 * Signal PAS_USSTraceIDInfo2_2_MsgCounter raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter        15

/**
 * Signal PAS_USSTraceIDInfo2_2_MsgCounter raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_PAS_USSTraceIDInfo2_2_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID Signal USS_CE_8_Right_2_TraceID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_8_Right_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID        1, 0, 23, 16

/**
 * Signal USS_CE_8_Right_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID      1, 0, 23, 16, 0

/**
 * Get signal USS_CE_8_Right_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_8_Right_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_8_Right_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID(buf, 0)

/**
 * Signal USS_CE_8_Right_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Right_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID      0

/**
 * Signal USS_CE_8_Right_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID        0

/**
 * Signal USS_CE_8_Right_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID        32767

/**
 * Signal USS_CE_8_Right_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID Signal USS_CE_9_Left_2_TraceID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_9_Left_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID        1, 0, 39, 16

/**
 * Signal USS_CE_9_Left_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID      1, 0, 39, 16, 0

/**
 * Get signal USS_CE_9_Left_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_9_Left_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_9_Left_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID(buf, 0)

/**
 * Signal USS_CE_9_Left_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Left_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID      0

/**
 * Signal USS_CE_9_Left_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID        0

/**
 * Signal USS_CE_9_Left_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID        32767

/**
 * Signal USS_CE_9_Left_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID Signal USS_CE_9_Right_2_TraceID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_9_Right_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID        1, 0, 55, 16

/**
 * Signal USS_CE_9_Right_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID      1, 0, 55, 16, 0

/**
 * Get signal USS_CE_9_Right_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_9_Right_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_9_Right_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID(buf, 0)

/**
 * Signal USS_CE_9_Right_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Right_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID      0

/**
 * Signal USS_CE_9_Right_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID        0

/**
 * Signal USS_CE_9_Right_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID        32767

/**
 * Signal USS_CE_9_Right_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID Signal USS_CE_10_Left_2_TraceID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_10_Left_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID        1, 0, 71, 16

/**
 * Signal USS_CE_10_Left_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID      1, 0, 71, 16, 0

/**
 * Get signal USS_CE_10_Left_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_10_Left_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID(buf, val) { \
	buf[8] &= ~(0xff << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[9] &= ~(0xff << 0); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_10_Left_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID(buf, 0)

/**
 * Signal USS_CE_10_Left_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Left_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID      0

/**
 * Signal USS_CE_10_Left_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID        0

/**
 * Signal USS_CE_10_Left_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID        32767

/**
 * Signal USS_CE_10_Left_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID Signal USS_CE_10_Right_2_TraceID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_10_Right_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID        1, 0, 87, 16

/**
 * Signal USS_CE_10_Right_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID      1, 0, 87, 16, 0

/**
 * Get signal USS_CE_10_Right_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_10_Right_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID(buf, val) { \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[11] &= ~(0xff << 0); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_10_Right_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID(buf, 0)

/**
 * Signal USS_CE_10_Right_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Right_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID      0

/**
 * Signal USS_CE_10_Right_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID        0

/**
 * Signal USS_CE_10_Right_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID        32767

/**
 * Signal USS_CE_10_Right_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID Signal USS_CE_11_Left_2_TraceID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_11_Left_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID        1, 0, 103, 16

/**
 * Signal USS_CE_11_Left_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID      1, 0, 103, 16, 0

/**
 * Get signal USS_CE_11_Left_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_11_Left_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID(buf, val) { \
	buf[12] &= ~(0xff << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[13] &= ~(0xff << 0); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_11_Left_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID(buf, 0)

/**
 * Signal USS_CE_11_Left_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Left_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID      0

/**
 * Signal USS_CE_11_Left_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID        0

/**
 * Signal USS_CE_11_Left_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID        32767

/**
 * Signal USS_CE_11_Left_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID Signal USS_CE_11_Right_2_TraceID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_11_Right_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID        1, 0, 119, 16

/**
 * Signal USS_CE_11_Right_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID      1, 0, 119, 16, 0

/**
 * Get signal USS_CE_11_Right_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[14] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_11_Right_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID(buf, val) { \
	buf[14] &= ~(0xff << 0); \
	buf[14] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[15] &= ~(0xff << 0); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_11_Right_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID(buf, 0)

/**
 * Signal USS_CE_11_Right_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Right_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID      0

/**
 * Signal USS_CE_11_Right_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID        0

/**
 * Signal USS_CE_11_Right_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID        32767

/**
 * Signal USS_CE_11_Right_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID Signal USS_CE_12_Left_2_TraceID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_12_Left_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID        1, 0, 135, 16

/**
 * Signal USS_CE_12_Left_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID      1, 0, 135, 16, 0

/**
 * Get signal USS_CE_12_Left_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[16] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[17] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_12_Left_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID(buf, val) { \
	buf[16] &= ~(0xff << 0); \
	buf[16] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[17] &= ~(0xff << 0); \
	buf[17] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_12_Left_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID(buf, 0)

/**
 * Signal USS_CE_12_Left_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_12_Left_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID      0

/**
 * Signal USS_CE_12_Left_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID        0

/**
 * Signal USS_CE_12_Left_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID        32767

/**
 * Signal USS_CE_12_Left_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID Signal USS_CE_1_Right_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_1_Right_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID        1, 0, 151, 3

/**
 * Signal USS_CE_1_Right_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID      1, 0, 151, 3, 0

/**
 * Get signal USS_CE_1_Right_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[18] >> 5) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_1_Right_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID(buf, val) { \
	buf[18] &= ~(0x07 << 5); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal USS_CE_1_Right_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID(buf, 0)

/**
 * Signal USS_CE_1_Right_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_1_Right_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID      0

/**
 * Signal USS_CE_1_Right_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID        0

/**
 * Signal USS_CE_1_Right_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID        4

/**
 * Signal USS_CE_1_Right_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID Signal USS_CE_2_Left_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_2_Left_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID        1, 0, 148, 3

/**
 * Signal USS_CE_2_Left_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID      1, 0, 148, 3, 0

/**
 * Get signal USS_CE_2_Left_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[18] >> 2) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_2_Left_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID(buf, val) { \
	buf[18] &= ~(0x07 << 2); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal USS_CE_2_Left_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID(buf, 0)

/**
 * Signal USS_CE_2_Left_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Left_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID      0

/**
 * Signal USS_CE_2_Left_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID        0

/**
 * Signal USS_CE_2_Left_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID        4

/**
 * Signal USS_CE_2_Left_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID Signal USS_CE_2_Right_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_2_Right_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID        1, 0, 145, 3

/**
 * Signal USS_CE_2_Right_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID      1, 0, 145, 3, 0

/**
 * Get signal USS_CE_2_Right_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[18] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[19] >> 7) & 0x01) << 0) \
)

/**
 * Set signal USS_CE_2_Right_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID(buf, val) { \
	buf[18] &= ~(0x03 << 0); \
	buf[18] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[19] &= ~(0x01 << 7); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal USS_CE_2_Right_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID(buf, 0)

/**
 * Signal USS_CE_2_Right_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Right_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID      0

/**
 * Signal USS_CE_2_Right_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID        0

/**
 * Signal USS_CE_2_Right_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID        4

/**
 * Signal USS_CE_2_Right_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID Signal USS_CE_3_Left_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_3_Left_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID        1, 0, 158, 3

/**
 * Signal USS_CE_3_Left_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID      1, 0, 158, 3, 0

/**
 * Get signal USS_CE_3_Left_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[19] >> 4) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_3_Left_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID(buf, val) { \
	buf[19] &= ~(0x07 << 4); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal USS_CE_3_Left_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID(buf, 0)

/**
 * Signal USS_CE_3_Left_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Left_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID      0

/**
 * Signal USS_CE_3_Left_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID        0

/**
 * Signal USS_CE_3_Left_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID        4

/**
 * Signal USS_CE_3_Left_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID Signal USS_CE_3_Right_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_3_Right_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID        1, 0, 155, 3

/**
 * Signal USS_CE_3_Right_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID      1, 0, 155, 3, 0

/**
 * Get signal USS_CE_3_Right_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[19] >> 1) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_3_Right_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID(buf, val) { \
	buf[19] &= ~(0x07 << 1); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal USS_CE_3_Right_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID(buf, 0)

/**
 * Signal USS_CE_3_Right_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Right_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID      0

/**
 * Signal USS_CE_3_Right_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID        0

/**
 * Signal USS_CE_3_Right_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID        4

/**
 * Signal USS_CE_3_Right_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID Signal USS_CE_4_Left_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_4_Left_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID        1, 0, 152, 3

/**
 * Signal USS_CE_4_Left_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID      1, 0, 152, 3, 0

/**
 * Get signal USS_CE_4_Left_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[19] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_4_Left_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID(buf, val) { \
	buf[19] &= ~(0x01 << 0); \
	buf[19] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[20] &= ~(0x03 << 6); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_4_Left_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID(buf, 0)

/**
 * Signal USS_CE_4_Left_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Left_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID      0

/**
 * Signal USS_CE_4_Left_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID        0

/**
 * Signal USS_CE_4_Left_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID        4

/**
 * Signal USS_CE_4_Left_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID Signal USS_CE_4_Right_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_4_Right_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID        1, 0, 165, 3

/**
 * Signal USS_CE_4_Right_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID      1, 0, 165, 3, 0

/**
 * Get signal USS_CE_4_Right_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[20] >> 3) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_4_Right_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID(buf, val) { \
	buf[20] &= ~(0x07 << 3); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal USS_CE_4_Right_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID(buf, 0)

/**
 * Signal USS_CE_4_Right_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Right_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID      0

/**
 * Signal USS_CE_4_Right_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID        0

/**
 * Signal USS_CE_4_Right_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID        4

/**
 * Signal USS_CE_4_Right_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID Signal USS_CE_5_Left_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_5_Left_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID        1, 0, 162, 3

/**
 * Signal USS_CE_5_Left_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID      1, 0, 162, 3, 0

/**
 * Get signal USS_CE_5_Left_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[20] >> 0) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_5_Left_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID(buf, val) { \
	buf[20] &= ~(0x07 << 0); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal USS_CE_5_Left_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID(buf, 0)

/**
 * Signal USS_CE_5_Left_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Left_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID      0

/**
 * Signal USS_CE_5_Left_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID        0

/**
 * Signal USS_CE_5_Left_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID        4

/**
 * Signal USS_CE_5_Left_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID Signal USS_CE_5_Right_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_5_Right_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID        1, 0, 175, 3

/**
 * Signal USS_CE_5_Right_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID      1, 0, 175, 3, 0

/**
 * Get signal USS_CE_5_Right_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 5) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_5_Right_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID(buf, val) { \
	buf[21] &= ~(0x07 << 5); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal USS_CE_5_Right_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID(buf, 0)

/**
 * Signal USS_CE_5_Right_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Right_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID      0

/**
 * Signal USS_CE_5_Right_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID        0

/**
 * Signal USS_CE_5_Right_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID        4

/**
 * Signal USS_CE_5_Right_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID Signal USS_CE_6_Left_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_6_Left_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID        1, 0, 172, 3

/**
 * Signal USS_CE_6_Left_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID      1, 0, 172, 3, 0

/**
 * Get signal USS_CE_6_Left_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 2) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_6_Left_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID(buf, val) { \
	buf[21] &= ~(0x07 << 2); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal USS_CE_6_Left_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID(buf, 0)

/**
 * Signal USS_CE_6_Left_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_6_Left_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID      0

/**
 * Signal USS_CE_6_Left_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID        0

/**
 * Signal USS_CE_6_Left_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID        4

/**
 * Signal USS_CE_6_Left_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID Signal USS_CE_7_Right_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_7_Right_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID        1, 0, 169, 3

/**
 * Signal USS_CE_7_Right_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID      1, 0, 169, 3, 0

/**
 * Get signal USS_CE_7_Right_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[22] >> 7) & 0x01) << 0) \
)

/**
 * Set signal USS_CE_7_Right_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID(buf, val) { \
	buf[21] &= ~(0x03 << 0); \
	buf[21] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[22] &= ~(0x01 << 7); \
	buf[22] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal USS_CE_7_Right_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID(buf, 0)

/**
 * Signal USS_CE_7_Right_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_7_Right_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID      0

/**
 * Signal USS_CE_7_Right_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID        0

/**
 * Signal USS_CE_7_Right_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID        4

/**
 * Signal USS_CE_7_Right_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID Signal USS_CE_8_Left_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_8_Left_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID        1, 0, 182, 3

/**
 * Signal USS_CE_8_Left_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID      1, 0, 182, 3, 0

/**
 * Get signal USS_CE_8_Left_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[22] >> 4) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_8_Left_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID(buf, val) { \
	buf[22] &= ~(0x07 << 4); \
	buf[22] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal USS_CE_8_Left_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID(buf, 0)

/**
 * Signal USS_CE_8_Left_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Left_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID      0

/**
 * Signal USS_CE_8_Left_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID        0

/**
 * Signal USS_CE_8_Left_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID        4

/**
 * Signal USS_CE_8_Left_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID Signal USS_CE_8_Right_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_8_Right_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID        1, 0, 179, 3

/**
 * Signal USS_CE_8_Right_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID      1, 0, 179, 3, 0

/**
 * Get signal USS_CE_8_Right_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[22] >> 1) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_8_Right_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID(buf, val) { \
	buf[22] &= ~(0x07 << 1); \
	buf[22] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal USS_CE_8_Right_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID(buf, 0)

/**
 * Signal USS_CE_8_Right_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Right_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID      0

/**
 * Signal USS_CE_8_Right_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID        0

/**
 * Signal USS_CE_8_Right_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID        4

/**
 * Signal USS_CE_8_Right_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID Signal USS_CE_9_Left_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_9_Left_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID        1, 0, 176, 3

/**
 * Signal USS_CE_9_Left_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID      1, 0, 176, 3, 0

/**
 * Get signal USS_CE_9_Left_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[22] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_9_Left_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID(buf, val) { \
	buf[22] &= ~(0x01 << 0); \
	buf[22] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[23] &= ~(0x03 << 6); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_9_Left_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID(buf, 0)

/**
 * Signal USS_CE_9_Left_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Left_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID      0

/**
 * Signal USS_CE_9_Left_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID        0

/**
 * Signal USS_CE_9_Left_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID        4

/**
 * Signal USS_CE_9_Left_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID Signal USS_CE_9_Right_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_9_Right_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID        1, 0, 189, 3

/**
 * Signal USS_CE_9_Right_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID      1, 0, 189, 3, 0

/**
 * Get signal USS_CE_9_Right_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[23] >> 3) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_9_Right_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID(buf, val) { \
	buf[23] &= ~(0x07 << 3); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal USS_CE_9_Right_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID(buf, 0)

/**
 * Signal USS_CE_9_Right_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Right_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID      0

/**
 * Signal USS_CE_9_Right_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID        0

/**
 * Signal USS_CE_9_Right_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID        4

/**
 * Signal USS_CE_9_Right_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID Signal USS_CE_10_Left_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_10_Left_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID        1, 0, 186, 3

/**
 * Signal USS_CE_10_Left_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID      1, 0, 186, 3, 0

/**
 * Get signal USS_CE_10_Left_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[23] >> 0) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_10_Left_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID(buf, val) { \
	buf[23] &= ~(0x07 << 0); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal USS_CE_10_Left_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID(buf, 0)

/**
 * Signal USS_CE_10_Left_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Left_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID      0

/**
 * Signal USS_CE_10_Left_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID        0

/**
 * Signal USS_CE_10_Left_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID        4

/**
 * Signal USS_CE_10_Left_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID Signal USS_CE_10_Right_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_10_Right_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID        1, 0, 199, 3

/**
 * Signal USS_CE_10_Right_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID      1, 0, 199, 3, 0

/**
 * Get signal USS_CE_10_Right_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[24] >> 5) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_10_Right_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID(buf, val) { \
	buf[24] &= ~(0x07 << 5); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal USS_CE_10_Right_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID(buf, 0)

/**
 * Signal USS_CE_10_Right_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Right_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID      0

/**
 * Signal USS_CE_10_Right_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID        0

/**
 * Signal USS_CE_10_Right_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID        4

/**
 * Signal USS_CE_10_Right_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID Signal USS_CE_11_Left_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_11_Left_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID        1, 0, 196, 3

/**
 * Signal USS_CE_11_Left_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID      1, 0, 196, 3, 0

/**
 * Get signal USS_CE_11_Left_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[24] >> 2) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_11_Left_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID(buf, val) { \
	buf[24] &= ~(0x07 << 2); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal USS_CE_11_Left_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID(buf, 0)

/**
 * Signal USS_CE_11_Left_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Left_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID      0

/**
 * Signal USS_CE_11_Left_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID        0

/**
 * Signal USS_CE_11_Left_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID        4

/**
 * Signal USS_CE_11_Left_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID Signal USS_CE_11_Right_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_11_Right_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID        1, 0, 193, 3

/**
 * Signal USS_CE_11_Right_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID      1, 0, 193, 3, 0

/**
 * Get signal USS_CE_11_Right_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[24] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[25] >> 7) & 0x01) << 0) \
)

/**
 * Set signal USS_CE_11_Right_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID(buf, val) { \
	buf[24] &= ~(0x03 << 0); \
	buf[24] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[25] &= ~(0x01 << 7); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal USS_CE_11_Right_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID(buf, 0)

/**
 * Signal USS_CE_11_Right_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Right_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID      0

/**
 * Signal USS_CE_11_Right_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID        0

/**
 * Signal USS_CE_11_Right_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID        4

/**
 * Signal USS_CE_11_Right_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID Signal USS_CE_12_Left_1_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_12_Left_1_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID        1, 0, 206, 3

/**
 * Signal USS_CE_12_Left_1_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID      1, 0, 206, 3, 0

/**
 * Get signal USS_CE_12_Left_1_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[25] >> 4) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_12_Left_1_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID(buf, val) { \
	buf[25] &= ~(0x07 << 4); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal USS_CE_12_Left_1_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID(buf, 0)

/**
 * Signal USS_CE_12_Left_1_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_12_Left_1_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID      0

/**
 * Signal USS_CE_12_Left_1_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID        0

/**
 * Signal USS_CE_12_Left_1_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID        4

/**
 * Signal USS_CE_12_Left_1_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_1_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID Signal USS_CE_1_Right_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_1_Right_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID        1, 0, 203, 3

/**
 * Signal USS_CE_1_Right_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID      1, 0, 203, 3, 0

/**
 * Get signal USS_CE_1_Right_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[25] >> 1) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_1_Right_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID(buf, val) { \
	buf[25] &= ~(0x07 << 1); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal USS_CE_1_Right_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID(buf, 0)

/**
 * Signal USS_CE_1_Right_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_1_Right_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID      0

/**
 * Signal USS_CE_1_Right_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID        0

/**
 * Signal USS_CE_1_Right_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID        4

/**
 * Signal USS_CE_1_Right_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_1_Right_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID Signal USS_CE_2_Left_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_2_Left_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID        1, 0, 200, 3

/**
 * Signal USS_CE_2_Left_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID      1, 0, 200, 3, 0

/**
 * Get signal USS_CE_2_Left_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[25] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[26] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_2_Left_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID(buf, val) { \
	buf[25] &= ~(0x01 << 0); \
	buf[25] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[26] &= ~(0x03 << 6); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_2_Left_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID(buf, 0)

/**
 * Signal USS_CE_2_Left_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Left_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID      0

/**
 * Signal USS_CE_2_Left_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID        0

/**
 * Signal USS_CE_2_Left_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID        4

/**
 * Signal USS_CE_2_Left_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_2_Left_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID Signal USS_CE_2_Right_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_2_Right_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID        1, 0, 213, 3

/**
 * Signal USS_CE_2_Right_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID      1, 0, 213, 3, 0

/**
 * Get signal USS_CE_2_Right_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[26] >> 3) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_2_Right_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID(buf, val) { \
	buf[26] &= ~(0x07 << 3); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal USS_CE_2_Right_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID(buf, 0)

/**
 * Signal USS_CE_2_Right_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_2_Right_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID      0

/**
 * Signal USS_CE_2_Right_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID        0

/**
 * Signal USS_CE_2_Right_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID        4

/**
 * Signal USS_CE_2_Right_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_2_Right_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID Signal USS_CE_3_Left_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_3_Left_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID        1, 0, 210, 3

/**
 * Signal USS_CE_3_Left_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID      1, 0, 210, 3, 0

/**
 * Get signal USS_CE_3_Left_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[26] >> 0) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_3_Left_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID(buf, val) { \
	buf[26] &= ~(0x07 << 0); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal USS_CE_3_Left_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID(buf, 0)

/**
 * Signal USS_CE_3_Left_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Left_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID      0

/**
 * Signal USS_CE_3_Left_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID        0

/**
 * Signal USS_CE_3_Left_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID        4

/**
 * Signal USS_CE_3_Left_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_3_Left_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID Signal USS_CE_3_Right_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_3_Right_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID        1, 0, 223, 3

/**
 * Signal USS_CE_3_Right_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID      1, 0, 223, 3, 0

/**
 * Get signal USS_CE_3_Right_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[27] >> 5) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_3_Right_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID(buf, val) { \
	buf[27] &= ~(0x07 << 5); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal USS_CE_3_Right_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID(buf, 0)

/**
 * Signal USS_CE_3_Right_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_3_Right_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID      0

/**
 * Signal USS_CE_3_Right_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID        0

/**
 * Signal USS_CE_3_Right_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID        4

/**
 * Signal USS_CE_3_Right_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_3_Right_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID Signal USS_CE_4_Left_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_4_Left_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID        1, 0, 220, 3

/**
 * Signal USS_CE_4_Left_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID      1, 0, 220, 3, 0

/**
 * Get signal USS_CE_4_Left_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[27] >> 2) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_4_Left_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID(buf, val) { \
	buf[27] &= ~(0x07 << 2); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal USS_CE_4_Left_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID(buf, 0)

/**
 * Signal USS_CE_4_Left_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Left_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID      0

/**
 * Signal USS_CE_4_Left_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID        0

/**
 * Signal USS_CE_4_Left_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID        4

/**
 * Signal USS_CE_4_Left_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_4_Left_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID Signal USS_CE_4_Right_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_4_Right_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID        1, 0, 217, 3

/**
 * Signal USS_CE_4_Right_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID      1, 0, 217, 3, 0

/**
 * Get signal USS_CE_4_Right_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[27] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[28] >> 7) & 0x01) << 0) \
)

/**
 * Set signal USS_CE_4_Right_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID(buf, val) { \
	buf[27] &= ~(0x03 << 0); \
	buf[27] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[28] &= ~(0x01 << 7); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal USS_CE_4_Right_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID(buf, 0)

/**
 * Signal USS_CE_4_Right_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_4_Right_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID      0

/**
 * Signal USS_CE_4_Right_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID        0

/**
 * Signal USS_CE_4_Right_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID        4

/**
 * Signal USS_CE_4_Right_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_4_Right_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID Signal USS_CE_5_Left_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_5_Left_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID        1, 0, 230, 3

/**
 * Signal USS_CE_5_Left_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID      1, 0, 230, 3, 0

/**
 * Get signal USS_CE_5_Left_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[28] >> 4) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_5_Left_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID(buf, val) { \
	buf[28] &= ~(0x07 << 4); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal USS_CE_5_Left_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID(buf, 0)

/**
 * Signal USS_CE_5_Left_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Left_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID      0

/**
 * Signal USS_CE_5_Left_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID        0

/**
 * Signal USS_CE_5_Left_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID        4

/**
 * Signal USS_CE_5_Left_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_5_Left_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID Signal USS_CE_5_Right_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_5_Right_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID        1, 0, 227, 3

/**
 * Signal USS_CE_5_Right_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID      1, 0, 227, 3, 0

/**
 * Get signal USS_CE_5_Right_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[28] >> 1) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_5_Right_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID(buf, val) { \
	buf[28] &= ~(0x07 << 1); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal USS_CE_5_Right_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID(buf, 0)

/**
 * Signal USS_CE_5_Right_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_5_Right_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID      0

/**
 * Signal USS_CE_5_Right_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID        0

/**
 * Signal USS_CE_5_Right_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID        4

/**
 * Signal USS_CE_5_Right_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_5_Right_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID Signal USS_CE_6_Left_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_6_Left_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID        1, 0, 224, 3

/**
 * Signal USS_CE_6_Left_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID      1, 0, 224, 3, 0

/**
 * Get signal USS_CE_6_Left_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[28] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_6_Left_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID(buf, val) { \
	buf[28] &= ~(0x01 << 0); \
	buf[28] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[29] &= ~(0x03 << 6); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_6_Left_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID(buf, 0)

/**
 * Signal USS_CE_6_Left_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_6_Left_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID      0

/**
 * Signal USS_CE_6_Left_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID        0

/**
 * Signal USS_CE_6_Left_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID        4

/**
 * Signal USS_CE_6_Left_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_6_Left_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID Signal USS_CE_7_Right_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_7_Right_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID        1, 0, 237, 3

/**
 * Signal USS_CE_7_Right_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID      1, 0, 237, 3, 0

/**
 * Get signal USS_CE_7_Right_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[29] >> 3) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_7_Right_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID(buf, val) { \
	buf[29] &= ~(0x07 << 3); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal USS_CE_7_Right_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID(buf, 0)

/**
 * Signal USS_CE_7_Right_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_7_Right_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID      0

/**
 * Signal USS_CE_7_Right_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID        0

/**
 * Signal USS_CE_7_Right_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID        4

/**
 * Signal USS_CE_7_Right_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_7_Right_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID Signal USS_CE_8_Left_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_8_Left_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID        1, 0, 234, 3

/**
 * Signal USS_CE_8_Left_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID      1, 0, 234, 3, 0

/**
 * Get signal USS_CE_8_Left_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[29] >> 0) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_8_Left_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID(buf, val) { \
	buf[29] &= ~(0x07 << 0); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal USS_CE_8_Left_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID(buf, 0)

/**
 * Signal USS_CE_8_Left_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Left_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID      0

/**
 * Signal USS_CE_8_Left_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID        0

/**
 * Signal USS_CE_8_Left_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID        4

/**
 * Signal USS_CE_8_Left_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID Signal USS_CE_8_Right_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_8_Right_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID        1, 0, 247, 3

/**
 * Signal USS_CE_8_Right_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID      1, 0, 247, 3, 0

/**
 * Get signal USS_CE_8_Right_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[30] >> 5) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_8_Right_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID(buf, val) { \
	buf[30] &= ~(0x07 << 5); \
	buf[30] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal USS_CE_8_Right_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID(buf, 0)

/**
 * Signal USS_CE_8_Right_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Right_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID      0

/**
 * Signal USS_CE_8_Right_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID        0

/**
 * Signal USS_CE_8_Right_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID        4

/**
 * Signal USS_CE_8_Right_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_8_Right_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID Signal USS_CE_9_Left_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_9_Left_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID        1, 0, 244, 3

/**
 * Signal USS_CE_9_Left_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID      1, 0, 244, 3, 0

/**
 * Get signal USS_CE_9_Left_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[30] >> 2) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_9_Left_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID(buf, val) { \
	buf[30] &= ~(0x07 << 2); \
	buf[30] |= (((uint8_t)(val) >> 0) & 0x07) << 2; \
}

/**
 * Set signal USS_CE_9_Left_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID(buf, 0)

/**
 * Signal USS_CE_9_Left_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Left_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID      0

/**
 * Signal USS_CE_9_Left_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID        0

/**
 * Signal USS_CE_9_Left_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID        4

/**
 * Signal USS_CE_9_Left_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_9_Left_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID Signal USS_CE_9_Right_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_9_Right_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID        1, 0, 241, 3

/**
 * Signal USS_CE_9_Right_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID      1, 0, 241, 3, 0

/**
 * Get signal USS_CE_9_Right_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[30] >> 0) & 0x03) << 1) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 7) & 0x01) << 0) \
)

/**
 * Set signal USS_CE_9_Right_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID(buf, val) { \
	buf[30] &= ~(0x03 << 0); \
	buf[30] |= (((uint8_t)(val) >> 1) & 0x03) << 0; \
	buf[31] &= ~(0x01 << 7); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal USS_CE_9_Right_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID(buf, 0)

/**
 * Signal USS_CE_9_Right_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_9_Right_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID      0

/**
 * Signal USS_CE_9_Right_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID        0

/**
 * Signal USS_CE_9_Right_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID        4

/**
 * Signal USS_CE_9_Right_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_9_Right_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID Signal USS_CE_10_Left_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_10_Left_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID        1, 0, 254, 3

/**
 * Signal USS_CE_10_Left_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID      1, 0, 254, 3, 0

/**
 * Get signal USS_CE_10_Left_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[31] >> 4) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_10_Left_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID(buf, val) { \
	buf[31] &= ~(0x07 << 4); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0x07) << 4; \
}

/**
 * Set signal USS_CE_10_Left_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID(buf, 0)

/**
 * Signal USS_CE_10_Left_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Left_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID      0

/**
 * Signal USS_CE_10_Left_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID        0

/**
 * Signal USS_CE_10_Left_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID        4

/**
 * Signal USS_CE_10_Left_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_10_Left_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID Signal USS_CE_10_Right_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_10_Right_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID        1, 0, 251, 3

/**
 * Signal USS_CE_10_Right_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID      1, 0, 251, 3, 0

/**
 * Get signal USS_CE_10_Right_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[31] >> 1) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_10_Right_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID(buf, val) { \
	buf[31] &= ~(0x07 << 1); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0x07) << 1; \
}

/**
 * Set signal USS_CE_10_Right_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID(buf, 0)

/**
 * Signal USS_CE_10_Right_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_10_Right_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID      0

/**
 * Signal USS_CE_10_Right_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID        0

/**
 * Signal USS_CE_10_Right_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID        4

/**
 * Signal USS_CE_10_Right_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_10_Right_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID Signal USS_CE_11_Left_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_11_Left_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID        1, 0, 248, 3

/**
 * Signal USS_CE_11_Left_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID      1, 0, 248, 3, 0

/**
 * Get signal USS_CE_11_Left_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[31] >> 0) & 0x01) << 2) \
	| (uint8_t)(+(uint8_t)((buf[32] >> 6) & 0x03) << 0) \
)

/**
 * Set signal USS_CE_11_Left_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID(buf, val) { \
	buf[31] &= ~(0x01 << 0); \
	buf[31] |= (((uint8_t)(val) >> 2) & 0x01) << 0; \
	buf[32] &= ~(0x03 << 6); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal USS_CE_11_Left_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID(buf, 0)

/**
 * Signal USS_CE_11_Left_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Left_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID      0

/**
 * Signal USS_CE_11_Left_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID        0

/**
 * Signal USS_CE_11_Left_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID        4

/**
 * Signal USS_CE_11_Left_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_11_Left_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID Signal USS_CE_11_Right_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_11_Right_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID        1, 0, 261, 3

/**
 * Signal USS_CE_11_Right_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID      1, 0, 261, 3, 0

/**
 * Get signal USS_CE_11_Right_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[32] >> 3) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_11_Right_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID(buf, val) { \
	buf[32] &= ~(0x07 << 3); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0x07) << 3; \
}

/**
 * Set signal USS_CE_11_Right_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID(buf, 0)

/**
 * Signal USS_CE_11_Right_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_11_Right_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID      0

/**
 * Signal USS_CE_11_Right_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID        0

/**
 * Signal USS_CE_11_Right_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID        4

/**
 * Signal USS_CE_11_Right_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_11_Right_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID Signal USS_CE_12_Left_2_CodeID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo CodeID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_12_Left_2_CodeID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID        1, 0, 258, 3

/**
 * Signal USS_CE_12_Left_2_CodeID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID      1, 0, 258, 3, 0

/**
 * Get signal USS_CE_12_Left_2_CodeID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[32] >> 0) & 0x07) << 0) \
)

/**
 * Set signal USS_CE_12_Left_2_CodeID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID(buf, val) { \
	buf[32] &= ~(0x07 << 0); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0x07) << 0; \
}

/**
 * Set signal USS_CE_12_Left_2_CodeID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID(buf, 0)

/**
 * Signal USS_CE_12_Left_2_CodeID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_12_Left_2_CodeID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID      0

/**
 * Signal USS_CE_12_Left_2_CodeID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID        0

/**
 * Signal USS_CE_12_Left_2_CodeID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID        4

/**
 * Signal USS_CE_12_Left_2_CodeID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_12_Left_2_CodeID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID Signal USS_CE_8_Left_2_TraceID of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * Indirect echo ID
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal USS_CE_8_Left_2_TraceID configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID and \ref GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID        1, 0, 271, 16

/**
 * Signal USS_CE_8_Left_2_TraceID setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID      1, 0, 271, 16, 0

/**
 * Get signal USS_CE_8_Left_2_TraceID from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[33] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[34] >> 0) & 0xff) << 0) \
)

/**
 * Set signal USS_CE_8_Left_2_TraceID in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID(buf, val) { \
	buf[33] &= ~(0xff << 0); \
	buf[33] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[34] &= ~(0xff << 0); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal USS_CE_8_Left_2_TraceID in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID(buf) \
	SET_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID(buf, 0)

/**
 * Signal USS_CE_8_Left_2_TraceID value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID(x, fmt) \
	((x) * fmt)

/**
 * Signal USS_CE_8_Left_2_TraceID raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID      0

/**
 * Signal USS_CE_8_Left_2_TraceID raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID        0

/**
 * Signal USS_CE_8_Left_2_TraceID raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID        32767

/**
 * Signal USS_CE_8_Left_2_TraceID raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_USS_CE_8_Left_2_TraceID        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp Signal PAS_CE_DE_TimeStamp of Message PAS_USSTraceIDInfo2_2 (0x1a4)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_USSTraceIDInfo2_2
 * @{
 */

/**
 * Signal PAS_CE_DE_TimeStamp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp and \ref GET_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp instead.
 */
#define SIG_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp        1, 0, 287, 32

/**
 * Signal PAS_CE_DE_TimeStamp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp or \ref INIT_PAS_USSTraceIDInfo2_2 instead.
 */
#define SETUP_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp      1, 0, 287, 32, 0

/**
 * Get signal PAS_CE_DE_TimeStamp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[35] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[36] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[37] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[38] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_CE_DE_TimeStamp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp(buf, val) { \
	buf[35] &= ~(0xff << 0); \
	buf[35] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[36] &= ~(0xff << 0); \
	buf[36] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[37] &= ~(0xff << 0); \
	buf[37] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[38] &= ~(0xff << 0); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_CE_DE_TimeStamp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp(buf) \
	SET_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp(buf, 0)

/**
 * Signal PAS_CE_DE_TimeStamp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_CE_DE_TimeStamp raw initial value.
 */
#define START_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp      0

/**
 * Signal PAS_CE_DE_TimeStamp raw minimum value.
 */
#define MIN_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp        0

/**
 * Signal PAS_CE_DE_TimeStamp raw maximum value.
 */
#define MAX_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp        4294967295

/**
 * Signal PAS_CE_DE_TimeStamp raw offset value.
 */
#define OFF_PAS_USSTraceIDInfo2_2_PAS_CE_DE_TimeStamp        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum Signal PAS_Map_PsolObj_Info1_Checksum of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal PAS_Map_PsolObj_Info1_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum and \ref GET_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum        1, 0, 7, 8

/**
 * Signal PAS_Map_PsolObj_Info1_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_Map_PsolObj_Info1_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_Map_PsolObj_Info1_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_Map_PsolObj_Info1_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum(buf) \
	SET_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum(buf, 0)

/**
 * Signal PAS_Map_PsolObj_Info1_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Map_PsolObj_Info1_Checksum raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum      0

/**
 * Signal PAS_Map_PsolObj_Info1_Checksum raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum        0

/**
 * Signal PAS_Map_PsolObj_Info1_Checksum raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum        255

/**
 * Signal PAS_Map_PsolObj_Info1_Checksum raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter Signal PAS_Map_PsolObj_Info1_MsgCounter of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal PAS_Map_PsolObj_Info1_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter and \ref GET_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_Map_PsolObj_Info1_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_Map_PsolObj_Info1_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_Map_PsolObj_Info1_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_Map_PsolObj_Info1_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter(buf) \
	SET_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter(buf, 0)

/**
 * Signal PAS_Map_PsolObj_Info1_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Map_PsolObj_Info1_MsgCounter raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter      0

/**
 * Signal PAS_Map_PsolObj_Info1_MsgCounter raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter        0

/**
 * Signal PAS_Map_PsolObj_Info1_MsgCounter raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter        15

/**
 * Signal PAS_Map_PsolObj_Info1_MsgCounter raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_PAS_Map_PsolObj_Info1_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X Signal Map_PsolObj1P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj1P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X        1, 0, 23, 10

/**
 * Signal Map_PsolObj1P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X      1, 0, 23, 10, 0

/**
 * Get signal Map_PsolObj1P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj1P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj1P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X(buf, 0)

/**
 * Signal Map_PsolObj1P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj1P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X      0

/**
 * Signal Map_PsolObj1P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X        0

/**
 * Signal Map_PsolObj1P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X        1022

/**
 * Signal Map_PsolObj1P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj1P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y Signal Map_PsolObj1P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj1P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y        1, 0, 29, 10

/**
 * Signal Map_PsolObj1P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y      1, 0, 29, 10, 0

/**
 * Get signal Map_PsolObj1P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj1P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y(buf, val) { \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj1P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y(buf, 0)

/**
 * Signal Map_PsolObj1P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj1P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y      0

/**
 * Signal Map_PsolObj1P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y        0

/**
 * Signal Map_PsolObj1P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y        1022

/**
 * Signal Map_PsolObj1P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj1P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X Signal Map_PsolObj1P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj1P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X        1, 0, 35, 10

/**
 * Signal Map_PsolObj1P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X      1, 0, 35, 10, 0

/**
 * Get signal Map_PsolObj1P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj1P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj1P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X(buf, 0)

/**
 * Signal Map_PsolObj1P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj1P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X      0

/**
 * Signal Map_PsolObj1P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X        0

/**
 * Signal Map_PsolObj1P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X        1022

/**
 * Signal Map_PsolObj1P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj1P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y Signal Map_PsolObj1P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj1P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y        1, 0, 41, 10

/**
 * Signal Map_PsolObj1P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y      1, 0, 41, 10, 0

/**
 * Get signal Map_PsolObj1P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj1P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj1P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y(buf, 0)

/**
 * Signal Map_PsolObj1P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj1P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y      0

/**
 * Signal Map_PsolObj1P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y        0

/**
 * Signal Map_PsolObj1P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y        1022

/**
 * Signal Map_PsolObj1P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj1P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus Signal Map_PsolObj1HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj1HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus        1, 0, 63, 2

/**
 * Signal Map_PsolObj1HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus      1, 0, 63, 2, 0

/**
 * Get signal Map_PsolObj1HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj1HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus(buf, val) { \
	buf[7] &= ~(0x03 << 6); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj1HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj1HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj1HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus      0

/**
 * Signal Map_PsolObj1HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus        0

/**
 * Signal Map_PsolObj1HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus        3

/**
 * Signal Map_PsolObj1HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj1HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X Signal Map_PsolObj2P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj2P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X        1, 0, 61, 10

/**
 * Signal Map_PsolObj2P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X      1, 0, 61, 10, 0

/**
 * Get signal Map_PsolObj2P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[8] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj2P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X(buf, val) { \
	buf[7] &= ~(0x3f << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[8] &= ~(0x0f << 4); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj2P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X(buf, 0)

/**
 * Signal Map_PsolObj2P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj2P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X      0

/**
 * Signal Map_PsolObj2P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X        0

/**
 * Signal Map_PsolObj2P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X        1022

/**
 * Signal Map_PsolObj2P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj2P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y Signal Map_PsolObj2P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj2P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y        1, 0, 67, 10

/**
 * Signal Map_PsolObj2P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y      1, 0, 67, 10, 0

/**
 * Get signal Map_PsolObj2P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj2P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y(buf, val) { \
	buf[8] &= ~(0x0f << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[9] &= ~(0x3f << 2); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj2P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y(buf, 0)

/**
 * Signal Map_PsolObj2P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj2P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y      0

/**
 * Signal Map_PsolObj2P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y        0

/**
 * Signal Map_PsolObj2P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y        1022

/**
 * Signal Map_PsolObj2P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj2P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X Signal Map_PsolObj2P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj2P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X        1, 0, 73, 10

/**
 * Signal Map_PsolObj2P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X      1, 0, 73, 10, 0

/**
 * Get signal Map_PsolObj2P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[10] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj2P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X(buf, val) { \
	buf[9] &= ~(0x03 << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj2P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X(buf, 0)

/**
 * Signal Map_PsolObj2P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj2P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X      0

/**
 * Signal Map_PsolObj2P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X        0

/**
 * Signal Map_PsolObj2P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X        1022

/**
 * Signal Map_PsolObj2P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj2P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y Signal Map_PsolObj2P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj2P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y        1, 0, 95, 10

/**
 * Signal Map_PsolObj2P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y      1, 0, 95, 10, 0

/**
 * Get signal Map_PsolObj2P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[11] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[12] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj2P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y(buf, val) { \
	buf[11] &= ~(0xff << 0); \
	buf[11] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[12] &= ~(0x03 << 6); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj2P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y(buf, 0)

/**
 * Signal Map_PsolObj2P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj2P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y      0

/**
 * Signal Map_PsolObj2P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y        0

/**
 * Signal Map_PsolObj2P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y        1022

/**
 * Signal Map_PsolObj2P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj2P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus Signal Map_PsolObj2HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj2HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus        1, 0, 101, 2

/**
 * Signal Map_PsolObj2HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus      1, 0, 101, 2, 0

/**
 * Get signal Map_PsolObj2HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[12] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj2HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus(buf, val) { \
	buf[12] &= ~(0x03 << 4); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj2HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj2HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj2HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus      0

/**
 * Signal Map_PsolObj2HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus        0

/**
 * Signal Map_PsolObj2HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus        3

/**
 * Signal Map_PsolObj2HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj2HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X Signal Map_PsolObj3P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj3P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X        1, 0, 99, 10

/**
 * Signal Map_PsolObj3P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X      1, 0, 99, 10, 0

/**
 * Get signal Map_PsolObj3P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj3P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X(buf, val) { \
	buf[12] &= ~(0x0f << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[13] &= ~(0x3f << 2); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj3P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X(buf, 0)

/**
 * Signal Map_PsolObj3P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj3P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X      0

/**
 * Signal Map_PsolObj3P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X        0

/**
 * Signal Map_PsolObj3P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X        1022

/**
 * Signal Map_PsolObj3P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj3P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y Signal Map_PsolObj3P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj3P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y        1, 0, 105, 10

/**
 * Signal Map_PsolObj3P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y      1, 0, 105, 10, 0

/**
 * Get signal Map_PsolObj3P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj3P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y(buf, val) { \
	buf[13] &= ~(0x03 << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[14] &= ~(0xff << 0); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj3P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y(buf, 0)

/**
 * Signal Map_PsolObj3P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj3P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y      0

/**
 * Signal Map_PsolObj3P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y        0

/**
 * Signal Map_PsolObj3P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y        1022

/**
 * Signal Map_PsolObj3P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj3P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X Signal Map_PsolObj3P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj3P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X        1, 0, 127, 10

/**
 * Signal Map_PsolObj3P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X      1, 0, 127, 10, 0

/**
 * Get signal Map_PsolObj3P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[15] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[16] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj3P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X(buf, val) { \
	buf[15] &= ~(0xff << 0); \
	buf[15] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[16] &= ~(0x03 << 6); \
	buf[16] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj3P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X(buf, 0)

/**
 * Signal Map_PsolObj3P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj3P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X      0

/**
 * Signal Map_PsolObj3P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X        0

/**
 * Signal Map_PsolObj3P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X        1022

/**
 * Signal Map_PsolObj3P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj3P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y Signal Map_PsolObj3P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj3P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y        1, 0, 133, 10

/**
 * Signal Map_PsolObj3P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y      1, 0, 133, 10, 0

/**
 * Get signal Map_PsolObj3P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[16] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[17] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj3P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y(buf, val) { \
	buf[16] &= ~(0x3f << 0); \
	buf[16] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[17] &= ~(0x0f << 4); \
	buf[17] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj3P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y(buf, 0)

/**
 * Signal Map_PsolObj3P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj3P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y      0

/**
 * Signal Map_PsolObj3P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y        0

/**
 * Signal Map_PsolObj3P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y        1022

/**
 * Signal Map_PsolObj3P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj3P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus Signal Map_PsolObj3HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj3HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus        1, 0, 139, 2

/**
 * Signal Map_PsolObj3HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus      1, 0, 139, 2, 0

/**
 * Get signal Map_PsolObj3HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[17] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj3HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus(buf, val) { \
	buf[17] &= ~(0x03 << 2); \
	buf[17] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj3HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj3HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj3HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus      0

/**
 * Signal Map_PsolObj3HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus        0

/**
 * Signal Map_PsolObj3HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus        3

/**
 * Signal Map_PsolObj3HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj3HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X Signal Map_PsolObj4P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj4P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X        1, 0, 137, 10

/**
 * Signal Map_PsolObj4P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X      1, 0, 137, 10, 0

/**
 * Get signal Map_PsolObj4P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[17] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[18] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj4P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X(buf, val) { \
	buf[17] &= ~(0x03 << 0); \
	buf[17] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[18] &= ~(0xff << 0); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj4P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X(buf, 0)

/**
 * Signal Map_PsolObj4P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj4P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X      0

/**
 * Signal Map_PsolObj4P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X        0

/**
 * Signal Map_PsolObj4P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X        1022

/**
 * Signal Map_PsolObj4P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj4P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y Signal Map_PsolObj4P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj4P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y        1, 0, 159, 10

/**
 * Signal Map_PsolObj4P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y      1, 0, 159, 10, 0

/**
 * Get signal Map_PsolObj4P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[19] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj4P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y(buf, val) { \
	buf[19] &= ~(0xff << 0); \
	buf[19] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[20] &= ~(0x03 << 6); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj4P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y(buf, 0)

/**
 * Signal Map_PsolObj4P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj4P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y      0

/**
 * Signal Map_PsolObj4P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y        0

/**
 * Signal Map_PsolObj4P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y        1022

/**
 * Signal Map_PsolObj4P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj4P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X Signal Map_PsolObj4P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj4P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X        1, 0, 165, 10

/**
 * Signal Map_PsolObj4P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X      1, 0, 165, 10, 0

/**
 * Get signal Map_PsolObj4P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[20] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[21] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj4P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X(buf, val) { \
	buf[20] &= ~(0x3f << 0); \
	buf[20] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[21] &= ~(0x0f << 4); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj4P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X(buf, 0)

/**
 * Signal Map_PsolObj4P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj4P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X      0

/**
 * Signal Map_PsolObj4P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X        0

/**
 * Signal Map_PsolObj4P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X        1022

/**
 * Signal Map_PsolObj4P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj4P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y Signal Map_PsolObj4P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj4P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y        1, 0, 171, 10

/**
 * Signal Map_PsolObj4P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y      1, 0, 171, 10, 0

/**
 * Get signal Map_PsolObj4P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[21] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[22] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj4P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y(buf, val) { \
	buf[21] &= ~(0x0f << 0); \
	buf[21] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[22] &= ~(0x3f << 2); \
	buf[22] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj4P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y(buf, 0)

/**
 * Signal Map_PsolObj4P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj4P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y      0

/**
 * Signal Map_PsolObj4P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y        0

/**
 * Signal Map_PsolObj4P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y        1022

/**
 * Signal Map_PsolObj4P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj4P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus Signal Map_PsolObj4HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj4HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus        1, 0, 177, 2

/**
 * Signal Map_PsolObj4HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus      1, 0, 177, 2, 0

/**
 * Get signal Map_PsolObj4HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[22] >> 0) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj4HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus(buf, val) { \
	buf[22] &= ~(0x03 << 0); \
	buf[22] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal Map_PsolObj4HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj4HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj4HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus      0

/**
 * Signal Map_PsolObj4HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus        0

/**
 * Signal Map_PsolObj4HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus        3

/**
 * Signal Map_PsolObj4HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj4HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X Signal Map_PsolObj5P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj5P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X        1, 0, 191, 10

/**
 * Signal Map_PsolObj5P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X      1, 0, 191, 10, 0

/**
 * Get signal Map_PsolObj5P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[23] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[24] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj5P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X(buf, val) { \
	buf[23] &= ~(0xff << 0); \
	buf[23] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[24] &= ~(0x03 << 6); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj5P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X(buf, 0)

/**
 * Signal Map_PsolObj5P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj5P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X      0

/**
 * Signal Map_PsolObj5P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X        0

/**
 * Signal Map_PsolObj5P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X        1022

/**
 * Signal Map_PsolObj5P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj5P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y Signal Map_PsolObj5P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj5P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y        1, 0, 197, 10

/**
 * Signal Map_PsolObj5P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y      1, 0, 197, 10, 0

/**
 * Get signal Map_PsolObj5P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[24] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[25] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj5P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y(buf, val) { \
	buf[24] &= ~(0x3f << 0); \
	buf[24] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[25] &= ~(0x0f << 4); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj5P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y(buf, 0)

/**
 * Signal Map_PsolObj5P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj5P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y      0

/**
 * Signal Map_PsolObj5P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y        0

/**
 * Signal Map_PsolObj5P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y        1022

/**
 * Signal Map_PsolObj5P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj5P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X Signal Map_PsolObj5P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj5P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X        1, 0, 203, 10

/**
 * Signal Map_PsolObj5P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X      1, 0, 203, 10, 0

/**
 * Get signal Map_PsolObj5P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[26] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj5P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X(buf, val) { \
	buf[25] &= ~(0x0f << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[26] &= ~(0x3f << 2); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj5P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X(buf, 0)

/**
 * Signal Map_PsolObj5P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj5P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X      0

/**
 * Signal Map_PsolObj5P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X        0

/**
 * Signal Map_PsolObj5P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X        1022

/**
 * Signal Map_PsolObj5P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj5P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y Signal Map_PsolObj5P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj5P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y        1, 0, 209, 10

/**
 * Signal Map_PsolObj5P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y      1, 0, 209, 10, 0

/**
 * Get signal Map_PsolObj5P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[26] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[27] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj5P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y(buf, val) { \
	buf[26] &= ~(0x03 << 0); \
	buf[26] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[27] &= ~(0xff << 0); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj5P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y(buf, 0)

/**
 * Signal Map_PsolObj5P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj5P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y      0

/**
 * Signal Map_PsolObj5P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y        0

/**
 * Signal Map_PsolObj5P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y        1022

/**
 * Signal Map_PsolObj5P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj5P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus Signal Map_PsolObj5HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj5HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus        1, 0, 231, 2

/**
 * Signal Map_PsolObj5HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus      1, 0, 231, 2, 0

/**
 * Get signal Map_PsolObj5HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[28] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj5HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus(buf, val) { \
	buf[28] &= ~(0x03 << 6); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj5HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj5HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj5HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus      0

/**
 * Signal Map_PsolObj5HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus        0

/**
 * Signal Map_PsolObj5HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus        3

/**
 * Signal Map_PsolObj5HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj5HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X Signal Map_PsolObj6P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj6P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X        1, 0, 229, 10

/**
 * Signal Map_PsolObj6P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X      1, 0, 229, 10, 0

/**
 * Get signal Map_PsolObj6P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[28] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj6P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X(buf, val) { \
	buf[28] &= ~(0x3f << 0); \
	buf[28] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[29] &= ~(0x0f << 4); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj6P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X(buf, 0)

/**
 * Signal Map_PsolObj6P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj6P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X      0

/**
 * Signal Map_PsolObj6P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X        0

/**
 * Signal Map_PsolObj6P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X        1022

/**
 * Signal Map_PsolObj6P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj6P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y Signal Map_PsolObj6P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj6P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y        1, 0, 235, 10

/**
 * Signal Map_PsolObj6P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y      1, 0, 235, 10, 0

/**
 * Get signal Map_PsolObj6P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[29] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[30] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj6P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y(buf, val) { \
	buf[29] &= ~(0x0f << 0); \
	buf[29] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[30] &= ~(0x3f << 2); \
	buf[30] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj6P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y(buf, 0)

/**
 * Signal Map_PsolObj6P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj6P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y      0

/**
 * Signal Map_PsolObj6P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y        0

/**
 * Signal Map_PsolObj6P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y        1022

/**
 * Signal Map_PsolObj6P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj6P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X Signal Map_PsolObj6P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj6P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X        1, 0, 241, 10

/**
 * Signal Map_PsolObj6P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X      1, 0, 241, 10, 0

/**
 * Get signal Map_PsolObj6P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj6P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X(buf, val) { \
	buf[30] &= ~(0x03 << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[31] &= ~(0xff << 0); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj6P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X(buf, 0)

/**
 * Signal Map_PsolObj6P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj6P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X      0

/**
 * Signal Map_PsolObj6P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X        0

/**
 * Signal Map_PsolObj6P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X        1022

/**
 * Signal Map_PsolObj6P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj6P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y Signal Map_PsolObj6P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj6P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y        1, 0, 263, 10

/**
 * Signal Map_PsolObj6P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y      1, 0, 263, 10, 0

/**
 * Get signal Map_PsolObj6P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[32] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[33] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj6P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y(buf, val) { \
	buf[32] &= ~(0xff << 0); \
	buf[32] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[33] &= ~(0x03 << 6); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj6P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y(buf, 0)

/**
 * Signal Map_PsolObj6P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj6P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y      0

/**
 * Signal Map_PsolObj6P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y        0

/**
 * Signal Map_PsolObj6P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y        1022

/**
 * Signal Map_PsolObj6P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj6P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus Signal Map_PsolObj6HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj6HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus        1, 0, 269, 2

/**
 * Signal Map_PsolObj6HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus      1, 0, 269, 2, 0

/**
 * Get signal Map_PsolObj6HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[33] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj6HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus(buf, val) { \
	buf[33] &= ~(0x03 << 4); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj6HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj6HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj6HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus      0

/**
 * Signal Map_PsolObj6HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus        0

/**
 * Signal Map_PsolObj6HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus        3

/**
 * Signal Map_PsolObj6HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj6HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X Signal Map_PsolObj7P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj7P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X        1, 0, 267, 10

/**
 * Signal Map_PsolObj7P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X      1, 0, 267, 10, 0

/**
 * Get signal Map_PsolObj7P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[33] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[34] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj7P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X(buf, val) { \
	buf[33] &= ~(0x0f << 0); \
	buf[33] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[34] &= ~(0x3f << 2); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj7P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X(buf, 0)

/**
 * Signal Map_PsolObj7P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj7P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X      0

/**
 * Signal Map_PsolObj7P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X        0

/**
 * Signal Map_PsolObj7P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X        1022

/**
 * Signal Map_PsolObj7P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj7P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y Signal Map_PsolObj7P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj7P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y        1, 0, 273, 10

/**
 * Signal Map_PsolObj7P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y      1, 0, 273, 10, 0

/**
 * Get signal Map_PsolObj7P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[34] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[35] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj7P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y(buf, val) { \
	buf[34] &= ~(0x03 << 0); \
	buf[34] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[35] &= ~(0xff << 0); \
	buf[35] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj7P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y(buf, 0)

/**
 * Signal Map_PsolObj7P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj7P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y      0

/**
 * Signal Map_PsolObj7P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y        0

/**
 * Signal Map_PsolObj7P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y        1022

/**
 * Signal Map_PsolObj7P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj7P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X Signal Map_PsolObj7P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj7P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X        1, 0, 295, 10

/**
 * Signal Map_PsolObj7P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X      1, 0, 295, 10, 0

/**
 * Get signal Map_PsolObj7P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[36] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[37] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj7P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X(buf, val) { \
	buf[36] &= ~(0xff << 0); \
	buf[36] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[37] &= ~(0x03 << 6); \
	buf[37] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj7P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X(buf, 0)

/**
 * Signal Map_PsolObj7P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj7P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X      0

/**
 * Signal Map_PsolObj7P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X        0

/**
 * Signal Map_PsolObj7P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X        1022

/**
 * Signal Map_PsolObj7P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj7P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y Signal Map_PsolObj7P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj7P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y        1, 0, 301, 10

/**
 * Signal Map_PsolObj7P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y      1, 0, 301, 10, 0

/**
 * Get signal Map_PsolObj7P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[37] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[38] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj7P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y(buf, val) { \
	buf[37] &= ~(0x3f << 0); \
	buf[37] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[38] &= ~(0x0f << 4); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj7P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y(buf, 0)

/**
 * Signal Map_PsolObj7P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj7P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y      0

/**
 * Signal Map_PsolObj7P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y        0

/**
 * Signal Map_PsolObj7P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y        1022

/**
 * Signal Map_PsolObj7P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj7P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus Signal Map_PsolObj7HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj7HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus        1, 0, 307, 2

/**
 * Signal Map_PsolObj7HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus      1, 0, 307, 2, 0

/**
 * Get signal Map_PsolObj7HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[38] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj7HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus(buf, val) { \
	buf[38] &= ~(0x03 << 2); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj7HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj7HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj7HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus      0

/**
 * Signal Map_PsolObj7HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus        0

/**
 * Signal Map_PsolObj7HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus        3

/**
 * Signal Map_PsolObj7HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj7HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X Signal Map_PsolObj8P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj8P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X        1, 0, 305, 10

/**
 * Signal Map_PsolObj8P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X      1, 0, 305, 10, 0

/**
 * Get signal Map_PsolObj8P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[38] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[39] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj8P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X(buf, val) { \
	buf[38] &= ~(0x03 << 0); \
	buf[38] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[39] &= ~(0xff << 0); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj8P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X(buf, 0)

/**
 * Signal Map_PsolObj8P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj8P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X      0

/**
 * Signal Map_PsolObj8P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X        0

/**
 * Signal Map_PsolObj8P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X        1022

/**
 * Signal Map_PsolObj8P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj8P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y Signal Map_PsolObj8P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj8P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y        1, 0, 327, 10

/**
 * Signal Map_PsolObj8P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y      1, 0, 327, 10, 0

/**
 * Get signal Map_PsolObj8P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[40] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[41] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj8P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y(buf, val) { \
	buf[40] &= ~(0xff << 0); \
	buf[40] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[41] &= ~(0x03 << 6); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj8P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y(buf, 0)

/**
 * Signal Map_PsolObj8P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj8P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y      0

/**
 * Signal Map_PsolObj8P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y        0

/**
 * Signal Map_PsolObj8P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y        1022

/**
 * Signal Map_PsolObj8P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj8P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X Signal Map_PsolObj8P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj8P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X        1, 0, 333, 10

/**
 * Signal Map_PsolObj8P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X      1, 0, 333, 10, 0

/**
 * Get signal Map_PsolObj8P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[41] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[42] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj8P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X(buf, val) { \
	buf[41] &= ~(0x3f << 0); \
	buf[41] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[42] &= ~(0x0f << 4); \
	buf[42] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj8P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X(buf, 0)

/**
 * Signal Map_PsolObj8P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj8P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X      0

/**
 * Signal Map_PsolObj8P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X        0

/**
 * Signal Map_PsolObj8P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X        1022

/**
 * Signal Map_PsolObj8P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj8P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y Signal Map_PsolObj8P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj8P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y        1, 0, 339, 10

/**
 * Signal Map_PsolObj8P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y      1, 0, 339, 10, 0

/**
 * Get signal Map_PsolObj8P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[42] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[43] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj8P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y(buf, val) { \
	buf[42] &= ~(0x0f << 0); \
	buf[42] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[43] &= ~(0x3f << 2); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj8P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y(buf, 0)

/**
 * Signal Map_PsolObj8P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj8P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y      0

/**
 * Signal Map_PsolObj8P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y        0

/**
 * Signal Map_PsolObj8P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y        1022

/**
 * Signal Map_PsolObj8P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj8P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus Signal Map_PsolObj8HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj8HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus        1, 0, 345, 2

/**
 * Signal Map_PsolObj8HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus      1, 0, 345, 2, 0

/**
 * Get signal Map_PsolObj8HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[43] >> 0) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj8HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus(buf, val) { \
	buf[43] &= ~(0x03 << 0); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal Map_PsolObj8HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj8HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj8HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus      0

/**
 * Signal Map_PsolObj8HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus        0

/**
 * Signal Map_PsolObj8HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus        3

/**
 * Signal Map_PsolObj8HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj8HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X Signal Map_PsolObj9P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj9P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X        1, 0, 359, 10

/**
 * Signal Map_PsolObj9P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X      1, 0, 359, 10, 0

/**
 * Get signal Map_PsolObj9P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[44] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[45] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj9P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X(buf, val) { \
	buf[44] &= ~(0xff << 0); \
	buf[44] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[45] &= ~(0x03 << 6); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj9P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X(buf, 0)

/**
 * Signal Map_PsolObj9P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj9P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X      0

/**
 * Signal Map_PsolObj9P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X        0

/**
 * Signal Map_PsolObj9P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X        1022

/**
 * Signal Map_PsolObj9P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj9P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y Signal Map_PsolObj9P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj9P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y        1, 0, 365, 10

/**
 * Signal Map_PsolObj9P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y      1, 0, 365, 10, 0

/**
 * Get signal Map_PsolObj9P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[45] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[46] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj9P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y(buf, val) { \
	buf[45] &= ~(0x3f << 0); \
	buf[45] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[46] &= ~(0x0f << 4); \
	buf[46] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj9P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y(buf, 0)

/**
 * Signal Map_PsolObj9P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj9P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y      0

/**
 * Signal Map_PsolObj9P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y        0

/**
 * Signal Map_PsolObj9P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y        1022

/**
 * Signal Map_PsolObj9P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj9P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X Signal Map_PsolObj9P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj9P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X        1, 0, 371, 10

/**
 * Signal Map_PsolObj9P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X      1, 0, 371, 10, 0

/**
 * Get signal Map_PsolObj9P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[46] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[47] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj9P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X(buf, val) { \
	buf[46] &= ~(0x0f << 0); \
	buf[46] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[47] &= ~(0x3f << 2); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj9P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X(buf, 0)

/**
 * Signal Map_PsolObj9P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj9P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X      0

/**
 * Signal Map_PsolObj9P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X        0

/**
 * Signal Map_PsolObj9P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X        1022

/**
 * Signal Map_PsolObj9P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj9P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y Signal Map_PsolObj9P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj9P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y        1, 0, 377, 10

/**
 * Signal Map_PsolObj9P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y      1, 0, 377, 10, 0

/**
 * Get signal Map_PsolObj9P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[47] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[48] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj9P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y(buf, val) { \
	buf[47] &= ~(0x03 << 0); \
	buf[47] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[48] &= ~(0xff << 0); \
	buf[48] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj9P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y(buf, 0)

/**
 * Signal Map_PsolObj9P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj9P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y      0

/**
 * Signal Map_PsolObj9P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y        0

/**
 * Signal Map_PsolObj9P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y        1022

/**
 * Signal Map_PsolObj9P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj9P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus Signal Map_PsolObj9HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj9HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus        1, 0, 399, 2

/**
 * Signal Map_PsolObj9HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus      1, 0, 399, 2, 0

/**
 * Get signal Map_PsolObj9HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[49] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj9HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus(buf, val) { \
	buf[49] &= ~(0x03 << 6); \
	buf[49] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj9HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj9HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj9HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus      0

/**
 * Signal Map_PsolObj9HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus        0

/**
 * Signal Map_PsolObj9HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus        3

/**
 * Signal Map_PsolObj9HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj9HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X Signal Map_PsolObj10P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj10P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X        1, 0, 397, 10

/**
 * Signal Map_PsolObj10P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X      1, 0, 397, 10, 0

/**
 * Get signal Map_PsolObj10P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[49] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[50] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj10P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X(buf, val) { \
	buf[49] &= ~(0x3f << 0); \
	buf[49] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[50] &= ~(0x0f << 4); \
	buf[50] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj10P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X(buf, 0)

/**
 * Signal Map_PsolObj10P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj10P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X      0

/**
 * Signal Map_PsolObj10P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X        0

/**
 * Signal Map_PsolObj10P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X        1022

/**
 * Signal Map_PsolObj10P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj10P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y Signal Map_PsolObj10P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj10P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y        1, 0, 403, 10

/**
 * Signal Map_PsolObj10P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y      1, 0, 403, 10, 0

/**
 * Get signal Map_PsolObj10P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[50] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[51] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj10P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y(buf, val) { \
	buf[50] &= ~(0x0f << 0); \
	buf[50] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[51] &= ~(0x3f << 2); \
	buf[51] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj10P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y(buf, 0)

/**
 * Signal Map_PsolObj10P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj10P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y      0

/**
 * Signal Map_PsolObj10P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y        0

/**
 * Signal Map_PsolObj10P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y        1022

/**
 * Signal Map_PsolObj10P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj10P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X Signal Map_PsolObj10P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj10P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X        1, 0, 409, 10

/**
 * Signal Map_PsolObj10P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X      1, 0, 409, 10, 0

/**
 * Get signal Map_PsolObj10P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[51] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[52] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj10P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X(buf, val) { \
	buf[51] &= ~(0x03 << 0); \
	buf[51] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[52] &= ~(0xff << 0); \
	buf[52] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj10P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X(buf, 0)

/**
 * Signal Map_PsolObj10P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj10P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X      0

/**
 * Signal Map_PsolObj10P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X        0

/**
 * Signal Map_PsolObj10P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X        1022

/**
 * Signal Map_PsolObj10P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj10P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y Signal Map_PsolObj10P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj10P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y        1, 0, 431, 10

/**
 * Signal Map_PsolObj10P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y      1, 0, 431, 10, 0

/**
 * Get signal Map_PsolObj10P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[53] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[54] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj10P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y(buf, val) { \
	buf[53] &= ~(0xff << 0); \
	buf[53] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[54] &= ~(0x03 << 6); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj10P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y(buf, 0)

/**
 * Signal Map_PsolObj10P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj10P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y      0

/**
 * Signal Map_PsolObj10P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y        0

/**
 * Signal Map_PsolObj10P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y        1022

/**
 * Signal Map_PsolObj10P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj10P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus Signal Map_PsolObj10HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj10HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus        1, 0, 437, 2

/**
 * Signal Map_PsolObj10HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus      1, 0, 437, 2, 0

/**
 * Get signal Map_PsolObj10HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[54] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj10HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus(buf, val) { \
	buf[54] &= ~(0x03 << 4); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj10HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj10HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj10HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus      0

/**
 * Signal Map_PsolObj10HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus        0

/**
 * Signal Map_PsolObj10HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus        3

/**
 * Signal Map_PsolObj10HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj10HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X Signal Map_PsolObj11P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj11P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X        1, 0, 435, 10

/**
 * Signal Map_PsolObj11P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X      1, 0, 435, 10, 0

/**
 * Get signal Map_PsolObj11P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[54] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[55] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj11P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X(buf, val) { \
	buf[54] &= ~(0x0f << 0); \
	buf[54] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[55] &= ~(0x3f << 2); \
	buf[55] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj11P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X(buf, 0)

/**
 * Signal Map_PsolObj11P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj11P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X      0

/**
 * Signal Map_PsolObj11P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X        0

/**
 * Signal Map_PsolObj11P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X        1022

/**
 * Signal Map_PsolObj11P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj11P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y Signal Map_PsolObj11P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj11P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y        1, 0, 441, 10

/**
 * Signal Map_PsolObj11P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y      1, 0, 441, 10, 0

/**
 * Get signal Map_PsolObj11P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[55] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[56] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj11P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y(buf, val) { \
	buf[55] &= ~(0x03 << 0); \
	buf[55] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[56] &= ~(0xff << 0); \
	buf[56] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj11P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y(buf, 0)

/**
 * Signal Map_PsolObj11P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj11P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y      0

/**
 * Signal Map_PsolObj11P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y        0

/**
 * Signal Map_PsolObj11P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y        1022

/**
 * Signal Map_PsolObj11P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj11P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X Signal Map_PsolObj11P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj11P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X        1, 0, 463, 10

/**
 * Signal Map_PsolObj11P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X      1, 0, 463, 10, 0

/**
 * Get signal Map_PsolObj11P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[57] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[58] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj11P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X(buf, val) { \
	buf[57] &= ~(0xff << 0); \
	buf[57] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[58] &= ~(0x03 << 6); \
	buf[58] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj11P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X(buf, 0)

/**
 * Signal Map_PsolObj11P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj11P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X      0

/**
 * Signal Map_PsolObj11P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X        0

/**
 * Signal Map_PsolObj11P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X        1022

/**
 * Signal Map_PsolObj11P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj11P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y Signal Map_PsolObj11P2Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj11P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y        1, 0, 469, 10

/**
 * Signal Map_PsolObj11P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y      1, 0, 469, 10, 0

/**
 * Get signal Map_PsolObj11P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[58] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[59] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj11P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y(buf, val) { \
	buf[58] &= ~(0x3f << 0); \
	buf[58] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[59] &= ~(0x0f << 4); \
	buf[59] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj11P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y(buf, 0)

/**
 * Signal Map_PsolObj11P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj11P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y      0

/**
 * Signal Map_PsolObj11P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y        0

/**
 * Signal Map_PsolObj11P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y        1022

/**
 * Signal Map_PsolObj11P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj11P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus Signal Map_PsolObj11HeightStatus of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj11HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus        1, 0, 475, 2

/**
 * Signal Map_PsolObj11HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus      1, 0, 475, 2, 0

/**
 * Get signal Map_PsolObj11HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[59] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj11HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus(buf, val) { \
	buf[59] &= ~(0x03 << 2); \
	buf[59] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj11HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj11HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj11HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus      0

/**
 * Signal Map_PsolObj11HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus        0

/**
 * Signal Map_PsolObj11HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus        3

/**
 * Signal Map_PsolObj11HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj11HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X Signal Map_PsolObj12P1X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj12P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X        1, 0, 473, 10

/**
 * Signal Map_PsolObj12P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X      1, 0, 473, 10, 0

/**
 * Get signal Map_PsolObj12P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[59] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[60] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj12P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X(buf, val) { \
	buf[59] &= ~(0x03 << 0); \
	buf[59] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[60] &= ~(0xff << 0); \
	buf[60] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj12P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X(buf, 0)

/**
 * Signal Map_PsolObj12P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj12P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X      0

/**
 * Signal Map_PsolObj12P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X        0

/**
 * Signal Map_PsolObj12P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X        1022

/**
 * Signal Map_PsolObj12P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj12P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y Signal Map_PsolObj12P1Y of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj12P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y        1, 0, 495, 10

/**
 * Signal Map_PsolObj12P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y      1, 0, 495, 10, 0

/**
 * Get signal Map_PsolObj12P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[61] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[62] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj12P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y(buf, val) { \
	buf[61] &= ~(0xff << 0); \
	buf[61] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[62] &= ~(0x03 << 6); \
	buf[62] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj12P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y(buf, 0)

/**
 * Signal Map_PsolObj12P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj12P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y      0

/**
 * Signal Map_PsolObj12P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y        0

/**
 * Signal Map_PsolObj12P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y        1022

/**
 * Signal Map_PsolObj12P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj12P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X Signal Map_PsolObj12P2X of Message PAS_Map_PsolObj_Info1 (0x19c)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info1
 * @{
 */

/**
 * Signal Map_PsolObj12P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X and \ref GET_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X        1, 0, 501, 10

/**
 * Signal Map_PsolObj12P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X or \ref INIT_PAS_Map_PsolObj_Info1 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X      1, 0, 501, 10, 0

/**
 * Get signal Map_PsolObj12P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[62] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[63] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj12P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X(buf, val) { \
	buf[62] &= ~(0x3f << 0); \
	buf[62] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[63] &= ~(0x0f << 4); \
	buf[63] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj12P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X(buf) \
	SET_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X(buf, 0)

/**
 * Signal Map_PsolObj12P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj12P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X      0

/**
 * Signal Map_PsolObj12P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X        0

/**
 * Signal Map_PsolObj12P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X        1022

/**
 * Signal Map_PsolObj12P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info1_Map_PsolObj12P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum Signal PAS_Map_PsolObj_Info2_Checksum of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal PAS_Map_PsolObj_Info2_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum and \ref GET_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum        1, 0, 7, 8

/**
 * Signal PAS_Map_PsolObj_Info2_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_Map_PsolObj_Info2_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_Map_PsolObj_Info2_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_Map_PsolObj_Info2_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum(buf) \
	SET_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum(buf, 0)

/**
 * Signal PAS_Map_PsolObj_Info2_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Map_PsolObj_Info2_Checksum raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum      0

/**
 * Signal PAS_Map_PsolObj_Info2_Checksum raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum        0

/**
 * Signal PAS_Map_PsolObj_Info2_Checksum raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum        255

/**
 * Signal PAS_Map_PsolObj_Info2_Checksum raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter Signal PAS_Map_PsolObj_Info2_MsgCounter of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal PAS_Map_PsolObj_Info2_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter and \ref GET_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_Map_PsolObj_Info2_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_Map_PsolObj_Info2_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_Map_PsolObj_Info2_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_Map_PsolObj_Info2_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter(buf) \
	SET_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter(buf, 0)

/**
 * Signal PAS_Map_PsolObj_Info2_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Map_PsolObj_Info2_MsgCounter raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter      0

/**
 * Signal PAS_Map_PsolObj_Info2_MsgCounter raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter        0

/**
 * Signal PAS_Map_PsolObj_Info2_MsgCounter raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter        15

/**
 * Signal PAS_Map_PsolObj_Info2_MsgCounter raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_PAS_Map_PsolObj_Info2_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y Signal Map_PsolObj12P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj12P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y        1, 0, 23, 10

/**
 * Signal Map_PsolObj12P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y      1, 0, 23, 10, 0

/**
 * Get signal Map_PsolObj12P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj12P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj12P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y(buf, 0)

/**
 * Signal Map_PsolObj12P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj12P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y      0

/**
 * Signal Map_PsolObj12P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y        0

/**
 * Signal Map_PsolObj12P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y        1022

/**
 * Signal Map_PsolObj12P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj12P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus Signal Map_PsolObj12HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj12HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus        1, 0, 29, 2

/**
 * Signal Map_PsolObj12HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus      1, 0, 29, 2, 0

/**
 * Get signal Map_PsolObj12HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj12HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus(buf, val) { \
	buf[3] &= ~(0x03 << 4); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj12HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj12HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj12HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus      0

/**
 * Signal Map_PsolObj12HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus        0

/**
 * Signal Map_PsolObj12HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus        3

/**
 * Signal Map_PsolObj12HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj12HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X Signal Map_PsolObj13P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj13P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X        1, 0, 39, 10

/**
 * Signal Map_PsolObj13P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X      1, 0, 39, 10, 0

/**
 * Get signal Map_PsolObj13P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj13P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[5] &= ~(0x03 << 6); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj13P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X(buf, 0)

/**
 * Signal Map_PsolObj13P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj13P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X      0

/**
 * Signal Map_PsolObj13P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X        0

/**
 * Signal Map_PsolObj13P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X        1022

/**
 * Signal Map_PsolObj13P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj13P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y Signal Map_PsolObj13P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj13P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y        1, 0, 45, 10

/**
 * Signal Map_PsolObj13P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y      1, 0, 45, 10, 0

/**
 * Get signal Map_PsolObj13P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj13P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y(buf, val) { \
	buf[5] &= ~(0x3f << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[6] &= ~(0x0f << 4); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj13P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y(buf, 0)

/**
 * Signal Map_PsolObj13P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj13P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y      0

/**
 * Signal Map_PsolObj13P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y        0

/**
 * Signal Map_PsolObj13P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y        1022

/**
 * Signal Map_PsolObj13P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj13P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X Signal Map_PsolObj13P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj13P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X        1, 0, 51, 10

/**
 * Signal Map_PsolObj13P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X      1, 0, 51, 10, 0

/**
 * Get signal Map_PsolObj13P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj13P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X(buf, val) { \
	buf[6] &= ~(0x0f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[7] &= ~(0x3f << 2); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj13P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X(buf, 0)

/**
 * Signal Map_PsolObj13P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj13P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X      0

/**
 * Signal Map_PsolObj13P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X        0

/**
 * Signal Map_PsolObj13P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X        1022

/**
 * Signal Map_PsolObj13P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj13P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y Signal Map_PsolObj13P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj13P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y        1, 0, 57, 10

/**
 * Signal Map_PsolObj13P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y      1, 0, 57, 10, 0

/**
 * Get signal Map_PsolObj13P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[8] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj13P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y(buf, val) { \
	buf[7] &= ~(0x03 << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[8] &= ~(0xff << 0); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj13P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y(buf, 0)

/**
 * Signal Map_PsolObj13P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj13P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y      0

/**
 * Signal Map_PsolObj13P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y        0

/**
 * Signal Map_PsolObj13P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y        1022

/**
 * Signal Map_PsolObj13P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj13P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus Signal Map_PsolObj13HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj13HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus        1, 0, 79, 2

/**
 * Signal Map_PsolObj13HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus      1, 0, 79, 2, 0

/**
 * Get signal Map_PsolObj13HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[9] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj13HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus(buf, val) { \
	buf[9] &= ~(0x03 << 6); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj13HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj13HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj13HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus      0

/**
 * Signal Map_PsolObj13HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus        0

/**
 * Signal Map_PsolObj13HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus        3

/**
 * Signal Map_PsolObj13HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj13HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X Signal Map_PsolObj14P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj14P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X        1, 0, 77, 10

/**
 * Signal Map_PsolObj14P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X      1, 0, 77, 10, 0

/**
 * Get signal Map_PsolObj14P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[10] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj14P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X(buf, val) { \
	buf[9] &= ~(0x3f << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[10] &= ~(0x0f << 4); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj14P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X(buf, 0)

/**
 * Signal Map_PsolObj14P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj14P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X      0

/**
 * Signal Map_PsolObj14P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X        0

/**
 * Signal Map_PsolObj14P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X        1022

/**
 * Signal Map_PsolObj14P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj14P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y Signal Map_PsolObj14P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj14P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y        1, 0, 83, 10

/**
 * Signal Map_PsolObj14P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y      1, 0, 83, 10, 0

/**
 * Get signal Map_PsolObj14P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj14P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y(buf, val) { \
	buf[10] &= ~(0x0f << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[11] &= ~(0x3f << 2); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj14P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y(buf, 0)

/**
 * Signal Map_PsolObj14P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj14P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y      0

/**
 * Signal Map_PsolObj14P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y        0

/**
 * Signal Map_PsolObj14P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y        1022

/**
 * Signal Map_PsolObj14P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj14P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X Signal Map_PsolObj14P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj14P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X        1, 0, 89, 10

/**
 * Signal Map_PsolObj14P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X      1, 0, 89, 10, 0

/**
 * Get signal Map_PsolObj14P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[11] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[12] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj14P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X(buf, val) { \
	buf[11] &= ~(0x03 << 0); \
	buf[11] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[12] &= ~(0xff << 0); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj14P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X(buf, 0)

/**
 * Signal Map_PsolObj14P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj14P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X      0

/**
 * Signal Map_PsolObj14P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X        0

/**
 * Signal Map_PsolObj14P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X        1022

/**
 * Signal Map_PsolObj14P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj14P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y Signal Map_PsolObj14P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj14P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y        1, 0, 111, 10

/**
 * Signal Map_PsolObj14P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y      1, 0, 111, 10, 0

/**
 * Get signal Map_PsolObj14P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj14P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y(buf, val) { \
	buf[13] &= ~(0xff << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[14] &= ~(0x03 << 6); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj14P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y(buf, 0)

/**
 * Signal Map_PsolObj14P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj14P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y      0

/**
 * Signal Map_PsolObj14P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y        0

/**
 * Signal Map_PsolObj14P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y        1022

/**
 * Signal Map_PsolObj14P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj14P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus Signal Map_PsolObj14HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj14HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus        1, 0, 117, 2

/**
 * Signal Map_PsolObj14HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus      1, 0, 117, 2, 0

/**
 * Get signal Map_PsolObj14HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[14] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj14HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus(buf, val) { \
	buf[14] &= ~(0x03 << 4); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj14HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj14HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj14HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus      0

/**
 * Signal Map_PsolObj14HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus        0

/**
 * Signal Map_PsolObj14HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus        3

/**
 * Signal Map_PsolObj14HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj14HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X Signal Map_PsolObj15P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj15P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X        1, 0, 115, 10

/**
 * Signal Map_PsolObj15P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X      1, 0, 115, 10, 0

/**
 * Get signal Map_PsolObj15P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[14] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj15P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X(buf, val) { \
	buf[14] &= ~(0x0f << 0); \
	buf[14] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[15] &= ~(0x3f << 2); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj15P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X(buf, 0)

/**
 * Signal Map_PsolObj15P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj15P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X      0

/**
 * Signal Map_PsolObj15P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X        0

/**
 * Signal Map_PsolObj15P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X        1022

/**
 * Signal Map_PsolObj15P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj15P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y Signal Map_PsolObj15P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj15P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y        1, 0, 121, 10

/**
 * Signal Map_PsolObj15P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y      1, 0, 121, 10, 0

/**
 * Get signal Map_PsolObj15P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[15] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[16] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj15P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y(buf, val) { \
	buf[15] &= ~(0x03 << 0); \
	buf[15] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[16] &= ~(0xff << 0); \
	buf[16] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj15P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y(buf, 0)

/**
 * Signal Map_PsolObj15P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj15P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y      0

/**
 * Signal Map_PsolObj15P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y        0

/**
 * Signal Map_PsolObj15P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y        1022

/**
 * Signal Map_PsolObj15P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj15P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X Signal Map_PsolObj15P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj15P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X        1, 0, 143, 10

/**
 * Signal Map_PsolObj15P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X      1, 0, 143, 10, 0

/**
 * Get signal Map_PsolObj15P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[17] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[18] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj15P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X(buf, val) { \
	buf[17] &= ~(0xff << 0); \
	buf[17] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[18] &= ~(0x03 << 6); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj15P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X(buf, 0)

/**
 * Signal Map_PsolObj15P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj15P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X      0

/**
 * Signal Map_PsolObj15P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X        0

/**
 * Signal Map_PsolObj15P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X        1022

/**
 * Signal Map_PsolObj15P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj15P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y Signal Map_PsolObj15P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj15P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y        1, 0, 149, 10

/**
 * Signal Map_PsolObj15P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y      1, 0, 149, 10, 0

/**
 * Get signal Map_PsolObj15P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[18] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[19] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj15P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y(buf, val) { \
	buf[18] &= ~(0x3f << 0); \
	buf[18] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[19] &= ~(0x0f << 4); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj15P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y(buf, 0)

/**
 * Signal Map_PsolObj15P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj15P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y      0

/**
 * Signal Map_PsolObj15P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y        0

/**
 * Signal Map_PsolObj15P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y        1022

/**
 * Signal Map_PsolObj15P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj15P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus Signal Map_PsolObj15HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj15HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus        1, 0, 155, 2

/**
 * Signal Map_PsolObj15HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus      1, 0, 155, 2, 0

/**
 * Get signal Map_PsolObj15HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[19] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj15HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus(buf, val) { \
	buf[19] &= ~(0x03 << 2); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj15HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj15HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj15HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus      0

/**
 * Signal Map_PsolObj15HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus        0

/**
 * Signal Map_PsolObj15HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus        3

/**
 * Signal Map_PsolObj15HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj15HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X Signal Map_PsolObj16P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj16P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X        1, 0, 153, 10

/**
 * Signal Map_PsolObj16P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X      1, 0, 153, 10, 0

/**
 * Get signal Map_PsolObj16P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[19] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj16P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X(buf, val) { \
	buf[19] &= ~(0x03 << 0); \
	buf[19] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[20] &= ~(0xff << 0); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj16P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X(buf, 0)

/**
 * Signal Map_PsolObj16P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj16P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X      0

/**
 * Signal Map_PsolObj16P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X        0

/**
 * Signal Map_PsolObj16P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X        1022

/**
 * Signal Map_PsolObj16P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj16P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y Signal Map_PsolObj16P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj16P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y        1, 0, 175, 10

/**
 * Signal Map_PsolObj16P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y      1, 0, 175, 10, 0

/**
 * Get signal Map_PsolObj16P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[21] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[22] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj16P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y(buf, val) { \
	buf[21] &= ~(0xff << 0); \
	buf[21] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[22] &= ~(0x03 << 6); \
	buf[22] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj16P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y(buf, 0)

/**
 * Signal Map_PsolObj16P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj16P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y      0

/**
 * Signal Map_PsolObj16P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y        0

/**
 * Signal Map_PsolObj16P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y        1022

/**
 * Signal Map_PsolObj16P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj16P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X Signal Map_PsolObj16P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj16P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X        1, 0, 181, 10

/**
 * Signal Map_PsolObj16P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X      1, 0, 181, 10, 0

/**
 * Get signal Map_PsolObj16P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj16P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X(buf, val) { \
	buf[22] &= ~(0x3f << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[23] &= ~(0x0f << 4); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj16P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X(buf, 0)

/**
 * Signal Map_PsolObj16P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj16P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X      0

/**
 * Signal Map_PsolObj16P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X        0

/**
 * Signal Map_PsolObj16P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X        1022

/**
 * Signal Map_PsolObj16P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj16P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y Signal Map_PsolObj16P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj16P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y        1, 0, 187, 10

/**
 * Signal Map_PsolObj16P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y      1, 0, 187, 10, 0

/**
 * Get signal Map_PsolObj16P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[23] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[24] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj16P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y(buf, val) { \
	buf[23] &= ~(0x0f << 0); \
	buf[23] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[24] &= ~(0x3f << 2); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj16P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y(buf, 0)

/**
 * Signal Map_PsolObj16P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj16P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y      0

/**
 * Signal Map_PsolObj16P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y        0

/**
 * Signal Map_PsolObj16P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y        1022

/**
 * Signal Map_PsolObj16P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj16P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus Signal Map_PsolObj16HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj16HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus        1, 0, 193, 2

/**
 * Signal Map_PsolObj16HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus      1, 0, 193, 2, 0

/**
 * Get signal Map_PsolObj16HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[24] >> 0) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj16HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus(buf, val) { \
	buf[24] &= ~(0x03 << 0); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal Map_PsolObj16HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj16HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj16HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus      0

/**
 * Signal Map_PsolObj16HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus        0

/**
 * Signal Map_PsolObj16HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus        3

/**
 * Signal Map_PsolObj16HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj16HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X Signal Map_PsolObj17P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj17P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X        1, 0, 207, 10

/**
 * Signal Map_PsolObj17P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X      1, 0, 207, 10, 0

/**
 * Get signal Map_PsolObj17P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[26] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj17P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X(buf, val) { \
	buf[25] &= ~(0xff << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[26] &= ~(0x03 << 6); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj17P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X(buf, 0)

/**
 * Signal Map_PsolObj17P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj17P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X      0

/**
 * Signal Map_PsolObj17P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X        0

/**
 * Signal Map_PsolObj17P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X        1022

/**
 * Signal Map_PsolObj17P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj17P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y Signal Map_PsolObj17P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj17P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y        1, 0, 213, 10

/**
 * Signal Map_PsolObj17P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y      1, 0, 213, 10, 0

/**
 * Get signal Map_PsolObj17P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[26] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[27] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj17P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y(buf, val) { \
	buf[26] &= ~(0x3f << 0); \
	buf[26] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[27] &= ~(0x0f << 4); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj17P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y(buf, 0)

/**
 * Signal Map_PsolObj17P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj17P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y      0

/**
 * Signal Map_PsolObj17P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y        0

/**
 * Signal Map_PsolObj17P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y        1022

/**
 * Signal Map_PsolObj17P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj17P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X Signal Map_PsolObj17P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj17P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X        1, 0, 219, 10

/**
 * Signal Map_PsolObj17P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X      1, 0, 219, 10, 0

/**
 * Get signal Map_PsolObj17P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[27] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[28] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj17P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X(buf, val) { \
	buf[27] &= ~(0x0f << 0); \
	buf[27] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[28] &= ~(0x3f << 2); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj17P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X(buf, 0)

/**
 * Signal Map_PsolObj17P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj17P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X      0

/**
 * Signal Map_PsolObj17P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X        0

/**
 * Signal Map_PsolObj17P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X        1022

/**
 * Signal Map_PsolObj17P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj17P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y Signal Map_PsolObj17P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj17P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y        1, 0, 225, 10

/**
 * Signal Map_PsolObj17P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y      1, 0, 225, 10, 0

/**
 * Get signal Map_PsolObj17P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[28] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj17P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y(buf, val) { \
	buf[28] &= ~(0x03 << 0); \
	buf[28] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[29] &= ~(0xff << 0); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj17P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y(buf, 0)

/**
 * Signal Map_PsolObj17P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj17P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y      0

/**
 * Signal Map_PsolObj17P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y        0

/**
 * Signal Map_PsolObj17P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y        1022

/**
 * Signal Map_PsolObj17P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj17P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus Signal Map_PsolObj17HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj17HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus        1, 0, 247, 2

/**
 * Signal Map_PsolObj17HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus      1, 0, 247, 2, 0

/**
 * Get signal Map_PsolObj17HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[30] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj17HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus(buf, val) { \
	buf[30] &= ~(0x03 << 6); \
	buf[30] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj17HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj17HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj17HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus      0

/**
 * Signal Map_PsolObj17HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus        0

/**
 * Signal Map_PsolObj17HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus        3

/**
 * Signal Map_PsolObj17HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj17HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X Signal Map_PsolObj18P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj18P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X        1, 0, 245, 10

/**
 * Signal Map_PsolObj18P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X      1, 0, 245, 10, 0

/**
 * Get signal Map_PsolObj18P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj18P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X(buf, val) { \
	buf[30] &= ~(0x3f << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[31] &= ~(0x0f << 4); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj18P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X(buf, 0)

/**
 * Signal Map_PsolObj18P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj18P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X      0

/**
 * Signal Map_PsolObj18P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X        0

/**
 * Signal Map_PsolObj18P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X        1022

/**
 * Signal Map_PsolObj18P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj18P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y Signal Map_PsolObj18P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj18P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y        1, 0, 251, 10

/**
 * Signal Map_PsolObj18P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y      1, 0, 251, 10, 0

/**
 * Get signal Map_PsolObj18P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[31] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[32] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj18P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y(buf, val) { \
	buf[31] &= ~(0x0f << 0); \
	buf[31] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[32] &= ~(0x3f << 2); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj18P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y(buf, 0)

/**
 * Signal Map_PsolObj18P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj18P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y      0

/**
 * Signal Map_PsolObj18P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y        0

/**
 * Signal Map_PsolObj18P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y        1022

/**
 * Signal Map_PsolObj18P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj18P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X Signal Map_PsolObj18P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj18P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X        1, 0, 257, 10

/**
 * Signal Map_PsolObj18P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X      1, 0, 257, 10, 0

/**
 * Get signal Map_PsolObj18P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[32] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[33] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj18P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X(buf, val) { \
	buf[32] &= ~(0x03 << 0); \
	buf[32] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[33] &= ~(0xff << 0); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj18P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X(buf, 0)

/**
 * Signal Map_PsolObj18P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj18P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X      0

/**
 * Signal Map_PsolObj18P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X        0

/**
 * Signal Map_PsolObj18P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X        1022

/**
 * Signal Map_PsolObj18P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj18P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y Signal Map_PsolObj18P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj18P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y        1, 0, 279, 10

/**
 * Signal Map_PsolObj18P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y      1, 0, 279, 10, 0

/**
 * Get signal Map_PsolObj18P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[34] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[35] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj18P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y(buf, val) { \
	buf[34] &= ~(0xff << 0); \
	buf[34] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[35] &= ~(0x03 << 6); \
	buf[35] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj18P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y(buf, 0)

/**
 * Signal Map_PsolObj18P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj18P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y      0

/**
 * Signal Map_PsolObj18P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y        0

/**
 * Signal Map_PsolObj18P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y        1022

/**
 * Signal Map_PsolObj18P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj18P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus Signal Map_PsolObj18HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj18HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus        1, 0, 285, 2

/**
 * Signal Map_PsolObj18HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus      1, 0, 285, 2, 0

/**
 * Get signal Map_PsolObj18HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[35] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj18HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus(buf, val) { \
	buf[35] &= ~(0x03 << 4); \
	buf[35] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj18HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj18HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj18HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus      0

/**
 * Signal Map_PsolObj18HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus        0

/**
 * Signal Map_PsolObj18HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus        3

/**
 * Signal Map_PsolObj18HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj18HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X Signal Map_PsolObj19P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj19P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X        1, 0, 283, 10

/**
 * Signal Map_PsolObj19P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X      1, 0, 283, 10, 0

/**
 * Get signal Map_PsolObj19P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[35] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[36] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj19P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X(buf, val) { \
	buf[35] &= ~(0x0f << 0); \
	buf[35] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[36] &= ~(0x3f << 2); \
	buf[36] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj19P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X(buf, 0)

/**
 * Signal Map_PsolObj19P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj19P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X      0

/**
 * Signal Map_PsolObj19P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X        0

/**
 * Signal Map_PsolObj19P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X        1022

/**
 * Signal Map_PsolObj19P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj19P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y Signal Map_PsolObj19P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj19P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y        1, 0, 289, 10

/**
 * Signal Map_PsolObj19P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y      1, 0, 289, 10, 0

/**
 * Get signal Map_PsolObj19P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[36] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[37] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj19P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y(buf, val) { \
	buf[36] &= ~(0x03 << 0); \
	buf[36] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[37] &= ~(0xff << 0); \
	buf[37] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj19P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y(buf, 0)

/**
 * Signal Map_PsolObj19P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj19P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y      0

/**
 * Signal Map_PsolObj19P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y        0

/**
 * Signal Map_PsolObj19P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y        1022

/**
 * Signal Map_PsolObj19P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj19P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X Signal Map_PsolObj19P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj19P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X        1, 0, 311, 10

/**
 * Signal Map_PsolObj19P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X      1, 0, 311, 10, 0

/**
 * Get signal Map_PsolObj19P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[38] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[39] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj19P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X(buf, val) { \
	buf[38] &= ~(0xff << 0); \
	buf[38] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[39] &= ~(0x03 << 6); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj19P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X(buf, 0)

/**
 * Signal Map_PsolObj19P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj19P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X      0

/**
 * Signal Map_PsolObj19P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X        0

/**
 * Signal Map_PsolObj19P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X        1022

/**
 * Signal Map_PsolObj19P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj19P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y Signal Map_PsolObj19P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj19P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y        1, 0, 317, 10

/**
 * Signal Map_PsolObj19P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y      1, 0, 317, 10, 0

/**
 * Get signal Map_PsolObj19P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[39] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[40] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj19P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y(buf, val) { \
	buf[39] &= ~(0x3f << 0); \
	buf[39] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[40] &= ~(0x0f << 4); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj19P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y(buf, 0)

/**
 * Signal Map_PsolObj19P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj19P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y      0

/**
 * Signal Map_PsolObj19P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y        0

/**
 * Signal Map_PsolObj19P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y        1022

/**
 * Signal Map_PsolObj19P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj19P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus Signal Map_PsolObj19HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj19HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus        1, 0, 323, 2

/**
 * Signal Map_PsolObj19HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus      1, 0, 323, 2, 0

/**
 * Get signal Map_PsolObj19HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[40] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj19HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus(buf, val) { \
	buf[40] &= ~(0x03 << 2); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj19HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj19HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj19HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus      0

/**
 * Signal Map_PsolObj19HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus        0

/**
 * Signal Map_PsolObj19HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus        3

/**
 * Signal Map_PsolObj19HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj19HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X Signal Map_PsolObj20P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj20P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X        1, 0, 321, 10

/**
 * Signal Map_PsolObj20P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X      1, 0, 321, 10, 0

/**
 * Get signal Map_PsolObj20P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[40] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[41] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj20P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X(buf, val) { \
	buf[40] &= ~(0x03 << 0); \
	buf[40] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[41] &= ~(0xff << 0); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj20P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X(buf, 0)

/**
 * Signal Map_PsolObj20P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj20P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X      0

/**
 * Signal Map_PsolObj20P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X        0

/**
 * Signal Map_PsolObj20P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X        1022

/**
 * Signal Map_PsolObj20P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj20P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y Signal Map_PsolObj20P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj20P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y        1, 0, 343, 10

/**
 * Signal Map_PsolObj20P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y      1, 0, 343, 10, 0

/**
 * Get signal Map_PsolObj20P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[42] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[43] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj20P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y(buf, val) { \
	buf[42] &= ~(0xff << 0); \
	buf[42] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[43] &= ~(0x03 << 6); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj20P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y(buf, 0)

/**
 * Signal Map_PsolObj20P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj20P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y      0

/**
 * Signal Map_PsolObj20P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y        0

/**
 * Signal Map_PsolObj20P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y        1022

/**
 * Signal Map_PsolObj20P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj20P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X Signal Map_PsolObj20P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj20P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X        1, 0, 349, 10

/**
 * Signal Map_PsolObj20P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X      1, 0, 349, 10, 0

/**
 * Get signal Map_PsolObj20P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[43] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[44] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj20P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X(buf, val) { \
	buf[43] &= ~(0x3f << 0); \
	buf[43] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[44] &= ~(0x0f << 4); \
	buf[44] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj20P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X(buf, 0)

/**
 * Signal Map_PsolObj20P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj20P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X      0

/**
 * Signal Map_PsolObj20P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X        0

/**
 * Signal Map_PsolObj20P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X        1022

/**
 * Signal Map_PsolObj20P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj20P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y Signal Map_PsolObj20P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj20P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y        1, 0, 355, 10

/**
 * Signal Map_PsolObj20P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y      1, 0, 355, 10, 0

/**
 * Get signal Map_PsolObj20P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[44] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[45] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj20P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y(buf, val) { \
	buf[44] &= ~(0x0f << 0); \
	buf[44] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[45] &= ~(0x3f << 2); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj20P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y(buf, 0)

/**
 * Signal Map_PsolObj20P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj20P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y      0

/**
 * Signal Map_PsolObj20P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y        0

/**
 * Signal Map_PsolObj20P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y        1022

/**
 * Signal Map_PsolObj20P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj20P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus Signal Map_PsolObj20HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj20HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus        1, 0, 361, 2

/**
 * Signal Map_PsolObj20HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus      1, 0, 361, 2, 0

/**
 * Get signal Map_PsolObj20HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[45] >> 0) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj20HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus(buf, val) { \
	buf[45] &= ~(0x03 << 0); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal Map_PsolObj20HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj20HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj20HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus      0

/**
 * Signal Map_PsolObj20HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus        0

/**
 * Signal Map_PsolObj20HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus        3

/**
 * Signal Map_PsolObj20HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj20HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X Signal Map_PsolObj21P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj21P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X        1, 0, 375, 10

/**
 * Signal Map_PsolObj21P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X      1, 0, 375, 10, 0

/**
 * Get signal Map_PsolObj21P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[46] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[47] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj21P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X(buf, val) { \
	buf[46] &= ~(0xff << 0); \
	buf[46] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[47] &= ~(0x03 << 6); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj21P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X(buf, 0)

/**
 * Signal Map_PsolObj21P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj21P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X      0

/**
 * Signal Map_PsolObj21P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X        0

/**
 * Signal Map_PsolObj21P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X        1022

/**
 * Signal Map_PsolObj21P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj21P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y Signal Map_PsolObj21P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj21P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y        1, 0, 381, 10

/**
 * Signal Map_PsolObj21P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y      1, 0, 381, 10, 0

/**
 * Get signal Map_PsolObj21P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[47] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[48] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj21P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y(buf, val) { \
	buf[47] &= ~(0x3f << 0); \
	buf[47] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[48] &= ~(0x0f << 4); \
	buf[48] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj21P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y(buf, 0)

/**
 * Signal Map_PsolObj21P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj21P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y      0

/**
 * Signal Map_PsolObj21P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y        0

/**
 * Signal Map_PsolObj21P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y        1022

/**
 * Signal Map_PsolObj21P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj21P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X Signal Map_PsolObj21P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj21P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X        1, 0, 387, 10

/**
 * Signal Map_PsolObj21P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X      1, 0, 387, 10, 0

/**
 * Get signal Map_PsolObj21P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[48] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[49] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj21P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X(buf, val) { \
	buf[48] &= ~(0x0f << 0); \
	buf[48] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[49] &= ~(0x3f << 2); \
	buf[49] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj21P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X(buf, 0)

/**
 * Signal Map_PsolObj21P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj21P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X      0

/**
 * Signal Map_PsolObj21P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X        0

/**
 * Signal Map_PsolObj21P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X        1022

/**
 * Signal Map_PsolObj21P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj21P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y Signal Map_PsolObj21P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj21P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y        1, 0, 393, 10

/**
 * Signal Map_PsolObj21P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y      1, 0, 393, 10, 0

/**
 * Get signal Map_PsolObj21P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[49] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[50] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj21P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y(buf, val) { \
	buf[49] &= ~(0x03 << 0); \
	buf[49] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[50] &= ~(0xff << 0); \
	buf[50] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj21P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y(buf, 0)

/**
 * Signal Map_PsolObj21P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj21P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y      0

/**
 * Signal Map_PsolObj21P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y        0

/**
 * Signal Map_PsolObj21P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y        1022

/**
 * Signal Map_PsolObj21P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj21P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus Signal Map_PsolObj21HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj21HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus        1, 0, 415, 2

/**
 * Signal Map_PsolObj21HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus      1, 0, 415, 2, 0

/**
 * Get signal Map_PsolObj21HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[51] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj21HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus(buf, val) { \
	buf[51] &= ~(0x03 << 6); \
	buf[51] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj21HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj21HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj21HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus      0

/**
 * Signal Map_PsolObj21HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus        0

/**
 * Signal Map_PsolObj21HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus        3

/**
 * Signal Map_PsolObj21HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj21HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X Signal Map_PsolObj22P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj22P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X        1, 0, 413, 10

/**
 * Signal Map_PsolObj22P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X      1, 0, 413, 10, 0

/**
 * Get signal Map_PsolObj22P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[51] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[52] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj22P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X(buf, val) { \
	buf[51] &= ~(0x3f << 0); \
	buf[51] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[52] &= ~(0x0f << 4); \
	buf[52] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj22P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X(buf, 0)

/**
 * Signal Map_PsolObj22P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj22P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X      0

/**
 * Signal Map_PsolObj22P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X        0

/**
 * Signal Map_PsolObj22P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X        1022

/**
 * Signal Map_PsolObj22P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj22P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y Signal Map_PsolObj22P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj22P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y        1, 0, 419, 10

/**
 * Signal Map_PsolObj22P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y      1, 0, 419, 10, 0

/**
 * Get signal Map_PsolObj22P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[52] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[53] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj22P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y(buf, val) { \
	buf[52] &= ~(0x0f << 0); \
	buf[52] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[53] &= ~(0x3f << 2); \
	buf[53] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj22P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y(buf, 0)

/**
 * Signal Map_PsolObj22P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj22P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y      0

/**
 * Signal Map_PsolObj22P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y        0

/**
 * Signal Map_PsolObj22P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y        1022

/**
 * Signal Map_PsolObj22P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj22P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X Signal Map_PsolObj22P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj22P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X        1, 0, 425, 10

/**
 * Signal Map_PsolObj22P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X      1, 0, 425, 10, 0

/**
 * Get signal Map_PsolObj22P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[53] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[54] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj22P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X(buf, val) { \
	buf[53] &= ~(0x03 << 0); \
	buf[53] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[54] &= ~(0xff << 0); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj22P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X(buf, 0)

/**
 * Signal Map_PsolObj22P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj22P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X      0

/**
 * Signal Map_PsolObj22P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X        0

/**
 * Signal Map_PsolObj22P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X        1022

/**
 * Signal Map_PsolObj22P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj22P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y Signal Map_PsolObj22P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj22P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y        1, 0, 447, 10

/**
 * Signal Map_PsolObj22P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y      1, 0, 447, 10, 0

/**
 * Get signal Map_PsolObj22P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[55] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[56] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj22P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y(buf, val) { \
	buf[55] &= ~(0xff << 0); \
	buf[55] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[56] &= ~(0x03 << 6); \
	buf[56] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj22P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y(buf, 0)

/**
 * Signal Map_PsolObj22P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj22P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y      0

/**
 * Signal Map_PsolObj22P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y        0

/**
 * Signal Map_PsolObj22P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y        1022

/**
 * Signal Map_PsolObj22P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj22P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus Signal Map_PsolObj22HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj22HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus        1, 0, 453, 2

/**
 * Signal Map_PsolObj22HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus      1, 0, 453, 2, 0

/**
 * Get signal Map_PsolObj22HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[56] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj22HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus(buf, val) { \
	buf[56] &= ~(0x03 << 4); \
	buf[56] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj22HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj22HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj22HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus      0

/**
 * Signal Map_PsolObj22HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus        0

/**
 * Signal Map_PsolObj22HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus        3

/**
 * Signal Map_PsolObj22HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj22HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X Signal Map_PsolObj23P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj23P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X        1, 0, 451, 10

/**
 * Signal Map_PsolObj23P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X      1, 0, 451, 10, 0

/**
 * Get signal Map_PsolObj23P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[56] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[57] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj23P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X(buf, val) { \
	buf[56] &= ~(0x0f << 0); \
	buf[56] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[57] &= ~(0x3f << 2); \
	buf[57] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj23P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X(buf, 0)

/**
 * Signal Map_PsolObj23P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj23P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X      0

/**
 * Signal Map_PsolObj23P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X        0

/**
 * Signal Map_PsolObj23P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X        1022

/**
 * Signal Map_PsolObj23P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj23P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y Signal Map_PsolObj23P1Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj23P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y        1, 0, 457, 10

/**
 * Signal Map_PsolObj23P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y      1, 0, 457, 10, 0

/**
 * Get signal Map_PsolObj23P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[57] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[58] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj23P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y(buf, val) { \
	buf[57] &= ~(0x03 << 0); \
	buf[57] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[58] &= ~(0xff << 0); \
	buf[58] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj23P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y(buf, 0)

/**
 * Signal Map_PsolObj23P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj23P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y      0

/**
 * Signal Map_PsolObj23P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y        0

/**
 * Signal Map_PsolObj23P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y        1022

/**
 * Signal Map_PsolObj23P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj23P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X Signal Map_PsolObj23P2X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj23P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X        1, 0, 479, 10

/**
 * Signal Map_PsolObj23P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X      1, 0, 479, 10, 0

/**
 * Get signal Map_PsolObj23P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[59] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[60] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj23P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X(buf, val) { \
	buf[59] &= ~(0xff << 0); \
	buf[59] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[60] &= ~(0x03 << 6); \
	buf[60] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj23P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X(buf, 0)

/**
 * Signal Map_PsolObj23P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj23P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X      0

/**
 * Signal Map_PsolObj23P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X        0

/**
 * Signal Map_PsolObj23P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X        1022

/**
 * Signal Map_PsolObj23P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj23P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y Signal Map_PsolObj23P2Y of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj23P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y        1, 0, 485, 10

/**
 * Signal Map_PsolObj23P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y      1, 0, 485, 10, 0

/**
 * Get signal Map_PsolObj23P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[60] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[61] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj23P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y(buf, val) { \
	buf[60] &= ~(0x3f << 0); \
	buf[60] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[61] &= ~(0x0f << 4); \
	buf[61] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj23P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y(buf, 0)

/**
 * Signal Map_PsolObj23P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj23P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y      0

/**
 * Signal Map_PsolObj23P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y        0

/**
 * Signal Map_PsolObj23P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y        1022

/**
 * Signal Map_PsolObj23P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj23P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus Signal Map_PsolObj23HeightStatus of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj23HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus        1, 0, 491, 2

/**
 * Signal Map_PsolObj23HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus      1, 0, 491, 2, 0

/**
 * Get signal Map_PsolObj23HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[61] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj23HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus(buf, val) { \
	buf[61] &= ~(0x03 << 2); \
	buf[61] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj23HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj23HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj23HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus      0

/**
 * Signal Map_PsolObj23HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus        0

/**
 * Signal Map_PsolObj23HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus        3

/**
 * Signal Map_PsolObj23HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj23HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X Signal Map_PsolObj24P1X of Message PAS_Map_PsolObj_Info2 (0x19d)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info2
 * @{
 */

/**
 * Signal Map_PsolObj24P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X and \ref GET_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X        1, 0, 489, 10

/**
 * Signal Map_PsolObj24P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X or \ref INIT_PAS_Map_PsolObj_Info2 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X      1, 0, 489, 10, 0

/**
 * Get signal Map_PsolObj24P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[61] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[62] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj24P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X(buf, val) { \
	buf[61] &= ~(0x03 << 0); \
	buf[61] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[62] &= ~(0xff << 0); \
	buf[62] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj24P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X(buf) \
	SET_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X(buf, 0)

/**
 * Signal Map_PsolObj24P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj24P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X      0

/**
 * Signal Map_PsolObj24P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X        0

/**
 * Signal Map_PsolObj24P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X        1022

/**
 * Signal Map_PsolObj24P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info2_Map_PsolObj24P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum Signal PAS_Map_PsolObj_Info3_Checksum of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal PAS_Map_PsolObj_Info3_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum and \ref GET_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum        1, 0, 7, 8

/**
 * Signal PAS_Map_PsolObj_Info3_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_Map_PsolObj_Info3_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_Map_PsolObj_Info3_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_Map_PsolObj_Info3_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum(buf) \
	SET_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum(buf, 0)

/**
 * Signal PAS_Map_PsolObj_Info3_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Map_PsolObj_Info3_Checksum raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum      0

/**
 * Signal PAS_Map_PsolObj_Info3_Checksum raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum        0

/**
 * Signal PAS_Map_PsolObj_Info3_Checksum raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum        255

/**
 * Signal PAS_Map_PsolObj_Info3_Checksum raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter Signal PAS_Map_PsolObj_Info3_MsgCounter of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal PAS_Map_PsolObj_Info3_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter and \ref GET_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_Map_PsolObj_Info3_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_Map_PsolObj_Info3_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_Map_PsolObj_Info3_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_Map_PsolObj_Info3_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter(buf) \
	SET_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter(buf, 0)

/**
 * Signal PAS_Map_PsolObj_Info3_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Map_PsolObj_Info3_MsgCounter raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter      0

/**
 * Signal PAS_Map_PsolObj_Info3_MsgCounter raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter        0

/**
 * Signal PAS_Map_PsolObj_Info3_MsgCounter raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter        15

/**
 * Signal PAS_Map_PsolObj_Info3_MsgCounter raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_PAS_Map_PsolObj_Info3_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y Signal Map_PsolObj24P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj24P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y        1, 0, 23, 10

/**
 * Signal Map_PsolObj24P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y      1, 0, 23, 10, 0

/**
 * Get signal Map_PsolObj24P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj24P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj24P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y(buf, 0)

/**
 * Signal Map_PsolObj24P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj24P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y      0

/**
 * Signal Map_PsolObj24P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y        0

/**
 * Signal Map_PsolObj24P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y        1022

/**
 * Signal Map_PsolObj24P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj24P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X Signal Map_PsolObj24P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj24P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X        1, 0, 29, 10

/**
 * Signal Map_PsolObj24P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X      1, 0, 29, 10, 0

/**
 * Get signal Map_PsolObj24P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj24P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X(buf, val) { \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj24P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X(buf, 0)

/**
 * Signal Map_PsolObj24P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj24P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X      0

/**
 * Signal Map_PsolObj24P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X        0

/**
 * Signal Map_PsolObj24P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X        1022

/**
 * Signal Map_PsolObj24P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj24P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y Signal Map_PsolObj24P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj24P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y        1, 0, 35, 10

/**
 * Signal Map_PsolObj24P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y      1, 0, 35, 10, 0

/**
 * Get signal Map_PsolObj24P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj24P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj24P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y(buf, 0)

/**
 * Signal Map_PsolObj24P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj24P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y      0

/**
 * Signal Map_PsolObj24P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y        0

/**
 * Signal Map_PsolObj24P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y        1022

/**
 * Signal Map_PsolObj24P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj24P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus Signal Map_PsolObj24HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj24HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus        1, 0, 41, 2

/**
 * Signal Map_PsolObj24HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus      1, 0, 41, 2, 0

/**
 * Get signal Map_PsolObj24HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj24HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal Map_PsolObj24HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj24HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj24HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus      0

/**
 * Signal Map_PsolObj24HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus        0

/**
 * Signal Map_PsolObj24HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus        3

/**
 * Signal Map_PsolObj24HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj24HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X Signal Map_PsolObj25P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj25P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X        1, 0, 55, 10

/**
 * Signal Map_PsolObj25P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X      1, 0, 55, 10, 0

/**
 * Get signal Map_PsolObj25P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj25P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[7] &= ~(0x03 << 6); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj25P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X(buf, 0)

/**
 * Signal Map_PsolObj25P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj25P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X      0

/**
 * Signal Map_PsolObj25P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X        0

/**
 * Signal Map_PsolObj25P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X        1022

/**
 * Signal Map_PsolObj25P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj25P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y Signal Map_PsolObj25P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj25P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y        1, 0, 61, 10

/**
 * Signal Map_PsolObj25P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y      1, 0, 61, 10, 0

/**
 * Get signal Map_PsolObj25P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[8] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj25P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y(buf, val) { \
	buf[7] &= ~(0x3f << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[8] &= ~(0x0f << 4); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj25P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y(buf, 0)

/**
 * Signal Map_PsolObj25P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj25P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y      0

/**
 * Signal Map_PsolObj25P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y        0

/**
 * Signal Map_PsolObj25P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y        1022

/**
 * Signal Map_PsolObj25P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj25P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X Signal Map_PsolObj25P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj25P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X        1, 0, 67, 10

/**
 * Signal Map_PsolObj25P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X      1, 0, 67, 10, 0

/**
 * Get signal Map_PsolObj25P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj25P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X(buf, val) { \
	buf[8] &= ~(0x0f << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[9] &= ~(0x3f << 2); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj25P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X(buf, 0)

/**
 * Signal Map_PsolObj25P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj25P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X      0

/**
 * Signal Map_PsolObj25P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X        0

/**
 * Signal Map_PsolObj25P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X        1022

/**
 * Signal Map_PsolObj25P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj25P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y Signal Map_PsolObj25P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj25P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y        1, 0, 73, 10

/**
 * Signal Map_PsolObj25P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y      1, 0, 73, 10, 0

/**
 * Get signal Map_PsolObj25P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[10] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj25P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y(buf, val) { \
	buf[9] &= ~(0x03 << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[10] &= ~(0xff << 0); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj25P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y(buf, 0)

/**
 * Signal Map_PsolObj25P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj25P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y      0

/**
 * Signal Map_PsolObj25P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y        0

/**
 * Signal Map_PsolObj25P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y        1022

/**
 * Signal Map_PsolObj25P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj25P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus Signal Map_PsolObj25HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj25HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus        1, 0, 95, 2

/**
 * Signal Map_PsolObj25HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus      1, 0, 95, 2, 0

/**
 * Get signal Map_PsolObj25HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[11] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj25HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus(buf, val) { \
	buf[11] &= ~(0x03 << 6); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj25HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj25HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj25HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus      0

/**
 * Signal Map_PsolObj25HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus        0

/**
 * Signal Map_PsolObj25HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus        3

/**
 * Signal Map_PsolObj25HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj25HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X Signal Map_PsolObj26P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj26P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X        1, 0, 93, 10

/**
 * Signal Map_PsolObj26P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X      1, 0, 93, 10, 0

/**
 * Get signal Map_PsolObj26P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[11] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[12] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj26P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X(buf, val) { \
	buf[11] &= ~(0x3f << 0); \
	buf[11] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[12] &= ~(0x0f << 4); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj26P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X(buf, 0)

/**
 * Signal Map_PsolObj26P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj26P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X      0

/**
 * Signal Map_PsolObj26P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X        0

/**
 * Signal Map_PsolObj26P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X        1022

/**
 * Signal Map_PsolObj26P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj26P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y Signal Map_PsolObj26P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj26P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y        1, 0, 99, 10

/**
 * Signal Map_PsolObj26P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y      1, 0, 99, 10, 0

/**
 * Get signal Map_PsolObj26P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj26P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y(buf, val) { \
	buf[12] &= ~(0x0f << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[13] &= ~(0x3f << 2); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj26P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y(buf, 0)

/**
 * Signal Map_PsolObj26P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj26P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y      0

/**
 * Signal Map_PsolObj26P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y        0

/**
 * Signal Map_PsolObj26P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y        1022

/**
 * Signal Map_PsolObj26P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj26P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X Signal Map_PsolObj26P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj26P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X        1, 0, 105, 10

/**
 * Signal Map_PsolObj26P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X      1, 0, 105, 10, 0

/**
 * Get signal Map_PsolObj26P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj26P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X(buf, val) { \
	buf[13] &= ~(0x03 << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[14] &= ~(0xff << 0); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj26P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X(buf, 0)

/**
 * Signal Map_PsolObj26P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj26P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X      0

/**
 * Signal Map_PsolObj26P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X        0

/**
 * Signal Map_PsolObj26P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X        1022

/**
 * Signal Map_PsolObj26P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj26P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y Signal Map_PsolObj26P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj26P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y        1, 0, 127, 10

/**
 * Signal Map_PsolObj26P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y      1, 0, 127, 10, 0

/**
 * Get signal Map_PsolObj26P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[15] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[16] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj26P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y(buf, val) { \
	buf[15] &= ~(0xff << 0); \
	buf[15] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[16] &= ~(0x03 << 6); \
	buf[16] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj26P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y(buf, 0)

/**
 * Signal Map_PsolObj26P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj26P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y      0

/**
 * Signal Map_PsolObj26P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y        0

/**
 * Signal Map_PsolObj26P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y        1022

/**
 * Signal Map_PsolObj26P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj26P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus Signal Map_PsolObj26HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj26HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus        1, 0, 133, 2

/**
 * Signal Map_PsolObj26HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus      1, 0, 133, 2, 0

/**
 * Get signal Map_PsolObj26HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[16] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj26HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus(buf, val) { \
	buf[16] &= ~(0x03 << 4); \
	buf[16] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj26HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj26HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj26HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus      0

/**
 * Signal Map_PsolObj26HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus        0

/**
 * Signal Map_PsolObj26HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus        3

/**
 * Signal Map_PsolObj26HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj26HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X Signal Map_PsolObj27P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj27P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X        1, 0, 131, 10

/**
 * Signal Map_PsolObj27P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X      1, 0, 131, 10, 0

/**
 * Get signal Map_PsolObj27P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[16] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[17] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj27P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X(buf, val) { \
	buf[16] &= ~(0x0f << 0); \
	buf[16] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[17] &= ~(0x3f << 2); \
	buf[17] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj27P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X(buf, 0)

/**
 * Signal Map_PsolObj27P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj27P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X      0

/**
 * Signal Map_PsolObj27P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X        0

/**
 * Signal Map_PsolObj27P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X        1022

/**
 * Signal Map_PsolObj27P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj27P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y Signal Map_PsolObj27P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj27P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y        1, 0, 137, 10

/**
 * Signal Map_PsolObj27P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y      1, 0, 137, 10, 0

/**
 * Get signal Map_PsolObj27P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[17] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[18] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj27P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y(buf, val) { \
	buf[17] &= ~(0x03 << 0); \
	buf[17] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[18] &= ~(0xff << 0); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj27P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y(buf, 0)

/**
 * Signal Map_PsolObj27P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj27P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y      0

/**
 * Signal Map_PsolObj27P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y        0

/**
 * Signal Map_PsolObj27P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y        1022

/**
 * Signal Map_PsolObj27P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj27P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X Signal Map_PsolObj27P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj27P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X        1, 0, 159, 10

/**
 * Signal Map_PsolObj27P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X      1, 0, 159, 10, 0

/**
 * Get signal Map_PsolObj27P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[19] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj27P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X(buf, val) { \
	buf[19] &= ~(0xff << 0); \
	buf[19] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[20] &= ~(0x03 << 6); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj27P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X(buf, 0)

/**
 * Signal Map_PsolObj27P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj27P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X      0

/**
 * Signal Map_PsolObj27P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X        0

/**
 * Signal Map_PsolObj27P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X        1022

/**
 * Signal Map_PsolObj27P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj27P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y Signal Map_PsolObj27P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj27P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y        1, 0, 165, 10

/**
 * Signal Map_PsolObj27P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y      1, 0, 165, 10, 0

/**
 * Get signal Map_PsolObj27P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[20] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[21] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj27P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y(buf, val) { \
	buf[20] &= ~(0x3f << 0); \
	buf[20] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[21] &= ~(0x0f << 4); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj27P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y(buf, 0)

/**
 * Signal Map_PsolObj27P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj27P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y      0

/**
 * Signal Map_PsolObj27P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y        0

/**
 * Signal Map_PsolObj27P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y        1022

/**
 * Signal Map_PsolObj27P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj27P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus Signal Map_PsolObj27HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj27HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus        1, 0, 171, 2

/**
 * Signal Map_PsolObj27HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus      1, 0, 171, 2, 0

/**
 * Get signal Map_PsolObj27HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[21] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj27HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus(buf, val) { \
	buf[21] &= ~(0x03 << 2); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj27HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj27HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj27HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus      0

/**
 * Signal Map_PsolObj27HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus        0

/**
 * Signal Map_PsolObj27HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus        3

/**
 * Signal Map_PsolObj27HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj27HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X Signal Map_PsolObj28P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj28P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X        1, 0, 169, 10

/**
 * Signal Map_PsolObj28P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X      1, 0, 169, 10, 0

/**
 * Get signal Map_PsolObj28P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[21] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[22] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj28P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X(buf, val) { \
	buf[21] &= ~(0x03 << 0); \
	buf[21] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj28P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X(buf, 0)

/**
 * Signal Map_PsolObj28P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj28P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X      0

/**
 * Signal Map_PsolObj28P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X        0

/**
 * Signal Map_PsolObj28P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X        1022

/**
 * Signal Map_PsolObj28P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj28P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y Signal Map_PsolObj28P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj28P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y        1, 0, 191, 10

/**
 * Signal Map_PsolObj28P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y      1, 0, 191, 10, 0

/**
 * Get signal Map_PsolObj28P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[23] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[24] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj28P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y(buf, val) { \
	buf[23] &= ~(0xff << 0); \
	buf[23] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[24] &= ~(0x03 << 6); \
	buf[24] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj28P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y(buf, 0)

/**
 * Signal Map_PsolObj28P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj28P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y      0

/**
 * Signal Map_PsolObj28P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y        0

/**
 * Signal Map_PsolObj28P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y        1022

/**
 * Signal Map_PsolObj28P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj28P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X Signal Map_PsolObj28P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj28P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X        1, 0, 197, 10

/**
 * Signal Map_PsolObj28P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X      1, 0, 197, 10, 0

/**
 * Get signal Map_PsolObj28P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[24] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[25] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj28P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X(buf, val) { \
	buf[24] &= ~(0x3f << 0); \
	buf[24] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[25] &= ~(0x0f << 4); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj28P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X(buf, 0)

/**
 * Signal Map_PsolObj28P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj28P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X      0

/**
 * Signal Map_PsolObj28P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X        0

/**
 * Signal Map_PsolObj28P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X        1022

/**
 * Signal Map_PsolObj28P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj28P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y Signal Map_PsolObj28P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj28P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y        1, 0, 203, 10

/**
 * Signal Map_PsolObj28P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y      1, 0, 203, 10, 0

/**
 * Get signal Map_PsolObj28P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[26] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj28P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y(buf, val) { \
	buf[25] &= ~(0x0f << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[26] &= ~(0x3f << 2); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj28P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y(buf, 0)

/**
 * Signal Map_PsolObj28P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj28P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y      0

/**
 * Signal Map_PsolObj28P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y        0

/**
 * Signal Map_PsolObj28P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y        1022

/**
 * Signal Map_PsolObj28P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj28P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus Signal Map_PsolObj28HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj28HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus        1, 0, 209, 2

/**
 * Signal Map_PsolObj28HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus      1, 0, 209, 2, 0

/**
 * Get signal Map_PsolObj28HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[26] >> 0) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj28HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus(buf, val) { \
	buf[26] &= ~(0x03 << 0); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal Map_PsolObj28HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj28HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj28HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus      0

/**
 * Signal Map_PsolObj28HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus        0

/**
 * Signal Map_PsolObj28HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus        3

/**
 * Signal Map_PsolObj28HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj28HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X Signal Map_PsolObj29P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj29P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X        1, 0, 223, 10

/**
 * Signal Map_PsolObj29P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X      1, 0, 223, 10, 0

/**
 * Get signal Map_PsolObj29P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[27] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[28] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj29P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X(buf, val) { \
	buf[27] &= ~(0xff << 0); \
	buf[27] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[28] &= ~(0x03 << 6); \
	buf[28] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj29P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X(buf, 0)

/**
 * Signal Map_PsolObj29P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj29P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X      0

/**
 * Signal Map_PsolObj29P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X        0

/**
 * Signal Map_PsolObj29P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X        1022

/**
 * Signal Map_PsolObj29P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj29P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y Signal Map_PsolObj29P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj29P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y        1, 0, 229, 10

/**
 * Signal Map_PsolObj29P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y      1, 0, 229, 10, 0

/**
 * Get signal Map_PsolObj29P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[28] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj29P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y(buf, val) { \
	buf[28] &= ~(0x3f << 0); \
	buf[28] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[29] &= ~(0x0f << 4); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj29P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y(buf, 0)

/**
 * Signal Map_PsolObj29P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj29P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y      0

/**
 * Signal Map_PsolObj29P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y        0

/**
 * Signal Map_PsolObj29P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y        1022

/**
 * Signal Map_PsolObj29P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj29P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X Signal Map_PsolObj29P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj29P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X        1, 0, 235, 10

/**
 * Signal Map_PsolObj29P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X      1, 0, 235, 10, 0

/**
 * Get signal Map_PsolObj29P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[29] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[30] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj29P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X(buf, val) { \
	buf[29] &= ~(0x0f << 0); \
	buf[29] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[30] &= ~(0x3f << 2); \
	buf[30] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj29P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X(buf, 0)

/**
 * Signal Map_PsolObj29P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj29P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X      0

/**
 * Signal Map_PsolObj29P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X        0

/**
 * Signal Map_PsolObj29P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X        1022

/**
 * Signal Map_PsolObj29P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj29P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y Signal Map_PsolObj29P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj29P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y        1, 0, 241, 10

/**
 * Signal Map_PsolObj29P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y      1, 0, 241, 10, 0

/**
 * Get signal Map_PsolObj29P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj29P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y(buf, val) { \
	buf[30] &= ~(0x03 << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[31] &= ~(0xff << 0); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj29P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y(buf, 0)

/**
 * Signal Map_PsolObj29P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj29P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y      0

/**
 * Signal Map_PsolObj29P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y        0

/**
 * Signal Map_PsolObj29P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y        1022

/**
 * Signal Map_PsolObj29P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj29P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus Signal Map_PsolObj29HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj29HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus        1, 0, 263, 2

/**
 * Signal Map_PsolObj29HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus      1, 0, 263, 2, 0

/**
 * Get signal Map_PsolObj29HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[32] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj29HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus(buf, val) { \
	buf[32] &= ~(0x03 << 6); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj29HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj29HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj29HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus      0

/**
 * Signal Map_PsolObj29HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus        0

/**
 * Signal Map_PsolObj29HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus        3

/**
 * Signal Map_PsolObj29HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj29HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X Signal Map_PsolObj30P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj30P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X        1, 0, 261, 10

/**
 * Signal Map_PsolObj30P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X      1, 0, 261, 10, 0

/**
 * Get signal Map_PsolObj30P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[32] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[33] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj30P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X(buf, val) { \
	buf[32] &= ~(0x3f << 0); \
	buf[32] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[33] &= ~(0x0f << 4); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj30P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X(buf, 0)

/**
 * Signal Map_PsolObj30P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj30P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X      0

/**
 * Signal Map_PsolObj30P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X        0

/**
 * Signal Map_PsolObj30P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X        1022

/**
 * Signal Map_PsolObj30P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj30P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y Signal Map_PsolObj30P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj30P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y        1, 0, 267, 10

/**
 * Signal Map_PsolObj30P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y      1, 0, 267, 10, 0

/**
 * Get signal Map_PsolObj30P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[33] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[34] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj30P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y(buf, val) { \
	buf[33] &= ~(0x0f << 0); \
	buf[33] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[34] &= ~(0x3f << 2); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj30P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y(buf, 0)

/**
 * Signal Map_PsolObj30P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj30P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y      0

/**
 * Signal Map_PsolObj30P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y        0

/**
 * Signal Map_PsolObj30P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y        1022

/**
 * Signal Map_PsolObj30P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj30P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X Signal Map_PsolObj30P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj30P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X        1, 0, 273, 10

/**
 * Signal Map_PsolObj30P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X      1, 0, 273, 10, 0

/**
 * Get signal Map_PsolObj30P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[34] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[35] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj30P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X(buf, val) { \
	buf[34] &= ~(0x03 << 0); \
	buf[34] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[35] &= ~(0xff << 0); \
	buf[35] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj30P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X(buf, 0)

/**
 * Signal Map_PsolObj30P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj30P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X      0

/**
 * Signal Map_PsolObj30P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X        0

/**
 * Signal Map_PsolObj30P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X        1022

/**
 * Signal Map_PsolObj30P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj30P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y Signal Map_PsolObj30P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj30P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y        1, 0, 295, 10

/**
 * Signal Map_PsolObj30P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y      1, 0, 295, 10, 0

/**
 * Get signal Map_PsolObj30P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[36] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[37] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj30P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y(buf, val) { \
	buf[36] &= ~(0xff << 0); \
	buf[36] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[37] &= ~(0x03 << 6); \
	buf[37] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj30P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y(buf, 0)

/**
 * Signal Map_PsolObj30P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj30P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y      0

/**
 * Signal Map_PsolObj30P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y        0

/**
 * Signal Map_PsolObj30P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y        1022

/**
 * Signal Map_PsolObj30P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj30P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus Signal Map_PsolObj30HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj30HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus        1, 0, 301, 2

/**
 * Signal Map_PsolObj30HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus      1, 0, 301, 2, 0

/**
 * Get signal Map_PsolObj30HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[37] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj30HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus(buf, val) { \
	buf[37] &= ~(0x03 << 4); \
	buf[37] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj30HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj30HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj30HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus      0

/**
 * Signal Map_PsolObj30HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus        0

/**
 * Signal Map_PsolObj30HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus        3

/**
 * Signal Map_PsolObj30HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj30HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X Signal Map_PsolObj31P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj31P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X        1, 0, 299, 10

/**
 * Signal Map_PsolObj31P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X      1, 0, 299, 10, 0

/**
 * Get signal Map_PsolObj31P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[37] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[38] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj31P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X(buf, val) { \
	buf[37] &= ~(0x0f << 0); \
	buf[37] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[38] &= ~(0x3f << 2); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj31P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X(buf, 0)

/**
 * Signal Map_PsolObj31P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj31P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X      0

/**
 * Signal Map_PsolObj31P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X        0

/**
 * Signal Map_PsolObj31P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X        1022

/**
 * Signal Map_PsolObj31P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj31P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y Signal Map_PsolObj31P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj31P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y        1, 0, 305, 10

/**
 * Signal Map_PsolObj31P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y      1, 0, 305, 10, 0

/**
 * Get signal Map_PsolObj31P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[38] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[39] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj31P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y(buf, val) { \
	buf[38] &= ~(0x03 << 0); \
	buf[38] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[39] &= ~(0xff << 0); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj31P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y(buf, 0)

/**
 * Signal Map_PsolObj31P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj31P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y      0

/**
 * Signal Map_PsolObj31P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y        0

/**
 * Signal Map_PsolObj31P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y        1022

/**
 * Signal Map_PsolObj31P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj31P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X Signal Map_PsolObj31P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj31P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X        1, 0, 327, 10

/**
 * Signal Map_PsolObj31P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X      1, 0, 327, 10, 0

/**
 * Get signal Map_PsolObj31P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[40] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[41] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj31P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X(buf, val) { \
	buf[40] &= ~(0xff << 0); \
	buf[40] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[41] &= ~(0x03 << 6); \
	buf[41] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj31P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X(buf, 0)

/**
 * Signal Map_PsolObj31P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj31P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X      0

/**
 * Signal Map_PsolObj31P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X        0

/**
 * Signal Map_PsolObj31P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X        1022

/**
 * Signal Map_PsolObj31P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj31P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y Signal Map_PsolObj31P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj31P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y        1, 0, 333, 10

/**
 * Signal Map_PsolObj31P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y      1, 0, 333, 10, 0

/**
 * Get signal Map_PsolObj31P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[41] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[42] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj31P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y(buf, val) { \
	buf[41] &= ~(0x3f << 0); \
	buf[41] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[42] &= ~(0x0f << 4); \
	buf[42] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj31P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y(buf, 0)

/**
 * Signal Map_PsolObj31P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj31P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y      0

/**
 * Signal Map_PsolObj31P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y        0

/**
 * Signal Map_PsolObj31P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y        1022

/**
 * Signal Map_PsolObj31P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj31P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus Signal Map_PsolObj31HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj31HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus        1, 0, 339, 2

/**
 * Signal Map_PsolObj31HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus      1, 0, 339, 2, 0

/**
 * Get signal Map_PsolObj31HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[42] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj31HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus(buf, val) { \
	buf[42] &= ~(0x03 << 2); \
	buf[42] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj31HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj31HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj31HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus      0

/**
 * Signal Map_PsolObj31HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus        0

/**
 * Signal Map_PsolObj31HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus        3

/**
 * Signal Map_PsolObj31HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj31HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X Signal Map_PsolObj32P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj32P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X        1, 0, 337, 10

/**
 * Signal Map_PsolObj32P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X      1, 0, 337, 10, 0

/**
 * Get signal Map_PsolObj32P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[42] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[43] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj32P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X(buf, val) { \
	buf[42] &= ~(0x03 << 0); \
	buf[42] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[43] &= ~(0xff << 0); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj32P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X(buf, 0)

/**
 * Signal Map_PsolObj32P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj32P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X      0

/**
 * Signal Map_PsolObj32P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X        0

/**
 * Signal Map_PsolObj32P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X        1022

/**
 * Signal Map_PsolObj32P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj32P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y Signal Map_PsolObj32P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj32P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y        1, 0, 359, 10

/**
 * Signal Map_PsolObj32P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y      1, 0, 359, 10, 0

/**
 * Get signal Map_PsolObj32P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[44] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[45] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj32P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y(buf, val) { \
	buf[44] &= ~(0xff << 0); \
	buf[44] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[45] &= ~(0x03 << 6); \
	buf[45] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj32P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y(buf, 0)

/**
 * Signal Map_PsolObj32P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj32P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y      0

/**
 * Signal Map_PsolObj32P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y        0

/**
 * Signal Map_PsolObj32P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y        1022

/**
 * Signal Map_PsolObj32P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj32P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X Signal Map_PsolObj32P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj32P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X        1, 0, 365, 10

/**
 * Signal Map_PsolObj32P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X      1, 0, 365, 10, 0

/**
 * Get signal Map_PsolObj32P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[45] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[46] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj32P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X(buf, val) { \
	buf[45] &= ~(0x3f << 0); \
	buf[45] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[46] &= ~(0x0f << 4); \
	buf[46] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj32P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X(buf, 0)

/**
 * Signal Map_PsolObj32P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj32P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X      0

/**
 * Signal Map_PsolObj32P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X        0

/**
 * Signal Map_PsolObj32P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X        1022

/**
 * Signal Map_PsolObj32P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj32P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y Signal Map_PsolObj32P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj32P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y        1, 0, 371, 10

/**
 * Signal Map_PsolObj32P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y      1, 0, 371, 10, 0

/**
 * Get signal Map_PsolObj32P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[46] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[47] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj32P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y(buf, val) { \
	buf[46] &= ~(0x0f << 0); \
	buf[46] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[47] &= ~(0x3f << 2); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj32P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y(buf, 0)

/**
 * Signal Map_PsolObj32P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj32P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y      0

/**
 * Signal Map_PsolObj32P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y        0

/**
 * Signal Map_PsolObj32P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y        1022

/**
 * Signal Map_PsolObj32P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj32P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus Signal Map_PsolObj32HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj32HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus        1, 0, 377, 2

/**
 * Signal Map_PsolObj32HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus      1, 0, 377, 2, 0

/**
 * Get signal Map_PsolObj32HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[47] >> 0) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj32HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus(buf, val) { \
	buf[47] &= ~(0x03 << 0); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal Map_PsolObj32HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj32HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj32HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus      0

/**
 * Signal Map_PsolObj32HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus        0

/**
 * Signal Map_PsolObj32HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus        3

/**
 * Signal Map_PsolObj32HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj32HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X Signal Map_PsolObj33P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj33P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X        1, 0, 391, 10

/**
 * Signal Map_PsolObj33P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X      1, 0, 391, 10, 0

/**
 * Get signal Map_PsolObj33P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[48] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[49] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj33P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X(buf, val) { \
	buf[48] &= ~(0xff << 0); \
	buf[48] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[49] &= ~(0x03 << 6); \
	buf[49] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj33P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X(buf, 0)

/**
 * Signal Map_PsolObj33P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj33P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X      0

/**
 * Signal Map_PsolObj33P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X        0

/**
 * Signal Map_PsolObj33P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X        1022

/**
 * Signal Map_PsolObj33P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj33P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y Signal Map_PsolObj33P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj33P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y        1, 0, 397, 10

/**
 * Signal Map_PsolObj33P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y      1, 0, 397, 10, 0

/**
 * Get signal Map_PsolObj33P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[49] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[50] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj33P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y(buf, val) { \
	buf[49] &= ~(0x3f << 0); \
	buf[49] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[50] &= ~(0x0f << 4); \
	buf[50] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj33P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y(buf, 0)

/**
 * Signal Map_PsolObj33P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj33P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y      0

/**
 * Signal Map_PsolObj33P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y        0

/**
 * Signal Map_PsolObj33P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y        1022

/**
 * Signal Map_PsolObj33P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj33P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X Signal Map_PsolObj33P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj33P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X        1, 0, 403, 10

/**
 * Signal Map_PsolObj33P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X      1, 0, 403, 10, 0

/**
 * Get signal Map_PsolObj33P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[50] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[51] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj33P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X(buf, val) { \
	buf[50] &= ~(0x0f << 0); \
	buf[50] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[51] &= ~(0x3f << 2); \
	buf[51] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj33P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X(buf, 0)

/**
 * Signal Map_PsolObj33P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj33P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X      0

/**
 * Signal Map_PsolObj33P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X        0

/**
 * Signal Map_PsolObj33P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X        1022

/**
 * Signal Map_PsolObj33P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj33P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y Signal Map_PsolObj33P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj33P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y        1, 0, 409, 10

/**
 * Signal Map_PsolObj33P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y      1, 0, 409, 10, 0

/**
 * Get signal Map_PsolObj33P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[51] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[52] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj33P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y(buf, val) { \
	buf[51] &= ~(0x03 << 0); \
	buf[51] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[52] &= ~(0xff << 0); \
	buf[52] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj33P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y(buf, 0)

/**
 * Signal Map_PsolObj33P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj33P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y      0

/**
 * Signal Map_PsolObj33P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y        0

/**
 * Signal Map_PsolObj33P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y        1022

/**
 * Signal Map_PsolObj33P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj33P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus Signal Map_PsolObj33HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj33HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus        1, 0, 431, 2

/**
 * Signal Map_PsolObj33HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus      1, 0, 431, 2, 0

/**
 * Get signal Map_PsolObj33HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[53] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj33HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus(buf, val) { \
	buf[53] &= ~(0x03 << 6); \
	buf[53] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj33HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj33HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj33HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus      0

/**
 * Signal Map_PsolObj33HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus        0

/**
 * Signal Map_PsolObj33HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus        3

/**
 * Signal Map_PsolObj33HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj33HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X Signal Map_PsolObj34P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj34P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X        1, 0, 429, 10

/**
 * Signal Map_PsolObj34P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X      1, 0, 429, 10, 0

/**
 * Get signal Map_PsolObj34P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[53] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[54] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj34P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X(buf, val) { \
	buf[53] &= ~(0x3f << 0); \
	buf[53] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[54] &= ~(0x0f << 4); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj34P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X(buf, 0)

/**
 * Signal Map_PsolObj34P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj34P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X      0

/**
 * Signal Map_PsolObj34P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X        0

/**
 * Signal Map_PsolObj34P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X        1022

/**
 * Signal Map_PsolObj34P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj34P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y Signal Map_PsolObj34P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj34P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y        1, 0, 435, 10

/**
 * Signal Map_PsolObj34P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y      1, 0, 435, 10, 0

/**
 * Get signal Map_PsolObj34P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[54] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[55] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj34P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y(buf, val) { \
	buf[54] &= ~(0x0f << 0); \
	buf[54] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[55] &= ~(0x3f << 2); \
	buf[55] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj34P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y(buf, 0)

/**
 * Signal Map_PsolObj34P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj34P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y      0

/**
 * Signal Map_PsolObj34P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y        0

/**
 * Signal Map_PsolObj34P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y        1022

/**
 * Signal Map_PsolObj34P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj34P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X Signal Map_PsolObj34P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj34P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X        1, 0, 441, 10

/**
 * Signal Map_PsolObj34P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X      1, 0, 441, 10, 0

/**
 * Get signal Map_PsolObj34P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[55] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[56] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj34P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X(buf, val) { \
	buf[55] &= ~(0x03 << 0); \
	buf[55] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[56] &= ~(0xff << 0); \
	buf[56] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj34P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X(buf, 0)

/**
 * Signal Map_PsolObj34P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj34P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X      0

/**
 * Signal Map_PsolObj34P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X        0

/**
 * Signal Map_PsolObj34P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X        1022

/**
 * Signal Map_PsolObj34P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj34P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y Signal Map_PsolObj34P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj34P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y        1, 0, 463, 10

/**
 * Signal Map_PsolObj34P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y      1, 0, 463, 10, 0

/**
 * Get signal Map_PsolObj34P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[57] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[58] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj34P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y(buf, val) { \
	buf[57] &= ~(0xff << 0); \
	buf[57] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[58] &= ~(0x03 << 6); \
	buf[58] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj34P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y(buf, 0)

/**
 * Signal Map_PsolObj34P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj34P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y      0

/**
 * Signal Map_PsolObj34P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y        0

/**
 * Signal Map_PsolObj34P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y        1022

/**
 * Signal Map_PsolObj34P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj34P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus Signal Map_PsolObj34HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj34HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus        1, 0, 469, 2

/**
 * Signal Map_PsolObj34HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus      1, 0, 469, 2, 0

/**
 * Get signal Map_PsolObj34HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[58] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj34HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus(buf, val) { \
	buf[58] &= ~(0x03 << 4); \
	buf[58] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj34HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj34HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj34HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus      0

/**
 * Signal Map_PsolObj34HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus        0

/**
 * Signal Map_PsolObj34HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus        3

/**
 * Signal Map_PsolObj34HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj34HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X Signal Map_PsolObj35P1X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj35P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X        1, 0, 467, 10

/**
 * Signal Map_PsolObj35P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X      1, 0, 467, 10, 0

/**
 * Get signal Map_PsolObj35P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[58] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[59] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj35P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X(buf, val) { \
	buf[58] &= ~(0x0f << 0); \
	buf[58] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[59] &= ~(0x3f << 2); \
	buf[59] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj35P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X(buf, 0)

/**
 * Signal Map_PsolObj35P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj35P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X      0

/**
 * Signal Map_PsolObj35P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X        0

/**
 * Signal Map_PsolObj35P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X        1022

/**
 * Signal Map_PsolObj35P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj35P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y Signal Map_PsolObj35P1Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj35P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y        1, 0, 473, 10

/**
 * Signal Map_PsolObj35P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y      1, 0, 473, 10, 0

/**
 * Get signal Map_PsolObj35P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[59] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[60] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj35P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y(buf, val) { \
	buf[59] &= ~(0x03 << 0); \
	buf[59] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[60] &= ~(0xff << 0); \
	buf[60] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj35P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y(buf, 0)

/**
 * Signal Map_PsolObj35P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj35P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y      0

/**
 * Signal Map_PsolObj35P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y        0

/**
 * Signal Map_PsolObj35P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y        1022

/**
 * Signal Map_PsolObj35P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj35P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X Signal Map_PsolObj35P2X of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj35P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X        1, 0, 495, 10

/**
 * Signal Map_PsolObj35P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X      1, 0, 495, 10, 0

/**
 * Get signal Map_PsolObj35P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[61] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[62] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj35P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X(buf, val) { \
	buf[61] &= ~(0xff << 0); \
	buf[61] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[62] &= ~(0x03 << 6); \
	buf[62] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj35P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X(buf, 0)

/**
 * Signal Map_PsolObj35P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj35P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X      0

/**
 * Signal Map_PsolObj35P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X        0

/**
 * Signal Map_PsolObj35P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X        1022

/**
 * Signal Map_PsolObj35P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj35P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y Signal Map_PsolObj35P2Y of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj35P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y        1, 0, 501, 10

/**
 * Signal Map_PsolObj35P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y      1, 0, 501, 10, 0

/**
 * Get signal Map_PsolObj35P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[62] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[63] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj35P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y(buf, val) { \
	buf[62] &= ~(0x3f << 0); \
	buf[62] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[63] &= ~(0x0f << 4); \
	buf[63] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj35P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y(buf, 0)

/**
 * Signal Map_PsolObj35P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj35P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y      0

/**
 * Signal Map_PsolObj35P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y        0

/**
 * Signal Map_PsolObj35P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y        1022

/**
 * Signal Map_PsolObj35P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj35P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus Signal Map_PsolObj35HeightStatus of Message PAS_Map_PsolObj_Info3 (0x19e)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info3
 * @{
 */

/**
 * Signal Map_PsolObj35HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus and \ref GET_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus        1, 0, 507, 2

/**
 * Signal Map_PsolObj35HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus or \ref INIT_PAS_Map_PsolObj_Info3 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus      1, 0, 507, 2, 0

/**
 * Get signal Map_PsolObj35HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[63] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj35HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus(buf, val) { \
	buf[63] &= ~(0x03 << 2); \
	buf[63] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj35HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj35HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj35HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus      0

/**
 * Signal Map_PsolObj35HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus        0

/**
 * Signal Map_PsolObj35HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus        3

/**
 * Signal Map_PsolObj35HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info3_Map_PsolObj35HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum Signal PAS_Map_PsolObj_Info4_Checksum of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal PAS_Map_PsolObj_Info4_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum and \ref GET_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum        1, 0, 7, 8

/**
 * Signal PAS_Map_PsolObj_Info4_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_Map_PsolObj_Info4_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_Map_PsolObj_Info4_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_Map_PsolObj_Info4_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum(buf) \
	SET_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum(buf, 0)

/**
 * Signal PAS_Map_PsolObj_Info4_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Map_PsolObj_Info4_Checksum raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum      0

/**
 * Signal PAS_Map_PsolObj_Info4_Checksum raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum        0

/**
 * Signal PAS_Map_PsolObj_Info4_Checksum raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum        255

/**
 * Signal PAS_Map_PsolObj_Info4_Checksum raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter Signal PAS_Map_PsolObj_Info4_MsgCounter of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal PAS_Map_PsolObj_Info4_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter and \ref GET_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_Map_PsolObj_Info4_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_Map_PsolObj_Info4_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_Map_PsolObj_Info4_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_Map_PsolObj_Info4_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter(buf) \
	SET_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter(buf, 0)

/**
 * Signal PAS_Map_PsolObj_Info4_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Map_PsolObj_Info4_MsgCounter raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter      0

/**
 * Signal PAS_Map_PsolObj_Info4_MsgCounter raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter        0

/**
 * Signal PAS_Map_PsolObj_Info4_MsgCounter raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter        15

/**
 * Signal PAS_Map_PsolObj_Info4_MsgCounter raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_PAS_Map_PsolObj_Info4_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X Signal Map_PsolObj36P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj36P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X        1, 0, 23, 10

/**
 * Signal Map_PsolObj36P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X      1, 0, 23, 10, 0

/**
 * Get signal Map_PsolObj36P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj36P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj36P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X(buf, 0)

/**
 * Signal Map_PsolObj36P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj36P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X      0

/**
 * Signal Map_PsolObj36P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X        0

/**
 * Signal Map_PsolObj36P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X        1022

/**
 * Signal Map_PsolObj36P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj36P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y Signal Map_PsolObj36P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj36P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y        1, 0, 29, 10

/**
 * Signal Map_PsolObj36P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y      1, 0, 29, 10, 0

/**
 * Get signal Map_PsolObj36P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj36P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y(buf, val) { \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj36P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y(buf, 0)

/**
 * Signal Map_PsolObj36P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj36P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y      0

/**
 * Signal Map_PsolObj36P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y        0

/**
 * Signal Map_PsolObj36P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y        1022

/**
 * Signal Map_PsolObj36P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj36P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X Signal Map_PsolObj36P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj36P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X        1, 0, 35, 10

/**
 * Signal Map_PsolObj36P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X      1, 0, 35, 10, 0

/**
 * Get signal Map_PsolObj36P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj36P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj36P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X(buf, 0)

/**
 * Signal Map_PsolObj36P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj36P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X      0

/**
 * Signal Map_PsolObj36P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X        0

/**
 * Signal Map_PsolObj36P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X        1022

/**
 * Signal Map_PsolObj36P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj36P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y Signal Map_PsolObj36P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj36P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y        1, 0, 41, 10

/**
 * Signal Map_PsolObj36P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y      1, 0, 41, 10, 0

/**
 * Get signal Map_PsolObj36P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj36P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj36P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y(buf, 0)

/**
 * Signal Map_PsolObj36P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj36P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y      0

/**
 * Signal Map_PsolObj36P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y        0

/**
 * Signal Map_PsolObj36P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y        1022

/**
 * Signal Map_PsolObj36P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj36P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus Signal Map_PsolObj36HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj36HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus        1, 0, 13, 2

/**
 * Signal Map_PsolObj36HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus      1, 0, 13, 2, 0

/**
 * Get signal Map_PsolObj36HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj36HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus(buf, val) { \
	buf[1] &= ~(0x03 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj36HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj36HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj36HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus      0

/**
 * Signal Map_PsolObj36HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus        0

/**
 * Signal Map_PsolObj36HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus        3

/**
 * Signal Map_PsolObj36HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj36HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X Signal Map_PsolObj37P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj37P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X        1, 0, 63, 10

/**
 * Signal Map_PsolObj37P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X      1, 0, 63, 10, 0

/**
 * Get signal Map_PsolObj37P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[8] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj37P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X(buf, val) { \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[8] &= ~(0x03 << 6); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj37P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X(buf, 0)

/**
 * Signal Map_PsolObj37P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj37P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X      0

/**
 * Signal Map_PsolObj37P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X        0

/**
 * Signal Map_PsolObj37P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X        1022

/**
 * Signal Map_PsolObj37P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj37P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y Signal Map_PsolObj37P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj37P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y        1, 0, 69, 10

/**
 * Signal Map_PsolObj37P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y      1, 0, 69, 10, 0

/**
 * Get signal Map_PsolObj37P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[9] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj37P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y(buf, val) { \
	buf[8] &= ~(0x3f << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[9] &= ~(0x0f << 4); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj37P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y(buf, 0)

/**
 * Signal Map_PsolObj37P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj37P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y      0

/**
 * Signal Map_PsolObj37P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y        0

/**
 * Signal Map_PsolObj37P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y        1022

/**
 * Signal Map_PsolObj37P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj37P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X Signal Map_PsolObj37P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj37P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X        1, 0, 75, 10

/**
 * Signal Map_PsolObj37P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X      1, 0, 75, 10, 0

/**
 * Get signal Map_PsolObj37P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[10] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj37P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X(buf, val) { \
	buf[9] &= ~(0x0f << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[10] &= ~(0x3f << 2); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj37P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X(buf, 0)

/**
 * Signal Map_PsolObj37P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj37P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X      0

/**
 * Signal Map_PsolObj37P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X        0

/**
 * Signal Map_PsolObj37P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X        1022

/**
 * Signal Map_PsolObj37P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj37P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y Signal Map_PsolObj37P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj37P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y        1, 0, 81, 10

/**
 * Signal Map_PsolObj37P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y      1, 0, 81, 10, 0

/**
 * Get signal Map_PsolObj37P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj37P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y(buf, val) { \
	buf[10] &= ~(0x03 << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[11] &= ~(0xff << 0); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj37P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y(buf, 0)

/**
 * Signal Map_PsolObj37P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj37P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y      0

/**
 * Signal Map_PsolObj37P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y        0

/**
 * Signal Map_PsolObj37P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y        1022

/**
 * Signal Map_PsolObj37P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj37P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus Signal Map_PsolObj37HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj37HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus        1, 0, 103, 2

/**
 * Signal Map_PsolObj37HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus      1, 0, 103, 2, 0

/**
 * Get signal Map_PsolObj37HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[12] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj37HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus(buf, val) { \
	buf[12] &= ~(0x03 << 6); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj37HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj37HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj37HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus      0

/**
 * Signal Map_PsolObj37HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus        0

/**
 * Signal Map_PsolObj37HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus        3

/**
 * Signal Map_PsolObj37HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj37HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X Signal Map_PsolObj38P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj38P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X        1, 0, 101, 10

/**
 * Signal Map_PsolObj38P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X      1, 0, 101, 10, 0

/**
 * Get signal Map_PsolObj38P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[13] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj38P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X(buf, val) { \
	buf[12] &= ~(0x3f << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[13] &= ~(0x0f << 4); \
	buf[13] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj38P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X(buf, 0)

/**
 * Signal Map_PsolObj38P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj38P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X      0

/**
 * Signal Map_PsolObj38P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X        0

/**
 * Signal Map_PsolObj38P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X        1022

/**
 * Signal Map_PsolObj38P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj38P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y Signal Map_PsolObj38P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj38P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y        1, 0, 107, 10

/**
 * Signal Map_PsolObj38P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y      1, 0, 107, 10, 0

/**
 * Get signal Map_PsolObj38P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj38P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y(buf, val) { \
	buf[13] &= ~(0x0f << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[14] &= ~(0x3f << 2); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj38P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y(buf, 0)

/**
 * Signal Map_PsolObj38P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj38P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y      0

/**
 * Signal Map_PsolObj38P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y        0

/**
 * Signal Map_PsolObj38P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y        1022

/**
 * Signal Map_PsolObj38P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj38P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X Signal Map_PsolObj38P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj38P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X        1, 0, 113, 10

/**
 * Signal Map_PsolObj38P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X      1, 0, 113, 10, 0

/**
 * Get signal Map_PsolObj38P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[14] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj38P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X(buf, val) { \
	buf[14] &= ~(0x03 << 0); \
	buf[14] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[15] &= ~(0xff << 0); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj38P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X(buf, 0)

/**
 * Signal Map_PsolObj38P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj38P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X      0

/**
 * Signal Map_PsolObj38P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X        0

/**
 * Signal Map_PsolObj38P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X        1022

/**
 * Signal Map_PsolObj38P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj38P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y Signal Map_PsolObj38P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj38P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y        1, 0, 135, 10

/**
 * Signal Map_PsolObj38P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y      1, 0, 135, 10, 0

/**
 * Get signal Map_PsolObj38P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[16] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[17] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj38P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y(buf, val) { \
	buf[16] &= ~(0xff << 0); \
	buf[16] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[17] &= ~(0x03 << 6); \
	buf[17] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj38P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y(buf, 0)

/**
 * Signal Map_PsolObj38P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj38P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y      0

/**
 * Signal Map_PsolObj38P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y        0

/**
 * Signal Map_PsolObj38P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y        1022

/**
 * Signal Map_PsolObj38P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj38P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus Signal Map_PsolObj38HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj38HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus        1, 0, 141, 2

/**
 * Signal Map_PsolObj38HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus      1, 0, 141, 2, 0

/**
 * Get signal Map_PsolObj38HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[17] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj38HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus(buf, val) { \
	buf[17] &= ~(0x03 << 4); \
	buf[17] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj38HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj38HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj38HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus      0

/**
 * Signal Map_PsolObj38HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus        0

/**
 * Signal Map_PsolObj38HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus        3

/**
 * Signal Map_PsolObj38HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj38HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X Signal Map_PsolObj39P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj39P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X        1, 0, 139, 10

/**
 * Signal Map_PsolObj39P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X      1, 0, 139, 10, 0

/**
 * Get signal Map_PsolObj39P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[17] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[18] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj39P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X(buf, val) { \
	buf[17] &= ~(0x0f << 0); \
	buf[17] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[18] &= ~(0x3f << 2); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj39P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X(buf, 0)

/**
 * Signal Map_PsolObj39P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj39P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X      0

/**
 * Signal Map_PsolObj39P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X        0

/**
 * Signal Map_PsolObj39P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X        1022

/**
 * Signal Map_PsolObj39P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj39P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y Signal Map_PsolObj39P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj39P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y        1, 0, 145, 10

/**
 * Signal Map_PsolObj39P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y      1, 0, 145, 10, 0

/**
 * Get signal Map_PsolObj39P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[18] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[19] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj39P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y(buf, val) { \
	buf[18] &= ~(0x03 << 0); \
	buf[18] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[19] &= ~(0xff << 0); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj39P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y(buf, 0)

/**
 * Signal Map_PsolObj39P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj39P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y      0

/**
 * Signal Map_PsolObj39P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y        0

/**
 * Signal Map_PsolObj39P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y        1022

/**
 * Signal Map_PsolObj39P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj39P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X Signal Map_PsolObj39P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj39P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X        1, 0, 167, 10

/**
 * Signal Map_PsolObj39P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X      1, 0, 167, 10, 0

/**
 * Get signal Map_PsolObj39P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[20] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[21] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj39P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X(buf, val) { \
	buf[20] &= ~(0xff << 0); \
	buf[20] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[21] &= ~(0x03 << 6); \
	buf[21] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj39P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X(buf, 0)

/**
 * Signal Map_PsolObj39P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj39P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X      0

/**
 * Signal Map_PsolObj39P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X        0

/**
 * Signal Map_PsolObj39P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X        1022

/**
 * Signal Map_PsolObj39P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj39P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y Signal Map_PsolObj39P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj39P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y        1, 0, 173, 10

/**
 * Signal Map_PsolObj39P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y      1, 0, 173, 10, 0

/**
 * Get signal Map_PsolObj39P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[21] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[22] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj39P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y(buf, val) { \
	buf[21] &= ~(0x3f << 0); \
	buf[21] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[22] &= ~(0x0f << 4); \
	buf[22] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj39P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y(buf, 0)

/**
 * Signal Map_PsolObj39P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj39P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y      0

/**
 * Signal Map_PsolObj39P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y        0

/**
 * Signal Map_PsolObj39P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y        1022

/**
 * Signal Map_PsolObj39P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj39P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus Signal Map_PsolObj39HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj39HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus        1, 0, 179, 2

/**
 * Signal Map_PsolObj39HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus      1, 0, 179, 2, 0

/**
 * Get signal Map_PsolObj39HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[22] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj39HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus(buf, val) { \
	buf[22] &= ~(0x03 << 2); \
	buf[22] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj39HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj39HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj39HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus      0

/**
 * Signal Map_PsolObj39HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus        0

/**
 * Signal Map_PsolObj39HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus        3

/**
 * Signal Map_PsolObj39HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj39HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X Signal Map_PsolObj40P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj40P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X        1, 0, 177, 10

/**
 * Signal Map_PsolObj40P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X      1, 0, 177, 10, 0

/**
 * Get signal Map_PsolObj40P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj40P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X(buf, val) { \
	buf[22] &= ~(0x03 << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[23] &= ~(0xff << 0); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj40P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X(buf, 0)

/**
 * Signal Map_PsolObj40P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj40P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X      0

/**
 * Signal Map_PsolObj40P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X        0

/**
 * Signal Map_PsolObj40P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X        1022

/**
 * Signal Map_PsolObj40P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj40P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y Signal Map_PsolObj40P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj40P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y        1, 0, 199, 10

/**
 * Signal Map_PsolObj40P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y      1, 0, 199, 10, 0

/**
 * Get signal Map_PsolObj40P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[24] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[25] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj40P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y(buf, val) { \
	buf[24] &= ~(0xff << 0); \
	buf[24] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[25] &= ~(0x03 << 6); \
	buf[25] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj40P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y(buf, 0)

/**
 * Signal Map_PsolObj40P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj40P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y      0

/**
 * Signal Map_PsolObj40P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y        0

/**
 * Signal Map_PsolObj40P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y        1022

/**
 * Signal Map_PsolObj40P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj40P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X Signal Map_PsolObj40P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj40P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X        1, 0, 205, 10

/**
 * Signal Map_PsolObj40P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X      1, 0, 205, 10, 0

/**
 * Get signal Map_PsolObj40P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[25] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[26] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj40P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X(buf, val) { \
	buf[25] &= ~(0x3f << 0); \
	buf[25] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[26] &= ~(0x0f << 4); \
	buf[26] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj40P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X(buf, 0)

/**
 * Signal Map_PsolObj40P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj40P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X      0

/**
 * Signal Map_PsolObj40P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X        0

/**
 * Signal Map_PsolObj40P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X        1022

/**
 * Signal Map_PsolObj40P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj40P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y Signal Map_PsolObj40P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj40P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y        1, 0, 211, 10

/**
 * Signal Map_PsolObj40P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y      1, 0, 211, 10, 0

/**
 * Get signal Map_PsolObj40P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[26] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[27] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj40P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y(buf, val) { \
	buf[26] &= ~(0x0f << 0); \
	buf[26] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[27] &= ~(0x3f << 2); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj40P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y(buf, 0)

/**
 * Signal Map_PsolObj40P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj40P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y      0

/**
 * Signal Map_PsolObj40P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y        0

/**
 * Signal Map_PsolObj40P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y        1022

/**
 * Signal Map_PsolObj40P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj40P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus Signal Map_PsolObj40HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj40HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus        1, 0, 217, 2

/**
 * Signal Map_PsolObj40HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus      1, 0, 217, 2, 0

/**
 * Get signal Map_PsolObj40HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[27] >> 0) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj40HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus(buf, val) { \
	buf[27] &= ~(0x03 << 0); \
	buf[27] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal Map_PsolObj40HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj40HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj40HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus      0

/**
 * Signal Map_PsolObj40HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus        0

/**
 * Signal Map_PsolObj40HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus        3

/**
 * Signal Map_PsolObj40HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj40HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X Signal Map_PsolObj41P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj41P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X        1, 0, 231, 10

/**
 * Signal Map_PsolObj41P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X      1, 0, 231, 10, 0

/**
 * Get signal Map_PsolObj41P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[28] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[29] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj41P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X(buf, val) { \
	buf[28] &= ~(0xff << 0); \
	buf[28] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[29] &= ~(0x03 << 6); \
	buf[29] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj41P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X(buf, 0)

/**
 * Signal Map_PsolObj41P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj41P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X      0

/**
 * Signal Map_PsolObj41P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X        0

/**
 * Signal Map_PsolObj41P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X        1022

/**
 * Signal Map_PsolObj41P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj41P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y Signal Map_PsolObj41P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj41P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y        1, 0, 237, 10

/**
 * Signal Map_PsolObj41P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y      1, 0, 237, 10, 0

/**
 * Get signal Map_PsolObj41P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[29] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[30] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj41P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y(buf, val) { \
	buf[29] &= ~(0x3f << 0); \
	buf[29] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[30] &= ~(0x0f << 4); \
	buf[30] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj41P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y(buf, 0)

/**
 * Signal Map_PsolObj41P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj41P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y      0

/**
 * Signal Map_PsolObj41P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y        0

/**
 * Signal Map_PsolObj41P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y        1022

/**
 * Signal Map_PsolObj41P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj41P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X Signal Map_PsolObj41P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj41P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X        1, 0, 243, 10

/**
 * Signal Map_PsolObj41P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X      1, 0, 243, 10, 0

/**
 * Get signal Map_PsolObj41P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[30] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[31] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj41P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X(buf, val) { \
	buf[30] &= ~(0x0f << 0); \
	buf[30] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[31] &= ~(0x3f << 2); \
	buf[31] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj41P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X(buf, 0)

/**
 * Signal Map_PsolObj41P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj41P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X      0

/**
 * Signal Map_PsolObj41P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X        0

/**
 * Signal Map_PsolObj41P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X        1022

/**
 * Signal Map_PsolObj41P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj41P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y Signal Map_PsolObj41P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj41P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y        1, 0, 249, 10

/**
 * Signal Map_PsolObj41P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y      1, 0, 249, 10, 0

/**
 * Get signal Map_PsolObj41P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[31] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[32] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj41P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y(buf, val) { \
	buf[31] &= ~(0x03 << 0); \
	buf[31] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[32] &= ~(0xff << 0); \
	buf[32] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj41P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y(buf, 0)

/**
 * Signal Map_PsolObj41P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj41P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y      0

/**
 * Signal Map_PsolObj41P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y        0

/**
 * Signal Map_PsolObj41P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y        1022

/**
 * Signal Map_PsolObj41P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj41P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus Signal Map_PsolObj41HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj41HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus        1, 0, 271, 2

/**
 * Signal Map_PsolObj41HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus      1, 0, 271, 2, 0

/**
 * Get signal Map_PsolObj41HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[33] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj41HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus(buf, val) { \
	buf[33] &= ~(0x03 << 6); \
	buf[33] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj41HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj41HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj41HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus      0

/**
 * Signal Map_PsolObj41HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus        0

/**
 * Signal Map_PsolObj41HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus        3

/**
 * Signal Map_PsolObj41HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj41HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X Signal Map_PsolObj42P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj42P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X        1, 0, 269, 10

/**
 * Signal Map_PsolObj42P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X      1, 0, 269, 10, 0

/**
 * Get signal Map_PsolObj42P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[33] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[34] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj42P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X(buf, val) { \
	buf[33] &= ~(0x3f << 0); \
	buf[33] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[34] &= ~(0x0f << 4); \
	buf[34] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj42P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X(buf, 0)

/**
 * Signal Map_PsolObj42P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj42P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X      0

/**
 * Signal Map_PsolObj42P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X        0

/**
 * Signal Map_PsolObj42P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X        1022

/**
 * Signal Map_PsolObj42P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj42P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y Signal Map_PsolObj42P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj42P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y        1, 0, 275, 10

/**
 * Signal Map_PsolObj42P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y      1, 0, 275, 10, 0

/**
 * Get signal Map_PsolObj42P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[34] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[35] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj42P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y(buf, val) { \
	buf[34] &= ~(0x0f << 0); \
	buf[34] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[35] &= ~(0x3f << 2); \
	buf[35] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj42P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y(buf, 0)

/**
 * Signal Map_PsolObj42P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj42P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y      0

/**
 * Signal Map_PsolObj42P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y        0

/**
 * Signal Map_PsolObj42P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y        1022

/**
 * Signal Map_PsolObj42P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj42P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X Signal Map_PsolObj42P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj42P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X        1, 0, 281, 10

/**
 * Signal Map_PsolObj42P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X      1, 0, 281, 10, 0

/**
 * Get signal Map_PsolObj42P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[35] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[36] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj42P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X(buf, val) { \
	buf[35] &= ~(0x03 << 0); \
	buf[35] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[36] &= ~(0xff << 0); \
	buf[36] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj42P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X(buf, 0)

/**
 * Signal Map_PsolObj42P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj42P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X      0

/**
 * Signal Map_PsolObj42P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X        0

/**
 * Signal Map_PsolObj42P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X        1022

/**
 * Signal Map_PsolObj42P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj42P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y Signal Map_PsolObj42P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj42P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y        1, 0, 303, 10

/**
 * Signal Map_PsolObj42P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y      1, 0, 303, 10, 0

/**
 * Get signal Map_PsolObj42P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[37] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[38] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj42P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y(buf, val) { \
	buf[37] &= ~(0xff << 0); \
	buf[37] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[38] &= ~(0x03 << 6); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj42P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y(buf, 0)

/**
 * Signal Map_PsolObj42P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj42P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y      0

/**
 * Signal Map_PsolObj42P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y        0

/**
 * Signal Map_PsolObj42P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y        1022

/**
 * Signal Map_PsolObj42P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj42P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus Signal Map_PsolObj42HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj42HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus        1, 0, 309, 2

/**
 * Signal Map_PsolObj42HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus      1, 0, 309, 2, 0

/**
 * Get signal Map_PsolObj42HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[38] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj42HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus(buf, val) { \
	buf[38] &= ~(0x03 << 4); \
	buf[38] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj42HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj42HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj42HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus      0

/**
 * Signal Map_PsolObj42HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus        0

/**
 * Signal Map_PsolObj42HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus        3

/**
 * Signal Map_PsolObj42HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj42HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X Signal Map_PsolObj43P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj43P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X        1, 0, 307, 10

/**
 * Signal Map_PsolObj43P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X      1, 0, 307, 10, 0

/**
 * Get signal Map_PsolObj43P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[38] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[39] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj43P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X(buf, val) { \
	buf[38] &= ~(0x0f << 0); \
	buf[38] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[39] &= ~(0x3f << 2); \
	buf[39] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj43P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X(buf, 0)

/**
 * Signal Map_PsolObj43P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj43P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X      0

/**
 * Signal Map_PsolObj43P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X        0

/**
 * Signal Map_PsolObj43P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X        1022

/**
 * Signal Map_PsolObj43P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj43P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y Signal Map_PsolObj43P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj43P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y        1, 0, 313, 10

/**
 * Signal Map_PsolObj43P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y      1, 0, 313, 10, 0

/**
 * Get signal Map_PsolObj43P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[39] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[40] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj43P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y(buf, val) { \
	buf[39] &= ~(0x03 << 0); \
	buf[39] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[40] &= ~(0xff << 0); \
	buf[40] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj43P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y(buf, 0)

/**
 * Signal Map_PsolObj43P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj43P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y      0

/**
 * Signal Map_PsolObj43P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y        0

/**
 * Signal Map_PsolObj43P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y        1022

/**
 * Signal Map_PsolObj43P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj43P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X Signal Map_PsolObj43P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj43P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X        1, 0, 335, 10

/**
 * Signal Map_PsolObj43P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X      1, 0, 335, 10, 0

/**
 * Get signal Map_PsolObj43P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[41] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[42] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj43P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X(buf, val) { \
	buf[41] &= ~(0xff << 0); \
	buf[41] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[42] &= ~(0x03 << 6); \
	buf[42] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj43P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X(buf, 0)

/**
 * Signal Map_PsolObj43P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj43P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X      0

/**
 * Signal Map_PsolObj43P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X        0

/**
 * Signal Map_PsolObj43P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X        1022

/**
 * Signal Map_PsolObj43P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj43P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y Signal Map_PsolObj43P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj43P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y        1, 0, 341, 10

/**
 * Signal Map_PsolObj43P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y      1, 0, 341, 10, 0

/**
 * Get signal Map_PsolObj43P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[42] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[43] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj43P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y(buf, val) { \
	buf[42] &= ~(0x3f << 0); \
	buf[42] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[43] &= ~(0x0f << 4); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj43P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y(buf, 0)

/**
 * Signal Map_PsolObj43P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj43P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y      0

/**
 * Signal Map_PsolObj43P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y        0

/**
 * Signal Map_PsolObj43P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y        1022

/**
 * Signal Map_PsolObj43P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj43P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus Signal Map_PsolObj43HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj43HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus        1, 0, 347, 2

/**
 * Signal Map_PsolObj43HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus      1, 0, 347, 2, 0

/**
 * Get signal Map_PsolObj43HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[43] >> 2) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj43HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus(buf, val) { \
	buf[43] &= ~(0x03 << 2); \
	buf[43] |= (((uint8_t)(val) >> 0) & 0x03) << 2; \
}

/**
 * Set signal Map_PsolObj43HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj43HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj43HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus      0

/**
 * Signal Map_PsolObj43HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus        0

/**
 * Signal Map_PsolObj43HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus        3

/**
 * Signal Map_PsolObj43HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj43HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X Signal Map_PsolObj44P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj44P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X        1, 0, 345, 10

/**
 * Signal Map_PsolObj44P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X      1, 0, 345, 10, 0

/**
 * Get signal Map_PsolObj44P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[43] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[44] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj44P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X(buf, val) { \
	buf[43] &= ~(0x03 << 0); \
	buf[43] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[44] &= ~(0xff << 0); \
	buf[44] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj44P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X(buf, 0)

/**
 * Signal Map_PsolObj44P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj44P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X      0

/**
 * Signal Map_PsolObj44P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X        0

/**
 * Signal Map_PsolObj44P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X        1022

/**
 * Signal Map_PsolObj44P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj44P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y Signal Map_PsolObj44P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj44P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y        1, 0, 367, 10

/**
 * Signal Map_PsolObj44P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y      1, 0, 367, 10, 0

/**
 * Get signal Map_PsolObj44P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[45] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[46] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj44P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y(buf, val) { \
	buf[45] &= ~(0xff << 0); \
	buf[45] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[46] &= ~(0x03 << 6); \
	buf[46] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj44P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y(buf, 0)

/**
 * Signal Map_PsolObj44P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj44P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y      0

/**
 * Signal Map_PsolObj44P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y        0

/**
 * Signal Map_PsolObj44P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y        1022

/**
 * Signal Map_PsolObj44P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj44P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X Signal Map_PsolObj44P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj44P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X        1, 0, 373, 10

/**
 * Signal Map_PsolObj44P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X      1, 0, 373, 10, 0

/**
 * Get signal Map_PsolObj44P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[46] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[47] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj44P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X(buf, val) { \
	buf[46] &= ~(0x3f << 0); \
	buf[46] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[47] &= ~(0x0f << 4); \
	buf[47] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj44P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X(buf, 0)

/**
 * Signal Map_PsolObj44P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj44P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X      0

/**
 * Signal Map_PsolObj44P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X        0

/**
 * Signal Map_PsolObj44P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X        1022

/**
 * Signal Map_PsolObj44P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj44P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y Signal Map_PsolObj44P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj44P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y        1, 0, 379, 10

/**
 * Signal Map_PsolObj44P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y      1, 0, 379, 10, 0

/**
 * Get signal Map_PsolObj44P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[47] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[48] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj44P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y(buf, val) { \
	buf[47] &= ~(0x0f << 0); \
	buf[47] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[48] &= ~(0x3f << 2); \
	buf[48] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj44P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y(buf, 0)

/**
 * Signal Map_PsolObj44P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj44P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y      0

/**
 * Signal Map_PsolObj44P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y        0

/**
 * Signal Map_PsolObj44P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y        1022

/**
 * Signal Map_PsolObj44P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj44P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus Signal Map_PsolObj44HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj44HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus        1, 0, 385, 2

/**
 * Signal Map_PsolObj44HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus      1, 0, 385, 2, 0

/**
 * Get signal Map_PsolObj44HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[48] >> 0) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj44HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus(buf, val) { \
	buf[48] &= ~(0x03 << 0); \
	buf[48] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal Map_PsolObj44HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj44HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj44HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus      0

/**
 * Signal Map_PsolObj44HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus        0

/**
 * Signal Map_PsolObj44HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus        3

/**
 * Signal Map_PsolObj44HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj44HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X Signal Map_PsolObj45P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj45P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X        1, 0, 399, 10

/**
 * Signal Map_PsolObj45P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X      1, 0, 399, 10, 0

/**
 * Get signal Map_PsolObj45P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[49] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[50] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj45P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X(buf, val) { \
	buf[49] &= ~(0xff << 0); \
	buf[49] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[50] &= ~(0x03 << 6); \
	buf[50] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj45P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X(buf, 0)

/**
 * Signal Map_PsolObj45P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj45P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X      0

/**
 * Signal Map_PsolObj45P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X        0

/**
 * Signal Map_PsolObj45P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X        1022

/**
 * Signal Map_PsolObj45P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj45P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y Signal Map_PsolObj45P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj45P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y        1, 0, 405, 10

/**
 * Signal Map_PsolObj45P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y      1, 0, 405, 10, 0

/**
 * Get signal Map_PsolObj45P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[50] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[51] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj45P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y(buf, val) { \
	buf[50] &= ~(0x3f << 0); \
	buf[50] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[51] &= ~(0x0f << 4); \
	buf[51] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj45P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y(buf, 0)

/**
 * Signal Map_PsolObj45P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj45P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y      0

/**
 * Signal Map_PsolObj45P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y        0

/**
 * Signal Map_PsolObj45P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y        1022

/**
 * Signal Map_PsolObj45P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj45P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X Signal Map_PsolObj45P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj45P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X        1, 0, 411, 10

/**
 * Signal Map_PsolObj45P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X      1, 0, 411, 10, 0

/**
 * Get signal Map_PsolObj45P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[51] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[52] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj45P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X(buf, val) { \
	buf[51] &= ~(0x0f << 0); \
	buf[51] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[52] &= ~(0x3f << 2); \
	buf[52] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj45P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X(buf, 0)

/**
 * Signal Map_PsolObj45P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj45P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X      0

/**
 * Signal Map_PsolObj45P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X        0

/**
 * Signal Map_PsolObj45P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X        1022

/**
 * Signal Map_PsolObj45P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj45P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y Signal Map_PsolObj45P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj45P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y        1, 0, 417, 10

/**
 * Signal Map_PsolObj45P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y      1, 0, 417, 10, 0

/**
 * Get signal Map_PsolObj45P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[52] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[53] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj45P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y(buf, val) { \
	buf[52] &= ~(0x03 << 0); \
	buf[52] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[53] &= ~(0xff << 0); \
	buf[53] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj45P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y(buf, 0)

/**
 * Signal Map_PsolObj45P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj45P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y      0

/**
 * Signal Map_PsolObj45P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y        0

/**
 * Signal Map_PsolObj45P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y        1022

/**
 * Signal Map_PsolObj45P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj45P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus Signal Map_PsolObj45HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj45HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus        1, 0, 439, 2

/**
 * Signal Map_PsolObj45HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus      1, 0, 439, 2, 0

/**
 * Get signal Map_PsolObj45HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[54] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj45HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus(buf, val) { \
	buf[54] &= ~(0x03 << 6); \
	buf[54] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj45HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj45HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj45HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus      0

/**
 * Signal Map_PsolObj45HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus        0

/**
 * Signal Map_PsolObj45HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus        3

/**
 * Signal Map_PsolObj45HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj45HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X Signal Map_PsolObj46P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj46P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X        1, 0, 437, 10

/**
 * Signal Map_PsolObj46P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X      1, 0, 437, 10, 0

/**
 * Get signal Map_PsolObj46P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[54] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[55] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj46P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X(buf, val) { \
	buf[54] &= ~(0x3f << 0); \
	buf[54] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[55] &= ~(0x0f << 4); \
	buf[55] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj46P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X(buf, 0)

/**
 * Signal Map_PsolObj46P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj46P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X      0

/**
 * Signal Map_PsolObj46P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X        0

/**
 * Signal Map_PsolObj46P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X        1022

/**
 * Signal Map_PsolObj46P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj46P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y Signal Map_PsolObj46P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj46P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y        1, 0, 443, 10

/**
 * Signal Map_PsolObj46P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y      1, 0, 443, 10, 0

/**
 * Get signal Map_PsolObj46P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[55] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[56] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj46P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y(buf, val) { \
	buf[55] &= ~(0x0f << 0); \
	buf[55] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[56] &= ~(0x3f << 2); \
	buf[56] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj46P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y(buf, 0)

/**
 * Signal Map_PsolObj46P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj46P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y      0

/**
 * Signal Map_PsolObj46P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y        0

/**
 * Signal Map_PsolObj46P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y        1022

/**
 * Signal Map_PsolObj46P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj46P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X Signal Map_PsolObj46P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj46P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X        1, 0, 449, 10

/**
 * Signal Map_PsolObj46P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X      1, 0, 449, 10, 0

/**
 * Get signal Map_PsolObj46P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[56] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[57] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj46P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X(buf, val) { \
	buf[56] &= ~(0x03 << 0); \
	buf[56] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[57] &= ~(0xff << 0); \
	buf[57] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj46P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X(buf, 0)

/**
 * Signal Map_PsolObj46P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj46P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X      0

/**
 * Signal Map_PsolObj46P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X        0

/**
 * Signal Map_PsolObj46P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X        1022

/**
 * Signal Map_PsolObj46P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj46P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y Signal Map_PsolObj46P2Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj46P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y        1, 0, 471, 10

/**
 * Signal Map_PsolObj46P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y      1, 0, 471, 10, 0

/**
 * Get signal Map_PsolObj46P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[58] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[59] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj46P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y(buf, val) { \
	buf[58] &= ~(0xff << 0); \
	buf[58] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[59] &= ~(0x03 << 6); \
	buf[59] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj46P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y(buf, 0)

/**
 * Signal Map_PsolObj46P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj46P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y      0

/**
 * Signal Map_PsolObj46P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y        0

/**
 * Signal Map_PsolObj46P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y        1022

/**
 * Signal Map_PsolObj46P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj46P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus Signal Map_PsolObj46HeightStatus of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj46HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus        1, 0, 477, 2

/**
 * Signal Map_PsolObj46HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus      1, 0, 477, 2, 0

/**
 * Get signal Map_PsolObj46HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[59] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj46HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus(buf, val) { \
	buf[59] &= ~(0x03 << 4); \
	buf[59] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj46HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj46HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj46HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus      0

/**
 * Signal Map_PsolObj46HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus        0

/**
 * Signal Map_PsolObj46HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus        3

/**
 * Signal Map_PsolObj46HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj46HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X Signal Map_PsolObj47P1X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj47P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X        1, 0, 475, 10

/**
 * Signal Map_PsolObj47P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X      1, 0, 475, 10, 0

/**
 * Get signal Map_PsolObj47P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[59] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[60] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj47P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X(buf, val) { \
	buf[59] &= ~(0x0f << 0); \
	buf[59] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[60] &= ~(0x3f << 2); \
	buf[60] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj47P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X(buf, 0)

/**
 * Signal Map_PsolObj47P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj47P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X      0

/**
 * Signal Map_PsolObj47P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X        0

/**
 * Signal Map_PsolObj47P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X        1022

/**
 * Signal Map_PsolObj47P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj47P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y Signal Map_PsolObj47P1Y of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj47P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y        1, 0, 481, 10

/**
 * Signal Map_PsolObj47P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y      1, 0, 481, 10, 0

/**
 * Get signal Map_PsolObj47P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[60] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[61] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj47P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y(buf, val) { \
	buf[60] &= ~(0x03 << 0); \
	buf[60] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[61] &= ~(0xff << 0); \
	buf[61] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj47P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y(buf, 0)

/**
 * Signal Map_PsolObj47P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj47P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y      0

/**
 * Signal Map_PsolObj47P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y        0

/**
 * Signal Map_PsolObj47P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y        1022

/**
 * Signal Map_PsolObj47P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj47P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X Signal Map_PsolObj47P2X of Message PAS_Map_PsolObj_Info4 (0x19f)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info4
 * @{
 */

/**
 * Signal Map_PsolObj47P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X and \ref GET_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X        1, 0, 503, 10

/**
 * Signal Map_PsolObj47P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X or \ref INIT_PAS_Map_PsolObj_Info4 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X      1, 0, 503, 10, 0

/**
 * Get signal Map_PsolObj47P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[62] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[63] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj47P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X(buf, val) { \
	buf[62] &= ~(0xff << 0); \
	buf[62] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[63] &= ~(0x03 << 6); \
	buf[63] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj47P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X(buf) \
	SET_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X(buf, 0)

/**
 * Signal Map_PsolObj47P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj47P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X      0

/**
 * Signal Map_PsolObj47P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X        0

/**
 * Signal Map_PsolObj47P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X        1022

/**
 * Signal Map_PsolObj47P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info4_Map_PsolObj47P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum Signal PAS_Map_PsolObj_Info5_Checksum of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal PAS_Map_PsolObj_Info5_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum and \ref GET_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum        1, 0, 7, 8

/**
 * Signal PAS_Map_PsolObj_Info5_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_Map_PsolObj_Info5_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_Map_PsolObj_Info5_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_Map_PsolObj_Info5_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum(buf) \
	SET_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum(buf, 0)

/**
 * Signal PAS_Map_PsolObj_Info5_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Map_PsolObj_Info5_Checksum raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum      0

/**
 * Signal PAS_Map_PsolObj_Info5_Checksum raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum        0

/**
 * Signal PAS_Map_PsolObj_Info5_Checksum raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum        255

/**
 * Signal PAS_Map_PsolObj_Info5_Checksum raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter Signal PAS_Map_PsolObj_Info5_MsgCounter of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal PAS_Map_PsolObj_Info5_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter and \ref GET_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_Map_PsolObj_Info5_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_Map_PsolObj_Info5_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_Map_PsolObj_Info5_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_Map_PsolObj_Info5_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter(buf) \
	SET_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter(buf, 0)

/**
 * Signal PAS_Map_PsolObj_Info5_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_Map_PsolObj_Info5_MsgCounter raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter      0

/**
 * Signal PAS_Map_PsolObj_Info5_MsgCounter raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter        0

/**
 * Signal PAS_Map_PsolObj_Info5_MsgCounter raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter        15

/**
 * Signal PAS_Map_PsolObj_Info5_MsgCounter raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_PAS_Map_PsolObj_Info5_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y Signal Map_PsolObj47P2Y of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj47P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y        1, 0, 23, 10

/**
 * Signal Map_PsolObj47P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y      1, 0, 23, 10, 0

/**
 * Get signal Map_PsolObj47P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj47P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[3] &= ~(0x03 << 6); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj47P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y(buf, 0)

/**
 * Signal Map_PsolObj47P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj47P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y      0

/**
 * Signal Map_PsolObj47P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y        0

/**
 * Signal Map_PsolObj47P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y        1022

/**
 * Signal Map_PsolObj47P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj47P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus Signal Map_PsolObj47HeightStatus of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj47HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus        1, 0, 13, 2

/**
 * Signal Map_PsolObj47HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus      1, 0, 13, 2, 0

/**
 * Get signal Map_PsolObj47HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj47HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus(buf, val) { \
	buf[1] &= ~(0x03 << 4); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj47HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj47HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj47HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus      0

/**
 * Signal Map_PsolObj47HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus        0

/**
 * Signal Map_PsolObj47HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus        3

/**
 * Signal Map_PsolObj47HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj47HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X Signal Map_PsolObj48P1X of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj48P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X        1, 0, 29, 10

/**
 * Signal Map_PsolObj48P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X      1, 0, 29, 10, 0

/**
 * Get signal Map_PsolObj48P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj48P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X(buf, val) { \
	buf[3] &= ~(0x3f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[4] &= ~(0x0f << 4); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj48P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X(buf, 0)

/**
 * Signal Map_PsolObj48P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj48P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X      0

/**
 * Signal Map_PsolObj48P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X        0

/**
 * Signal Map_PsolObj48P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X        1022

/**
 * Signal Map_PsolObj48P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj48P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y Signal Map_PsolObj48P1Y of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj48P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y        1, 0, 35, 10

/**
 * Signal Map_PsolObj48P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y      1, 0, 35, 10, 0

/**
 * Get signal Map_PsolObj48P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj48P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y(buf, val) { \
	buf[4] &= ~(0x0f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[5] &= ~(0x3f << 2); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj48P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y(buf, 0)

/**
 * Signal Map_PsolObj48P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj48P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y      0

/**
 * Signal Map_PsolObj48P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y        0

/**
 * Signal Map_PsolObj48P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y        1022

/**
 * Signal Map_PsolObj48P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj48P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X Signal Map_PsolObj48P2X of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj48P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X        1, 0, 41, 10

/**
 * Signal Map_PsolObj48P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X      1, 0, 41, 10, 0

/**
 * Get signal Map_PsolObj48P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj48P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X(buf, val) { \
	buf[5] &= ~(0x03 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj48P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X(buf, 0)

/**
 * Signal Map_PsolObj48P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj48P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X      0

/**
 * Signal Map_PsolObj48P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X        0

/**
 * Signal Map_PsolObj48P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X        1022

/**
 * Signal Map_PsolObj48P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj48P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y Signal Map_PsolObj48P2Y of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj48P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y        1, 0, 63, 10

/**
 * Signal Map_PsolObj48P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y      1, 0, 63, 10, 0

/**
 * Get signal Map_PsolObj48P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[7] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[8] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj48P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y(buf, val) { \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[8] &= ~(0x03 << 6); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj48P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y(buf, 0)

/**
 * Signal Map_PsolObj48P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj48P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y      0

/**
 * Signal Map_PsolObj48P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y        0

/**
 * Signal Map_PsolObj48P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y        1022

/**
 * Signal Map_PsolObj48P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj48P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus Signal Map_PsolObj48HeightStatus of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj48HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus        1, 0, 65, 2

/**
 * Signal Map_PsolObj48HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus      1, 0, 65, 2, 0

/**
 * Get signal Map_PsolObj48HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 0) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj48HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus(buf, val) { \
	buf[8] &= ~(0x03 << 0); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal Map_PsolObj48HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj48HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj48HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus      0

/**
 * Signal Map_PsolObj48HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus        0

/**
 * Signal Map_PsolObj48HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus        3

/**
 * Signal Map_PsolObj48HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj48HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus Signal Map_PsolObj49HeightStatus of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj49HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus        1, 0, 79, 2

/**
 * Signal Map_PsolObj49HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus      1, 0, 79, 2, 0

/**
 * Get signal Map_PsolObj49HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[9] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj49HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus(buf, val) { \
	buf[9] &= ~(0x03 << 6); \
	buf[9] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj49HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj49HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj49HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus      0

/**
 * Signal Map_PsolObj49HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus        0

/**
 * Signal Map_PsolObj49HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus        3

/**
 * Signal Map_PsolObj49HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj49HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X Signal Map_PsolObj49P1X of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj49P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X        1, 0, 147, 10

/**
 * Signal Map_PsolObj49P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X      1, 0, 147, 10, 0

/**
 * Get signal Map_PsolObj49P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[18] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[19] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj49P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X(buf, val) { \
	buf[18] &= ~(0x0f << 0); \
	buf[18] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[19] &= ~(0x3f << 2); \
	buf[19] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj49P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X(buf, 0)

/**
 * Signal Map_PsolObj49P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj49P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X      0

/**
 * Signal Map_PsolObj49P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X        0

/**
 * Signal Map_PsolObj49P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X        1022

/**
 * Signal Map_PsolObj49P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj49P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y Signal Map_PsolObj49P1Y of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj49P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y        1, 0, 77, 10

/**
 * Signal Map_PsolObj49P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y      1, 0, 77, 10, 0

/**
 * Get signal Map_PsolObj49P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[10] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj49P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y(buf, val) { \
	buf[9] &= ~(0x3f << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[10] &= ~(0x0f << 4); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj49P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y(buf, 0)

/**
 * Signal Map_PsolObj49P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj49P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y      0

/**
 * Signal Map_PsolObj49P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y        0

/**
 * Signal Map_PsolObj49P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y        1022

/**
 * Signal Map_PsolObj49P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj49P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X Signal Map_PsolObj49P2X of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj49P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X        1, 0, 83, 10

/**
 * Signal Map_PsolObj49P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X      1, 0, 83, 10, 0

/**
 * Get signal Map_PsolObj49P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[10] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[11] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj49P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X(buf, val) { \
	buf[10] &= ~(0x0f << 0); \
	buf[10] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[11] &= ~(0x3f << 2); \
	buf[11] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj49P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X(buf, 0)

/**
 * Signal Map_PsolObj49P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj49P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X      0

/**
 * Signal Map_PsolObj49P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X        0

/**
 * Signal Map_PsolObj49P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X        1022

/**
 * Signal Map_PsolObj49P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj49P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y Signal Map_PsolObj49P2Y of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj49P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y        1, 0, 89, 10

/**
 * Signal Map_PsolObj49P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y      1, 0, 89, 10, 0

/**
 * Get signal Map_PsolObj49P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[11] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[12] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj49P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y(buf, val) { \
	buf[11] &= ~(0x03 << 0); \
	buf[11] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[12] &= ~(0xff << 0); \
	buf[12] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj49P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y(buf, 0)

/**
 * Signal Map_PsolObj49P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj49P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y      0

/**
 * Signal Map_PsolObj49P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y        0

/**
 * Signal Map_PsolObj49P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y        1022

/**
 * Signal Map_PsolObj49P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj49P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X Signal Map_PsolObj50P1X of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * X coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj50P1X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X        1, 0, 109, 10

/**
 * Signal Map_PsolObj50P1X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X      1, 0, 109, 10, 0

/**
 * Get signal Map_PsolObj50P1X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0x3f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal Map_PsolObj50P1X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X(buf, val) { \
	buf[13] &= ~(0x3f << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 4) & 0x3f) << 0; \
	buf[14] &= ~(0x0f << 4); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal Map_PsolObj50P1X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X(buf, 0)

/**
 * Signal Map_PsolObj50P1X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj50P1X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X      0

/**
 * Signal Map_PsolObj50P1X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X        0

/**
 * Signal Map_PsolObj50P1X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X        1022

/**
 * Signal Map_PsolObj50P1X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj50P1X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y Signal Map_PsolObj50P1Y of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * Y coordinates of obstacle point 1 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj50P1Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y        1, 0, 115, 10

/**
 * Signal Map_PsolObj50P1Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y      1, 0, 115, 10, 0

/**
 * Get signal Map_PsolObj50P1Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[14] >> 0) & 0x0f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[15] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal Map_PsolObj50P1Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y(buf, val) { \
	buf[14] &= ~(0x0f << 0); \
	buf[14] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x0f) << 0; \
	buf[15] &= ~(0x3f << 2); \
	buf[15] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal Map_PsolObj50P1Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y(buf, 0)

/**
 * Signal Map_PsolObj50P1Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj50P1Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y      0

/**
 * Signal Map_PsolObj50P1Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y        0

/**
 * Signal Map_PsolObj50P1Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y        1022

/**
 * Signal Map_PsolObj50P1Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj50P1Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X Signal Map_PsolObj50P2X of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * X coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj50P2X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X        1, 0, 121, 10

/**
 * Signal Map_PsolObj50P2X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X      1, 0, 121, 10, 0

/**
 * Get signal Map_PsolObj50P2X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[15] >> 0) & 0x03) << 8) \
	| (uint8_t)(+(uint8_t)((buf[16] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj50P2X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X(buf, val) { \
	buf[15] &= ~(0x03 << 0); \
	buf[15] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x03) << 0; \
	buf[16] &= ~(0xff << 0); \
	buf[16] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj50P2X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X(buf, 0)

/**
 * Signal Map_PsolObj50P2X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj50P2X raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X      0

/**
 * Signal Map_PsolObj50P2X raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X        0

/**
 * Signal Map_PsolObj50P2X raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X        1022

/**
 * Signal Map_PsolObj50P2X raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj50P2X        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y Signal Map_PsolObj50P2Y of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * Y coordinates of obstacle point 2 with the center of the rear axle of the vehicle as the origin
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj50P2Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y        1, 0, 143, 10

/**
 * Signal Map_PsolObj50P2Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y      1, 0, 143, 10, 0

/**
 * Get signal Map_PsolObj50P2Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[17] >> 0) & 0xff) << 2) \
	| (uint8_t)(+(uint8_t)((buf[18] >> 6) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj50P2Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y(buf, val) { \
	buf[17] &= ~(0xff << 0); \
	buf[17] |= ((uint8_t)((uint16_t)(val) >> 2) & 0xff) << 0; \
	buf[18] &= ~(0x03 << 6); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal Map_PsolObj50P2Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y(buf, 0)

/**
 * Signal Map_PsolObj50P2Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y(x, fmt) \
	((x) * fmt * 4 + fmt * (-2044))

/**
 * Signal Map_PsolObj50P2Y raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y      0

/**
 * Signal Map_PsolObj50P2Y raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y        0

/**
 * Signal Map_PsolObj50P2Y raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y        1022

/**
 * Signal Map_PsolObj50P2Y raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj50P2Y        -511

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus Signal Map_PsolObj50HeightStatus of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj50HeightStatus configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus        1, 0, 149, 2

/**
 * Signal Map_PsolObj50HeightStatus setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus      1, 0, 149, 2, 0

/**
 * Get signal Map_PsolObj50HeightStatus from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[18] >> 4) & 0x03) << 0) \
)

/**
 * Set signal Map_PsolObj50HeightStatus in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus(buf, val) { \
	buf[18] &= ~(0x03 << 4); \
	buf[18] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal Map_PsolObj50HeightStatus in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus(buf, 0)

/**
 * Signal Map_PsolObj50HeightStatus value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj50HeightStatus raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus      0

/**
 * Signal Map_PsolObj50HeightStatus raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus        0

/**
 * Signal Map_PsolObj50HeightStatus raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus        3

/**
 * Signal Map_PsolObj50HeightStatus raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj50HeightStatus        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp Signal Map_PsolObj_TimeStamp of Message PAS_Map_PsolObj_Info5 (0x1a0)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_Map_PsolObj_Info5
 * @{
 */

/**
 * Signal Map_PsolObj_TimeStamp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp and \ref GET_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp instead.
 */
#define SIG_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp        1, 0, 167, 32

/**
 * Signal Map_PsolObj_TimeStamp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp or \ref INIT_PAS_Map_PsolObj_Info5 instead.
 */
#define SETUP_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp      1, 0, 167, 32, 0

/**
 * Get signal Map_PsolObj_TimeStamp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[20] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[21] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[22] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[23] >> 0) & 0xff) << 0) \
)

/**
 * Set signal Map_PsolObj_TimeStamp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp(buf, val) { \
	buf[20] &= ~(0xff << 0); \
	buf[20] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[21] &= ~(0xff << 0); \
	buf[21] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[22] &= ~(0xff << 0); \
	buf[22] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[23] &= ~(0xff << 0); \
	buf[23] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal Map_PsolObj_TimeStamp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp(buf) \
	SET_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp(buf, 0)

/**
 * Signal Map_PsolObj_TimeStamp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp(x, fmt) \
	((x) * fmt)

/**
 * Signal Map_PsolObj_TimeStamp raw initial value.
 */
#define START_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp      0

/**
 * Signal Map_PsolObj_TimeStamp raw minimum value.
 */
#define MIN_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp        0

/**
 * Signal Map_PsolObj_TimeStamp raw maximum value.
 */
#define MAX_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp        4294967295

/**
 * Signal Map_PsolObj_TimeStamp raw offset value.
 */
#define OFF_PAS_Map_PsolObj_Info5_Map_PsolObj_TimeStamp        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_ODO_Info6_PAS_ODO_Info6_Checksum Signal PAS_ODO_Info6_Checksum of Message PAS_ODO_Info6 (0x1a5)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_ODO_Info6
 * @{
 */

/**
 * Signal PAS_ODO_Info6_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_ODO_Info6_PAS_ODO_Info6_Checksum and \ref GET_PAS_ODO_Info6_PAS_ODO_Info6_Checksum instead.
 */
#define SIG_PAS_ODO_Info6_PAS_ODO_Info6_Checksum        1, 0, 7, 8

/**
 * Signal PAS_ODO_Info6_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_ODO_Info6_PAS_ODO_Info6_Checksum or \ref INIT_PAS_ODO_Info6 instead.
 */
#define SETUP_PAS_ODO_Info6_PAS_ODO_Info6_Checksum      1, 0, 7, 8, 0

/**
 * Get signal PAS_ODO_Info6_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_ODO_Info6_PAS_ODO_Info6_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal PAS_ODO_Info6_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_ODO_Info6_PAS_ODO_Info6_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal PAS_ODO_Info6_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_ODO_Info6_PAS_ODO_Info6_Checksum(buf) \
	SET_PAS_ODO_Info6_PAS_ODO_Info6_Checksum(buf, 0)

/**
 * Signal PAS_ODO_Info6_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_ODO_Info6_PAS_ODO_Info6_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_ODO_Info6_Checksum raw initial value.
 */
#define START_PAS_ODO_Info6_PAS_ODO_Info6_Checksum      0

/**
 * Signal PAS_ODO_Info6_Checksum raw minimum value.
 */
#define MIN_PAS_ODO_Info6_PAS_ODO_Info6_Checksum        0

/**
 * Signal PAS_ODO_Info6_Checksum raw maximum value.
 */
#define MAX_PAS_ODO_Info6_PAS_ODO_Info6_Checksum        255

/**
 * Signal PAS_ODO_Info6_Checksum raw offset value.
 */
#define OFF_PAS_ODO_Info6_PAS_ODO_Info6_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter Signal PAS_ODO_Info6_MsgCounter of Message PAS_ODO_Info6 (0x1a5)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_ODO_Info6
 * @{
 */

/**
 * Signal PAS_ODO_Info6_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter and \ref GET_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter instead.
 */
#define SIG_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter        1, 0, 11, 4

/**
 * Signal PAS_ODO_Info6_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter or \ref INIT_PAS_ODO_Info6 instead.
 */
#define SETUP_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal PAS_ODO_Info6_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal PAS_ODO_Info6_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal PAS_ODO_Info6_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter(buf) \
	SET_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter(buf, 0)

/**
 * Signal PAS_ODO_Info6_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_ODO_Info6_MsgCounter raw initial value.
 */
#define START_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter      0

/**
 * Signal PAS_ODO_Info6_MsgCounter raw minimum value.
 */
#define MIN_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter        0

/**
 * Signal PAS_ODO_Info6_MsgCounter raw maximum value.
 */
#define MAX_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter        15

/**
 * Signal PAS_ODO_Info6_MsgCounter raw offset value.
 */
#define OFF_PAS_ODO_Info6_PAS_ODO_Info6_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_ODO_Info6_ODO_Kappa Signal ODO_Kappa of Message PAS_ODO_Info6 (0x1a5)
 *
 * Kappa
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_ODO_Info6
 * @{
 */

/**
 * Signal ODO_Kappa configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_ODO_Info6_ODO_Kappa and \ref GET_PAS_ODO_Info6_ODO_Kappa instead.
 */
#define SIG_PAS_ODO_Info6_ODO_Kappa                 1, 0, 22, 16

/**
 * Signal ODO_Kappa setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_ODO_Info6_ODO_Kappa or \ref INIT_PAS_ODO_Info6 instead.
 */
#define SETUP_PAS_ODO_Info6_ODO_Kappa               1, 0, 22, 16, 32768

/**
 * Get signal ODO_Kappa from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_ODO_Info6_ODO_Kappa(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x7f) << 9) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ODO_Kappa in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_ODO_Info6_ODO_Kappa(buf, val) { \
	buf[2] &= ~(0x7f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x7f) << 0; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ODO_Kappa in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_ODO_Info6_ODO_Kappa(buf) \
	SET_PAS_ODO_Info6_ODO_Kappa(buf, 32768)

/**
 * Signal ODO_Kappa value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_ODO_Info6_ODO_Kappa(x, fmt) \
	((x) * fmt / 16384 + fmt * (-2))

/**
 * Signal ODO_Kappa raw initial value.
 */
#define START_PAS_ODO_Info6_ODO_Kappa               32768

/**
 * Signal ODO_Kappa raw minimum value.
 */
#define MIN_PAS_ODO_Info6_ODO_Kappa                 1

/**
 * Signal ODO_Kappa raw maximum value.
 */
#define MAX_PAS_ODO_Info6_ODO_Kappa                 65535

/**
 * Signal ODO_Kappa raw offset value.
 */
#define OFF_PAS_ODO_Info6_ODO_Kappa                 -32768

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_ODO_Info6_ODO_sHA Signal ODO_sHA of Message PAS_ODO_Info6 (0x1a5)
 *
 * driven distance
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_ODO_Info6
 * @{
 */

/**
 * Signal ODO_sHA configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_ODO_Info6_ODO_sHA and \ref GET_PAS_ODO_Info6_ODO_sHA instead.
 */
#define SIG_PAS_ODO_Info6_ODO_sHA                   1, 0, 38, 16

/**
 * Signal ODO_sHA setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_ODO_Info6_ODO_sHA or \ref INIT_PAS_ODO_Info6 instead.
 */
#define SETUP_PAS_ODO_Info6_ODO_sHA                 1, 0, 38, 16, 32768

/**
 * Get signal ODO_sHA from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_ODO_Info6_ODO_sHA(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x7f) << 9) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ODO_sHA in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_ODO_Info6_ODO_sHA(buf, val) { \
	buf[4] &= ~(0x7f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x7f) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[6] &= ~(0x01 << 7); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ODO_sHA in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_ODO_Info6_ODO_sHA(buf) \
	SET_PAS_ODO_Info6_ODO_sHA(buf, 32768)

/**
 * Signal ODO_sHA value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_ODO_Info6_ODO_sHA(x, fmt) \
	((x) * fmt / 100 + fmt * 8192 / (-25))

/**
 * Signal ODO_sHA raw initial value.
 */
#define START_PAS_ODO_Info6_ODO_sHA                 32768

/**
 * Signal ODO_sHA raw minimum value.
 */
#define MIN_PAS_ODO_Info6_ODO_sHA                   1

/**
 * Signal ODO_sHA raw maximum value.
 */
#define MAX_PAS_ODO_Info6_ODO_sHA                   65535

/**
 * Signal ODO_sHA raw offset value.
 */
#define OFF_PAS_ODO_Info6_ODO_sHA                   -32768

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_ODO_Info6_ODO_X Signal ODO_X of Message PAS_ODO_Info6 (0x1a5)
 *
 * X-Position of the center of rear axle in cm
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_ODO_Info6
 * @{
 */

/**
 * Signal ODO_X configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_ODO_Info6_ODO_X and \ref GET_PAS_ODO_Info6_ODO_X instead.
 */
#define SIG_PAS_ODO_Info6_ODO_X                     1, 0, 70, 16

/**
 * Signal ODO_X setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_ODO_Info6_ODO_X or \ref INIT_PAS_ODO_Info6 instead.
 */
#define SETUP_PAS_ODO_Info6_ODO_X                   1, 0, 70, 16, 32768

/**
 * Get signal ODO_X from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_ODO_Info6_ODO_X(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[8] >> 0) & 0x7f) << 9) \
	| (uint16_t)(+(uint16_t)((buf[9] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[10] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ODO_X in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_ODO_Info6_ODO_X(buf, val) { \
	buf[8] &= ~(0x7f << 0); \
	buf[8] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x7f) << 0; \
	buf[9] &= ~(0xff << 0); \
	buf[9] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[10] &= ~(0x01 << 7); \
	buf[10] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ODO_X in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_ODO_Info6_ODO_X(buf) \
	SET_PAS_ODO_Info6_ODO_X(buf, 32768)

/**
 * Signal ODO_X value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_ODO_Info6_ODO_X(x, fmt) \
	((x) * fmt / 100 + fmt * 8192 / (-25))

/**
 * Signal ODO_X raw initial value.
 */
#define START_PAS_ODO_Info6_ODO_X                   32768

/**
 * Signal ODO_X raw minimum value.
 */
#define MIN_PAS_ODO_Info6_ODO_X                     1

/**
 * Signal ODO_X raw maximum value.
 */
#define MAX_PAS_ODO_Info6_ODO_X                     65535

/**
 * Signal ODO_X raw offset value.
 */
#define OFF_PAS_ODO_Info6_ODO_X                     -32768

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_ODO_Info6_ODO_YawAngle Signal ODO_YawAngle of Message PAS_ODO_Info6 (0x1a5)
 *
 * angle between inertial system and vehicle longitudinal velocity in rad
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_ODO_Info6
 * @{
 */

/**
 * Signal ODO_YawAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_ODO_Info6_ODO_YawAngle and \ref GET_PAS_ODO_Info6_ODO_YawAngle instead.
 */
#define SIG_PAS_ODO_Info6_ODO_YawAngle              1, 0, 102, 16

/**
 * Signal ODO_YawAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_ODO_Info6_ODO_YawAngle or \ref INIT_PAS_ODO_Info6 instead.
 */
#define SETUP_PAS_ODO_Info6_ODO_YawAngle            1, 0, 102, 16, 0

/**
 * Get signal ODO_YawAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_ODO_Info6_ODO_YawAngle(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[12] >> 0) & 0x7f) << 9) \
	| (uint16_t)(+(uint16_t)((buf[13] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[14] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ODO_YawAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_ODO_Info6_ODO_YawAngle(buf, val) { \
	buf[12] &= ~(0x7f << 0); \
	buf[12] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x7f) << 0; \
	buf[13] &= ~(0xff << 0); \
	buf[13] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[14] &= ~(0x01 << 7); \
	buf[14] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ODO_YawAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_ODO_Info6_ODO_YawAngle(buf) \
	SET_PAS_ODO_Info6_ODO_YawAngle(buf, 0)

/**
 * Signal ODO_YawAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_ODO_Info6_ODO_YawAngle(x, fmt) \
	((x) * fmt * 524288 / 2147483647 + fmt * 314159 / (-100000))

/**
 * Signal ODO_YawAngle raw initial value.
 */
#define START_PAS_ODO_Info6_ODO_YawAngle            0

/**
 * Signal ODO_YawAngle raw minimum value.
 */
#define MIN_PAS_ODO_Info6_ODO_YawAngle              0

/**
 * Signal ODO_YawAngle raw maximum value.
 */
#define MAX_PAS_ODO_Info6_ODO_YawAngle              25736

/**
 * Signal ODO_YawAngle raw offset value.
 */
#define OFF_PAS_ODO_Info6_ODO_YawAngle              -12868

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_ODO_Info6_PAS_ODO_TimeStamp Signal PAS_ODO_TimeStamp of Message PAS_ODO_Info6 (0x1a5)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_ODO_Info6
 * @{
 */

/**
 * Signal PAS_ODO_TimeStamp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_ODO_Info6_PAS_ODO_TimeStamp and \ref GET_PAS_ODO_Info6_PAS_ODO_TimeStamp instead.
 */
#define SIG_PAS_ODO_Info6_PAS_ODO_TimeStamp         1, 0, 134, 32

/**
 * Signal PAS_ODO_TimeStamp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_ODO_Info6_PAS_ODO_TimeStamp or \ref INIT_PAS_ODO_Info6 instead.
 */
#define SETUP_PAS_ODO_Info6_PAS_ODO_TimeStamp       1, 0, 134, 32, 0

/**
 * Get signal PAS_ODO_TimeStamp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_ODO_Info6_PAS_ODO_TimeStamp(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[16] >> 0) & 0x7f) << 25) \
	| (uint32_t)(+(uint32_t)((buf[17] >> 0) & 0xff) << 17) \
	| (uint32_t)(+(uint32_t)((buf[18] >> 0) & 0xff) << 9) \
	| (uint16_t)(+(uint16_t)((buf[19] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[20] >> 7) & 0x01) << 0) \
)

/**
 * Set signal PAS_ODO_TimeStamp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_ODO_Info6_PAS_ODO_TimeStamp(buf, val) { \
	buf[16] &= ~(0x7f << 0); \
	buf[16] |= ((uint8_t)((uint32_t)(val) >> 25) & 0x7f) << 0; \
	buf[17] &= ~(0xff << 0); \
	buf[17] |= ((uint8_t)((uint32_t)(val) >> 17) & 0xff) << 0; \
	buf[18] &= ~(0xff << 0); \
	buf[18] |= ((uint8_t)((uint32_t)(val) >> 9) & 0xff) << 0; \
	buf[19] &= ~(0xff << 0); \
	buf[19] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[20] &= ~(0x01 << 7); \
	buf[20] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal PAS_ODO_TimeStamp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_ODO_Info6_PAS_ODO_TimeStamp(buf) \
	SET_PAS_ODO_Info6_PAS_ODO_TimeStamp(buf, 0)

/**
 * Signal PAS_ODO_TimeStamp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_ODO_Info6_PAS_ODO_TimeStamp(x, fmt) \
	((x) * fmt)

/**
 * Signal PAS_ODO_TimeStamp raw initial value.
 */
#define START_PAS_ODO_Info6_PAS_ODO_TimeStamp       0

/**
 * Signal PAS_ODO_TimeStamp raw minimum value.
 */
#define MIN_PAS_ODO_Info6_PAS_ODO_TimeStamp         0

/**
 * Signal PAS_ODO_TimeStamp raw maximum value.
 */
#define MAX_PAS_ODO_Info6_PAS_ODO_TimeStamp         65535

/**
 * Signal PAS_ODO_TimeStamp raw offset value.
 */
#define OFF_PAS_ODO_Info6_PAS_ODO_TimeStamp         0

/**
 * @}
 */

/**
 * @defgroup SIG_PAS_ODO_Info6_PAS_ODO_Y Signal PAS_ODO_Y of Message PAS_ODO_Info6 (0x1a5)
 *
 * nan
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_PAS_ODO_Info6
 * @{
 */

/**
 * Signal PAS_ODO_Y configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_PAS_ODO_Info6_PAS_ODO_Y and \ref GET_PAS_ODO_Info6_PAS_ODO_Y instead.
 */
#define SIG_PAS_ODO_Info6_PAS_ODO_Y                 1, 0, 166, 16

/**
 * Signal PAS_ODO_Y setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_PAS_ODO_Info6_PAS_ODO_Y or \ref INIT_PAS_ODO_Info6 instead.
 */
#define SETUP_PAS_ODO_Info6_PAS_ODO_Y               1, 0, 166, 16, 32768

/**
 * Get signal PAS_ODO_Y from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_PAS_ODO_Info6_PAS_ODO_Y(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[20] >> 0) & 0x7f) << 9) \
	| (uint16_t)(+(uint16_t)((buf[21] >> 0) & 0xff) << 1) \
	| (uint8_t)(+(uint8_t)((buf[22] >> 7) & 0x01) << 0) \
)

/**
 * Set signal PAS_ODO_Y in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_PAS_ODO_Info6_PAS_ODO_Y(buf, val) { \
	buf[20] &= ~(0x7f << 0); \
	buf[20] |= ((uint8_t)((uint16_t)(val) >> 9) & 0x7f) << 0; \
	buf[21] &= ~(0xff << 0); \
	buf[21] |= ((uint8_t)((uint16_t)(val) >> 1) & 0xff) << 0; \
	buf[22] &= ~(0x01 << 7); \
	buf[22] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal PAS_ODO_Y in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_PAS_ODO_Info6_PAS_ODO_Y(buf) \
	SET_PAS_ODO_Info6_PAS_ODO_Y(buf, 32768)

/**
 * Signal PAS_ODO_Y value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_PAS_ODO_Info6_PAS_ODO_Y(x, fmt) \
	((x) * fmt / 100 + fmt * 8192 / (-25))

/**
 * Signal PAS_ODO_Y raw initial value.
 */
#define START_PAS_ODO_Info6_PAS_ODO_Y               32768

/**
 * Signal PAS_ODO_Y raw minimum value.
 */
#define MIN_PAS_ODO_Info6_PAS_ODO_Y                 1

/**
 * Signal PAS_ODO_Y raw maximum value.
 */
#define MAX_PAS_ODO_Info6_PAS_ODO_Y                 65535

/**
 * Signal PAS_ODO_Y raw offset value.
 */
#define OFF_PAS_ODO_Info6_PAS_ODO_Y                 -32768

/**
 * @}
 */

/**
 * @defgroup SIG_ADAS_APA_PAS_ADAS_APA_PAS_Checksum Signal ADAS_APA_PAS_Checksum of Message ADAS_APA_PAS (0x2e0)
 *
 * Checksum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ADAS_APA_PAS
 * @{
 */

/**
 * Signal ADAS_APA_PAS_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ADAS_APA_PAS_ADAS_APA_PAS_Checksum and \ref GET_ADAS_APA_PAS_ADAS_APA_PAS_Checksum instead.
 */
#define SIG_ADAS_APA_PAS_ADAS_APA_PAS_Checksum        1, 0, 7, 8

/**
 * Signal ADAS_APA_PAS_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ADAS_APA_PAS_ADAS_APA_PAS_Checksum or \ref INIT_ADAS_APA_PAS instead.
 */
#define SETUP_ADAS_APA_PAS_ADAS_APA_PAS_Checksum      1, 0, 7, 8, 0

/**
 * Get signal ADAS_APA_PAS_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ADAS_APA_PAS_ADAS_APA_PAS_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ADAS_APA_PAS_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ADAS_APA_PAS_ADAS_APA_PAS_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ADAS_APA_PAS_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ADAS_APA_PAS_ADAS_APA_PAS_Checksum(buf) \
	SET_ADAS_APA_PAS_ADAS_APA_PAS_Checksum(buf, 0)

/**
 * Signal ADAS_APA_PAS_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ADAS_APA_PAS_ADAS_APA_PAS_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal ADAS_APA_PAS_Checksum raw initial value.
 */
#define START_ADAS_APA_PAS_ADAS_APA_PAS_Checksum      0

/**
 * Signal ADAS_APA_PAS_Checksum raw minimum value.
 */
#define MIN_ADAS_APA_PAS_ADAS_APA_PAS_Checksum        0

/**
 * Signal ADAS_APA_PAS_Checksum raw maximum value.
 */
#define MAX_ADAS_APA_PAS_ADAS_APA_PAS_Checksum        255

/**
 * Signal ADAS_APA_PAS_Checksum raw offset value.
 */
#define OFF_ADAS_APA_PAS_ADAS_APA_PAS_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter Signal ADAS_APA_PAS_MsgCounter of Message ADAS_APA_PAS (0x2e0)
 *
 * MsgCounter
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ADAS_APA_PAS
 * @{
 */

/**
 * Signal ADAS_APA_PAS_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter and \ref GET_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter instead.
 */
#define SIG_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter        1, 0, 11, 4

/**
 * Signal ADAS_APA_PAS_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter or \ref INIT_ADAS_APA_PAS instead.
 */
#define SETUP_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal ADAS_APA_PAS_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal ADAS_APA_PAS_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal ADAS_APA_PAS_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter(buf) \
	SET_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter(buf, 0)

/**
 * Signal ADAS_APA_PAS_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal ADAS_APA_PAS_MsgCounter raw initial value.
 */
#define START_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter      0

/**
 * Signal ADAS_APA_PAS_MsgCounter raw minimum value.
 */
#define MIN_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter        0

/**
 * Signal ADAS_APA_PAS_MsgCounter raw maximum value.
 */
#define MAX_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter        15

/**
 * Signal ADAS_APA_PAS_MsgCounter raw offset value.
 */
#define OFF_ADAS_APA_PAS_ADAS_APA_PAS_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_ADAS_APA_PAS_PASFunctionRequest Signal PASFunctionRequest of Message ADAS_APA_PAS (0x2e0)
 *
 * PAS function is requested or not
 *
 * Contains the value table \ref ENUM_ADAS_APA_PAS_PASFunctionRequest.
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ADAS_APA_PAS
 * @{
 */

/**
 * Signal PASFunctionRequest configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ADAS_APA_PAS_PASFunctionRequest and \ref GET_ADAS_APA_PAS_PASFunctionRequest instead.
 */
#define SIG_ADAS_APA_PAS_PASFunctionRequest         1, 0, 16, 1

/**
 * Signal PASFunctionRequest setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ADAS_APA_PAS_PASFunctionRequest or \ref INIT_ADAS_APA_PAS instead.
 */
#define SETUP_ADAS_APA_PAS_PASFunctionRequest       1, 0, 16, 1, 0

/**
 * Get signal PASFunctionRequest from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ADAS_APA_PAS_PASFunctionRequest(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x01) << 0) \
)

/**
 * Set signal PASFunctionRequest in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ADAS_APA_PAS_PASFunctionRequest(buf, val) { \
	buf[2] &= ~(0x01 << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal PASFunctionRequest in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ADAS_APA_PAS_PASFunctionRequest(buf) \
	SET_ADAS_APA_PAS_PASFunctionRequest(buf, 0)

/**
 * Signal PASFunctionRequest value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ADAS_APA_PAS_PASFunctionRequest(x, fmt) \
	((x) * fmt)

/**
 * Signal PASFunctionRequest raw initial value.
 */
#define START_ADAS_APA_PAS_PASFunctionRequest       0

/**
 * Signal PASFunctionRequest raw minimum value.
 */
#define MIN_ADAS_APA_PAS_PASFunctionRequest         0

/**
 * Signal PASFunctionRequest raw maximum value.
 */
#define MAX_ADAS_APA_PAS_PASFunctionRequest         1

/**
 * Signal PASFunctionRequest raw offset value.
 */
#define OFF_ADAS_APA_PAS_PASFunctionRequest         0

/**
 * @}
 */

/**
 * @defgroup ENUM_ADAS_APA_PAS_PASFunctionRequest Value Table for Signal PASFunctionRequest in Message ADAS_APA_PAS (0x2e0)
 *
 * Enum values defined for \ref SIG_ADAS_APA_PAS_PASFunctionRequest.
 *
 * @ingroup SIG_ADAS_APA_PAS_PASFunctionRequest
 */

/**
 * Value table ADAS_APA_PAS_PASFunctionRequest entry off.
 *
 * @ingroup ENUM_ADAS_APA_PAS_PASFunctionRequest
 */
#define ADAS_APA_PAS_PASFunctionRequest_off                 0

/**
 * Value table ADAS_APA_PAS_PASFunctionRequest entry on.
 *
 * @ingroup ENUM_ADAS_APA_PAS_PASFunctionRequest
 */
#define ADAS_APA_PAS_PASFunctionRequest_on                  1

/**
 * @defgroup SIG_ADAS_APA_PAS_PSLFunctionRequest Signal PSLFunctionRequest of Message ADAS_APA_PAS (0x2e0)
 *
 * PSL function is requested or not
 *
 * Contains the value table \ref ENUM_ADAS_APA_PAS_PSLFunctionRequest.
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ADAS_APA_PAS
 * @{
 */

/**
 * Signal PSLFunctionRequest configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ADAS_APA_PAS_PSLFunctionRequest and \ref GET_ADAS_APA_PAS_PSLFunctionRequest instead.
 */
#define SIG_ADAS_APA_PAS_PSLFunctionRequest         1, 0, 18, 2

/**
 * Signal PSLFunctionRequest setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ADAS_APA_PAS_PSLFunctionRequest or \ref INIT_ADAS_APA_PAS instead.
 */
#define SETUP_ADAS_APA_PAS_PSLFunctionRequest       1, 0, 18, 2, 0

/**
 * Get signal PSLFunctionRequest from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ADAS_APA_PAS_PSLFunctionRequest(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 1) & 0x03) << 0) \
)

/**
 * Set signal PSLFunctionRequest in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ADAS_APA_PAS_PSLFunctionRequest(buf, val) { \
	buf[2] &= ~(0x03 << 1); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal PSLFunctionRequest in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ADAS_APA_PAS_PSLFunctionRequest(buf) \
	SET_ADAS_APA_PAS_PSLFunctionRequest(buf, 0)

/**
 * Signal PSLFunctionRequest value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ADAS_APA_PAS_PSLFunctionRequest(x, fmt) \
	((x) * fmt)

/**
 * Signal PSLFunctionRequest raw initial value.
 */
#define START_ADAS_APA_PAS_PSLFunctionRequest       0

/**
 * Signal PSLFunctionRequest raw minimum value.
 */
#define MIN_ADAS_APA_PAS_PSLFunctionRequest         0

/**
 * Signal PSLFunctionRequest raw maximum value.
 */
#define MAX_ADAS_APA_PAS_PSLFunctionRequest         1

/**
 * Signal PSLFunctionRequest raw offset value.
 */
#define OFF_ADAS_APA_PAS_PSLFunctionRequest         0

/**
 * @}
 */

/**
 * @defgroup ENUM_ADAS_APA_PAS_PSLFunctionRequest Value Table for Signal PSLFunctionRequest in Message ADAS_APA_PAS (0x2e0)
 *
 * Enum values defined for \ref SIG_ADAS_APA_PAS_PSLFunctionRequest.
 *
 * @ingroup SIG_ADAS_APA_PAS_PSLFunctionRequest
 */

/**
 * Value table ADAS_APA_PAS_PSLFunctionRequest entry off.
 *
 * @ingroup ENUM_ADAS_APA_PAS_PSLFunctionRequest
 */
#define ADAS_APA_PAS_PSLFunctionRequest_off                 0

/**
 * Value table ADAS_APA_PAS_PSLFunctionRequest entry on.
 *
 * @ingroup ENUM_ADAS_APA_PAS_PSLFunctionRequest
 */
#define ADAS_APA_PAS_PSLFunctionRequest_on                  1

/**
 * @defgroup SIG_ADAS_APA_PAS_ParkingSlotIDSelected Signal ParkingSlotIDSelected of Message ADAS_APA_PAS (0x2e0)
 *
 * nan
 *
 * Contains the value table \ref ENUM_ADAS_APA_PAS_ParkingSlotIDSelected.
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ADAS_APA_PAS
 * @{
 */

/**
 * Signal ParkingSlotIDSelected configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ADAS_APA_PAS_ParkingSlotIDSelected and \ref GET_ADAS_APA_PAS_ParkingSlotIDSelected instead.
 */
#define SIG_ADAS_APA_PAS_ParkingSlotIDSelected        1, 0, 31, 8

/**
 * Signal ParkingSlotIDSelected setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ADAS_APA_PAS_ParkingSlotIDSelected or \ref INIT_ADAS_APA_PAS instead.
 */
#define SETUP_ADAS_APA_PAS_ParkingSlotIDSelected      1, 0, 31, 8, 0

/**
 * Get signal ParkingSlotIDSelected from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ADAS_APA_PAS_ParkingSlotIDSelected(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ParkingSlotIDSelected in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ADAS_APA_PAS_ParkingSlotIDSelected(buf, val) { \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ParkingSlotIDSelected in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ADAS_APA_PAS_ParkingSlotIDSelected(buf) \
	SET_ADAS_APA_PAS_ParkingSlotIDSelected(buf, 0)

/**
 * Signal ParkingSlotIDSelected value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ADAS_APA_PAS_ParkingSlotIDSelected(x, fmt) \
	((x) * fmt)

/**
 * Signal ParkingSlotIDSelected raw initial value.
 */
#define START_ADAS_APA_PAS_ParkingSlotIDSelected      0

/**
 * Signal ParkingSlotIDSelected raw minimum value.
 */
#define MIN_ADAS_APA_PAS_ParkingSlotIDSelected        0

/**
 * Signal ParkingSlotIDSelected raw maximum value.
 */
#define MAX_ADAS_APA_PAS_ParkingSlotIDSelected        255

/**
 * Signal ParkingSlotIDSelected raw offset value.
 */
#define OFF_ADAS_APA_PAS_ParkingSlotIDSelected        0

/**
 * @}
 */

/**
 * @defgroup ENUM_ADAS_APA_PAS_ParkingSlotIDSelected Value Table for Signal ParkingSlotIDSelected in Message ADAS_APA_PAS (0x2e0)
 *
 * Enum values defined for \ref SIG_ADAS_APA_PAS_ParkingSlotIDSelected.
 *
 * @ingroup SIG_ADAS_APA_PAS_ParkingSlotIDSelected
 */

/**
 * Value table ADAS_APA_PAS_ParkingSlotIDSelected entry No.
 *
 * Space
 *
 * @ingroup ENUM_ADAS_APA_PAS_ParkingSlotIDSelected
 */
#define ADAS_APA_PAS_ParkingSlotIDSelected_No                  0

/**
 * @defgroup SIG_ADAS_APA_PAS_ADASInfoAPAFunctionSt Signal ADASInfoAPAFunctionSt of Message ADAS_APA_PAS (0x2e0)
 *
 * APA功能状态
 *
 * Contains the value table \ref ENUM_ADAS_APA_PAS_ADASInfoAPAFunctionSt.
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ADAS_APA_PAS
 * @{
 */

/**
 * Signal ADASInfoAPAFunctionSt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ADAS_APA_PAS_ADASInfoAPAFunctionSt and \ref GET_ADAS_APA_PAS_ADASInfoAPAFunctionSt instead.
 */
#define SIG_ADAS_APA_PAS_ADASInfoAPAFunctionSt        1, 0, 23, 3

/**
 * Signal ADASInfoAPAFunctionSt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ADAS_APA_PAS_ADASInfoAPAFunctionSt or \ref INIT_ADAS_APA_PAS instead.
 */
#define SETUP_ADAS_APA_PAS_ADASInfoAPAFunctionSt      1, 0, 23, 3, 0

/**
 * Get signal ADASInfoAPAFunctionSt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ADAS_APA_PAS_ADASInfoAPAFunctionSt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) \
)

/**
 * Set signal ADASInfoAPAFunctionSt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ADAS_APA_PAS_ADASInfoAPAFunctionSt(buf, val) { \
	buf[2] &= ~(0x07 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal ADASInfoAPAFunctionSt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ADAS_APA_PAS_ADASInfoAPAFunctionSt(buf) \
	SET_ADAS_APA_PAS_ADASInfoAPAFunctionSt(buf, 0)

/**
 * Signal ADASInfoAPAFunctionSt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ADAS_APA_PAS_ADASInfoAPAFunctionSt(x, fmt) \
	((x) * fmt)

/**
 * Signal ADASInfoAPAFunctionSt raw initial value.
 */
#define START_ADAS_APA_PAS_ADASInfoAPAFunctionSt      0

/**
 * Signal ADASInfoAPAFunctionSt raw minimum value.
 */
#define MIN_ADAS_APA_PAS_ADASInfoAPAFunctionSt        0

/**
 * Signal ADASInfoAPAFunctionSt raw maximum value.
 */
#define MAX_ADAS_APA_PAS_ADASInfoAPAFunctionSt        7

/**
 * Signal ADASInfoAPAFunctionSt raw offset value.
 */
#define OFF_ADAS_APA_PAS_ADASInfoAPAFunctionSt        0

/**
 * @}
 */

/**
 * @defgroup ENUM_ADAS_APA_PAS_ADASInfoAPAFunctionSt Value Table for Signal ADASInfoAPAFunctionSt in Message ADAS_APA_PAS (0x2e0)
 *
 * Enum values defined for \ref SIG_ADAS_APA_PAS_ADASInfoAPAFunctionSt.
 *
 * @ingroup SIG_ADAS_APA_PAS_ADASInfoAPAFunctionSt
 */

/**
 * Value table ADAS_APA_PAS_ADASInfoAPAFunctionSt entry None.
 *
 * @ingroup ENUM_ADAS_APA_PAS_ADASInfoAPAFunctionSt
 */
#define ADAS_APA_PAS_ADASInfoAPAFunctionSt_None                0

/**
 * Value table ADAS_APA_PAS_ADASInfoAPAFunctionSt entry Standby.
 *
 * @ingroup ENUM_ADAS_APA_PAS_ADASInfoAPAFunctionSt
 */
#define ADAS_APA_PAS_ADASInfoAPAFunctionSt_Standby             1

/**
 * Value table ADAS_APA_PAS_ADASInfoAPAFunctionSt entry Search.
 *
 * @ingroup ENUM_ADAS_APA_PAS_ADASInfoAPAFunctionSt
 */
#define ADAS_APA_PAS_ADASInfoAPAFunctionSt_Search              2

/**
 * Value table ADAS_APA_PAS_ADASInfoAPAFunctionSt entry Guidance.
 *
 * @ingroup ENUM_ADAS_APA_PAS_ADASInfoAPAFunctionSt
 */
#define ADAS_APA_PAS_ADASInfoAPAFunctionSt_Guidance            3

/**
 * Value table ADAS_APA_PAS_ADASInfoAPAFunctionSt entry Failure.
 *
 * @ingroup ENUM_ADAS_APA_PAS_ADASInfoAPAFunctionSt
 */
#define ADAS_APA_PAS_ADASInfoAPAFunctionSt_Failure             4

/**
 * @defgroup SIG_ESP_SpdInfoF_ESP_SpdInfoF_Checksum Signal ESP_SpdInfoF_Checksum of Message ESP_SpdInfoF (0x127)
 *
 * Checksum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoF
 * @{
 */

/**
 * Signal ESP_SpdInfoF_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoF_ESP_SpdInfoF_Checksum and \ref GET_ESP_SpdInfoF_ESP_SpdInfoF_Checksum instead.
 */
#define SIG_ESP_SpdInfoF_ESP_SpdInfoF_Checksum        1, 0, 7, 8

/**
 * Signal ESP_SpdInfoF_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoF_ESP_SpdInfoF_Checksum or \ref INIT_ESP_SpdInfoF instead.
 */
#define SETUP_ESP_SpdInfoF_ESP_SpdInfoF_Checksum      1, 0, 7, 8, 0

/**
 * Get signal ESP_SpdInfoF_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoF_ESP_SpdInfoF_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_SpdInfoF_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoF_ESP_SpdInfoF_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_SpdInfoF_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoF_ESP_SpdInfoF_Checksum(buf) \
	SET_ESP_SpdInfoF_ESP_SpdInfoF_Checksum(buf, 0)

/**
 * Signal ESP_SpdInfoF_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoF_ESP_SpdInfoF_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_SpdInfoF_Checksum raw initial value.
 */
#define START_ESP_SpdInfoF_ESP_SpdInfoF_Checksum      0

/**
 * Signal ESP_SpdInfoF_Checksum raw minimum value.
 */
#define MIN_ESP_SpdInfoF_ESP_SpdInfoF_Checksum        0

/**
 * Signal ESP_SpdInfoF_Checksum raw maximum value.
 */
#define MAX_ESP_SpdInfoF_ESP_SpdInfoF_Checksum        255

/**
 * Signal ESP_SpdInfoF_Checksum raw offset value.
 */
#define OFF_ESP_SpdInfoF_ESP_SpdInfoF_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter Signal ESP_SpdInfoF_MsgCounter of Message ESP_SpdInfoF (0x127)
 *
 * MsgCounter
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoF
 * @{
 */

/**
 * Signal ESP_SpdInfoF_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter and \ref GET_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter instead.
 */
#define SIG_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter        1, 0, 11, 4

/**
 * Signal ESP_SpdInfoF_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter or \ref INIT_ESP_SpdInfoF instead.
 */
#define SETUP_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal ESP_SpdInfoF_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal ESP_SpdInfoF_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal ESP_SpdInfoF_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter(buf) \
	SET_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter(buf, 0)

/**
 * Signal ESP_SpdInfoF_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_SpdInfoF_MsgCounter raw initial value.
 */
#define START_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter      0

/**
 * Signal ESP_SpdInfoF_MsgCounter raw minimum value.
 */
#define MIN_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter        0

/**
 * Signal ESP_SpdInfoF_MsgCounter raw maximum value.
 */
#define MAX_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter        15

/**
 * Signal ESP_SpdInfoF_MsgCounter raw offset value.
 */
#define OFF_ESP_SpdInfoF_ESP_SpdInfoF_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdInfoF_ESP_FLWheelSpd Signal ESP_FLWheelSpd of Message ESP_SpdInfoF (0x127)
 *
 * ESP_Front Left Wheel Speed
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoF
 * @{
 */

/**
 * Signal ESP_FLWheelSpd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoF_ESP_FLWheelSpd and \ref GET_ESP_SpdInfoF_ESP_FLWheelSpd instead.
 */
#define SIG_ESP_SpdInfoF_ESP_FLWheelSpd             1, 0, 23, 13

/**
 * Signal ESP_FLWheelSpd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoF_ESP_FLWheelSpd or \ref INIT_ESP_SpdInfoF instead.
 */
#define SETUP_ESP_SpdInfoF_ESP_FLWheelSpd           1, 0, 23, 13, 0

/**
 * Get signal ESP_FLWheelSpd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoF_ESP_FLWheelSpd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 5) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ESP_FLWheelSpd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoF_ESP_FLWheelSpd(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0; \
	buf[3] &= ~(0x1f << 3); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ESP_FLWheelSpd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoF_ESP_FLWheelSpd(buf) \
	SET_ESP_SpdInfoF_ESP_FLWheelSpd(buf, 0)

/**
 * Signal ESP_FLWheelSpd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoF_ESP_FLWheelSpd(x, fmt) \
	((x) * fmt * 9 / 160)

/**
 * Signal ESP_FLWheelSpd raw initial value.
 */
#define START_ESP_SpdInfoF_ESP_FLWheelSpd           0

/**
 * Signal ESP_FLWheelSpd raw minimum value.
 */
#define MIN_ESP_SpdInfoF_ESP_FLWheelSpd             0

/**
 * Signal ESP_FLWheelSpd raw maximum value.
 */
#define MAX_ESP_SpdInfoF_ESP_FLWheelSpd             4267

/**
 * Signal ESP_FLWheelSpd raw offset value.
 */
#define OFF_ESP_SpdInfoF_ESP_FLWheelSpd             0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdInfoF_ESP_FLWheelSpdVD Signal ESP_FLWheelSpdVD of Message ESP_SpdInfoF (0x127)
 *
 * ESP_Front Left Wheel Speed Valid
 *
 * Contains the value table \ref ENUM_ESP_SpdInfoF_ESP_FLWheelSpdVD.
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoF
 * @{
 */

/**
 * Signal ESP_FLWheelSpdVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoF_ESP_FLWheelSpdVD and \ref GET_ESP_SpdInfoF_ESP_FLWheelSpdVD instead.
 */
#define SIG_ESP_SpdInfoF_ESP_FLWheelSpdVD           1, 0, 24, 1

/**
 * Signal ESP_FLWheelSpdVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoF_ESP_FLWheelSpdVD or \ref INIT_ESP_SpdInfoF instead.
 */
#define SETUP_ESP_SpdInfoF_ESP_FLWheelSpdVD         1, 0, 24, 1, 0

/**
 * Get signal ESP_FLWheelSpdVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoF_ESP_FLWheelSpdVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x01) << 0) \
)

/**
 * Set signal ESP_FLWheelSpdVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoF_ESP_FLWheelSpdVD(buf, val) { \
	buf[3] &= ~(0x01 << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal ESP_FLWheelSpdVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoF_ESP_FLWheelSpdVD(buf) \
	SET_ESP_SpdInfoF_ESP_FLWheelSpdVD(buf, 0)

/**
 * Signal ESP_FLWheelSpdVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoF_ESP_FLWheelSpdVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_FLWheelSpdVD raw initial value.
 */
#define START_ESP_SpdInfoF_ESP_FLWheelSpdVD         0

/**
 * Signal ESP_FLWheelSpdVD raw minimum value.
 */
#define MIN_ESP_SpdInfoF_ESP_FLWheelSpdVD           0

/**
 * Signal ESP_FLWheelSpdVD raw maximum value.
 */
#define MAX_ESP_SpdInfoF_ESP_FLWheelSpdVD           1

/**
 * Signal ESP_FLWheelSpdVD raw offset value.
 */
#define OFF_ESP_SpdInfoF_ESP_FLWheelSpdVD           0

/**
 * @}
 */

/**
 * @defgroup ENUM_ESP_SpdInfoF_ESP_FLWheelSpdVD Value Table for Signal ESP_FLWheelSpdVD in Message ESP_SpdInfoF (0x127)
 *
 * Enum values defined for \ref SIG_ESP_SpdInfoF_ESP_FLWheelSpdVD.
 *
 * @ingroup SIG_ESP_SpdInfoF_ESP_FLWheelSpdVD
 */

/**
 * Value table ESP_SpdInfoF_ESP_FLWheelSpdVD entry not.
 *
 * valid
 *
 * @ingroup ENUM_ESP_SpdInfoF_ESP_FLWheelSpdVD
 */
#define ESP_SpdInfoF_ESP_FLWheelSpdVD_not                 0

/**
 * Value table ESP_SpdInfoF_ESP_FLWheelSpdVD entry valid.
 *
 * @ingroup ENUM_ESP_SpdInfoF_ESP_FLWheelSpdVD
 */
#define ESP_SpdInfoF_ESP_FLWheelSpdVD_valid               1

/**
 * @defgroup SIG_ESP_SpdInfoF_ESP_FRWheelSpd Signal ESP_FRWheelSpd of Message ESP_SpdInfoF (0x127)
 *
 * ESP_Front Right Wheel Speed
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoF
 * @{
 */

/**
 * Signal ESP_FRWheelSpd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoF_ESP_FRWheelSpd and \ref GET_ESP_SpdInfoF_ESP_FRWheelSpd instead.
 */
#define SIG_ESP_SpdInfoF_ESP_FRWheelSpd             1, 0, 39, 13

/**
 * Signal ESP_FRWheelSpd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoF_ESP_FRWheelSpd or \ref INIT_ESP_SpdInfoF instead.
 */
#define SETUP_ESP_SpdInfoF_ESP_FRWheelSpd           1, 0, 39, 13, 0

/**
 * Get signal ESP_FRWheelSpd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoF_ESP_FRWheelSpd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 5) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ESP_FRWheelSpd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoF_ESP_FRWheelSpd(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0; \
	buf[5] &= ~(0x1f << 3); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ESP_FRWheelSpd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoF_ESP_FRWheelSpd(buf) \
	SET_ESP_SpdInfoF_ESP_FRWheelSpd(buf, 0)

/**
 * Signal ESP_FRWheelSpd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoF_ESP_FRWheelSpd(x, fmt) \
	((x) * fmt * 9 / 160)

/**
 * Signal ESP_FRWheelSpd raw initial value.
 */
#define START_ESP_SpdInfoF_ESP_FRWheelSpd           0

/**
 * Signal ESP_FRWheelSpd raw minimum value.
 */
#define MIN_ESP_SpdInfoF_ESP_FRWheelSpd             0

/**
 * Signal ESP_FRWheelSpd raw maximum value.
 */
#define MAX_ESP_SpdInfoF_ESP_FRWheelSpd             4267

/**
 * Signal ESP_FRWheelSpd raw offset value.
 */
#define OFF_ESP_SpdInfoF_ESP_FRWheelSpd             0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdInfoF_ESP_FRWheelSpdVD Signal ESP_FRWheelSpdVD of Message ESP_SpdInfoF (0x127)
 *
 * ESP_Front Right Wheel Speed Valid
 *
 * Contains the value table \ref ENUM_ESP_SpdInfoF_ESP_FRWheelSpdVD.
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoF
 * @{
 */

/**
 * Signal ESP_FRWheelSpdVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoF_ESP_FRWheelSpdVD and \ref GET_ESP_SpdInfoF_ESP_FRWheelSpdVD instead.
 */
#define SIG_ESP_SpdInfoF_ESP_FRWheelSpdVD           1, 0, 40, 1

/**
 * Signal ESP_FRWheelSpdVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoF_ESP_FRWheelSpdVD or \ref INIT_ESP_SpdInfoF instead.
 */
#define SETUP_ESP_SpdInfoF_ESP_FRWheelSpdVD         1, 0, 40, 1, 0

/**
 * Get signal ESP_FRWheelSpdVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoF_ESP_FRWheelSpdVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x01) << 0) \
)

/**
 * Set signal ESP_FRWheelSpdVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoF_ESP_FRWheelSpdVD(buf, val) { \
	buf[5] &= ~(0x01 << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal ESP_FRWheelSpdVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoF_ESP_FRWheelSpdVD(buf) \
	SET_ESP_SpdInfoF_ESP_FRWheelSpdVD(buf, 0)

/**
 * Signal ESP_FRWheelSpdVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoF_ESP_FRWheelSpdVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_FRWheelSpdVD raw initial value.
 */
#define START_ESP_SpdInfoF_ESP_FRWheelSpdVD         0

/**
 * Signal ESP_FRWheelSpdVD raw minimum value.
 */
#define MIN_ESP_SpdInfoF_ESP_FRWheelSpdVD           0

/**
 * Signal ESP_FRWheelSpdVD raw maximum value.
 */
#define MAX_ESP_SpdInfoF_ESP_FRWheelSpdVD           1

/**
 * Signal ESP_FRWheelSpdVD raw offset value.
 */
#define OFF_ESP_SpdInfoF_ESP_FRWheelSpdVD           0

/**
 * @}
 */

/**
 * @defgroup ENUM_ESP_SpdInfoF_ESP_FRWheelSpdVD Value Table for Signal ESP_FRWheelSpdVD in Message ESP_SpdInfoF (0x127)
 *
 * Enum values defined for \ref SIG_ESP_SpdInfoF_ESP_FRWheelSpdVD.
 *
 * @ingroup SIG_ESP_SpdInfoF_ESP_FRWheelSpdVD
 */

/**
 * Value table ESP_SpdInfoF_ESP_FRWheelSpdVD entry not.
 *
 * valid
 *
 * @ingroup ENUM_ESP_SpdInfoF_ESP_FRWheelSpdVD
 */
#define ESP_SpdInfoF_ESP_FRWheelSpdVD_not                 0

/**
 * Value table ESP_SpdInfoF_ESP_FRWheelSpdVD entry valid.
 *
 * @ingroup ENUM_ESP_SpdInfoF_ESP_FRWheelSpdVD
 */
#define ESP_SpdInfoF_ESP_FRWheelSpdVD_valid               1

/**
 * @defgroup SIG_ESP_SpdInfoF_ESP_VehSpd Signal ESP_VehSpd of Message ESP_SpdInfoF (0x127)
 *
 * ESP_Vehicle Speed
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoF
 * @{
 */

/**
 * Signal ESP_VehSpd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoF_ESP_VehSpd and \ref GET_ESP_SpdInfoF_ESP_VehSpd instead.
 */
#define SIG_ESP_SpdInfoF_ESP_VehSpd                 1, 0, 55, 13

/**
 * Signal ESP_VehSpd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoF_ESP_VehSpd or \ref INIT_ESP_SpdInfoF instead.
 */
#define SETUP_ESP_SpdInfoF_ESP_VehSpd               1, 0, 55, 13, 0

/**
 * Get signal ESP_VehSpd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoF_ESP_VehSpd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 5) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ESP_VehSpd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoF_ESP_VehSpd(buf, val) { \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0; \
	buf[7] &= ~(0x1f << 3); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ESP_VehSpd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoF_ESP_VehSpd(buf) \
	SET_ESP_SpdInfoF_ESP_VehSpd(buf, 0)

/**
 * Signal ESP_VehSpd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoF_ESP_VehSpd(x, fmt) \
	((x) * fmt * 9 / 160)

/**
 * Signal ESP_VehSpd raw initial value.
 */
#define START_ESP_SpdInfoF_ESP_VehSpd               0

/**
 * Signal ESP_VehSpd raw minimum value.
 */
#define MIN_ESP_SpdInfoF_ESP_VehSpd                 0

/**
 * Signal ESP_VehSpd raw maximum value.
 */
#define MAX_ESP_SpdInfoF_ESP_VehSpd                 4267

/**
 * Signal ESP_VehSpd raw offset value.
 */
#define OFF_ESP_SpdInfoF_ESP_VehSpd                 0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdInfoF_ESP_VheSpdVD Signal ESP_VheSpdVD of Message ESP_SpdInfoF (0x127)
 *
 * ESP_Vehicle Speed Valid
 *
 * Contains the value table \ref ENUM_ESP_SpdInfoF_ESP_VheSpdVD.
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoF
 * @{
 */

/**
 * Signal ESP_VheSpdVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoF_ESP_VheSpdVD and \ref GET_ESP_SpdInfoF_ESP_VheSpdVD instead.
 */
#define SIG_ESP_SpdInfoF_ESP_VheSpdVD               1, 0, 69, 2

/**
 * Signal ESP_VheSpdVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoF_ESP_VheSpdVD or \ref INIT_ESP_SpdInfoF instead.
 */
#define SETUP_ESP_SpdInfoF_ESP_VheSpdVD             1, 0, 69, 2, 0

/**
 * Get signal ESP_VheSpdVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoF_ESP_VheSpdVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 4) & 0x03) << 0) \
)

/**
 * Set signal ESP_VheSpdVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoF_ESP_VheSpdVD(buf, val) { \
	buf[8] &= ~(0x03 << 4); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 4; \
}

/**
 * Set signal ESP_VheSpdVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoF_ESP_VheSpdVD(buf) \
	SET_ESP_SpdInfoF_ESP_VheSpdVD(buf, 0)

/**
 * Signal ESP_VheSpdVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoF_ESP_VheSpdVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_VheSpdVD raw initial value.
 */
#define START_ESP_SpdInfoF_ESP_VheSpdVD             0

/**
 * Signal ESP_VheSpdVD raw minimum value.
 */
#define MIN_ESP_SpdInfoF_ESP_VheSpdVD               0

/**
 * Signal ESP_VheSpdVD raw maximum value.
 */
#define MAX_ESP_SpdInfoF_ESP_VheSpdVD               3

/**
 * Signal ESP_VheSpdVD raw offset value.
 */
#define OFF_ESP_SpdInfoF_ESP_VheSpdVD               0

/**
 * @}
 */

/**
 * @defgroup ENUM_ESP_SpdInfoF_ESP_VheSpdVD Value Table for Signal ESP_VheSpdVD in Message ESP_SpdInfoF (0x127)
 *
 * Enum values defined for \ref SIG_ESP_SpdInfoF_ESP_VheSpdVD.
 *
 * @ingroup SIG_ESP_SpdInfoF_ESP_VheSpdVD
 */

/**
 * Value table ESP_SpdInfoF_ESP_VheSpdVD entry not.
 *
 * initialized
 *
 * @ingroup ENUM_ESP_SpdInfoF_ESP_VheSpdVD
 */
#define ESP_SpdInfoF_ESP_VheSpdVD_not                 0

/**
 * Value table ESP_SpdInfoF_ESP_VheSpdVD entry valid.
 *
 * @ingroup ENUM_ESP_SpdInfoF_ESP_VheSpdVD
 */
#define ESP_SpdInfoF_ESP_VheSpdVD_valid               1

/**
 * Value table ESP_SpdInfoF_ESP_VheSpdVD entry invalid.
 *
 * @ingroup ENUM_ESP_SpdInfoF_ESP_VheSpdVD
 */
#define ESP_SpdInfoF_ESP_VheSpdVD_invalid             2

/**
 * Value table ESP_SpdInfoF_ESP_VheSpdVD entry reserved.
 *
 * @ingroup ENUM_ESP_SpdInfoF_ESP_VheSpdVD
 */
#define ESP_SpdInfoF_ESP_VheSpdVD_reserved            3

/**
 * @defgroup SIG_ESP_SpdInfoR_ESP_SpdInfoR_Checksum Signal ESP_SpdInfoR_Checksum of Message ESP_SpdInfoR (0x128)
 *
 * Checksum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoR
 * @{
 */

/**
 * Signal ESP_SpdInfoR_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoR_ESP_SpdInfoR_Checksum and \ref GET_ESP_SpdInfoR_ESP_SpdInfoR_Checksum instead.
 */
#define SIG_ESP_SpdInfoR_ESP_SpdInfoR_Checksum        1, 0, 7, 8

/**
 * Signal ESP_SpdInfoR_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoR_ESP_SpdInfoR_Checksum or \ref INIT_ESP_SpdInfoR instead.
 */
#define SETUP_ESP_SpdInfoR_ESP_SpdInfoR_Checksum      1, 0, 7, 8, 0

/**
 * Get signal ESP_SpdInfoR_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoR_ESP_SpdInfoR_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_SpdInfoR_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoR_ESP_SpdInfoR_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_SpdInfoR_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoR_ESP_SpdInfoR_Checksum(buf) \
	SET_ESP_SpdInfoR_ESP_SpdInfoR_Checksum(buf, 0)

/**
 * Signal ESP_SpdInfoR_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoR_ESP_SpdInfoR_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_SpdInfoR_Checksum raw initial value.
 */
#define START_ESP_SpdInfoR_ESP_SpdInfoR_Checksum      0

/**
 * Signal ESP_SpdInfoR_Checksum raw minimum value.
 */
#define MIN_ESP_SpdInfoR_ESP_SpdInfoR_Checksum        0

/**
 * Signal ESP_SpdInfoR_Checksum raw maximum value.
 */
#define MAX_ESP_SpdInfoR_ESP_SpdInfoR_Checksum        255

/**
 * Signal ESP_SpdInfoR_Checksum raw offset value.
 */
#define OFF_ESP_SpdInfoR_ESP_SpdInfoR_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter Signal ESP_SpdInfoR_MsgCounter of Message ESP_SpdInfoR (0x128)
 *
 * MsgCounter
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoR
 * @{
 */

/**
 * Signal ESP_SpdInfoR_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter and \ref GET_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter instead.
 */
#define SIG_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter        1, 0, 11, 4

/**
 * Signal ESP_SpdInfoR_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter or \ref INIT_ESP_SpdInfoR instead.
 */
#define SETUP_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal ESP_SpdInfoR_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal ESP_SpdInfoR_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal ESP_SpdInfoR_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter(buf) \
	SET_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter(buf, 0)

/**
 * Signal ESP_SpdInfoR_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_SpdInfoR_MsgCounter raw initial value.
 */
#define START_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter      0

/**
 * Signal ESP_SpdInfoR_MsgCounter raw minimum value.
 */
#define MIN_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter        0

/**
 * Signal ESP_SpdInfoR_MsgCounter raw maximum value.
 */
#define MAX_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter        15

/**
 * Signal ESP_SpdInfoR_MsgCounter raw offset value.
 */
#define OFF_ESP_SpdInfoR_ESP_SpdInfoR_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdInfoR_ESP_RLWheelSpd Signal ESP_RLWheelSpd of Message ESP_SpdInfoR (0x128)
 *
 * ESP_Rear Left Wheed Speed
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoR
 * @{
 */

/**
 * Signal ESP_RLWheelSpd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoR_ESP_RLWheelSpd and \ref GET_ESP_SpdInfoR_ESP_RLWheelSpd instead.
 */
#define SIG_ESP_SpdInfoR_ESP_RLWheelSpd             1, 0, 23, 13

/**
 * Signal ESP_RLWheelSpd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoR_ESP_RLWheelSpd or \ref INIT_ESP_SpdInfoR instead.
 */
#define SETUP_ESP_SpdInfoR_ESP_RLWheelSpd           1, 0, 23, 13, 0

/**
 * Get signal ESP_RLWheelSpd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoR_ESP_RLWheelSpd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 5) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ESP_RLWheelSpd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoR_ESP_RLWheelSpd(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0; \
	buf[3] &= ~(0x1f << 3); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ESP_RLWheelSpd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoR_ESP_RLWheelSpd(buf) \
	SET_ESP_SpdInfoR_ESP_RLWheelSpd(buf, 0)

/**
 * Signal ESP_RLWheelSpd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoR_ESP_RLWheelSpd(x, fmt) \
	((x) * fmt * 9 / 160)

/**
 * Signal ESP_RLWheelSpd raw initial value.
 */
#define START_ESP_SpdInfoR_ESP_RLWheelSpd           0

/**
 * Signal ESP_RLWheelSpd raw minimum value.
 */
#define MIN_ESP_SpdInfoR_ESP_RLWheelSpd             0

/**
 * Signal ESP_RLWheelSpd raw maximum value.
 */
#define MAX_ESP_SpdInfoR_ESP_RLWheelSpd             4267

/**
 * Signal ESP_RLWheelSpd raw offset value.
 */
#define OFF_ESP_SpdInfoR_ESP_RLWheelSpd             0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdInfoR_ESP_RLWheelSpdVD Signal ESP_RLWheelSpdVD of Message ESP_SpdInfoR (0x128)
 *
 * ESP_Rear Left Wheed Speed Valid
 *
 * Contains the value table \ref ENUM_ESP_SpdInfoR_ESP_RLWheelSpdVD.
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoR
 * @{
 */

/**
 * Signal ESP_RLWheelSpdVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoR_ESP_RLWheelSpdVD and \ref GET_ESP_SpdInfoR_ESP_RLWheelSpdVD instead.
 */
#define SIG_ESP_SpdInfoR_ESP_RLWheelSpdVD           1, 0, 24, 1

/**
 * Signal ESP_RLWheelSpdVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoR_ESP_RLWheelSpdVD or \ref INIT_ESP_SpdInfoR instead.
 */
#define SETUP_ESP_SpdInfoR_ESP_RLWheelSpdVD         1, 0, 24, 1, 0

/**
 * Get signal ESP_RLWheelSpdVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoR_ESP_RLWheelSpdVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x01) << 0) \
)

/**
 * Set signal ESP_RLWheelSpdVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoR_ESP_RLWheelSpdVD(buf, val) { \
	buf[3] &= ~(0x01 << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal ESP_RLWheelSpdVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoR_ESP_RLWheelSpdVD(buf) \
	SET_ESP_SpdInfoR_ESP_RLWheelSpdVD(buf, 0)

/**
 * Signal ESP_RLWheelSpdVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoR_ESP_RLWheelSpdVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_RLWheelSpdVD raw initial value.
 */
#define START_ESP_SpdInfoR_ESP_RLWheelSpdVD         0

/**
 * Signal ESP_RLWheelSpdVD raw minimum value.
 */
#define MIN_ESP_SpdInfoR_ESP_RLWheelSpdVD           0

/**
 * Signal ESP_RLWheelSpdVD raw maximum value.
 */
#define MAX_ESP_SpdInfoR_ESP_RLWheelSpdVD           1

/**
 * Signal ESP_RLWheelSpdVD raw offset value.
 */
#define OFF_ESP_SpdInfoR_ESP_RLWheelSpdVD           0

/**
 * @}
 */

/**
 * @defgroup ENUM_ESP_SpdInfoR_ESP_RLWheelSpdVD Value Table for Signal ESP_RLWheelSpdVD in Message ESP_SpdInfoR (0x128)
 *
 * Enum values defined for \ref SIG_ESP_SpdInfoR_ESP_RLWheelSpdVD.
 *
 * @ingroup SIG_ESP_SpdInfoR_ESP_RLWheelSpdVD
 */

/**
 * Value table ESP_SpdInfoR_ESP_RLWheelSpdVD entry not.
 *
 * valid
 *
 * @ingroup ENUM_ESP_SpdInfoR_ESP_RLWheelSpdVD
 */
#define ESP_SpdInfoR_ESP_RLWheelSpdVD_not                 0

/**
 * Value table ESP_SpdInfoR_ESP_RLWheelSpdVD entry valid.
 *
 * @ingroup ENUM_ESP_SpdInfoR_ESP_RLWheelSpdVD
 */
#define ESP_SpdInfoR_ESP_RLWheelSpdVD_valid               1

/**
 * @defgroup SIG_ESP_SpdInfoR_ESP_RRWheelSpd Signal ESP_RRWheelSpd of Message ESP_SpdInfoR (0x128)
 *
 * ESP_Rear Right Wheed Speed
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoR
 * @{
 */

/**
 * Signal ESP_RRWheelSpd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoR_ESP_RRWheelSpd and \ref GET_ESP_SpdInfoR_ESP_RRWheelSpd instead.
 */
#define SIG_ESP_SpdInfoR_ESP_RRWheelSpd             1, 0, 39, 13

/**
 * Signal ESP_RRWheelSpd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoR_ESP_RRWheelSpd or \ref INIT_ESP_SpdInfoR instead.
 */
#define SETUP_ESP_SpdInfoR_ESP_RRWheelSpd           1, 0, 39, 13, 0

/**
 * Get signal ESP_RRWheelSpd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoR_ESP_RRWheelSpd(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 5) \
	| (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal ESP_RRWheelSpd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoR_ESP_RRWheelSpd(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 5) & 0xff) << 0; \
	buf[5] &= ~(0x1f << 3); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal ESP_RRWheelSpd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoR_ESP_RRWheelSpd(buf) \
	SET_ESP_SpdInfoR_ESP_RRWheelSpd(buf, 0)

/**
 * Signal ESP_RRWheelSpd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoR_ESP_RRWheelSpd(x, fmt) \
	((x) * fmt * 9 / 160)

/**
 * Signal ESP_RRWheelSpd raw initial value.
 */
#define START_ESP_SpdInfoR_ESP_RRWheelSpd           0

/**
 * Signal ESP_RRWheelSpd raw minimum value.
 */
#define MIN_ESP_SpdInfoR_ESP_RRWheelSpd             0

/**
 * Signal ESP_RRWheelSpd raw maximum value.
 */
#define MAX_ESP_SpdInfoR_ESP_RRWheelSpd             4267

/**
 * Signal ESP_RRWheelSpd raw offset value.
 */
#define OFF_ESP_SpdInfoR_ESP_RRWheelSpd             0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdInfoR_ESP_RRWheelSpdVD Signal ESP_RRWheelSpdVD of Message ESP_SpdInfoR (0x128)
 *
 * ESP_Rear Right Wheed Speed Valid
 *
 * Contains the value table \ref ENUM_ESP_SpdInfoR_ESP_RRWheelSpdVD.
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdInfoR
 * @{
 */

/**
 * Signal ESP_RRWheelSpdVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdInfoR_ESP_RRWheelSpdVD and \ref GET_ESP_SpdInfoR_ESP_RRWheelSpdVD instead.
 */
#define SIG_ESP_SpdInfoR_ESP_RRWheelSpdVD           1, 0, 40, 1

/**
 * Signal ESP_RRWheelSpdVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdInfoR_ESP_RRWheelSpdVD or \ref INIT_ESP_SpdInfoR instead.
 */
#define SETUP_ESP_SpdInfoR_ESP_RRWheelSpdVD         1, 0, 40, 1, 0

/**
 * Get signal ESP_RRWheelSpdVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdInfoR_ESP_RRWheelSpdVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x01) << 0) \
)

/**
 * Set signal ESP_RRWheelSpdVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdInfoR_ESP_RRWheelSpdVD(buf, val) { \
	buf[5] &= ~(0x01 << 0); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal ESP_RRWheelSpdVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdInfoR_ESP_RRWheelSpdVD(buf) \
	SET_ESP_SpdInfoR_ESP_RRWheelSpdVD(buf, 0)

/**
 * Signal ESP_RRWheelSpdVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdInfoR_ESP_RRWheelSpdVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_RRWheelSpdVD raw initial value.
 */
#define START_ESP_SpdInfoR_ESP_RRWheelSpdVD         0

/**
 * Signal ESP_RRWheelSpdVD raw minimum value.
 */
#define MIN_ESP_SpdInfoR_ESP_RRWheelSpdVD           0

/**
 * Signal ESP_RRWheelSpdVD raw maximum value.
 */
#define MAX_ESP_SpdInfoR_ESP_RRWheelSpdVD           1

/**
 * Signal ESP_RRWheelSpdVD raw offset value.
 */
#define OFF_ESP_SpdInfoR_ESP_RRWheelSpdVD           0

/**
 * @}
 */

/**
 * @defgroup ENUM_ESP_SpdInfoR_ESP_RRWheelSpdVD Value Table for Signal ESP_RRWheelSpdVD in Message ESP_SpdInfoR (0x128)
 *
 * Enum values defined for \ref SIG_ESP_SpdInfoR_ESP_RRWheelSpdVD.
 *
 * @ingroup SIG_ESP_SpdInfoR_ESP_RRWheelSpdVD
 */

/**
 * Value table ESP_SpdInfoR_ESP_RRWheelSpdVD entry not.
 *
 * valid
 *
 * @ingroup ENUM_ESP_SpdInfoR_ESP_RRWheelSpdVD
 */
#define ESP_SpdInfoR_ESP_RRWheelSpdVD_not                 0

/**
 * Value table ESP_SpdInfoR_ESP_RRWheelSpdVD entry valid.
 *
 * @ingroup ENUM_ESP_SpdInfoR_ESP_RRWheelSpdVD
 */
#define ESP_SpdInfoR_ESP_RRWheelSpdVD_valid               1

/**
 * @defgroup SIG_ESP_SpdEdges_ESP_SpdEdges_Checksum Signal ESP_SpdEdges_Checksum of Message ESP_SpdEdges (0x12a)
 *
 * Checksum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdEdges
 * @{
 */

/**
 * Signal ESP_SpdEdges_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdEdges_ESP_SpdEdges_Checksum and \ref GET_ESP_SpdEdges_ESP_SpdEdges_Checksum instead.
 */
#define SIG_ESP_SpdEdges_ESP_SpdEdges_Checksum        1, 0, 7, 8

/**
 * Signal ESP_SpdEdges_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdEdges_ESP_SpdEdges_Checksum or \ref INIT_ESP_SpdEdges instead.
 */
#define SETUP_ESP_SpdEdges_ESP_SpdEdges_Checksum      1, 0, 7, 8, 0

/**
 * Get signal ESP_SpdEdges_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdEdges_ESP_SpdEdges_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_SpdEdges_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdEdges_ESP_SpdEdges_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_SpdEdges_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdEdges_ESP_SpdEdges_Checksum(buf) \
	SET_ESP_SpdEdges_ESP_SpdEdges_Checksum(buf, 0)

/**
 * Signal ESP_SpdEdges_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdEdges_ESP_SpdEdges_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_SpdEdges_Checksum raw initial value.
 */
#define START_ESP_SpdEdges_ESP_SpdEdges_Checksum      0

/**
 * Signal ESP_SpdEdges_Checksum raw minimum value.
 */
#define MIN_ESP_SpdEdges_ESP_SpdEdges_Checksum        0

/**
 * Signal ESP_SpdEdges_Checksum raw maximum value.
 */
#define MAX_ESP_SpdEdges_ESP_SpdEdges_Checksum        255

/**
 * Signal ESP_SpdEdges_Checksum raw offset value.
 */
#define OFF_ESP_SpdEdges_ESP_SpdEdges_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdEdges_ESP_SpdEdges_MsgCounter Signal ESP_SpdEdges_MsgCounter of Message ESP_SpdEdges (0x12a)
 *
 * MsgCounter
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdEdges
 * @{
 */

/**
 * Signal ESP_SpdEdges_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdEdges_ESP_SpdEdges_MsgCounter and \ref GET_ESP_SpdEdges_ESP_SpdEdges_MsgCounter instead.
 */
#define SIG_ESP_SpdEdges_ESP_SpdEdges_MsgCounter        1, 0, 11, 4

/**
 * Signal ESP_SpdEdges_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdEdges_ESP_SpdEdges_MsgCounter or \ref INIT_ESP_SpdEdges instead.
 */
#define SETUP_ESP_SpdEdges_ESP_SpdEdges_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal ESP_SpdEdges_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdEdges_ESP_SpdEdges_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal ESP_SpdEdges_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdEdges_ESP_SpdEdges_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal ESP_SpdEdges_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdEdges_ESP_SpdEdges_MsgCounter(buf) \
	SET_ESP_SpdEdges_ESP_SpdEdges_MsgCounter(buf, 0)

/**
 * Signal ESP_SpdEdges_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdEdges_ESP_SpdEdges_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_SpdEdges_MsgCounter raw initial value.
 */
#define START_ESP_SpdEdges_ESP_SpdEdges_MsgCounter      0

/**
 * Signal ESP_SpdEdges_MsgCounter raw minimum value.
 */
#define MIN_ESP_SpdEdges_ESP_SpdEdges_MsgCounter        0

/**
 * Signal ESP_SpdEdges_MsgCounter raw maximum value.
 */
#define MAX_ESP_SpdEdges_ESP_SpdEdges_MsgCounter        15

/**
 * Signal ESP_SpdEdges_MsgCounter raw offset value.
 */
#define OFF_ESP_SpdEdges_ESP_SpdEdges_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum Signal ESP_FLWheelSpdEdgesSum of Message ESP_SpdEdges (0x12a)
 *
 * ESP_Front Left Wheel Speed Edges Sum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdEdges
 * @{
 */

/**
 * Signal ESP_FLWheelSpdEdgesSum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum and \ref GET_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum instead.
 */
#define SIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum        1, 0, 27, 12

/**
 * Signal ESP_FLWheelSpdEdgesSum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum or \ref INIT_ESP_SpdEdges instead.
 */
#define SETUP_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum      1, 0, 27, 12, 0

/**
 * Get signal ESP_FLWheelSpdEdgesSum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_FLWheelSpdEdgesSum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_FLWheelSpdEdgesSum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum(buf) \
	SET_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum(buf, 0)

/**
 * Signal ESP_FLWheelSpdEdgesSum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_FLWheelSpdEdgesSum raw initial value.
 */
#define START_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum      0

/**
 * Signal ESP_FLWheelSpdEdgesSum raw minimum value.
 */
#define MIN_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum        0

/**
 * Signal ESP_FLWheelSpdEdgesSum raw maximum value.
 */
#define MAX_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum        4095

/**
 * Signal ESP_FLWheelSpdEdgesSum raw offset value.
 */
#define OFF_ESP_SpdEdges_ESP_FLWheelSpdEdgesSum        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum Signal ESP_FRWheelSpdEdgesSum of Message ESP_SpdEdges (0x12a)
 *
 * ESP_Front Right Wheel Speed Edges Sum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdEdges
 * @{
 */

/**
 * Signal ESP_FRWheelSpdEdgesSum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum and \ref GET_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum instead.
 */
#define SIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum        1, 0, 23, 12

/**
 * Signal ESP_FRWheelSpdEdgesSum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum or \ref INIT_ESP_SpdEdges instead.
 */
#define SETUP_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum      1, 0, 23, 12, 0

/**
 * Get signal ESP_FRWheelSpdEdgesSum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 4) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ESP_FRWheelSpdEdgesSum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ESP_FRWheelSpdEdgesSum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum(buf) \
	SET_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum(buf, 0)

/**
 * Signal ESP_FRWheelSpdEdgesSum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_FRWheelSpdEdgesSum raw initial value.
 */
#define START_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum      0

/**
 * Signal ESP_FRWheelSpdEdgesSum raw minimum value.
 */
#define MIN_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum        0

/**
 * Signal ESP_FRWheelSpdEdgesSum raw maximum value.
 */
#define MAX_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum        4095

/**
 * Signal ESP_FRWheelSpdEdgesSum raw offset value.
 */
#define OFF_ESP_SpdEdges_ESP_FRWheelSpdEdgesSum        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum Signal ESP_RLWheelSpdEdgesSum of Message ESP_SpdEdges (0x12a)
 *
 * ESP_Rear Left Wheel Speed Edges Sum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdEdges
 * @{
 */

/**
 * Signal ESP_RLWheelSpdEdgesSum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum and \ref GET_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum instead.
 */
#define SIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum        1, 0, 47, 12

/**
 * Signal ESP_RLWheelSpdEdgesSum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum or \ref INIT_ESP_SpdEdges instead.
 */
#define SETUP_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum      1, 0, 47, 12, 0

/**
 * Get signal ESP_RLWheelSpdEdgesSum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 4) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ESP_RLWheelSpdEdgesSum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum(buf, val) { \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[6] &= ~(0x0f << 4); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ESP_RLWheelSpdEdgesSum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum(buf) \
	SET_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum(buf, 0)

/**
 * Signal ESP_RLWheelSpdEdgesSum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_RLWheelSpdEdgesSum raw initial value.
 */
#define START_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum      0

/**
 * Signal ESP_RLWheelSpdEdgesSum raw minimum value.
 */
#define MIN_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum        0

/**
 * Signal ESP_RLWheelSpdEdgesSum raw maximum value.
 */
#define MAX_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum        4095

/**
 * Signal ESP_RLWheelSpdEdgesSum raw offset value.
 */
#define OFF_ESP_SpdEdges_ESP_RLWheelSpdEdgesSum        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum Signal ESP_RRWheelSpdEdgesSum of Message ESP_SpdEdges (0x12a)
 *
 * ESP_Rear Right Wheel Speed Edges Sum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdEdges
 * @{
 */

/**
 * Signal ESP_RRWheelSpdEdgesSum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum and \ref GET_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum instead.
 */
#define SIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum        1, 0, 51, 12

/**
 * Signal ESP_RRWheelSpdEdgesSum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum or \ref INIT_ESP_SpdEdges instead.
 */
#define SETUP_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum      1, 0, 51, 12, 0

/**
 * Get signal ESP_RRWheelSpdEdgesSum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x0f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_RRWheelSpdEdgesSum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum(buf, val) { \
	buf[6] &= ~(0x0f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_RRWheelSpdEdgesSum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum(buf) \
	SET_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum(buf, 0)

/**
 * Signal ESP_RRWheelSpdEdgesSum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_RRWheelSpdEdgesSum raw initial value.
 */
#define START_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum      0

/**
 * Signal ESP_RRWheelSpdEdgesSum raw minimum value.
 */
#define MIN_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum        0

/**
 * Signal ESP_RRWheelSpdEdgesSum raw maximum value.
 */
#define MAX_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum        4095

/**
 * Signal ESP_RRWheelSpdEdgesSum raw offset value.
 */
#define OFF_ESP_SpdEdges_ESP_RRWheelSpdEdgesSum        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD Signal ESP_FLWheelSpdEdgesSumVD of Message ESP_SpdEdges (0x12a)
 *
 * Quality/fault information to ESP_Front Left Wheel Speed Edges Sum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdEdges
 * @{
 */

/**
 * Signal ESP_FLWheelSpdEdgesSumVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD and \ref GET_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD instead.
 */
#define SIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD        1, 0, 68, 1

/**
 * Signal ESP_FLWheelSpdEdgesSumVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD or \ref INIT_ESP_SpdEdges instead.
 */
#define SETUP_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD      1, 0, 68, 1, 0

/**
 * Get signal ESP_FLWheelSpdEdgesSumVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 4) & 0x01) << 0) \
)

/**
 * Set signal ESP_FLWheelSpdEdgesSumVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD(buf, val) { \
	buf[8] &= ~(0x01 << 4); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal ESP_FLWheelSpdEdgesSumVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD(buf) \
	SET_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD(buf, 0)

/**
 * Signal ESP_FLWheelSpdEdgesSumVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_FLWheelSpdEdgesSumVD raw initial value.
 */
#define START_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD      0

/**
 * Signal ESP_FLWheelSpdEdgesSumVD raw minimum value.
 */
#define MIN_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD        0

/**
 * Signal ESP_FLWheelSpdEdgesSumVD raw maximum value.
 */
#define MAX_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD        1

/**
 * Signal ESP_FLWheelSpdEdgesSumVD raw offset value.
 */
#define OFF_ESP_SpdEdges_ESP_FLWheelSpdEdgesSumVD        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD Signal ESP_FRWheelSpdEdgesSumVD of Message ESP_SpdEdges (0x12a)
 *
 * Quality/fault information to ESP_Front Right Wheel Speed Edges Sum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdEdges
 * @{
 */

/**
 * Signal ESP_FRWheelSpdEdgesSumVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD and \ref GET_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD instead.
 */
#define SIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD        1, 0, 69, 1

/**
 * Signal ESP_FRWheelSpdEdgesSumVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD or \ref INIT_ESP_SpdEdges instead.
 */
#define SETUP_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD      1, 0, 69, 1, 0

/**
 * Get signal ESP_FRWheelSpdEdgesSumVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 5) & 0x01) << 0) \
)

/**
 * Set signal ESP_FRWheelSpdEdgesSumVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD(buf, val) { \
	buf[8] &= ~(0x01 << 5); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal ESP_FRWheelSpdEdgesSumVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD(buf) \
	SET_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD(buf, 0)

/**
 * Signal ESP_FRWheelSpdEdgesSumVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_FRWheelSpdEdgesSumVD raw initial value.
 */
#define START_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD      0

/**
 * Signal ESP_FRWheelSpdEdgesSumVD raw minimum value.
 */
#define MIN_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD        0

/**
 * Signal ESP_FRWheelSpdEdgesSumVD raw maximum value.
 */
#define MAX_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD        1

/**
 * Signal ESP_FRWheelSpdEdgesSumVD raw offset value.
 */
#define OFF_ESP_SpdEdges_ESP_FRWheelSpdEdgesSumVD        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD Signal ESP_RLWheelSpdEdgesSumVD of Message ESP_SpdEdges (0x12a)
 *
 * Quality/fault information to ESP_Rear Left Wheel Speed Edges Sum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdEdges
 * @{
 */

/**
 * Signal ESP_RLWheelSpdEdgesSumVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD and \ref GET_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD instead.
 */
#define SIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD        1, 0, 70, 1

/**
 * Signal ESP_RLWheelSpdEdgesSumVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD or \ref INIT_ESP_SpdEdges instead.
 */
#define SETUP_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD      1, 0, 70, 1, 0

/**
 * Get signal ESP_RLWheelSpdEdgesSumVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 6) & 0x01) << 0) \
)

/**
 * Set signal ESP_RLWheelSpdEdgesSumVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD(buf, val) { \
	buf[8] &= ~(0x01 << 6); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal ESP_RLWheelSpdEdgesSumVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD(buf) \
	SET_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD(buf, 0)

/**
 * Signal ESP_RLWheelSpdEdgesSumVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_RLWheelSpdEdgesSumVD raw initial value.
 */
#define START_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD      0

/**
 * Signal ESP_RLWheelSpdEdgesSumVD raw minimum value.
 */
#define MIN_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD        0

/**
 * Signal ESP_RLWheelSpdEdgesSumVD raw maximum value.
 */
#define MAX_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD        1

/**
 * Signal ESP_RLWheelSpdEdgesSumVD raw offset value.
 */
#define OFF_ESP_SpdEdges_ESP_RLWheelSpdEdgesSumVD        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD Signal ESP_RRWheelSpdEdgesSumVD of Message ESP_SpdEdges (0x12a)
 *
 * Quality/fault information to ESP_Rear Right Wheel Speed Edges Sum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_SpdEdges
 * @{
 */

/**
 * Signal ESP_RRWheelSpdEdgesSumVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD and \ref GET_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD instead.
 */
#define SIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD        1, 0, 71, 1

/**
 * Signal ESP_RRWheelSpdEdgesSumVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD or \ref INIT_ESP_SpdEdges instead.
 */
#define SETUP_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD      1, 0, 71, 1, 0

/**
 * Get signal ESP_RRWheelSpdEdgesSumVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ESP_RRWheelSpdEdgesSumVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD(buf, val) { \
	buf[8] &= ~(0x01 << 7); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ESP_RRWheelSpdEdgesSumVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD(buf) \
	SET_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD(buf, 0)

/**
 * Signal ESP_RRWheelSpdEdgesSumVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_RRWheelSpdEdgesSumVD raw initial value.
 */
#define START_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD      0

/**
 * Signal ESP_RRWheelSpdEdgesSumVD raw minimum value.
 */
#define MIN_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD        0

/**
 * Signal ESP_RRWheelSpdEdgesSumVD raw maximum value.
 */
#define MAX_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD        1

/**
 * Signal ESP_RRWheelSpdEdgesSumVD raw offset value.
 */
#define OFF_ESP_SpdEdges_ESP_RRWheelSpdEdgesSumVD        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_Accel_Checksum Signal ESP_Accel_Checksum of Message ESP_Accel (0x1a8)
 *
 * Checksum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_Accel_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_Accel_Checksum and \ref GET_ESP_Accel_ESP_Accel_Checksum instead.
 */
#define SIG_ESP_Accel_ESP_Accel_Checksum            1, 0, 7, 8

/**
 * Signal ESP_Accel_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_Accel_Checksum or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_Accel_Checksum          1, 0, 7, 8, 0

/**
 * Get signal ESP_Accel_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_Accel_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_Accel_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_Accel_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_Accel_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_Accel_Checksum(buf) \
	SET_ESP_Accel_ESP_Accel_Checksum(buf, 0)

/**
 * Signal ESP_Accel_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_Accel_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Accel_Checksum raw initial value.
 */
#define START_ESP_Accel_ESP_Accel_Checksum          0

/**
 * Signal ESP_Accel_Checksum raw minimum value.
 */
#define MIN_ESP_Accel_ESP_Accel_Checksum            0

/**
 * Signal ESP_Accel_Checksum raw maximum value.
 */
#define MAX_ESP_Accel_ESP_Accel_Checksum            255

/**
 * Signal ESP_Accel_Checksum raw offset value.
 */
#define OFF_ESP_Accel_ESP_Accel_Checksum            0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_Accel_MsgCounter Signal ESP_Accel_MsgCounter of Message ESP_Accel (0x1a8)
 *
 * MsgCounter
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_Accel_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_Accel_MsgCounter and \ref GET_ESP_Accel_ESP_Accel_MsgCounter instead.
 */
#define SIG_ESP_Accel_ESP_Accel_MsgCounter          1, 0, 11, 4

/**
 * Signal ESP_Accel_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_Accel_MsgCounter or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_Accel_MsgCounter        1, 0, 11, 4, 0

/**
 * Get signal ESP_Accel_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_Accel_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal ESP_Accel_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_Accel_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal ESP_Accel_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_Accel_MsgCounter(buf) \
	SET_ESP_Accel_ESP_Accel_MsgCounter(buf, 0)

/**
 * Signal ESP_Accel_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_Accel_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_Accel_MsgCounter raw initial value.
 */
#define START_ESP_Accel_ESP_Accel_MsgCounter        0

/**
 * Signal ESP_Accel_MsgCounter raw minimum value.
 */
#define MIN_ESP_Accel_ESP_Accel_MsgCounter          0

/**
 * Signal ESP_Accel_MsgCounter raw maximum value.
 */
#define MAX_ESP_Accel_ESP_Accel_MsgCounter          15

/**
 * Signal ESP_Accel_MsgCounter raw offset value.
 */
#define OFF_ESP_Accel_ESP_Accel_MsgCounter          0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_VehLongAccel Signal ESP_VehLongAccel of Message ESP_Accel (0x1a8)
 *
 * ESP_Vehicle Longitudinal Acceleration
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_VehLongAccel configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_VehLongAccel and \ref GET_ESP_Accel_ESP_VehLongAccel instead.
 */
#define SIG_ESP_Accel_ESP_VehLongAccel              1, 0, 23, 12

/**
 * Signal ESP_VehLongAccel setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_VehLongAccel or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_VehLongAccel            1, 0, 23, 12, 1592.01

/**
 * Get signal ESP_VehLongAccel from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_VehLongAccel(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 4) \
	| (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal ESP_VehLongAccel in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_VehLongAccel(buf, val) { \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal ESP_VehLongAccel in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_VehLongAccel(buf) \
	SET_ESP_Accel_ESP_VehLongAccel(buf, 1592.01)

/**
 * Signal ESP_VehLongAccel value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_VehLongAccel(x, fmt) \
	((x) * fmt * 58254221 / 2147483647 + fmt * 21593 / (-1000))

/**
 * Signal ESP_VehLongAccel raw initial value.
 */
#define START_ESP_Accel_ESP_VehLongAccel            1592.01

/**
 * Signal ESP_VehLongAccel raw minimum value.
 */
#define MIN_ESP_Accel_ESP_VehLongAccel              0

/**
 * Signal ESP_VehLongAccel raw maximum value.
 */
#define MAX_ESP_Accel_ESP_VehLongAccel              1592

/**
 * Signal ESP_VehLongAccel raw offset value.
 */
#define OFF_ESP_Accel_ESP_VehLongAccel              -796

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_VehLateralAccel Signal ESP_VehLateralAccel of Message ESP_Accel (0x1a8)
 *
 * ESP_Vehicle Lateral Acceleration
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_VehLateralAccel configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_VehLateralAccel and \ref GET_ESP_Accel_ESP_VehLateralAccel instead.
 */
#define SIG_ESP_Accel_ESP_VehLateralAccel           1, 0, 27, 12

/**
 * Signal ESP_VehLateralAccel setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_VehLateralAccel or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_VehLateralAccel         1, 0, 27, 12, 1592.01

/**
 * Get signal ESP_VehLateralAccel from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_VehLateralAccel(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 8) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal ESP_VehLateralAccel in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_VehLateralAccel(buf, val) { \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x0f) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal ESP_VehLateralAccel in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_VehLateralAccel(buf) \
	SET_ESP_Accel_ESP_VehLateralAccel(buf, 1592.01)

/**
 * Signal ESP_VehLateralAccel value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_VehLateralAccel(x, fmt) \
	((x) * fmt * 58254221 / 2147483647 + fmt * 21593 / (-1000))

/**
 * Signal ESP_VehLateralAccel raw initial value.
 */
#define START_ESP_Accel_ESP_VehLateralAccel         1592.01

/**
 * Signal ESP_VehLateralAccel raw minimum value.
 */
#define MIN_ESP_Accel_ESP_VehLateralAccel           0

/**
 * Signal ESP_VehLateralAccel raw maximum value.
 */
#define MAX_ESP_Accel_ESP_VehLateralAccel           1592

/**
 * Signal ESP_VehLateralAccel raw offset value.
 */
#define OFF_ESP_Accel_ESP_VehLateralAccel           -796

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_VehLongAccelVD Signal ESP_VehLongAccelVD of Message ESP_Accel (0x1a8)
 *
 * ESP_Vehicle Longitudinal Acceleration valid
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_VehLongAccelVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_VehLongAccelVD and \ref GET_ESP_Accel_ESP_VehLongAccelVD instead.
 */
#define SIG_ESP_Accel_ESP_VehLongAccelVD            1, 0, 47, 1

/**
 * Signal ESP_VehLongAccelVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_VehLongAccelVD or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_VehLongAccelVD          1, 0, 47, 1, 0

/**
 * Get signal ESP_VehLongAccelVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_VehLongAccelVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ESP_VehLongAccelVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_VehLongAccelVD(buf, val) { \
	buf[5] &= ~(0x01 << 7); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ESP_VehLongAccelVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_VehLongAccelVD(buf) \
	SET_ESP_Accel_ESP_VehLongAccelVD(buf, 0)

/**
 * Signal ESP_VehLongAccelVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_VehLongAccelVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_VehLongAccelVD raw initial value.
 */
#define START_ESP_Accel_ESP_VehLongAccelVD          0

/**
 * Signal ESP_VehLongAccelVD raw minimum value.
 */
#define MIN_ESP_Accel_ESP_VehLongAccelVD            0

/**
 * Signal ESP_VehLongAccelVD raw maximum value.
 */
#define MAX_ESP_Accel_ESP_VehLongAccelVD            1

/**
 * Signal ESP_VehLongAccelVD raw offset value.
 */
#define OFF_ESP_Accel_ESP_VehLongAccelVD            0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_VehLateralAccelVD Signal ESP_VehLateralAccelVD of Message ESP_Accel (0x1a8)
 *
 * ESP_Vehicle Lateral AccelarationValid
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_VehLateralAccelVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_VehLateralAccelVD and \ref GET_ESP_Accel_ESP_VehLateralAccelVD instead.
 */
#define SIG_ESP_Accel_ESP_VehLateralAccelVD         1, 0, 46, 1

/**
 * Signal ESP_VehLateralAccelVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_VehLateralAccelVD or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_VehLateralAccelVD       1, 0, 46, 1, 0

/**
 * Get signal ESP_VehLateralAccelVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_VehLateralAccelVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 6) & 0x01) << 0) \
)

/**
 * Set signal ESP_VehLateralAccelVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_VehLateralAccelVD(buf, val) { \
	buf[5] &= ~(0x01 << 6); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal ESP_VehLateralAccelVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_VehLateralAccelVD(buf) \
	SET_ESP_Accel_ESP_VehLateralAccelVD(buf, 0)

/**
 * Signal ESP_VehLateralAccelVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_VehLateralAccelVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_VehLateralAccelVD raw initial value.
 */
#define START_ESP_Accel_ESP_VehLateralAccelVD       0

/**
 * Signal ESP_VehLateralAccelVD raw minimum value.
 */
#define MIN_ESP_Accel_ESP_VehLateralAccelVD         0

/**
 * Signal ESP_VehLateralAccelVD raw maximum value.
 */
#define MAX_ESP_Accel_ESP_VehLateralAccelVD         1

/**
 * Signal ESP_VehLateralAccelVD raw offset value.
 */
#define OFF_ESP_Accel_ESP_VehLateralAccelVD         0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_YAWRate Signal ESP_YAWRate of Message ESP_Accel (0x1a8)
 *
 * ESP_YAW Rate
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_YAWRate configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_YAWRate and \ref GET_ESP_Accel_ESP_YAWRate instead.
 */
#define SIG_ESP_Accel_ESP_YAWRate                   1, 0, 45, 12

/**
 * Signal ESP_YAWRate setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_YAWRate or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_YAWRate                 1, 0, 45, 12, 3126.56

/**
 * Get signal ESP_YAWRate from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_YAWRate(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x3f) << 6) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 2) & 0x3f) << 0) \
)

/**
 * Set signal ESP_YAWRate in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_YAWRate(buf, val) { \
	buf[5] &= ~(0x3f << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 6) & 0x3f) << 0; \
	buf[6] &= ~(0x3f << 2); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x3f) << 2; \
}

/**
 * Set signal ESP_YAWRate in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_YAWRate(buf) \
	SET_ESP_Accel_ESP_YAWRate(buf, 3126.56)

/**
 * Signal ESP_YAWRate value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_YAWRate(x, fmt) \
	((x) * fmt / 1024 + fmt * 20943 / (-10000))

/**
 * Signal ESP_YAWRate raw initial value.
 */
#define START_ESP_Accel_ESP_YAWRate                 3126.56

/**
 * Signal ESP_YAWRate raw minimum value.
 */
#define MIN_ESP_Accel_ESP_YAWRate                   0

/**
 * Signal ESP_YAWRate raw maximum value.
 */
#define MAX_ESP_Accel_ESP_YAWRate                   4095

/**
 * Signal ESP_YAWRate raw offset value.
 */
#define OFF_ESP_Accel_ESP_YAWRate                   -2145

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_FLWheelRotatedDirectionVD Signal ESP_FLWheelRotatedDirectionVD of Message ESP_Accel (0x1a8)
 *
 * ESP_Front Left Wheel Rotated Direction Valid
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_FLWheelRotatedDirectionVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_FLWheelRotatedDirectionVD and \ref GET_ESP_Accel_ESP_FLWheelRotatedDirectionVD instead.
 */
#define SIG_ESP_Accel_ESP_FLWheelRotatedDirectionVD        1, 0, 61, 1

/**
 * Signal ESP_FLWheelRotatedDirectionVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_FLWheelRotatedDirectionVD or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_FLWheelRotatedDirectionVD      1, 0, 61, 1, 0

/**
 * Get signal ESP_FLWheelRotatedDirectionVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_FLWheelRotatedDirectionVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 5) & 0x01) << 0) \
)

/**
 * Set signal ESP_FLWheelRotatedDirectionVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_FLWheelRotatedDirectionVD(buf, val) { \
	buf[7] &= ~(0x01 << 5); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 5; \
}

/**
 * Set signal ESP_FLWheelRotatedDirectionVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_FLWheelRotatedDirectionVD(buf) \
	SET_ESP_Accel_ESP_FLWheelRotatedDirectionVD(buf, 0)

/**
 * Signal ESP_FLWheelRotatedDirectionVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_FLWheelRotatedDirectionVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_FLWheelRotatedDirectionVD raw initial value.
 */
#define START_ESP_Accel_ESP_FLWheelRotatedDirectionVD      0

/**
 * Signal ESP_FLWheelRotatedDirectionVD raw minimum value.
 */
#define MIN_ESP_Accel_ESP_FLWheelRotatedDirectionVD        0

/**
 * Signal ESP_FLWheelRotatedDirectionVD raw maximum value.
 */
#define MAX_ESP_Accel_ESP_FLWheelRotatedDirectionVD        1

/**
 * Signal ESP_FLWheelRotatedDirectionVD raw offset value.
 */
#define OFF_ESP_Accel_ESP_FLWheelRotatedDirectionVD        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_FRWheelRotatedDirection Signal ESP_FRWheelRotatedDirection of Message ESP_Accel (0x1a8)
 *
 * ESP_Front Right Wheel Rotated Direction
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_FRWheelRotatedDirection configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_FRWheelRotatedDirection and \ref GET_ESP_Accel_ESP_FRWheelRotatedDirection instead.
 */
#define SIG_ESP_Accel_ESP_FRWheelRotatedDirection        1, 0, 60, 2

/**
 * Signal ESP_FRWheelRotatedDirection setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_FRWheelRotatedDirection or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_FRWheelRotatedDirection      1, 0, 60, 2, 0

/**
 * Get signal ESP_FRWheelRotatedDirection from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_FRWheelRotatedDirection(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 3) & 0x03) << 0) \
)

/**
 * Set signal ESP_FRWheelRotatedDirection in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_FRWheelRotatedDirection(buf, val) { \
	buf[7] &= ~(0x03 << 3); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal ESP_FRWheelRotatedDirection in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_FRWheelRotatedDirection(buf) \
	SET_ESP_Accel_ESP_FRWheelRotatedDirection(buf, 0)

/**
 * Signal ESP_FRWheelRotatedDirection value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_FRWheelRotatedDirection(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_FRWheelRotatedDirection raw initial value.
 */
#define START_ESP_Accel_ESP_FRWheelRotatedDirection      0

/**
 * Signal ESP_FRWheelRotatedDirection raw minimum value.
 */
#define MIN_ESP_Accel_ESP_FRWheelRotatedDirection        0

/**
 * Signal ESP_FRWheelRotatedDirection raw maximum value.
 */
#define MAX_ESP_Accel_ESP_FRWheelRotatedDirection        3

/**
 * Signal ESP_FRWheelRotatedDirection raw offset value.
 */
#define OFF_ESP_Accel_ESP_FRWheelRotatedDirection        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_FRWheelRotatedDirectionVD Signal ESP_FRWheelRotatedDirectionVD of Message ESP_Accel (0x1a8)
 *
 * ESP_Front Right Wheel Rotated Direction Valid
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_FRWheelRotatedDirectionVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_FRWheelRotatedDirectionVD and \ref GET_ESP_Accel_ESP_FRWheelRotatedDirectionVD instead.
 */
#define SIG_ESP_Accel_ESP_FRWheelRotatedDirectionVD        1, 0, 58, 1

/**
 * Signal ESP_FRWheelRotatedDirectionVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_FRWheelRotatedDirectionVD or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_FRWheelRotatedDirectionVD      1, 0, 58, 1, 0

/**
 * Get signal ESP_FRWheelRotatedDirectionVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_FRWheelRotatedDirectionVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 2) & 0x01) << 0) \
)

/**
 * Set signal ESP_FRWheelRotatedDirectionVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_FRWheelRotatedDirectionVD(buf, val) { \
	buf[7] &= ~(0x01 << 2); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal ESP_FRWheelRotatedDirectionVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_FRWheelRotatedDirectionVD(buf) \
	SET_ESP_Accel_ESP_FRWheelRotatedDirectionVD(buf, 0)

/**
 * Signal ESP_FRWheelRotatedDirectionVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_FRWheelRotatedDirectionVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_FRWheelRotatedDirectionVD raw initial value.
 */
#define START_ESP_Accel_ESP_FRWheelRotatedDirectionVD      0

/**
 * Signal ESP_FRWheelRotatedDirectionVD raw minimum value.
 */
#define MIN_ESP_Accel_ESP_FRWheelRotatedDirectionVD        0

/**
 * Signal ESP_FRWheelRotatedDirectionVD raw maximum value.
 */
#define MAX_ESP_Accel_ESP_FRWheelRotatedDirectionVD        1

/**
 * Signal ESP_FRWheelRotatedDirectionVD raw offset value.
 */
#define OFF_ESP_Accel_ESP_FRWheelRotatedDirectionVD        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_RLWheelRotatedDirection Signal ESP_RLWheelRotatedDirection of Message ESP_Accel (0x1a8)
 *
 * ESP_Rear Left Wheel Rotated Direction
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_RLWheelRotatedDirection configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_RLWheelRotatedDirection and \ref GET_ESP_Accel_ESP_RLWheelRotatedDirection instead.
 */
#define SIG_ESP_Accel_ESP_RLWheelRotatedDirection        1, 0, 57, 2

/**
 * Signal ESP_RLWheelRotatedDirection setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_RLWheelRotatedDirection or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_RLWheelRotatedDirection      1, 0, 57, 2, 0

/**
 * Get signal ESP_RLWheelRotatedDirection from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_RLWheelRotatedDirection(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0x03) << 0) \
)

/**
 * Set signal ESP_RLWheelRotatedDirection in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_RLWheelRotatedDirection(buf, val) { \
	buf[7] &= ~(0x03 << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal ESP_RLWheelRotatedDirection in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_RLWheelRotatedDirection(buf) \
	SET_ESP_Accel_ESP_RLWheelRotatedDirection(buf, 0)

/**
 * Signal ESP_RLWheelRotatedDirection value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_RLWheelRotatedDirection(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_RLWheelRotatedDirection raw initial value.
 */
#define START_ESP_Accel_ESP_RLWheelRotatedDirection      0

/**
 * Signal ESP_RLWheelRotatedDirection raw minimum value.
 */
#define MIN_ESP_Accel_ESP_RLWheelRotatedDirection        0

/**
 * Signal ESP_RLWheelRotatedDirection raw maximum value.
 */
#define MAX_ESP_Accel_ESP_RLWheelRotatedDirection        3

/**
 * Signal ESP_RLWheelRotatedDirection raw offset value.
 */
#define OFF_ESP_Accel_ESP_RLWheelRotatedDirection        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_RLWheelRotatedDirectionVD Signal ESP_RLWheelRotatedDirectionVD of Message ESP_Accel (0x1a8)
 *
 * ESP_Rear Left Wheel Rotated Direction Valid
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_RLWheelRotatedDirectionVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_RLWheelRotatedDirectionVD and \ref GET_ESP_Accel_ESP_RLWheelRotatedDirectionVD instead.
 */
#define SIG_ESP_Accel_ESP_RLWheelRotatedDirectionVD        1, 0, 71, 1

/**
 * Signal ESP_RLWheelRotatedDirectionVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_RLWheelRotatedDirectionVD or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_RLWheelRotatedDirectionVD      1, 0, 71, 1, 0

/**
 * Get signal ESP_RLWheelRotatedDirectionVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_RLWheelRotatedDirectionVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 7) & 0x01) << 0) \
)

/**
 * Set signal ESP_RLWheelRotatedDirectionVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_RLWheelRotatedDirectionVD(buf, val) { \
	buf[8] &= ~(0x01 << 7); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal ESP_RLWheelRotatedDirectionVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_RLWheelRotatedDirectionVD(buf) \
	SET_ESP_Accel_ESP_RLWheelRotatedDirectionVD(buf, 0)

/**
 * Signal ESP_RLWheelRotatedDirectionVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_RLWheelRotatedDirectionVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_RLWheelRotatedDirectionVD raw initial value.
 */
#define START_ESP_Accel_ESP_RLWheelRotatedDirectionVD      0

/**
 * Signal ESP_RLWheelRotatedDirectionVD raw minimum value.
 */
#define MIN_ESP_Accel_ESP_RLWheelRotatedDirectionVD        0

/**
 * Signal ESP_RLWheelRotatedDirectionVD raw maximum value.
 */
#define MAX_ESP_Accel_ESP_RLWheelRotatedDirectionVD        1

/**
 * Signal ESP_RLWheelRotatedDirectionVD raw offset value.
 */
#define OFF_ESP_Accel_ESP_RLWheelRotatedDirectionVD        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_RRWheelRotatedDirection Signal ESP_RRWheelRotatedDirection of Message ESP_Accel (0x1a8)
 *
 * ESP_Rear Right Wheel Rotated Direction
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_RRWheelRotatedDirection configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_RRWheelRotatedDirection and \ref GET_ESP_Accel_ESP_RRWheelRotatedDirection instead.
 */
#define SIG_ESP_Accel_ESP_RRWheelRotatedDirection        1, 0, 70, 2

/**
 * Signal ESP_RRWheelRotatedDirection setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_RRWheelRotatedDirection or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_RRWheelRotatedDirection      1, 0, 70, 2, 0

/**
 * Get signal ESP_RRWheelRotatedDirection from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_RRWheelRotatedDirection(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 5) & 0x03) << 0) \
)

/**
 * Set signal ESP_RRWheelRotatedDirection in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_RRWheelRotatedDirection(buf, val) { \
	buf[8] &= ~(0x03 << 5); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 5; \
}

/**
 * Set signal ESP_RRWheelRotatedDirection in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_RRWheelRotatedDirection(buf) \
	SET_ESP_Accel_ESP_RRWheelRotatedDirection(buf, 0)

/**
 * Signal ESP_RRWheelRotatedDirection value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_RRWheelRotatedDirection(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_RRWheelRotatedDirection raw initial value.
 */
#define START_ESP_Accel_ESP_RRWheelRotatedDirection      0

/**
 * Signal ESP_RRWheelRotatedDirection raw minimum value.
 */
#define MIN_ESP_Accel_ESP_RRWheelRotatedDirection        0

/**
 * Signal ESP_RRWheelRotatedDirection raw maximum value.
 */
#define MAX_ESP_Accel_ESP_RRWheelRotatedDirection        3

/**
 * Signal ESP_RRWheelRotatedDirection raw offset value.
 */
#define OFF_ESP_Accel_ESP_RRWheelRotatedDirection        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_RRWheelRotatedDirectionVD Signal ESP_RRWheelRotatedDirectionVD of Message ESP_Accel (0x1a8)
 *
 * ESP_Rear Right Wheel Rotated Direction Valid
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_RRWheelRotatedDirectionVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_RRWheelRotatedDirectionVD and \ref GET_ESP_Accel_ESP_RRWheelRotatedDirectionVD instead.
 */
#define SIG_ESP_Accel_ESP_RRWheelRotatedDirectionVD        1, 0, 68, 1

/**
 * Signal ESP_RRWheelRotatedDirectionVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_RRWheelRotatedDirectionVD or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_RRWheelRotatedDirectionVD      1, 0, 68, 1, 0

/**
 * Get signal ESP_RRWheelRotatedDirectionVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_RRWheelRotatedDirectionVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 4) & 0x01) << 0) \
)

/**
 * Set signal ESP_RRWheelRotatedDirectionVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_RRWheelRotatedDirectionVD(buf, val) { \
	buf[8] &= ~(0x01 << 4); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x01) << 4; \
}

/**
 * Set signal ESP_RRWheelRotatedDirectionVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_RRWheelRotatedDirectionVD(buf) \
	SET_ESP_Accel_ESP_RRWheelRotatedDirectionVD(buf, 0)

/**
 * Signal ESP_RRWheelRotatedDirectionVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_RRWheelRotatedDirectionVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_RRWheelRotatedDirectionVD raw initial value.
 */
#define START_ESP_Accel_ESP_RRWheelRotatedDirectionVD      0

/**
 * Signal ESP_RRWheelRotatedDirectionVD raw minimum value.
 */
#define MIN_ESP_Accel_ESP_RRWheelRotatedDirectionVD        0

/**
 * Signal ESP_RRWheelRotatedDirectionVD raw maximum value.
 */
#define MAX_ESP_Accel_ESP_RRWheelRotatedDirectionVD        1

/**
 * Signal ESP_RRWheelRotatedDirectionVD raw offset value.
 */
#define OFF_ESP_Accel_ESP_RRWheelRotatedDirectionVD        0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_YAWRateVD Signal ESP_YAWRateVD of Message ESP_Accel (0x1a8)
 *
 * ESP_YAW Rate Valid
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_YAWRateVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_YAWRateVD and \ref GET_ESP_Accel_ESP_YAWRateVD instead.
 */
#define SIG_ESP_Accel_ESP_YAWRateVD                 1, 0, 67, 1

/**
 * Signal ESP_YAWRateVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_YAWRateVD or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_YAWRateVD               1, 0, 67, 1, 0

/**
 * Get signal ESP_YAWRateVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_YAWRateVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 3) & 0x01) << 0) \
)

/**
 * Set signal ESP_YAWRateVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_YAWRateVD(buf, val) { \
	buf[8] &= ~(0x01 << 3); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x01) << 3; \
}

/**
 * Set signal ESP_YAWRateVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_YAWRateVD(buf) \
	SET_ESP_Accel_ESP_YAWRateVD(buf, 0)

/**
 * Signal ESP_YAWRateVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_YAWRateVD(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_YAWRateVD raw initial value.
 */
#define START_ESP_Accel_ESP_YAWRateVD               0

/**
 * Signal ESP_YAWRateVD raw minimum value.
 */
#define MIN_ESP_Accel_ESP_YAWRateVD                 0

/**
 * Signal ESP_YAWRateVD raw maximum value.
 */
#define MAX_ESP_Accel_ESP_YAWRateVD                 1

/**
 * Signal ESP_YAWRateVD raw offset value.
 */
#define OFF_ESP_Accel_ESP_YAWRateVD                 0

/**
 * @}
 */

/**
 * @defgroup SIG_ESP_Accel_ESP_FLWheelRotationDirection Signal ESP_FLWheelRotationDirection of Message ESP_Accel (0x1a8)
 *
 * ESP_Front Left Wheel Rotated Direction
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_ESP_Accel
 * @{
 */

/**
 * Signal ESP_FLWheelRotationDirection configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_ESP_Accel_ESP_FLWheelRotationDirection and \ref GET_ESP_Accel_ESP_FLWheelRotationDirection instead.
 */
#define SIG_ESP_Accel_ESP_FLWheelRotationDirection        1, 0, 66, 2

/**
 * Signal ESP_FLWheelRotationDirection setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_ESP_Accel_ESP_FLWheelRotationDirection or \ref INIT_ESP_Accel instead.
 */
#define SETUP_ESP_Accel_ESP_FLWheelRotationDirection      1, 0, 66, 2, 0

/**
 * Get signal ESP_FLWheelRotationDirection from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_ESP_Accel_ESP_FLWheelRotationDirection(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[8] >> 1) & 0x03) << 0) \
)

/**
 * Set signal ESP_FLWheelRotationDirection in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_ESP_Accel_ESP_FLWheelRotationDirection(buf, val) { \
	buf[8] &= ~(0x03 << 1); \
	buf[8] |= (((uint8_t)(val) >> 0) & 0x03) << 1; \
}

/**
 * Set signal ESP_FLWheelRotationDirection in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_ESP_Accel_ESP_FLWheelRotationDirection(buf) \
	SET_ESP_Accel_ESP_FLWheelRotationDirection(buf, 0)

/**
 * Signal ESP_FLWheelRotationDirection value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_ESP_Accel_ESP_FLWheelRotationDirection(x, fmt) \
	((x) * fmt)

/**
 * Signal ESP_FLWheelRotationDirection raw initial value.
 */
#define START_ESP_Accel_ESP_FLWheelRotationDirection      0

/**
 * Signal ESP_FLWheelRotationDirection raw minimum value.
 */
#define MIN_ESP_Accel_ESP_FLWheelRotationDirection        0

/**
 * Signal ESP_FLWheelRotationDirection raw maximum value.
 */
#define MAX_ESP_Accel_ESP_FLWheelRotationDirection        3

/**
 * Signal ESP_FLWheelRotationDirection raw offset value.
 */
#define OFF_ESP_Accel_ESP_FLWheelRotationDirection        0

/**
 * @}
 */

/**
 * @defgroup SIG_EPS_SASInfo_EPS_SASInfo_Checksum Signal EPS_SASInfo_Checksum of Message EPS_SASInfo (0x115)
 *
 * Checksum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_EPS_SASInfo
 * @{
 */

/**
 * Signal EPS_SASInfo_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_EPS_SASInfo_EPS_SASInfo_Checksum and \ref GET_EPS_SASInfo_EPS_SASInfo_Checksum instead.
 */
#define SIG_EPS_SASInfo_EPS_SASInfo_Checksum        1, 0, 7, 8

/**
 * Signal EPS_SASInfo_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_EPS_SASInfo_EPS_SASInfo_Checksum or \ref INIT_EPS_SASInfo instead.
 */
#define SETUP_EPS_SASInfo_EPS_SASInfo_Checksum      1, 0, 7, 8, 0

/**
 * Get signal EPS_SASInfo_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_EPS_SASInfo_EPS_SASInfo_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal EPS_SASInfo_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_EPS_SASInfo_EPS_SASInfo_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal EPS_SASInfo_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_EPS_SASInfo_EPS_SASInfo_Checksum(buf) \
	SET_EPS_SASInfo_EPS_SASInfo_Checksum(buf, 0)

/**
 * Signal EPS_SASInfo_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_EPS_SASInfo_EPS_SASInfo_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal EPS_SASInfo_Checksum raw initial value.
 */
#define START_EPS_SASInfo_EPS_SASInfo_Checksum      0

/**
 * Signal EPS_SASInfo_Checksum raw minimum value.
 */
#define MIN_EPS_SASInfo_EPS_SASInfo_Checksum        0

/**
 * Signal EPS_SASInfo_Checksum raw maximum value.
 */
#define MAX_EPS_SASInfo_EPS_SASInfo_Checksum        255

/**
 * Signal EPS_SASInfo_Checksum raw offset value.
 */
#define OFF_EPS_SASInfo_EPS_SASInfo_Checksum        0

/**
 * @}
 */

/**
 * @defgroup SIG_EPS_SASInfo_EPS_SASInfo_MsgCounter Signal EPS_SASInfo_MsgCounter of Message EPS_SASInfo (0x115)
 *
 * MsgCounter
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_EPS_SASInfo
 * @{
 */

/**
 * Signal EPS_SASInfo_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_EPS_SASInfo_EPS_SASInfo_MsgCounter and \ref GET_EPS_SASInfo_EPS_SASInfo_MsgCounter instead.
 */
#define SIG_EPS_SASInfo_EPS_SASInfo_MsgCounter        1, 0, 11, 4

/**
 * Signal EPS_SASInfo_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_EPS_SASInfo_EPS_SASInfo_MsgCounter or \ref INIT_EPS_SASInfo instead.
 */
#define SETUP_EPS_SASInfo_EPS_SASInfo_MsgCounter      1, 0, 11, 4, 0

/**
 * Get signal EPS_SASInfo_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_EPS_SASInfo_EPS_SASInfo_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal EPS_SASInfo_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_EPS_SASInfo_EPS_SASInfo_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal EPS_SASInfo_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_EPS_SASInfo_EPS_SASInfo_MsgCounter(buf) \
	SET_EPS_SASInfo_EPS_SASInfo_MsgCounter(buf, 0)

/**
 * Signal EPS_SASInfo_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_EPS_SASInfo_EPS_SASInfo_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal EPS_SASInfo_MsgCounter raw initial value.
 */
#define START_EPS_SASInfo_EPS_SASInfo_MsgCounter      0

/**
 * Signal EPS_SASInfo_MsgCounter raw minimum value.
 */
#define MIN_EPS_SASInfo_EPS_SASInfo_MsgCounter        0

/**
 * Signal EPS_SASInfo_MsgCounter raw maximum value.
 */
#define MAX_EPS_SASInfo_EPS_SASInfo_MsgCounter        15

/**
 * Signal EPS_SASInfo_MsgCounter raw offset value.
 */
#define OFF_EPS_SASInfo_EPS_SASInfo_MsgCounter        0

/**
 * @}
 */

/**
 * @defgroup SIG_EPS_SASInfo_EPS_SteeringAngleVD Signal EPS_SteeringAngleVD of Message EPS_SASInfo (0x115)
 *
 * EPS_Steering Angle Valid
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_EPS_SASInfo
 * @{
 */

/**
 * Signal EPS_SteeringAngleVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_EPS_SASInfo_EPS_SteeringAngleVD and \ref GET_EPS_SASInfo_EPS_SteeringAngleVD instead.
 */
#define SIG_EPS_SASInfo_EPS_SteeringAngleVD         1, 0, 23, 1

/**
 * Signal EPS_SteeringAngleVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_EPS_SASInfo_EPS_SteeringAngleVD or \ref INIT_EPS_SASInfo instead.
 */
#define SETUP_EPS_SASInfo_EPS_SteeringAngleVD       1, 0, 23, 1, 0

/**
 * Get signal EPS_SteeringAngleVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_EPS_SASInfo_EPS_SteeringAngleVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 7) & 0x01) << 0) \
)

/**
 * Set signal EPS_SteeringAngleVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_EPS_SASInfo_EPS_SteeringAngleVD(buf, val) { \
	buf[2] &= ~(0x01 << 7); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal EPS_SteeringAngleVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_EPS_SASInfo_EPS_SteeringAngleVD(buf) \
	SET_EPS_SASInfo_EPS_SteeringAngleVD(buf, 0)

/**
 * Signal EPS_SteeringAngleVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_EPS_SASInfo_EPS_SteeringAngleVD(x, fmt) \
	((x) * fmt)

/**
 * Signal EPS_SteeringAngleVD raw initial value.
 */
#define START_EPS_SASInfo_EPS_SteeringAngleVD       0

/**
 * Signal EPS_SteeringAngleVD raw minimum value.
 */
#define MIN_EPS_SASInfo_EPS_SteeringAngleVD         0

/**
 * Signal EPS_SteeringAngleVD raw maximum value.
 */
#define MAX_EPS_SASInfo_EPS_SteeringAngleVD         1

/**
 * Signal EPS_SteeringAngleVD raw offset value.
 */
#define OFF_EPS_SASInfo_EPS_SteeringAngleVD         0

/**
 * @}
 */

/**
 * @defgroup SIG_EPS_SASInfo_EPS_SteeringAngle Signal EPS_SteeringAngle of Message EPS_SASInfo (0x115)
 *
 * EPS_Steering Angle
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_EPS_SASInfo
 * @{
 */

/**
 * Signal EPS_SteeringAngle configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_EPS_SASInfo_EPS_SteeringAngle and \ref GET_EPS_SASInfo_EPS_SteeringAngle instead.
 */
#define SIG_EPS_SASInfo_EPS_SteeringAngle           1, 0, 31, 16

/**
 * Signal EPS_SteeringAngle setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_EPS_SASInfo_EPS_SteeringAngle or \ref INIT_EPS_SASInfo instead.
 */
#define SETUP_EPS_SASInfo_EPS_SteeringAngle         1, 0, 31, 16, 0

/**
 * Get signal EPS_SteeringAngle from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_EPS_SASInfo_EPS_SteeringAngle(buf) (0 \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[4] >> 0) & 0xff) << 0) \
)

/**
 * Set signal EPS_SteeringAngle in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_EPS_SASInfo_EPS_SteeringAngle(buf, val) { \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal EPS_SteeringAngle in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_EPS_SASInfo_EPS_SteeringAngle(buf) \
	SET_EPS_SASInfo_EPS_SteeringAngle(buf, 0)

/**
 * Signal EPS_SteeringAngle value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_EPS_SASInfo_EPS_SteeringAngle(x, fmt) \
	((x) * fmt / 10 + fmt * (-780))

/**
 * Signal EPS_SteeringAngle raw initial value.
 */
#define START_EPS_SASInfo_EPS_SteeringAngle         0

/**
 * Signal EPS_SteeringAngle raw minimum value.
 */
#define MIN_EPS_SASInfo_EPS_SteeringAngle           0

/**
 * Signal EPS_SteeringAngle raw maximum value.
 */
#define MAX_EPS_SASInfo_EPS_SteeringAngle           15599

/**
 * Signal EPS_SteeringAngle raw offset value.
 */
#define OFF_EPS_SASInfo_EPS_SteeringAngle           -7800

/**
 * @}
 */

/**
 * @defgroup SIG_EPS_SASInfo_EPS_SteeringAngleSpd Signal EPS_SteeringAngleSpd of Message EPS_SASInfo (0x115)
 *
 * EPS_Steering Angle Speed
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_EPS_SASInfo
 * @{
 */

/**
 * Signal EPS_SteeringAngleSpd configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_EPS_SASInfo_EPS_SteeringAngleSpd and \ref GET_EPS_SASInfo_EPS_SteeringAngleSpd instead.
 */
#define SIG_EPS_SASInfo_EPS_SteeringAngleSpd        1, 0, 43, 8

/**
 * Signal EPS_SteeringAngleSpd setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_EPS_SASInfo_EPS_SteeringAngleSpd or \ref INIT_EPS_SASInfo instead.
 */
#define SETUP_EPS_SASInfo_EPS_SteeringAngleSpd      1, 0, 43, 8, 0

/**
 * Get signal EPS_SteeringAngleSpd from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_EPS_SASInfo_EPS_SteeringAngleSpd(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 0) & 0x0f) << 4) \
	| (uint8_t)(+(uint8_t)((buf[6] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal EPS_SteeringAngleSpd in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_EPS_SASInfo_EPS_SteeringAngleSpd(buf, val) { \
	buf[5] &= ~(0x0f << 0); \
	buf[5] |= (((uint8_t)(val) >> 4) & 0x0f) << 0; \
	buf[6] &= ~(0x0f << 4); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal EPS_SteeringAngleSpd in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_EPS_SASInfo_EPS_SteeringAngleSpd(buf) \
	SET_EPS_SASInfo_EPS_SteeringAngleSpd(buf, 0)

/**
 * Signal EPS_SteeringAngleSpd value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_EPS_SASInfo_EPS_SteeringAngleSpd(x, fmt) \
	((x) * fmt * 4)

/**
 * Signal EPS_SteeringAngleSpd raw initial value.
 */
#define START_EPS_SASInfo_EPS_SteeringAngleSpd      0

/**
 * Signal EPS_SteeringAngleSpd raw minimum value.
 */
#define MIN_EPS_SASInfo_EPS_SteeringAngleSpd        0

/**
 * Signal EPS_SteeringAngleSpd raw maximum value.
 */
#define MAX_EPS_SASInfo_EPS_SteeringAngleSpd        254

/**
 * Signal EPS_SteeringAngleSpd raw offset value.
 */
#define OFF_EPS_SASInfo_EPS_SteeringAngleSpd        0

/**
 * @}
 */

/**
 * @defgroup SIG_VCU_SysSt_VCU_SysSt_Checksum Signal VCU_SysSt_Checksum of Message VCU_SysSt (0x117)
 *
 * Checksum
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_VCU_SysSt
 * @{
 */

/**
 * Signal VCU_SysSt_Checksum configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VCU_SysSt_VCU_SysSt_Checksum and \ref GET_VCU_SysSt_VCU_SysSt_Checksum instead.
 */
#define SIG_VCU_SysSt_VCU_SysSt_Checksum            1, 0, 7, 8

/**
 * Signal VCU_SysSt_Checksum setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VCU_SysSt_VCU_SysSt_Checksum or \ref INIT_VCU_SysSt instead.
 */
#define SETUP_VCU_SysSt_VCU_SysSt_Checksum          1, 0, 7, 8, 0

/**
 * Get signal VCU_SysSt_Checksum from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VCU_SysSt_VCU_SysSt_Checksum(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VCU_SysSt_Checksum in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VCU_SysSt_VCU_SysSt_Checksum(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VCU_SysSt_Checksum in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VCU_SysSt_VCU_SysSt_Checksum(buf) \
	SET_VCU_SysSt_VCU_SysSt_Checksum(buf, 0)

/**
 * Signal VCU_SysSt_Checksum value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VCU_SysSt_VCU_SysSt_Checksum(x, fmt) \
	((x) * fmt)

/**
 * Signal VCU_SysSt_Checksum raw initial value.
 */
#define START_VCU_SysSt_VCU_SysSt_Checksum          0

/**
 * Signal VCU_SysSt_Checksum raw minimum value.
 */
#define MIN_VCU_SysSt_VCU_SysSt_Checksum            0

/**
 * Signal VCU_SysSt_Checksum raw maximum value.
 */
#define MAX_VCU_SysSt_VCU_SysSt_Checksum            255

/**
 * Signal VCU_SysSt_Checksum raw offset value.
 */
#define OFF_VCU_SysSt_VCU_SysSt_Checksum            0

/**
 * @}
 */

/**
 * @defgroup SIG_VCU_SysSt_VCU_SysSt_MsgCounter Signal VCU_SysSt_MsgCounter of Message VCU_SysSt (0x117)
 *
 * MsgCounter
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_VCU_SysSt
 * @{
 */

/**
 * Signal VCU_SysSt_MsgCounter configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VCU_SysSt_VCU_SysSt_MsgCounter and \ref GET_VCU_SysSt_VCU_SysSt_MsgCounter instead.
 */
#define SIG_VCU_SysSt_VCU_SysSt_MsgCounter          1, 0, 11, 4

/**
 * Signal VCU_SysSt_MsgCounter setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VCU_SysSt_VCU_SysSt_MsgCounter or \ref INIT_VCU_SysSt instead.
 */
#define SETUP_VCU_SysSt_VCU_SysSt_MsgCounter        1, 0, 11, 4, 0

/**
 * Get signal VCU_SysSt_MsgCounter from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VCU_SysSt_VCU_SysSt_MsgCounter(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal VCU_SysSt_MsgCounter in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VCU_SysSt_VCU_SysSt_MsgCounter(buf, val) { \
	buf[1] &= ~(0x0f << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal VCU_SysSt_MsgCounter in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VCU_SysSt_VCU_SysSt_MsgCounter(buf) \
	SET_VCU_SysSt_VCU_SysSt_MsgCounter(buf, 0)

/**
 * Signal VCU_SysSt_MsgCounter value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VCU_SysSt_VCU_SysSt_MsgCounter(x, fmt) \
	((x) * fmt)

/**
 * Signal VCU_SysSt_MsgCounter raw initial value.
 */
#define START_VCU_SysSt_VCU_SysSt_MsgCounter        0

/**
 * Signal VCU_SysSt_MsgCounter raw minimum value.
 */
#define MIN_VCU_SysSt_VCU_SysSt_MsgCounter          0

/**
 * Signal VCU_SysSt_MsgCounter raw maximum value.
 */
#define MAX_VCU_SysSt_VCU_SysSt_MsgCounter          15

/**
 * Signal VCU_SysSt_MsgCounter raw offset value.
 */
#define OFF_VCU_SysSt_VCU_SysSt_MsgCounter          0

/**
 * @}
 */

/**
 * @defgroup SIG_VCU_SysSt_VCU_EVSysReadySt Signal VCU_EVSysReadySt of Message VCU_SysSt (0x117)
 *
 * VCU_EV System Ready Status
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_VCU_SysSt
 * @{
 */

/**
 * Signal VCU_EVSysReadySt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VCU_SysSt_VCU_EVSysReadySt and \ref GET_VCU_SysSt_VCU_EVSysReadySt instead.
 */
#define SIG_VCU_SysSt_VCU_EVSysReadySt              1, 0, 22, 1

/**
 * Signal VCU_EVSysReadySt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VCU_SysSt_VCU_EVSysReadySt or \ref INIT_VCU_SysSt instead.
 */
#define SETUP_VCU_SysSt_VCU_EVSysReadySt            1, 0, 22, 1, 0

/**
 * Get signal VCU_EVSysReadySt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VCU_SysSt_VCU_EVSysReadySt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 6) & 0x01) << 0) \
)

/**
 * Set signal VCU_EVSysReadySt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VCU_SysSt_VCU_EVSysReadySt(buf, val) { \
	buf[2] &= ~(0x01 << 6); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x01) << 6; \
}

/**
 * Set signal VCU_EVSysReadySt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VCU_SysSt_VCU_EVSysReadySt(buf) \
	SET_VCU_SysSt_VCU_EVSysReadySt(buf, 0)

/**
 * Signal VCU_EVSysReadySt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VCU_SysSt_VCU_EVSysReadySt(x, fmt) \
	((x) * fmt)

/**
 * Signal VCU_EVSysReadySt raw initial value.
 */
#define START_VCU_SysSt_VCU_EVSysReadySt            0

/**
 * Signal VCU_EVSysReadySt raw minimum value.
 */
#define MIN_VCU_SysSt_VCU_EVSysReadySt              0

/**
 * Signal VCU_EVSysReadySt raw maximum value.
 */
#define MAX_VCU_SysSt_VCU_EVSysReadySt              1

/**
 * Signal VCU_EVSysReadySt raw offset value.
 */
#define OFF_VCU_SysSt_VCU_EVSysReadySt              0

/**
 * @}
 */

/**
 * @defgroup SIG_VCU_SysSt_VCU_CurrentGearLev Signal VCU_CurrentGearLev of Message VCU_SysSt (0x117)
 *
 * VCU_Current Gear Level
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_VCU_SysSt
 * @{
 */

/**
 * Signal VCU_CurrentGearLev configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VCU_SysSt_VCU_CurrentGearLev and \ref GET_VCU_SysSt_VCU_CurrentGearLev instead.
 */
#define SIG_VCU_SysSt_VCU_CurrentGearLev            1, 0, 19, 4

/**
 * Signal VCU_CurrentGearLev setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VCU_SysSt_VCU_CurrentGearLev or \ref INIT_VCU_SysSt instead.
 */
#define SETUP_VCU_SysSt_VCU_CurrentGearLev          1, 0, 19, 4, 0

/**
 * Get signal VCU_CurrentGearLev from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VCU_SysSt_VCU_CurrentGearLev(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal VCU_CurrentGearLev in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VCU_SysSt_VCU_CurrentGearLev(buf, val) { \
	buf[2] &= ~(0x0f << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal VCU_CurrentGearLev in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VCU_SysSt_VCU_CurrentGearLev(buf) \
	SET_VCU_SysSt_VCU_CurrentGearLev(buf, 0)

/**
 * Signal VCU_CurrentGearLev value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VCU_SysSt_VCU_CurrentGearLev(x, fmt) \
	((x) * fmt)

/**
 * Signal VCU_CurrentGearLev raw initial value.
 */
#define START_VCU_SysSt_VCU_CurrentGearLev          0

/**
 * Signal VCU_CurrentGearLev raw minimum value.
 */
#define MIN_VCU_SysSt_VCU_CurrentGearLev            0

/**
 * Signal VCU_CurrentGearLev raw maximum value.
 */
#define MAX_VCU_SysSt_VCU_CurrentGearLev            15

/**
 * Signal VCU_CurrentGearLev raw offset value.
 */
#define OFF_VCU_SysSt_VCU_CurrentGearLev            0

/**
 * @}
 */

/**
 * @defgroup SIG_VCU_SysSt_VCU_ExterTemp Signal VCU_ExterTemp of Message VCU_SysSt (0x117)
 *
 * VCU_Exter Temperature
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_VCU_SysSt
 * @{
 */

/**
 * Signal VCU_ExterTemp configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VCU_SysSt_VCU_ExterTemp and \ref GET_VCU_SysSt_VCU_ExterTemp instead.
 */
#define SIG_VCU_SysSt_VCU_ExterTemp                 1, 0, 31, 8

/**
 * Signal VCU_ExterTemp setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VCU_SysSt_VCU_ExterTemp or \ref INIT_VCU_SysSt instead.
 */
#define SETUP_VCU_SysSt_VCU_ExterTemp               1, 0, 31, 8, 200

/**
 * Get signal VCU_ExterTemp from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VCU_SysSt_VCU_ExterTemp(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0xff) << 0) \
)

/**
 * Set signal VCU_ExterTemp in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VCU_SysSt_VCU_ExterTemp(buf, val) { \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal VCU_ExterTemp in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VCU_SysSt_VCU_ExterTemp(buf) \
	SET_VCU_SysSt_VCU_ExterTemp(buf, 200)

/**
 * Signal VCU_ExterTemp value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VCU_SysSt_VCU_ExterTemp(x, fmt) \
	((x) * fmt / 2 + fmt * (-40))

/**
 * Signal VCU_ExterTemp raw initial value.
 */
#define START_VCU_SysSt_VCU_ExterTemp               200

/**
 * Signal VCU_ExterTemp raw minimum value.
 */
#define MIN_VCU_SysSt_VCU_ExterTemp                 0

/**
 * Signal VCU_ExterTemp raw maximum value.
 */
#define MAX_VCU_SysSt_VCU_ExterTemp                 255

/**
 * Signal VCU_ExterTemp raw offset value.
 */
#define OFF_VCU_SysSt_VCU_ExterTemp                 -80

/**
 * @}
 */

/**
 * @defgroup SIG_VCU_SysSt_VCU_ExterTempVD Signal VCU_ExterTempVD of Message VCU_SysSt (0x117)
 *
 * VCU_Exter Temperature Valid
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_VCU_SysSt
 * @{
 */

/**
 * Signal VCU_ExterTempVD configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_VCU_SysSt_VCU_ExterTempVD and \ref GET_VCU_SysSt_VCU_ExterTempVD instead.
 */
#define SIG_VCU_SysSt_VCU_ExterTempVD               1, 0, 39, 1

/**
 * Signal VCU_ExterTempVD setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_VCU_SysSt_VCU_ExterTempVD or \ref INIT_VCU_SysSt instead.
 */
#define SETUP_VCU_SysSt_VCU_ExterTempVD             1, 0, 39, 1, 0

/**
 * Get signal VCU_ExterTempVD from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_VCU_SysSt_VCU_ExterTempVD(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 7) & 0x01) << 0) \
)

/**
 * Set signal VCU_ExterTempVD in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_VCU_SysSt_VCU_ExterTempVD(buf, val) { \
	buf[4] &= ~(0x01 << 7); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
}

/**
 * Set signal VCU_ExterTempVD in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_VCU_SysSt_VCU_ExterTempVD(buf) \
	SET_VCU_SysSt_VCU_ExterTempVD(buf, 0)

/**
 * Signal VCU_ExterTempVD value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_VCU_SysSt_VCU_ExterTempVD(x, fmt) \
	((x) * fmt)

/**
 * Signal VCU_ExterTempVD raw initial value.
 */
#define START_VCU_SysSt_VCU_ExterTempVD             0

/**
 * Signal VCU_ExterTempVD raw minimum value.
 */
#define MIN_VCU_SysSt_VCU_ExterTempVD               0

/**
 * Signal VCU_ExterTempVD raw maximum value.
 */
#define MAX_VCU_SysSt_VCU_ExterTempVD               1

/**
 * Signal VCU_ExterTempVD raw offset value.
 */
#define OFF_VCU_SysSt_VCU_ExterTempVD               0

/**
 * @}
 */

/**
 * @defgroup SIG_iBCM_PowerMode_BCM_KeySt Signal BCM_KeySt of Message iBCM_PowerMode (0x224)
 *
 * iBCM_PowerMode
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_iBCM_PowerMode
 * @{
 */

/**
 * Signal BCM_KeySt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_iBCM_PowerMode_BCM_KeySt and \ref GET_iBCM_PowerMode_BCM_KeySt instead.
 */
#define SIG_iBCM_PowerMode_BCM_KeySt                1, 0, 7, 2

/**
 * Signal BCM_KeySt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_iBCM_PowerMode_BCM_KeySt or \ref INIT_iBCM_PowerMode instead.
 */
#define SETUP_iBCM_PowerMode_BCM_KeySt              1, 0, 7, 2, 0

/**
 * Get signal BCM_KeySt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_iBCM_PowerMode_BCM_KeySt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 6) & 0x03) << 0) \
)

/**
 * Set signal BCM_KeySt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_iBCM_PowerMode_BCM_KeySt(buf, val) { \
	buf[0] &= ~(0x03 << 6); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x03) << 6; \
}

/**
 * Set signal BCM_KeySt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_iBCM_PowerMode_BCM_KeySt(buf) \
	SET_iBCM_PowerMode_BCM_KeySt(buf, 0)

/**
 * Signal BCM_KeySt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_iBCM_PowerMode_BCM_KeySt(x, fmt) \
	((x) * fmt)

/**
 * Signal BCM_KeySt raw initial value.
 */
#define START_iBCM_PowerMode_BCM_KeySt              0

/**
 * Signal BCM_KeySt raw minimum value.
 */
#define MIN_iBCM_PowerMode_BCM_KeySt                0

/**
 * Signal BCM_KeySt raw maximum value.
 */
#define MAX_iBCM_PowerMode_BCM_KeySt                3

/**
 * Signal BCM_KeySt raw offset value.
 */
#define OFF_iBCM_PowerMode_BCM_KeySt                0

/**
 * @}
 */

/**
 * @defgroup SIG_FR_TimeSync_SYNC_FC_Type Signal SYNC_FC_Type of Message FR_TimeSync (0x300)
 *
 * Type=0x20:Tsync Type=0x28:Tsync FUP
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_FR_TimeSync
 * @{
 */

/**
 * Signal SYNC_FC_Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_FR_TimeSync_SYNC_FC_Type and \ref GET_FR_TimeSync_SYNC_FC_Type instead.
 */
#define SIG_FR_TimeSync_SYNC_FC_Type                1, 0, 7, 8

/**
 * Signal SYNC_FC_Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_FR_TimeSync_SYNC_FC_Type or \ref INIT_FR_TimeSync instead.
 */
#define SETUP_FR_TimeSync_SYNC_FC_Type              1, 0, 7, 8, 0

/**
 * Get signal SYNC_FC_Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_FR_TimeSync_SYNC_FC_Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
)

/**
 * Set signal SYNC_FC_Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_FR_TimeSync_SYNC_FC_Type(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal SYNC_FC_Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_FR_TimeSync_SYNC_FC_Type(buf) \
	SET_FR_TimeSync_SYNC_FC_Type(buf, 0)

/**
 * Signal SYNC_FC_Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_FR_TimeSync_SYNC_FC_Type(x, fmt) \
	((x) * fmt)

/**
 * Signal SYNC_FC_Type raw initial value.
 */
#define START_FR_TimeSync_SYNC_FC_Type              0

/**
 * Signal SYNC_FC_Type raw minimum value.
 */
#define MIN_FR_TimeSync_SYNC_FC_Type                0

/**
 * Signal SYNC_FC_Type raw maximum value.
 */
#define MAX_FR_TimeSync_SYNC_FC_Type                255

/**
 * Signal SYNC_FC_Type raw offset value.
 */
#define OFF_FR_TimeSync_SYNC_FC_Type                0

/**
 * @}
 */

/**
 * @defgroup SIG_FR_TimeSync_SYNC_FC_CRC Signal SYNC_FC_CRC of Message FR_TimeSync (0x300)
 *
 * CRC
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_FR_TimeSync
 * @{
 */

/**
 * Signal SYNC_FC_CRC configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_FR_TimeSync_SYNC_FC_CRC and \ref GET_FR_TimeSync_SYNC_FC_CRC instead.
 */
#define SIG_FR_TimeSync_SYNC_FC_CRC                 1, 0, 15, 8

/**
 * Signal SYNC_FC_CRC setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_FR_TimeSync_SYNC_FC_CRC or \ref INIT_FR_TimeSync instead.
 */
#define SETUP_FR_TimeSync_SYNC_FC_CRC               1, 0, 15, 8, 0

/**
 * Get signal SYNC_FC_CRC from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_FR_TimeSync_SYNC_FC_CRC(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0xff) << 0) \
)

/**
 * Set signal SYNC_FC_CRC in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_FR_TimeSync_SYNC_FC_CRC(buf, val) { \
	buf[1] &= ~(0xff << 0); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal SYNC_FC_CRC in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_FR_TimeSync_SYNC_FC_CRC(buf) \
	SET_FR_TimeSync_SYNC_FC_CRC(buf, 0)

/**
 * Signal SYNC_FC_CRC value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_FR_TimeSync_SYNC_FC_CRC(x, fmt) \
	((x) * fmt)

/**
 * Signal SYNC_FC_CRC raw initial value.
 */
#define START_FR_TimeSync_SYNC_FC_CRC               0

/**
 * Signal SYNC_FC_CRC raw minimum value.
 */
#define MIN_FR_TimeSync_SYNC_FC_CRC                 0

/**
 * Signal SYNC_FC_CRC raw maximum value.
 */
#define MAX_FR_TimeSync_SYNC_FC_CRC                 255

/**
 * Signal SYNC_FC_CRC raw offset value.
 */
#define OFF_FR_TimeSync_SYNC_FC_CRC                 0

/**
 * @}
 */

/**
 * @defgroup SIG_FR_TimeSync_SYNC_FC_Sequencecnt Signal SYNC_FC_Sequencecnt of Message FR_TimeSync (0x300)
 *
 * Sequence counter
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_FR_TimeSync
 * @{
 */

/**
 * Signal SYNC_FC_Sequencecnt configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_FR_TimeSync_SYNC_FC_Sequencecnt and \ref GET_FR_TimeSync_SYNC_FC_Sequencecnt instead.
 */
#define SIG_FR_TimeSync_SYNC_FC_Sequencecnt         1, 0, 19, 4

/**
 * Signal SYNC_FC_Sequencecnt setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_FR_TimeSync_SYNC_FC_Sequencecnt or \ref INIT_FR_TimeSync instead.
 */
#define SETUP_FR_TimeSync_SYNC_FC_Sequencecnt       1, 0, 19, 4, 0

/**
 * Get signal SYNC_FC_Sequencecnt from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_FR_TimeSync_SYNC_FC_Sequencecnt(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 0) & 0x0f) << 0) \
)

/**
 * Set signal SYNC_FC_Sequencecnt in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_FR_TimeSync_SYNC_FC_Sequencecnt(buf, val) { \
	buf[2] &= ~(0x0f << 0); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x0f) << 0; \
}

/**
 * Set signal SYNC_FC_Sequencecnt in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_FR_TimeSync_SYNC_FC_Sequencecnt(buf) \
	SET_FR_TimeSync_SYNC_FC_Sequencecnt(buf, 0)

/**
 * Signal SYNC_FC_Sequencecnt value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_FR_TimeSync_SYNC_FC_Sequencecnt(x, fmt) \
	((x) * fmt)

/**
 * Signal SYNC_FC_Sequencecnt raw initial value.
 */
#define START_FR_TimeSync_SYNC_FC_Sequencecnt       0

/**
 * Signal SYNC_FC_Sequencecnt raw minimum value.
 */
#define MIN_FR_TimeSync_SYNC_FC_Sequencecnt         0

/**
 * Signal SYNC_FC_Sequencecnt raw maximum value.
 */
#define MAX_FR_TimeSync_SYNC_FC_Sequencecnt         15

/**
 * Signal SYNC_FC_Sequencecnt raw offset value.
 */
#define OFF_FR_TimeSync_SYNC_FC_Sequencecnt         0

/**
 * @}
 */

/**
 * @defgroup SIG_FR_TimeSync_SYNC_FC_TimeDomain Signal SYNC_FC_TimeDomain of Message FR_TimeSync (0x300)
 *
 * Time Domain
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_FR_TimeSync
 * @{
 */

/**
 * Signal SYNC_FC_TimeDomain configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_FR_TimeSync_SYNC_FC_TimeDomain and \ref GET_FR_TimeSync_SYNC_FC_TimeDomain instead.
 */
#define SIG_FR_TimeSync_SYNC_FC_TimeDomain          1, 0, 23, 4

/**
 * Signal SYNC_FC_TimeDomain setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_FR_TimeSync_SYNC_FC_TimeDomain or \ref INIT_FR_TimeSync instead.
 */
#define SETUP_FR_TimeSync_SYNC_FC_TimeDomain        1, 0, 23, 4, 0

/**
 * Get signal SYNC_FC_TimeDomain from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_FR_TimeSync_SYNC_FC_TimeDomain(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 4) & 0x0f) << 0) \
)

/**
 * Set signal SYNC_FC_TimeDomain in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_FR_TimeSync_SYNC_FC_TimeDomain(buf, val) { \
	buf[2] &= ~(0x0f << 4); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
}

/**
 * Set signal SYNC_FC_TimeDomain in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_FR_TimeSync_SYNC_FC_TimeDomain(buf) \
	SET_FR_TimeSync_SYNC_FC_TimeDomain(buf, 0)

/**
 * Signal SYNC_FC_TimeDomain value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_FR_TimeSync_SYNC_FC_TimeDomain(x, fmt) \
	((x) * fmt)

/**
 * Signal SYNC_FC_TimeDomain raw initial value.
 */
#define START_FR_TimeSync_SYNC_FC_TimeDomain        0

/**
 * Signal SYNC_FC_TimeDomain raw minimum value.
 */
#define MIN_FR_TimeSync_SYNC_FC_TimeDomain          0

/**
 * Signal SYNC_FC_TimeDomain raw maximum value.
 */
#define MAX_FR_TimeSync_SYNC_FC_TimeDomain          15

/**
 * Signal SYNC_FC_TimeDomain raw offset value.
 */
#define OFF_FR_TimeSync_SYNC_FC_TimeDomain          0

/**
 * @}
 */

/**
 * @defgroup SIG_FR_TimeSync_SYNC_FC_OVS Signal SYNC_FC_OVS of Message FR_TimeSync (0x300)
 *
 * In FUP PDU OVS=Overflow of seconds
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_FR_TimeSync
 * @{
 */

/**
 * Signal SYNC_FC_OVS configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_FR_TimeSync_SYNC_FC_OVS and \ref GET_FR_TimeSync_SYNC_FC_OVS instead.
 */
#define SIG_FR_TimeSync_SYNC_FC_OVS                 1, 0, 25, 2

/**
 * Signal SYNC_FC_OVS setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_FR_TimeSync_SYNC_FC_OVS or \ref INIT_FR_TimeSync instead.
 */
#define SETUP_FR_TimeSync_SYNC_FC_OVS               1, 0, 25, 2, 0

/**
 * Get signal SYNC_FC_OVS from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_FR_TimeSync_SYNC_FC_OVS(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 0) & 0x03) << 0) \
)

/**
 * Set signal SYNC_FC_OVS in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_FR_TimeSync_SYNC_FC_OVS(buf, val) { \
	buf[3] &= ~(0x03 << 0); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x03) << 0; \
}

/**
 * Set signal SYNC_FC_OVS in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_FR_TimeSync_SYNC_FC_OVS(buf) \
	SET_FR_TimeSync_SYNC_FC_OVS(buf, 0)

/**
 * Signal SYNC_FC_OVS value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_FR_TimeSync_SYNC_FC_OVS(x, fmt) \
	((x) * fmt)

/**
 * Signal SYNC_FC_OVS raw initial value.
 */
#define START_FR_TimeSync_SYNC_FC_OVS               0

/**
 * Signal SYNC_FC_OVS raw minimum value.
 */
#define MIN_FR_TimeSync_SYNC_FC_OVS                 0

/**
 * Signal SYNC_FC_OVS raw maximum value.
 */
#define MAX_FR_TimeSync_SYNC_FC_OVS                 3

/**
 * Signal SYNC_FC_OVS raw offset value.
 */
#define OFF_FR_TimeSync_SYNC_FC_OVS                 0

/**
 * @}
 */

/**
 * @defgroup SIG_FR_TimeSync_SYNC_FC_SGW Signal SYNC_FC_SGW of Message FR_TimeSync (0x300)
 *
 * In FUP PDU SyncToGTM=0 SyncToSubDomain=1
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_FR_TimeSync
 * @{
 */

/**
 * Signal SYNC_FC_SGW configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_FR_TimeSync_SYNC_FC_SGW and \ref GET_FR_TimeSync_SYNC_FC_SGW instead.
 */
#define SIG_FR_TimeSync_SYNC_FC_SGW                 1, 0, 26, 1

/**
 * Signal SYNC_FC_SGW setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_FR_TimeSync_SYNC_FC_SGW or \ref INIT_FR_TimeSync instead.
 */
#define SETUP_FR_TimeSync_SYNC_FC_SGW               1, 0, 26, 1, 0

/**
 * Get signal SYNC_FC_SGW from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_FR_TimeSync_SYNC_FC_SGW(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 2) & 0x01) << 0) \
)

/**
 * Set signal SYNC_FC_SGW in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_FR_TimeSync_SYNC_FC_SGW(buf, val) { \
	buf[3] &= ~(0x01 << 2); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x01) << 2; \
}

/**
 * Set signal SYNC_FC_SGW in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_FR_TimeSync_SYNC_FC_SGW(buf) \
	SET_FR_TimeSync_SYNC_FC_SGW(buf, 0)

/**
 * Signal SYNC_FC_SGW value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_FR_TimeSync_SYNC_FC_SGW(x, fmt) \
	((x) * fmt)

/**
 * Signal SYNC_FC_SGW raw initial value.
 */
#define START_FR_TimeSync_SYNC_FC_SGW               0

/**
 * Signal SYNC_FC_SGW raw minimum value.
 */
#define MIN_FR_TimeSync_SYNC_FC_SGW                 0

/**
 * Signal SYNC_FC_SGW raw maximum value.
 */
#define MAX_FR_TimeSync_SYNC_FC_SGW                 1

/**
 * Signal SYNC_FC_SGW raw offset value.
 */
#define OFF_FR_TimeSync_SYNC_FC_SGW                 0

/**
 * @}
 */

/**
 * @defgroup SIG_FR_TimeSync_SYNC_FC_Reserved Signal SYNC_FC_Reserved of Message FR_TimeSync (0x300)
 *
 * In FUP PDU Reserved default=0
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_FR_TimeSync
 * @{
 */

/**
 * Signal SYNC_FC_Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_FR_TimeSync_SYNC_FC_Reserved and \ref GET_FR_TimeSync_SYNC_FC_Reserved instead.
 */
#define SIG_FR_TimeSync_SYNC_FC_Reserved            1, 0, 31, 5

/**
 * Signal SYNC_FC_Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_FR_TimeSync_SYNC_FC_Reserved or \ref INIT_FR_TimeSync instead.
 */
#define SETUP_FR_TimeSync_SYNC_FC_Reserved          1, 0, 31, 5, 0

/**
 * Get signal SYNC_FC_Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_FR_TimeSync_SYNC_FC_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal SYNC_FC_Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_FR_TimeSync_SYNC_FC_Reserved(buf, val) { \
	buf[3] &= ~(0x1f << 3); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal SYNC_FC_Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_FR_TimeSync_SYNC_FC_Reserved(buf) \
	SET_FR_TimeSync_SYNC_FC_Reserved(buf, 0)

/**
 * Signal SYNC_FC_Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_FR_TimeSync_SYNC_FC_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal SYNC_FC_Reserved raw initial value.
 */
#define START_FR_TimeSync_SYNC_FC_Reserved          0

/**
 * Signal SYNC_FC_Reserved raw minimum value.
 */
#define MIN_FR_TimeSync_SYNC_FC_Reserved            0

/**
 * Signal SYNC_FC_Reserved raw maximum value.
 */
#define MAX_FR_TimeSync_SYNC_FC_Reserved            31

/**
 * Signal SYNC_FC_Reserved raw offset value.
 */
#define OFF_FR_TimeSync_SYNC_FC_Reserved            0

/**
 * @}
 */

/**
 * @defgroup SIG_FR_TimeSync_SYNC_FC_SyncTime Signal SYNC_FC_SyncTime of Message FR_TimeSync (0x300)
 *
 * Tsync:SyncTimeSec=32bit LSB of the 48 bits seconds part time Tsync FUP:Sync TimeNSec=32 bit value in nanosconds
 *
 * Received by the ECUs:
 * - \ref ECU_RPC
 *
 * @ingroup MSG_FR_TimeSync
 * @{
 */

/**
 * Signal SYNC_FC_SyncTime configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_FR_TimeSync_SYNC_FC_SyncTime and \ref GET_FR_TimeSync_SYNC_FC_SyncTime instead.
 */
#define SIG_FR_TimeSync_SYNC_FC_SyncTime            1, 0, 39, 32

/**
 * Signal SYNC_FC_SyncTime setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_FR_TimeSync_SYNC_FC_SyncTime or \ref INIT_FR_TimeSync instead.
 */
#define SETUP_FR_TimeSync_SYNC_FC_SyncTime          1, 0, 39, 32, 0

/**
 * Get signal SYNC_FC_SyncTime from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_FR_TimeSync_SYNC_FC_SyncTime(buf) (0 \
	| (uint32_t)(+(uint32_t)((buf[4] >> 0) & 0xff) << 24) \
	| (uint32_t)(+(uint32_t)((buf[5] >> 0) & 0xff) << 16) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0xff) << 8) \
	| (uint8_t)(+(uint8_t)((buf[7] >> 0) & 0xff) << 0) \
)

/**
 * Set signal SYNC_FC_SyncTime in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_FR_TimeSync_SYNC_FC_SyncTime(buf, val) { \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint32_t)(val) >> 24) & 0xff) << 0; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint32_t)(val) >> 16) & 0xff) << 0; \
	buf[6] &= ~(0xff << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 8) & 0xff) << 0; \
	buf[7] &= ~(0xff << 0); \
	buf[7] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
}

/**
 * Set signal SYNC_FC_SyncTime in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_FR_TimeSync_SYNC_FC_SyncTime(buf) \
	SET_FR_TimeSync_SYNC_FC_SyncTime(buf, 0)

/**
 * Signal SYNC_FC_SyncTime value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_FR_TimeSync_SYNC_FC_SyncTime(x, fmt) \
	((x) * fmt)

/**
 * Signal SYNC_FC_SyncTime raw initial value.
 */
#define START_FR_TimeSync_SYNC_FC_SyncTime          0

/**
 * Signal SYNC_FC_SyncTime raw minimum value.
 */
#define MIN_FR_TimeSync_SYNC_FC_SyncTime            0

/**
 * Signal SYNC_FC_SyncTime raw maximum value.
 */
#define MAX_FR_TimeSync_SYNC_FC_SyncTime            4294967295

/**
 * Signal SYNC_FC_SyncTime raw offset value.
 */
#define OFF_FR_TimeSync_SYNC_FC_SyncTime            0

/**
 * @}
 */

