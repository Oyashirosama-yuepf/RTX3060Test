#ifndef HOLO_SENSORS_ME8_ME8_OPLANESHOST_H_
#define HOLO_SENSORS_ME8_ME8_OPLANESHOST_H_
/** \file
 * CAN DBC C-Headers
 *
 * These headers were generated by dbc2c.awk on 2021年 12月 06日 星期一 13:13:09 CST.
 *
 * The dbc2c.awk script parses Vector .dbc files, and generates C-style
 * headers with Doxygen documentation from a set of templates.
 *
 * The following databases were parsed:
 * - \ref DB_opLanesHost
 */

/**
 * @defgroup DB_opLanesHost CAN Database opLanesHost
 *
 * Path to file: output/opLanesHost.dbc
 *
 * Provides the following ECUs:
 */

/**
 * @defgroup MSG_Lanes_Host_Header Message Lanes_Host_Header (0x76e)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Host_Header_Is_Construction_Area
 * - \ref SIG_Lanes_Host_Header_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Host_Header configuration tuple.
 */
#define MSG_Lanes_Host_Header                       0x76e, 0, 1

/**
 * Message Lanes_Host_Header id.
 */
#define ID_Lanes_Host_Header                        0x76e

/**
 * Message Lanes_Host_Header extended id bit.
 */
#define EXT_Lanes_Host_Header                       0

/**
 * Message Lanes_Host_Header Data Length Count.
 */
#define DLC_Lanes_Host_Header                       1

/**
 * Message Lanes_Host_Header cycle time.
 */
#define CYCLE_Lanes_Host_Header                     0

/**
 * Message Lanes_Host_Header fast cycle time.
 */
#define FAST_Lanes_Host_Header                      0

/**
 * Initialise message Lanes_Host_Header buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Host_Header(buf) { \
	INITSIG_Lanes_Host_Header_Is_Construction_Area(buf); \
	INITSIG_Lanes_Host_Header_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Host_0 Message Lanes_Host_0 (0x770)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Host_0_LH_Confidence
 * - \ref SIG_Lanes_Host_0_LH_Lanemark_Type
 * - \ref SIG_Lanes_Host_0_LH_Side
 * - \ref SIG_Lanes_Host_0_LH_VR_Start
 * - \ref SIG_Lanes_Host_0_LH_VR_End
 * - \ref SIG_Lanes_Host_0_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Host_0 configuration tuple.
 */
#define MSG_Lanes_Host_0                            0x770, 0, 6

/**
 * Message Lanes_Host_0 id.
 */
#define ID_Lanes_Host_0                             0x770

/**
 * Message Lanes_Host_0 extended id bit.
 */
#define EXT_Lanes_Host_0                            0

/**
 * Message Lanes_Host_0 Data Length Count.
 */
#define DLC_Lanes_Host_0                            6

/**
 * Message Lanes_Host_0 cycle time.
 */
#define CYCLE_Lanes_Host_0                          0

/**
 * Message Lanes_Host_0 fast cycle time.
 */
#define FAST_Lanes_Host_0                           0

/**
 * Initialise message Lanes_Host_0 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Host_0(buf) { \
	INITSIG_Lanes_Host_0_LH_Confidence(buf); \
	INITSIG_Lanes_Host_0_LH_Lanemark_Type(buf); \
	INITSIG_Lanes_Host_0_LH_Side(buf); \
	INITSIG_Lanes_Host_0_LH_VR_Start(buf); \
	INITSIG_Lanes_Host_0_LH_VR_End(buf); \
	INITSIG_Lanes_Host_0_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Host_1 Message Lanes_Host_1 (0x771)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Host_1_LH_C0
 * - \ref SIG_Lanes_Host_1_LH_C1
 * - \ref SIG_Lanes_Host_1_LH_C2
 * - \ref SIG_Lanes_Host_1_LH_C3
 * - \ref SIG_Lanes_Host_1_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Host_1 configuration tuple.
 */
#define MSG_Lanes_Host_1                            0x771, 0, 7

/**
 * Message Lanes_Host_1 id.
 */
#define ID_Lanes_Host_1                             0x771

/**
 * Message Lanes_Host_1 extended id bit.
 */
#define EXT_Lanes_Host_1                            0

/**
 * Message Lanes_Host_1 Data Length Count.
 */
#define DLC_Lanes_Host_1                            7

/**
 * Message Lanes_Host_1 cycle time.
 */
#define CYCLE_Lanes_Host_1                          0

/**
 * Message Lanes_Host_1 fast cycle time.
 */
#define FAST_Lanes_Host_1                           0

/**
 * Initialise message Lanes_Host_1 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Host_1(buf) { \
	INITSIG_Lanes_Host_1_LH_C0(buf); \
	INITSIG_Lanes_Host_1_LH_C1(buf); \
	INITSIG_Lanes_Host_1_LH_C2(buf); \
	INITSIG_Lanes_Host_1_LH_C3(buf); \
	INITSIG_Lanes_Host_1_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Host_2 Message Lanes_Host_2 (0x772)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Host_2_LH_Confidence
 * - \ref SIG_Lanes_Host_2_LH_Lanemark_Type
 * - \ref SIG_Lanes_Host_2_LH_Side
 * - \ref SIG_Lanes_Host_2_LH_VR_Start
 * - \ref SIG_Lanes_Host_2_LH_VR_End
 * - \ref SIG_Lanes_Host_2_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Host_2 configuration tuple.
 */
#define MSG_Lanes_Host_2                            0x772, 0, 6

/**
 * Message Lanes_Host_2 id.
 */
#define ID_Lanes_Host_2                             0x772

/**
 * Message Lanes_Host_2 extended id bit.
 */
#define EXT_Lanes_Host_2                            0

/**
 * Message Lanes_Host_2 Data Length Count.
 */
#define DLC_Lanes_Host_2                            6

/**
 * Message Lanes_Host_2 cycle time.
 */
#define CYCLE_Lanes_Host_2                          0

/**
 * Message Lanes_Host_2 fast cycle time.
 */
#define FAST_Lanes_Host_2                           0

/**
 * Initialise message Lanes_Host_2 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Host_2(buf) { \
	INITSIG_Lanes_Host_2_LH_Confidence(buf); \
	INITSIG_Lanes_Host_2_LH_Lanemark_Type(buf); \
	INITSIG_Lanes_Host_2_LH_Side(buf); \
	INITSIG_Lanes_Host_2_LH_VR_Start(buf); \
	INITSIG_Lanes_Host_2_LH_VR_End(buf); \
	INITSIG_Lanes_Host_2_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup MSG_Lanes_Host_3 Message Lanes_Host_3 (0x773)
 *
 * Contains signal groups:
 *
 * Contains signals:
 * - \ref SIG_Lanes_Host_3_LH_C0
 * - \ref SIG_Lanes_Host_3_LH_C1
 * - \ref SIG_Lanes_Host_3_LH_C2
 * - \ref SIG_Lanes_Host_3_LH_C3
 * - \ref SIG_Lanes_Host_3_Reserved
 *
 * @{
 */

/**
 * Message Lanes_Host_3 configuration tuple.
 */
#define MSG_Lanes_Host_3                            0x773, 0, 7

/**
 * Message Lanes_Host_3 id.
 */
#define ID_Lanes_Host_3                             0x773

/**
 * Message Lanes_Host_3 extended id bit.
 */
#define EXT_Lanes_Host_3                            0

/**
 * Message Lanes_Host_3 Data Length Count.
 */
#define DLC_Lanes_Host_3                            7

/**
 * Message Lanes_Host_3 cycle time.
 */
#define CYCLE_Lanes_Host_3                          0

/**
 * Message Lanes_Host_3 fast cycle time.
 */
#define FAST_Lanes_Host_3                           0

/**
 * Initialise message Lanes_Host_3 buffer.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INIT_Lanes_Host_3(buf) { \
	INITSIG_Lanes_Host_3_LH_C0(buf); \
	INITSIG_Lanes_Host_3_LH_C1(buf); \
	INITSIG_Lanes_Host_3_LH_C2(buf); \
	INITSIG_Lanes_Host_3_LH_C3(buf); \
	INITSIG_Lanes_Host_3_Reserved(buf); \
}

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_Header_Is_Construction_Area Signal Is_Construction_Area of Message Lanes_Host_Header (0x76e)
 *
 * True if this is a construction area scene. 
 *
 * Contains the value table \ref ENUM_Lanes_Host_Header_Is_Construction_Area.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_Header
 * @{
 */

/**
 * Signal Is_Construction_Area configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_Header_Is_Construction_Area and \ref GET_Lanes_Host_Header_Is_Construction_Area instead.
 */
#define SIG_Lanes_Host_Header_Is_Construction_Area        0, 0, 0, 1

/**
 * Signal Is_Construction_Area setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_Header_Is_Construction_Area or \ref INIT_Lanes_Host_Header instead.
 */
#define SETUP_Lanes_Host_Header_Is_Construction_Area      0, 0, 0, 1, 0

/**
 * Get signal Is_Construction_Area from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_Header_Is_Construction_Area(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x01) << 0) \
)

/**
 * Set signal Is_Construction_Area in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_Header_Is_Construction_Area(buf, val) { \
	buf[0] &= ~(0x01 << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 0; \
}

/**
 * Set signal Is_Construction_Area in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_Header_Is_Construction_Area(buf) \
	SET_Lanes_Host_Header_Is_Construction_Area(buf, 0)

/**
 * Signal Is_Construction_Area value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_Header_Is_Construction_Area(x, fmt) \
	((x) * fmt)

/**
 * Signal Is_Construction_Area raw initial value.
 */
#define START_Lanes_Host_Header_Is_Construction_Area      0

/**
 * Signal Is_Construction_Area raw minimum value.
 */
#define MIN_Lanes_Host_Header_Is_Construction_Area        0

/**
 * Signal Is_Construction_Area raw maximum value.
 */
#define MAX_Lanes_Host_Header_Is_Construction_Area        1

/**
 * Signal Is_Construction_Area raw offset value.
 */
#define OFF_Lanes_Host_Header_Is_Construction_Area        0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Host_Header_Is_Construction_Area Value Table for Signal Is_Construction_Area in Message Lanes_Host_Header (0x76e)
 *
 * Enum values defined for \ref SIG_Lanes_Host_Header_Is_Construction_Area.
 *
 * @ingroup SIG_Lanes_Host_Header_Is_Construction_Area
 */

/**
 * Value table Lanes_Host_Header_Is_Construction_Area entry TRUE.
 *
 * @ingroup ENUM_Lanes_Host_Header_Is_Construction_Area
 */
#define Lanes_Host_Header_Is_Construction_Area_TRUE                1

/**
 * Value table Lanes_Host_Header_Is_Construction_Area entry FALSE.
 *
 * @ingroup ENUM_Lanes_Host_Header_Is_Construction_Area
 */
#define Lanes_Host_Header_Is_Construction_Area_FALSE               0

/**
 * @defgroup SIG_Lanes_Host_Header_Reserved Signal Reserved of Message Lanes_Host_Header (0x76e)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_Header
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_Header_Reserved and \ref GET_Lanes_Host_Header_Reserved instead.
 */
#define SIG_Lanes_Host_Header_Reserved              0, 0, 1, 7

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_Header_Reserved or \ref INIT_Lanes_Host_Header instead.
 */
#define SETUP_Lanes_Host_Header_Reserved            0, 0, 1, 7, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_Header_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 1) & 0x7f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_Header_Reserved(buf, val) { \
	buf[0] &= ~(0x7f << 1); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 1; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_Header_Reserved(buf) \
	SET_Lanes_Host_Header_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_Header_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Host_Header_Reserved            0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Host_Header_Reserved              0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Host_Header_Reserved              0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Host_Header_Reserved              0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_0_LH_Confidence Signal LH_Confidence of Message Lanes_Host_0 (0x770)
 *
 * Confidence of lane mark 
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_0
 * @{
 */

/**
 * Signal LH_Confidence configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_0_LH_Confidence and \ref GET_Lanes_Host_0_LH_Confidence instead.
 */
#define SIG_Lanes_Host_0_LH_Confidence              0, 0, 0, 7

/**
 * Signal LH_Confidence setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_0_LH_Confidence or \ref INIT_Lanes_Host_0 instead.
 */
#define SETUP_Lanes_Host_0_LH_Confidence            0, 0, 0, 7, 0

/**
 * Get signal LH_Confidence from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_0_LH_Confidence(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal LH_Confidence in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_0_LH_Confidence(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal LH_Confidence in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_0_LH_Confidence(buf) \
	SET_Lanes_Host_0_LH_Confidence(buf, 0)

/**
 * Signal LH_Confidence value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_0_LH_Confidence(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal LH_Confidence raw initial value.
 */
#define START_Lanes_Host_0_LH_Confidence            0

/**
 * Signal LH_Confidence raw minimum value.
 */
#define MIN_Lanes_Host_0_LH_Confidence              0

/**
 * Signal LH_Confidence raw maximum value.
 */
#define MAX_Lanes_Host_0_LH_Confidence              100

/**
 * Signal LH_Confidence raw offset value.
 */
#define OFF_Lanes_Host_0_LH_Confidence              0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_0_LH_Lanemark_Type Signal LH_Lanemark_Type of Message Lanes_Host_0 (0x770)
 *
 * Lane Mark Type Classification (first segment only)
 *
 * Contains the value table \ref ENUM_Lanes_Host_0_LH_Lanemark_Type.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_0
 * @{
 */

/**
 * Signal LH_Lanemark_Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_0_LH_Lanemark_Type and \ref GET_Lanes_Host_0_LH_Lanemark_Type instead.
 */
#define SIG_Lanes_Host_0_LH_Lanemark_Type           0, 0, 7, 4

/**
 * Signal LH_Lanemark_Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_0_LH_Lanemark_Type or \ref INIT_Lanes_Host_0 instead.
 */
#define SETUP_Lanes_Host_0_LH_Lanemark_Type         0, 0, 7, 4, 0

/**
 * Get signal LH_Lanemark_Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_0_LH_Lanemark_Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x07) << 1) \
)

/**
 * Set signal LH_Lanemark_Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_0_LH_Lanemark_Type(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal LH_Lanemark_Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_0_LH_Lanemark_Type(buf) \
	SET_Lanes_Host_0_LH_Lanemark_Type(buf, 0)

/**
 * Signal LH_Lanemark_Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_0_LH_Lanemark_Type(x, fmt) \
	((x) * fmt)

/**
 * Signal LH_Lanemark_Type raw initial value.
 */
#define START_Lanes_Host_0_LH_Lanemark_Type         0

/**
 * Signal LH_Lanemark_Type raw minimum value.
 */
#define MIN_Lanes_Host_0_LH_Lanemark_Type           0

/**
 * Signal LH_Lanemark_Type raw maximum value.
 */
#define MAX_Lanes_Host_0_LH_Lanemark_Type           6

/**
 * Signal LH_Lanemark_Type raw offset value.
 */
#define OFF_Lanes_Host_0_LH_Lanemark_Type           0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Host_0_LH_Lanemark_Type Value Table for Signal LH_Lanemark_Type in Message Lanes_Host_0 (0x770)
 *
 * Enum values defined for \ref SIG_Lanes_Host_0_LH_Lanemark_Type.
 *
 * @ingroup SIG_Lanes_Host_0_LH_Lanemark_Type
 */

/**
 * Value table Lanes_Host_0_LH_Lanemark_Type entry HOV_LANE.
 *
 * @ingroup ENUM_Lanes_Host_0_LH_Lanemark_Type
 */
#define Lanes_Host_0_LH_Lanemark_Type_HOV_LANE            6

/**
 * Value table Lanes_Host_0_LH_Lanemark_Type entry DECELERATION.
 *
 * @ingroup ENUM_Lanes_Host_0_LH_Lanemark_Type
 */
#define Lanes_Host_0_LH_Lanemark_Type_DECELERATION        5

/**
 * Value table Lanes_Host_0_LH_Lanemark_Type entry BOTTS.
 *
 * @ingroup ENUM_Lanes_Host_0_LH_Lanemark_Type
 */
#define Lanes_Host_0_LH_Lanemark_Type_BOTTS               4

/**
 * Value table Lanes_Host_0_LH_Lanemark_Type entry DLM.
 *
 * @ingroup ENUM_Lanes_Host_0_LH_Lanemark_Type
 */
#define Lanes_Host_0_LH_Lanemark_Type_DLM                 3

/**
 * Value table Lanes_Host_0_LH_Lanemark_Type entry DASHED.
 *
 * @ingroup ENUM_Lanes_Host_0_LH_Lanemark_Type
 */
#define Lanes_Host_0_LH_Lanemark_Type_DASHED              2

/**
 * Value table Lanes_Host_0_LH_Lanemark_Type entry SOLID.
 *
 * @ingroup ENUM_Lanes_Host_0_LH_Lanemark_Type
 */
#define Lanes_Host_0_LH_Lanemark_Type_SOLID               1

/**
 * Value table Lanes_Host_0_LH_Lanemark_Type entry UNDECIDED.
 *
 * @ingroup ENUM_Lanes_Host_0_LH_Lanemark_Type
 */
#define Lanes_Host_0_LH_Lanemark_Type_UNDECIDED           0

/**
 * @defgroup SIG_Lanes_Host_0_LH_Side Signal LH_Side of Message Lanes_Host_0 (0x770)
 *
 * Lane mark side
 *
 * Contains the value table \ref ENUM_Lanes_Host_0_LH_Side.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_0
 * @{
 */

/**
 * Signal LH_Side configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_0_LH_Side and \ref GET_Lanes_Host_0_LH_Side instead.
 */
#define SIG_Lanes_Host_0_LH_Side                    0, 0, 11, 2

/**
 * Signal LH_Side setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_0_LH_Side or \ref INIT_Lanes_Host_0 instead.
 */
#define SETUP_Lanes_Host_0_LH_Side                  0, 0, 11, 2, 0

/**
 * Get signal LH_Side from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_0_LH_Side(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x03) << 0) \
)

/**
 * Set signal LH_Side in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_0_LH_Side(buf, val) { \
	buf[1] &= ~(0x03 << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal LH_Side in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_0_LH_Side(buf) \
	SET_Lanes_Host_0_LH_Side(buf, 0)

/**
 * Signal LH_Side value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_0_LH_Side(x, fmt) \
	((x) * fmt)

/**
 * Signal LH_Side raw initial value.
 */
#define START_Lanes_Host_0_LH_Side                  0

/**
 * Signal LH_Side raw minimum value.
 */
#define MIN_Lanes_Host_0_LH_Side                    0

/**
 * Signal LH_Side raw maximum value.
 */
#define MAX_Lanes_Host_0_LH_Side                    2

/**
 * Signal LH_Side raw offset value.
 */
#define OFF_Lanes_Host_0_LH_Side                    0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Host_0_LH_Side Value Table for Signal LH_Side in Message Lanes_Host_0 (0x770)
 *
 * Enum values defined for \ref SIG_Lanes_Host_0_LH_Side.
 *
 * @ingroup SIG_Lanes_Host_0_LH_Side
 */

/**
 * Value table Lanes_Host_0_LH_Side entry RIGHT.
 *
 * @ingroup ENUM_Lanes_Host_0_LH_Side
 */
#define Lanes_Host_0_LH_Side_RIGHT               2

/**
 * Value table Lanes_Host_0_LH_Side entry LEFT.
 *
 * @ingroup ENUM_Lanes_Host_0_LH_Side
 */
#define Lanes_Host_0_LH_Side_LEFT                1

/**
 * Value table Lanes_Host_0_LH_Side entry UNKNOWN.
 *
 * @ingroup ENUM_Lanes_Host_0_LH_Side
 */
#define Lanes_Host_0_LH_Side_UNKNOWN             0

/**
 * @defgroup SIG_Lanes_Host_0_LH_VR_Start Signal LH_VR_Start of Message Lanes_Host_0 (0x770)
 *
 * Start of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_0
 * @{
 */

/**
 * Signal LH_VR_Start configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_0_LH_VR_Start and \ref GET_Lanes_Host_0_LH_VR_Start instead.
 */
#define SIG_Lanes_Host_0_LH_VR_Start                0, 0, 13, 15

/**
 * Signal LH_VR_Start setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_0_LH_VR_Start or \ref INIT_Lanes_Host_0 instead.
 */
#define SETUP_Lanes_Host_0_LH_VR_Start              0, 0, 13, 15, 0

/**
 * Get signal LH_VR_Start from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_0_LH_VR_Start(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 11) \
)

/**
 * Set signal LH_VR_Start in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_0_LH_VR_Start(buf, val) { \
	buf[1] &= ~(0x07 << 5); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x0f) << 0; \
}

/**
 * Set signal LH_VR_Start in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_0_LH_VR_Start(buf) \
	SET_Lanes_Host_0_LH_VR_Start(buf, 0)

/**
 * Signal LH_VR_Start value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_0_LH_VR_Start(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal LH_VR_Start raw initial value.
 */
#define START_Lanes_Host_0_LH_VR_Start              0

/**
 * Signal LH_VR_Start raw minimum value.
 */
#define MIN_Lanes_Host_0_LH_VR_Start                0

/**
 * Signal LH_VR_Start raw maximum value.
 */
#define MAX_Lanes_Host_0_LH_VR_Start                20000

/**
 * Signal LH_VR_Start raw offset value.
 */
#define OFF_Lanes_Host_0_LH_VR_Start                0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_0_LH_VR_End Signal LH_VR_End of Message Lanes_Host_0 (0x770)
 *
 * End of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_0
 * @{
 */

/**
 * Signal LH_VR_End configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_0_LH_VR_End and \ref GET_Lanes_Host_0_LH_VR_End instead.
 */
#define SIG_Lanes_Host_0_LH_VR_End                  0, 0, 28, 15

/**
 * Signal LH_VR_End setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_0_LH_VR_End or \ref INIT_Lanes_Host_0 instead.
 */
#define SETUP_Lanes_Host_0_LH_VR_End                0, 0, 28, 15, 0

/**
 * Get signal LH_VR_End from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_0_LH_VR_End(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 4) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x07) << 12) \
)

/**
 * Set signal LH_VR_End in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_0_LH_VR_End(buf, val) { \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[5] &= ~(0x07 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 12) & 0x07) << 0; \
}

/**
 * Set signal LH_VR_End in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_0_LH_VR_End(buf) \
	SET_Lanes_Host_0_LH_VR_End(buf, 0)

/**
 * Signal LH_VR_End value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_0_LH_VR_End(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal LH_VR_End raw initial value.
 */
#define START_Lanes_Host_0_LH_VR_End                0

/**
 * Signal LH_VR_End raw minimum value.
 */
#define MIN_Lanes_Host_0_LH_VR_End                  0

/**
 * Signal LH_VR_End raw maximum value.
 */
#define MAX_Lanes_Host_0_LH_VR_End                  20000

/**
 * Signal LH_VR_End raw offset value.
 */
#define OFF_Lanes_Host_0_LH_VR_End                  0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_0_Reserved Signal Reserved of Message Lanes_Host_0 (0x770)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_0
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_0_Reserved and \ref GET_Lanes_Host_0_Reserved instead.
 */
#define SIG_Lanes_Host_0_Reserved                   0, 0, 43, 5

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_0_Reserved or \ref INIT_Lanes_Host_0 instead.
 */
#define SETUP_Lanes_Host_0_Reserved                 0, 0, 43, 5, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_0_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_0_Reserved(buf, val) { \
	buf[5] &= ~(0x1f << 3); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_0_Reserved(buf) \
	SET_Lanes_Host_0_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_0_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Host_0_Reserved                 0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Host_0_Reserved                   0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Host_0_Reserved                   0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Host_0_Reserved                   0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_1_LH_C0 Signal LH_C0 of Message Lanes_Host_1 (0x771)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_1
 * @{
 */

/**
 * Signal LH_C0 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_1_LH_C0 and \ref GET_Lanes_Host_1_LH_C0 instead.
 */
#define SIG_Lanes_Host_1_LH_C0                      0, 0, 0, 11

/**
 * Signal LH_C0 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_1_LH_C0 or \ref INIT_Lanes_Host_1 instead.
 */
#define SETUP_Lanes_Host_1_LH_C0                    0, 0, 0, 11, 0

/**
 * Get signal LH_C0 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_1_LH_C0(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x07) << 8) \
)

/**
 * Set signal LH_C0 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_1_LH_C0(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x07) << 0; \
}

/**
 * Set signal LH_C0 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_1_LH_C0(buf) \
	SET_Lanes_Host_1_LH_C0(buf, 0)

/**
 * Signal LH_C0 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_1_LH_C0(x, fmt) \
	((x) * fmt / 100 + fmt * (-10))

/**
 * Signal LH_C0 raw initial value.
 */
#define START_Lanes_Host_1_LH_C0                    0

/**
 * Signal LH_C0 raw minimum value.
 */
#define MIN_Lanes_Host_1_LH_C0                      0

/**
 * Signal LH_C0 raw maximum value.
 */
#define MAX_Lanes_Host_1_LH_C0                      2000

/**
 * Signal LH_C0 raw offset value.
 */
#define OFF_Lanes_Host_1_LH_C0                      -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_1_LH_C1 Signal LH_C1 of Message Lanes_Host_1 (0x771)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_1
 * @{
 */

/**
 * Signal LH_C1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_1_LH_C1 and \ref GET_Lanes_Host_1_LH_C1 instead.
 */
#define SIG_Lanes_Host_1_LH_C1                      0, 0, 11, 10

/**
 * Signal LH_C1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_1_LH_C1 or \ref INIT_Lanes_Host_1 instead.
 */
#define SETUP_Lanes_Host_1_LH_C1                    0, 0, 11, 10, 0

/**
 * Get signal LH_C1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_1_LH_C1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x1f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 5) \
)

/**
 * Set signal LH_C1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_1_LH_C1(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
	buf[2] &= ~(0x1f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
}

/**
 * Set signal LH_C1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_1_LH_C1(buf) \
	SET_Lanes_Host_1_LH_C1(buf, 0)

/**
 * Signal LH_C1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_1_LH_C1(x, fmt) \
	((x) * fmt * 977 / 1000000 + fmt * (-383325831) / 1073741824)

/**
 * Signal LH_C1 raw initial value.
 */
#define START_Lanes_Host_1_LH_C1                    0

/**
 * Signal LH_C1 raw minimum value.
 */
#define MIN_Lanes_Host_1_LH_C1                      0

/**
 * Signal LH_C1 raw maximum value.
 */
#define MAX_Lanes_Host_1_LH_C1                      731

/**
 * Signal LH_C1 raw offset value.
 */
#define OFF_Lanes_Host_1_LH_C1                      -365

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_1_LH_C2 Signal LH_C2 of Message Lanes_Host_1 (0x771)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_1
 * @{
 */

/**
 * Signal LH_C2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_1_LH_C2 and \ref GET_Lanes_Host_1_LH_C2 instead.
 */
#define SIG_Lanes_Host_1_LH_C2                      0, 0, 21, 16

/**
 * Signal LH_C2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_1_LH_C2 or \ref INIT_Lanes_Host_1 instead.
 */
#define SETUP_Lanes_Host_1_LH_C2                    0, 0, 21, 16, 0

/**
 * Get signal LH_C2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_1_LH_C2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal LH_C2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_1_LH_C2(buf, val) { \
	buf[2] &= ~(0x07 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal LH_C2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_1_LH_C2(buf) \
	SET_Lanes_Host_1_LH_C2(buf, 0)

/**
 * Signal LH_C2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_1_LH_C2(x, fmt) \
	((x) * fmt * 500 / 511770726 + fmt * (-4) / 125)

/**
 * Signal LH_C2 raw initial value.
 */
#define START_Lanes_Host_1_LH_C2                    0

/**
 * Signal LH_C2 raw minimum value.
 */
#define MIN_Lanes_Host_1_LH_C2                      0

/**
 * Signal LH_C2 raw maximum value.
 */
#define MAX_Lanes_Host_1_LH_C2                      65507

/**
 * Signal LH_C2 raw offset value.
 */
#define OFF_Lanes_Host_1_LH_C2                      -32753

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_1_LH_C3 Signal LH_C3 of Message Lanes_Host_1 (0x771)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_1
 * @{
 */

/**
 * Signal LH_C3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_1_LH_C3 and \ref GET_Lanes_Host_1_LH_C3 instead.
 */
#define SIG_Lanes_Host_1_LH_C3                      0, 0, 37, 16

/**
 * Signal LH_C3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_1_LH_C3 or \ref INIT_Lanes_Host_1 instead.
 */
#define SETUP_Lanes_Host_1_LH_C3                    0, 0, 37, 16, 0

/**
 * Get signal LH_C3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_1_LH_C3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal LH_C3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_1_LH_C3(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal LH_C3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_1_LH_C3(buf) \
	SET_Lanes_Host_1_LH_C3(buf, 0)

/**
 * Signal LH_C3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_1_LH_C3(x, fmt) \
	((x) * fmt / 268435456 + fmt * 61 / (-500000))

/**
 * Signal LH_C3 raw initial value.
 */
#define START_Lanes_Host_1_LH_C3                    0

/**
 * Signal LH_C3 raw minimum value.
 */
#define MIN_Lanes_Host_1_LH_C3                      0

/**
 * Signal LH_C3 raw maximum value.
 */
#define MAX_Lanes_Host_1_LH_C3                      65416

/**
 * Signal LH_C3 raw offset value.
 */
#define OFF_Lanes_Host_1_LH_C3                      -32708

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_1_Reserved Signal Reserved of Message Lanes_Host_1 (0x771)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_1
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_1_Reserved and \ref GET_Lanes_Host_1_Reserved instead.
 */
#define SIG_Lanes_Host_1_Reserved                   0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_1_Reserved or \ref INIT_Lanes_Host_1 instead.
 */
#define SETUP_Lanes_Host_1_Reserved                 0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_1_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_1_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_1_Reserved(buf) \
	SET_Lanes_Host_1_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_1_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Host_1_Reserved                 0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Host_1_Reserved                   0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Host_1_Reserved                   0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Host_1_Reserved                   0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_2_LH_Confidence Signal LH_Confidence of Message Lanes_Host_2 (0x772)
 *
 * Confidence of lane mark 
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_2
 * @{
 */

/**
 * Signal LH_Confidence configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_2_LH_Confidence and \ref GET_Lanes_Host_2_LH_Confidence instead.
 */
#define SIG_Lanes_Host_2_LH_Confidence              0, 0, 0, 7

/**
 * Signal LH_Confidence setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_2_LH_Confidence or \ref INIT_Lanes_Host_2 instead.
 */
#define SETUP_Lanes_Host_2_LH_Confidence            0, 0, 0, 7, 0

/**
 * Get signal LH_Confidence from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_2_LH_Confidence(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0x7f) << 0) \
)

/**
 * Set signal LH_Confidence in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_2_LH_Confidence(buf, val) { \
	buf[0] &= ~(0x7f << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x7f) << 0; \
}

/**
 * Set signal LH_Confidence in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_2_LH_Confidence(buf) \
	SET_Lanes_Host_2_LH_Confidence(buf, 0)

/**
 * Signal LH_Confidence value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_2_LH_Confidence(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal LH_Confidence raw initial value.
 */
#define START_Lanes_Host_2_LH_Confidence            0

/**
 * Signal LH_Confidence raw minimum value.
 */
#define MIN_Lanes_Host_2_LH_Confidence              0

/**
 * Signal LH_Confidence raw maximum value.
 */
#define MAX_Lanes_Host_2_LH_Confidence              100

/**
 * Signal LH_Confidence raw offset value.
 */
#define OFF_Lanes_Host_2_LH_Confidence              0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_2_LH_Lanemark_Type Signal LH_Lanemark_Type of Message Lanes_Host_2 (0x772)
 *
 * Lane Mark Type Classification (first segment only)
 *
 * Contains the value table \ref ENUM_Lanes_Host_2_LH_Lanemark_Type.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_2
 * @{
 */

/**
 * Signal LH_Lanemark_Type configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_2_LH_Lanemark_Type and \ref GET_Lanes_Host_2_LH_Lanemark_Type instead.
 */
#define SIG_Lanes_Host_2_LH_Lanemark_Type           0, 0, 7, 4

/**
 * Signal LH_Lanemark_Type setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_2_LH_Lanemark_Type or \ref INIT_Lanes_Host_2 instead.
 */
#define SETUP_Lanes_Host_2_LH_Lanemark_Type         0, 0, 7, 4, 0

/**
 * Get signal LH_Lanemark_Type from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_2_LH_Lanemark_Type(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 7) & 0x01) << 0) \
	| (uint8_t)(+(uint8_t)((buf[1] >> 0) & 0x07) << 1) \
)

/**
 * Set signal LH_Lanemark_Type in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_2_LH_Lanemark_Type(buf, val) { \
	buf[0] &= ~(0x01 << 7); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0x01) << 7; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= (((uint8_t)(val) >> 1) & 0x07) << 0; \
}

/**
 * Set signal LH_Lanemark_Type in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_2_LH_Lanemark_Type(buf) \
	SET_Lanes_Host_2_LH_Lanemark_Type(buf, 0)

/**
 * Signal LH_Lanemark_Type value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_2_LH_Lanemark_Type(x, fmt) \
	((x) * fmt)

/**
 * Signal LH_Lanemark_Type raw initial value.
 */
#define START_Lanes_Host_2_LH_Lanemark_Type         0

/**
 * Signal LH_Lanemark_Type raw minimum value.
 */
#define MIN_Lanes_Host_2_LH_Lanemark_Type           0

/**
 * Signal LH_Lanemark_Type raw maximum value.
 */
#define MAX_Lanes_Host_2_LH_Lanemark_Type           6

/**
 * Signal LH_Lanemark_Type raw offset value.
 */
#define OFF_Lanes_Host_2_LH_Lanemark_Type           0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Host_2_LH_Lanemark_Type Value Table for Signal LH_Lanemark_Type in Message Lanes_Host_2 (0x772)
 *
 * Enum values defined for \ref SIG_Lanes_Host_2_LH_Lanemark_Type.
 *
 * @ingroup SIG_Lanes_Host_2_LH_Lanemark_Type
 */

/**
 * Value table Lanes_Host_2_LH_Lanemark_Type entry HOV_LANE.
 *
 * @ingroup ENUM_Lanes_Host_2_LH_Lanemark_Type
 */
#define Lanes_Host_2_LH_Lanemark_Type_HOV_LANE            6

/**
 * Value table Lanes_Host_2_LH_Lanemark_Type entry DECELERATION.
 *
 * @ingroup ENUM_Lanes_Host_2_LH_Lanemark_Type
 */
#define Lanes_Host_2_LH_Lanemark_Type_DECELERATION        5

/**
 * Value table Lanes_Host_2_LH_Lanemark_Type entry BOTTS.
 *
 * @ingroup ENUM_Lanes_Host_2_LH_Lanemark_Type
 */
#define Lanes_Host_2_LH_Lanemark_Type_BOTTS               4

/**
 * Value table Lanes_Host_2_LH_Lanemark_Type entry DLM.
 *
 * @ingroup ENUM_Lanes_Host_2_LH_Lanemark_Type
 */
#define Lanes_Host_2_LH_Lanemark_Type_DLM                 3

/**
 * Value table Lanes_Host_2_LH_Lanemark_Type entry DASHED.
 *
 * @ingroup ENUM_Lanes_Host_2_LH_Lanemark_Type
 */
#define Lanes_Host_2_LH_Lanemark_Type_DASHED              2

/**
 * Value table Lanes_Host_2_LH_Lanemark_Type entry SOLID.
 *
 * @ingroup ENUM_Lanes_Host_2_LH_Lanemark_Type
 */
#define Lanes_Host_2_LH_Lanemark_Type_SOLID               1

/**
 * Value table Lanes_Host_2_LH_Lanemark_Type entry UNDECIDED.
 *
 * @ingroup ENUM_Lanes_Host_2_LH_Lanemark_Type
 */
#define Lanes_Host_2_LH_Lanemark_Type_UNDECIDED           0

/**
 * @defgroup SIG_Lanes_Host_2_LH_Side Signal LH_Side of Message Lanes_Host_2 (0x772)
 *
 * Lane mark side
 *
 * Contains the value table \ref ENUM_Lanes_Host_2_LH_Side.
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_2
 * @{
 */

/**
 * Signal LH_Side configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_2_LH_Side and \ref GET_Lanes_Host_2_LH_Side instead.
 */
#define SIG_Lanes_Host_2_LH_Side                    0, 0, 11, 2

/**
 * Signal LH_Side setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_2_LH_Side or \ref INIT_Lanes_Host_2 instead.
 */
#define SETUP_Lanes_Host_2_LH_Side                  0, 0, 11, 2, 0

/**
 * Get signal LH_Side from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_2_LH_Side(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x03) << 0) \
)

/**
 * Set signal LH_Side in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_2_LH_Side(buf, val) { \
	buf[1] &= ~(0x03 << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x03) << 3; \
}

/**
 * Set signal LH_Side in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_2_LH_Side(buf) \
	SET_Lanes_Host_2_LH_Side(buf, 0)

/**
 * Signal LH_Side value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_2_LH_Side(x, fmt) \
	((x) * fmt)

/**
 * Signal LH_Side raw initial value.
 */
#define START_Lanes_Host_2_LH_Side                  0

/**
 * Signal LH_Side raw minimum value.
 */
#define MIN_Lanes_Host_2_LH_Side                    0

/**
 * Signal LH_Side raw maximum value.
 */
#define MAX_Lanes_Host_2_LH_Side                    2

/**
 * Signal LH_Side raw offset value.
 */
#define OFF_Lanes_Host_2_LH_Side                    0

/**
 * @}
 */

/**
 * @defgroup ENUM_Lanes_Host_2_LH_Side Value Table for Signal LH_Side in Message Lanes_Host_2 (0x772)
 *
 * Enum values defined for \ref SIG_Lanes_Host_2_LH_Side.
 *
 * @ingroup SIG_Lanes_Host_2_LH_Side
 */

/**
 * Value table Lanes_Host_2_LH_Side entry RIGHT.
 *
 * @ingroup ENUM_Lanes_Host_2_LH_Side
 */
#define Lanes_Host_2_LH_Side_RIGHT               2

/**
 * Value table Lanes_Host_2_LH_Side entry LEFT.
 *
 * @ingroup ENUM_Lanes_Host_2_LH_Side
 */
#define Lanes_Host_2_LH_Side_LEFT                1

/**
 * Value table Lanes_Host_2_LH_Side entry UNKNOWN.
 *
 * @ingroup ENUM_Lanes_Host_2_LH_Side
 */
#define Lanes_Host_2_LH_Side_UNKNOWN             0

/**
 * @defgroup SIG_Lanes_Host_2_LH_VR_Start Signal LH_VR_Start of Message Lanes_Host_2 (0x772)
 *
 * Start of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_2
 * @{
 */

/**
 * Signal LH_VR_Start configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_2_LH_VR_Start and \ref GET_Lanes_Host_2_LH_VR_Start instead.
 */
#define SIG_Lanes_Host_2_LH_VR_Start                0, 0, 13, 15

/**
 * Signal LH_VR_Start setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_2_LH_VR_Start or \ref INIT_Lanes_Host_2 instead.
 */
#define SETUP_Lanes_Host_2_LH_VR_Start              0, 0, 13, 15, 0

/**
 * Get signal LH_VR_Start from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_2_LH_VR_Start(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0x0f) << 11) \
)

/**
 * Set signal LH_VR_Start in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_2_LH_VR_Start(buf, val) { \
	buf[1] &= ~(0x07 << 5); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[2] &= ~(0xff << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[3] &= ~(0x0f << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x0f) << 0; \
}

/**
 * Set signal LH_VR_Start in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_2_LH_VR_Start(buf) \
	SET_Lanes_Host_2_LH_VR_Start(buf, 0)

/**
 * Signal LH_VR_Start value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_2_LH_VR_Start(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal LH_VR_Start raw initial value.
 */
#define START_Lanes_Host_2_LH_VR_Start              0

/**
 * Signal LH_VR_Start raw minimum value.
 */
#define MIN_Lanes_Host_2_LH_VR_Start                0

/**
 * Signal LH_VR_Start raw maximum value.
 */
#define MAX_Lanes_Host_2_LH_VR_Start                20000

/**
 * Signal LH_VR_Start raw offset value.
 */
#define OFF_Lanes_Host_2_LH_VR_Start                0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_2_LH_VR_End Signal LH_VR_End of Message Lanes_Host_2 (0x772)
 *
 * End of longitudinal view range of lane mark
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_2
 * @{
 */

/**
 * Signal LH_VR_End configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_2_LH_VR_End and \ref GET_Lanes_Host_2_LH_VR_End instead.
 */
#define SIG_Lanes_Host_2_LH_VR_End                  0, 0, 28, 15

/**
 * Signal LH_VR_End setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_2_LH_VR_End or \ref INIT_Lanes_Host_2 instead.
 */
#define SETUP_Lanes_Host_2_LH_VR_End                0, 0, 28, 15, 0

/**
 * Get signal LH_VR_End from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_2_LH_VR_End(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[3] >> 4) & 0x0f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0xff) << 4) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0x07) << 12) \
)

/**
 * Set signal LH_VR_End in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_2_LH_VR_End(buf, val) { \
	buf[3] &= ~(0x0f << 4); \
	buf[3] |= (((uint8_t)(val) >> 0) & 0x0f) << 4; \
	buf[4] &= ~(0xff << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 4) & 0xff) << 0; \
	buf[5] &= ~(0x07 << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 12) & 0x07) << 0; \
}

/**
 * Set signal LH_VR_End in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_2_LH_VR_End(buf) \
	SET_Lanes_Host_2_LH_VR_End(buf, 0)

/**
 * Signal LH_VR_End value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_2_LH_VR_End(x, fmt) \
	((x) * fmt / 100)

/**
 * Signal LH_VR_End raw initial value.
 */
#define START_Lanes_Host_2_LH_VR_End                0

/**
 * Signal LH_VR_End raw minimum value.
 */
#define MIN_Lanes_Host_2_LH_VR_End                  0

/**
 * Signal LH_VR_End raw maximum value.
 */
#define MAX_Lanes_Host_2_LH_VR_End                  20000

/**
 * Signal LH_VR_End raw offset value.
 */
#define OFF_Lanes_Host_2_LH_VR_End                  0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_2_Reserved Signal Reserved of Message Lanes_Host_2 (0x772)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_2
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_2_Reserved and \ref GET_Lanes_Host_2_Reserved instead.
 */
#define SIG_Lanes_Host_2_Reserved                   0, 0, 43, 5

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_2_Reserved or \ref INIT_Lanes_Host_2 instead.
 */
#define SETUP_Lanes_Host_2_Reserved                 0, 0, 43, 5, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_2_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[5] >> 3) & 0x1f) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_2_Reserved(buf, val) { \
	buf[5] &= ~(0x1f << 3); \
	buf[5] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_2_Reserved(buf) \
	SET_Lanes_Host_2_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_2_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Host_2_Reserved                 0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Host_2_Reserved                   0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Host_2_Reserved                   0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Host_2_Reserved                   0

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_3_LH_C0 Signal LH_C0 of Message Lanes_Host_3 (0x773)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_3
 * @{
 */

/**
 * Signal LH_C0 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_3_LH_C0 and \ref GET_Lanes_Host_3_LH_C0 instead.
 */
#define SIG_Lanes_Host_3_LH_C0                      0, 0, 0, 11

/**
 * Signal LH_C0 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_3_LH_C0 or \ref INIT_Lanes_Host_3 instead.
 */
#define SETUP_Lanes_Host_3_LH_C0                    0, 0, 0, 11, 0

/**
 * Get signal LH_C0 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_3_LH_C0(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[0] >> 0) & 0xff) << 0) \
	| (uint16_t)(+(uint16_t)((buf[1] >> 0) & 0x07) << 8) \
)

/**
 * Set signal LH_C0 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_3_LH_C0(buf, val) { \
	buf[0] &= ~(0xff << 0); \
	buf[0] |= (((uint8_t)(val) >> 0) & 0xff) << 0; \
	buf[1] &= ~(0x07 << 0); \
	buf[1] |= ((uint8_t)((uint16_t)(val) >> 8) & 0x07) << 0; \
}

/**
 * Set signal LH_C0 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_3_LH_C0(buf) \
	SET_Lanes_Host_3_LH_C0(buf, 0)

/**
 * Signal LH_C0 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_3_LH_C0(x, fmt) \
	((x) * fmt / 100 + fmt * (-10))

/**
 * Signal LH_C0 raw initial value.
 */
#define START_Lanes_Host_3_LH_C0                    0

/**
 * Signal LH_C0 raw minimum value.
 */
#define MIN_Lanes_Host_3_LH_C0                      0

/**
 * Signal LH_C0 raw maximum value.
 */
#define MAX_Lanes_Host_3_LH_C0                      2000

/**
 * Signal LH_C0 raw offset value.
 */
#define OFF_Lanes_Host_3_LH_C0                      -1000

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_3_LH_C1 Signal LH_C1 of Message Lanes_Host_3 (0x773)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_3
 * @{
 */

/**
 * Signal LH_C1 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_3_LH_C1 and \ref GET_Lanes_Host_3_LH_C1 instead.
 */
#define SIG_Lanes_Host_3_LH_C1                      0, 0, 11, 10

/**
 * Signal LH_C1 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_3_LH_C1 or \ref INIT_Lanes_Host_3 instead.
 */
#define SETUP_Lanes_Host_3_LH_C1                    0, 0, 11, 10, 0

/**
 * Get signal LH_C1 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_3_LH_C1(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[1] >> 3) & 0x1f) << 0) \
	| (uint16_t)(+(uint16_t)((buf[2] >> 0) & 0x1f) << 5) \
)

/**
 * Set signal LH_C1 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_3_LH_C1(buf, val) { \
	buf[1] &= ~(0x1f << 3); \
	buf[1] |= (((uint8_t)(val) >> 0) & 0x1f) << 3; \
	buf[2] &= ~(0x1f << 0); \
	buf[2] |= ((uint8_t)((uint16_t)(val) >> 5) & 0x1f) << 0; \
}

/**
 * Set signal LH_C1 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_3_LH_C1(buf) \
	SET_Lanes_Host_3_LH_C1(buf, 0)

/**
 * Signal LH_C1 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_3_LH_C1(x, fmt) \
	((x) * fmt * 977 / 1000000 + fmt * (-383325831) / 1073741824)

/**
 * Signal LH_C1 raw initial value.
 */
#define START_Lanes_Host_3_LH_C1                    0

/**
 * Signal LH_C1 raw minimum value.
 */
#define MIN_Lanes_Host_3_LH_C1                      0

/**
 * Signal LH_C1 raw maximum value.
 */
#define MAX_Lanes_Host_3_LH_C1                      731

/**
 * Signal LH_C1 raw offset value.
 */
#define OFF_Lanes_Host_3_LH_C1                      -365

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_3_LH_C2 Signal LH_C2 of Message Lanes_Host_3 (0x773)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_3
 * @{
 */

/**
 * Signal LH_C2 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_3_LH_C2 and \ref GET_Lanes_Host_3_LH_C2 instead.
 */
#define SIG_Lanes_Host_3_LH_C2                      0, 0, 21, 16

/**
 * Signal LH_C2 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_3_LH_C2 or \ref INIT_Lanes_Host_3 instead.
 */
#define SETUP_Lanes_Host_3_LH_C2                    0, 0, 21, 16, 0

/**
 * Get signal LH_C2 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_3_LH_C2(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[2] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[3] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[4] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal LH_C2 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_3_LH_C2(buf, val) { \
	buf[2] &= ~(0x07 << 5); \
	buf[2] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[3] &= ~(0xff << 0); \
	buf[3] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[4] &= ~(0x1f << 0); \
	buf[4] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal LH_C2 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_3_LH_C2(buf) \
	SET_Lanes_Host_3_LH_C2(buf, 0)

/**
 * Signal LH_C2 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_3_LH_C2(x, fmt) \
	((x) * fmt * 500 / 511770726 + fmt * (-4) / 125)

/**
 * Signal LH_C2 raw initial value.
 */
#define START_Lanes_Host_3_LH_C2                    0

/**
 * Signal LH_C2 raw minimum value.
 */
#define MIN_Lanes_Host_3_LH_C2                      0

/**
 * Signal LH_C2 raw maximum value.
 */
#define MAX_Lanes_Host_3_LH_C2                      65507

/**
 * Signal LH_C2 raw offset value.
 */
#define OFF_Lanes_Host_3_LH_C2                      -32753

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_3_LH_C3 Signal LH_C3 of Message Lanes_Host_3 (0x773)
 *
 * Ci is coefficient corresponding to variable with power of 'i'
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_3
 * @{
 */

/**
 * Signal LH_C3 configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_3_LH_C3 and \ref GET_Lanes_Host_3_LH_C3 instead.
 */
#define SIG_Lanes_Host_3_LH_C3                      0, 0, 37, 16

/**
 * Signal LH_C3 setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_3_LH_C3 or \ref INIT_Lanes_Host_3 instead.
 */
#define SETUP_Lanes_Host_3_LH_C3                    0, 0, 37, 16, 0

/**
 * Get signal LH_C3 from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_3_LH_C3(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[4] >> 5) & 0x07) << 0) \
	| (uint16_t)(+(uint16_t)((buf[5] >> 0) & 0xff) << 3) \
	| (uint16_t)(+(uint16_t)((buf[6] >> 0) & 0x1f) << 11) \
)

/**
 * Set signal LH_C3 in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_3_LH_C3(buf, val) { \
	buf[4] &= ~(0x07 << 5); \
	buf[4] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
	buf[5] &= ~(0xff << 0); \
	buf[5] |= ((uint8_t)((uint16_t)(val) >> 3) & 0xff) << 0; \
	buf[6] &= ~(0x1f << 0); \
	buf[6] |= ((uint8_t)((uint16_t)(val) >> 11) & 0x1f) << 0; \
}

/**
 * Set signal LH_C3 in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_3_LH_C3(buf) \
	SET_Lanes_Host_3_LH_C3(buf, 0)

/**
 * Signal LH_C3 value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_3_LH_C3(x, fmt) \
	((x) * fmt / 268435456 + fmt * 61 / (-500000))

/**
 * Signal LH_C3 raw initial value.
 */
#define START_Lanes_Host_3_LH_C3                    0

/**
 * Signal LH_C3 raw minimum value.
 */
#define MIN_Lanes_Host_3_LH_C3                      0

/**
 * Signal LH_C3 raw maximum value.
 */
#define MAX_Lanes_Host_3_LH_C3                      65416

/**
 * Signal LH_C3 raw offset value.
 */
#define OFF_Lanes_Host_3_LH_C3                      -32708

/**
 * @}
 */

/**
 * @defgroup SIG_Lanes_Host_3_Reserved Signal Reserved of Message Lanes_Host_3 (0x773)
 *
 * Received by the ECUs:
 *
 * @ingroup MSG_Lanes_Host_3
 * @{
 */

/**
 * Signal Reserved configuration tuple.
 *
 * @deprecated
 *	Use \ref SET_Lanes_Host_3_Reserved and \ref GET_Lanes_Host_3_Reserved instead.
 */
#define SIG_Lanes_Host_3_Reserved                   0, 0, 53, 3

/**
 * Signal Reserved setup tuple.
 *
 * @deprecated
 *	Use \ref INITSIG_Lanes_Host_3_Reserved or \ref INIT_Lanes_Host_3 instead.
 */
#define SETUP_Lanes_Host_3_Reserved                 0, 0, 53, 3, 0

/**
 * Get signal Reserved from buffer.
 *
 * @param buf
 *	The can message buffer containing the signal
 * @return
 *	The raw signal
 */
#define GET_Lanes_Host_3_Reserved(buf) (0 \
	| (uint8_t)(+(uint8_t)((buf[6] >> 5) & 0x07) << 0) \
)

/**
 * Set signal Reserved in buffer.
 *
 * @param buf
 *	The can message buffer to add the signal to
 * @param val
 *	The raw value to set the signal to
 */
#define SET_Lanes_Host_3_Reserved(buf, val) { \
	buf[6] &= ~(0x07 << 5); \
	buf[6] |= (((uint8_t)(val) >> 0) & 0x07) << 5; \
}

/**
 * Set signal Reserved in buffer to its initial value.
 *
 * @param buf
 *	The can message buffer to initialise
 */
#define INITSIG_Lanes_Host_3_Reserved(buf) \
	SET_Lanes_Host_3_Reserved(buf, 0)

/**
 * Signal Reserved value conversion with 16 bit factor and offset.
 *
 * @param x
 *	The raw signal value
 * @param fmt
 *	A factor to adjust values, e.g. 10 to get one additional
 *	digit or 1 / 1000 to dispay a fraction
 * @return
 *	The signal value as a human readable number
 */
#define CALC_Lanes_Host_3_Reserved(x, fmt) \
	((x) * fmt)

/**
 * Signal Reserved raw initial value.
 */
#define START_Lanes_Host_3_Reserved                 0

/**
 * Signal Reserved raw minimum value.
 */
#define MIN_Lanes_Host_3_Reserved                   0

/**
 * Signal Reserved raw maximum value.
 */
#define MAX_Lanes_Host_3_Reserved                   0

/**
 * Signal Reserved raw offset value.
 */
#define OFF_Lanes_Host_3_Reserved                   0

/**
 * @}
 */
#endif
