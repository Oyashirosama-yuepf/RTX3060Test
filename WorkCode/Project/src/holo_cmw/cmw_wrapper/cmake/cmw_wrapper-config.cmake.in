include(${CMAKE_CURRENT_LIST_DIR}/cmw_wrapper-targets.cmake)

function(add_cmw_wrapper_executable target)
    cmake_parse_arguments(
        ARG "ROS;OPENDDS;UMB;DDS_MICRO;MDC_CM;PPS" "INSTALL_DIR"
        "SOURCES;INCLUDES;LIBRARIES;DEFINITIONS;RPATHS" ${ARGN})

    if(NOT target)
        message(FATAL_ERROR "Target name not specified!")
    endif()

    if(IS_ABSOLUTE ${ARG_INSTALL_DIR})
        message(FATAL_ERROR "INSTALL_DIR only accept relative path!")
    endif()

    if(NOT ARG_RPATHS)
        set(ARG_RPATHS ${HOLO_ROOT}/lib ${HOLO_ROOT}/3rdparty/lib)
    endif()

    if(NOT TARGET holo_cmw::ros_wrapper)
        find_package(ros_wrapper QUIET)
    else()
        set(ros_wrapper_FOUND 1)
    endif()

    if(NOT TARGET holo_cmw::opendds_wrapper)
        find_package(opendds_wrapper QUIET)
    else()
        set(opendds_wrapper_FOUND 1)
    endif()

    if(NOT TARGET holo_cmw::umb_wrapper)
        find_package(umb_wrapper QUIET)
    else()
        set(umb_wrapper_FOUND 1)
    endif()

    if(NOT TARGET holo_cmw::dds_micro_wrapper)
        find_package(dds_micro_wrapper QUIET)
    else()
        set(dds_micro_wrapper_FOUND 1)
    endif()

    if(NOT TARGET holo_cmw::mdc_cm_wrapper)
        find_package(mdc_cm_wrapper QUIET)
    else()
        set(mdc_cm_wrapper_FOUND 1)
    endif()

    if(NOT TARGET holo_cmw::pps_wrapper)
        find_package(pps_wrapper QUIET)
    else()
        set(pps_wrapper_FOUND 1)
    endif()

    if(ARG_ROS AND ros_wrapper_FOUND)
        add_executable(${target}_ros ${ARG_SOURCES})
        set_property(TARGET ${target}_ros PROPERTY OUTPUT_NAME ${target})
        set_property(
            TARGET ${target}_ros PROPERTY RUNTIME_OUTPUT_DIRECTORY
                                          ${PROJECT_BINARY_DIR}/bin/ros)
        target_link_libraries(
            ${target}_ros PRIVATE holo_cmw::cmw_wrapper holo_cmw::ros_wrapper
                                  ${ARG_LIBRARIES})
        target_include_directories(${target}_ros PRIVATE ${ARG_INCLUDES})
        target_compile_definitions(
            ${target}_ros PRIVATE "-DCMW_WRAPPER_ENABLE_ROS" ${ARG_DEFINITIONS})

        if(ARG_INSTALL_DIR)
            foreach(input_rpath ${ARG_RPATHS})
                if(IS_ABSOLUTE ${input_rpath})
                    file(RELATIVE_PATH actual_rpath
                         ${CMAKE_INSTALL_PREFIX}/${ARG_INSTALL_DIR}/ros
                         ${input_rpath})
                    set_property(
                        TARGET ${target}_ros
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${actual_rpath}")
                else()
                    set_property(
                        TARGET ${target}_ros
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${input_rpath}")
                endif()
            endforeach()
            set_target_properties(
                ${target}_ros PROPERTIES RUNTIME_OUTPUT_DIRECTORY
                                         ${ARG_INSTALL_DIR}/ros)
            install(TARGETS ${target}_ros DESTINATION ${ARG_INSTALL_DIR}/ros)
        endif()
    endif()

    if(ARG_OPENDDS AND opendds_wrapper_FOUND)
        add_executable(${target}_opendds ${ARG_SOURCES})
        set_property(TARGET ${target}_opendds PROPERTY OUTPUT_NAME ${target})
        set_property(
            TARGET ${target}_opendds PROPERTY RUNTIME_OUTPUT_DIRECTORY
                                              ${PROJECT_BINARY_DIR}/bin/opendds)
        target_link_libraries(
            ${target}_opendds
            PRIVATE holo_cmw::cmw_wrapper holo_cmw::opendds_wrapper
                    ${ARG_LIBRARIES})
        target_include_directories(${target}_opendds PRIVATE ${ARG_INCLUDES})
        target_compile_definitions(
            ${target}_opendds PRIVATE "-DCMW_WRAPPER_ENABLE_OPENDDS"
                                      ${ARG_DEFINITIONS})

        if(ARG_INSTALL_DIR)
            foreach(input_rpath ${ARG_RPATHS})
                if(IS_ABSOLUTE ${input_rpath})
                    file(RELATIVE_PATH actual_rpath
                         ${CMAKE_INSTALL_PREFIX}/${ARG_INSTALL_DIR}/opendds
                         ${input_rpath})
                    set_property(
                        TARGET ${target}_opendds
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${actual_rpath}")
                else()
                    set_property(
                        TARGET ${target}_opendds
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${input_rpath}")
                endif()
            endforeach()
            set_target_properties(
                ${target}_opendds PROPERTIES RUNTIME_OUTPUT_DIRECTORY
                                             ${ARG_INSTALL_DIR}/opendds)
            install(TARGETS ${target}_opendds
                    DESTINATION ${ARG_INSTALL_DIR}/opendds)
        endif()
    endif()

    if(ARG_UMB AND umb_wrapper_FOUND)
        add_executable(${target}_umb ${ARG_SOURCES})
        set_property(TARGET ${target}_umb PROPERTY OUTPUT_NAME ${target})
        set_property(
            TARGET ${target}_umb PROPERTY RUNTIME_OUTPUT_DIRECTORY
                                          ${PROJECT_BINARY_DIR}/bin/umb)
        target_link_libraries(
            ${target}_umb PRIVATE holo_cmw::cmw_wrapper holo_cmw::umb_wrapper
                                  ${ARG_LIBRARIES})
        target_include_directories(${target}_umb PRIVATE ${ARG_INCLUDES})
        target_compile_definitions(
            ${target}_umb PRIVATE "-DCMW_WRAPPER_ENABLE_UMB" ${ARG_DEFINITIONS})

        if(ARG_INSTALL_DIR)
            foreach(input_rpath ${ARG_RPATHS})
                if(IS_ABSOLUTE ${input_rpath})
                    file(RELATIVE_PATH actual_rpath
                         ${CMAKE_INSTALL_PREFIX}/${ARG_INSTALL_DIR}/umb
                         ${input_rpath})
                    set_property(
                        TARGET ${target}_umb
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${actual_rpath}")
                else()
                    set_property(
                        TARGET ${target}_umb
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${input_rpath}")
                endif()
            endforeach()
            set_target_properties(
                ${target}_umb PROPERTIES RUNTIME_OUTPUT_DIRECTORY
                                         ${ARG_INSTALL_DIR}/umb)
            install(TARGETS ${target}_umb DESTINATION ${ARG_INSTALL_DIR}/umb)
        endif()
    endif()

    if(ARG_DDS_MICRO AND dds_micro_wrapper_FOUND)
        add_executable(${target}_dds_micro ${ARG_SOURCES})
        set_property(TARGET ${target}_dds_micro PROPERTY OUTPUT_NAME ${target})
        set_property(
            TARGET ${target}_dds_micro
            PROPERTY RUNTIME_OUTPUT_DIRECTORY
                     ${PROJECT_BINARY_DIR}/bin/dds_micro)
        target_link_libraries(
            ${target}_dds_micro
            PRIVATE holo_cmw::cmw_wrapper holo_cmw::dds_micro_wrapper
                    ${ARG_LIBRARIES})
        target_include_directories(${target}_dds_micro PRIVATE ${ARG_INCLUDES})
        target_compile_definitions(
            ${target}_dds_micro PRIVATE "-DCMW_WRAPPER_ENABLE_DDS_MICRO"
                                        ${ARG_DEFINITIONS})

        if(ARG_INSTALL_DIR)
            foreach(input_rpath ${ARG_RPATHS})
                if(IS_ABSOLUTE ${input_rpath})
                    file(RELATIVE_PATH actual_rpath
                         ${CMAKE_INSTALL_PREFIX}/${ARG_INSTALL_DIR}/dds_micro
                         ${input_rpath})
                    set_property(
                        TARGET ${target}_dds_micro
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${actual_rpath}")
                else()
                    set_property(
                        TARGET ${target}_dds_micro
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${input_rpath}")
                endif()
            endforeach()
            set_target_properties(
                ${target}_dds_micro PROPERTIES RUNTIME_OUTPUT_DIRECTORY
                                               ${ARG_INSTALL_DIR}/dds_micro)
            install(TARGETS ${target}_dds_micro
                    DESTINATION ${ARG_INSTALL_DIR}/dds_micro)
        endif()
    endif()

    if(ARG_MDC_CM AND mdc_cm_wrapper_FOUND)
        add_executable(${target}_mdc_cm ${ARG_SOURCES})
        set_property(TARGET ${target}_mdc_cm PROPERTY OUTPUT_NAME ${target})
        set_property(
            TARGET ${target}_mdc_cm PROPERTY RUNTIME_OUTPUT_DIRECTORY
                                             ${PROJECT_BINARY_DIR}/bin/mdc_cm)
        target_link_libraries(
            ${target}_mdc_cm PRIVATE holo_cmw::cmw_wrapper
                                     holo_cmw::mdc_cm_wrapper ${ARG_LIBRARIES})
        target_include_directories(${target}_mdc_cm PRIVATE ${ARG_INCLUDES})
        target_compile_definitions(
            ${target}_mdc_cm PRIVATE "-DCMW_WRAPPER_ENABLE_MDC_CM"
                                     ${ARG_DEFINITIONS})

        if(ARG_INSTALL_DIR)
            foreach(input_rpath ${ARG_RPATHS})
                if(IS_ABSOLUTE ${input_rpath})
                    file(RELATIVE_PATH actual_rpath
                         ${CMAKE_INSTALL_PREFIX}/${ARG_INSTALL_DIR}/mdc_cm
                         ${input_rpath})
                    set_property(
                        TARGET ${target}_mdc_cm
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${actual_rpath}")
                else()
                    set_property(
                        TARGET ${target}_mdc_cm
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${input_rpath}")
                endif()
            endforeach()
            set_target_properties(
                ${target}_mdc_cm PROPERTIES RUNTIME_OUTPUT_DIRECTORY
                                            ${ARG_INSTALL_DIR}/mdc_cm)
            install(TARGETS ${target}_mdc_cm
                    DESTINATION ${ARG_INSTALL_DIR}/mdc_cm)
        endif()
    endif()

    if(ARG_PPS AND pps_wrapper_FOUND)
        add_executable(${target}_pps ${ARG_SOURCES})
        set_property(TARGET ${target}_pps PROPERTY OUTPUT_NAME ${target})
        set_property(
            TARGET ${target}_pps PROPERTY RUNTIME_OUTPUT_DIRECTORY
                                          ${PROJECT_BINARY_DIR}/bin/pps)
        target_link_libraries(
            ${target}_pps PRIVATE holo_cmw::cmw_wrapper holo_cmw::pps_wrapper
                                  ${ARG_LIBRARIES})
        target_include_directories(${target}_pps PRIVATE ${ARG_INCLUDES})
        target_compile_definitions(
            ${target}_pps PRIVATE "-DCMW_WRAPPER_ENABLE_PPS" ${ARG_DEFINITIONS})

        if(ARG_INSTALL_DIR)
            foreach(input_rpath ${ARG_RPATHS})
                if(IS_ABSOLUTE ${input_rpath})
                    file(RELATIVE_PATH actual_rpath
                         ${CMAKE_INSTALL_PREFIX}/${ARG_INSTALL_DIR}/pps
                         ${input_rpath})
                    set_property(
                        TARGET ${target}_pps
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${actual_rpath}")
                else()
                    set_property(
                        TARGET ${target}_pps
                        APPEND
                        PROPERTY INSTALL_RPATH "\$ORIGIN/${input_rpath}")
                endif()
            endforeach()
            set_target_properties(
                ${target}_pps PROPERTIES RUNTIME_OUTPUT_DIRECTORY
                                         ${ARG_INSTALL_DIR}/pps)
            install(TARGETS ${target}_pps DESTINATION ${ARG_INSTALL_DIR}/pps)
        endif()
    endif()
endfunction()

function(add_cmw_bridge_executable target)
    cmake_parse_arguments(
        ARG "ROS;OPENDDS;UMB;DDS_MICRO;MDC_CM" "INSTALL_DIR"
        "SOURCES;INCLUDES;LIBRARIES;DEFINITIONS;RPATHS" ${ARGN})

    if(NOT target)
        message(FATAL_ERROR "Target name not specified!")
    endif()

    if(IS_ABSOLUTE ${ARG_INSTALL_DIR})
        message(FATAL_ERROR "INSTALL_DIR only accept relative path!")
    endif()

    if(NOT ARG_RPATHS)
        set(ARG_RPATHS ${HOLO_ROOT}/lib ${HOLO_ROOT}/3rdparty/lib)
    endif()

    if(NOT TARGET holo_cmw::ros_wrapper)
        find_package(ros_wrapper QUIET)
    else()
        set(ros_wrapper_FOUND 1)
    endif()

    if(NOT TARGET holo_cmw::opendds_wrapper)
        find_package(opendds_wrapper QUIET)
    else()
        set(opendds_wrapper_FOUND 1)
    endif()

    if(NOT TARGET holo_cmw::umb_wrapper)
        find_package(umb_wrapper QUIET)
    else()
        set(umb_wrapper_FOUND 1)
    endif()

    if(NOT TARGET holo_cmw::dds_micro_wrapper)
        find_package(dds_micro_wrapper QUIET)
    else()
        set(dds_micro_wrapper_FOUND 1)
    endif()

    if(NOT TARGET holo_cmw::mdc_cm_wrapper)
        find_package(mdc_cm_wrapper QUIET)
    else()
        set(mdc_cm_wrapper_FOUND 1)
    endif()

    if(NOT TARGET holo_cmw::pps_wrapper)
        find_package(pps_wrapper QUIET)
    else()
        set(pps_wrapper_FOUND 1)
    endif()

    if(ARG_ROS)
        if(NOT ros_wrapper_FOUND)
            message(
                FATAL_ERROR
                    "Unable to compile bridge app ${target}. ros_wrapper not found!"
            )
        endif()
        list(APPEND CMW_WRAPPER_LIBRARIES holo_cmw::ros_wrapper)
        list(APPEND CMW_WRAPPER_DEFINITIONS "-DCMW_WRAPPER_ENABLE_ROS")
    endif()
    if(ARG_OPENDDS)
        if(NOT opendds_wrapper_FOUND)
            message(
                FATAL_ERROR
                    "Unable to compile bridge app ${target}. opendds_wrapper not found!"
            )
        endif()
        list(APPEND CMW_WRAPPER_LIBRARIES holo_cmw::opendds_wrapper)
        list(APPEND CMW_WRAPPER_DEFINITIONS "-DCMW_WRAPPER_ENABLE_OPENDDS")
    endif()
    if(ARG_UMB)
        if(NOT umb_wrapper_FOUND)
            message(
                FATAL_ERROR
                    "Unable to compile bridge app ${target}. umb_wrapper not found!"
            )
        endif()
        list(APPEND CMW_WRAPPER_LIBRARIES holo_cmw::umb_wrapper)
        list(APPEND CMW_WRAPPER_DEFINITIONS "-DCMW_WRAPPER_ENABLE_UMB")
    endif()
    if(ARG_DDS_MICRO)
        if(NOT dds_micro_wrapper_FOUND)
            message(
                FATAL_ERROR
                    "Unable to compile bridge app ${target}. dds_micro_wrapper not found!"
            )
        endif()
        list(APPEND CMW_WRAPPER_LIBRARIES holo_cmw::dds_micro_wrapper)
        list(APPEND CMW_WRAPPER_DEFINITIONS "-DCMW_WRAPPER_ENABLE_DDS_MICRO")
    endif()
    if(ARG_MDC_CM)
        if(NOT mdc_cm_wrapper_FOUND)
            message(
                FATAL_ERROR
                    "Unable to compile bridge app ${target}. mdc_cm_wrapper not found!"
            )
        endif()
        list(APPEND CMW_WRAPPER_LIBRARIES holo_cmw::mdc_cm_wrapper)
        list(APPEND CMW_WRAPPER_DEFINITIONS "-DCMW_WRAPPER_ENABLE_MDC_CM")
    endif()
    if(ARG_PPS)
        if(NOT pps_wrapper_FOUND)
            message(
                FATAL_ERROR
                    "Unable to compile bridge app ${target}. pps_wrapper not found!"
            )
        endif()
        list(APPEND CMW_WRAPPER_LIBRARIES holo_cmw::pps_wrapper)
        list(APPEND CMW_WRAPPER_DEFINITIONS "-DCMW_WRAPPER_ENABLE_PPS")
    endif()

    add_executable(${target}_bridge ${ARG_SOURCES})
    set_property(TARGET ${target}_bridge PROPERTY OUTPUT_NAME ${target})
    set_property(
        TARGET ${target}_bridge PROPERTY RUNTIME_OUTPUT_DIRECTORY
                                         ${PROJECT_BINARY_DIR}/bin/bridge)
    target_link_libraries(
        ${target}_bridge PRIVATE holo_cmw::cmw_wrapper ${CMW_WRAPPER_LIBRARIES}
                                 ${ARG_LIBRARIES})
    target_include_directories(${target}_bridge PRIVATE ${ARG_INCLUDES})
    target_compile_definitions(
        ${target}_bridge PRIVATE ${CMW_WRAPPER_DEFINITIONS} ${ARG_DEFINITIONS})

    if(ARG_INSTALL_DIR)
        foreach(input_rpath ${ARG_RPATHS})
            if(IS_ABSOLUTE ${input_rpath})
                file(RELATIVE_PATH actual_rpath
                     ${CMAKE_INSTALL_PREFIX}/${ARG_INSTALL_DIR}/bridge
                     ${input_rpath})
                set_property(
                    TARGET ${target}_bridge
                    APPEND
                    PROPERTY INSTALL_RPATH "\$ORIGIN/${actual_rpath}")
            else()
                set_property(
                    TARGET ${target}_bridge
                    APPEND
                    PROPERTY INSTALL_RPATH "\$ORIGIN/${input_rpath}")
            endif()
        endforeach()
        set_target_properties(
            ${target}_bridge PROPERTIES RUNTIME_OUTPUT_DIRECTORY
                                        ${ARG_INSTALL_DIR}/bridge)
        install(TARGETS ${target}_bridge DESTINATION ${ARG_INSTALL_DIR}/bridge)
    endif()
endfunction()
